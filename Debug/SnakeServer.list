
SnakeServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001345c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb0  0801365c  0801365c  0002365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801630c  0801630c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801630c  0801630c  0002630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016314  08016314  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016314  08016314  00026314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016318  08016318  00026318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801631c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006938  2000007c  08016398  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069b4  08016398  000369b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a6ce  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f1e  00000000  00000000  0006a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  00071698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00072ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035ab4  00000000  00000000  00074850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d35c  00000000  00000000  000aa304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112bd3  00000000  00000000  000d7660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ea233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed8  00000000  00000000  001ea288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08013644 	.word	0x08013644

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08013644 	.word	0x08013644

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_ADC1_Init+0x98>)
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ADC1_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <MX_ADC1_Init+0x98>)
 8000638:	f000 fc12 	bl	8000e60 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 f9ad 	bl	80009a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000646:	2304      	movs	r3, #4
 8000648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2301      	movs	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_ADC1_Init+0x98>)
 8000658:	f000 fc46 	bl	8000ee8 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000662:	f000 f99d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000224 	.word	0x20000224
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0x74>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d123      	bne.n	80006e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ce:	2310      	movs	r3, #16
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0x7c>)
 80006e2:	f002 f8f9 	bl	80028d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a36      	ldr	r2, [pc, #216]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0xf4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xf4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_GPIO_Init+0xf4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0xf8>)
 80007aa:	f002 fa41 	bl	8002c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_GPIO_Init+0xfc>)
 80007c6:	f002 f887 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xf8>)
 80007e4:	f002 f878 	bl	80028d8 <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	; 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40020800 	.word	0x40020800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ea      	sub	sp, #424	; 0x1a8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 faac 	bl	8000d5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f845 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f7ff ff77 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800080e:	f000 f9e5 	bl	8000bdc <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000812:	f004 fbff 	bl	8005014 <MX_LWIP_Init>
  MX_ADC1_Init();
 8000816:	f7ff fedf 	bl	80005d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 800081a:	f00f fc33 	bl	8010084 <tcp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800081e:	f004 fd2b 	bl	8005278 <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snake_t snake = { 0 };
 8000822:	463b      	mov	r3, r7
 8000824:	4618      	mov	r0, r3
 8000826:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f011 fe71 	bl	8012514 <memset>
	  food_t food = { 0 };
 8000832:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
	  uint32_t gPrgCycle = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  snake_init(&snake);
 8000842:	463b      	mov	r3, r7
 8000844:	4618      	mov	r0, r3
 8000846:	f00f fe1d 	bl	8010484 <snake_init>

	  for(;;)
	  {
		snake_control(&snake);
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f00f fe0e 	bl	801046e <snake_control>
		snake_move(&snake);
 8000852:	463b      	mov	r3, r7
 8000854:	4618      	mov	r0, r3
 8000856:	f00f fe91 	bl	801057c <snake_move>

		if (snake.state != PLAYING) break;
 800085a:	463b      	mov	r3, r7
 800085c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8000860:	2b00      	cmp	r3, #0
 8000862:	d115      	bne.n	8000890 <main+0x94>

		snake_haseaten(&snake, &food);
 8000864:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8000868:	463b      	mov	r3, r7
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f010 f8cf 	bl	8010a10 <snake_haseaten>
		snake_display(&snake);
 8000872:	463b      	mov	r3, r7
 8000874:	4618      	mov	r0, r3
 8000876:	f00f fe45 	bl	8010504 <snake_display>
		snake_place_food(&snake, &food, gPrgCycle);
 800087a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800087e:	463b      	mov	r3, r7
 8000880:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000884:	4618      	mov	r0, r3
 8000886:	f010 f889 	bl	801099c <snake_place_food>

		MX_LWIP_Process();
 800088a:	f004 fcf5 	bl	8005278 <MX_LWIP_Process>
		snake_control(&snake);
 800088e:	e7dc      	b.n	800084a <main+0x4e>
		if (snake.state != PLAYING) break;
 8000890:	bf00      	nop
  {
 8000892:	e7c4      	b.n	800081e <main+0x22>

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2234      	movs	r2, #52	; 0x34
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f011 fe36 	bl	8012514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b8:	f002 f9d4 	bl	8002c64 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <SystemClock_Config+0xd8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a2a      	ldr	r2, [pc, #168]	; (800096c <SystemClock_Config+0xd8>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <SystemClock_Config+0xd8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SystemClock_Config+0xdc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <SystemClock_Config+0xdc>)
 80008da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SystemClock_Config+0xdc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000904:	23d8      	movs	r3, #216	; 0xd8
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fa03 	bl	8002d24 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000924:	f000 f83c 	bl	80009a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000928:	f002 f9ac 	bl	8002c84 <HAL_PWREx_EnableOverDrive>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000932:	f000 f835 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2107      	movs	r1, #7
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fc93 	bl	8003280 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000960:	f000 f81e 	bl	80009a0 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <_write>:

/* USER CODE BEGIN 4 */
/*printf <=> uart redirection */
int _write(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b29a      	uxth	r2, r3
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <_write+0x28>)
 800098c:	f003 faf0 	bl	8003f70 <HAL_UART_Transmit>
	return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000026c 	.word	0x2000026c

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f9ca 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <USART3_IRQHandler+0x10>)
 8000a4e:	f003 fb23 	bl	8004098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000026c 	.word	0x2000026c

08000a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_kill>:

int _kill(int pid, int sig)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <_kill+0x20>)
 8000a78:	2216      	movs	r2, #22
 8000a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	200069a4 	.word	0x200069a4

08000a90 <_exit>:

void _exit (int status)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffe5 	bl	8000a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aa2:	e7fe      	b.n	8000aa2 <_exit+0x12>

08000aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
	}

return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b06:	605a      	str	r2, [r3, #4]
	return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_isatty>:

int _isatty(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d205      	bcs.n	8000b84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <_sbrk+0x6c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	20080000 	.word	0x20080000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000098 	.word	0x20000098
 8000bb0:	200069b8 	.word	0x200069b8
 8000bb4:	200069a4 	.word	0x200069a4

08000bb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_USART3_UART_Init+0x5c>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000be8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000bec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART3_UART_Init+0x58>)
 8000c20:	f003 f958 	bl	8003ed4 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f7ff feb9 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000026c 	.word	0x2000026c
 8000c38:	40004800 	.word	0x40004800

08000c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ae      	sub	sp, #184	; 0xb8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2290      	movs	r2, #144	; 0x90
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f011 fc59 	bl	8012514 <memset>
  if(uartHandle->Instance==USART3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d144      	bne.n	8000cf6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fd02 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c86:	f7ff fe8b 	bl	80009a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000ce2:	f001 fdf9 	bl	80028d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2027      	movs	r0, #39	; 0x27
 8000cec:	f000 fc27 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf0:	2027      	movs	r0, #39	; 0x27
 8000cf2:	f000 fc40 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	37b8      	adds	r7, #184	; 0xb8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004800 	.word	0x40004800
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d36:	f7ff ff3f 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f011 fbab 	bl	8012494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fd5d 	bl	80007fc <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d50:	0801631c 	.word	0x0801631c
  ldr r2, =_sbss
 8000d54:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d58:	200069b4 	.word	0x200069b4

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>

08000d5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 fbe0 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 f805 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6e:	f7ff fe1d 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fbfb 	bl	8001592 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 fbc3 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	200002f0 	.word	0x200002f0

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200002f0 	.word	0x200002f0

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e031      	b.n	8000eda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d109      	bne.n	8000e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fbfc 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_ADC_Init+0x84>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	f043 0202 	orr.w	r2, r3, #2
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f970 	bl	8001194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	f043 0201 	orr.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eca:	e001      	b.n	8000ed0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	ffffeefd 	.word	0xffffeefd

08000ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_ADC_ConfigChannel+0x1c>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e136      	b.n	8001172 <HAL_ADC_ConfigChannel+0x28a>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d93a      	bls.n	8000f8a <HAL_ADC_ConfigChannel+0xa2>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f1c:	d035      	beq.n	8000f8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68d9      	ldr	r1, [r3, #12]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	3b1e      	subs	r3, #30
 8000f34:	2207      	movs	r2, #7
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a8d      	ldr	r2, [pc, #564]	; (8001180 <HAL_ADC_ConfigChannel+0x298>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10a      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68d9      	ldr	r1, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	061a      	lsls	r2, r3, #24
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f62:	e035      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	4603      	mov	r3, r0
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4403      	add	r3, r0
 8000f7c:	3b1e      	subs	r3, #30
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f88:	e022      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6919      	ldr	r1, [r3, #16]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	400a      	ands	r2, r1
 8000fac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6919      	ldr	r1, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4403      	add	r3, r0
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d824      	bhi.n	8001022 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b05      	subs	r3, #5
 8000fea:	221f      	movs	r2, #31
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	3b05      	subs	r3, #5
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
 8001020:	e04c      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d824      	bhi.n	8001074 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b23      	subs	r3, #35	; 0x23
 800103c:	221f      	movs	r2, #31
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	3b23      	subs	r3, #35	; 0x23
 8001066:	fa00 f203 	lsl.w	r2, r0, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
 8001072:	e023      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3b41      	subs	r3, #65	; 0x41
 8001086:	221f      	movs	r2, #31
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43da      	mvns	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	400a      	ands	r2, r1
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	3b41      	subs	r3, #65	; 0x41
 80010b0:	fa00 f203 	lsl.w	r2, r0, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_ADC_ConfigChannel+0x29c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10a      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1f4>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ce:	d105      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 80010d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a28      	ldr	r2, [pc, #160]	; (8001184 <HAL_ADC_ConfigChannel+0x29c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d10f      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x21e>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d10b      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 80010f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a22      	ldr	r2, [pc, #136]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001104:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_ADC_ConfigChannel+0x29c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d12b      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x280>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_ADC_ConfigChannel+0x298>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_ADC_ConfigChannel+0x23a>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b11      	cmp	r3, #17
 8001120:	d122      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 8001128:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800112c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_ADC_ConfigChannel+0x2a0>)
 8001134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001138:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_ADC_ConfigChannel+0x298>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d111      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_ADC_ConfigChannel+0x2a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_ADC_ConfigChannel+0x2a8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9a      	lsrs	r2, r3, #18
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800115a:	e002      	b.n	8001162 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3b01      	subs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f9      	bne.n	800115c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	10000012 	.word	0x10000012
 8001184:	40012000 	.word	0x40012000
 8001188:	40012300 	.word	0x40012300
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83

08001194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800119c:	4b78      	ldr	r3, [pc, #480]	; (8001380 <ADC_Init+0x1ec>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a77      	ldr	r2, [pc, #476]	; (8001380 <ADC_Init+0x1ec>)
 80011a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <ADC_Init+0x1ec>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4973      	ldr	r1, [pc, #460]	; (8001380 <ADC_Init+0x1ec>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	021a      	lsls	r2, r3, #8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800120a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6899      	ldr	r1, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	4a58      	ldr	r2, [pc, #352]	; (8001384 <ADC_Init+0x1f0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d022      	beq.n	800126e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6899      	ldr	r1, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e00f      	b.n	800128e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800127c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800128c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0202 	bic.w	r2, r2, #2
 800129c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	005a      	lsls	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01b      	beq.n	80012f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6859      	ldr	r1, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	3b01      	subs	r3, #1
 80012e8:	035a      	lsls	r2, r3, #13
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	e007      	b.n	8001304 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001302:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	3b01      	subs	r3, #1
 8001320:	051a      	lsls	r2, r3, #20
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001346:	025a      	lsls	r2, r3, #9
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800135e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6899      	ldr	r1, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	029a      	lsls	r2, r3, #10
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40012300 	.word	0x40012300
 8001384:	0f000001 	.word	0x0f000001

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	05fa0000 	.word	0x05fa0000

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff29 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff3e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff8e 	bl	800147c <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff31 	bl	80013ec <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fc22 	bl	8000e00 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e052      	b.n	8001682 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0216 	bic.w	r2, r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_DMA_Abort+0x62>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0208 	bic.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162c:	e013      	b.n	8001656 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162e:	f7ff fbe7 	bl	8000e00 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b05      	cmp	r3, #5
 800163a:	d90c      	bls.n	8001656 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e015      	b.n	8001682 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e4      	bne.n	800162e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	223f      	movs	r2, #63	; 0x3f
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d004      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00c      	b.n	80016c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2205      	movs	r2, #5
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80016e0:	4ba9      	ldr	r3, [pc, #676]	; (8001988 <HAL_ETH_Init+0x2b8>)
 80016e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e181      	b.n	80019fa <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f003 fdc0 	bl	8005290 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b9e      	ldr	r3, [pc, #632]	; (800198c <HAL_ETH_Init+0x2bc>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	4a9d      	ldr	r2, [pc, #628]	; (800198c <HAL_ETH_Init+0x2bc>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	4b9b      	ldr	r3, [pc, #620]	; (800198c <HAL_ETH_Init+0x2bc>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001728:	4b99      	ldr	r3, [pc, #612]	; (8001990 <HAL_ETH_Init+0x2c0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_ETH_Init+0x2c0>)
 800172e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001732:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001734:	4b96      	ldr	r3, [pc, #600]	; (8001990 <HAL_ETH_Init+0x2c0>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4994      	ldr	r1, [pc, #592]	; (8001990 <HAL_ETH_Init+0x2c0>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800175a:	f7ff fb51 	bl	8000e00 <HAL_GetTick>
 800175e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001760:	e011      	b.n	8001786 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001762:	f7ff fb4d 	bl	8000e00 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001770:	d909      	bls.n	8001786 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e139      	b.n	80019fa <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e4      	bne.n	8001762 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f023 031c 	bic.w	r3, r3, #28
 80017a6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017a8:	f001 ff38 	bl	800361c <HAL_RCC_GetHCLKFreq>
 80017ac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4a78      	ldr	r2, [pc, #480]	; (8001994 <HAL_ETH_Init+0x2c4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d908      	bls.n	80017c8 <HAL_ETH_Init+0xf8>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4a77      	ldr	r2, [pc, #476]	; (8001998 <HAL_ETH_Init+0x2c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d804      	bhi.n	80017c8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e027      	b.n	8001818 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	4a73      	ldr	r2, [pc, #460]	; (8001998 <HAL_ETH_Init+0x2c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d908      	bls.n	80017e2 <HAL_ETH_Init+0x112>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4a6d      	ldr	r2, [pc, #436]	; (8001988 <HAL_ETH_Init+0x2b8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d204      	bcs.n	80017e2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f043 030c 	orr.w	r3, r3, #12
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	e01a      	b.n	8001818 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4a68      	ldr	r2, [pc, #416]	; (8001988 <HAL_ETH_Init+0x2b8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d303      	bcc.n	80017f2 <HAL_ETH_Init+0x122>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4a6b      	ldr	r2, [pc, #428]	; (800199c <HAL_ETH_Init+0x2cc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d911      	bls.n	8001816 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_ETH_Init+0x2cc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d908      	bls.n	800180c <HAL_ETH_Init+0x13c>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4a68      	ldr	r2, [pc, #416]	; (80019a0 <HAL_ETH_Init+0x2d0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d804      	bhi.n	800180c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e005      	b.n	8001818 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	e000      	b.n	8001818 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001816:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001820:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fb98 	bl	8001f5c <HAL_ETH_WritePHYRegister>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fd4d 	bl	80022d8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0d7      	b.n	80019fa <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800184a:	20ff      	movs	r0, #255	; 0xff
 800184c:	f7ff fae4 	bl	8000e18 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a5 	beq.w	80019a4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800185a:	f7ff fad1 	bl	8000e00 <HAL_GetTick>
 800185e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	461a      	mov	r2, r3
 8001866:	2101      	movs	r1, #1
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fb0f 	bl	8001e8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800186e:	f7ff fac7 	bl	8000e00 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d90f      	bls.n	80018a0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fd26 	bl	80022d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0ac      	b.n	80019fa <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0da      	beq.n	8001860 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80018aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fb53 	bl	8001f5c <HAL_ETH_WritePHYRegister>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018c0:	6939      	ldr	r1, [r7, #16]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fd08 	bl	80022d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80018d0:	2301      	movs	r3, #1
 80018d2:	e092      	b.n	80019fa <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff fa94 	bl	8000e00 <HAL_GetTick>
 80018d8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	461a      	mov	r2, r3
 80018e0:	2101      	movs	r1, #1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fad2 	bl	8001e8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80018e8:	f7ff fa8a 	bl	8000e00 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d90f      	bls.n	800191a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018fe:	6939      	ldr	r1, [r7, #16]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fce9 	bl	80022d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e06f      	b.n	80019fa <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0da      	beq.n	80018da <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	461a      	mov	r2, r3
 800192a:	2110      	movs	r1, #16
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 faad 	bl	8001e8c <HAL_ETH_ReadPHYRegister>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800193c:	6939      	ldr	r1, [r7, #16]
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fcca 	bl	80022d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800194c:	2301      	movs	r3, #1
 800194e:	e054      	b.n	80019fa <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	e002      	b.n	800196a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e035      	b.n	80019e8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	e030      	b.n	80019e8 <HAL_ETH_Init+0x318>
 8001986:	bf00      	nop
 8001988:	03938700 	.word	0x03938700
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	01312cff 	.word	0x01312cff
 8001998:	02160ebf 	.word	0x02160ebf
 800199c:	05f5e0ff 	.word	0x05f5e0ff
 80019a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 facd 	bl	8001f5c <HAL_ETH_WritePHYRegister>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fc82 	bl	80022d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e00c      	b.n	80019fa <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80019e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80019e4:	f7ff fa18 	bl	8000e18 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fc74 	bl	80022d8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ETH_DMATxDescListInit+0x20>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e052      	b.n	8001aca <HAL_ETH_DMATxDescListInit+0xc6>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e030      	b.n	8001aa2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	015b      	lsls	r3, r3, #5
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a50:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d208      	bcs.n	8001a96 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	015b      	lsls	r3, r3, #5
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	e002      	b.n	8001a9c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3ca      	bcc.n	8001a40 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ab4:	440b      	add	r3, r1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b087      	sub	sp, #28
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ETH_DMARxDescListInit+0x20>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e056      	b.n	8001ba4 <HAL_ETH_DMARxDescListInit+0xce>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e034      	b.n	8001b7c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b2a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d208      	bcs.n	8001b70 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4413      	add	r3, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	e002      	b.n	8001b76 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3c6      	bcc.n	8001b12 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	f241 030c 	movw	r3, #4108	; 0x100c
 8001b8e:	440b      	add	r3, r1
 8001b90:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ETH_TransmitFrame+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0cd      	b.n	8001d70 <HAL_ETH_TransmitFrame+0x1c0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0b8      	b.n	8001d70 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da09      	bge.n	8001c1c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2212      	movs	r2, #18
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0a9      	b.n	8001d70 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d915      	bls.n	8001c52 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_ETH_TransmitFrame+0x1cc>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <HAL_ETH_TransmitFrame+0x1cc>)
 8001c36:	fba3 1302 	umull	r1, r3, r3, r2
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e001      	b.n	8001c56 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11c      	bne.n	8001c96 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001c6a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c76:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c86:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c94:	e04b      	b.n	8001d2e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e044      	b.n	8001d26 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001caa:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cc0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cca:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d116      	bne.n	8001d04 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ce4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_ETH_TransmitFrame+0x1d0>)
 8001cea:	fb02 f203 	mul.w	r2, r2, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001cf6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d02:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d12:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3301      	adds	r3, #1
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3b6      	bcc.n	8001c9c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	ac02b00b 	.word	0xac02b00b
 8001d80:	fffffa0c 	.word	0xfffffa0c

08001d84 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ETH_GetReceivedFrame+0x1a>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e070      	b.n	8001e80 <HAL_ETH_GetReceivedFrame+0xfc>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db5a      	blt.n	8001e6e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d103      	bne.n	8001de0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001df4:	3b04      	subs	r3, #4
 8001df6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e02b      	b.n	8001e80 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d010      	beq.n	8001e58 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
 8001e56:	e00a      	b.n	8001e6e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	460b      	mov	r3, r1
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b82      	cmp	r3, #130	; 0x82
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e050      	b.n	8001f54 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2282      	movs	r2, #130	; 0x82
 8001eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 031c 	and.w	r3, r3, #28
 8001ec8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8a1b      	ldrh	r3, [r3, #16]
 8001ece:	02db      	lsls	r3, r3, #11
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f023 0302 	bic.w	r3, r3, #2
 8001eec:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001efe:	f7fe ff7f 	bl	8000e00 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f04:	e015      	b.n	8001f32 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f06:	f7fe ff7b 	bl	8000e00 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d309      	bcc.n	8001f2a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e014      	b.n	8001f54 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e4      	bne.n	8001f06 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	460b      	mov	r3, r1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b42      	cmp	r3, #66	; 0x42
 8001f7c:	d101      	bne.n	8001f82 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e04e      	b.n	8002020 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2242      	movs	r2, #66	; 0x42
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 031c 	and.w	r3, r3, #28
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8a1b      	ldrh	r3, [r3, #16]
 8001f9e:	02db      	lsls	r3, r3, #11
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	019b      	lsls	r3, r3, #6
 8001fac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7fe ff12 	bl	8000e00 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fde:	e015      	b.n	800200c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001fe0:	f7fe ff0e 	bl	8000e00 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d309      	bcc.n	8002004 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e00d      	b.n	8002020 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ETH_Start+0x16>
 800203a:	2302      	movs	r3, #2
 800203c:	e01f      	b.n	800207e <HAL_ETH_Start+0x56>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fb44 	bl	80026dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fb7b 	bl	8002750 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fc12 	bl	8002884 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fbaf 	bl	80027c4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fbdc 	bl	8002824 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ETH_Stop+0x16>
 8002098:	2302      	movs	r3, #2
 800209a:	e01f      	b.n	80020dc <HAL_ETH_Stop+0x56>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fba1 	bl	80027f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fbce 	bl	8002854 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fb66 	bl	800278a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fbe0 	bl	8002884 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fb26 	bl	8002716 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ETH_ConfigMAC+0x1c>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0e4      	b.n	80022ca <HAL_ETH_ConfigMAC+0x1e6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80b1 	beq.w	800227a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002130:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002136:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800213c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002142:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002148:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800214e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002154:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800215a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002160:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002166:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800216c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002172:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800218a:	2001      	movs	r0, #1
 800218c:	f7fe fe44 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021a0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80021a6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80021ac:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80021b2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80021b8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80021be:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80021ca:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021cc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7fe fe1e 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021ec:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021f6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002214:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800221a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002220:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002226:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800222c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f7fe fde7 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe fdd4 	bl	8000e18 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	61da      	str	r2, [r3, #28]
 8002278:	e01e      	b.n	80022b8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002288:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7fe fdb4 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	ff20810f 	.word	0xff20810f

080022d8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0b0      	sub	sp, #192	; 0xc0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002306:	2300      	movs	r3, #0
 8002308:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800231e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002322:	663b      	str	r3, [r7, #96]	; 0x60
 8002324:	e001      	b.n	800232a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800232a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002334:	2300      	movs	r3, #0
 8002336:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002344:	2340      	movs	r3, #64	; 0x40
 8002346:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80023ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b0:	4bab      	ldr	r3, [pc, #684]	; (8002660 <ETH_MACDMAConfig+0x388>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023bc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80023be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80023c0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80023c4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80023ca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80023cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80023ce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80023d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80023d2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80023d8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80023da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80023dc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80023de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80023e0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80023e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80023e4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80023e8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80023ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80023ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002400:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe fd03 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800241a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800241c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002420:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002424:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800242a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800242c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002430:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002436:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800243c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002440:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002448:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800244a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fcde 	bl	8000e18 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002464:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800246e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002478:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	f64f 7341 	movw	r3, #65345	; 0xff41
 800248c:	4013      	ands	r3, r2
 800248e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002496:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002498:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800249c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800249e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80024a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80024a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80024a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80024aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80024ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80024b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024b4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fe fc9f 	bl	8000e18 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024e2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80024e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7fe fc8a 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002516:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800251c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002520:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002532:	2304      	movs	r3, #4
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800253c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002552:	2300      	movs	r3, #0
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002556:	2300      	movs	r3, #0
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800256a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800256e:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <ETH_MACDMAConfig+0x38c>)
 8002570:	4013      	ands	r3, r2
 8002572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002576:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002578:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800257a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800257c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800257e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002580:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002582:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002584:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002586:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002588:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800258a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800258c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800258e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002592:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002596:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002598:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80025aa:	4413      	add	r3, r2
 80025ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f241 0318 	movw	r3, #4120	; 0x1018
 80025ba:	4413      	add	r3, r2
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fe fc28 	bl	8000e18 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d0:	4413      	add	r3, r2
 80025d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80025e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80025e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80025ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80025f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80025f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe fc01 	bl	8000e18 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002622:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10d      	bne.n	8002648 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f241 031c 	movw	r3, #4124	; 0x101c
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <ETH_MACDMAConfig+0x390>)
 800263e:	431a      	orrs	r2, r3
 8002640:	f241 031c 	movw	r3, #4124	; 0x101c
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	461a      	mov	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f80b 	bl	800266c <ETH_MACAddressConfig>
}
 8002656:	bf00      	nop
 8002658:	37c0      	adds	r7, #192	; 0xc0
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	ff20810f 	.word	0xff20810f
 8002664:	f8de3f23 	.word	0xf8de3f23
 8002668:	00010040 	.word	0x00010040

0800266c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3305      	adds	r3, #5
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	3204      	adds	r2, #4
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <ETH_MACAddressConfig+0x68>)
 800268e:	4413      	add	r3, r2
 8002690:	461a      	mov	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3303      	adds	r3, #3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061a      	lsls	r2, r3, #24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3302      	adds	r3, #2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <ETH_MACAddressConfig+0x6c>)
 80026be:	4413      	add	r3, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40028040 	.word	0x40028040
 80026d8:	40028044 	.word	0x40028044

080026dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002700:	2001      	movs	r0, #1
 8002702:	f7fe fb89 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe fb6c 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0204 	orr.w	r2, r2, #4
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002774:	2001      	movs	r0, #1
 8002776:	f7fe fb4f 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0204 	bic.w	r2, r2, #4
 80027a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7fe fb32 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80027d4:	4413      	add	r3, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6811      	ldr	r1, [r2, #0]
 80027dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80027e4:	440b      	add	r3, r1
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	f241 0318 	movw	r3, #4120	; 0x1018
 8002804:	4413      	add	r3, r2
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6811      	ldr	r1, [r2, #0]
 800280c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002810:	f241 0318 	movw	r3, #4120	; 0x1018
 8002814:	440b      	add	r3, r1
 8002816:	601a      	str	r2, [r3, #0]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f241 0318 	movw	r3, #4120	; 0x1018
 8002834:	4413      	add	r3, r2
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f043 0202 	orr.w	r2, r3, #2
 8002840:	f241 0318 	movw	r3, #4120	; 0x1018
 8002844:	440b      	add	r3, r1
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f241 0318 	movw	r3, #4120	; 0x1018
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6811      	ldr	r1, [r2, #0]
 800286c:	f023 0202 	bic.w	r2, r3, #2
 8002870:	f241 0318 	movw	r3, #4120	; 0x1018
 8002874:	440b      	add	r3, r1
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f241 0318 	movw	r3, #4120	; 0x1018
 8002898:	4413      	add	r3, r2
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80028a8:	440b      	add	r3, r1
 80028aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80028b4:	4413      	add	r3, r2
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe faac 	bl	8000e18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80028ca:	440b      	add	r3, r1
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e175      	b.n	8002be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 8164 	bne.w	8002bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <HAL_GPIO_Init+0x56>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d130      	bne.n	8002990 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0201 	and.w	r2, r3, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d017      	beq.n	80029cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d123      	bne.n	8002a20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80be 	beq.w	8002bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a65      	ldr	r2, [pc, #404]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_GPIO_Init+0x32c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d037      	beq.n	8002b16 <HAL_GPIO_Init+0x23e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_GPIO_Init+0x330>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_GPIO_Init+0x23a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02b      	beq.n	8002b0e <HAL_GPIO_Init+0x236>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_GPIO_Init+0x338>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d025      	beq.n	8002b0a <HAL_GPIO_Init+0x232>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a54      	ldr	r2, [pc, #336]	; (8002c14 <HAL_GPIO_Init+0x33c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01f      	beq.n	8002b06 <HAL_GPIO_Init+0x22e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a53      	ldr	r2, [pc, #332]	; (8002c18 <HAL_GPIO_Init+0x340>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x22a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_GPIO_Init+0x344>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x226>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_GPIO_Init+0x348>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x222>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_GPIO_Init+0x34c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x21e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <HAL_GPIO_Init+0x350>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x21a>
 8002aee:	2309      	movs	r3, #9
 8002af0:	e012      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002af2:	230a      	movs	r3, #10
 8002af4:	e010      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002af6:	2308      	movs	r3, #8
 8002af8:	e00e      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e00c      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002afe:	2306      	movs	r3, #6
 8002b00:	e00a      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e008      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e004      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x240>
 8002b16:	2300      	movs	r3, #0
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	f002 0203 	and.w	r2, r2, #3
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	4093      	lsls	r3, r2
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_GPIO_Init+0x354>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	f67f ae86 	bls.w	80028f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40021c00 	.word	0x40021c00
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022400 	.word	0x40022400
 8002c2c:	40013c00 	.word	0x40013c00

08002c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c40:	787b      	ldrb	r3, [r7, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c4c:	e003      	b.n	8002c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	041a      	lsls	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40007000 	.word	0x40007000

08002c84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb2:	f7fe f8a5 	bl	8000e00 <HAL_GetTick>
 8002cb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb8:	e009      	b.n	8002cce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cba:	f7fe f8a1 	bl	8000e00 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc8:	d901      	bls.n	8002cce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e022      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d1ee      	bne.n	8002cba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7fe f88a 	bl	8000e00 <HAL_GetTick>
 8002cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cee:	e009      	b.n	8002d04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf0:	f7fe f886 	bl	8000e00 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfe:	d901      	bls.n	8002d04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e007      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40007000 	.word	0x40007000

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e29b      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d00c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d54:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d112      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
 8002d60:	4b90      	ldr	r3, [pc, #576]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d06c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x130>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d168      	bne.n	8002e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e275      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7a>
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a83      	ldr	r2, [pc, #524]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e02e      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x9c>
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7e      	ldr	r2, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7b      	ldr	r2, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a75      	ldr	r2, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a72      	ldr	r2, [pc, #456]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6b      	ldr	r2, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fd fffc 	bl	8000e00 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fd fff8 	bl	8000e00 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e229      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fd ffe8 	bl	8000e00 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fd ffe4 	bl	8000e00 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e215      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x110>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d069      	beq.n	8002f36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e62:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x190>
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1e9      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	493d      	ldr	r1, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	e040      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fd ff9a 	bl	8000e00 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fd ff96 	bl	8000e00 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1c7      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4929      	ldr	r1, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
 8002f02:	e018      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fd ff76 	bl	8000e00 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fd ff72 	bl	8000e00 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1a3      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d038      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fd ff53 	bl	8000e00 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fd ff4f 	bl	8000e00 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e180      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x23a>
 8002f7c:	e01a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fd ff39 	bl	8000e00 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fd ff35 	bl	8000e00 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d903      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e166      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
 8002fa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a4 	beq.w	800310a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b8c      	ldr	r3, [pc, #560]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b89      	ldr	r3, [pc, #548]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a88      	ldr	r2, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ff6:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7f      	ldr	r2, [pc, #508]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7fd fefd 	bl	8000e00 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fd fef9 	bl	8000e00 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e12a      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x31a>
 8003030:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a6f      	ldr	r2, [pc, #444]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e02d      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x33c>
 8003046:	4b6b      	ldr	r3, [pc, #428]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a6a      	ldr	r2, [pc, #424]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a67      	ldr	r2, [pc, #412]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x35e>
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a5e      	ldr	r2, [pc, #376]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 8003082:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a5b      	ldr	r2, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fd fead 	bl	8000e00 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd fea9 	bl	8000e00 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0d8      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCC_OscConfig+0x386>
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fd fe97 	bl	8000e00 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fd fe93 	bl	8000e00 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0c2      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a3c      	ldr	r2, [pc, #240]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80ae 	beq.w	8003270 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003114:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d06d      	beq.n	80031fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d14b      	bne.n	80031c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd fe64 	bl	8000e00 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd fe60 	bl	8000e00 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e091      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	071b      	lsls	r3, r3, #28
 8003186:	491b      	ldr	r1, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fd fe32 	bl	8000e00 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fd fe2e 	bl	8000e00 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e05f      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x47c>
 80031be:	e057      	b.n	8003270 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fd fe18 	bl	8000e00 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fd fe14 	bl	8000e00 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e045      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4b0>
 80031f2:	e03d      	b.n	8003270 <HAL_RCC_OscConfig+0x54c>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_RCC_OscConfig+0x558>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d030      	beq.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d129      	bne.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d122      	bne.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003234:	4293      	cmp	r3, r2
 8003236:	d119      	bne.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d10f      	bne.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d0      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	4965      	ldr	r1, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d040      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4936      	ldr	r1, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003374:	f7fd fd44 	bl	8000e00 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd fd40 	bl	8000e00 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e053      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1cc>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1d0>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fca0 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00
 8003448:	40023800 	.word	0x40023800
 800344c:	080160c4 	.word	0x080160c4
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	2300      	movs	r3, #0
 800346a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003470:	4b67      	ldr	r3, [pc, #412]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d00d      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x40>
 800347c:	2b08      	cmp	r3, #8
 800347e:	f200 80bd 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003486:	2b04      	cmp	r3, #4
 8003488:	d003      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x3a>
 800348a:	e0b7      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348e:	60bb      	str	r3, [r7, #8]
      break;
 8003490:	e0b7      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003492:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e0b4      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04d      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ae:	4b58      	ldr	r3, [pc, #352]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	461a      	mov	r2, r3
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	ea02 0800 	and.w	r8, r2, r0
 80034c6:	ea03 0901 	and.w	r9, r3, r1
 80034ca:	4640      	mov	r0, r8
 80034cc:	4649      	mov	r1, r9
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	014b      	lsls	r3, r1, #5
 80034d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034dc:	0142      	lsls	r2, r0, #5
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	ebb0 0008 	subs.w	r0, r0, r8
 80034e6:	eb61 0109 	sbc.w	r1, r1, r9
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	018b      	lsls	r3, r1, #6
 80034f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f8:	0182      	lsls	r2, r0, #6
 80034fa:	1a12      	subs	r2, r2, r0
 80034fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	00d9      	lsls	r1, r3, #3
 800350a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350e:	00d0      	lsls	r0, r2, #3
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	eb12 0208 	adds.w	r2, r2, r8
 8003518:	eb43 0309 	adc.w	r3, r3, r9
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0259      	lsls	r1, r3, #9
 8003526:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800352a:	0250      	lsls	r0, r2, #9
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	461a      	mov	r2, r3
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f7fc fed0 	bl	80002e0 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e04a      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	461a      	mov	r2, r3
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	ea02 0400 	and.w	r4, r2, r0
 8003562:	ea03 0501 	and.w	r5, r3, r1
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	014b      	lsls	r3, r1, #5
 8003574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003578:	0142      	lsls	r2, r0, #5
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	1b00      	subs	r0, r0, r4
 8003580:	eb61 0105 	sbc.w	r1, r1, r5
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	018b      	lsls	r3, r1, #6
 800358e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003592:	0182      	lsls	r2, r0, #6
 8003594:	1a12      	subs	r2, r2, r0
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a8:	00d0      	lsls	r0, r2, #3
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	1912      	adds	r2, r2, r4
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	0299      	lsls	r1, r3, #10
 80035be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035c2:	0290      	lsls	r0, r2, #10
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f7fc fe84 	bl	80002e0 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	60bb      	str	r3, [r7, #8]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fe:	60bb      	str	r3, [r7, #8]
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	68bb      	ldr	r3, [r7, #8]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	080160d4 	.word	0x080160d4

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	080160d4 	.word	0x080160d4

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a68      	ldr	r2, [pc, #416]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	4964      	ldr	r1, [pc, #400]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	4959      	ldr	r1, [pc, #356]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800371a:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	494a      	ldr	r1, [pc, #296]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 808b 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a39      	ldr	r2, [pc, #228]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fd fb38 	bl	8000e00 <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fd fb34 	bl	8000e00 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e38f      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d035      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d02e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d114      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fafc 	bl	8000e00 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fd faf8 	bl	8000e00 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e351      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383a:	d111      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800384a:	400b      	ands	r3, r1
 800384c:	4901      	ldr	r1, [pc, #4]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
 8003852:	e00b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	0ffffcff 	.word	0x0ffffcff
 8003860:	4bb3      	ldr	r3, [pc, #716]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4ab2      	ldr	r2, [pc, #712]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003866:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800386a:	6093      	str	r3, [r2, #8]
 800386c:	4bb0      	ldr	r3, [pc, #704]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	49ad      	ldr	r1, [pc, #692]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388a:	4ba9      	ldr	r3, [pc, #676]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	4aa7      	ldr	r2, [pc, #668]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800389a:	4ba5      	ldr	r3, [pc, #660]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	49a2      	ldr	r1, [pc, #648]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b9d      	ldr	r3, [pc, #628]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c6:	499a      	ldr	r1, [pc, #616]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038da:	4b95      	ldr	r3, [pc, #596]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e8:	4991      	ldr	r1, [pc, #580]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038fc:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390a:	4989      	ldr	r1, [pc, #548]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800391e:	4b84      	ldr	r3, [pc, #528]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4980      	ldr	r1, [pc, #512]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003940:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4978      	ldr	r1, [pc, #480]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f023 020c 	bic.w	r2, r3, #12
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	496f      	ldr	r1, [pc, #444]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003984:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4967      	ldr	r1, [pc, #412]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a6:	4b62      	ldr	r3, [pc, #392]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	495e      	ldr	r1, [pc, #376]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	4956      	ldr	r1, [pc, #344]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	494d      	ldr	r1, [pc, #308]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a0c:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	4945      	ldr	r1, [pc, #276]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	493c      	ldr	r1, [pc, #240]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5e:	4934      	ldr	r1, [pc, #208]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a80:	492b      	ldr	r1, [pc, #172]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	491b      	ldr	r1, [pc, #108]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	4909      	ldr	r1, [pc, #36]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	e002      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	4986      	ldr	r1, [pc, #536]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b58:	497d      	ldr	r1, [pc, #500]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d006      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80d6 	beq.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd f93e 	bl	8000e00 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b88:	f7fd f93a 	bl	8000e00 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e195      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d021      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc8:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	4958      	ldr	r1, [pc, #352]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c20:	d129      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c22:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	493e      	ldr	r1, [pc, #248]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f023 021f 	bic.w	r2, r3, #31
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4938      	ldr	r1, [pc, #224]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01d      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	4926      	ldr	r1, [pc, #152]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	071b      	lsls	r3, r3, #28
 8003ce6:	491a      	ldr	r1, [pc, #104]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd f881 	bl	8000e00 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d02:	f7fd f87d 	bl	8000e00 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0d8      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	f040 80ce 	bne.w	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd f864 	bl	8000e00 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fd f860 	bl	8000e00 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d904      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0bb      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d54:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d60:	d0ec      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	0f1b      	lsrs	r3, r3, #28
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	019a      	lsls	r2, r3, #6
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	061b      	lsls	r3, r3, #24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	4944      	ldr	r1, [pc, #272]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d022      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df4:	d11d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df6:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e4c:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	4917      	ldr	r1, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fc ffb0 	bl	8000e00 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ea4:	f7fc ffac 	bl	8000e00 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec2:	d1ef      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e040      	b.n	8003f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc fea0 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fbca 	bl	80046ac <UART_SetConfig>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e022      	b.n	8003f68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fe20 	bl	8004b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fea7 	bl	8004cb4 <UART_CheckIdleState>
 8003f66:	4603      	mov	r3, r0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	f040 8081 	bne.w	800408c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_UART_Transmit+0x26>
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e079      	b.n	800408e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit+0x38>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e072      	b.n	800408e <HAL_UART_Transmit+0x11e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2221      	movs	r2, #33	; 0x21
 8003fbc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fc ff1f 	bl	8000e00 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fdc:	d108      	bne.n	8003ff0 <HAL_UART_Transmit+0x80>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e003      	b.n	8003ff8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004000:	e02c      	b.n	800405c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fe9a 	bl	8004d46 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e038      	b.n	800408e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004030:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3302      	adds	r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e007      	b.n	800404a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1cc      	bne.n	8004002 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fe67 	bl	8004d46 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e005      	b.n	800408e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b0ba      	sub	sp, #232	; 0xe8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80040c6:	4013      	ands	r3, r2
 80040c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d115      	bne.n	8004100 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 82a4 	beq.w	800463e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
      }
      return;
 80040fe:	e29e      	b.n	800463e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8117 	beq.w	8004338 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800410a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_UART_IRQHandler+0x298>)
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 810a 	beq.w	8004338 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <HAL_UART_IRQHandler+0xbc>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2201      	movs	r2, #1
 8004142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d011      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2202      	movs	r2, #2
 8004172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d011      	beq.n	80041b4 <HAL_UART_IRQHandler+0x11c>
 8004190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <HAL_UART_IRQHandler+0x18a>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 820a 	beq.w	8004642 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800423a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d005      	beq.n	800427a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800426e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004272:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04f      	beq.n	800431a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe27 	bl	8004ece <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d141      	bne.n	8004312 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <HAL_UART_IRQHandler+0x29c>)
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd f9cb 	bl	800168a <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d017      	beq.n	800432a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004304:	4610      	mov	r0, r2
 8004306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e00f      	b.n	800432a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f9ae 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	e00b      	b.n	800432a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9aa 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	e007      	b.n	800432a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9a6 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004328:	e18b      	b.n	8004642 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432a:	bf00      	nop
    return;
 800432c:	e189      	b.n	8004642 <HAL_UART_IRQHandler+0x5aa>
 800432e:	bf00      	nop
 8004330:	04000120 	.word	0x04000120
 8004334:	08004f95 	.word	0x08004f95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	2b01      	cmp	r3, #1
 800433e:	f040 8144 	bne.w	80045ca <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 813d 	beq.w	80045ca <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8136 	beq.w	80045ca <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2210      	movs	r2, #16
 8004364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	f040 80b2 	bne.w	80044da <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004382:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 815d 	beq.w	8004646 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004396:	429a      	cmp	r2, r3
 8004398:	f080 8155 	bcs.w	8004646 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b0:	f000 8085 	beq.w	80044be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1da      	bne.n	80043b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3308      	adds	r3, #8
 8004404:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800440e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3308      	adds	r3, #8
 800441e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004422:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004426:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800442a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e1      	bne.n	80043fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800445e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004464:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800446c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e3      	bne.n	800443a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800448c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448e:	f023 0310 	bic.w	r3, r3, #16
 8004492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e4      	bne.n	800447e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd f876 	bl	80015aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8d4 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044d8:	e0b5      	b.n	8004646 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a7 	beq.w	800464a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80044fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a2 	beq.w	800464a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800451a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
 800452a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800452e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e4      	bne.n	8004506 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	623b      	str	r3, [r7, #32]
   return(result);
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004560:	633a      	str	r2, [r7, #48]	; 0x30
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e3      	bne.n	800453c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60fb      	str	r3, [r7, #12]
   return(result);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0310 	bic.w	r3, r3, #16
 800459a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	617b      	str	r3, [r7, #20]
   return(result);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e4      	bne.n	8004586 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f85c 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c8:	e03f      	b.n	800464a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <HAL_UART_IRQHandler+0x55c>
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f853 	bl	8004698 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045f2:	e02d      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01c      	beq.n	800464e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
    }
    return;
 800461c:	e017      	b.n	800464e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d012      	beq.n	8004650 <HAL_UART_IRQHandler+0x5b8>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fcc2 	bl	8004fc0 <UART_EndTransmit_IT>
    return;
 800463c:	e008      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
      return;
 800463e:	bf00      	nop
 8004640:	e006      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
      return;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_UART_IRQHandler+0x5b8>
    return;
 800464e:	bf00      	nop
  }

}
 8004650:	37e8      	adds	r7, #232	; 0xe8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop

08004658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4ba7      	ldr	r3, [pc, #668]	; (8004974 <UART_SetConfig+0x2c8>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a95      	ldr	r2, [pc, #596]	; (8004978 <UART_SetConfig+0x2cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d120      	bne.n	800476a <UART_SetConfig+0xbe>
 8004728:	4b94      	ldr	r3, [pc, #592]	; (800497c <UART_SetConfig+0x2d0>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b03      	cmp	r3, #3
 8004734:	d816      	bhi.n	8004764 <UART_SetConfig+0xb8>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0x90>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	0800474d 	.word	0x0800474d
 8004740:	08004759 	.word	0x08004759
 8004744:	08004753 	.word	0x08004753
 8004748:	0800475f 	.word	0x0800475f
 800474c:	2301      	movs	r3, #1
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e14f      	b.n	80049f2 <UART_SetConfig+0x346>
 8004752:	2302      	movs	r3, #2
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e14c      	b.n	80049f2 <UART_SetConfig+0x346>
 8004758:	2304      	movs	r3, #4
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e149      	b.n	80049f2 <UART_SetConfig+0x346>
 800475e:	2308      	movs	r3, #8
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e146      	b.n	80049f2 <UART_SetConfig+0x346>
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e143      	b.n	80049f2 <UART_SetConfig+0x346>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a84      	ldr	r2, [pc, #528]	; (8004980 <UART_SetConfig+0x2d4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d132      	bne.n	80047da <UART_SetConfig+0x12e>
 8004774:	4b81      	ldr	r3, [pc, #516]	; (800497c <UART_SetConfig+0x2d0>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d828      	bhi.n	80047d4 <UART_SetConfig+0x128>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0xdc>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047d5 	.word	0x080047d5
 8004790:	080047d5 	.word	0x080047d5
 8004794:	080047d5 	.word	0x080047d5
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047d5 	.word	0x080047d5
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047d5 	.word	0x080047d5
 80047a8:	080047c3 	.word	0x080047c3
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047d5 	.word	0x080047d5
 80047b8:	080047cf 	.word	0x080047cf
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e117      	b.n	80049f2 <UART_SetConfig+0x346>
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e114      	b.n	80049f2 <UART_SetConfig+0x346>
 80047c8:	2304      	movs	r3, #4
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e111      	b.n	80049f2 <UART_SetConfig+0x346>
 80047ce:	2308      	movs	r3, #8
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e10e      	b.n	80049f2 <UART_SetConfig+0x346>
 80047d4:	2310      	movs	r3, #16
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e10b      	b.n	80049f2 <UART_SetConfig+0x346>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a69      	ldr	r2, [pc, #420]	; (8004984 <UART_SetConfig+0x2d8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d120      	bne.n	8004826 <UART_SetConfig+0x17a>
 80047e4:	4b65      	ldr	r3, [pc, #404]	; (800497c <UART_SetConfig+0x2d0>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ee:	2b30      	cmp	r3, #48	; 0x30
 80047f0:	d013      	beq.n	800481a <UART_SetConfig+0x16e>
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d814      	bhi.n	8004820 <UART_SetConfig+0x174>
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d009      	beq.n	800480e <UART_SetConfig+0x162>
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d810      	bhi.n	8004820 <UART_SetConfig+0x174>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <UART_SetConfig+0x15c>
 8004802:	2b10      	cmp	r3, #16
 8004804:	d006      	beq.n	8004814 <UART_SetConfig+0x168>
 8004806:	e00b      	b.n	8004820 <UART_SetConfig+0x174>
 8004808:	2300      	movs	r3, #0
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e0f1      	b.n	80049f2 <UART_SetConfig+0x346>
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e0ee      	b.n	80049f2 <UART_SetConfig+0x346>
 8004814:	2304      	movs	r3, #4
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e0eb      	b.n	80049f2 <UART_SetConfig+0x346>
 800481a:	2308      	movs	r3, #8
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e0e8      	b.n	80049f2 <UART_SetConfig+0x346>
 8004820:	2310      	movs	r3, #16
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e0e5      	b.n	80049f2 <UART_SetConfig+0x346>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a57      	ldr	r2, [pc, #348]	; (8004988 <UART_SetConfig+0x2dc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d120      	bne.n	8004872 <UART_SetConfig+0x1c6>
 8004830:	4b52      	ldr	r3, [pc, #328]	; (800497c <UART_SetConfig+0x2d0>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d013      	beq.n	8004866 <UART_SetConfig+0x1ba>
 800483e:	2bc0      	cmp	r3, #192	; 0xc0
 8004840:	d814      	bhi.n	800486c <UART_SetConfig+0x1c0>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d009      	beq.n	800485a <UART_SetConfig+0x1ae>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d810      	bhi.n	800486c <UART_SetConfig+0x1c0>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x1a8>
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d006      	beq.n	8004860 <UART_SetConfig+0x1b4>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x1c0>
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e0cb      	b.n	80049f2 <UART_SetConfig+0x346>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e0c8      	b.n	80049f2 <UART_SetConfig+0x346>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e0c5      	b.n	80049f2 <UART_SetConfig+0x346>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e0c2      	b.n	80049f2 <UART_SetConfig+0x346>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e0bf      	b.n	80049f2 <UART_SetConfig+0x346>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a45      	ldr	r2, [pc, #276]	; (800498c <UART_SetConfig+0x2e0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d125      	bne.n	80048c8 <UART_SetConfig+0x21c>
 800487c:	4b3f      	ldr	r3, [pc, #252]	; (800497c <UART_SetConfig+0x2d0>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800488a:	d017      	beq.n	80048bc <UART_SetConfig+0x210>
 800488c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004890:	d817      	bhi.n	80048c2 <UART_SetConfig+0x216>
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004896:	d00b      	beq.n	80048b0 <UART_SetConfig+0x204>
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d811      	bhi.n	80048c2 <UART_SetConfig+0x216>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <UART_SetConfig+0x1fe>
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d006      	beq.n	80048b6 <UART_SetConfig+0x20a>
 80048a8:	e00b      	b.n	80048c2 <UART_SetConfig+0x216>
 80048aa:	2300      	movs	r3, #0
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e0a0      	b.n	80049f2 <UART_SetConfig+0x346>
 80048b0:	2302      	movs	r3, #2
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e09d      	b.n	80049f2 <UART_SetConfig+0x346>
 80048b6:	2304      	movs	r3, #4
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e09a      	b.n	80049f2 <UART_SetConfig+0x346>
 80048bc:	2308      	movs	r3, #8
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e097      	b.n	80049f2 <UART_SetConfig+0x346>
 80048c2:	2310      	movs	r3, #16
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e094      	b.n	80049f2 <UART_SetConfig+0x346>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <UART_SetConfig+0x2e4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d125      	bne.n	800491e <UART_SetConfig+0x272>
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <UART_SetConfig+0x2d0>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e0:	d017      	beq.n	8004912 <UART_SetConfig+0x266>
 80048e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0x26c>
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ec:	d00b      	beq.n	8004906 <UART_SetConfig+0x25a>
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f2:	d811      	bhi.n	8004918 <UART_SetConfig+0x26c>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x254>
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d006      	beq.n	800490c <UART_SetConfig+0x260>
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x26c>
 8004900:	2301      	movs	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e075      	b.n	80049f2 <UART_SetConfig+0x346>
 8004906:	2302      	movs	r3, #2
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e072      	b.n	80049f2 <UART_SetConfig+0x346>
 800490c:	2304      	movs	r3, #4
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e06f      	b.n	80049f2 <UART_SetConfig+0x346>
 8004912:	2308      	movs	r3, #8
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e06c      	b.n	80049f2 <UART_SetConfig+0x346>
 8004918:	2310      	movs	r3, #16
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e069      	b.n	80049f2 <UART_SetConfig+0x346>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1c      	ldr	r2, [pc, #112]	; (8004994 <UART_SetConfig+0x2e8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d137      	bne.n	8004998 <UART_SetConfig+0x2ec>
 8004928:	4b14      	ldr	r3, [pc, #80]	; (800497c <UART_SetConfig+0x2d0>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004936:	d017      	beq.n	8004968 <UART_SetConfig+0x2bc>
 8004938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800493c:	d817      	bhi.n	800496e <UART_SetConfig+0x2c2>
 800493e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004942:	d00b      	beq.n	800495c <UART_SetConfig+0x2b0>
 8004944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004948:	d811      	bhi.n	800496e <UART_SetConfig+0x2c2>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <UART_SetConfig+0x2aa>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	d006      	beq.n	8004962 <UART_SetConfig+0x2b6>
 8004954:	e00b      	b.n	800496e <UART_SetConfig+0x2c2>
 8004956:	2300      	movs	r3, #0
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e04a      	b.n	80049f2 <UART_SetConfig+0x346>
 800495c:	2302      	movs	r3, #2
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e047      	b.n	80049f2 <UART_SetConfig+0x346>
 8004962:	2304      	movs	r3, #4
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e044      	b.n	80049f2 <UART_SetConfig+0x346>
 8004968:	2308      	movs	r3, #8
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e041      	b.n	80049f2 <UART_SetConfig+0x346>
 800496e:	2310      	movs	r3, #16
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e03e      	b.n	80049f2 <UART_SetConfig+0x346>
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40011000 	.word	0x40011000
 800497c:	40023800 	.word	0x40023800
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40005000 	.word	0x40005000
 8004990:	40011400 	.word	0x40011400
 8004994:	40007800 	.word	0x40007800
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a71      	ldr	r2, [pc, #452]	; (8004b64 <UART_SetConfig+0x4b8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d125      	bne.n	80049ee <UART_SetConfig+0x342>
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <UART_SetConfig+0x4bc>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049b0:	d017      	beq.n	80049e2 <UART_SetConfig+0x336>
 80049b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049b6:	d817      	bhi.n	80049e8 <UART_SetConfig+0x33c>
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	d00b      	beq.n	80049d6 <UART_SetConfig+0x32a>
 80049be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c2:	d811      	bhi.n	80049e8 <UART_SetConfig+0x33c>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <UART_SetConfig+0x324>
 80049c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049cc:	d006      	beq.n	80049dc <UART_SetConfig+0x330>
 80049ce:	e00b      	b.n	80049e8 <UART_SetConfig+0x33c>
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e00d      	b.n	80049f2 <UART_SetConfig+0x346>
 80049d6:	2302      	movs	r3, #2
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e00a      	b.n	80049f2 <UART_SetConfig+0x346>
 80049dc:	2304      	movs	r3, #4
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e007      	b.n	80049f2 <UART_SetConfig+0x346>
 80049e2:	2308      	movs	r3, #8
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e004      	b.n	80049f2 <UART_SetConfig+0x346>
 80049e8:	2310      	movs	r3, #16
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e001      	b.n	80049f2 <UART_SetConfig+0x346>
 80049ee:	2310      	movs	r3, #16
 80049f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fa:	d15a      	bne.n	8004ab2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80049fc:	7ffb      	ldrb	r3, [r7, #31]
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d827      	bhi.n	8004a52 <UART_SetConfig+0x3a6>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x35c>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe fe02 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004a30:	61b8      	str	r0, [r7, #24]
        break;
 8004a32:	e013      	b.n	8004a5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fe12 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004a38:	61b8      	str	r0, [r7, #24]
        break;
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <UART_SetConfig+0x4c0>)
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe fd09 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004a46:	61b8      	str	r0, [r7, #24]
        break;
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61bb      	str	r3, [r7, #24]
        break;
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d074      	beq.n	8004b4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	005a      	lsls	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d916      	bls.n	8004aac <UART_SetConfig+0x400>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d212      	bcs.n	8004aac <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f023 030f 	bic.w	r3, r3, #15
 8004a8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	89fa      	ldrh	r2, [r7, #14]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e04f      	b.n	8004b4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	77bb      	strb	r3, [r7, #30]
 8004ab0:	e04c      	b.n	8004b4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x45e>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x414>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe fda6 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	61b8      	str	r0, [r7, #24]
        break;
 8004aea:	e013      	b.n	8004b14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe fdb6 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004af0:	61b8      	str	r0, [r7, #24]
        break;
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <UART_SetConfig+0x4c0>)
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e00c      	b.n	8004b14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fcad 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004afe:	61b8      	str	r0, [r7, #24]
        break;
 8004b00:	e008      	b.n	8004b14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	61bb      	str	r3, [r7, #24]
        break;
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	77bb      	strb	r3, [r7, #30]
        break;
 8004b12:	bf00      	nop
    }

    if (pclk != 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	085a      	lsrs	r2, r3, #1
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b0f      	cmp	r3, #15
 8004b32:	d909      	bls.n	8004b48 <UART_SetConfig+0x49c>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d205      	bcs.n	8004b48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e001      	b.n	8004b4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40007c00 	.word	0x40007c00
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	00f42400 	.word	0x00f42400

08004b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6e:	d10a      	bne.n	8004c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc4:	f7fc f89c 	bl	8000e00 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d10e      	bne.n	8004cf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f82d 	bl	8004d46 <UART_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e023      	b.n	8004d3e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d10e      	bne.n	8004d22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f817 	bl	8004d46 <UART_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e00d      	b.n	8004d3e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b09c      	sub	sp, #112	; 0x70
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	e0a5      	b.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	f000 80a1 	beq.w	8004ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fc f84d 	bl	8000e00 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d13e      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e6      	bne.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3308      	adds	r3, #8
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dca:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e067      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d04f      	beq.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	d147      	bne.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e70:	623a      	str	r2, [r7, #32]
 8004e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	6a3a      	ldr	r2, [r7, #32]
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e010      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f43f af4a 	beq.w	8004d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3770      	adds	r7, #112	; 0x70
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b095      	sub	sp, #84	; 0x54
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e6      	bne.n	8004ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d118      	bne.n	8004f76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f023 0310 	bic.w	r3, r3, #16
 8004f58:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e6      	bne.n	8004f44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f88:	bf00      	nop
 8004f8a:	3754      	adds	r7, #84	; 0x54
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fb5a 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e6      	bne.n	8004fc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fb26 	bl	8004658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500c:	bf00      	nop
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800501a:	4b8d      	ldr	r3, [pc, #564]	; (8005250 <MX_LWIP_Init+0x23c>)
 800501c:	22c0      	movs	r2, #192	; 0xc0
 800501e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005020:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005022:	22a8      	movs	r2, #168	; 0xa8
 8005024:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8005026:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005028:	2264      	movs	r2, #100	; 0x64
 800502a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800502c:	4b88      	ldr	r3, [pc, #544]	; (8005250 <MX_LWIP_Init+0x23c>)
 800502e:	2201      	movs	r2, #1
 8005030:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005032:	4b88      	ldr	r3, [pc, #544]	; (8005254 <MX_LWIP_Init+0x240>)
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005038:	4b86      	ldr	r3, [pc, #536]	; (8005254 <MX_LWIP_Init+0x240>)
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800503e:	4b85      	ldr	r3, [pc, #532]	; (8005254 <MX_LWIP_Init+0x240>)
 8005040:	22ff      	movs	r2, #255	; 0xff
 8005042:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005044:	4b83      	ldr	r3, [pc, #524]	; (8005254 <MX_LWIP_Init+0x240>)
 8005046:	2200      	movs	r2, #0
 8005048:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800504a:	4b83      	ldr	r3, [pc, #524]	; (8005258 <MX_LWIP_Init+0x244>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <MX_LWIP_Init+0x244>)
 8005052:	2200      	movs	r2, #0
 8005054:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005056:	4b80      	ldr	r3, [pc, #512]	; (8005258 <MX_LWIP_Init+0x244>)
 8005058:	2200      	movs	r2, #0
 800505a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800505c:	4b7e      	ldr	r3, [pc, #504]	; (8005258 <MX_LWIP_Init+0x244>)
 800505e:	2200      	movs	r2, #0
 8005060:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005062:	f000 fcd7 	bl	8005a14 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005066:	4b7a      	ldr	r3, [pc, #488]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	061a      	lsls	r2, r3, #24
 800506c:	4b78      	ldr	r3, [pc, #480]	; (8005250 <MX_LWIP_Init+0x23c>)
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	4b76      	ldr	r3, [pc, #472]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005076:	789b      	ldrb	r3, [r3, #2]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	4313      	orrs	r3, r2
 800507c:	4a74      	ldr	r2, [pc, #464]	; (8005250 <MX_LWIP_Init+0x23c>)
 800507e:	78d2      	ldrb	r2, [r2, #3]
 8005080:	4313      	orrs	r3, r2
 8005082:	061a      	lsls	r2, r3, #24
 8005084:	4b72      	ldr	r3, [pc, #456]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	0619      	lsls	r1, r3, #24
 800508a:	4b71      	ldr	r3, [pc, #452]	; (8005250 <MX_LWIP_Init+0x23c>)
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	4319      	orrs	r1, r3
 8005092:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <MX_LWIP_Init+0x23c>)
 8005094:	789b      	ldrb	r3, [r3, #2]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	430b      	orrs	r3, r1
 800509a:	496d      	ldr	r1, [pc, #436]	; (8005250 <MX_LWIP_Init+0x23c>)
 800509c:	78c9      	ldrb	r1, [r1, #3]
 800509e:	430b      	orrs	r3, r1
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050a6:	431a      	orrs	r2, r3
 80050a8:	4b69      	ldr	r3, [pc, #420]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	0619      	lsls	r1, r3, #24
 80050ae:	4b68      	ldr	r3, [pc, #416]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	4319      	orrs	r1, r3
 80050b6:	4b66      	ldr	r3, [pc, #408]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050b8:	789b      	ldrb	r3, [r3, #2]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	430b      	orrs	r3, r1
 80050be:	4964      	ldr	r1, [pc, #400]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050c0:	78c9      	ldrb	r1, [r1, #3]
 80050c2:	430b      	orrs	r3, r1
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050ca:	431a      	orrs	r2, r3
 80050cc:	4b60      	ldr	r3, [pc, #384]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	0619      	lsls	r1, r3, #24
 80050d2:	4b5f      	ldr	r3, [pc, #380]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050d4:	785b      	ldrb	r3, [r3, #1]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	4319      	orrs	r1, r3
 80050da:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	430b      	orrs	r3, r1
 80050e2:	495b      	ldr	r1, [pc, #364]	; (8005250 <MX_LWIP_Init+0x23c>)
 80050e4:	78c9      	ldrb	r1, [r1, #3]
 80050e6:	430b      	orrs	r3, r1
 80050e8:	0e1b      	lsrs	r3, r3, #24
 80050ea:	4313      	orrs	r3, r2
 80050ec:	4a5b      	ldr	r2, [pc, #364]	; (800525c <MX_LWIP_Init+0x248>)
 80050ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050f0:	4b58      	ldr	r3, [pc, #352]	; (8005254 <MX_LWIP_Init+0x240>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	061a      	lsls	r2, r3, #24
 80050f6:	4b57      	ldr	r3, [pc, #348]	; (8005254 <MX_LWIP_Init+0x240>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	431a      	orrs	r2, r3
 80050fe:	4b55      	ldr	r3, [pc, #340]	; (8005254 <MX_LWIP_Init+0x240>)
 8005100:	789b      	ldrb	r3, [r3, #2]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4313      	orrs	r3, r2
 8005106:	4a53      	ldr	r2, [pc, #332]	; (8005254 <MX_LWIP_Init+0x240>)
 8005108:	78d2      	ldrb	r2, [r2, #3]
 800510a:	4313      	orrs	r3, r2
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	4b51      	ldr	r3, [pc, #324]	; (8005254 <MX_LWIP_Init+0x240>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	0619      	lsls	r1, r3, #24
 8005114:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <MX_LWIP_Init+0x240>)
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	4319      	orrs	r1, r3
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <MX_LWIP_Init+0x240>)
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	430b      	orrs	r3, r1
 8005124:	494b      	ldr	r1, [pc, #300]	; (8005254 <MX_LWIP_Init+0x240>)
 8005126:	78c9      	ldrb	r1, [r1, #3]
 8005128:	430b      	orrs	r3, r1
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005130:	431a      	orrs	r2, r3
 8005132:	4b48      	ldr	r3, [pc, #288]	; (8005254 <MX_LWIP_Init+0x240>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	0619      	lsls	r1, r3, #24
 8005138:	4b46      	ldr	r3, [pc, #280]	; (8005254 <MX_LWIP_Init+0x240>)
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	4319      	orrs	r1, r3
 8005140:	4b44      	ldr	r3, [pc, #272]	; (8005254 <MX_LWIP_Init+0x240>)
 8005142:	789b      	ldrb	r3, [r3, #2]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	430b      	orrs	r3, r1
 8005148:	4942      	ldr	r1, [pc, #264]	; (8005254 <MX_LWIP_Init+0x240>)
 800514a:	78c9      	ldrb	r1, [r1, #3]
 800514c:	430b      	orrs	r3, r1
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005154:	431a      	orrs	r2, r3
 8005156:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <MX_LWIP_Init+0x240>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	0619      	lsls	r1, r3, #24
 800515c:	4b3d      	ldr	r3, [pc, #244]	; (8005254 <MX_LWIP_Init+0x240>)
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	4319      	orrs	r1, r3
 8005164:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <MX_LWIP_Init+0x240>)
 8005166:	789b      	ldrb	r3, [r3, #2]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	430b      	orrs	r3, r1
 800516c:	4939      	ldr	r1, [pc, #228]	; (8005254 <MX_LWIP_Init+0x240>)
 800516e:	78c9      	ldrb	r1, [r1, #3]
 8005170:	430b      	orrs	r3, r1
 8005172:	0e1b      	lsrs	r3, r3, #24
 8005174:	4313      	orrs	r3, r2
 8005176:	4a3a      	ldr	r2, [pc, #232]	; (8005260 <MX_LWIP_Init+0x24c>)
 8005178:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <MX_LWIP_Init+0x244>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	061a      	lsls	r2, r3, #24
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <MX_LWIP_Init+0x244>)
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	431a      	orrs	r2, r3
 8005188:	4b33      	ldr	r3, [pc, #204]	; (8005258 <MX_LWIP_Init+0x244>)
 800518a:	789b      	ldrb	r3, [r3, #2]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4313      	orrs	r3, r2
 8005190:	4a31      	ldr	r2, [pc, #196]	; (8005258 <MX_LWIP_Init+0x244>)
 8005192:	78d2      	ldrb	r2, [r2, #3]
 8005194:	4313      	orrs	r3, r2
 8005196:	061a      	lsls	r2, r3, #24
 8005198:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <MX_LWIP_Init+0x244>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	0619      	lsls	r1, r3, #24
 800519e:	4b2e      	ldr	r3, [pc, #184]	; (8005258 <MX_LWIP_Init+0x244>)
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	4319      	orrs	r1, r3
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <MX_LWIP_Init+0x244>)
 80051a8:	789b      	ldrb	r3, [r3, #2]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	430b      	orrs	r3, r1
 80051ae:	492a      	ldr	r1, [pc, #168]	; (8005258 <MX_LWIP_Init+0x244>)
 80051b0:	78c9      	ldrb	r1, [r1, #3]
 80051b2:	430b      	orrs	r3, r1
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ba:	431a      	orrs	r2, r3
 80051bc:	4b26      	ldr	r3, [pc, #152]	; (8005258 <MX_LWIP_Init+0x244>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	0619      	lsls	r1, r3, #24
 80051c2:	4b25      	ldr	r3, [pc, #148]	; (8005258 <MX_LWIP_Init+0x244>)
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	4319      	orrs	r1, r3
 80051ca:	4b23      	ldr	r3, [pc, #140]	; (8005258 <MX_LWIP_Init+0x244>)
 80051cc:	789b      	ldrb	r3, [r3, #2]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	430b      	orrs	r3, r1
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <MX_LWIP_Init+0x244>)
 80051d4:	78c9      	ldrb	r1, [r1, #3]
 80051d6:	430b      	orrs	r3, r1
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051de:	431a      	orrs	r2, r3
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <MX_LWIP_Init+0x244>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	0619      	lsls	r1, r3, #24
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <MX_LWIP_Init+0x244>)
 80051e8:	785b      	ldrb	r3, [r3, #1]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	4319      	orrs	r1, r3
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <MX_LWIP_Init+0x244>)
 80051f0:	789b      	ldrb	r3, [r3, #2]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	430b      	orrs	r3, r1
 80051f6:	4918      	ldr	r1, [pc, #96]	; (8005258 <MX_LWIP_Init+0x244>)
 80051f8:	78c9      	ldrb	r1, [r1, #3]
 80051fa:	430b      	orrs	r3, r1
 80051fc:	0e1b      	lsrs	r3, r3, #24
 80051fe:	4313      	orrs	r3, r2
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <MX_LWIP_Init+0x250>)
 8005202:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005204:	4b18      	ldr	r3, [pc, #96]	; (8005268 <MX_LWIP_Init+0x254>)
 8005206:	9302      	str	r3, [sp, #8]
 8005208:	4b18      	ldr	r3, [pc, #96]	; (800526c <MX_LWIP_Init+0x258>)
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <MX_LWIP_Init+0x250>)
 8005212:	4a13      	ldr	r2, [pc, #76]	; (8005260 <MX_LWIP_Init+0x24c>)
 8005214:	4911      	ldr	r1, [pc, #68]	; (800525c <MX_LWIP_Init+0x248>)
 8005216:	4816      	ldr	r0, [pc, #88]	; (8005270 <MX_LWIP_Init+0x25c>)
 8005218:	f001 f8a2 	bl	8006360 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800521c:	4814      	ldr	r0, [pc, #80]	; (8005270 <MX_LWIP_Init+0x25c>)
 800521e:	f001 fa51 	bl	80066c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005222:	4b13      	ldr	r3, [pc, #76]	; (8005270 <MX_LWIP_Init+0x25c>)
 8005224:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005234:	480e      	ldr	r0, [pc, #56]	; (8005270 <MX_LWIP_Init+0x25c>)
 8005236:	f001 fa55 	bl	80066e4 <netif_set_up>
 800523a:	e002      	b.n	8005242 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <MX_LWIP_Init+0x25c>)
 800523e:	f001 fabd 	bl	80067bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005242:	490c      	ldr	r1, [pc, #48]	; (8005274 <MX_LWIP_Init+0x260>)
 8005244:	480a      	ldr	r0, [pc, #40]	; (8005270 <MX_LWIP_Init+0x25c>)
 8005246:	f001 faeb 	bl	8006820 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800524a:	bf00      	nop
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000334 	.word	0x20000334
 8005254:	20000330 	.word	0x20000330
 8005258:	200002f4 	.word	0x200002f4
 800525c:	2000032c 	.word	0x2000032c
 8005260:	20000338 	.word	0x20000338
 8005264:	2000033c 	.word	0x2000033c
 8005268:	0800fed9 	.word	0x0800fed9
 800526c:	08005841 	.word	0x08005841
 8005270:	200002f8 	.word	0x200002f8
 8005274:	080058ad 	.word	0x080058ad

08005278 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <MX_LWIP_Process+0x14>)
 800527e:	f000 fabf 	bl	8005800 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005282:	f008 fa43 	bl	800d70c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200002f8 	.word	0x200002f8

08005290 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <HAL_ETH_MspInit+0x158>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	f040 8096 	bne.w	80053e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80052b4:	4b4d      	ldr	r3, [pc, #308]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a4c      	ldr	r2, [pc, #304]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b4a      	ldr	r3, [pc, #296]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	4a46      	ldr	r2, [pc, #280]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052d6:	6313      	str	r3, [r2, #48]	; 0x30
 80052d8:	4b44      	ldr	r3, [pc, #272]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	4a40      	ldr	r2, [pc, #256]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ee:	6313      	str	r3, [r2, #48]	; 0x30
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fc:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	4a3a      	ldr	r2, [pc, #232]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	6313      	str	r3, [r2, #48]	; 0x30
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	4a34      	ldr	r2, [pc, #208]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6313      	str	r3, [r2, #48]	; 0x30
 8005320:	4b32      	ldr	r3, [pc, #200]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800532c:	4b2f      	ldr	r3, [pc, #188]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	4a2e      	ldr	r2, [pc, #184]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005332:	f043 0302 	orr.w	r3, r3, #2
 8005336:	6313      	str	r3, [r2, #48]	; 0x30
 8005338:	4b2c      	ldr	r3, [pc, #176]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 800534a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534e:	6313      	str	r3, [r2, #48]	; 0x30
 8005350:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_ETH_MspInit+0x15c>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800535c:	2332      	movs	r3, #50	; 0x32
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005360:	2302      	movs	r3, #2
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005368:	2303      	movs	r3, #3
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800536c:	230b      	movs	r3, #11
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005374:	4619      	mov	r1, r3
 8005376:	481e      	ldr	r0, [pc, #120]	; (80053f0 <HAL_ETH_MspInit+0x160>)
 8005378:	f7fd faae 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800537c:	2386      	movs	r3, #134	; 0x86
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005380:	2302      	movs	r3, #2
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005388:	2303      	movs	r3, #3
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800538c:	230b      	movs	r3, #11
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005394:	4619      	mov	r1, r3
 8005396:	4817      	ldr	r0, [pc, #92]	; (80053f4 <HAL_ETH_MspInit+0x164>)
 8005398:	f7fd fa9e 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800539c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	2302      	movs	r3, #2
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053aa:	2303      	movs	r3, #3
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ae:	230b      	movs	r3, #11
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80053b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b6:	4619      	mov	r1, r3
 80053b8:	480f      	ldr	r0, [pc, #60]	; (80053f8 <HAL_ETH_MspInit+0x168>)
 80053ba:	f7fd fa8d 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80053be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	2302      	movs	r3, #2
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053cc:	2303      	movs	r3, #3
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053d0:	230b      	movs	r3, #11
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d8:	4619      	mov	r1, r3
 80053da:	4808      	ldr	r0, [pc, #32]	; (80053fc <HAL_ETH_MspInit+0x16c>)
 80053dc:	f7fd fa7c 	bl	80028d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053e0:	bf00      	nop
 80053e2:	3738      	adds	r7, #56	; 0x38
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40028000 	.word	0x40028000
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	40020400 	.word	0x40020400
 80053fc:	40021800 	.word	0x40021800

08005400 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800540c:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <low_level_init+0x144>)
 800540e:	4a4e      	ldr	r2, [pc, #312]	; (8005548 <low_level_init+0x148>)
 8005410:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005412:	4b4c      	ldr	r3, [pc, #304]	; (8005544 <low_level_init+0x144>)
 8005414:	2201      	movs	r2, #1
 8005416:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005418:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <low_level_init+0x144>)
 800541a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800541e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005420:	4b48      	ldr	r3, [pc, #288]	; (8005544 <low_level_init+0x144>)
 8005422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005426:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005428:	4b46      	ldr	r3, [pc, #280]	; (8005544 <low_level_init+0x144>)
 800542a:	2200      	movs	r2, #0
 800542c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800542e:	2300      	movs	r3, #0
 8005430:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005436:	23e1      	movs	r3, #225	; 0xe1
 8005438:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800543a:	2300      	movs	r3, #0
 800543c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800543e:	2300      	movs	r3, #0
 8005440:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005442:	2300      	movs	r3, #0
 8005444:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005446:	4a3f      	ldr	r2, [pc, #252]	; (8005544 <low_level_init+0x144>)
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <low_level_init+0x144>)
 8005450:	2200      	movs	r2, #0
 8005452:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <low_level_init+0x144>)
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <low_level_init+0x144>)
 800545c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005460:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005462:	4838      	ldr	r0, [pc, #224]	; (8005544 <low_level_init+0x144>)
 8005464:	f7fc f934 	bl	80016d0 <HAL_ETH_Init>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005484:	2304      	movs	r3, #4
 8005486:	4a31      	ldr	r2, [pc, #196]	; (800554c <low_level_init+0x14c>)
 8005488:	4931      	ldr	r1, [pc, #196]	; (8005550 <low_level_init+0x150>)
 800548a:	482e      	ldr	r0, [pc, #184]	; (8005544 <low_level_init+0x144>)
 800548c:	f7fc faba 	bl	8001a04 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005490:	2304      	movs	r3, #4
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <low_level_init+0x154>)
 8005494:	4930      	ldr	r1, [pc, #192]	; (8005558 <low_level_init+0x158>)
 8005496:	482b      	ldr	r0, [pc, #172]	; (8005544 <low_level_init+0x144>)
 8005498:	f7fc fb1d 	bl	8001ad6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2206      	movs	r2, #6
 80054a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <low_level_init+0x144>)
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <low_level_init+0x144>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	785a      	ldrb	r2, [r3, #1]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <low_level_init+0x144>)
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	789a      	ldrb	r2, [r3, #2]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <low_level_init+0x144>)
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	78da      	ldrb	r2, [r3, #3]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80054d4:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <low_level_init+0x144>)
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	791a      	ldrb	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <low_level_init+0x144>)
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	795a      	ldrb	r2, [r3, #5]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80054f2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054fa:	f043 030a 	orr.w	r3, r3, #10
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005506:	480f      	ldr	r0, [pc, #60]	; (8005544 <low_level_init+0x144>)
 8005508:	f7fc fd8e 	bl	8002028 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800550c:	f107 0310 	add.w	r3, r7, #16
 8005510:	461a      	mov	r2, r3
 8005512:	211d      	movs	r1, #29
 8005514:	480b      	ldr	r0, [pc, #44]	; (8005544 <low_level_init+0x144>)
 8005516:	f7fc fcb9 	bl	8001e8c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f043 030b 	orr.w	r3, r3, #11
 8005520:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	461a      	mov	r2, r3
 8005526:	211d      	movs	r1, #29
 8005528:	4806      	ldr	r0, [pc, #24]	; (8005544 <low_level_init+0x144>)
 800552a:	f7fc fd17 	bl	8001f5c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	461a      	mov	r2, r3
 8005534:	211d      	movs	r1, #29
 8005536:	4803      	ldr	r0, [pc, #12]	; (8005544 <low_level_init+0x144>)
 8005538:	f7fc fca8 	bl	8001e8c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20001c10 	.word	0x20001c10
 8005548:	40028000 	.word	0x40028000
 800554c:	20001c58 	.word	0x20001c58
 8005550:	20000340 	.word	0x20000340
 8005554:	200003c0 	.word	0x200003c0
 8005558:	20001b90 	.word	0x20001b90

0800555c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005566:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <low_level_output+0x138>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800557e:	4b45      	ldr	r3, [pc, #276]	; (8005694 <low_level_output+0x138>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	e05a      	b.n	8005644 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	da03      	bge.n	800559e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005596:	23f8      	movs	r3, #248	; 0xf8
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800559c:	e05c      	b.n	8005658 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	895b      	ldrh	r3, [r3, #10]
 80055a2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80055a8:	e02f      	b.n	800560a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	18d0      	adds	r0, r2, r3
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	18d1      	adds	r1, r2, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	f00c ff99 	bl	80124f8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da03      	bge.n	80055dc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80055d4:	23f8      	movs	r3, #248	; 0xf8
 80055d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80055da:	e03d      	b.n	8005658 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80055ec:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80055f8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005604:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4413      	add	r3, r2
 8005610:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005614:	4293      	cmp	r3, r2
 8005616:	d8c8      	bhi.n	80055aa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	18d0      	adds	r0, r2, r3
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4619      	mov	r1, r3
 800562a:	f00c ff65 	bl	80124f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1a1      	bne.n	800558e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	4811      	ldr	r0, [pc, #68]	; (8005694 <low_level_output+0x138>)
 800564e:	f7fc faaf 	bl	8001bb0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <low_level_output+0x138>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005660:	4413      	add	r3, r2
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <low_level_output+0x138>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	f241 0314 	movw	r3, #4116	; 0x1014
 8005674:	4413      	add	r3, r2
 8005676:	2220      	movs	r2, #32
 8005678:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <low_level_output+0x138>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005682:	4413      	add	r3, r2
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20001c10 	.word	0x20001c10

08005698 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08c      	sub	sp, #48	; 0x30
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80056bc:	484f      	ldr	r0, [pc, #316]	; (80057fc <low_level_input+0x164>)
 80056be:	f7fc fb61 	bl	8001d84 <HAL_ETH_GetReceivedFrame>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <low_level_input+0x34>

    return NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e092      	b.n	80057f2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <low_level_input+0x164>)
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80056d2:	4b4a      	ldr	r3, [pc, #296]	; (80057fc <low_level_input+0x164>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80056e4:	4619      	mov	r1, r3
 80056e6:	2000      	movs	r0, #0
 80056e8:	f001 f936 	bl	8006958 <pbuf_alloc>
 80056ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d04b      	beq.n	800578c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80056f4:	4b41      	ldr	r3, [pc, #260]	; (80057fc <low_level_input+0x164>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
 8005702:	e040      	b.n	8005786 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	895b      	ldrh	r3, [r3, #10]
 8005708:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800570e:	e021      	b.n	8005754 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	18d0      	adds	r0, r2, r3
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	18d1      	adds	r1, r2, r3
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	461a      	mov	r2, r3
 8005728:	f00c fee6 	bl	80124f8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005742:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800574e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800575e:	4293      	cmp	r3, r2
 8005760:	d8d6      	bhi.n	8005710 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	18d0      	adds	r0, r2, r3
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4619      	mov	r1, r3
 8005774:	f00c fec0 	bl	80124f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1bb      	bne.n	8005704 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <low_level_input+0x164>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e00b      	b.n	80057b0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <low_level_input+0x164>)
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3ee      	bcc.n	8005798 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <low_level_input+0x164>)
 80057bc:	2200      	movs	r2, #0
 80057be:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <low_level_input+0x164>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80057c8:	4413      	add	r3, r2
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <low_level_input+0x164>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80057dc:	4413      	add	r3, r2
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <low_level_input+0x164>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f241 0308 	movw	r3, #4104	; 0x1008
 80057ea:	4413      	add	r3, r2
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
  }
  return p;
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3730      	adds	r7, #48	; 0x30
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20001c10 	.word	0x20001c10

08005800 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff45 	bl	8005698 <low_level_input>
 800580e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	4798      	blx	r3
 8005820:	4603      	mov	r3, r0
 8005822:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005824:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fb77 	bl	8006f20 <pbuf_free>
    p = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e000      	b.n	800583a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005838:	bf00      	nop
  }
}
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <ethernetif_init+0x1c>
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <ethernetif_init+0x48>)
 8005850:	f240 2212 	movw	r2, #530	; 0x212
 8005854:	490d      	ldr	r1, [pc, #52]	; (800588c <ethernetif_init+0x4c>)
 8005856:	480e      	ldr	r0, [pc, #56]	; (8005890 <ethernetif_init+0x50>)
 8005858:	f00c fe64 	bl	8012524 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2273      	movs	r2, #115	; 0x73
 8005860:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2274      	movs	r2, #116	; 0x74
 8005868:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <ethernetif_init+0x54>)
 8005870:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <ethernetif_init+0x58>)
 8005876:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fdc1 	bl	8005400 <low_level_init>

  return ERR_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	0801365c 	.word	0x0801365c
 800588c:	08013678 	.word	0x08013678
 8005890:	08013688 	.word	0x08013688
 8005894:	0800e39d 	.word	0x0800e39d
 8005898:	0800555d 	.word	0x0800555d

0800589c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058a0:	f7fb faae 	bl	8000e00 <HAL_GetTick>
 80058a4:	4603      	mov	r3, r0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d05d      	beq.n	800598a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80058ce:	4b34      	ldr	r3, [pc, #208]	; (80059a0 <ethernetif_update_config+0xf4>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d03f      	beq.n	8005956 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80058d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058da:	2100      	movs	r1, #0
 80058dc:	4830      	ldr	r0, [pc, #192]	; (80059a0 <ethernetif_update_config+0xf4>)
 80058de:	f7fc fb3d 	bl	8001f5c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80058e2:	f7fb fa8d 	bl	8000e00 <HAL_GetTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	461a      	mov	r2, r3
 80058f0:	2101      	movs	r1, #1
 80058f2:	482b      	ldr	r0, [pc, #172]	; (80059a0 <ethernetif_update_config+0xf4>)
 80058f4:	f7fc faca 	bl	8001e8c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80058f8:	f7fb fa82 	bl	8000e00 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005906:	d828      	bhi.n	800595a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0eb      	beq.n	80058ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	461a      	mov	r2, r3
 8005918:	2110      	movs	r1, #16
 800591a:	4821      	ldr	r0, [pc, #132]	; (80059a0 <ethernetif_update_config+0xf4>)
 800591c:	f7fc fab6 	bl	8001e8c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <ethernetif_update_config+0xf4>)
 800592c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e002      	b.n	800593a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <ethernetif_update_config+0xf4>)
 8005936:	2200      	movs	r2, #0
 8005938:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005944:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <ethernetif_update_config+0xf4>)
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	e016      	b.n	800597a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800594c:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <ethernetif_update_config+0xf4>)
 800594e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e011      	b.n	800597a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <ethernetif_update_config+0xb0>
          goto error;
 800595a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800595c:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <ethernetif_update_config+0xf4>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <ethernetif_update_config+0xf4>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800596c:	4313      	orrs	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	2100      	movs	r1, #0
 8005974:	480a      	ldr	r0, [pc, #40]	; (80059a0 <ethernetif_update_config+0xf4>)
 8005976:	f7fc faf1 	bl	8001f5c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800597a:	2100      	movs	r1, #0
 800597c:	4808      	ldr	r0, [pc, #32]	; (80059a0 <ethernetif_update_config+0xf4>)
 800597e:	f7fc fbb1 	bl	80020e4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005982:	4807      	ldr	r0, [pc, #28]	; (80059a0 <ethernetif_update_config+0xf4>)
 8005984:	f7fc fb50 	bl	8002028 <HAL_ETH_Start>
 8005988:	e002      	b.n	8005990 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800598a:	4805      	ldr	r0, [pc, #20]	; (80059a0 <ethernetif_update_config+0xf4>)
 800598c:	f7fc fb7b 	bl	8002086 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f807 	bl	80059a4 <ethernetif_notify_conn_changed>
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20001c10 	.word	0x20001c10

080059a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b21a      	sxth	r2, r3
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	4313      	orrs	r3, r2
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	b29b      	uxth	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	061a      	lsls	r2, r3, #24
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0e1b      	lsrs	r3, r3, #24
 8005a06:	4313      	orrs	r3, r2
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005a1e:	f000 f8d5 	bl	8005bcc <mem_init>
  memp_init();
 8005a22:	f000 fbdb 	bl	80061dc <memp_init>
  pbuf_init();
  netif_init();
 8005a26:	f000 fc93 	bl	8006350 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005a2a:	f007 feb1 	bl	800d790 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005a2e:	f001 fd15 	bl	800745c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005a32:	f007 fe23 	bl	800d67c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <ptr_to_mem+0x20>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	4413      	add	r3, r2
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	2000009c 	.word	0x2000009c

08005a64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <mem_to_ptr+0x20>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	b29b      	uxth	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	2000009c 	.word	0x2000009c

08005a88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <plug_holes+0x120>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d206      	bcs.n	8005aa8 <plug_holes+0x20>
 8005a9a:	4b44      	ldr	r3, [pc, #272]	; (8005bac <plug_holes+0x124>)
 8005a9c:	f240 12df 	movw	r2, #479	; 0x1df
 8005aa0:	4943      	ldr	r1, [pc, #268]	; (8005bb0 <plug_holes+0x128>)
 8005aa2:	4844      	ldr	r0, [pc, #272]	; (8005bb4 <plug_holes+0x12c>)
 8005aa4:	f00c fd3e 	bl	8012524 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005aa8:	4b43      	ldr	r3, [pc, #268]	; (8005bb8 <plug_holes+0x130>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d306      	bcc.n	8005ac0 <plug_holes+0x38>
 8005ab2:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <plug_holes+0x124>)
 8005ab4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ab8:	4940      	ldr	r1, [pc, #256]	; (8005bbc <plug_holes+0x134>)
 8005aba:	483e      	ldr	r0, [pc, #248]	; (8005bb4 <plug_holes+0x12c>)
 8005abc:	f00c fd32 	bl	8012524 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <plug_holes+0x4e>
 8005ac8:	4b38      	ldr	r3, [pc, #224]	; (8005bac <plug_holes+0x124>)
 8005aca:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005ace:	493c      	ldr	r1, [pc, #240]	; (8005bc0 <plug_holes+0x138>)
 8005ad0:	4838      	ldr	r0, [pc, #224]	; (8005bb4 <plug_holes+0x12c>)
 8005ad2:	f00c fd27 	bl	8012524 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ade:	d906      	bls.n	8005aee <plug_holes+0x66>
 8005ae0:	4b32      	ldr	r3, [pc, #200]	; (8005bac <plug_holes+0x124>)
 8005ae2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005ae6:	4937      	ldr	r1, [pc, #220]	; (8005bc4 <plug_holes+0x13c>)
 8005ae8:	4832      	ldr	r0, [pc, #200]	; (8005bb4 <plug_holes+0x12c>)
 8005aea:	f00c fd1b 	bl	8012524 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffa4 	bl	8005a40 <ptr_to_mem>
 8005af8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d024      	beq.n	8005b4c <plug_holes+0xc4>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d120      	bne.n	8005b4c <plug_holes+0xc4>
 8005b0a:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <plug_holes+0x130>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d01b      	beq.n	8005b4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <plug_holes+0x140>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d102      	bne.n	8005b24 <plug_holes+0x9c>
      lfree = mem;
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <plug_holes+0x140>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	881a      	ldrh	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b34:	d00a      	beq.n	8005b4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ff80 	bl	8005a40 <ptr_to_mem>
 8005b40:	4604      	mov	r4, r0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ff8e 	bl	8005a64 <mem_to_ptr>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	885b      	ldrh	r3, [r3, #2]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff ff75 	bl	8005a40 <ptr_to_mem>
 8005b56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d01f      	beq.n	8005ba0 <plug_holes+0x118>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11b      	bne.n	8005ba0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005b68:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <plug_holes+0x140>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d102      	bne.n	8005b78 <plug_holes+0xf0>
      lfree = pmem;
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <plug_holes+0x140>)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b88:	d00a      	beq.n	8005ba0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff ff56 	bl	8005a40 <ptr_to_mem>
 8005b94:	4604      	mov	r4, r0
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f7ff ff64 	bl	8005a64 <mem_to_ptr>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}
 8005ba8:	2000009c 	.word	0x2000009c
 8005bac:	080136b0 	.word	0x080136b0
 8005bb0:	080136e0 	.word	0x080136e0
 8005bb4:	080136f8 	.word	0x080136f8
 8005bb8:	200000a0 	.word	0x200000a0
 8005bbc:	08013720 	.word	0x08013720
 8005bc0:	0801373c 	.word	0x0801373c
 8005bc4:	08013758 	.word	0x08013758
 8005bc8:	200000a4 	.word	0x200000a4

08005bcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <mem_init+0x68>)
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <mem_init+0x6c>)
 8005bde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <mem_init+0x6c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005bec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005bfa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005bfe:	f7ff ff1f 	bl	8005a40 <ptr_to_mem>
 8005c02:	4603      	mov	r3, r0
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <mem_init+0x70>)
 8005c06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <mem_init+0x70>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <mem_init+0x70>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005c18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <mem_init+0x70>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005c22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <mem_init+0x6c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <mem_init+0x74>)
 8005c2a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20003440 	.word	0x20003440
 8005c38:	2000009c 	.word	0x2000009c
 8005c3c:	200000a0 	.word	0x200000a0
 8005c40:	200000a4 	.word	0x200000a4

08005c44 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff09 	bl	8005a64 <mem_to_ptr>
 8005c52:	4603      	mov	r3, r0
 8005c54:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fef0 	bl	8005a40 <ptr_to_mem>
 8005c60:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff feea 	bl	8005a40 <ptr_to_mem>
 8005c6c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c76:	d818      	bhi.n	8005caa <mem_link_valid+0x66>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	885b      	ldrh	r3, [r3, #2]
 8005c7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c80:	d813      	bhi.n	8005caa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c86:	8afa      	ldrh	r2, [r7, #22]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d004      	beq.n	8005c96 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	8afa      	ldrh	r2, [r7, #22]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d109      	bne.n	8005caa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <mem_link_valid+0x74>)
 8005c98:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d006      	beq.n	8005cae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	885b      	ldrh	r3, [r3, #2]
 8005ca4:	8afa      	ldrh	r2, [r7, #22]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d001      	beq.n	8005cae <mem_link_valid+0x6a>
    return 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <mem_link_valid+0x6c>
  }
  return 1;
 8005cae:	2301      	movs	r3, #1
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200000a0 	.word	0x200000a0

08005cbc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04c      	beq.n	8005d64 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <mem_free+0xb0>)
 8005cd6:	f240 2273 	movw	r2, #627	; 0x273
 8005cda:	4925      	ldr	r1, [pc, #148]	; (8005d70 <mem_free+0xb4>)
 8005cdc:	4825      	ldr	r0, [pc, #148]	; (8005d74 <mem_free+0xb8>)
 8005cde:	f00c fc21 	bl	8012524 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ce2:	e040      	b.n	8005d66 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3b08      	subs	r3, #8
 8005ce8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005cea:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <mem_free+0xbc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d306      	bcc.n	8005d02 <mem_free+0x46>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f103 020c 	add.w	r2, r3, #12
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <mem_free+0xc0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d907      	bls.n	8005d12 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <mem_free+0xb0>)
 8005d04:	f240 227f 	movw	r2, #639	; 0x27f
 8005d08:	491d      	ldr	r1, [pc, #116]	; (8005d80 <mem_free+0xc4>)
 8005d0a:	481a      	ldr	r0, [pc, #104]	; (8005d74 <mem_free+0xb8>)
 8005d0c:	f00c fc0a 	bl	8012524 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d10:	e029      	b.n	8005d66 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	791b      	ldrb	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d107      	bne.n	8005d2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <mem_free+0xb0>)
 8005d1c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005d20:	4918      	ldr	r1, [pc, #96]	; (8005d84 <mem_free+0xc8>)
 8005d22:	4814      	ldr	r0, [pc, #80]	; (8005d74 <mem_free+0xb8>)
 8005d24:	f00c fbfe 	bl	8012524 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d28:	e01d      	b.n	8005d66 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff ff8a 	bl	8005c44 <mem_link_valid>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <mem_free+0xb0>)
 8005d38:	f240 2295 	movw	r2, #661	; 0x295
 8005d3c:	4912      	ldr	r1, [pc, #72]	; (8005d88 <mem_free+0xcc>)
 8005d3e:	480d      	ldr	r0, [pc, #52]	; (8005d74 <mem_free+0xb8>)
 8005d40:	f00c fbf0 	bl	8012524 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d44:	e00f      	b.n	8005d66 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <mem_free+0xd0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d202      	bcs.n	8005d5c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005d56:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <mem_free+0xd0>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff fe93 	bl	8005a88 <plug_holes>
 8005d62:	e000      	b.n	8005d66 <mem_free+0xaa>
    return;
 8005d64:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	080136b0 	.word	0x080136b0
 8005d70:	08013784 	.word	0x08013784
 8005d74:	080136f8 	.word	0x080136f8
 8005d78:	2000009c 	.word	0x2000009c
 8005d7c:	200000a0 	.word	0x200000a0
 8005d80:	080137a8 	.word	0x080137a8
 8005d84:	080137c4 	.word	0x080137c4
 8005d88:	080137ec 	.word	0x080137ec
 8005d8c:	200000a4 	.word	0x200000a4

08005d90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	3303      	adds	r3, #3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005da8:	8bfb      	ldrh	r3, [r7, #30]
 8005daa:	2b0b      	cmp	r3, #11
 8005dac:	d801      	bhi.n	8005db2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005dae:	230c      	movs	r3, #12
 8005db0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005db8:	d803      	bhi.n	8005dc2 <mem_trim+0x32>
 8005dba:	8bfa      	ldrh	r2, [r7, #30]
 8005dbc:	887b      	ldrh	r3, [r7, #2]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d201      	bcs.n	8005dc6 <mem_trim+0x36>
    return NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e0cc      	b.n	8005f60 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005dc6:	4b68      	ldr	r3, [pc, #416]	; (8005f68 <mem_trim+0x1d8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d304      	bcc.n	8005dda <mem_trim+0x4a>
 8005dd0:	4b66      	ldr	r3, [pc, #408]	; (8005f6c <mem_trim+0x1dc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d306      	bcc.n	8005de8 <mem_trim+0x58>
 8005dda:	4b65      	ldr	r3, [pc, #404]	; (8005f70 <mem_trim+0x1e0>)
 8005ddc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005de0:	4964      	ldr	r1, [pc, #400]	; (8005f74 <mem_trim+0x1e4>)
 8005de2:	4865      	ldr	r0, [pc, #404]	; (8005f78 <mem_trim+0x1e8>)
 8005de4:	f00c fb9e 	bl	8012524 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005de8:	4b5f      	ldr	r3, [pc, #380]	; (8005f68 <mem_trim+0x1d8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d304      	bcc.n	8005dfc <mem_trim+0x6c>
 8005df2:	4b5e      	ldr	r3, [pc, #376]	; (8005f6c <mem_trim+0x1dc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d301      	bcc.n	8005e00 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	e0af      	b.n	8005f60 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3b08      	subs	r3, #8
 8005e04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005e06:	69b8      	ldr	r0, [r7, #24]
 8005e08:	f7ff fe2c 	bl	8005a64 <mem_to_ptr>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	8afb      	ldrh	r3, [r7, #22]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b08      	subs	r3, #8
 8005e1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005e1e:	8bfa      	ldrh	r2, [r7, #30]
 8005e20:	8abb      	ldrh	r3, [r7, #20]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d906      	bls.n	8005e34 <mem_trim+0xa4>
 8005e26:	4b52      	ldr	r3, [pc, #328]	; (8005f70 <mem_trim+0x1e0>)
 8005e28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005e2c:	4953      	ldr	r1, [pc, #332]	; (8005f7c <mem_trim+0x1ec>)
 8005e2e:	4852      	ldr	r0, [pc, #328]	; (8005f78 <mem_trim+0x1e8>)
 8005e30:	f00c fb78 	bl	8012524 <iprintf>
  if (newsize > size) {
 8005e34:	8bfa      	ldrh	r2, [r7, #30]
 8005e36:	8abb      	ldrh	r3, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d901      	bls.n	8005e40 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e08f      	b.n	8005f60 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005e40:	8bfa      	ldrh	r2, [r7, #30]
 8005e42:	8abb      	ldrh	r3, [r7, #20]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d101      	bne.n	8005e4c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	e089      	b.n	8005f60 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fdf5 	bl	8005a40 <ptr_to_mem>
 8005e56:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	791b      	ldrb	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13f      	bne.n	8005ee0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e68:	d106      	bne.n	8005e78 <mem_trim+0xe8>
 8005e6a:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <mem_trim+0x1e0>)
 8005e6c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005e70:	4943      	ldr	r1, [pc, #268]	; (8005f80 <mem_trim+0x1f0>)
 8005e72:	4841      	ldr	r0, [pc, #260]	; (8005f78 <mem_trim+0x1e8>)
 8005e74:	f00c fb56 	bl	8012524 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e7e:	8afa      	ldrh	r2, [r7, #22]
 8005e80:	8bfb      	ldrh	r3, [r7, #30]
 8005e82:	4413      	add	r3, r2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3308      	adds	r3, #8
 8005e88:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <mem_trim+0x1f4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d106      	bne.n	8005ea2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005e94:	89fb      	ldrh	r3, [r7, #14]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fdd2 	bl	8005a40 <ptr_to_mem>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4a39      	ldr	r2, [pc, #228]	; (8005f84 <mem_trim+0x1f4>)
 8005ea0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005ea2:	89fb      	ldrh	r3, [r7, #14]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fdcb 	bl	8005a40 <ptr_to_mem>
 8005eaa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	89ba      	ldrh	r2, [r7, #12]
 8005eb6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	8afa      	ldrh	r2, [r7, #22]
 8005ebc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	89fa      	ldrh	r2, [r7, #14]
 8005ec2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ecc:	d047      	beq.n	8005f5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff fdb4 	bl	8005a40 <ptr_to_mem>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	8053      	strh	r3, [r2, #2]
 8005ede:	e03e      	b.n	8005f5e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	f103 0214 	add.w	r2, r3, #20
 8005ee6:	8abb      	ldrh	r3, [r7, #20]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d838      	bhi.n	8005f5e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005eec:	8afa      	ldrh	r2, [r7, #22]
 8005eee:	8bfb      	ldrh	r3, [r7, #30]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f00:	d106      	bne.n	8005f10 <mem_trim+0x180>
 8005f02:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <mem_trim+0x1e0>)
 8005f04:	f240 3216 	movw	r2, #790	; 0x316
 8005f08:	491d      	ldr	r1, [pc, #116]	; (8005f80 <mem_trim+0x1f0>)
 8005f0a:	481b      	ldr	r0, [pc, #108]	; (8005f78 <mem_trim+0x1e8>)
 8005f0c:	f00c fb0a 	bl	8012524 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005f10:	89fb      	ldrh	r3, [r7, #14]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fd94 	bl	8005a40 <ptr_to_mem>
 8005f18:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <mem_trim+0x1f4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d202      	bcs.n	8005f2a <mem_trim+0x19a>
      lfree = mem2;
 8005f24:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <mem_trim+0x1f4>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	8afa      	ldrh	r2, [r7, #22]
 8005f3c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f4c:	d007      	beq.n	8005f5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fd74 	bl	8005a40 <ptr_to_mem>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005f5e:	687b      	ldr	r3, [r7, #4]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2000009c 	.word	0x2000009c
 8005f6c:	200000a0 	.word	0x200000a0
 8005f70:	080136b0 	.word	0x080136b0
 8005f74:	08013820 	.word	0x08013820
 8005f78:	080136f8 	.word	0x080136f8
 8005f7c:	08013838 	.word	0x08013838
 8005f80:	08013858 	.word	0x08013858
 8005f84:	200000a4 	.word	0x200000a4

08005f88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <mem_malloc+0x14>
    return NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e0d9      	b.n	8006150 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	3303      	adds	r3, #3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005fa8:	8bbb      	ldrh	r3, [r7, #28]
 8005faa:	2b0b      	cmp	r3, #11
 8005fac:	d801      	bhi.n	8005fb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005fae:	230c      	movs	r3, #12
 8005fb0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005fb2:	8bbb      	ldrh	r3, [r7, #28]
 8005fb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fb8:	d803      	bhi.n	8005fc2 <mem_malloc+0x3a>
 8005fba:	8bba      	ldrh	r2, [r7, #28]
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d201      	bcs.n	8005fc6 <mem_malloc+0x3e>
    return NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e0c4      	b.n	8006150 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005fc6:	4b64      	ldr	r3, [pc, #400]	; (8006158 <mem_malloc+0x1d0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fd4a 	bl	8005a64 <mem_to_ptr>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	83fb      	strh	r3, [r7, #30]
 8005fd4:	e0b4      	b.n	8006140 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005fd6:	8bfb      	ldrh	r3, [r7, #30]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fd31 	bl	8005a40 <ptr_to_mem>
 8005fde:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 80a4 	bne.w	8006132 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	8bfb      	ldrh	r3, [r7, #30]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f1a3 0208 	sub.w	r2, r3, #8
 8005ff8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	f0c0 8099 	bcc.w	8006132 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	8bfb      	ldrh	r3, [r7, #30]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f1a3 0208 	sub.w	r2, r3, #8
 800600e:	8bbb      	ldrh	r3, [r7, #28]
 8006010:	3314      	adds	r3, #20
 8006012:	429a      	cmp	r2, r3
 8006014:	d333      	bcc.n	800607e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006016:	8bfa      	ldrh	r2, [r7, #30]
 8006018:	8bbb      	ldrh	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	3308      	adds	r3, #8
 8006020:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006022:	8a7b      	ldrh	r3, [r7, #18]
 8006024:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006028:	d106      	bne.n	8006038 <mem_malloc+0xb0>
 800602a:	4b4c      	ldr	r3, [pc, #304]	; (800615c <mem_malloc+0x1d4>)
 800602c:	f240 3287 	movw	r2, #903	; 0x387
 8006030:	494b      	ldr	r1, [pc, #300]	; (8006160 <mem_malloc+0x1d8>)
 8006032:	484c      	ldr	r0, [pc, #304]	; (8006164 <mem_malloc+0x1dc>)
 8006034:	f00c fa76 	bl	8012524 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006038:	8a7b      	ldrh	r3, [r7, #18]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fd00 	bl	8005a40 <ptr_to_mem>
 8006040:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	881a      	ldrh	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8bfa      	ldrh	r2, [r7, #30]
 8006054:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	8a7a      	ldrh	r2, [r7, #18]
 800605a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2201      	movs	r2, #1
 8006060:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800606a:	d00b      	beq.n	8006084 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fce5 	bl	8005a40 <ptr_to_mem>
 8006076:	4602      	mov	r2, r0
 8006078:	8a7b      	ldrh	r3, [r7, #18]
 800607a:	8053      	strh	r3, [r2, #2]
 800607c:	e002      	b.n	8006084 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2201      	movs	r2, #1
 8006082:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006084:	4b34      	ldr	r3, [pc, #208]	; (8006158 <mem_malloc+0x1d0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	429a      	cmp	r2, r3
 800608c:	d127      	bne.n	80060de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800608e:	4b32      	ldr	r3, [pc, #200]	; (8006158 <mem_malloc+0x1d0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006094:	e005      	b.n	80060a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fcd0 	bl	8005a40 <ptr_to_mem>
 80060a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <mem_malloc+0x12c>
 80060aa:	4b2f      	ldr	r3, [pc, #188]	; (8006168 <mem_malloc+0x1e0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d1f0      	bne.n	8006096 <mem_malloc+0x10e>
          }
          lfree = cur;
 80060b4:	4a28      	ldr	r2, [pc, #160]	; (8006158 <mem_malloc+0x1d0>)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80060ba:	4b27      	ldr	r3, [pc, #156]	; (8006158 <mem_malloc+0x1d0>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b2a      	ldr	r3, [pc, #168]	; (8006168 <mem_malloc+0x1e0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d00b      	beq.n	80060de <mem_malloc+0x156>
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <mem_malloc+0x1d0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <mem_malloc+0x156>
 80060d0:	4b22      	ldr	r3, [pc, #136]	; (800615c <mem_malloc+0x1d4>)
 80060d2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80060d6:	4925      	ldr	r1, [pc, #148]	; (800616c <mem_malloc+0x1e4>)
 80060d8:	4822      	ldr	r0, [pc, #136]	; (8006164 <mem_malloc+0x1dc>)
 80060da:	f00c fa23 	bl	8012524 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80060de:	8bba      	ldrh	r2, [r7, #28]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	3308      	adds	r3, #8
 80060e6:	4a20      	ldr	r2, [pc, #128]	; (8006168 <mem_malloc+0x1e0>)
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d906      	bls.n	80060fc <mem_malloc+0x174>
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <mem_malloc+0x1d4>)
 80060f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80060f4:	491e      	ldr	r1, [pc, #120]	; (8006170 <mem_malloc+0x1e8>)
 80060f6:	481b      	ldr	r0, [pc, #108]	; (8006164 <mem_malloc+0x1dc>)
 80060f8:	f00c fa14 	bl	8012524 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <mem_malloc+0x18c>
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <mem_malloc+0x1d4>)
 8006108:	f240 32bb 	movw	r2, #955	; 0x3bb
 800610c:	4919      	ldr	r1, [pc, #100]	; (8006174 <mem_malloc+0x1ec>)
 800610e:	4815      	ldr	r0, [pc, #84]	; (8006164 <mem_malloc+0x1dc>)
 8006110:	f00c fa08 	bl	8012524 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d006      	beq.n	800612c <mem_malloc+0x1a4>
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <mem_malloc+0x1d4>)
 8006120:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006124:	4914      	ldr	r1, [pc, #80]	; (8006178 <mem_malloc+0x1f0>)
 8006126:	480f      	ldr	r0, [pc, #60]	; (8006164 <mem_malloc+0x1dc>)
 8006128:	f00c f9fc 	bl	8012524 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3308      	adds	r3, #8
 8006130:	e00e      	b.n	8006150 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006132:	8bfb      	ldrh	r3, [r7, #30]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fc83 	bl	8005a40 <ptr_to_mem>
 800613a:	4603      	mov	r3, r0
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006140:	8bfa      	ldrh	r2, [r7, #30]
 8006142:	8bbb      	ldrh	r3, [r7, #28]
 8006144:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006148:	429a      	cmp	r2, r3
 800614a:	f4ff af44 	bcc.w	8005fd6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200000a4 	.word	0x200000a4
 800615c:	080136b0 	.word	0x080136b0
 8006160:	08013858 	.word	0x08013858
 8006164:	080136f8 	.word	0x080136f8
 8006168:	200000a0 	.word	0x200000a0
 800616c:	0801386c 	.word	0x0801386c
 8006170:	08013888 	.word	0x08013888
 8006174:	080138b8 	.word	0x080138b8
 8006178:	080138e8 	.word	0x080138e8

0800617c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	3303      	adds	r3, #3
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e011      	b.n	80061c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4413      	add	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4293      	cmp	r3, r2
 80061cc:	dbe7      	blt.n	800619e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80061e2:	2300      	movs	r3, #0
 80061e4:	80fb      	strh	r3, [r7, #6]
 80061e6:	e009      	b.n	80061fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	4a08      	ldr	r2, [pc, #32]	; (800620c <memp_init+0x30>)
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff ffc3 	bl	800617c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	3301      	adds	r3, #1
 80061fa:	80fb      	strh	r3, [r7, #6]
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d9f2      	bls.n	80061e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08016148 	.word	0x08016148

08006210 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d012      	beq.n	800624c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d006      	beq.n	8006248 <do_memp_malloc_pool+0x38>
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <do_memp_malloc_pool+0x48>)
 800623c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006240:	4906      	ldr	r1, [pc, #24]	; (800625c <do_memp_malloc_pool+0x4c>)
 8006242:	4807      	ldr	r0, [pc, #28]	; (8006260 <do_memp_malloc_pool+0x50>)
 8006244:	f00c f96e 	bl	8012524 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	e000      	b.n	800624e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	0801390c 	.word	0x0801390c
 800625c:	0801393c 	.word	0x0801393c
 8006260:	08013960 	.word	0x08013960

08006264 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b08      	cmp	r3, #8
 8006272:	d908      	bls.n	8006286 <memp_malloc+0x22>
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <memp_malloc+0x3c>)
 8006276:	f240 1257 	movw	r2, #343	; 0x157
 800627a:	490a      	ldr	r1, [pc, #40]	; (80062a4 <memp_malloc+0x40>)
 800627c:	480a      	ldr	r0, [pc, #40]	; (80062a8 <memp_malloc+0x44>)
 800627e:	f00c f951 	bl	8012524 <iprintf>
 8006282:	2300      	movs	r3, #0
 8006284:	e008      	b.n	8006298 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	4a08      	ldr	r2, [pc, #32]	; (80062ac <memp_malloc+0x48>)
 800628a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ffbe 	bl	8006210 <do_memp_malloc_pool>
 8006294:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	0801390c 	.word	0x0801390c
 80062a4:	0801399c 	.word	0x0801399c
 80062a8:	08013960 	.word	0x08013960
 80062ac:	08016148 	.word	0x08016148

080062b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d006      	beq.n	80062d2 <do_memp_free_pool+0x22>
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <do_memp_free_pool+0x40>)
 80062c6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80062ca:	490a      	ldr	r1, [pc, #40]	; (80062f4 <do_memp_free_pool+0x44>)
 80062cc:	480a      	ldr	r0, [pc, #40]	; (80062f8 <do_memp_free_pool+0x48>)
 80062ce:	f00c f929 	bl	8012524 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	0801390c 	.word	0x0801390c
 80062f4:	080139bc 	.word	0x080139bc
 80062f8:	08013960 	.word	0x08013960

080062fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	6039      	str	r1, [r7, #0]
 8006306:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	2b08      	cmp	r3, #8
 800630c:	d907      	bls.n	800631e <memp_free+0x22>
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <memp_free+0x44>)
 8006310:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006314:	490b      	ldr	r1, [pc, #44]	; (8006344 <memp_free+0x48>)
 8006316:	480c      	ldr	r0, [pc, #48]	; (8006348 <memp_free+0x4c>)
 8006318:	f00c f904 	bl	8012524 <iprintf>
 800631c:	e00c      	b.n	8006338 <memp_free+0x3c>

  if (mem == NULL) {
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <memp_free+0x50>)
 8006328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ffbe 	bl	80062b0 <do_memp_free_pool>
 8006334:	e000      	b.n	8006338 <memp_free+0x3c>
    return;
 8006336:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	0801390c 	.word	0x0801390c
 8006344:	080139dc 	.word	0x080139dc
 8006348:	08013960 	.word	0x08013960
 800634c:	08016148 	.word	0x08016148

08006350 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <netif_add+0x26>
 8006374:	4b57      	ldr	r3, [pc, #348]	; (80064d4 <netif_add+0x174>)
 8006376:	f240 1227 	movw	r2, #295	; 0x127
 800637a:	4957      	ldr	r1, [pc, #348]	; (80064d8 <netif_add+0x178>)
 800637c:	4857      	ldr	r0, [pc, #348]	; (80064dc <netif_add+0x17c>)
 800637e:	f00c f8d1 	bl	8012524 <iprintf>
 8006382:	2300      	movs	r3, #0
 8006384:	e0a2      	b.n	80064cc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <netif_add+0x3e>
 800638c:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <netif_add+0x174>)
 800638e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006392:	4953      	ldr	r1, [pc, #332]	; (80064e0 <netif_add+0x180>)
 8006394:	4851      	ldr	r0, [pc, #324]	; (80064dc <netif_add+0x17c>)
 8006396:	f00c f8c5 	bl	8012524 <iprintf>
 800639a:	2300      	movs	r3, #0
 800639c:	e096      	b.n	80064cc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80063a4:	4b4f      	ldr	r3, [pc, #316]	; (80064e4 <netif_add+0x184>)
 80063a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80063ae:	4b4d      	ldr	r3, [pc, #308]	; (80064e4 <netif_add+0x184>)
 80063b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80063b8:	4b4a      	ldr	r3, [pc, #296]	; (80064e4 <netif_add+0x184>)
 80063ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a45      	ldr	r2, [pc, #276]	; (80064e8 <netif_add+0x188>)
 80063d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80063ee:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <netif_add+0x18c>)
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f913 	bl	8006630 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	4798      	blx	r3
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <netif_add+0xba>
    return NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	e058      	b.n	80064cc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006420:	2bff      	cmp	r3, #255	; 0xff
 8006422:	d103      	bne.n	800642c <netif_add+0xcc>
        netif->num = 0;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006430:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <netif_add+0x190>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e02b      	b.n	8006490 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	d106      	bne.n	800644e <netif_add+0xee>
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <netif_add+0x174>)
 8006442:	f240 128b 	movw	r2, #395	; 0x18b
 8006446:	492b      	ldr	r1, [pc, #172]	; (80064f4 <netif_add+0x194>)
 8006448:	4824      	ldr	r0, [pc, #144]	; (80064dc <netif_add+0x17c>)
 800644a:	f00c f86b 	bl	8012524 <iprintf>
        num_netifs++;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3301      	adds	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2bff      	cmp	r3, #255	; 0xff
 8006458:	dd06      	ble.n	8006468 <netif_add+0x108>
 800645a:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <netif_add+0x174>)
 800645c:	f240 128d 	movw	r2, #397	; 0x18d
 8006460:	4925      	ldr	r1, [pc, #148]	; (80064f8 <netif_add+0x198>)
 8006462:	481e      	ldr	r0, [pc, #120]	; (80064dc <netif_add+0x17c>)
 8006464:	f00c f85e 	bl	8012524 <iprintf>
        if (netif2->num == netif->num) {
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006474:	429a      	cmp	r2, r3
 8006476:	d108      	bne.n	800648a <netif_add+0x12a>
          netif->num++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800647e:	3301      	adds	r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006488:	e005      	b.n	8006496 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1d0      	bne.n	8006438 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1be      	bne.n	800641a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064a2:	2bfe      	cmp	r3, #254	; 0xfe
 80064a4:	d103      	bne.n	80064ae <netif_add+0x14e>
    netif_num = 0;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <netif_add+0x18c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	e006      	b.n	80064bc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b4:	3301      	adds	r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <netif_add+0x18c>)
 80064ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <netif_add+0x190>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80064c4:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <netif_add+0x190>)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	080139f8 	.word	0x080139f8
 80064d8:	08013a8c 	.word	0x08013a8c
 80064dc:	08013a48 	.word	0x08013a48
 80064e0:	08013aa8 	.word	0x08013aa8
 80064e4:	080161ac 	.word	0x080161ac
 80064e8:	08006843 	.word	0x08006843
 80064ec:	200000cc 	.word	0x200000cc
 80064f0:	2000695c 	.word	0x2000695c
 80064f4:	08013acc 	.word	0x08013acc
 80064f8:	08013ae0 	.word	0x08013ae0

080064fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f002 fd8f 	bl	800902c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f007 fac7 	bl	800daa4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <netif_do_set_ipaddr+0x20>
 8006532:	4b1d      	ldr	r3, [pc, #116]	; (80065a8 <netif_do_set_ipaddr+0x88>)
 8006534:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006538:	491c      	ldr	r1, [pc, #112]	; (80065ac <netif_do_set_ipaddr+0x8c>)
 800653a:	481d      	ldr	r0, [pc, #116]	; (80065b0 <netif_do_set_ipaddr+0x90>)
 800653c:	f00b fff2 	bl	8012524 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <netif_do_set_ipaddr+0x34>
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <netif_do_set_ipaddr+0x88>)
 8006548:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800654c:	4917      	ldr	r1, [pc, #92]	; (80065ac <netif_do_set_ipaddr+0x8c>)
 800654e:	4818      	ldr	r0, [pc, #96]	; (80065b0 <netif_do_set_ipaddr+0x90>)
 8006550:	f00b ffe8 	bl	8012524 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d01c      	beq.n	800659c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3304      	adds	r3, #4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ffbf 	bl	80064fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <netif_do_set_ipaddr+0x6a>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	e000      	b.n	800658c <netif_do_set_ipaddr+0x6c>
 800658a:	2300      	movs	r3, #0
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006590:	2101      	movs	r1, #1
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f8d2 	bl	800673c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	080139f8 	.word	0x080139f8
 80065ac:	08013b10 	.word	0x08013b10
 80065b0:	08013a48 	.word	0x08013a48

080065b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3308      	adds	r3, #8
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d00a      	beq.n	80065e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <netif_do_set_netmask+0x26>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	e000      	b.n	80065dc <netif_do_set_netmask+0x28>
 80065da:	2300      	movs	r3, #0
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	330c      	adds	r3, #12
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d00a      	beq.n	8006622 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <netif_do_set_gw+0x26>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	e000      	b.n	800661a <netif_do_set_gw+0x28>
 8006618:	2300      	movs	r3, #0
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800664c:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <netif_set_addr+0x90>)
 800664e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006656:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <netif_set_addr+0x90>)
 8006658:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <netif_set_addr+0x90>)
 8006662:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <netif_set_addr+0x42>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <netif_set_addr+0x46>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <netif_set_addr+0x48>
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
  if (remove) {
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d006      	beq.n	800668e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	461a      	mov	r2, r3
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ff49 	bl	8006520 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ff8e 	bl	80065b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff ffa8 	bl	80065f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80066a8:	f107 0310 	add.w	r3, r7, #16
 80066ac:	461a      	mov	r2, r3
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff ff35 	bl	8006520 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80066b6:	bf00      	nop
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	080161ac 	.word	0x080161ac

080066c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80066cc:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <netif_set_default+0x1c>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20006960 	.word	0x20006960

080066e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <netif_set_up+0x1e>
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <netif_set_up+0x4c>)
 80066f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80066f8:	490e      	ldr	r1, [pc, #56]	; (8006734 <netif_set_up+0x50>)
 80066fa:	480f      	ldr	r0, [pc, #60]	; (8006738 <netif_set_up+0x54>)
 80066fc:	f00b ff12 	bl	8012524 <iprintf>
 8006700:	e013      	b.n	800672a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	b2da      	uxtb	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006722:	2103      	movs	r1, #3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f809 	bl	800673c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	080139f8 	.word	0x080139f8
 8006734:	08013b80 	.word	0x08013b80
 8006738:	08013a48 	.word	0x08013a48

0800673c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <netif_issue_reports+0x20>
 800674e:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <netif_issue_reports+0x74>)
 8006750:	f240 326d 	movw	r2, #877	; 0x36d
 8006754:	4917      	ldr	r1, [pc, #92]	; (80067b4 <netif_issue_reports+0x78>)
 8006756:	4818      	ldr	r0, [pc, #96]	; (80067b8 <netif_issue_reports+0x7c>)
 8006758:	f00b fee4 	bl	8012524 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01e      	beq.n	80067a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006770:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d013      	beq.n	80067aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00e      	beq.n	80067aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f008 f8e9 	bl	800e978 <etharp_request>
 80067a6:	e000      	b.n	80067aa <netif_issue_reports+0x6e>
    return;
 80067a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	080139f8 	.word	0x080139f8
 80067b4:	08013b9c 	.word	0x08013b9c
 80067b8:	08013a48 	.word	0x08013a48

080067bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d107      	bne.n	80067da <netif_set_down+0x1e>
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <netif_set_down+0x58>)
 80067cc:	f240 329b 	movw	r2, #923	; 0x39b
 80067d0:	4911      	ldr	r1, [pc, #68]	; (8006818 <netif_set_down+0x5c>)
 80067d2:	4812      	ldr	r0, [pc, #72]	; (800681c <netif_set_down+0x60>)
 80067d4:	f00b fea6 	bl	8012524 <iprintf>
 80067d8:	e019      	b.n	800680e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d012      	beq.n	800680e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f007 fc73 	bl	800e0f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	080139f8 	.word	0x080139f8
 8006818:	08013bc0 	.word	0x08013bc0
 800681c:	08013a48 	.word	0x08013a48

08006820 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	61da      	str	r2, [r3, #28]
  }
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800684e:	f06f 030b 	mvn.w	r3, #11
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d013      	beq.n	8006898 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <netif_get_by_index+0x48>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e00c      	b.n	8006892 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800687e:	3301      	adds	r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	79fa      	ldrb	r2, [r7, #7]
 8006884:	429a      	cmp	r2, r3
 8006886:	d101      	bne.n	800688c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	e006      	b.n	800689a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ef      	bne.n	8006878 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	2000695c 	.word	0x2000695c

080068ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <pbuf_free_ooseq+0x38>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <pbuf_free_ooseq+0x3c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	e00a      	b.n	80068d6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 fbed 	bl	80090a8 <tcp_free_ooseq>
      return;
 80068ce:	e005      	b.n	80068dc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20006964 	.word	0x20006964
 80068e8:	2000696c 	.word	0x2000696c

080068ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <pbuf_pool_is_empty+0x14>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20006964 	.word	0x20006964

08006904 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4611      	mov	r1, r2
 8006910:	461a      	mov	r2, r3
 8006912:	460b      	mov	r3, r1
 8006914:	80fb      	strh	r3, [r7, #6]
 8006916:	4613      	mov	r3, r2
 8006918:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88ba      	ldrh	r2, [r7, #4]
 8006930:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006932:	8b3b      	ldrh	r3, [r7, #24]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7f3a      	ldrb	r2, [r7, #28]
 800693e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	73da      	strb	r2, [r3, #15]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08c      	sub	sp, #48	; 0x30
 800695c:	af02      	add	r7, sp, #8
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
 8006962:	460b      	mov	r3, r1
 8006964:	80bb      	strh	r3, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006974:	d07f      	beq.n	8006a76 <pbuf_alloc+0x11e>
 8006976:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800697a:	f300 80c8 	bgt.w	8006b0e <pbuf_alloc+0x1b6>
 800697e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006982:	d010      	beq.n	80069a6 <pbuf_alloc+0x4e>
 8006984:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006988:	f300 80c1 	bgt.w	8006b0e <pbuf_alloc+0x1b6>
 800698c:	2b01      	cmp	r3, #1
 800698e:	d002      	beq.n	8006996 <pbuf_alloc+0x3e>
 8006990:	2b41      	cmp	r3, #65	; 0x41
 8006992:	f040 80bc 	bne.w	8006b0e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006996:	887a      	ldrh	r2, [r7, #2]
 8006998:	88bb      	ldrh	r3, [r7, #4]
 800699a:	4619      	mov	r1, r3
 800699c:	2000      	movs	r0, #0
 800699e:	f000 f8d1 	bl	8006b44 <pbuf_alloc_reference>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80069a4:	e0bd      	b.n	8006b22 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80069ae:	88bb      	ldrh	r3, [r7, #4]
 80069b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80069b2:	2008      	movs	r0, #8
 80069b4:	f7ff fc56 	bl	8006264 <memp_malloc>
 80069b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80069c0:	f7ff ff94 	bl	80068ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80069ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069cc:	f000 faa8 	bl	8006f20 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e0a7      	b.n	8006b24 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80069d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d6:	3303      	adds	r3, #3
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	8b7a      	ldrh	r2, [r7, #26]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bf28      	it	cs
 80069ec:	4613      	movcs	r3, r2
 80069ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80069f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069f2:	3310      	adds	r3, #16
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	3303      	adds	r3, #3
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	4618      	mov	r0, r3
 8006a00:	89f9      	ldrh	r1, [r7, #14]
 8006a02:	8b7a      	ldrh	r2, [r7, #26]
 8006a04:	2300      	movs	r3, #0
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4601      	mov	r1, r0
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7ff ff77 	bl	8006904 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <pbuf_alloc+0xd8>
 8006a22:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <pbuf_alloc+0x1d4>)
 8006a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a28:	4941      	ldr	r1, [pc, #260]	; (8006b30 <pbuf_alloc+0x1d8>)
 8006a2a:	4842      	ldr	r0, [pc, #264]	; (8006b34 <pbuf_alloc+0x1dc>)
 8006a2c:	f00b fd7a 	bl	8012524 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a32:	3303      	adds	r3, #3
 8006a34:	f023 0303 	bic.w	r3, r3, #3
 8006a38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006a3c:	d106      	bne.n	8006a4c <pbuf_alloc+0xf4>
 8006a3e:	4b3b      	ldr	r3, [pc, #236]	; (8006b2c <pbuf_alloc+0x1d4>)
 8006a40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006a44:	493c      	ldr	r1, [pc, #240]	; (8006b38 <pbuf_alloc+0x1e0>)
 8006a46:	483b      	ldr	r0, [pc, #236]	; (8006b34 <pbuf_alloc+0x1dc>)
 8006a48:	f00b fd6c 	bl	8012524 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
 8006a56:	e002      	b.n	8006a5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006a62:	8b7a      	ldrh	r2, [r7, #26]
 8006a64:	89fb      	ldrh	r3, [r7, #14]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006a6e:	8b7b      	ldrh	r3, [r7, #26]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d19e      	bne.n	80069b2 <pbuf_alloc+0x5a>
      break;
 8006a74:	e055      	b.n	8006b22 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a78:	3303      	adds	r3, #3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f023 0303 	bic.w	r3, r3, #3
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	88bb      	ldrh	r3, [r7, #4]
 8006a84:	3303      	adds	r3, #3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006a92:	8b3b      	ldrh	r3, [r7, #24]
 8006a94:	3310      	adds	r3, #16
 8006a96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006a98:	8b3a      	ldrh	r2, [r7, #24]
 8006a9a:	88bb      	ldrh	r3, [r7, #4]
 8006a9c:	3303      	adds	r3, #3
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d306      	bcc.n	8006ab4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006aa6:	8afa      	ldrh	r2, [r7, #22]
 8006aa8:	88bb      	ldrh	r3, [r7, #4]
 8006aaa:	3303      	adds	r3, #3
 8006aac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d201      	bcs.n	8006ab8 <pbuf_alloc+0x160>
        return NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e035      	b.n	8006b24 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006ab8:	8afb      	ldrh	r3, [r7, #22]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fa64 	bl	8005f88 <mem_malloc>
 8006ac0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <pbuf_alloc+0x174>
        return NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e02b      	b.n	8006b24 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006acc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ace:	3310      	adds	r3, #16
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	4618      	mov	r0, r3
 8006adc:	88b9      	ldrh	r1, [r7, #4]
 8006ade:	88ba      	ldrh	r2, [r7, #4]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4601      	mov	r1, r0
 8006aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aee:	f7ff ff09 	bl	8006904 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d010      	beq.n	8006b20 <pbuf_alloc+0x1c8>
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <pbuf_alloc+0x1d4>)
 8006b00:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006b04:	490d      	ldr	r1, [pc, #52]	; (8006b3c <pbuf_alloc+0x1e4>)
 8006b06:	480b      	ldr	r0, [pc, #44]	; (8006b34 <pbuf_alloc+0x1dc>)
 8006b08:	f00b fd0c 	bl	8012524 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006b0c:	e008      	b.n	8006b20 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <pbuf_alloc+0x1d4>)
 8006b10:	f240 1227 	movw	r2, #295	; 0x127
 8006b14:	490a      	ldr	r1, [pc, #40]	; (8006b40 <pbuf_alloc+0x1e8>)
 8006b16:	4807      	ldr	r0, [pc, #28]	; (8006b34 <pbuf_alloc+0x1dc>)
 8006b18:	f00b fd04 	bl	8012524 <iprintf>
      return NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e001      	b.n	8006b24 <pbuf_alloc+0x1cc>
      break;
 8006b20:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3728      	adds	r7, #40	; 0x28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08013c28 	.word	0x08013c28
 8006b30:	08013c58 	.word	0x08013c58
 8006b34:	08013c88 	.word	0x08013c88
 8006b38:	08013cb0 	.word	0x08013cb0
 8006b3c:	08013ce4 	.word	0x08013ce4
 8006b40:	08013d10 	.word	0x08013d10

08006b44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	807b      	strh	r3, [r7, #2]
 8006b50:	4613      	mov	r3, r2
 8006b52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006b54:	883b      	ldrh	r3, [r7, #0]
 8006b56:	2b41      	cmp	r3, #65	; 0x41
 8006b58:	d009      	beq.n	8006b6e <pbuf_alloc_reference+0x2a>
 8006b5a:	883b      	ldrh	r3, [r7, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d006      	beq.n	8006b6e <pbuf_alloc_reference+0x2a>
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <pbuf_alloc_reference+0x5c>)
 8006b62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006b66:	490f      	ldr	r1, [pc, #60]	; (8006ba4 <pbuf_alloc_reference+0x60>)
 8006b68:	480f      	ldr	r0, [pc, #60]	; (8006ba8 <pbuf_alloc_reference+0x64>)
 8006b6a:	f00b fcdb 	bl	8012524 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006b6e:	2007      	movs	r0, #7
 8006b70:	f7ff fb78 	bl	8006264 <memp_malloc>
 8006b74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e00b      	b.n	8006b98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006b80:	8879      	ldrh	r1, [r7, #2]
 8006b82:	887a      	ldrh	r2, [r7, #2]
 8006b84:	2300      	movs	r3, #0
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	883b      	ldrh	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff feb7 	bl	8006904 <pbuf_init_alloced_pbuf>
  return p;
 8006b96:	68fb      	ldr	r3, [r7, #12]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	08013c28 	.word	0x08013c28
 8006ba4:	08013d2c 	.word	0x08013d2c
 8006ba8:	08013c88 	.word	0x08013c88

08006bac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	81bb      	strh	r3, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006bc4:	8a7b      	ldrh	r3, [r7, #18]
 8006bc6:	3303      	adds	r3, #3
 8006bc8:	f023 0203 	bic.w	r2, r3, #3
 8006bcc:	89bb      	ldrh	r3, [r7, #12]
 8006bce:	441a      	add	r2, r3
 8006bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d901      	bls.n	8006bda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e018      	b.n	8006c0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006be0:	8a7b      	ldrh	r3, [r7, #18]
 8006be2:	3303      	adds	r3, #3
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	4413      	add	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e001      	b.n	8006bf4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	89b9      	ldrh	r1, [r7, #12]
 8006bf8:	89ba      	ldrh	r2, [r7, #12]
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	897b      	ldrh	r3, [r7, #10]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	460b      	mov	r3, r1
 8006c04:	6979      	ldr	r1, [r7, #20]
 8006c06:	f7ff fe7d 	bl	8006904 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006c0a:	687b      	ldr	r3, [r7, #4]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <pbuf_realloc+0x20>
 8006c26:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <pbuf_realloc+0xfc>)
 8006c28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006c2c:	4939      	ldr	r1, [pc, #228]	; (8006d14 <pbuf_realloc+0x100>)
 8006c2e:	483a      	ldr	r0, [pc, #232]	; (8006d18 <pbuf_realloc+0x104>)
 8006c30:	f00b fc78 	bl	8012524 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	891b      	ldrh	r3, [r3, #8]
 8006c38:	887a      	ldrh	r2, [r7, #2]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d263      	bcs.n	8006d06 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	891a      	ldrh	r2, [r3, #8]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	817b      	strh	r3, [r7, #10]
  q = p;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006c50:	e018      	b.n	8006c84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	895b      	ldrh	r3, [r3, #10]
 8006c56:	897a      	ldrh	r2, [r7, #10]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	891a      	ldrh	r2, [r3, #8]
 8006c60:	893b      	ldrh	r3, [r7, #8]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <pbuf_realloc+0x70>
 8006c76:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <pbuf_realloc+0xfc>)
 8006c78:	f240 12af 	movw	r2, #431	; 0x1af
 8006c7c:	4927      	ldr	r1, [pc, #156]	; (8006d1c <pbuf_realloc+0x108>)
 8006c7e:	4826      	ldr	r0, [pc, #152]	; (8006d18 <pbuf_realloc+0x104>)
 8006c80:	f00b fc50 	bl	8012524 <iprintf>
  while (rem_len > q->len) {
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	895b      	ldrh	r3, [r3, #10]
 8006c88:	897a      	ldrh	r2, [r7, #10]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d8e1      	bhi.n	8006c52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	7b1b      	ldrb	r3, [r3, #12]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d121      	bne.n	8006cde <pbuf_realloc+0xca>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	895b      	ldrh	r3, [r3, #10]
 8006c9e:	897a      	ldrh	r2, [r7, #10]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d01c      	beq.n	8006cde <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	7b5b      	ldrb	r3, [r3, #13]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d116      	bne.n	8006cde <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	897b      	ldrh	r3, [r7, #10]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff f864 	bl	8005d90 <mem_trim>
 8006cc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <pbuf_realloc+0xca>
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <pbuf_realloc+0xfc>)
 8006cd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006cd6:	4912      	ldr	r1, [pc, #72]	; (8006d20 <pbuf_realloc+0x10c>)
 8006cd8:	480f      	ldr	r0, [pc, #60]	; (8006d18 <pbuf_realloc+0x104>)
 8006cda:	f00b fc23 	bl	8012524 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	897a      	ldrh	r2, [r7, #10]
 8006ce2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	895a      	ldrh	r2, [r3, #10]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f911 	bl	8006f20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e000      	b.n	8006d08 <pbuf_realloc+0xf4>
    return;
 8006d06:	bf00      	nop

}
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	08013c28 	.word	0x08013c28
 8006d14:	08013d40 	.word	0x08013d40
 8006d18:	08013c88 	.word	0x08013c88
 8006d1c:	08013d58 	.word	0x08013d58
 8006d20:	08013d70 	.word	0x08013d70

08006d24 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <pbuf_add_header_impl+0x22>
 8006d38:	4b2b      	ldr	r3, [pc, #172]	; (8006de8 <pbuf_add_header_impl+0xc4>)
 8006d3a:	f240 12df 	movw	r2, #479	; 0x1df
 8006d3e:	492b      	ldr	r1, [pc, #172]	; (8006dec <pbuf_add_header_impl+0xc8>)
 8006d40:	482b      	ldr	r0, [pc, #172]	; (8006df0 <pbuf_add_header_impl+0xcc>)
 8006d42:	f00b fbef 	bl	8012524 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <pbuf_add_header_impl+0x30>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d301      	bcc.n	8006d58 <pbuf_add_header_impl+0x34>
    return 1;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e043      	b.n	8006de0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <pbuf_add_header_impl+0x3e>
    return 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e03e      	b.n	8006de0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	891a      	ldrh	r2, [r3, #8]
 8006d6a:	8a7b      	ldrh	r3, [r7, #18]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8a7a      	ldrh	r2, [r7, #18]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d901      	bls.n	8006d7a <pbuf_add_header_impl+0x56>
    return 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e032      	b.n	8006de0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7b1b      	ldrb	r3, [r3, #12]
 8006d7e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006d80:	8a3b      	ldrh	r3, [r7, #16]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	425b      	negs	r3, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3310      	adds	r3, #16
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d20d      	bcs.n	8006dbc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e01d      	b.n	8006de0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d006      	beq.n	8006db8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	425b      	negs	r3, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	e001      	b.n	8006dbc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e011      	b.n	8006de0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	895a      	ldrh	r2, [r3, #10]
 8006dc6:	8a7b      	ldrh	r3, [r7, #18]
 8006dc8:	4413      	add	r3, r2
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	891a      	ldrh	r2, [r3, #8]
 8006dd4:	8a7b      	ldrh	r3, [r7, #18]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	811a      	strh	r2, [r3, #8]


  return 0;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	08013c28 	.word	0x08013c28
 8006dec:	08013d8c 	.word	0x08013d8c
 8006df0:	08013c88 	.word	0x08013c88

08006df4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff8e 	bl	8006d24 <pbuf_add_header_impl>
 8006e08:	4603      	mov	r3, r0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <pbuf_remove_header+0x1e>
 8006e24:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <pbuf_remove_header+0x94>)
 8006e26:	f240 224b 	movw	r2, #587	; 0x24b
 8006e2a:	4920      	ldr	r1, [pc, #128]	; (8006eac <pbuf_remove_header+0x98>)
 8006e2c:	4820      	ldr	r0, [pc, #128]	; (8006eb0 <pbuf_remove_header+0x9c>)
 8006e2e:	f00b fb79 	bl	8012524 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <pbuf_remove_header+0x2c>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d301      	bcc.n	8006e44 <pbuf_remove_header+0x30>
    return 1;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e02c      	b.n	8006e9e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <pbuf_remove_header+0x3a>
    return 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e027      	b.n	8006e9e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	895b      	ldrh	r3, [r3, #10]
 8006e56:	89fa      	ldrh	r2, [r7, #14]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d908      	bls.n	8006e6e <pbuf_remove_header+0x5a>
 8006e5c:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <pbuf_remove_header+0x94>)
 8006e5e:	f240 2255 	movw	r2, #597	; 0x255
 8006e62:	4914      	ldr	r1, [pc, #80]	; (8006eb4 <pbuf_remove_header+0xa0>)
 8006e64:	4812      	ldr	r0, [pc, #72]	; (8006eb0 <pbuf_remove_header+0x9c>)
 8006e66:	f00b fb5d 	bl	8012524 <iprintf>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e017      	b.n	8006e9e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	441a      	add	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	895a      	ldrh	r2, [r3, #10]
 8006e84:	89fb      	ldrh	r3, [r7, #14]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	891a      	ldrh	r2, [r3, #8]
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08013c28 	.word	0x08013c28
 8006eac:	08013d8c 	.word	0x08013d8c
 8006eb0:	08013c88 	.word	0x08013c88
 8006eb4:	08013d98 	.word	0x08013d98

08006eb8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ec8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da08      	bge.n	8006ee2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006ed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ed4:	425b      	negs	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ff9b 	bl	8006e14 <pbuf_remove_header>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	e007      	b.n	8006ef2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006ee2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ee6:	787a      	ldrb	r2, [r7, #1]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff ff1a 	bl	8006d24 <pbuf_add_header_impl>
 8006ef0:	4603      	mov	r3, r0
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006f06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff ffd2 	bl	8006eb8 <pbuf_header_impl>
 8006f14:	4603      	mov	r3, r0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <pbuf_free+0x22>
 8006f34:	4b38      	ldr	r3, [pc, #224]	; (8007018 <pbuf_free+0xf8>)
 8006f36:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006f3a:	4938      	ldr	r1, [pc, #224]	; (800701c <pbuf_free+0xfc>)
 8006f3c:	4838      	ldr	r0, [pc, #224]	; (8007020 <pbuf_free+0x100>)
 8006f3e:	f00b faf1 	bl	8012524 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e063      	b.n	800700e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006f4a:	e05c      	b.n	8007006 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7b9b      	ldrb	r3, [r3, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <pbuf_free+0x42>
 8006f54:	4b30      	ldr	r3, [pc, #192]	; (8007018 <pbuf_free+0xf8>)
 8006f56:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006f5a:	4932      	ldr	r1, [pc, #200]	; (8007024 <pbuf_free+0x104>)
 8006f5c:	4830      	ldr	r0, [pc, #192]	; (8007020 <pbuf_free+0x100>)
 8006f5e:	f00b fae1 	bl	8012524 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7b9b      	ldrb	r3, [r3, #14]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	739a      	strb	r2, [r3, #14]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	7b9b      	ldrb	r3, [r3, #14]
 8006f72:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006f74:	7dbb      	ldrb	r3, [r7, #22]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d143      	bne.n	8007002 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7b1b      	ldrb	r3, [r3, #12]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7b5b      	ldrb	r3, [r3, #13]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d011      	beq.n	8006fba <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <pbuf_free+0x90>
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <pbuf_free+0xf8>)
 8006fa4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006fa8:	491f      	ldr	r1, [pc, #124]	; (8007028 <pbuf_free+0x108>)
 8006faa:	481d      	ldr	r0, [pc, #116]	; (8007020 <pbuf_free+0x100>)
 8006fac:	f00b faba 	bl	8012524 <iprintf>
        pc->custom_free_function(p);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
 8006fb8:	e01d      	b.n	8006ff6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d104      	bne.n	8006fca <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	2008      	movs	r0, #8
 8006fc4:	f7ff f99a 	bl	80062fc <memp_free>
 8006fc8:	e015      	b.n	8006ff6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d104      	bne.n	8006fda <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	2007      	movs	r0, #7
 8006fd4:	f7ff f992 	bl	80062fc <memp_free>
 8006fd8:	e00d      	b.n	8006ff6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <pbuf_free+0xc8>
          mem_free(p);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fe fe6b 	bl	8005cbc <mem_free>
 8006fe6:	e006      	b.n	8006ff6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <pbuf_free+0xf8>)
 8006fea:	f240 320f 	movw	r2, #783	; 0x30f
 8006fee:	490f      	ldr	r1, [pc, #60]	; (800702c <pbuf_free+0x10c>)
 8006ff0:	480b      	ldr	r0, [pc, #44]	; (8007020 <pbuf_free+0x100>)
 8006ff2:	f00b fa97 	bl	8012524 <iprintf>
        }
      }
      count++;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	e001      	b.n	8007006 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d19f      	bne.n	8006f4c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	08013c28 	.word	0x08013c28
 800701c:	08013d8c 	.word	0x08013d8c
 8007020:	08013c88 	.word	0x08013c88
 8007024:	08013db8 	.word	0x08013db8
 8007028:	08013dd0 	.word	0x08013dd0
 800702c:	08013df4 	.word	0x08013df4

08007030 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800703c:	e005      	b.n	800704a <pbuf_clen+0x1a>
    ++len;
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	3301      	adds	r3, #1
 8007042:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f6      	bne.n	800703e <pbuf_clen+0xe>
  }
  return len;
 8007050:	89fb      	ldrh	r3, [r7, #14]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d010      	beq.n	8007090 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	7b9b      	ldrb	r3, [r3, #14]
 8007072:	3301      	adds	r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7b9b      	ldrb	r3, [r3, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <pbuf_ref+0x30>
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <pbuf_ref+0x38>)
 8007084:	f240 3242 	movw	r2, #834	; 0x342
 8007088:	4904      	ldr	r1, [pc, #16]	; (800709c <pbuf_ref+0x3c>)
 800708a:	4805      	ldr	r0, [pc, #20]	; (80070a0 <pbuf_ref+0x40>)
 800708c:	f00b fa4a 	bl	8012524 <iprintf>
  }
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08013c28 	.word	0x08013c28
 800709c:	08013e08 	.word	0x08013e08
 80070a0:	08013c88 	.word	0x08013c88

080070a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <pbuf_cat+0x16>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <pbuf_cat+0x26>
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <pbuf_cat+0x98>)
 80070bc:	f240 3259 	movw	r2, #857	; 0x359
 80070c0:	491f      	ldr	r1, [pc, #124]	; (8007140 <pbuf_cat+0x9c>)
 80070c2:	4820      	ldr	r0, [pc, #128]	; (8007144 <pbuf_cat+0xa0>)
 80070c4:	f00b fa2e 	bl	8012524 <iprintf>
 80070c8:	e034      	b.n	8007134 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e00a      	b.n	80070e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	891a      	ldrh	r2, [r3, #8]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	891b      	ldrh	r3, [r3, #8]
 80070d8:	4413      	add	r3, r2
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	891a      	ldrh	r2, [r3, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	895b      	ldrh	r3, [r3, #10]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d006      	beq.n	8007108 <pbuf_cat+0x64>
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <pbuf_cat+0x98>)
 80070fc:	f240 3262 	movw	r2, #866	; 0x362
 8007100:	4911      	ldr	r1, [pc, #68]	; (8007148 <pbuf_cat+0xa4>)
 8007102:	4810      	ldr	r0, [pc, #64]	; (8007144 <pbuf_cat+0xa0>)
 8007104:	f00b fa0e 	bl	8012524 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <pbuf_cat+0x7a>
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <pbuf_cat+0x98>)
 8007112:	f240 3263 	movw	r2, #867	; 0x363
 8007116:	490d      	ldr	r1, [pc, #52]	; (800714c <pbuf_cat+0xa8>)
 8007118:	480a      	ldr	r0, [pc, #40]	; (8007144 <pbuf_cat+0xa0>)
 800711a:	f00b fa03 	bl	8012524 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	891a      	ldrh	r2, [r3, #8]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	891b      	ldrh	r3, [r3, #8]
 8007126:	4413      	add	r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	08013c28 	.word	0x08013c28
 8007140:	08013e1c 	.word	0x08013e1c
 8007144:	08013c88 	.word	0x08013c88
 8007148:	08013e54 	.word	0x08013e54
 800714c:	08013e84 	.word	0x08013e84

08007150 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ffa1 	bl	80070a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007162:	6838      	ldr	r0, [r7, #0]
 8007164:	f7ff ff7c 	bl	8007060 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <pbuf_copy+0x2a>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <pbuf_copy+0x2a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	891a      	ldrh	r2, [r3, #8]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	891b      	ldrh	r3, [r3, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	d209      	bcs.n	80071ae <pbuf_copy+0x3e>
 800719a:	4b57      	ldr	r3, [pc, #348]	; (80072f8 <pbuf_copy+0x188>)
 800719c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80071a0:	4956      	ldr	r1, [pc, #344]	; (80072fc <pbuf_copy+0x18c>)
 80071a2:	4857      	ldr	r0, [pc, #348]	; (8007300 <pbuf_copy+0x190>)
 80071a4:	f00b f9be 	bl	8012524 <iprintf>
 80071a8:	f06f 030f 	mvn.w	r3, #15
 80071ac:	e09f      	b.n	80072ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	895b      	ldrh	r3, [r3, #10]
 80071b2:	461a      	mov	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	895b      	ldrh	r3, [r3, #10]
 80071bc:	4619      	mov	r1, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1acb      	subs	r3, r1, r3
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d306      	bcc.n	80071d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	895b      	ldrh	r3, [r3, #10]
 80071ca:	461a      	mov	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e005      	b.n	80071e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	895b      	ldrh	r3, [r3, #10]
 80071d8:	461a      	mov	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	18d0      	adds	r0, r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4619      	mov	r1, r3
 80071f4:	f00b f980 	bl	80124f8 <memcpy>
    offset_to += len;
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	895b      	ldrh	r3, [r3, #10]
 800720c:	461a      	mov	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4293      	cmp	r3, r2
 8007212:	d906      	bls.n	8007222 <pbuf_copy+0xb2>
 8007214:	4b38      	ldr	r3, [pc, #224]	; (80072f8 <pbuf_copy+0x188>)
 8007216:	f240 32d9 	movw	r2, #985	; 0x3d9
 800721a:	493a      	ldr	r1, [pc, #232]	; (8007304 <pbuf_copy+0x194>)
 800721c:	4838      	ldr	r0, [pc, #224]	; (8007300 <pbuf_copy+0x190>)
 800721e:	f00b f981 	bl	8012524 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	895b      	ldrh	r3, [r3, #10]
 8007226:	461a      	mov	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4293      	cmp	r3, r2
 800722c:	d906      	bls.n	800723c <pbuf_copy+0xcc>
 800722e:	4b32      	ldr	r3, [pc, #200]	; (80072f8 <pbuf_copy+0x188>)
 8007230:	f240 32da 	movw	r2, #986	; 0x3da
 8007234:	4934      	ldr	r1, [pc, #208]	; (8007308 <pbuf_copy+0x198>)
 8007236:	4832      	ldr	r0, [pc, #200]	; (8007300 <pbuf_copy+0x190>)
 8007238:	f00b f974 	bl	8012524 <iprintf>
    if (offset_from >= p_from->len) {
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	895b      	ldrh	r3, [r3, #10]
 8007240:	461a      	mov	r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4293      	cmp	r3, r2
 8007246:	d304      	bcc.n	8007252 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	895b      	ldrh	r3, [r3, #10]
 8007256:	461a      	mov	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4293      	cmp	r3, r2
 800725c:	d114      	bne.n	8007288 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10c      	bne.n	8007288 <pbuf_copy+0x118>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <pbuf_copy+0x118>
 8007274:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <pbuf_copy+0x188>)
 8007276:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800727a:	4924      	ldr	r1, [pc, #144]	; (800730c <pbuf_copy+0x19c>)
 800727c:	4820      	ldr	r0, [pc, #128]	; (8007300 <pbuf_copy+0x190>)
 800727e:	f00b f951 	bl	8012524 <iprintf>
 8007282:	f06f 030f 	mvn.w	r3, #15
 8007286:	e032      	b.n	80072ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d013      	beq.n	80072b6 <pbuf_copy+0x146>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	895a      	ldrh	r2, [r3, #10]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	891b      	ldrh	r3, [r3, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d10d      	bne.n	80072b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <pbuf_copy+0x146>
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <pbuf_copy+0x188>)
 80072a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80072a8:	4919      	ldr	r1, [pc, #100]	; (8007310 <pbuf_copy+0x1a0>)
 80072aa:	4815      	ldr	r0, [pc, #84]	; (8007300 <pbuf_copy+0x190>)
 80072ac:	f00b f93a 	bl	8012524 <iprintf>
 80072b0:	f06f 0305 	mvn.w	r3, #5
 80072b4:	e01b      	b.n	80072ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d013      	beq.n	80072e4 <pbuf_copy+0x174>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	895a      	ldrh	r2, [r3, #10]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	891b      	ldrh	r3, [r3, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d10d      	bne.n	80072e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <pbuf_copy+0x174>
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <pbuf_copy+0x188>)
 80072d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80072d6:	490e      	ldr	r1, [pc, #56]	; (8007310 <pbuf_copy+0x1a0>)
 80072d8:	4809      	ldr	r0, [pc, #36]	; (8007300 <pbuf_copy+0x190>)
 80072da:	f00b f923 	bl	8012524 <iprintf>
 80072de:	f06f 0305 	mvn.w	r3, #5
 80072e2:	e004      	b.n	80072ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f47f af61 	bne.w	80071ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	08013c28 	.word	0x08013c28
 80072fc:	08013ed0 	.word	0x08013ed0
 8007300:	08013c88 	.word	0x08013c88
 8007304:	08013f00 	.word	0x08013f00
 8007308:	08013f18 	.word	0x08013f18
 800730c:	08013f34 	.word	0x08013f34
 8007310:	08013f44 	.word	0x08013f44

08007314 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	460b      	mov	r3, r1
 8007324:	80fb      	strh	r3, [r7, #6]
 8007326:	4613      	mov	r3, r2
 8007328:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <pbuf_copy_partial+0x36>
 8007338:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <pbuf_copy_partial+0xd4>)
 800733a:	f240 420a 	movw	r2, #1034	; 0x40a
 800733e:	492b      	ldr	r1, [pc, #172]	; (80073ec <pbuf_copy_partial+0xd8>)
 8007340:	482b      	ldr	r0, [pc, #172]	; (80073f0 <pbuf_copy_partial+0xdc>)
 8007342:	f00b f8ef 	bl	8012524 <iprintf>
 8007346:	2300      	movs	r3, #0
 8007348:	e04a      	b.n	80073e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d108      	bne.n	8007362 <pbuf_copy_partial+0x4e>
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <pbuf_copy_partial+0xd4>)
 8007352:	f240 420b 	movw	r2, #1035	; 0x40b
 8007356:	4927      	ldr	r1, [pc, #156]	; (80073f4 <pbuf_copy_partial+0xe0>)
 8007358:	4825      	ldr	r0, [pc, #148]	; (80073f0 <pbuf_copy_partial+0xdc>)
 800735a:	f00b f8e3 	bl	8012524 <iprintf>
 800735e:	2300      	movs	r3, #0
 8007360:	e03e      	b.n	80073e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	e034      	b.n	80073d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007368:	88bb      	ldrh	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <pbuf_copy_partial+0x70>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	895b      	ldrh	r3, [r3, #10]
 8007372:	88ba      	ldrh	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d305      	bcc.n	8007384 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	895b      	ldrh	r3, [r3, #10]
 800737c:	88ba      	ldrh	r2, [r7, #4]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	80bb      	strh	r3, [r7, #4]
 8007382:	e023      	b.n	80073cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	895a      	ldrh	r2, [r3, #10]
 8007388:	88bb      	ldrh	r3, [r7, #4]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800738e:	8b3a      	ldrh	r2, [r7, #24]
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	429a      	cmp	r2, r3
 8007394:	d901      	bls.n	800739a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800739a:	8b7b      	ldrh	r3, [r7, #26]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	18d0      	adds	r0, r2, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	88bb      	ldrh	r3, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	8b3a      	ldrh	r2, [r7, #24]
 80073aa:	4619      	mov	r1, r3
 80073ac:	f00b f8a4 	bl	80124f8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80073b0:	8afa      	ldrh	r2, [r7, #22]
 80073b2:	8b3b      	ldrh	r3, [r7, #24]
 80073b4:	4413      	add	r3, r2
 80073b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80073b8:	8b7a      	ldrh	r2, [r7, #26]
 80073ba:	8b3b      	ldrh	r3, [r7, #24]
 80073bc:	4413      	add	r3, r2
 80073be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80073c0:	88fa      	ldrh	r2, [r7, #6]
 80073c2:	8b3b      	ldrh	r3, [r7, #24]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <pbuf_copy_partial+0xca>
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1c4      	bne.n	8007368 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80073de:	8afb      	ldrh	r3, [r7, #22]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	08013c28 	.word	0x08013c28
 80073ec:	08013f70 	.word	0x08013f70
 80073f0:	08013c88 	.word	0x08013c88
 80073f4:	08013f90 	.word	0x08013f90

080073f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	603a      	str	r2, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
 8007404:	460b      	mov	r3, r1
 8007406:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	8919      	ldrh	r1, [r3, #8]
 800740c:	88ba      	ldrh	r2, [r7, #4]
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff faa1 	bl	8006958 <pbuf_alloc>
 8007416:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <pbuf_clone+0x2a>
    return NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	e011      	b.n	8007446 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fea3 	bl	8007170 <pbuf_copy>
 800742a:	4603      	mov	r3, r0
 800742c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800742e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d006      	beq.n	8007444 <pbuf_clone+0x4c>
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <pbuf_clone+0x58>)
 8007438:	f240 5224 	movw	r2, #1316	; 0x524
 800743c:	4905      	ldr	r1, [pc, #20]	; (8007454 <pbuf_clone+0x5c>)
 800743e:	4806      	ldr	r0, [pc, #24]	; (8007458 <pbuf_clone+0x60>)
 8007440:	f00b f870 	bl	8012524 <iprintf>
  return q;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	08013c28 	.word	0x08013c28
 8007454:	0801409c 	.word	0x0801409c
 8007458:	08013c88 	.word	0x08013c88

0800745c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007460:	f00b f8ee 	bl	8012640 <rand>
 8007464:	4603      	mov	r3, r0
 8007466:	b29b      	uxth	r3, r3
 8007468:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800746c:	b29b      	uxth	r3, r3
 800746e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007472:	b29a      	uxth	r2, r3
 8007474:	4b01      	ldr	r3, [pc, #4]	; (800747c <tcp_init+0x20>)
 8007476:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}
 800747c:	2000000a 	.word	0x2000000a

08007480 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7d1b      	ldrb	r3, [r3, #20]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d105      	bne.n	800749c <tcp_free+0x1c>
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <tcp_free+0x2c>)
 8007492:	22d4      	movs	r2, #212	; 0xd4
 8007494:	4906      	ldr	r1, [pc, #24]	; (80074b0 <tcp_free+0x30>)
 8007496:	4807      	ldr	r0, [pc, #28]	; (80074b4 <tcp_free+0x34>)
 8007498:	f00b f844 	bl	8012524 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	2001      	movs	r0, #1
 80074a0:	f7fe ff2c 	bl	80062fc <memp_free>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08014128 	.word	0x08014128
 80074b0:	08014158 	.word	0x08014158
 80074b4:	0801416c 	.word	0x0801416c

080074b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7d1b      	ldrb	r3, [r3, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d105      	bne.n	80074d4 <tcp_free_listen+0x1c>
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <tcp_free_listen+0x2c>)
 80074ca:	22df      	movs	r2, #223	; 0xdf
 80074cc:	4906      	ldr	r1, [pc, #24]	; (80074e8 <tcp_free_listen+0x30>)
 80074ce:	4807      	ldr	r0, [pc, #28]	; (80074ec <tcp_free_listen+0x34>)
 80074d0:	f00b f828 	bl	8012524 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	2002      	movs	r0, #2
 80074d8:	f7fe ff10 	bl	80062fc <memp_free>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	08014128 	.word	0x08014128
 80074e8:	08014194 	.word	0x08014194
 80074ec:	0801416c 	.word	0x0801416c

080074f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80074f4:	f001 f85c 	bl	80085b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <tcp_tmr+0x28>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <tcp_tmr+0x28>)
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <tcp_tmr+0x28>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007510:	f000 fd0e 	bl	8007f30 <tcp_slowtmr>
  }
}
 8007514:	bf00      	nop
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200000cd 	.word	0x200000cd

0800751c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d105      	bne.n	8007538 <tcp_remove_listener+0x1c>
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <tcp_remove_listener+0x48>)
 800752e:	22ff      	movs	r2, #255	; 0xff
 8007530:	490d      	ldr	r1, [pc, #52]	; (8007568 <tcp_remove_listener+0x4c>)
 8007532:	480e      	ldr	r0, [pc, #56]	; (800756c <tcp_remove_listener+0x50>)
 8007534:	f00a fff6 	bl	8012524 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e00a      	b.n	8007554 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d102      	bne.n	800754e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f1      	bne.n	800753e <tcp_remove_listener+0x22>
    }
  }
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	08014128 	.word	0x08014128
 8007568:	080141b0 	.word	0x080141b0
 800756c:	0801416c 	.word	0x0801416c

08007570 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <tcp_listen_closed+0x1c>
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <tcp_listen_closed+0x60>)
 8007580:	f240 1211 	movw	r2, #273	; 0x111
 8007584:	4913      	ldr	r1, [pc, #76]	; (80075d4 <tcp_listen_closed+0x64>)
 8007586:	4814      	ldr	r0, [pc, #80]	; (80075d8 <tcp_listen_closed+0x68>)
 8007588:	f00a ffcc 	bl	8012524 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	7d1b      	ldrb	r3, [r3, #20]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d006      	beq.n	80075a2 <tcp_listen_closed+0x32>
 8007594:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <tcp_listen_closed+0x60>)
 8007596:	f44f 7289 	mov.w	r2, #274	; 0x112
 800759a:	4910      	ldr	r1, [pc, #64]	; (80075dc <tcp_listen_closed+0x6c>)
 800759c:	480e      	ldr	r0, [pc, #56]	; (80075d8 <tcp_listen_closed+0x68>)
 800759e:	f00a ffc1 	bl	8012524 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075a2:	2301      	movs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e00b      	b.n	80075c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80075a8:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <tcp_listen_closed+0x70>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff ffb1 	bl	800751c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d9f0      	bls.n	80075a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	08014128 	.word	0x08014128
 80075d4:	080141d8 	.word	0x080141d8
 80075d8:	0801416c 	.word	0x0801416c
 80075dc:	080141e4 	.word	0x080141e4
 80075e0:	08016184 	.word	0x08016184

080075e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80075e4:	b5b0      	push	{r4, r5, r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af04      	add	r7, sp, #16
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <tcp_close_shutdown+0x20>
 80075f6:	4b63      	ldr	r3, [pc, #396]	; (8007784 <tcp_close_shutdown+0x1a0>)
 80075f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80075fc:	4962      	ldr	r1, [pc, #392]	; (8007788 <tcp_close_shutdown+0x1a4>)
 80075fe:	4863      	ldr	r0, [pc, #396]	; (800778c <tcp_close_shutdown+0x1a8>)
 8007600:	f00a ff90 	bl	8012524 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d066      	beq.n	80076d8 <tcp_close_shutdown+0xf4>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7d1b      	ldrb	r3, [r3, #20]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d003      	beq.n	800761a <tcp_close_shutdown+0x36>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7d1b      	ldrb	r3, [r3, #20]
 8007616:	2b07      	cmp	r3, #7
 8007618:	d15e      	bne.n	80076d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <tcp_close_shutdown+0x48>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007626:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800762a:	d055      	beq.n	80076d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8b5b      	ldrh	r3, [r3, #26]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <tcp_close_shutdown+0x62>
 8007638:	4b52      	ldr	r3, [pc, #328]	; (8007784 <tcp_close_shutdown+0x1a0>)
 800763a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800763e:	4954      	ldr	r1, [pc, #336]	; (8007790 <tcp_close_shutdown+0x1ac>)
 8007640:	4852      	ldr	r0, [pc, #328]	; (800778c <tcp_close_shutdown+0x1a8>)
 8007642:	f00a ff6f 	bl	8012524 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800764e:	687d      	ldr	r5, [r7, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	8ad2      	ldrh	r2, [r2, #22]
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	8b09      	ldrh	r1, [r1, #24]
 800765c:	9102      	str	r1, [sp, #8]
 800765e:	9201      	str	r2, [sp, #4]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462b      	mov	r3, r5
 8007664:	4622      	mov	r2, r4
 8007666:	4601      	mov	r1, r0
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f005 fd85 	bl	800d178 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fb66 	bl	8008d40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007674:	4b47      	ldr	r3, [pc, #284]	; (8007794 <tcp_close_shutdown+0x1b0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d105      	bne.n	800768a <tcp_close_shutdown+0xa6>
 800767e:	4b45      	ldr	r3, [pc, #276]	; (8007794 <tcp_close_shutdown+0x1b0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	4a43      	ldr	r2, [pc, #268]	; (8007794 <tcp_close_shutdown+0x1b0>)
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e013      	b.n	80076b2 <tcp_close_shutdown+0xce>
 800768a:	4b42      	ldr	r3, [pc, #264]	; (8007794 <tcp_close_shutdown+0x1b0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e00c      	b.n	80076ac <tcp_close_shutdown+0xc8>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d104      	bne.n	80076a6 <tcp_close_shutdown+0xc2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	60da      	str	r2, [r3, #12]
 80076a4:	e005      	b.n	80076b2 <tcp_close_shutdown+0xce>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1ef      	bne.n	8007692 <tcp_close_shutdown+0xae>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	60da      	str	r2, [r3, #12]
 80076b8:	4b37      	ldr	r3, [pc, #220]	; (8007798 <tcp_close_shutdown+0x1b4>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80076be:	4b37      	ldr	r3, [pc, #220]	; (800779c <tcp_close_shutdown+0x1b8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d102      	bne.n	80076ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80076c8:	f003 fffa 	bl	800b6c0 <tcp_trigger_input_pcb_close>
 80076cc:	e002      	b.n	80076d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fed6 	bl	8007480 <tcp_free>
      }
      return ERR_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e050      	b.n	800777a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d03b      	beq.n	8007758 <tcp_close_shutdown+0x174>
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	dc44      	bgt.n	800776e <tcp_close_shutdown+0x18a>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <tcp_close_shutdown+0x10a>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d02a      	beq.n	8007742 <tcp_close_shutdown+0x15e>
 80076ec:	e03f      	b.n	800776e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8adb      	ldrh	r3, [r3, #22]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d021      	beq.n	800773a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <tcp_close_shutdown+0x1bc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d105      	bne.n	800770c <tcp_close_shutdown+0x128>
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <tcp_close_shutdown+0x1bc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <tcp_close_shutdown+0x1bc>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e013      	b.n	8007734 <tcp_close_shutdown+0x150>
 800770c:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <tcp_close_shutdown+0x1bc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60bb      	str	r3, [r7, #8]
 8007712:	e00c      	b.n	800772e <tcp_close_shutdown+0x14a>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d104      	bne.n	8007728 <tcp_close_shutdown+0x144>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	e005      	b.n	8007734 <tcp_close_shutdown+0x150>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1ef      	bne.n	8007714 <tcp_close_shutdown+0x130>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fea0 	bl	8007480 <tcp_free>
      break;
 8007740:	e01a      	b.n	8007778 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff ff14 	bl	8007570 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4816      	ldr	r0, [pc, #88]	; (80077a4 <tcp_close_shutdown+0x1c0>)
 800774c:	f001 fb48 	bl	8008de0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff feb1 	bl	80074b8 <tcp_free_listen>
      break;
 8007756:	e00f      	b.n	8007778 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	480e      	ldr	r0, [pc, #56]	; (8007794 <tcp_close_shutdown+0x1b0>)
 800775c:	f001 fb40 	bl	8008de0 <tcp_pcb_remove>
 8007760:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <tcp_close_shutdown+0x1b4>)
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fe8a 	bl	8007480 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800776c:	e004      	b.n	8007778 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f81a 	bl	80077a8 <tcp_close_shutdown_fin>
 8007774:	4603      	mov	r3, r0
 8007776:	e000      	b.n	800777a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bdb0      	pop	{r4, r5, r7, pc}
 8007782:	bf00      	nop
 8007784:	08014128 	.word	0x08014128
 8007788:	080141fc 	.word	0x080141fc
 800778c:	0801416c 	.word	0x0801416c
 8007790:	0801421c 	.word	0x0801421c
 8007794:	2000696c 	.word	0x2000696c
 8007798:	20006968 	.word	0x20006968
 800779c:	20006980 	.word	0x20006980
 80077a0:	20006978 	.word	0x20006978
 80077a4:	20006974 	.word	0x20006974

080077a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <tcp_close_shutdown_fin+0x1c>
 80077b6:	4b2e      	ldr	r3, [pc, #184]	; (8007870 <tcp_close_shutdown_fin+0xc8>)
 80077b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80077bc:	492d      	ldr	r1, [pc, #180]	; (8007874 <tcp_close_shutdown_fin+0xcc>)
 80077be:	482e      	ldr	r0, [pc, #184]	; (8007878 <tcp_close_shutdown_fin+0xd0>)
 80077c0:	f00a feb0 	bl	8012524 <iprintf>

  switch (pcb->state) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7d1b      	ldrb	r3, [r3, #20]
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	d020      	beq.n	800780e <tcp_close_shutdown_fin+0x66>
 80077cc:	2b07      	cmp	r3, #7
 80077ce:	dc2b      	bgt.n	8007828 <tcp_close_shutdown_fin+0x80>
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d002      	beq.n	80077da <tcp_close_shutdown_fin+0x32>
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d00d      	beq.n	80077f4 <tcp_close_shutdown_fin+0x4c>
 80077d8:	e026      	b.n	8007828 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f004 fdda 	bl	800c394 <tcp_send_fin>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80077e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d11f      	bne.n	800782c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2205      	movs	r2, #5
 80077f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80077f2:	e01b      	b.n	800782c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f004 fdcd 	bl	800c394 <tcp_send_fin>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80077fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d114      	bne.n	8007830 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2205      	movs	r2, #5
 800780a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800780c:	e010      	b.n	8007830 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f004 fdc0 	bl	800c394 <tcp_send_fin>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2209      	movs	r2, #9
 8007824:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007826:	e005      	b.n	8007834 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e01c      	b.n	8007866 <tcp_close_shutdown_fin+0xbe>
      break;
 800782c:	bf00      	nop
 800782e:	e002      	b.n	8007836 <tcp_close_shutdown_fin+0x8e>
      break;
 8007830:	bf00      	nop
 8007832:	e000      	b.n	8007836 <tcp_close_shutdown_fin+0x8e>
      break;
 8007834:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f004 fee6 	bl	800c610 <tcp_output>
 8007844:	e00d      	b.n	8007862 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d108      	bne.n	8007862 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8b5b      	ldrh	r3, [r3, #26]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	b29a      	uxth	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	e001      	b.n	8007866 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	08014128 	.word	0x08014128
 8007874:	080141d8 	.word	0x080141d8
 8007878:	0801416c 	.word	0x0801416c

0800787c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <tcp_close+0x22>
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <tcp_close+0x4c>)
 800788c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007890:	490e      	ldr	r1, [pc, #56]	; (80078cc <tcp_close+0x50>)
 8007892:	480f      	ldr	r0, [pc, #60]	; (80078d0 <tcp_close+0x54>)
 8007894:	f00a fe46 	bl	8012524 <iprintf>
 8007898:	f06f 030f 	mvn.w	r3, #15
 800789c:	e00f      	b.n	80078be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7d1b      	ldrb	r3, [r3, #20]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d006      	beq.n	80078b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8b5b      	ldrh	r3, [r3, #26]
 80078aa:	f043 0310 	orr.w	r3, r3, #16
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80078b4:	2101      	movs	r1, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fe94 	bl	80075e4 <tcp_close_shutdown>
 80078bc:	4603      	mov	r3, r0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08014128 	.word	0x08014128
 80078cc:	08014238 	.word	0x08014238
 80078d0:	0801416c 	.word	0x0801416c

080078d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08e      	sub	sp, #56	; 0x38
 80078d8:	af04      	add	r7, sp, #16
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <tcp_abandon+0x20>
 80078e4:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <tcp_abandon+0x15c>)
 80078e6:	f240 223d 	movw	r2, #573	; 0x23d
 80078ea:	4952      	ldr	r1, [pc, #328]	; (8007a34 <tcp_abandon+0x160>)
 80078ec:	4852      	ldr	r0, [pc, #328]	; (8007a38 <tcp_abandon+0x164>)
 80078ee:	f00a fe19 	bl	8012524 <iprintf>
 80078f2:	e099      	b.n	8007a28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7d1b      	ldrb	r3, [r3, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <tcp_abandon+0x36>
 80078fc:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <tcp_abandon+0x15c>)
 80078fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007902:	494e      	ldr	r1, [pc, #312]	; (8007a3c <tcp_abandon+0x168>)
 8007904:	484c      	ldr	r0, [pc, #304]	; (8007a38 <tcp_abandon+0x164>)
 8007906:	f00a fe0d 	bl	8012524 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	2b0a      	cmp	r3, #10
 8007910:	d107      	bne.n	8007922 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	484a      	ldr	r0, [pc, #296]	; (8007a40 <tcp_abandon+0x16c>)
 8007916:	f001 fa63 	bl	8008de0 <tcp_pcb_remove>
    tcp_free(pcb);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fdb0 	bl	8007480 <tcp_free>
 8007920:	e082      	b.n	8007a28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7d1b      	ldrb	r3, [r3, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d126      	bne.n	800799a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8adb      	ldrh	r3, [r3, #22]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d02e      	beq.n	80079b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007954:	4b3b      	ldr	r3, [pc, #236]	; (8007a44 <tcp_abandon+0x170>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	429a      	cmp	r2, r3
 800795c:	d105      	bne.n	800796a <tcp_abandon+0x96>
 800795e:	4b39      	ldr	r3, [pc, #228]	; (8007a44 <tcp_abandon+0x170>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4a37      	ldr	r2, [pc, #220]	; (8007a44 <tcp_abandon+0x170>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e013      	b.n	8007992 <tcp_abandon+0xbe>
 800796a:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <tcp_abandon+0x170>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e00c      	b.n	800798c <tcp_abandon+0xb8>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	d104      	bne.n	8007986 <tcp_abandon+0xb2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	e005      	b.n	8007992 <tcp_abandon+0xbe>
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1ef      	bne.n	8007972 <tcp_abandon+0x9e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	60da      	str	r2, [r3, #12]
 8007998:	e00b      	b.n	80079b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8adb      	ldrh	r3, [r3, #22]
 80079a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4828      	ldr	r0, [pc, #160]	; (8007a48 <tcp_abandon+0x174>)
 80079a8:	f001 fa1a 	bl	8008de0 <tcp_pcb_remove>
 80079ac:	4b27      	ldr	r3, [pc, #156]	; (8007a4c <tcp_abandon+0x178>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fed6 	bl	8008770 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fecd 	bl	8008770 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fec4 	bl	8008770 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3304      	adds	r3, #4
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	8b12      	ldrh	r2, [r2, #24]
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	460b      	mov	r3, r1
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f005 fbb6 	bl	800d178 <tcp_rst>
    }
    last_state = pcb->state;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7d1b      	ldrb	r3, [r3, #20]
 8007a10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fd34 	bl	8007480 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <tcp_abandon+0x154>
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f06f 010c 	mvn.w	r1, #12
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	4798      	blx	r3
  }
}
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	08014128 	.word	0x08014128
 8007a34:	0801426c 	.word	0x0801426c
 8007a38:	0801416c 	.word	0x0801416c
 8007a3c:	08014288 	.word	0x08014288
 8007a40:	2000697c 	.word	0x2000697c
 8007a44:	20006978 	.word	0x20006978
 8007a48:	2000696c 	.word	0x2000696c
 8007a4c:	20006968 	.word	0x20006968

08007a50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007a58:	2101      	movs	r1, #1
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ff3a 	bl	80078d4 <tcp_abandon>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007a76:	2304      	movs	r3, #4
 8007a78:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <tcp_bind+0x114>)
 8007a82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <tcp_bind+0x36>
 8007a8a:	4b3d      	ldr	r3, [pc, #244]	; (8007b80 <tcp_bind+0x118>)
 8007a8c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007a90:	493c      	ldr	r1, [pc, #240]	; (8007b84 <tcp_bind+0x11c>)
 8007a92:	483d      	ldr	r0, [pc, #244]	; (8007b88 <tcp_bind+0x120>)
 8007a94:	f00a fd46 	bl	8012524 <iprintf>
 8007a98:	f06f 030f 	mvn.w	r3, #15
 8007a9c:	e06a      	b.n	8007b74 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7d1b      	ldrb	r3, [r3, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <tcp_bind+0x52>
 8007aa6:	4b36      	ldr	r3, [pc, #216]	; (8007b80 <tcp_bind+0x118>)
 8007aa8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007aac:	4937      	ldr	r1, [pc, #220]	; (8007b8c <tcp_bind+0x124>)
 8007aae:	4836      	ldr	r0, [pc, #216]	; (8007b88 <tcp_bind+0x120>)
 8007ab0:	f00a fd38 	bl	8012524 <iprintf>
 8007ab4:	f06f 0305 	mvn.w	r3, #5
 8007ab8:	e05c      	b.n	8007b74 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007ac0:	f000 f9f0 	bl	8007ea4 <tcp_new_port>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d135      	bne.n	8007b3a <tcp_bind+0xd2>
      return ERR_BUF;
 8007ace:	f06f 0301 	mvn.w	r3, #1
 8007ad2:	e04f      	b.n	8007b74 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61fb      	str	r3, [r7, #28]
 8007ad8:	e02b      	b.n	8007b32 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007ada:	4a2d      	ldr	r2, [pc, #180]	; (8007b90 <tcp_bind+0x128>)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	e01e      	b.n	8007b26 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	8adb      	ldrh	r3, [r3, #22]
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d116      	bne.n	8007b20 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007af2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00c      	beq.n	8007b1a <tcp_bind+0xb2>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d102      	bne.n	8007b20 <tcp_bind+0xb8>
              return ERR_USE;
 8007b1a:	f06f 0307 	mvn.w	r3, #7
 8007b1e:	e029      	b.n	8007b74 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1dd      	bne.n	8007ae8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	dbcf      	blt.n	8007ada <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <tcp_bind+0xf2>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <tcp_bind+0xec>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	e000      	b.n	8007b56 <tcp_bind+0xee>
 8007b54:	2300      	movs	r3, #0
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	88fa      	ldrh	r2, [r7, #6]
 8007b5e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007b60:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <tcp_bind+0x12c>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <tcp_bind+0x12c>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	f005 fcc5 	bl	800d4fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	080161ac 	.word	0x080161ac
 8007b80:	08014128 	.word	0x08014128
 8007b84:	080142bc 	.word	0x080142bc
 8007b88:	0801416c 	.word	0x0801416c
 8007b8c:	080142d4 	.word	0x080142d4
 8007b90:	08016184 	.word	0x08016184
 8007b94:	20006978 	.word	0x20006978

08007b98 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <tcp_accept_null+0x22>
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <tcp_accept_null+0x34>)
 8007bae:	f240 320f 	movw	r2, #783	; 0x30f
 8007bb2:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <tcp_accept_null+0x38>)
 8007bb4:	4807      	ldr	r0, [pc, #28]	; (8007bd4 <tcp_accept_null+0x3c>)
 8007bb6:	f00a fcb5 	bl	8012524 <iprintf>

  tcp_abort(pcb);
 8007bba:	68b8      	ldr	r0, [r7, #8]
 8007bbc:	f7ff ff48 	bl	8007a50 <tcp_abort>

  return ERR_ABRT;
 8007bc0:	f06f 030c 	mvn.w	r3, #12
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	08014128 	.word	0x08014128
 8007bd0:	080142fc 	.word	0x080142fc
 8007bd4:	0801416c 	.word	0x0801416c

08007bd8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	2200      	movs	r2, #0
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f806 	bl	8007bfc <tcp_listen_with_backlog_and_err>
 8007bf0:	4603      	mov	r3, r0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <tcp_listen_with_backlog_and_err+0x2c>
 8007c14:	4b47      	ldr	r3, [pc, #284]	; (8007d34 <tcp_listen_with_backlog_and_err+0x138>)
 8007c16:	f240 3259 	movw	r2, #857	; 0x359
 8007c1a:	4947      	ldr	r1, [pc, #284]	; (8007d38 <tcp_listen_with_backlog_and_err+0x13c>)
 8007c1c:	4847      	ldr	r0, [pc, #284]	; (8007d3c <tcp_listen_with_backlog_and_err+0x140>)
 8007c1e:	f00a fc81 	bl	8012524 <iprintf>
 8007c22:	23f0      	movs	r3, #240	; 0xf0
 8007c24:	76fb      	strb	r3, [r7, #27]
 8007c26:	e079      	b.n	8007d1c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	7d1b      	ldrb	r3, [r3, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <tcp_listen_with_backlog_and_err+0x48>
 8007c30:	4b40      	ldr	r3, [pc, #256]	; (8007d34 <tcp_listen_with_backlog_and_err+0x138>)
 8007c32:	f240 325a 	movw	r2, #858	; 0x35a
 8007c36:	4942      	ldr	r1, [pc, #264]	; (8007d40 <tcp_listen_with_backlog_and_err+0x144>)
 8007c38:	4840      	ldr	r0, [pc, #256]	; (8007d3c <tcp_listen_with_backlog_and_err+0x140>)
 8007c3a:	f00a fc73 	bl	8012524 <iprintf>
 8007c3e:	23f1      	movs	r3, #241	; 0xf1
 8007c40:	76fb      	strb	r3, [r7, #27]
 8007c42:	e06b      	b.n	8007d1c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7d1b      	ldrb	r3, [r3, #20]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d104      	bne.n	8007c56 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007c50:	23f7      	movs	r3, #247	; 0xf7
 8007c52:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007c54:	e062      	b.n	8007d1c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007c56:	2002      	movs	r0, #2
 8007c58:	f7fe fb04 	bl	8006264 <memp_malloc>
 8007c5c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007c64:	23ff      	movs	r3, #255	; 0xff
 8007c66:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007c68:	e058      	b.n	8007d1c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8ada      	ldrh	r2, [r3, #22]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7d5a      	ldrb	r2, [r3, #21]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	7a5a      	ldrb	r2, [r3, #9]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2200      	movs	r2, #0
 8007c94:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	7ada      	ldrb	r2, [r3, #11]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	7a9a      	ldrb	r2, [r3, #10]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8adb      	ldrh	r3, [r3, #22]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d021      	beq.n	8007cfa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007cb6:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <tcp_listen_with_backlog_and_err+0x148>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d105      	bne.n	8007ccc <tcp_listen_with_backlog_and_err+0xd0>
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <tcp_listen_with_backlog_and_err+0x148>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <tcp_listen_with_backlog_and_err+0x148>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e013      	b.n	8007cf4 <tcp_listen_with_backlog_and_err+0xf8>
 8007ccc:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <tcp_listen_with_backlog_and_err+0x148>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	e00c      	b.n	8007cee <tcp_listen_with_backlog_and_err+0xf2>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d104      	bne.n	8007ce8 <tcp_listen_with_backlog_and_err+0xec>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	e005      	b.n	8007cf4 <tcp_listen_with_backlog_and_err+0xf8>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1ef      	bne.n	8007cd4 <tcp_listen_with_backlog_and_err+0xd8>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff fbc0 	bl	8007480 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4a11      	ldr	r2, [pc, #68]	; (8007d48 <tcp_listen_with_backlog_and_err+0x14c>)
 8007d04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <tcp_listen_with_backlog_and_err+0x150>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	4a0f      	ldr	r2, [pc, #60]	; (8007d4c <tcp_listen_with_backlog_and_err+0x150>)
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	f005 fbf2 	bl	800d4fc <tcp_timer_needed>
  res = ERR_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7efa      	ldrb	r2, [r7, #27]
 8007d26:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007d28:	69fb      	ldr	r3, [r7, #28]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	08014128 	.word	0x08014128
 8007d38:	0801431c 	.word	0x0801431c
 8007d3c:	0801416c 	.word	0x0801416c
 8007d40:	0801434c 	.word	0x0801434c
 8007d44:	20006978 	.word	0x20006978
 8007d48:	08007b99 	.word	0x08007b99
 8007d4c:	20006974 	.word	0x20006974

08007d50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <tcp_update_rcv_ann_wnd+0x1c>
 8007d5e:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007d60:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007d64:	4924      	ldr	r1, [pc, #144]	; (8007df8 <tcp_update_rcv_ann_wnd+0xa8>)
 8007d66:	4825      	ldr	r0, [pc, #148]	; (8007dfc <tcp_update_rcv_ann_wnd+0xac>)
 8007d68:	f00a fbdc 	bl	8012524 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d74:	4413      	add	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007d80:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007d84:	bf28      	it	cs
 8007d86:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	db08      	blt.n	8007da8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	e020      	b.n	8007dea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dd03      	ble.n	8007dbe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dbc:	e014      	b.n	8007de8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd0:	d306      	bcc.n	8007de0 <tcp_update_rcv_ann_wnd+0x90>
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007dd4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007dd8:	4909      	ldr	r1, [pc, #36]	; (8007e00 <tcp_update_rcv_ann_wnd+0xb0>)
 8007dda:	4808      	ldr	r0, [pc, #32]	; (8007dfc <tcp_update_rcv_ann_wnd+0xac>)
 8007ddc:	f00a fba2 	bl	8012524 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007de8:	2300      	movs	r3, #0
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	08014128 	.word	0x08014128
 8007df8:	08014384 	.word	0x08014384
 8007dfc:	0801416c 	.word	0x0801416c
 8007e00:	080143a8 	.word	0x080143a8

08007e04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <tcp_recved+0x22>
 8007e16:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <tcp_recved+0x90>)
 8007e18:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007e1c:	491e      	ldr	r1, [pc, #120]	; (8007e98 <tcp_recved+0x94>)
 8007e1e:	481f      	ldr	r0, [pc, #124]	; (8007e9c <tcp_recved+0x98>)
 8007e20:	f00a fb80 	bl	8012524 <iprintf>
 8007e24:	e032      	b.n	8007e8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7d1b      	ldrb	r3, [r3, #20]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d106      	bne.n	8007e3c <tcp_recved+0x38>
 8007e2e:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <tcp_recved+0x90>)
 8007e30:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007e34:	491a      	ldr	r1, [pc, #104]	; (8007ea0 <tcp_recved+0x9c>)
 8007e36:	4819      	ldr	r0, [pc, #100]	; (8007e9c <tcp_recved+0x98>)
 8007e38:	f00a fb74 	bl	8012524 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e40:	887b      	ldrh	r3, [r7, #2]
 8007e42:	4413      	add	r3, r2
 8007e44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007e46:	89fb      	ldrh	r3, [r7, #14]
 8007e48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007e4c:	d804      	bhi.n	8007e58 <tcp_recved+0x54>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e52:	89fa      	ldrh	r2, [r7, #14]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d204      	bcs.n	8007e62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007e5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007e60:	e002      	b.n	8007e68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	89fa      	ldrh	r2, [r7, #14]
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ff71 	bl	8007d50 <tcp_update_rcv_ann_wnd>
 8007e6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007e76:	d309      	bcc.n	8007e8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8b5b      	ldrh	r3, [r3, #26]
 8007e7c:	f043 0302 	orr.w	r3, r3, #2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f004 fbc2 	bl	800c610 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	08014128 	.word	0x08014128
 8007e98:	080143c4 	.word	0x080143c4
 8007e9c:	0801416c 	.word	0x0801416c
 8007ea0:	080143dc 	.word	0x080143dc

08007ea4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007eae:	4b1e      	ldr	r3, [pc, #120]	; (8007f28 <tcp_new_port+0x84>)
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	4b1c      	ldr	r3, [pc, #112]	; (8007f28 <tcp_new_port+0x84>)
 8007eb8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007eba:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <tcp_new_port+0x84>)
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d103      	bne.n	8007ece <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <tcp_new_port+0x84>)
 8007ec8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007ecc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007ece:	2300      	movs	r3, #0
 8007ed0:	71fb      	strb	r3, [r7, #7]
 8007ed2:	e01e      	b.n	8007f12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <tcp_new_port+0x88>)
 8007ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	e011      	b.n	8007f06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	8ada      	ldrh	r2, [r3, #22]
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <tcp_new_port+0x84>)
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d108      	bne.n	8007f00 <tcp_new_port+0x5c>
        n++;
 8007eee:	88bb      	ldrh	r3, [r7, #4]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007ef4:	88bb      	ldrh	r3, [r7, #4]
 8007ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007efa:	d3d8      	bcc.n	8007eae <tcp_new_port+0xa>
          return 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e00d      	b.n	8007f1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1ea      	bne.n	8007ee2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	71fb      	strb	r3, [r7, #7]
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d9dd      	bls.n	8007ed4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007f18:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <tcp_new_port+0x84>)
 8007f1a:	881b      	ldrh	r3, [r3, #0]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	2000000a 	.word	0x2000000a
 8007f2c:	08016184 	.word	0x08016184

08007f30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007f30:	b5b0      	push	{r4, r5, r7, lr}
 8007f32:	b090      	sub	sp, #64	; 0x40
 8007f34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007f3c:	4b94      	ldr	r3, [pc, #592]	; (8008190 <tcp_slowtmr+0x260>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	4a93      	ldr	r2, [pc, #588]	; (8008190 <tcp_slowtmr+0x260>)
 8007f44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007f46:	4b93      	ldr	r3, [pc, #588]	; (8008194 <tcp_slowtmr+0x264>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	4b91      	ldr	r3, [pc, #580]	; (8008194 <tcp_slowtmr+0x264>)
 8007f50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007f56:	4b90      	ldr	r3, [pc, #576]	; (8008198 <tcp_slowtmr+0x268>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007f5c:	e29d      	b.n	800849a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	7d1b      	ldrb	r3, [r3, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <tcp_slowtmr+0x44>
 8007f66:	4b8d      	ldr	r3, [pc, #564]	; (800819c <tcp_slowtmr+0x26c>)
 8007f68:	f240 42be 	movw	r2, #1214	; 0x4be
 8007f6c:	498c      	ldr	r1, [pc, #560]	; (80081a0 <tcp_slowtmr+0x270>)
 8007f6e:	488d      	ldr	r0, [pc, #564]	; (80081a4 <tcp_slowtmr+0x274>)
 8007f70:	f00a fad8 	bl	8012524 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	7d1b      	ldrb	r3, [r3, #20]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d106      	bne.n	8007f8a <tcp_slowtmr+0x5a>
 8007f7c:	4b87      	ldr	r3, [pc, #540]	; (800819c <tcp_slowtmr+0x26c>)
 8007f7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007f82:	4989      	ldr	r1, [pc, #548]	; (80081a8 <tcp_slowtmr+0x278>)
 8007f84:	4887      	ldr	r0, [pc, #540]	; (80081a4 <tcp_slowtmr+0x274>)
 8007f86:	f00a facd 	bl	8012524 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	7d1b      	ldrb	r3, [r3, #20]
 8007f8e:	2b0a      	cmp	r3, #10
 8007f90:	d106      	bne.n	8007fa0 <tcp_slowtmr+0x70>
 8007f92:	4b82      	ldr	r3, [pc, #520]	; (800819c <tcp_slowtmr+0x26c>)
 8007f94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007f98:	4984      	ldr	r1, [pc, #528]	; (80081ac <tcp_slowtmr+0x27c>)
 8007f9a:	4882      	ldr	r0, [pc, #520]	; (80081a4 <tcp_slowtmr+0x274>)
 8007f9c:	f00a fac2 	bl	8012524 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	7f9a      	ldrb	r2, [r3, #30]
 8007fa4:	4b7b      	ldr	r3, [pc, #492]	; (8008194 <tcp_slowtmr+0x264>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d105      	bne.n	8007fb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007fb6:	e270      	b.n	800849a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007fb8:	4b76      	ldr	r3, [pc, #472]	; (8008194 <tcp_slowtmr+0x264>)
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	7d1b      	ldrb	r3, [r3, #20]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d10a      	bne.n	8007fea <tcp_slowtmr+0xba>
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d905      	bls.n	8007fea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fe8:	e11e      	b.n	8008228 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ff0:	2b0b      	cmp	r3, #11
 8007ff2:	d905      	bls.n	8008000 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ffe:	e113      	b.n	8008228 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008006:	2b00      	cmp	r3, #0
 8008008:	d075      	beq.n	80080f6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <tcp_slowtmr+0xf0>
 8008012:	4b62      	ldr	r3, [pc, #392]	; (800819c <tcp_slowtmr+0x26c>)
 8008014:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008018:	4965      	ldr	r1, [pc, #404]	; (80081b0 <tcp_slowtmr+0x280>)
 800801a:	4862      	ldr	r0, [pc, #392]	; (80081a4 <tcp_slowtmr+0x274>)
 800801c:	f00a fa82 	bl	8012524 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <tcp_slowtmr+0x106>
 8008028:	4b5c      	ldr	r3, [pc, #368]	; (800819c <tcp_slowtmr+0x26c>)
 800802a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800802e:	4961      	ldr	r1, [pc, #388]	; (80081b4 <tcp_slowtmr+0x284>)
 8008030:	485c      	ldr	r0, [pc, #368]	; (80081a4 <tcp_slowtmr+0x274>)
 8008032:	f00a fa77 	bl	8012524 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800803c:	2b0b      	cmp	r3, #11
 800803e:	d905      	bls.n	800804c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008044:	3301      	adds	r3, #1
 8008046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800804a:	e0ed      	b.n	8008228 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008052:	3b01      	subs	r3, #1
 8008054:	4a58      	ldr	r2, [pc, #352]	; (80081b8 <tcp_slowtmr+0x288>)
 8008056:	5cd3      	ldrb	r3, [r2, r3]
 8008058:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008060:	7c7a      	ldrb	r2, [r7, #17]
 8008062:	429a      	cmp	r2, r3
 8008064:	d907      	bls.n	8008076 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800806c:	3301      	adds	r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800807c:	7c7a      	ldrb	r2, [r7, #17]
 800807e:	429a      	cmp	r2, r3
 8008080:	f200 80d2 	bhi.w	8008228 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008084:	2301      	movs	r3, #1
 8008086:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800808e:	2b00      	cmp	r3, #0
 8008090:	d108      	bne.n	80080a4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008094:	f005 f964 	bl	800d360 <tcp_zero_window_probe>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d014      	beq.n	80080c8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	e011      	b.n	80080c8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080aa:	4619      	mov	r1, r3
 80080ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ae:	f004 f829 	bl	800c104 <tcp_split_unsent_seg>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80080b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ba:	f004 faa9 	bl	800c610 <tcp_output>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80ac 	beq.w	8008228 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80080de:	2b06      	cmp	r3, #6
 80080e0:	f200 80a2 	bhi.w	8008228 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80080ea:	3301      	adds	r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80080f4:	e098      	b.n	8008228 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db0f      	blt.n	8008120 <tcp_slowtmr+0x1f0>
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008106:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800810a:	4293      	cmp	r3, r2
 800810c:	d008      	beq.n	8008120 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008114:	b29b      	uxth	r3, r3
 8008116:	3301      	adds	r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	b21a      	sxth	r2, r3
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800812c:	429a      	cmp	r2, r3
 800812e:	db7b      	blt.n	8008228 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008132:	f004 fd5f 	bl	800cbf4 <tcp_rexmit_rto_prepare>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <tcp_slowtmr+0x21c>
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	2b00      	cmp	r3, #0
 8008142:	d171      	bne.n	8008228 <tcp_slowtmr+0x2f8>
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d06d      	beq.n	8008228 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	7d1b      	ldrb	r3, [r3, #20]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d03a      	beq.n	80081ca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800815a:	2b0c      	cmp	r3, #12
 800815c:	bf28      	it	cs
 800815e:	230c      	movcs	r3, #12
 8008160:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008168:	10db      	asrs	r3, r3, #3
 800816a:	b21b      	sxth	r3, r3
 800816c:	461a      	mov	r2, r3
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008174:	4413      	add	r3, r2
 8008176:	7efa      	ldrb	r2, [r7, #27]
 8008178:	4910      	ldr	r1, [pc, #64]	; (80081bc <tcp_slowtmr+0x28c>)
 800817a:	5c8a      	ldrb	r2, [r1, r2]
 800817c:	4093      	lsls	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008186:	4293      	cmp	r3, r2
 8008188:	dc1a      	bgt.n	80081c0 <tcp_slowtmr+0x290>
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	b21a      	sxth	r2, r3
 800818e:	e019      	b.n	80081c4 <tcp_slowtmr+0x294>
 8008190:	20006970 	.word	0x20006970
 8008194:	200000ce 	.word	0x200000ce
 8008198:	2000696c 	.word	0x2000696c
 800819c:	08014128 	.word	0x08014128
 80081a0:	0801446c 	.word	0x0801446c
 80081a4:	0801416c 	.word	0x0801416c
 80081a8:	08014498 	.word	0x08014498
 80081ac:	080144c4 	.word	0x080144c4
 80081b0:	080144f4 	.word	0x080144f4
 80081b4:	08014528 	.word	0x08014528
 80081b8:	0801617c 	.word	0x0801617c
 80081bc:	0801616c 	.word	0x0801616c
 80081c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	2200      	movs	r2, #0
 80081ce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80081d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081dc:	4293      	cmp	r3, r2
 80081de:	bf28      	it	cs
 80081e0:	4613      	movcs	r3, r2
 80081e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80081e4:	8a7b      	ldrh	r3, [r7, #18]
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	429a      	cmp	r2, r3
 8008200:	d206      	bcs.n	8008210 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2200      	movs	r2, #0
 800821e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008224:	f004 fd56 	bl	800ccd4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	7d1b      	ldrb	r3, [r3, #20]
 800822c:	2b06      	cmp	r3, #6
 800822e:	d111      	bne.n	8008254 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	8b5b      	ldrh	r3, [r3, #26]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800823c:	4b9c      	ldr	r3, [pc, #624]	; (80084b0 <tcp_slowtmr+0x580>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b28      	cmp	r3, #40	; 0x28
 8008248:	d904      	bls.n	8008254 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800824a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800824e:	3301      	adds	r3, #1
 8008250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	7a5b      	ldrb	r3, [r3, #9]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d04a      	beq.n	80082f6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008264:	2b04      	cmp	r3, #4
 8008266:	d003      	beq.n	8008270 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800826c:	2b07      	cmp	r3, #7
 800826e:	d142      	bne.n	80082f6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008270:	4b8f      	ldr	r3, [pc, #572]	; (80084b0 <tcp_slowtmr+0x580>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008280:	4b8c      	ldr	r3, [pc, #560]	; (80084b4 <tcp_slowtmr+0x584>)
 8008282:	440b      	add	r3, r1
 8008284:	498c      	ldr	r1, [pc, #560]	; (80084b8 <tcp_slowtmr+0x588>)
 8008286:	fba1 1303 	umull	r1, r3, r1, r3
 800828a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800828c:	429a      	cmp	r2, r3
 800828e:	d90a      	bls.n	80082a6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008294:	3301      	adds	r3, #1
 8008296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800829a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800829e:	3301      	adds	r3, #1
 80082a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80082a4:	e027      	b.n	80082f6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082a6:	4b82      	ldr	r3, [pc, #520]	; (80084b0 <tcp_slowtmr+0x580>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80082bc:	4618      	mov	r0, r3
 80082be:	4b7f      	ldr	r3, [pc, #508]	; (80084bc <tcp_slowtmr+0x58c>)
 80082c0:	fb03 f300 	mul.w	r3, r3, r0
 80082c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80082c6:	497c      	ldr	r1, [pc, #496]	; (80084b8 <tcp_slowtmr+0x588>)
 80082c8:	fba1 1303 	umull	r1, r3, r1, r3
 80082cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d911      	bls.n	80082f6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80082d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082d4:	f005 f804 	bl	800d2e0 <tcp_keepalive>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80082de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d107      	bne.n	80082f6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80082ec:	3301      	adds	r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d011      	beq.n	8008322 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80082fe:	4b6c      	ldr	r3, [pc, #432]	; (80084b0 <tcp_slowtmr+0x580>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800830e:	4619      	mov	r1, r3
 8008310:	460b      	mov	r3, r1
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	440b      	add	r3, r1
 8008316:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800831c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800831e:	f000 fec3 	bl	80090a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	7d1b      	ldrb	r3, [r3, #20]
 8008326:	2b03      	cmp	r3, #3
 8008328:	d10b      	bne.n	8008342 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800832a:	4b61      	ldr	r3, [pc, #388]	; (80084b0 <tcp_slowtmr+0x580>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b28      	cmp	r3, #40	; 0x28
 8008336:	d904      	bls.n	8008342 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800833c:	3301      	adds	r3, #1
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	7d1b      	ldrb	r3, [r3, #20]
 8008346:	2b09      	cmp	r3, #9
 8008348:	d10b      	bne.n	8008362 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800834a:	4b59      	ldr	r3, [pc, #356]	; (80084b0 <tcp_slowtmr+0x580>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2bf0      	cmp	r3, #240	; 0xf0
 8008356:	d904      	bls.n	8008362 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835c:	3301      	adds	r3, #1
 800835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008366:	2b00      	cmp	r3, #0
 8008368:	d060      	beq.n	800842c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008374:	f000 fce4 	bl	8008d40 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800837e:	4b50      	ldr	r3, [pc, #320]	; (80084c0 <tcp_slowtmr+0x590>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008384:	429a      	cmp	r2, r3
 8008386:	d106      	bne.n	8008396 <tcp_slowtmr+0x466>
 8008388:	4b4e      	ldr	r3, [pc, #312]	; (80084c4 <tcp_slowtmr+0x594>)
 800838a:	f240 526d 	movw	r2, #1389	; 0x56d
 800838e:	494e      	ldr	r1, [pc, #312]	; (80084c8 <tcp_slowtmr+0x598>)
 8008390:	484e      	ldr	r0, [pc, #312]	; (80084cc <tcp_slowtmr+0x59c>)
 8008392:	f00a f8c7 	bl	8012524 <iprintf>
        prev->next = pcb->next;
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	60da      	str	r2, [r3, #12]
 800839e:	e00f      	b.n	80083c0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80083a0:	4b47      	ldr	r3, [pc, #284]	; (80084c0 <tcp_slowtmr+0x590>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d006      	beq.n	80083b8 <tcp_slowtmr+0x488>
 80083aa:	4b46      	ldr	r3, [pc, #280]	; (80084c4 <tcp_slowtmr+0x594>)
 80083ac:	f240 5271 	movw	r2, #1393	; 0x571
 80083b0:	4947      	ldr	r1, [pc, #284]	; (80084d0 <tcp_slowtmr+0x5a0>)
 80083b2:	4846      	ldr	r0, [pc, #280]	; (80084cc <tcp_slowtmr+0x59c>)
 80083b4:	f00a f8b6 	bl	8012524 <iprintf>
        tcp_active_pcbs = pcb->next;
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	4a40      	ldr	r2, [pc, #256]	; (80084c0 <tcp_slowtmr+0x590>)
 80083be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80083c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d013      	beq.n	80083f0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80083d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	3304      	adds	r3, #4
 80083d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083d8:	8ad2      	ldrh	r2, [r2, #22]
 80083da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083dc:	8b09      	ldrh	r1, [r1, #24]
 80083de:	9102      	str	r1, [sp, #8]
 80083e0:	9201      	str	r2, [sp, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	462b      	mov	r3, r5
 80083e6:	4622      	mov	r2, r4
 80083e8:	4601      	mov	r1, r0
 80083ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ec:	f004 fec4 	bl	800d178 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	7d1b      	ldrb	r3, [r3, #20]
 80083fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008406:	6838      	ldr	r0, [r7, #0]
 8008408:	f7ff f83a 	bl	8007480 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800840c:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <tcp_slowtmr+0x5a4>)
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <tcp_slowtmr+0x4f2>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f06f 010c 	mvn.w	r1, #12
 800841e:	68b8      	ldr	r0, [r7, #8]
 8008420:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008422:	4b2c      	ldr	r3, [pc, #176]	; (80084d4 <tcp_slowtmr+0x5a4>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d037      	beq.n	800849a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800842a:	e592      	b.n	8007f52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	7f1b      	ldrb	r3, [r3, #28]
 800843a:	3301      	adds	r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	7f1a      	ldrb	r2, [r3, #28]
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	7f5b      	ldrb	r3, [r3, #29]
 800844a:	429a      	cmp	r2, r3
 800844c:	d325      	bcc.n	800849a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008454:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <tcp_slowtmr+0x5a4>)
 8008456:	2200      	movs	r2, #0
 8008458:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <tcp_slowtmr+0x54c>
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800846c:	6912      	ldr	r2, [r2, #16]
 800846e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800847a:	e002      	b.n	8008482 <tcp_slowtmr+0x552>
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008482:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <tcp_slowtmr+0x5a4>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d000      	beq.n	800848c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800848a:	e562      	b.n	8007f52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800848c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f004 f8bb 	bl	800c610 <tcp_output>
  while (pcb != NULL) {
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f47f ad5e 	bne.w	8007f5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <tcp_slowtmr+0x5a8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80084ac:	e069      	b.n	8008582 <tcp_slowtmr+0x652>
 80084ae:	bf00      	nop
 80084b0:	20006970 	.word	0x20006970
 80084b4:	000a4cb8 	.word	0x000a4cb8
 80084b8:	10624dd3 	.word	0x10624dd3
 80084bc:	000124f8 	.word	0x000124f8
 80084c0:	2000696c 	.word	0x2000696c
 80084c4:	08014128 	.word	0x08014128
 80084c8:	08014560 	.word	0x08014560
 80084cc:	0801416c 	.word	0x0801416c
 80084d0:	0801458c 	.word	0x0801458c
 80084d4:	20006968 	.word	0x20006968
 80084d8:	2000697c 	.word	0x2000697c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	7d1b      	ldrb	r3, [r3, #20]
 80084e0:	2b0a      	cmp	r3, #10
 80084e2:	d006      	beq.n	80084f2 <tcp_slowtmr+0x5c2>
 80084e4:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <tcp_slowtmr+0x664>)
 80084e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80084ea:	492b      	ldr	r1, [pc, #172]	; (8008598 <tcp_slowtmr+0x668>)
 80084ec:	482b      	ldr	r0, [pc, #172]	; (800859c <tcp_slowtmr+0x66c>)
 80084ee:	f00a f819 	bl	8012524 <iprintf>
    pcb_remove = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80084f8:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <tcp_slowtmr+0x670>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2bf0      	cmp	r3, #240	; 0xf0
 8008504:	d904      	bls.n	8008510 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800850a:	3301      	adds	r3, #1
 800850c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008514:	2b00      	cmp	r3, #0
 8008516:	d02f      	beq.n	8008578 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800851a:	f000 fc11 	bl	8008d40 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <tcp_slowtmr+0x674>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	429a      	cmp	r2, r3
 800852c:	d106      	bne.n	800853c <tcp_slowtmr+0x60c>
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <tcp_slowtmr+0x664>)
 8008530:	f240 52af 	movw	r2, #1455	; 0x5af
 8008534:	491c      	ldr	r1, [pc, #112]	; (80085a8 <tcp_slowtmr+0x678>)
 8008536:	4819      	ldr	r0, [pc, #100]	; (800859c <tcp_slowtmr+0x66c>)
 8008538:	f009 fff4 	bl	8012524 <iprintf>
        prev->next = pcb->next;
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	60da      	str	r2, [r3, #12]
 8008544:	e00f      	b.n	8008566 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008546:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <tcp_slowtmr+0x674>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d006      	beq.n	800855e <tcp_slowtmr+0x62e>
 8008550:	4b10      	ldr	r3, [pc, #64]	; (8008594 <tcp_slowtmr+0x664>)
 8008552:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008556:	4915      	ldr	r1, [pc, #84]	; (80085ac <tcp_slowtmr+0x67c>)
 8008558:	4810      	ldr	r0, [pc, #64]	; (800859c <tcp_slowtmr+0x66c>)
 800855a:	f009 ffe3 	bl	8012524 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <tcp_slowtmr+0x674>)
 8008564:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008570:	69f8      	ldr	r0, [r7, #28]
 8008572:	f7fe ff85 	bl	8007480 <tcp_free>
 8008576:	e004      	b.n	8008582 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1a9      	bne.n	80084dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	3730      	adds	r7, #48	; 0x30
 800858e:	46bd      	mov	sp, r7
 8008590:	bdb0      	pop	{r4, r5, r7, pc}
 8008592:	bf00      	nop
 8008594:	08014128 	.word	0x08014128
 8008598:	080145b8 	.word	0x080145b8
 800859c:	0801416c 	.word	0x0801416c
 80085a0:	20006970 	.word	0x20006970
 80085a4:	2000697c 	.word	0x2000697c
 80085a8:	080145e8 	.word	0x080145e8
 80085ac:	08014610 	.word	0x08014610

080085b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80085b6:	4b2d      	ldr	r3, [pc, #180]	; (800866c <tcp_fasttmr+0xbc>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b2b      	ldr	r3, [pc, #172]	; (800866c <tcp_fasttmr+0xbc>)
 80085c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80085c2:	4b2b      	ldr	r3, [pc, #172]	; (8008670 <tcp_fasttmr+0xc0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80085c8:	e048      	b.n	800865c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	7f9a      	ldrb	r2, [r3, #30]
 80085ce:	4b27      	ldr	r3, [pc, #156]	; (800866c <tcp_fasttmr+0xbc>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d03f      	beq.n	8008656 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80085d6:	4b25      	ldr	r3, [pc, #148]	; (800866c <tcp_fasttmr+0xbc>)
 80085d8:	781a      	ldrb	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	8b5b      	ldrh	r3, [r3, #26]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	8b5b      	ldrh	r3, [r3, #26]
 80085ee:	f043 0302 	orr.w	r3, r3, #2
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f004 f809 	bl	800c610 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8b5b      	ldrh	r3, [r3, #26]
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	b29a      	uxth	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8b5b      	ldrh	r3, [r3, #26]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8b5b      	ldrh	r3, [r3, #26]
 800861c:	f023 0308 	bic.w	r3, r3, #8
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff f8be 	bl	80077a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <tcp_fasttmr+0xc4>)
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f819 	bl	8008678 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <tcp_fasttmr+0xc4>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d000      	beq.n	8008650 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800864e:	e7b8      	b.n	80085c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	607b      	str	r3, [r7, #4]
 8008654:	e002      	b.n	800865c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1b3      	bne.n	80085ca <tcp_fasttmr+0x1a>
    }
  }
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200000ce 	.word	0x200000ce
 8008670:	2000696c 	.word	0x2000696c
 8008674:	20006968 	.word	0x20006968

08008678 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <tcp_process_refused_data+0x22>
 8008686:	4b37      	ldr	r3, [pc, #220]	; (8008764 <tcp_process_refused_data+0xec>)
 8008688:	f240 6209 	movw	r2, #1545	; 0x609
 800868c:	4936      	ldr	r1, [pc, #216]	; (8008768 <tcp_process_refused_data+0xf0>)
 800868e:	4837      	ldr	r0, [pc, #220]	; (800876c <tcp_process_refused_data+0xf4>)
 8008690:	f009 ff48 	bl	8012524 <iprintf>
 8008694:	f06f 030f 	mvn.w	r3, #15
 8008698:	e060      	b.n	800875c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869e:	7b5b      	ldrb	r3, [r3, #13]
 80086a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <tcp_process_refused_data+0x58>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6918      	ldr	r0, [r3, #16]
 80086c2:	2300      	movs	r3, #0
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	47a0      	blx	r4
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
 80086ce:	e007      	b.n	80086e0 <tcp_process_refused_data+0x68>
 80086d0:	2300      	movs	r3, #0
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	2000      	movs	r0, #0
 80086d8:	f000 f8c2 	bl	8008860 <tcp_recv_null>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80086e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d12a      	bne.n	800873e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d033      	beq.n	800875a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80086fa:	d005      	beq.n	8008708 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008700:	3301      	adds	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <tcp_process_refused_data+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6918      	ldr	r0, [r3, #16]
 800871c:	2300      	movs	r3, #0
 800871e:	2200      	movs	r2, #0
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	47a0      	blx	r4
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e001      	b.n	800872e <tcp_process_refused_data+0xb6>
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800872e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008732:	f113 0f0d 	cmn.w	r3, #13
 8008736:	d110      	bne.n	800875a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008738:	f06f 030c 	mvn.w	r3, #12
 800873c:	e00e      	b.n	800875c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800873e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008742:	f113 0f0d 	cmn.w	r3, #13
 8008746:	d102      	bne.n	800874e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008748:	f06f 030c 	mvn.w	r3, #12
 800874c:	e006      	b.n	800875c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008754:	f06f 0304 	mvn.w	r3, #4
 8008758:	e000      	b.n	800875c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bd90      	pop	{r4, r7, pc}
 8008764:	08014128 	.word	0x08014128
 8008768:	08014638 	.word	0x08014638
 800876c:	0801416c 	.word	0x0801416c

08008770 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008778:	e007      	b.n	800878a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f80a 	bl	800879a <tcp_seg_free>
    seg = next;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f4      	bne.n	800877a <tcp_segs_free+0xa>
  }
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fbb3 	bl	8006f20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	2003      	movs	r0, #3
 80087be:	f7fd fd9d 	bl	80062fc <memp_free>
  }
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d107      	bne.n	80087ee <tcp_setprio+0x22>
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <tcp_setprio+0x30>)
 80087e0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80087e4:	4906      	ldr	r1, [pc, #24]	; (8008800 <tcp_setprio+0x34>)
 80087e6:	4807      	ldr	r0, [pc, #28]	; (8008804 <tcp_setprio+0x38>)
 80087e8:	f009 fe9c 	bl	8012524 <iprintf>
 80087ec:	e002      	b.n	80087f4 <tcp_setprio+0x28>

  pcb->prio = prio;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	755a      	strb	r2, [r3, #21]
}
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	08014128 	.word	0x08014128
 8008800:	08014660 	.word	0x08014660
 8008804:	0801416c 	.word	0x0801416c

08008808 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <tcp_seg_copy+0x1c>
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <tcp_seg_copy+0x4c>)
 8008818:	f240 6282 	movw	r2, #1666	; 0x682
 800881c:	490e      	ldr	r1, [pc, #56]	; (8008858 <tcp_seg_copy+0x50>)
 800881e:	480f      	ldr	r0, [pc, #60]	; (800885c <tcp_seg_copy+0x54>)
 8008820:	f009 fe80 	bl	8012524 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008824:	2003      	movs	r0, #3
 8008826:	f7fd fd1d 	bl	8006264 <memp_malloc>
 800882a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <tcp_seg_copy+0x2e>
    return NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	e00a      	b.n	800884c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008836:	2210      	movs	r2, #16
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f009 fe5c 	bl	80124f8 <memcpy>
  pbuf_ref(cseg->p);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fc0b 	bl	8007060 <pbuf_ref>
  return cseg;
 800884a:	68fb      	ldr	r3, [r7, #12]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	08014128 	.word	0x08014128
 8008858:	0801467c 	.word	0x0801467c
 800885c:	0801416c 	.word	0x0801416c

08008860 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <tcp_recv_null+0x28>
 8008874:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <tcp_recv_null+0x60>)
 8008876:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800887a:	4912      	ldr	r1, [pc, #72]	; (80088c4 <tcp_recv_null+0x64>)
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <tcp_recv_null+0x68>)
 800887e:	f009 fe51 	bl	8012524 <iprintf>
 8008882:	f06f 030f 	mvn.w	r3, #15
 8008886:	e016      	b.n	80088b6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	891b      	ldrh	r3, [r3, #8]
 8008892:	4619      	mov	r1, r3
 8008894:	68b8      	ldr	r0, [r7, #8]
 8008896:	f7ff fab5 	bl	8007e04 <tcp_recved>
    pbuf_free(p);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fe fb40 	bl	8006f20 <pbuf_free>
 80088a0:	e008      	b.n	80088b4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80088a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d104      	bne.n	80088b4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80088aa:	68b8      	ldr	r0, [r7, #8]
 80088ac:	f7fe ffe6 	bl	800787c <tcp_close>
 80088b0:	4603      	mov	r3, r0
 80088b2:	e000      	b.n	80088b6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	08014128 	.word	0x08014128
 80088c4:	08014698 	.word	0x08014698
 80088c8:	0801416c 	.word	0x0801416c

080088cc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80088d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	db01      	blt.n	80088e2 <tcp_kill_prio+0x16>
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	e000      	b.n	80088e4 <tcp_kill_prio+0x18>
 80088e2:	237f      	movs	r3, #127	; 0x7f
 80088e4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d034      	beq.n	8008956 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088fa:	4b19      	ldr	r3, [pc, #100]	; (8008960 <tcp_kill_prio+0x94>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	e01f      	b.n	8008942 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	7d5b      	ldrb	r3, [r3, #21]
 8008906:	7afa      	ldrb	r2, [r7, #11]
 8008908:	429a      	cmp	r2, r3
 800890a:	d80c      	bhi.n	8008926 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008910:	7afa      	ldrb	r2, [r7, #11]
 8008912:	429a      	cmp	r2, r3
 8008914:	d112      	bne.n	800893c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008916:	4b13      	ldr	r3, [pc, #76]	; (8008964 <tcp_kill_prio+0x98>)
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	429a      	cmp	r2, r3
 8008924:	d80a      	bhi.n	800893c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <tcp_kill_prio+0x98>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	7d5b      	ldrb	r3, [r3, #21]
 800893a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1dc      	bne.n	8008902 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800894e:	6938      	ldr	r0, [r7, #16]
 8008950:	f7ff f87e 	bl	8007a50 <tcp_abort>
 8008954:	e000      	b.n	8008958 <tcp_kill_prio+0x8c>
    return;
 8008956:	bf00      	nop
  }
}
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	2000696c 	.word	0x2000696c
 8008964:	20006970 	.word	0x20006970

08008968 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b08      	cmp	r3, #8
 8008976:	d009      	beq.n	800898c <tcp_kill_state+0x24>
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	2b09      	cmp	r3, #9
 800897c:	d006      	beq.n	800898c <tcp_kill_state+0x24>
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <tcp_kill_state+0x80>)
 8008980:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008984:	4919      	ldr	r1, [pc, #100]	; (80089ec <tcp_kill_state+0x84>)
 8008986:	481a      	ldr	r0, [pc, #104]	; (80089f0 <tcp_kill_state+0x88>)
 8008988:	f009 fdcc 	bl	8012524 <iprintf>

  inactivity = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008994:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <tcp_kill_state+0x8c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e017      	b.n	80089cc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	7d1b      	ldrb	r3, [r3, #20]
 80089a0:	79fa      	ldrb	r2, [r7, #7]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d10f      	bne.n	80089c6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <tcp_kill_state+0x90>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d807      	bhi.n	80089c6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <tcp_kill_state+0x90>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e4      	bne.n	800899c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80089d8:	2100      	movs	r1, #0
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f7fe ff7a 	bl	80078d4 <tcp_abandon>
  }
}
 80089e0:	bf00      	nop
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	08014128 	.word	0x08014128
 80089ec:	080146b4 	.word	0x080146b4
 80089f0:	0801416c 	.word	0x0801416c
 80089f4:	2000696c 	.word	0x2000696c
 80089f8:	20006970 	.word	0x20006970

080089fc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <tcp_kill_timewait+0x58>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e012      	b.n	8008a38 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008a12:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <tcp_kill_timewait+0x5c>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d807      	bhi.n	8008a32 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <tcp_kill_timewait+0x5c>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e9      	bne.n	8008a12 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a44:	68b8      	ldr	r0, [r7, #8]
 8008a46:	f7ff f803 	bl	8007a50 <tcp_abort>
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	2000697c 	.word	0x2000697c
 8008a58:	20006970 	.word	0x20006970

08008a5c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008a62:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <tcp_handle_closepend+0x48>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a68:	e014      	b.n	8008a94 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8b5b      	ldrh	r3, [r3, #26]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8b5b      	ldrh	r3, [r3, #26]
 8008a80:	f023 0308 	bic.w	r3, r3, #8
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fe fe8c 	bl	80077a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e7      	bne.n	8008a6a <tcp_handle_closepend+0xe>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	2000696c 	.word	0x2000696c

08008aa8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7fd fbd6 	bl	8006264 <memp_malloc>
 8008ab8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d126      	bne.n	8008b0e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008ac0:	f7ff ffcc 	bl	8008a5c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008ac4:	f7ff ff9a 	bl	80089fc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f7fd fbcb 	bl	8006264 <memp_malloc>
 8008ace:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d11b      	bne.n	8008b0e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008ad6:	2009      	movs	r0, #9
 8008ad8:	f7ff ff46 	bl	8008968 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f7fd fbc1 	bl	8006264 <memp_malloc>
 8008ae2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d111      	bne.n	8008b0e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008aea:	2008      	movs	r0, #8
 8008aec:	f7ff ff3c 	bl	8008968 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008af0:	2001      	movs	r0, #1
 8008af2:	f7fd fbb7 	bl	8006264 <memp_malloc>
 8008af6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fee3 	bl	80088cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b06:	2001      	movs	r0, #1
 8008b08:	f7fd fbac 	bl	8006264 <memp_malloc>
 8008b0c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d03f      	beq.n	8008b94 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b14:	229c      	movs	r2, #156	; 0x9c
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f009 fcfb 	bl	8012514 <memset>
    pcb->prio = prio;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	79fa      	ldrb	r2, [r7, #7]
 8008b22:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008b2a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	22ff      	movs	r2, #255	; 0xff
 8008b42:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008b4a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2206      	movs	r2, #6
 8008b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2206      	movs	r2, #6
 8008b58:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b60:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008b6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <tcp_alloc+0xf8>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008b72:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <tcp_alloc+0xfc>)
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008b80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a08      	ldr	r2, [pc, #32]	; (8008ba8 <tcp_alloc+0x100>)
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a07      	ldr	r2, [pc, #28]	; (8008bac <tcp_alloc+0x104>)
 8008b90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20006970 	.word	0x20006970
 8008ba4:	200000ce 	.word	0x200000ce
 8008ba8:	08008861 	.word	0x08008861
 8008bac:	006ddd00 	.word	0x006ddd00

08008bb0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008bb4:	2040      	movs	r0, #64	; 0x40
 8008bb6:	f7ff ff77 	bl	8008aa8 <tcp_alloc>
 8008bba:	4603      	mov	r3, r0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	611a      	str	r2, [r3, #16]
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
	...

08008be4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7d1b      	ldrb	r3, [r3, #20]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d106      	bne.n	8008c0a <tcp_recv+0x26>
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <tcp_recv+0x38>)
 8008bfe:	f240 72df 	movw	r2, #2015	; 0x7df
 8008c02:	4907      	ldr	r1, [pc, #28]	; (8008c20 <tcp_recv+0x3c>)
 8008c04:	4807      	ldr	r0, [pc, #28]	; (8008c24 <tcp_recv+0x40>)
 8008c06:	f009 fc8d 	bl	8012524 <iprintf>
    pcb->recv = recv;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	08014128 	.word	0x08014128
 8008c20:	080146c4 	.word	0x080146c4
 8008c24:	0801416c 	.word	0x0801416c

08008c28 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00e      	beq.n	8008c56 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	7d1b      	ldrb	r3, [r3, #20]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d106      	bne.n	8008c4e <tcp_sent+0x26>
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <tcp_sent+0x38>)
 8008c42:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008c46:	4907      	ldr	r1, [pc, #28]	; (8008c64 <tcp_sent+0x3c>)
 8008c48:	4807      	ldr	r0, [pc, #28]	; (8008c68 <tcp_sent+0x40>)
 8008c4a:	f009 fc6b 	bl	8012524 <iprintf>
    pcb->sent = sent;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	08014128 	.word	0x08014128
 8008c64:	080146ec 	.word	0x080146ec
 8008c68:	0801416c 	.word	0x0801416c

08008c6c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7d1b      	ldrb	r3, [r3, #20]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d106      	bne.n	8008c92 <tcp_err+0x26>
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <tcp_err+0x38>)
 8008c86:	f640 020d 	movw	r2, #2061	; 0x80d
 8008c8a:	4907      	ldr	r1, [pc, #28]	; (8008ca8 <tcp_err+0x3c>)
 8008c8c:	4807      	ldr	r0, [pc, #28]	; (8008cac <tcp_err+0x40>)
 8008c8e:	f009 fc49 	bl	8012524 <iprintf>
    pcb->errf = err;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08014128 	.word	0x08014128
 8008ca8:	08014714 	.word	0x08014714
 8008cac:	0801416c 	.word	0x0801416c

08008cb0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <tcp_accept+0x22>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d104      	bne.n	8008cd2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	619a      	str	r2, [r3, #24]
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d107      	bne.n	8008d04 <tcp_poll+0x24>
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <tcp_poll+0x50>)
 8008cf6:	f640 023d 	movw	r2, #2109	; 0x83d
 8008cfa:	490e      	ldr	r1, [pc, #56]	; (8008d34 <tcp_poll+0x54>)
 8008cfc:	480e      	ldr	r0, [pc, #56]	; (8008d38 <tcp_poll+0x58>)
 8008cfe:	f009 fc11 	bl	8012524 <iprintf>
 8008d02:	e011      	b.n	8008d28 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	7d1b      	ldrb	r3, [r3, #20]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d106      	bne.n	8008d1a <tcp_poll+0x3a>
 8008d0c:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <tcp_poll+0x50>)
 8008d0e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008d12:	490a      	ldr	r1, [pc, #40]	; (8008d3c <tcp_poll+0x5c>)
 8008d14:	4808      	ldr	r0, [pc, #32]	; (8008d38 <tcp_poll+0x58>)
 8008d16:	f009 fc05 	bl	8012524 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	79fa      	ldrb	r2, [r7, #7]
 8008d26:	775a      	strb	r2, [r3, #29]
}
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	08014128 	.word	0x08014128
 8008d34:	0801473c 	.word	0x0801473c
 8008d38:	0801416c 	.word	0x0801416c
 8008d3c:	08014754 	.word	0x08014754

08008d40 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <tcp_pcb_purge+0x1e>
 8008d4e:	4b21      	ldr	r3, [pc, #132]	; (8008dd4 <tcp_pcb_purge+0x94>)
 8008d50:	f640 0251 	movw	r2, #2129	; 0x851
 8008d54:	4920      	ldr	r1, [pc, #128]	; (8008dd8 <tcp_pcb_purge+0x98>)
 8008d56:	4821      	ldr	r0, [pc, #132]	; (8008ddc <tcp_pcb_purge+0x9c>)
 8008d58:	f009 fbe4 	bl	8012524 <iprintf>
 8008d5c:	e037      	b.n	8008dce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7d1b      	ldrb	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d033      	beq.n	8008dce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008d6a:	2b0a      	cmp	r3, #10
 8008d6c:	d02f      	beq.n	8008dce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d02b      	beq.n	8008dce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe f8cc 	bl	8006f20 <pbuf_free>
      pcb->refused_data = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f986 	bl	80090a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008da2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff fce1 	bl	8008770 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fcdc 	bl	8008770 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	08014128 	.word	0x08014128
 8008dd8:	08014774 	.word	0x08014774
 8008ddc:	0801416c 	.word	0x0801416c

08008de0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <tcp_pcb_remove+0x1e>
 8008df0:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <tcp_pcb_remove+0x10c>)
 8008df2:	f640 0283 	movw	r2, #2179	; 0x883
 8008df6:	493e      	ldr	r1, [pc, #248]	; (8008ef0 <tcp_pcb_remove+0x110>)
 8008df8:	483e      	ldr	r0, [pc, #248]	; (8008ef4 <tcp_pcb_remove+0x114>)
 8008dfa:	f009 fb93 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <tcp_pcb_remove+0x32>
 8008e04:	4b39      	ldr	r3, [pc, #228]	; (8008eec <tcp_pcb_remove+0x10c>)
 8008e06:	f640 0284 	movw	r2, #2180	; 0x884
 8008e0a:	493b      	ldr	r1, [pc, #236]	; (8008ef8 <tcp_pcb_remove+0x118>)
 8008e0c:	4839      	ldr	r0, [pc, #228]	; (8008ef4 <tcp_pcb_remove+0x114>)
 8008e0e:	f009 fb89 	bl	8012524 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d105      	bne.n	8008e28 <tcp_pcb_remove+0x48>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	e013      	b.n	8008e50 <tcp_pcb_remove+0x70>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e00c      	b.n	8008e4a <tcp_pcb_remove+0x6a>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d104      	bne.n	8008e44 <tcp_pcb_remove+0x64>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	60da      	str	r2, [r3, #12]
 8008e42:	e005      	b.n	8008e50 <tcp_pcb_remove+0x70>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ef      	bne.n	8008e30 <tcp_pcb_remove+0x50>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008e56:	6838      	ldr	r0, [r7, #0]
 8008e58:	f7ff ff72 	bl	8008d40 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	7d1b      	ldrb	r3, [r3, #20]
 8008e60:	2b0a      	cmp	r3, #10
 8008e62:	d013      	beq.n	8008e8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d00f      	beq.n	8008e8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	8b5b      	ldrh	r3, [r3, #26]
 8008e70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	8b5b      	ldrh	r3, [r3, #26]
 8008e7c:	f043 0302 	orr.w	r3, r3, #2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e86:	6838      	ldr	r0, [r7, #0]
 8008e88:	f003 fbc2 	bl	800c610 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	7d1b      	ldrb	r3, [r3, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d020      	beq.n	8008ed6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d006      	beq.n	8008eaa <tcp_pcb_remove+0xca>
 8008e9c:	4b13      	ldr	r3, [pc, #76]	; (8008eec <tcp_pcb_remove+0x10c>)
 8008e9e:	f640 0293 	movw	r2, #2195	; 0x893
 8008ea2:	4916      	ldr	r1, [pc, #88]	; (8008efc <tcp_pcb_remove+0x11c>)
 8008ea4:	4813      	ldr	r0, [pc, #76]	; (8008ef4 <tcp_pcb_remove+0x114>)
 8008ea6:	f009 fb3d 	bl	8012524 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d006      	beq.n	8008ec0 <tcp_pcb_remove+0xe0>
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <tcp_pcb_remove+0x10c>)
 8008eb4:	f640 0294 	movw	r2, #2196	; 0x894
 8008eb8:	4911      	ldr	r1, [pc, #68]	; (8008f00 <tcp_pcb_remove+0x120>)
 8008eba:	480e      	ldr	r0, [pc, #56]	; (8008ef4 <tcp_pcb_remove+0x114>)
 8008ebc:	f009 fb32 	bl	8012524 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <tcp_pcb_remove+0xf6>
 8008ec8:	4b08      	ldr	r3, [pc, #32]	; (8008eec <tcp_pcb_remove+0x10c>)
 8008eca:	f640 0296 	movw	r2, #2198	; 0x896
 8008ece:	490d      	ldr	r1, [pc, #52]	; (8008f04 <tcp_pcb_remove+0x124>)
 8008ed0:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <tcp_pcb_remove+0x114>)
 8008ed2:	f009 fb27 	bl	8012524 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	08014128 	.word	0x08014128
 8008ef0:	08014790 	.word	0x08014790
 8008ef4:	0801416c 	.word	0x0801416c
 8008ef8:	080147ac 	.word	0x080147ac
 8008efc:	080147cc 	.word	0x080147cc
 8008f00:	080147e4 	.word	0x080147e4
 8008f04:	08014800 	.word	0x08014800

08008f08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <tcp_next_iss+0x1c>
 8008f16:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <tcp_next_iss+0x38>)
 8008f18:	f640 02af 	movw	r2, #2223	; 0x8af
 8008f1c:	4909      	ldr	r1, [pc, #36]	; (8008f44 <tcp_next_iss+0x3c>)
 8008f1e:	480a      	ldr	r0, [pc, #40]	; (8008f48 <tcp_next_iss+0x40>)
 8008f20:	f009 fb00 	bl	8012524 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <tcp_next_iss+0x44>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <tcp_next_iss+0x48>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <tcp_next_iss+0x44>)
 8008f30:	6013      	str	r3, [r2, #0]
  return iss;
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <tcp_next_iss+0x44>)
 8008f34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	08014128 	.word	0x08014128
 8008f44:	08014818 	.word	0x08014818
 8008f48:	0801416c 	.word	0x0801416c
 8008f4c:	2000000c 	.word	0x2000000c
 8008f50:	20006970 	.word	0x20006970

08008f54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <tcp_eff_send_mss_netif+0x22>
 8008f68:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <tcp_eff_send_mss_netif+0x68>)
 8008f6a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008f6e:	4914      	ldr	r1, [pc, #80]	; (8008fc0 <tcp_eff_send_mss_netif+0x6c>)
 8008f70:	4814      	ldr	r0, [pc, #80]	; (8008fc4 <tcp_eff_send_mss_netif+0x70>)
 8008f72:	f009 fad7 	bl	8012524 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	e019      	b.n	8008fb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008f86:	8afb      	ldrh	r3, [r7, #22]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d012      	beq.n	8008fb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008f8c:	2328      	movs	r3, #40	; 0x28
 8008f8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008f90:	8afa      	ldrh	r2, [r7, #22]
 8008f92:	8abb      	ldrh	r3, [r7, #20]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d904      	bls.n	8008fa2 <tcp_eff_send_mss_netif+0x4e>
 8008f98:	8afa      	ldrh	r2, [r7, #22]
 8008f9a:	8abb      	ldrh	r3, [r7, #20]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	e000      	b.n	8008fa4 <tcp_eff_send_mss_netif+0x50>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008fa6:	8a7a      	ldrh	r2, [r7, #18]
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	4293      	cmp	r3, r2
 8008fac:	bf28      	it	cs
 8008fae:	4613      	movcs	r3, r2
 8008fb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	08014128 	.word	0x08014128
 8008fc0:	08014834 	.word	0x08014834
 8008fc4:	0801416c 	.word	0x0801416c

08008fc8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d119      	bne.n	8009010 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008fdc:	4b10      	ldr	r3, [pc, #64]	; (8009020 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008fde:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008fe2:	4910      	ldr	r1, [pc, #64]	; (8009024 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008fe4:	4810      	ldr	r0, [pc, #64]	; (8009028 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008fe6:	f009 fa9d 	bl	8012524 <iprintf>

  while (pcb != NULL) {
 8008fea:	e011      	b.n	8009010 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d108      	bne.n	800900a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7fe fd26 	bl	8007a50 <tcp_abort>
      pcb = next;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e002      	b.n	8009010 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1ea      	bne.n	8008fec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	08014128 	.word	0x08014128
 8009024:	0801485c 	.word	0x0801485c
 8009028:	0801416c 	.word	0x0801416c

0800902c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02a      	beq.n	8009092 <tcp_netif_ip_addr_changed+0x66>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d026      	beq.n	8009092 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009044:	4b15      	ldr	r3, [pc, #84]	; (800909c <tcp_netif_ip_addr_changed+0x70>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ffbc 	bl	8008fc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009050:	4b13      	ldr	r3, [pc, #76]	; (80090a0 <tcp_netif_ip_addr_changed+0x74>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff ffb6 	bl	8008fc8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <tcp_netif_ip_addr_changed+0x66>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d013      	beq.n	8009092 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800906a:	4b0e      	ldr	r3, [pc, #56]	; (80090a4 <tcp_netif_ip_addr_changed+0x78>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e00c      	b.n	800908c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d103      	bne.n	8009086 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1ef      	bne.n	8009072 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2000696c 	.word	0x2000696c
 80090a0:	20006978 	.word	0x20006978
 80090a4:	20006974 	.word	0x20006974

080090a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fb57 	bl	8008770 <tcp_segs_free>
    pcb->ooseq = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b08d      	sub	sp, #52	; 0x34
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d105      	bne.n	80090ec <tcp_input+0x1c>
 80090e0:	4b9b      	ldr	r3, [pc, #620]	; (8009350 <tcp_input+0x280>)
 80090e2:	2283      	movs	r2, #131	; 0x83
 80090e4:	499b      	ldr	r1, [pc, #620]	; (8009354 <tcp_input+0x284>)
 80090e6:	489c      	ldr	r0, [pc, #624]	; (8009358 <tcp_input+0x288>)
 80090e8:	f009 fa1c 	bl	8012524 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a9a      	ldr	r2, [pc, #616]	; (800935c <tcp_input+0x28c>)
 80090f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	895b      	ldrh	r3, [r3, #10]
 80090f8:	2b13      	cmp	r3, #19
 80090fa:	f240 83c4 	bls.w	8009886 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80090fe:	4b98      	ldr	r3, [pc, #608]	; (8009360 <tcp_input+0x290>)
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	4a97      	ldr	r2, [pc, #604]	; (8009360 <tcp_input+0x290>)
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f006 f86b 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	f040 83ba 	bne.w	800988a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009116:	4b92      	ldr	r3, [pc, #584]	; (8009360 <tcp_input+0x290>)
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800911e:	2be0      	cmp	r3, #224	; 0xe0
 8009120:	f000 83b3 	beq.w	800988a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009124:	4b8d      	ldr	r3, [pc, #564]	; (800935c <tcp_input+0x28c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	899b      	ldrh	r3, [r3, #12]
 800912a:	b29b      	uxth	r3, r3
 800912c:	4618      	mov	r0, r3
 800912e:	f7fc fc43 	bl	80059b8 <lwip_htons>
 8009132:	4603      	mov	r3, r0
 8009134:	0b1b      	lsrs	r3, r3, #12
 8009136:	b29b      	uxth	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800913e:	7cbb      	ldrb	r3, [r7, #18]
 8009140:	2b13      	cmp	r3, #19
 8009142:	f240 83a4 	bls.w	800988e <tcp_input+0x7be>
 8009146:	7cbb      	ldrb	r3, [r7, #18]
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	891b      	ldrh	r3, [r3, #8]
 800914e:	429a      	cmp	r2, r3
 8009150:	f200 839d 	bhi.w	800988e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009154:	7cbb      	ldrb	r3, [r7, #18]
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b14      	subs	r3, #20
 800915a:	b29a      	uxth	r2, r3
 800915c:	4b81      	ldr	r3, [pc, #516]	; (8009364 <tcp_input+0x294>)
 800915e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009160:	4b81      	ldr	r3, [pc, #516]	; (8009368 <tcp_input+0x298>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	895a      	ldrh	r2, [r3, #10]
 800916a:	7cbb      	ldrb	r3, [r7, #18]
 800916c:	b29b      	uxth	r3, r3
 800916e:	429a      	cmp	r2, r3
 8009170:	d309      	bcc.n	8009186 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009172:	4b7c      	ldr	r3, [pc, #496]	; (8009364 <tcp_input+0x294>)
 8009174:	881a      	ldrh	r2, [r3, #0]
 8009176:	4b7d      	ldr	r3, [pc, #500]	; (800936c <tcp_input+0x29c>)
 8009178:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800917a:	7cbb      	ldrb	r3, [r7, #18]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fd fe48 	bl	8006e14 <pbuf_remove_header>
 8009184:	e04e      	b.n	8009224 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d105      	bne.n	800919a <tcp_input+0xca>
 800918e:	4b70      	ldr	r3, [pc, #448]	; (8009350 <tcp_input+0x280>)
 8009190:	22c2      	movs	r2, #194	; 0xc2
 8009192:	4977      	ldr	r1, [pc, #476]	; (8009370 <tcp_input+0x2a0>)
 8009194:	4870      	ldr	r0, [pc, #448]	; (8009358 <tcp_input+0x288>)
 8009196:	f009 f9c5 	bl	8012524 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800919a:	2114      	movs	r1, #20
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7fd fe39 	bl	8006e14 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	895a      	ldrh	r2, [r3, #10]
 80091a6:	4b71      	ldr	r3, [pc, #452]	; (800936c <tcp_input+0x29c>)
 80091a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80091aa:	4b6e      	ldr	r3, [pc, #440]	; (8009364 <tcp_input+0x294>)
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	4b6f      	ldr	r3, [pc, #444]	; (800936c <tcp_input+0x29c>)
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80091b6:	4b6d      	ldr	r3, [pc, #436]	; (800936c <tcp_input+0x29c>)
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7fd fe29 	bl	8006e14 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	895b      	ldrh	r3, [r3, #10]
 80091c8:	8a3a      	ldrh	r2, [r7, #16]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	f200 8361 	bhi.w	8009892 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4a64      	ldr	r2, [pc, #400]	; (8009368 <tcp_input+0x298>)
 80091d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	8a3a      	ldrh	r2, [r7, #16]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fd fe16 	bl	8006e14 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	891a      	ldrh	r2, [r3, #8]
 80091ec:	8a3b      	ldrh	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	895b      	ldrh	r3, [r3, #10]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <tcp_input+0x13a>
 80091fe:	4b54      	ldr	r3, [pc, #336]	; (8009350 <tcp_input+0x280>)
 8009200:	22df      	movs	r2, #223	; 0xdf
 8009202:	495c      	ldr	r1, [pc, #368]	; (8009374 <tcp_input+0x2a4>)
 8009204:	4854      	ldr	r0, [pc, #336]	; (8009358 <tcp_input+0x288>)
 8009206:	f009 f98d 	bl	8012524 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	891a      	ldrh	r2, [r3, #8]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	891b      	ldrh	r3, [r3, #8]
 8009214:	429a      	cmp	r2, r3
 8009216:	d005      	beq.n	8009224 <tcp_input+0x154>
 8009218:	4b4d      	ldr	r3, [pc, #308]	; (8009350 <tcp_input+0x280>)
 800921a:	22e0      	movs	r2, #224	; 0xe0
 800921c:	4956      	ldr	r1, [pc, #344]	; (8009378 <tcp_input+0x2a8>)
 800921e:	484e      	ldr	r0, [pc, #312]	; (8009358 <tcp_input+0x288>)
 8009220:	f009 f980 	bl	8012524 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009224:	4b4d      	ldr	r3, [pc, #308]	; (800935c <tcp_input+0x28c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	4a4b      	ldr	r2, [pc, #300]	; (800935c <tcp_input+0x28c>)
 800922e:	6814      	ldr	r4, [r2, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f7fc fbc1 	bl	80059b8 <lwip_htons>
 8009236:	4603      	mov	r3, r0
 8009238:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800923a:	4b48      	ldr	r3, [pc, #288]	; (800935c <tcp_input+0x28c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4a46      	ldr	r2, [pc, #280]	; (800935c <tcp_input+0x28c>)
 8009244:	6814      	ldr	r4, [r2, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f7fc fbb6 	bl	80059b8 <lwip_htons>
 800924c:	4603      	mov	r3, r0
 800924e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009250:	4b42      	ldr	r3, [pc, #264]	; (800935c <tcp_input+0x28c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	4a41      	ldr	r2, [pc, #260]	; (800935c <tcp_input+0x28c>)
 8009258:	6814      	ldr	r4, [r2, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7fc fbc1 	bl	80059e2 <lwip_htonl>
 8009260:	4603      	mov	r3, r0
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	4a45      	ldr	r2, [pc, #276]	; (800937c <tcp_input+0x2ac>)
 8009268:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800926a:	4b3c      	ldr	r3, [pc, #240]	; (800935c <tcp_input+0x28c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4a3a      	ldr	r2, [pc, #232]	; (800935c <tcp_input+0x28c>)
 8009272:	6814      	ldr	r4, [r2, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7fc fbb4 	bl	80059e2 <lwip_htonl>
 800927a:	4603      	mov	r3, r0
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	4a3f      	ldr	r2, [pc, #252]	; (8009380 <tcp_input+0x2b0>)
 8009282:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009284:	4b35      	ldr	r3, [pc, #212]	; (800935c <tcp_input+0x28c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	89db      	ldrh	r3, [r3, #14]
 800928a:	b29b      	uxth	r3, r3
 800928c:	4a33      	ldr	r2, [pc, #204]	; (800935c <tcp_input+0x28c>)
 800928e:	6814      	ldr	r4, [r2, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f7fc fb91 	bl	80059b8 <lwip_htons>
 8009296:	4603      	mov	r3, r0
 8009298:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800929a:	4b30      	ldr	r3, [pc, #192]	; (800935c <tcp_input+0x28c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	899b      	ldrh	r3, [r3, #12]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fc fb88 	bl	80059b8 <lwip_htons>
 80092a8:	4603      	mov	r3, r0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	4b34      	ldr	r3, [pc, #208]	; (8009384 <tcp_input+0x2b4>)
 80092b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	891a      	ldrh	r2, [r3, #8]
 80092ba:	4b33      	ldr	r3, [pc, #204]	; (8009388 <tcp_input+0x2b8>)
 80092bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80092be:	4b31      	ldr	r3, [pc, #196]	; (8009384 <tcp_input+0x2b4>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00c      	beq.n	80092e4 <tcp_input+0x214>
    tcplen++;
 80092ca:	4b2f      	ldr	r3, [pc, #188]	; (8009388 <tcp_input+0x2b8>)
 80092cc:	881b      	ldrh	r3, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <tcp_input+0x2b8>)
 80092d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	891a      	ldrh	r2, [r3, #8]
 80092da:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <tcp_input+0x2b8>)
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	f200 82d9 	bhi.w	8009896 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092e8:	4b28      	ldr	r3, [pc, #160]	; (800938c <tcp_input+0x2bc>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	e09d      	b.n	800942c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	7d1b      	ldrb	r3, [r3, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d105      	bne.n	8009304 <tcp_input+0x234>
 80092f8:	4b15      	ldr	r3, [pc, #84]	; (8009350 <tcp_input+0x280>)
 80092fa:	22fb      	movs	r2, #251	; 0xfb
 80092fc:	4924      	ldr	r1, [pc, #144]	; (8009390 <tcp_input+0x2c0>)
 80092fe:	4816      	ldr	r0, [pc, #88]	; (8009358 <tcp_input+0x288>)
 8009300:	f009 f910 	bl	8012524 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	7d1b      	ldrb	r3, [r3, #20]
 8009308:	2b0a      	cmp	r3, #10
 800930a:	d105      	bne.n	8009318 <tcp_input+0x248>
 800930c:	4b10      	ldr	r3, [pc, #64]	; (8009350 <tcp_input+0x280>)
 800930e:	22fc      	movs	r2, #252	; 0xfc
 8009310:	4920      	ldr	r1, [pc, #128]	; (8009394 <tcp_input+0x2c4>)
 8009312:	4811      	ldr	r0, [pc, #68]	; (8009358 <tcp_input+0x288>)
 8009314:	f009 f906 	bl	8012524 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	7d1b      	ldrb	r3, [r3, #20]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d105      	bne.n	800932c <tcp_input+0x25c>
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <tcp_input+0x280>)
 8009322:	22fd      	movs	r2, #253	; 0xfd
 8009324:	491c      	ldr	r1, [pc, #112]	; (8009398 <tcp_input+0x2c8>)
 8009326:	480c      	ldr	r0, [pc, #48]	; (8009358 <tcp_input+0x288>)
 8009328:	f009 f8fc 	bl	8012524 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	7a1b      	ldrb	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d033      	beq.n	800939c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	7a1a      	ldrb	r2, [r3, #8]
 8009338:	4b09      	ldr	r3, [pc, #36]	; (8009360 <tcp_input+0x290>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009340:	3301      	adds	r3, #1
 8009342:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009344:	429a      	cmp	r2, r3
 8009346:	d029      	beq.n	800939c <tcp_input+0x2cc>
      prev = pcb;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	61bb      	str	r3, [r7, #24]
      continue;
 800934c:	e06b      	b.n	8009426 <tcp_input+0x356>
 800934e:	bf00      	nop
 8009350:	08014890 	.word	0x08014890
 8009354:	080148c4 	.word	0x080148c4
 8009358:	080148dc 	.word	0x080148dc
 800935c:	200000e0 	.word	0x200000e0
 8009360:	20003428 	.word	0x20003428
 8009364:	200000e4 	.word	0x200000e4
 8009368:	200000e8 	.word	0x200000e8
 800936c:	200000e6 	.word	0x200000e6
 8009370:	08014904 	.word	0x08014904
 8009374:	08014914 	.word	0x08014914
 8009378:	08014920 	.word	0x08014920
 800937c:	200000f0 	.word	0x200000f0
 8009380:	200000f4 	.word	0x200000f4
 8009384:	200000fc 	.word	0x200000fc
 8009388:	200000fa 	.word	0x200000fa
 800938c:	2000696c 	.word	0x2000696c
 8009390:	08014940 	.word	0x08014940
 8009394:	08014968 	.word	0x08014968
 8009398:	08014994 	.word	0x08014994
    }

    if (pcb->remote_port == tcphdr->src &&
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	8b1a      	ldrh	r2, [r3, #24]
 80093a0:	4b94      	ldr	r3, [pc, #592]	; (80095f4 <tcp_input+0x524>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d13a      	bne.n	8009422 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	8ada      	ldrh	r2, [r3, #22]
 80093b0:	4b90      	ldr	r3, [pc, #576]	; (80095f4 <tcp_input+0x524>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d132      	bne.n	8009422 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	4b8d      	ldr	r3, [pc, #564]	; (80095f8 <tcp_input+0x528>)
 80093c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d12c      	bne.n	8009422 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	4b8a      	ldr	r3, [pc, #552]	; (80095f8 <tcp_input+0x528>)
 80093ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d126      	bne.n	8009422 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d106      	bne.n	80093ec <tcp_input+0x31c>
 80093de:	4b87      	ldr	r3, [pc, #540]	; (80095fc <tcp_input+0x52c>)
 80093e0:	f240 120d 	movw	r2, #269	; 0x10d
 80093e4:	4986      	ldr	r1, [pc, #536]	; (8009600 <tcp_input+0x530>)
 80093e6:	4887      	ldr	r0, [pc, #540]	; (8009604 <tcp_input+0x534>)
 80093e8:	f009 f89c 	bl	8012524 <iprintf>
      if (prev != NULL) {
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <tcp_input+0x338>
        prev->next = pcb->next;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80093fa:	4b83      	ldr	r3, [pc, #524]	; (8009608 <tcp_input+0x538>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009402:	4a81      	ldr	r2, [pc, #516]	; (8009608 <tcp_input+0x538>)
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	429a      	cmp	r2, r3
 8009410:	d111      	bne.n	8009436 <tcp_input+0x366>
 8009412:	4b7a      	ldr	r3, [pc, #488]	; (80095fc <tcp_input+0x52c>)
 8009414:	f240 1215 	movw	r2, #277	; 0x115
 8009418:	497c      	ldr	r1, [pc, #496]	; (800960c <tcp_input+0x53c>)
 800941a:	487a      	ldr	r0, [pc, #488]	; (8009604 <tcp_input+0x534>)
 800941c:	f009 f882 	bl	8012524 <iprintf>
      break;
 8009420:	e009      	b.n	8009436 <tcp_input+0x366>
    }
    prev = pcb;
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f47f af5e 	bne.w	80092f0 <tcp_input+0x220>
 8009434:	e000      	b.n	8009438 <tcp_input+0x368>
      break;
 8009436:	bf00      	nop
  }

  if (pcb == NULL) {
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f040 8095 	bne.w	800956a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009440:	4b73      	ldr	r3, [pc, #460]	; (8009610 <tcp_input+0x540>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	e03f      	b.n	80094c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	7d1b      	ldrb	r3, [r3, #20]
 800944c:	2b0a      	cmp	r3, #10
 800944e:	d006      	beq.n	800945e <tcp_input+0x38e>
 8009450:	4b6a      	ldr	r3, [pc, #424]	; (80095fc <tcp_input+0x52c>)
 8009452:	f240 121f 	movw	r2, #287	; 0x11f
 8009456:	496f      	ldr	r1, [pc, #444]	; (8009614 <tcp_input+0x544>)
 8009458:	486a      	ldr	r0, [pc, #424]	; (8009604 <tcp_input+0x534>)
 800945a:	f009 f863 	bl	8012524 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	7a1b      	ldrb	r3, [r3, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	7a1a      	ldrb	r2, [r3, #8]
 800946a:	4b63      	ldr	r3, [pc, #396]	; (80095f8 <tcp_input+0x528>)
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009472:	3301      	adds	r3, #1
 8009474:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009476:	429a      	cmp	r2, r3
 8009478:	d122      	bne.n	80094c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	8b1a      	ldrh	r2, [r3, #24]
 800947e:	4b5d      	ldr	r3, [pc, #372]	; (80095f4 <tcp_input+0x524>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	429a      	cmp	r2, r3
 8009488:	d11b      	bne.n	80094c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	8ada      	ldrh	r2, [r3, #22]
 800948e:	4b59      	ldr	r3, [pc, #356]	; (80095f4 <tcp_input+0x524>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	885b      	ldrh	r3, [r3, #2]
 8009494:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009496:	429a      	cmp	r2, r3
 8009498:	d113      	bne.n	80094c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	4b56      	ldr	r3, [pc, #344]	; (80095f8 <tcp_input+0x528>)
 80094a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d10d      	bne.n	80094c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b53      	ldr	r3, [pc, #332]	; (80095f8 <tcp_input+0x528>)
 80094ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d107      	bne.n	80094c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80094b2:	69f8      	ldr	r0, [r7, #28]
 80094b4:	f000 fb54 	bl	8009b60 <tcp_timewait_input>
        }
        pbuf_free(p);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7fd fd31 	bl	8006f20 <pbuf_free>
        return;
 80094be:	e1f0      	b.n	80098a2 <tcp_input+0x7d2>
        continue;
 80094c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1bc      	bne.n	8009448 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80094d2:	4b51      	ldr	r3, [pc, #324]	; (8009618 <tcp_input+0x548>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	e02a      	b.n	8009530 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	7a1b      	ldrb	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00c      	beq.n	80094fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	7a1a      	ldrb	r2, [r3, #8]
 80094e6:	4b44      	ldr	r3, [pc, #272]	; (80095f8 <tcp_input+0x528>)
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094ee:	3301      	adds	r3, #1
 80094f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d002      	beq.n	80094fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	61bb      	str	r3, [r7, #24]
        continue;
 80094fa:	e016      	b.n	800952a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	8ada      	ldrh	r2, [r3, #22]
 8009500:	4b3c      	ldr	r3, [pc, #240]	; (80095f4 <tcp_input+0x524>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	b29b      	uxth	r3, r3
 8009508:	429a      	cmp	r2, r3
 800950a:	d10c      	bne.n	8009526 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	4b39      	ldr	r3, [pc, #228]	; (80095f8 <tcp_input+0x528>)
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	429a      	cmp	r2, r3
 8009516:	d00f      	beq.n	8009538 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00d      	beq.n	800953a <tcp_input+0x46a>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1d1      	bne.n	80094da <tcp_input+0x40a>
 8009536:	e000      	b.n	800953a <tcp_input+0x46a>
            break;
 8009538:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d014      	beq.n	800956a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800954e:	4b32      	ldr	r3, [pc, #200]	; (8009618 <tcp_input+0x548>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009556:	4a30      	ldr	r2, [pc, #192]	; (8009618 <tcp_input+0x548>)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800955c:	6978      	ldr	r0, [r7, #20]
 800955e:	f000 fa01 	bl	8009964 <tcp_listen_input>
      }
      pbuf_free(p);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fd fcdc 	bl	8006f20 <pbuf_free>
      return;
 8009568:	e19b      	b.n	80098a2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8160 	beq.w	8009832 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009572:	4b2a      	ldr	r3, [pc, #168]	; (800961c <tcp_input+0x54c>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	891a      	ldrh	r2, [r3, #8]
 800957c:	4b27      	ldr	r3, [pc, #156]	; (800961c <tcp_input+0x54c>)
 800957e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009580:	4a26      	ldr	r2, [pc, #152]	; (800961c <tcp_input+0x54c>)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009586:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <tcp_input+0x524>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a24      	ldr	r2, [pc, #144]	; (800961c <tcp_input+0x54c>)
 800958c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <tcp_input+0x550>)
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009594:	4b23      	ldr	r3, [pc, #140]	; (8009624 <tcp_input+0x554>)
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800959a:	4b23      	ldr	r3, [pc, #140]	; (8009628 <tcp_input+0x558>)
 800959c:	2200      	movs	r2, #0
 800959e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80095a0:	4b22      	ldr	r3, [pc, #136]	; (800962c <tcp_input+0x55c>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0308 	and.w	r3, r3, #8
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d006      	beq.n	80095ba <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7b5b      	ldrb	r3, [r3, #13]
 80095b0:	f043 0301 	orr.w	r3, r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d038      	beq.n	8009634 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80095c2:	69f8      	ldr	r0, [r7, #28]
 80095c4:	f7ff f858 	bl	8008678 <tcp_process_refused_data>
 80095c8:	4603      	mov	r3, r0
 80095ca:	f113 0f0d 	cmn.w	r3, #13
 80095ce:	d007      	beq.n	80095e0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d02d      	beq.n	8009634 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80095d8:	4b15      	ldr	r3, [pc, #84]	; (8009630 <tcp_input+0x560>)
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d029      	beq.n	8009634 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f040 8104 	bne.w	80097f2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80095ea:	69f8      	ldr	r0, [r7, #28]
 80095ec:	f003 fe16 	bl	800d21c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80095f0:	e0ff      	b.n	80097f2 <tcp_input+0x722>
 80095f2:	bf00      	nop
 80095f4:	200000e0 	.word	0x200000e0
 80095f8:	20003428 	.word	0x20003428
 80095fc:	08014890 	.word	0x08014890
 8009600:	080149bc 	.word	0x080149bc
 8009604:	080148dc 	.word	0x080148dc
 8009608:	2000696c 	.word	0x2000696c
 800960c:	080149e8 	.word	0x080149e8
 8009610:	2000697c 	.word	0x2000697c
 8009614:	08014a14 	.word	0x08014a14
 8009618:	20006974 	.word	0x20006974
 800961c:	200000d0 	.word	0x200000d0
 8009620:	20000100 	.word	0x20000100
 8009624:	200000fd 	.word	0x200000fd
 8009628:	200000f8 	.word	0x200000f8
 800962c:	200000fc 	.word	0x200000fc
 8009630:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8009634:	4a9c      	ldr	r2, [pc, #624]	; (80098a8 <tcp_input+0x7d8>)
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800963a:	69f8      	ldr	r0, [r7, #28]
 800963c:	f000 fb0a 	bl	8009c54 <tcp_process>
 8009640:	4603      	mov	r3, r0
 8009642:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009648:	f113 0f0d 	cmn.w	r3, #13
 800964c:	f000 80d3 	beq.w	80097f6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009650:	4b96      	ldr	r3, [pc, #600]	; (80098ac <tcp_input+0x7dc>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d015      	beq.n	8009688 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <tcp_input+0x5a8>
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	6912      	ldr	r2, [r2, #16]
 8009670:	f06f 010d 	mvn.w	r1, #13
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009678:	69f9      	ldr	r1, [r7, #28]
 800967a:	488d      	ldr	r0, [pc, #564]	; (80098b0 <tcp_input+0x7e0>)
 800967c:	f7ff fbb0 	bl	8008de0 <tcp_pcb_remove>
        tcp_free(pcb);
 8009680:	69f8      	ldr	r0, [r7, #28]
 8009682:	f7fd fefd 	bl	8007480 <tcp_free>
 8009686:	e0c1      	b.n	800980c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800968c:	4b89      	ldr	r3, [pc, #548]	; (80098b4 <tcp_input+0x7e4>)
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d01d      	beq.n	80096d0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009694:	4b87      	ldr	r3, [pc, #540]	; (80098b4 <tcp_input+0x7e4>)
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00a      	beq.n	80096ba <tcp_input+0x5ea>
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	6910      	ldr	r0, [r2, #16]
 80096ae:	89fa      	ldrh	r2, [r7, #14]
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	4798      	blx	r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	74fb      	strb	r3, [r7, #19]
 80096b8:	e001      	b.n	80096be <tcp_input+0x5ee>
 80096ba:	2300      	movs	r3, #0
 80096bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80096be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096c2:	f113 0f0d 	cmn.w	r3, #13
 80096c6:	f000 8098 	beq.w	80097fa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80096ca:	4b7a      	ldr	r3, [pc, #488]	; (80098b4 <tcp_input+0x7e4>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80096d0:	69f8      	ldr	r0, [r7, #28]
 80096d2:	f000 f907 	bl	80098e4 <tcp_input_delayed_close>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f040 8090 	bne.w	80097fe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80096de:	4b76      	ldr	r3, [pc, #472]	; (80098b8 <tcp_input+0x7e8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d041      	beq.n	800976a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d006      	beq.n	80096fc <tcp_input+0x62c>
 80096ee:	4b73      	ldr	r3, [pc, #460]	; (80098bc <tcp_input+0x7ec>)
 80096f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80096f4:	4972      	ldr	r1, [pc, #456]	; (80098c0 <tcp_input+0x7f0>)
 80096f6:	4873      	ldr	r0, [pc, #460]	; (80098c4 <tcp_input+0x7f4>)
 80096f8:	f008 ff14 	bl	8012524 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	8b5b      	ldrh	r3, [r3, #26]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009708:	4b6b      	ldr	r3, [pc, #428]	; (80098b8 <tcp_input+0x7e8>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd fc07 	bl	8006f20 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009712:	69f8      	ldr	r0, [r7, #28]
 8009714:	f7fe f99c 	bl	8007a50 <tcp_abort>
            goto aborted;
 8009718:	e078      	b.n	800980c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00c      	beq.n	800973e <tcp_input+0x66e>
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	6918      	ldr	r0, [r3, #16]
 800972e:	4b62      	ldr	r3, [pc, #392]	; (80098b8 <tcp_input+0x7e8>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	69f9      	ldr	r1, [r7, #28]
 8009736:	47a0      	blx	r4
 8009738:	4603      	mov	r3, r0
 800973a:	74fb      	strb	r3, [r7, #19]
 800973c:	e008      	b.n	8009750 <tcp_input+0x680>
 800973e:	4b5e      	ldr	r3, [pc, #376]	; (80098b8 <tcp_input+0x7e8>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	69f9      	ldr	r1, [r7, #28]
 8009746:	2000      	movs	r0, #0
 8009748:	f7ff f88a 	bl	8008860 <tcp_recv_null>
 800974c:	4603      	mov	r3, r0
 800974e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009754:	f113 0f0d 	cmn.w	r3, #13
 8009758:	d053      	beq.n	8009802 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800975a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009762:	4b55      	ldr	r3, [pc, #340]	; (80098b8 <tcp_input+0x7e8>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800976a:	4b50      	ldr	r3, [pc, #320]	; (80098ac <tcp_input+0x7dc>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d030      	beq.n	80097d8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800977a:	2b00      	cmp	r3, #0
 800977c:	d009      	beq.n	8009792 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009782:	7b5a      	ldrb	r2, [r3, #13]
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009788:	f042 0220 	orr.w	r2, r2, #32
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	735a      	strb	r2, [r3, #13]
 8009790:	e022      	b.n	80097d8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009796:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800979a:	d005      	beq.n	80097a8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a0:	3301      	adds	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <tcp_input+0x6fa>
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	6918      	ldr	r0, [r3, #16]
 80097bc:	2300      	movs	r3, #0
 80097be:	2200      	movs	r2, #0
 80097c0:	69f9      	ldr	r1, [r7, #28]
 80097c2:	47a0      	blx	r4
 80097c4:	4603      	mov	r3, r0
 80097c6:	74fb      	strb	r3, [r7, #19]
 80097c8:	e001      	b.n	80097ce <tcp_input+0x6fe>
 80097ca:	2300      	movs	r3, #0
 80097cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80097ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097d2:	f113 0f0d 	cmn.w	r3, #13
 80097d6:	d016      	beq.n	8009806 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80097d8:	4b33      	ldr	r3, [pc, #204]	; (80098a8 <tcp_input+0x7d8>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80097de:	69f8      	ldr	r0, [r7, #28]
 80097e0:	f000 f880 	bl	80098e4 <tcp_input_delayed_close>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10f      	bne.n	800980a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80097ea:	69f8      	ldr	r0, [r7, #28]
 80097ec:	f002 ff10 	bl	800c610 <tcp_output>
 80097f0:	e00c      	b.n	800980c <tcp_input+0x73c>
        goto aborted;
 80097f2:	bf00      	nop
 80097f4:	e00a      	b.n	800980c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80097f6:	bf00      	nop
 80097f8:	e008      	b.n	800980c <tcp_input+0x73c>
              goto aborted;
 80097fa:	bf00      	nop
 80097fc:	e006      	b.n	800980c <tcp_input+0x73c>
          goto aborted;
 80097fe:	bf00      	nop
 8009800:	e004      	b.n	800980c <tcp_input+0x73c>
            goto aborted;
 8009802:	bf00      	nop
 8009804:	e002      	b.n	800980c <tcp_input+0x73c>
              goto aborted;
 8009806:	bf00      	nop
 8009808:	e000      	b.n	800980c <tcp_input+0x73c>
          goto aborted;
 800980a:	bf00      	nop
    tcp_input_pcb = NULL;
 800980c:	4b26      	ldr	r3, [pc, #152]	; (80098a8 <tcp_input+0x7d8>)
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009812:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <tcp_input+0x7e8>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009818:	4b2b      	ldr	r3, [pc, #172]	; (80098c8 <tcp_input+0x7f8>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d03f      	beq.n	80098a0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009820:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <tcp_input+0x7f8>)
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd fb7b 	bl	8006f20 <pbuf_free>
      inseg.p = NULL;
 800982a:	4b27      	ldr	r3, [pc, #156]	; (80098c8 <tcp_input+0x7f8>)
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009830:	e036      	b.n	80098a0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009832:	4b26      	ldr	r3, [pc, #152]	; (80098cc <tcp_input+0x7fc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	899b      	ldrh	r3, [r3, #12]
 8009838:	b29b      	uxth	r3, r3
 800983a:	4618      	mov	r0, r3
 800983c:	f7fc f8bc 	bl	80059b8 <lwip_htons>
 8009840:	4603      	mov	r3, r0
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d118      	bne.n	800987e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <tcp_input+0x800>)
 800984e:	6819      	ldr	r1, [r3, #0]
 8009850:	4b20      	ldr	r3, [pc, #128]	; (80098d4 <tcp_input+0x804>)
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	4b20      	ldr	r3, [pc, #128]	; (80098d8 <tcp_input+0x808>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800985c:	4b1b      	ldr	r3, [pc, #108]	; (80098cc <tcp_input+0x7fc>)
 800985e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009860:	885b      	ldrh	r3, [r3, #2]
 8009862:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009864:	4a19      	ldr	r2, [pc, #100]	; (80098cc <tcp_input+0x7fc>)
 8009866:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009868:	8812      	ldrh	r2, [r2, #0]
 800986a:	b292      	uxth	r2, r2
 800986c:	9202      	str	r2, [sp, #8]
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <tcp_input+0x80c>)
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4b1a      	ldr	r3, [pc, #104]	; (80098e0 <tcp_input+0x810>)
 8009876:	4602      	mov	r2, r0
 8009878:	2000      	movs	r0, #0
 800987a:	f003 fc7d 	bl	800d178 <tcp_rst>
    pbuf_free(p);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fd fb4e 	bl	8006f20 <pbuf_free>
  return;
 8009884:	e00c      	b.n	80098a0 <tcp_input+0x7d0>
    goto dropped;
 8009886:	bf00      	nop
 8009888:	e006      	b.n	8009898 <tcp_input+0x7c8>
    goto dropped;
 800988a:	bf00      	nop
 800988c:	e004      	b.n	8009898 <tcp_input+0x7c8>
    goto dropped;
 800988e:	bf00      	nop
 8009890:	e002      	b.n	8009898 <tcp_input+0x7c8>
      goto dropped;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <tcp_input+0x7c8>
      goto dropped;
 8009896:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7fd fb41 	bl	8006f20 <pbuf_free>
 800989e:	e000      	b.n	80098a2 <tcp_input+0x7d2>
  return;
 80098a0:	bf00      	nop
}
 80098a2:	3724      	adds	r7, #36	; 0x24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd90      	pop	{r4, r7, pc}
 80098a8:	20006980 	.word	0x20006980
 80098ac:	200000fd 	.word	0x200000fd
 80098b0:	2000696c 	.word	0x2000696c
 80098b4:	200000f8 	.word	0x200000f8
 80098b8:	20000100 	.word	0x20000100
 80098bc:	08014890 	.word	0x08014890
 80098c0:	08014a44 	.word	0x08014a44
 80098c4:	080148dc 	.word	0x080148dc
 80098c8:	200000d0 	.word	0x200000d0
 80098cc:	200000e0 	.word	0x200000e0
 80098d0:	200000f4 	.word	0x200000f4
 80098d4:	200000fa 	.word	0x200000fa
 80098d8:	200000f0 	.word	0x200000f0
 80098dc:	20003438 	.word	0x20003438
 80098e0:	2000343c 	.word	0x2000343c

080098e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <tcp_input_delayed_close+0x1c>
 80098f2:	4b17      	ldr	r3, [pc, #92]	; (8009950 <tcp_input_delayed_close+0x6c>)
 80098f4:	f240 225a 	movw	r2, #602	; 0x25a
 80098f8:	4916      	ldr	r1, [pc, #88]	; (8009954 <tcp_input_delayed_close+0x70>)
 80098fa:	4817      	ldr	r0, [pc, #92]	; (8009958 <tcp_input_delayed_close+0x74>)
 80098fc:	f008 fe12 	bl	8012524 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009900:	4b16      	ldr	r3, [pc, #88]	; (800995c <tcp_input_delayed_close+0x78>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01c      	beq.n	8009946 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	8b5b      	ldrh	r3, [r3, #26]
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10d      	bne.n	8009934 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <tcp_input_delayed_close+0x50>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6912      	ldr	r2, [r2, #16]
 800992c:	f06f 010e 	mvn.w	r1, #14
 8009930:	4610      	mov	r0, r2
 8009932:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	480a      	ldr	r0, [pc, #40]	; (8009960 <tcp_input_delayed_close+0x7c>)
 8009938:	f7ff fa52 	bl	8008de0 <tcp_pcb_remove>
    tcp_free(pcb);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7fd fd9f 	bl	8007480 <tcp_free>
    return 1;
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	08014890 	.word	0x08014890
 8009954:	08014a60 	.word	0x08014a60
 8009958:	080148dc 	.word	0x080148dc
 800995c:	200000fd 	.word	0x200000fd
 8009960:	2000696c 	.word	0x2000696c

08009964 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b08b      	sub	sp, #44	; 0x2c
 8009968:	af04      	add	r7, sp, #16
 800996a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800996c:	4b6f      	ldr	r3, [pc, #444]	; (8009b2c <tcp_listen_input+0x1c8>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	f040 80d2 	bne.w	8009b1e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d106      	bne.n	800998e <tcp_listen_input+0x2a>
 8009980:	4b6b      	ldr	r3, [pc, #428]	; (8009b30 <tcp_listen_input+0x1cc>)
 8009982:	f240 2281 	movw	r2, #641	; 0x281
 8009986:	496b      	ldr	r1, [pc, #428]	; (8009b34 <tcp_listen_input+0x1d0>)
 8009988:	486b      	ldr	r0, [pc, #428]	; (8009b38 <tcp_listen_input+0x1d4>)
 800998a:	f008 fdcb 	bl	8012524 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800998e:	4b67      	ldr	r3, [pc, #412]	; (8009b2c <tcp_listen_input+0x1c8>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	d019      	beq.n	80099ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800999a:	4b68      	ldr	r3, [pc, #416]	; (8009b3c <tcp_listen_input+0x1d8>)
 800999c:	6819      	ldr	r1, [r3, #0]
 800999e:	4b68      	ldr	r3, [pc, #416]	; (8009b40 <tcp_listen_input+0x1dc>)
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	4b67      	ldr	r3, [pc, #412]	; (8009b44 <tcp_listen_input+0x1e0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099aa:	4b67      	ldr	r3, [pc, #412]	; (8009b48 <tcp_listen_input+0x1e4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099ae:	885b      	ldrh	r3, [r3, #2]
 80099b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099b2:	4a65      	ldr	r2, [pc, #404]	; (8009b48 <tcp_listen_input+0x1e4>)
 80099b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	b292      	uxth	r2, r2
 80099ba:	9202      	str	r2, [sp, #8]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	4b63      	ldr	r3, [pc, #396]	; (8009b4c <tcp_listen_input+0x1e8>)
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	4b63      	ldr	r3, [pc, #396]	; (8009b50 <tcp_listen_input+0x1ec>)
 80099c4:	4602      	mov	r2, r0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f003 fbd6 	bl	800d178 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80099cc:	e0a9      	b.n	8009b22 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80099ce:	4b57      	ldr	r3, [pc, #348]	; (8009b2c <tcp_listen_input+0x1c8>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 80a3 	beq.w	8009b22 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7d5b      	ldrb	r3, [r3, #21]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff f861 	bl	8008aa8 <tcp_alloc>
 80099e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d111      	bne.n	8009a12 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00a      	beq.n	8009a0c <tcp_listen_input+0xa8>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6910      	ldr	r0, [r2, #16]
 80099fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009a02:	2100      	movs	r1, #0
 8009a04:	4798      	blx	r3
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]
      return;
 8009a0a:	e08b      	b.n	8009b24 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009a0c:	23f0      	movs	r3, #240	; 0xf0
 8009a0e:	73bb      	strb	r3, [r7, #14]
      return;
 8009a10:	e088      	b.n	8009b24 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009a12:	4b50      	ldr	r3, [pc, #320]	; (8009b54 <tcp_listen_input+0x1f0>)
 8009a14:	695a      	ldr	r2, [r3, #20]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009a1a:	4b4e      	ldr	r3, [pc, #312]	; (8009b54 <tcp_listen_input+0x1f0>)
 8009a1c:	691a      	ldr	r2, [r3, #16]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8ada      	ldrh	r2, [r3, #22]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009a2a:	4b47      	ldr	r3, [pc, #284]	; (8009b48 <tcp_listen_input+0x1e4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2203      	movs	r2, #3
 8009a3a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009a3c:	4b41      	ldr	r3, [pc, #260]	; (8009b44 <tcp_listen_input+0x1e0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009a4e:	6978      	ldr	r0, [r7, #20]
 8009a50:	f7ff fa5a 	bl	8008f08 <tcp_next_iss>
 8009a54:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009a6e:	4b35      	ldr	r3, [pc, #212]	; (8009b44 <tcp_listen_input+0x1e0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	7a5b      	ldrb	r3, [r3, #9]
 8009a8a:	f003 030c 	and.w	r3, r3, #12
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7a1a      	ldrb	r2, [r3, #8]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009a9c:	4b2e      	ldr	r3, [pc, #184]	; (8009b58 <tcp_listen_input+0x1f4>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	60da      	str	r2, [r3, #12]
 8009aa4:	4a2c      	ldr	r2, [pc, #176]	; (8009b58 <tcp_listen_input+0x1f4>)
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	f003 fd27 	bl	800d4fc <tcp_timer_needed>
 8009aae:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <tcp_listen_input+0x1f8>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009ab4:	6978      	ldr	r0, [r7, #20]
 8009ab6:	f001 fd8d 	bl	800b5d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009aba:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <tcp_listen_input+0x1e4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	89db      	ldrh	r3, [r3, #14]
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f005 f8eb 	bl	800ecb8 <ip4_route>
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff fa32 	bl	8008f54 <tcp_eff_send_mss_netif>
 8009af0:	4603      	mov	r3, r0
 8009af2:	461a      	mov	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009af8:	2112      	movs	r1, #18
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	f002 fc9a 	bl	800c434 <tcp_enqueue_flags>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6978      	ldr	r0, [r7, #20]
 8009b10:	f7fd fee0 	bl	80078d4 <tcp_abandon>
      return;
 8009b14:	e006      	b.n	8009b24 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009b16:	6978      	ldr	r0, [r7, #20]
 8009b18:	f002 fd7a 	bl	800c610 <tcp_output>
  return;
 8009b1c:	e001      	b.n	8009b22 <tcp_listen_input+0x1be>
    return;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <tcp_listen_input+0x1c0>
  return;
 8009b22:	bf00      	nop
}
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd90      	pop	{r4, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200000fc 	.word	0x200000fc
 8009b30:	08014890 	.word	0x08014890
 8009b34:	08014a88 	.word	0x08014a88
 8009b38:	080148dc 	.word	0x080148dc
 8009b3c:	200000f4 	.word	0x200000f4
 8009b40:	200000fa 	.word	0x200000fa
 8009b44:	200000f0 	.word	0x200000f0
 8009b48:	200000e0 	.word	0x200000e0
 8009b4c:	20003438 	.word	0x20003438
 8009b50:	2000343c 	.word	0x2000343c
 8009b54:	20003428 	.word	0x20003428
 8009b58:	2000696c 	.word	0x2000696c
 8009b5c:	20006968 	.word	0x20006968

08009b60 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af04      	add	r7, sp, #16
 8009b66:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009b68:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <tcp_timewait_input+0xc8>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d153      	bne.n	8009c1c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <tcp_timewait_input+0x28>
 8009b7a:	4b2c      	ldr	r3, [pc, #176]	; (8009c2c <tcp_timewait_input+0xcc>)
 8009b7c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009b80:	492b      	ldr	r1, [pc, #172]	; (8009c30 <tcp_timewait_input+0xd0>)
 8009b82:	482c      	ldr	r0, [pc, #176]	; (8009c34 <tcp_timewait_input+0xd4>)
 8009b84:	f008 fcce 	bl	8012524 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009b88:	4b27      	ldr	r3, [pc, #156]	; (8009c28 <tcp_timewait_input+0xc8>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d02a      	beq.n	8009bea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009b94:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <tcp_timewait_input+0xd8>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	db2d      	blt.n	8009bfe <tcp_timewait_input+0x9e>
 8009ba2:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <tcp_timewait_input+0xd8>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bae:	440b      	add	r3, r1
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc23      	bgt.n	8009bfe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb6:	4b21      	ldr	r3, [pc, #132]	; (8009c3c <tcp_timewait_input+0xdc>)
 8009bb8:	6819      	ldr	r1, [r3, #0]
 8009bba:	4b21      	ldr	r3, [pc, #132]	; (8009c40 <tcp_timewait_input+0xe0>)
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <tcp_timewait_input+0xd8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <tcp_timewait_input+0xe4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <tcp_timewait_input+0xe4>)
 8009bd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bd2:	8812      	ldrh	r2, [r2, #0]
 8009bd4:	b292      	uxth	r2, r2
 8009bd6:	9202      	str	r2, [sp, #8]
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <tcp_timewait_input+0xe8>)
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <tcp_timewait_input+0xec>)
 8009be0:	4602      	mov	r2, r0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f003 fac8 	bl	800d178 <tcp_rst>
      return;
 8009be8:	e01b      	b.n	8009c22 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <tcp_timewait_input+0xc8>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009bf6:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <tcp_timewait_input+0xf0>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009bfe:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <tcp_timewait_input+0xe0>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	8b5b      	ldrh	r3, [r3, #26]
 8009c0a:	f043 0302 	orr.w	r3, r3, #2
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f002 fcfb 	bl	800c610 <tcp_output>
  }
  return;
 8009c1a:	e001      	b.n	8009c20 <tcp_timewait_input+0xc0>
    return;
 8009c1c:	bf00      	nop
 8009c1e:	e000      	b.n	8009c22 <tcp_timewait_input+0xc2>
  return;
 8009c20:	bf00      	nop
}
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	200000fc 	.word	0x200000fc
 8009c2c:	08014890 	.word	0x08014890
 8009c30:	08014aa8 	.word	0x08014aa8
 8009c34:	080148dc 	.word	0x080148dc
 8009c38:	200000f0 	.word	0x200000f0
 8009c3c:	200000f4 	.word	0x200000f4
 8009c40:	200000fa 	.word	0x200000fa
 8009c44:	200000e0 	.word	0x200000e0
 8009c48:	20003438 	.word	0x20003438
 8009c4c:	2000343c 	.word	0x2000343c
 8009c50:	20006970 	.word	0x20006970

08009c54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009c54:	b590      	push	{r4, r7, lr}
 8009c56:	b08d      	sub	sp, #52	; 0x34
 8009c58:	af04      	add	r7, sp, #16
 8009c5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <tcp_process+0x24>
 8009c6a:	4ba5      	ldr	r3, [pc, #660]	; (8009f00 <tcp_process+0x2ac>)
 8009c6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009c70:	49a4      	ldr	r1, [pc, #656]	; (8009f04 <tcp_process+0x2b0>)
 8009c72:	48a5      	ldr	r0, [pc, #660]	; (8009f08 <tcp_process+0x2b4>)
 8009c74:	f008 fc56 	bl	8012524 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009c78:	4ba4      	ldr	r3, [pc, #656]	; (8009f0c <tcp_process+0x2b8>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d04e      	beq.n	8009d22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7d1b      	ldrb	r3, [r3, #20]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d108      	bne.n	8009c9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c90:	4b9f      	ldr	r3, [pc, #636]	; (8009f10 <tcp_process+0x2bc>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d123      	bne.n	8009ce0 <tcp_process+0x8c>
        acceptable = 1;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	76fb      	strb	r3, [r7, #27]
 8009c9c:	e020      	b.n	8009ce0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca2:	4b9c      	ldr	r3, [pc, #624]	; (8009f14 <tcp_process+0x2c0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d102      	bne.n	8009cb0 <tcp_process+0x5c>
        acceptable = 1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	76fb      	strb	r3, [r7, #27]
 8009cae:	e017      	b.n	8009ce0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009cb0:	4b98      	ldr	r3, [pc, #608]	; (8009f14 <tcp_process+0x2c0>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	db10      	blt.n	8009ce0 <tcp_process+0x8c>
 8009cbe:	4b95      	ldr	r3, [pc, #596]	; (8009f14 <tcp_process+0x2c0>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cca:	440b      	add	r3, r1
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dc06      	bgt.n	8009ce0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8b5b      	ldrh	r3, [r3, #26]
 8009cd6:	f043 0302 	orr.w	r3, r3, #2
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009ce0:	7efb      	ldrb	r3, [r7, #27]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01b      	beq.n	8009d1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7d1b      	ldrb	r3, [r3, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <tcp_process+0xa8>
 8009cee:	4b84      	ldr	r3, [pc, #528]	; (8009f00 <tcp_process+0x2ac>)
 8009cf0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009cf4:	4988      	ldr	r1, [pc, #544]	; (8009f18 <tcp_process+0x2c4>)
 8009cf6:	4884      	ldr	r0, [pc, #528]	; (8009f08 <tcp_process+0x2b4>)
 8009cf8:	f008 fc14 	bl	8012524 <iprintf>
      recv_flags |= TF_RESET;
 8009cfc:	4b87      	ldr	r3, [pc, #540]	; (8009f1c <tcp_process+0x2c8>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f043 0308 	orr.w	r3, r3, #8
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b85      	ldr	r3, [pc, #532]	; (8009f1c <tcp_process+0x2c8>)
 8009d08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8b5b      	ldrh	r3, [r3, #26]
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009d18:	f06f 030d 	mvn.w	r3, #13
 8009d1c:	e37a      	b.n	800a414 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e378      	b.n	800a414 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009d22:	4b7a      	ldr	r3, [pc, #488]	; (8009f0c <tcp_process+0x2b8>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <tcp_process+0xfc>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7d1b      	ldrb	r3, [r3, #20]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d00c      	beq.n	8009d50 <tcp_process+0xfc>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7d1b      	ldrb	r3, [r3, #20]
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d008      	beq.n	8009d50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	8b5b      	ldrh	r3, [r3, #26]
 8009d42:	f043 0302 	orr.w	r3, r3, #2
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e361      	b.n	800a414 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	8b5b      	ldrh	r3, [r3, #26]
 8009d54:	f003 0310 	and.w	r3, r3, #16
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009d5c:	4b70      	ldr	r3, [pc, #448]	; (8009f20 <tcp_process+0x2cc>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 fc2d 	bl	800b5d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7d1b      	ldrb	r3, [r3, #20]
 8009d7e:	3b02      	subs	r3, #2
 8009d80:	2b07      	cmp	r3, #7
 8009d82:	f200 8337 	bhi.w	800a3f4 <tcp_process+0x7a0>
 8009d86:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <tcp_process+0x138>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009dad 	.word	0x08009dad
 8009d90:	08009fdd 	.word	0x08009fdd
 8009d94:	0800a155 	.word	0x0800a155
 8009d98:	0800a17f 	.word	0x0800a17f
 8009d9c:	0800a2a3 	.word	0x0800a2a3
 8009da0:	0800a155 	.word	0x0800a155
 8009da4:	0800a32f 	.word	0x0800a32f
 8009da8:	0800a3bf 	.word	0x0800a3bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009dac:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <tcp_process+0x2b8>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80e4 	beq.w	8009f82 <tcp_process+0x32e>
 8009dba:	4b54      	ldr	r3, [pc, #336]	; (8009f0c <tcp_process+0x2b8>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 80dd 	beq.w	8009f82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <tcp_process+0x2bc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	f040 80d5 	bne.w	8009f82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009dd8:	4b4e      	ldr	r3, [pc, #312]	; (8009f14 <tcp_process+0x2c0>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009dea:	4b49      	ldr	r3, [pc, #292]	; (8009f10 <tcp_process+0x2bc>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009df2:	4b4c      	ldr	r3, [pc, #304]	; (8009f24 <tcp_process+0x2d0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	89db      	ldrh	r3, [r3, #14]
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009e0c:	4b41      	ldr	r3, [pc, #260]	; (8009f14 <tcp_process+0x2c0>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2204      	movs	r2, #4
 8009e1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3304      	adds	r3, #4
 8009e24:	4618      	mov	r0, r3
 8009e26:	f004 ff47 	bl	800ecb8 <ip4_route>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	461a      	mov	r2, r3
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff f88e 	bl	8008f54 <tcp_eff_send_mss_netif>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e44:	009a      	lsls	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf38      	it	cc
 8009e54:	460b      	movcc	r3, r1
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d204      	bcs.n	8009e64 <tcp_process+0x210>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	e00d      	b.n	8009e80 <tcp_process+0x22c>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	f241 121c 	movw	r2, #4380	; 0x111c
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d904      	bls.n	8009e7c <tcp_process+0x228>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	e001      	b.n	8009e80 <tcp_process+0x22c>
 8009e7c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <tcp_process+0x24a>
 8009e90:	4b1b      	ldr	r3, [pc, #108]	; (8009f00 <tcp_process+0x2ac>)
 8009e92:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009e96:	4924      	ldr	r1, [pc, #144]	; (8009f28 <tcp_process+0x2d4>)
 8009e98:	481b      	ldr	r0, [pc, #108]	; (8009f08 <tcp_process+0x2b4>)
 8009e9a:	f008 fb43 	bl	8012524 <iprintf>
        --pcb->snd_queuelen;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d111      	bne.n	8009ede <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ebe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <tcp_process+0x280>
 8009ec6:	4b0e      	ldr	r3, [pc, #56]	; (8009f00 <tcp_process+0x2ac>)
 8009ec8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009ecc:	4917      	ldr	r1, [pc, #92]	; (8009f2c <tcp_process+0x2d8>)
 8009ece:	480e      	ldr	r0, [pc, #56]	; (8009f08 <tcp_process+0x2b4>)
 8009ed0:	f008 fb28 	bl	8012524 <iprintf>
          pcb->unsent = rseg->next;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	66da      	str	r2, [r3, #108]	; 0x6c
 8009edc:	e003      	b.n	8009ee6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009ee6:	69f8      	ldr	r0, [r7, #28]
 8009ee8:	f7fe fc57 	bl	800879a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11d      	bne.n	8009f30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009efa:	861a      	strh	r2, [r3, #48]	; 0x30
 8009efc:	e01f      	b.n	8009f3e <tcp_process+0x2ea>
 8009efe:	bf00      	nop
 8009f00:	08014890 	.word	0x08014890
 8009f04:	08014ac8 	.word	0x08014ac8
 8009f08:	080148dc 	.word	0x080148dc
 8009f0c:	200000fc 	.word	0x200000fc
 8009f10:	200000f4 	.word	0x200000f4
 8009f14:	200000f0 	.word	0x200000f0
 8009f18:	08014ae4 	.word	0x08014ae4
 8009f1c:	200000fd 	.word	0x200000fd
 8009f20:	20006970 	.word	0x20006970
 8009f24:	200000e0 	.word	0x200000e0
 8009f28:	08014b04 	.word	0x08014b04
 8009f2c:	08014b1c 	.word	0x08014b1c
        } else {
          pcb->rtime = 0;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <tcp_process+0x30a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6910      	ldr	r0, [r2, #16]
 8009f52:	2200      	movs	r2, #0
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4798      	blx	r3
 8009f58:	4603      	mov	r3, r0
 8009f5a:	76bb      	strb	r3, [r7, #26]
 8009f5c:	e001      	b.n	8009f62 <tcp_process+0x30e>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009f62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009f66:	f113 0f0d 	cmn.w	r3, #13
 8009f6a:	d102      	bne.n	8009f72 <tcp_process+0x31e>
          return ERR_ABRT;
 8009f6c:	f06f 030c 	mvn.w	r3, #12
 8009f70:	e250      	b.n	800a414 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	8b5b      	ldrh	r3, [r3, #26]
 8009f76:	f043 0302 	orr.w	r3, r3, #2
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009f80:	e23a      	b.n	800a3f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009f82:	4b9d      	ldr	r3, [pc, #628]	; (800a1f8 <tcp_process+0x5a4>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8234 	beq.w	800a3f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f90:	4b9a      	ldr	r3, [pc, #616]	; (800a1fc <tcp_process+0x5a8>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	4b9a      	ldr	r3, [pc, #616]	; (800a200 <tcp_process+0x5ac>)
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b9a      	ldr	r3, [pc, #616]	; (800a204 <tcp_process+0x5b0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fa0:	4b99      	ldr	r3, [pc, #612]	; (800a208 <tcp_process+0x5b4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fa8:	4a97      	ldr	r2, [pc, #604]	; (800a208 <tcp_process+0x5b4>)
 8009faa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fac:	8812      	ldrh	r2, [r2, #0]
 8009fae:	b292      	uxth	r2, r2
 8009fb0:	9202      	str	r2, [sp, #8]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	4b95      	ldr	r3, [pc, #596]	; (800a20c <tcp_process+0x5b8>)
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4b95      	ldr	r3, [pc, #596]	; (800a210 <tcp_process+0x5bc>)
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f003 f8db 	bl	800d178 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fc8:	2b05      	cmp	r3, #5
 8009fca:	f200 8215 	bhi.w	800a3f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f002 fea5 	bl	800cd24 <tcp_rexmit_rto>
      break;
 8009fda:	e20d      	b.n	800a3f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009fdc:	4b86      	ldr	r3, [pc, #536]	; (800a1f8 <tcp_process+0x5a4>)
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	f003 0310 	and.w	r3, r3, #16
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 80a1 	beq.w	800a12c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fea:	4b84      	ldr	r3, [pc, #528]	; (800a1fc <tcp_process+0x5a8>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	db7e      	blt.n	800a0f8 <tcp_process+0x4a4>
 8009ffa:	4b80      	ldr	r3, [pc, #512]	; (800a1fc <tcp_process+0x5a8>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	dc77      	bgt.n	800a0f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2204      	movs	r2, #4
 800a00c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a016:	23fa      	movs	r3, #250	; 0xfa
 800a018:	76bb      	strb	r3, [r7, #26]
 800a01a:	e01d      	b.n	800a058 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <tcp_process+0x3e0>
 800a026:	4b7b      	ldr	r3, [pc, #492]	; (800a214 <tcp_process+0x5c0>)
 800a028:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a02c:	497a      	ldr	r1, [pc, #488]	; (800a218 <tcp_process+0x5c4>)
 800a02e:	487b      	ldr	r0, [pc, #492]	; (800a21c <tcp_process+0x5c8>)
 800a030:	f008 fa78 	bl	8012524 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <tcp_process+0x400>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6910      	ldr	r0, [r2, #16]
 800a048:	2200      	movs	r2, #0
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4798      	blx	r3
 800a04e:	4603      	mov	r3, r0
 800a050:	76bb      	strb	r3, [r7, #26]
 800a052:	e001      	b.n	800a058 <tcp_process+0x404>
 800a054:	23f0      	movs	r3, #240	; 0xf0
 800a056:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a058:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00a      	beq.n	800a076 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a060:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a064:	f113 0f0d 	cmn.w	r3, #13
 800a068:	d002      	beq.n	800a070 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fd fcf0 	bl	8007a50 <tcp_abort>
            }
            return ERR_ABRT;
 800a070:	f06f 030c 	mvn.w	r3, #12
 800a074:	e1ce      	b.n	800a414 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fae0 	bl	800a63c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a07c:	4b68      	ldr	r3, [pc, #416]	; (800a220 <tcp_process+0x5cc>)
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d005      	beq.n	800a090 <tcp_process+0x43c>
            recv_acked--;
 800a084:	4b66      	ldr	r3, [pc, #408]	; (800a220 <tcp_process+0x5cc>)
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	3b01      	subs	r3, #1
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	4b64      	ldr	r3, [pc, #400]	; (800a220 <tcp_process+0x5cc>)
 800a08e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a094:	009a      	lsls	r2, r3, #2
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	f241 111c 	movw	r1, #4380	; 0x111c
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	bf38      	it	cc
 800a0a4:	460b      	movcc	r3, r1
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d204      	bcs.n	800a0b4 <tcp_process+0x460>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	e00d      	b.n	800a0d0 <tcp_process+0x47c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d904      	bls.n	800a0cc <tcp_process+0x478>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	e001      	b.n	800a0d0 <tcp_process+0x47c>
 800a0cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a0d6:	4b53      	ldr	r3, [pc, #332]	; (800a224 <tcp_process+0x5d0>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d037      	beq.n	800a152 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8b5b      	ldrh	r3, [r3, #26]
 800a0e6:	f043 0302 	orr.w	r3, r3, #2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2207      	movs	r2, #7
 800a0f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a0f6:	e02c      	b.n	800a152 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0f8:	4b40      	ldr	r3, [pc, #256]	; (800a1fc <tcp_process+0x5a8>)
 800a0fa:	6819      	ldr	r1, [r3, #0]
 800a0fc:	4b40      	ldr	r3, [pc, #256]	; (800a200 <tcp_process+0x5ac>)
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	4b40      	ldr	r3, [pc, #256]	; (800a204 <tcp_process+0x5b0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a108:	4b3f      	ldr	r3, [pc, #252]	; (800a208 <tcp_process+0x5b4>)
 800a10a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a10c:	885b      	ldrh	r3, [r3, #2]
 800a10e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a110:	4a3d      	ldr	r2, [pc, #244]	; (800a208 <tcp_process+0x5b4>)
 800a112:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a114:	8812      	ldrh	r2, [r2, #0]
 800a116:	b292      	uxth	r2, r2
 800a118:	9202      	str	r2, [sp, #8]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <tcp_process+0x5b8>)
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4b3b      	ldr	r3, [pc, #236]	; (800a210 <tcp_process+0x5bc>)
 800a122:	4602      	mov	r2, r0
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f003 f827 	bl	800d178 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a12a:	e167      	b.n	800a3fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a12c:	4b32      	ldr	r3, [pc, #200]	; (800a1f8 <tcp_process+0x5a4>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8161 	beq.w	800a3fc <tcp_process+0x7a8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	1e5a      	subs	r2, r3, #1
 800a140:	4b30      	ldr	r3, [pc, #192]	; (800a204 <tcp_process+0x5b0>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	f040 8159 	bne.w	800a3fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f002 fe0c 	bl	800cd68 <tcp_rexmit>
      break;
 800a150:	e154      	b.n	800a3fc <tcp_process+0x7a8>
 800a152:	e153      	b.n	800a3fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa71 	bl	800a63c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a15a:	4b32      	ldr	r3, [pc, #200]	; (800a224 <tcp_process+0x5d0>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 814c 	beq.w	800a400 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8b5b      	ldrh	r3, [r3, #26]
 800a16c:	f043 0302 	orr.w	r3, r3, #2
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2207      	movs	r2, #7
 800a17a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a17c:	e140      	b.n	800a400 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa5c 	bl	800a63c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a184:	4b27      	ldr	r3, [pc, #156]	; (800a224 <tcp_process+0x5d0>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 0320 	and.w	r3, r3, #32
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d071      	beq.n	800a274 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a190:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <tcp_process+0x5a4>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 0310 	and.w	r3, r3, #16
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d060      	beq.n	800a25e <tcp_process+0x60a>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1a0:	4b16      	ldr	r3, [pc, #88]	; (800a1fc <tcp_process+0x5a8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d15a      	bne.n	800a25e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d156      	bne.n	800a25e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	8b5b      	ldrh	r3, [r3, #26]
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fe fdbe 	bl	8008d40 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a1c4:	4b18      	ldr	r3, [pc, #96]	; (800a228 <tcp_process+0x5d4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d105      	bne.n	800a1da <tcp_process+0x586>
 800a1ce:	4b16      	ldr	r3, [pc, #88]	; (800a228 <tcp_process+0x5d4>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	4a14      	ldr	r2, [pc, #80]	; (800a228 <tcp_process+0x5d4>)
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	e02e      	b.n	800a238 <tcp_process+0x5e4>
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <tcp_process+0x5d4>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	617b      	str	r3, [r7, #20]
 800a1e0:	e027      	b.n	800a232 <tcp_process+0x5de>
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d11f      	bne.n	800a22c <tcp_process+0x5d8>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	e020      	b.n	800a238 <tcp_process+0x5e4>
 800a1f6:	bf00      	nop
 800a1f8:	200000fc 	.word	0x200000fc
 800a1fc:	200000f4 	.word	0x200000f4
 800a200:	200000fa 	.word	0x200000fa
 800a204:	200000f0 	.word	0x200000f0
 800a208:	200000e0 	.word	0x200000e0
 800a20c:	20003438 	.word	0x20003438
 800a210:	2000343c 	.word	0x2000343c
 800a214:	08014890 	.word	0x08014890
 800a218:	08014b30 	.word	0x08014b30
 800a21c:	080148dc 	.word	0x080148dc
 800a220:	200000f8 	.word	0x200000f8
 800a224:	200000fd 	.word	0x200000fd
 800a228:	2000696c 	.word	0x2000696c
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1d4      	bne.n	800a1e2 <tcp_process+0x58e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	60da      	str	r2, [r3, #12]
 800a23e:	4b77      	ldr	r3, [pc, #476]	; (800a41c <tcp_process+0x7c8>)
 800a240:	2201      	movs	r2, #1
 800a242:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220a      	movs	r2, #10
 800a248:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a24a:	4b75      	ldr	r3, [pc, #468]	; (800a420 <tcp_process+0x7cc>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	4a73      	ldr	r2, [pc, #460]	; (800a420 <tcp_process+0x7cc>)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	f003 f950 	bl	800d4fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a25c:	e0d2      	b.n	800a404 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	8b5b      	ldrh	r3, [r3, #26]
 800a262:	f043 0302 	orr.w	r3, r3, #2
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2208      	movs	r2, #8
 800a270:	751a      	strb	r2, [r3, #20]
      break;
 800a272:	e0c7      	b.n	800a404 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a274:	4b6b      	ldr	r3, [pc, #428]	; (800a424 <tcp_process+0x7d0>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 0310 	and.w	r3, r3, #16
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 80c1 	beq.w	800a404 <tcp_process+0x7b0>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a286:	4b68      	ldr	r3, [pc, #416]	; (800a428 <tcp_process+0x7d4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	f040 80ba 	bne.w	800a404 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 80b5 	bne.w	800a404 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2206      	movs	r2, #6
 800a29e:	751a      	strb	r2, [r3, #20]
      break;
 800a2a0:	e0b0      	b.n	800a404 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9ca 	bl	800a63c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a2a8:	4b60      	ldr	r3, [pc, #384]	; (800a42c <tcp_process+0x7d8>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	f003 0320 	and.w	r3, r3, #32
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 80a9 	beq.w	800a408 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	8b5b      	ldrh	r3, [r3, #26]
 800a2ba:	f043 0302 	orr.w	r3, r3, #2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7fe fd3b 	bl	8008d40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a2ca:	4b59      	ldr	r3, [pc, #356]	; (800a430 <tcp_process+0x7dc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d105      	bne.n	800a2e0 <tcp_process+0x68c>
 800a2d4:	4b56      	ldr	r3, [pc, #344]	; (800a430 <tcp_process+0x7dc>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	4a55      	ldr	r2, [pc, #340]	; (800a430 <tcp_process+0x7dc>)
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	e013      	b.n	800a308 <tcp_process+0x6b4>
 800a2e0:	4b53      	ldr	r3, [pc, #332]	; (800a430 <tcp_process+0x7dc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	613b      	str	r3, [r7, #16]
 800a2e6:	e00c      	b.n	800a302 <tcp_process+0x6ae>
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d104      	bne.n	800a2fc <tcp_process+0x6a8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	60da      	str	r2, [r3, #12]
 800a2fa:	e005      	b.n	800a308 <tcp_process+0x6b4>
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1ef      	bne.n	800a2e8 <tcp_process+0x694>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	4b43      	ldr	r3, [pc, #268]	; (800a41c <tcp_process+0x7c8>)
 800a310:	2201      	movs	r2, #1
 800a312:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	220a      	movs	r2, #10
 800a318:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a31a:	4b41      	ldr	r3, [pc, #260]	; (800a420 <tcp_process+0x7cc>)
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	4a3f      	ldr	r2, [pc, #252]	; (800a420 <tcp_process+0x7cc>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	f003 f8e8 	bl	800d4fc <tcp_timer_needed>
      }
      break;
 800a32c:	e06c      	b.n	800a408 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f984 	bl	800a63c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a334:	4b3b      	ldr	r3, [pc, #236]	; (800a424 <tcp_process+0x7d0>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	f003 0310 	and.w	r3, r3, #16
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d065      	beq.n	800a40c <tcp_process+0x7b8>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a344:	4b38      	ldr	r3, [pc, #224]	; (800a428 <tcp_process+0x7d4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d15f      	bne.n	800a40c <tcp_process+0x7b8>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d15b      	bne.n	800a40c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7fe fcf3 	bl	8008d40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a35a:	4b35      	ldr	r3, [pc, #212]	; (800a430 <tcp_process+0x7dc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d105      	bne.n	800a370 <tcp_process+0x71c>
 800a364:	4b32      	ldr	r3, [pc, #200]	; (800a430 <tcp_process+0x7dc>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	4a31      	ldr	r2, [pc, #196]	; (800a430 <tcp_process+0x7dc>)
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	e013      	b.n	800a398 <tcp_process+0x744>
 800a370:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <tcp_process+0x7dc>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e00c      	b.n	800a392 <tcp_process+0x73e>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d104      	bne.n	800a38c <tcp_process+0x738>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	60da      	str	r2, [r3, #12]
 800a38a:	e005      	b.n	800a398 <tcp_process+0x744>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1ef      	bne.n	800a378 <tcp_process+0x724>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	60da      	str	r2, [r3, #12]
 800a39e:	4b1f      	ldr	r3, [pc, #124]	; (800a41c <tcp_process+0x7c8>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	220a      	movs	r2, #10
 800a3a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a3aa:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <tcp_process+0x7cc>)
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60da      	str	r2, [r3, #12]
 800a3b2:	4a1b      	ldr	r2, [pc, #108]	; (800a420 <tcp_process+0x7cc>)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f003 f8a0 	bl	800d4fc <tcp_timer_needed>
      }
      break;
 800a3bc:	e026      	b.n	800a40c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f93c 	bl	800a63c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a3c4:	4b17      	ldr	r3, [pc, #92]	; (800a424 <tcp_process+0x7d0>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01f      	beq.n	800a410 <tcp_process+0x7bc>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3d4:	4b14      	ldr	r3, [pc, #80]	; (800a428 <tcp_process+0x7d4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d119      	bne.n	800a410 <tcp_process+0x7bc>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d115      	bne.n	800a410 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a3e4:	4b11      	ldr	r3, [pc, #68]	; (800a42c <tcp_process+0x7d8>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f043 0310 	orr.w	r3, r3, #16
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <tcp_process+0x7d8>)
 800a3f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a3f2:	e00d      	b.n	800a410 <tcp_process+0x7bc>
    default:
      break;
 800a3f4:	bf00      	nop
 800a3f6:	e00c      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e00a      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e008      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a400:	bf00      	nop
 800a402:	e006      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a404:	bf00      	nop
 800a406:	e004      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a408:	bf00      	nop
 800a40a:	e002      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a40c:	bf00      	nop
 800a40e:	e000      	b.n	800a412 <tcp_process+0x7be>
      break;
 800a410:	bf00      	nop
  }
  return ERR_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3724      	adds	r7, #36	; 0x24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd90      	pop	{r4, r7, pc}
 800a41c:	20006968 	.word	0x20006968
 800a420:	2000697c 	.word	0x2000697c
 800a424:	200000fc 	.word	0x200000fc
 800a428:	200000f4 	.word	0x200000f4
 800a42c:	200000fd 	.word	0x200000fd
 800a430:	2000696c 	.word	0x2000696c

0800a434 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a434:	b590      	push	{r4, r7, lr}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <tcp_oos_insert_segment+0x1e>
 800a444:	4b3b      	ldr	r3, [pc, #236]	; (800a534 <tcp_oos_insert_segment+0x100>)
 800a446:	f240 421f 	movw	r2, #1055	; 0x41f
 800a44a:	493b      	ldr	r1, [pc, #236]	; (800a538 <tcp_oos_insert_segment+0x104>)
 800a44c:	483b      	ldr	r0, [pc, #236]	; (800a53c <tcp_oos_insert_segment+0x108>)
 800a44e:	f008 f869 	bl	8012524 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	899b      	ldrh	r3, [r3, #12]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fb faac 	bl	80059b8 <lwip_htons>
 800a460:	4603      	mov	r3, r0
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d028      	beq.n	800a4be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a46c:	6838      	ldr	r0, [r7, #0]
 800a46e:	f7fe f97f 	bl	8008770 <tcp_segs_free>
    next = NULL;
 800a472:	2300      	movs	r3, #0
 800a474:	603b      	str	r3, [r7, #0]
 800a476:	e056      	b.n	800a526 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	899b      	ldrh	r3, [r3, #12]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4618      	mov	r0, r3
 800a482:	f7fb fa99 	bl	80059b8 <lwip_htons>
 800a486:	4603      	mov	r3, r0
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00d      	beq.n	800a4ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	899b      	ldrh	r3, [r3, #12]
 800a498:	b29c      	uxth	r4, r3
 800a49a:	2001      	movs	r0, #1
 800a49c:	f7fb fa8c 	bl	80059b8 <lwip_htons>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	4322      	orrs	r2, r4
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fe f96e 	bl	800879a <tcp_seg_free>
    while (next &&
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00e      	beq.n	800a4e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	891b      	ldrh	r3, [r3, #8]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <tcp_oos_insert_segment+0x10c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	441a      	add	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	8909      	ldrh	r1, [r1, #8]
 800a4da:	440b      	add	r3, r1
 800a4dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	daca      	bge.n	800a478 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01e      	beq.n	800a526 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	891b      	ldrh	r3, [r3, #8]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4b14      	ldr	r3, [pc, #80]	; (800a540 <tcp_oos_insert_segment+0x10c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	441a      	add	r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd12      	ble.n	800a526 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	b29a      	uxth	r2, r3
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <tcp_oos_insert_segment+0x10c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	891b      	ldrh	r3, [r3, #8]
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7fc fb77 	bl	8006c14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	601a      	str	r2, [r3, #0]
}
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}
 800a534:	08014890 	.word	0x08014890
 800a538:	08014b50 	.word	0x08014b50
 800a53c:	080148dc 	.word	0x080148dc
 800a540:	200000f0 	.word	0x200000f0

0800a544 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a544:	b5b0      	push	{r4, r5, r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a552:	e03e      	b.n	800a5d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4618      	mov	r0, r3
 800a564:	f7fc fd64 	bl	8007030 <pbuf_clen>
 800a568:	4603      	mov	r3, r0
 800a56a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a572:	8a7a      	ldrh	r2, [r7, #18]
 800a574:	429a      	cmp	r2, r3
 800a576:	d906      	bls.n	800a586 <tcp_free_acked_segments+0x42>
 800a578:	4b2a      	ldr	r3, [pc, #168]	; (800a624 <tcp_free_acked_segments+0xe0>)
 800a57a:	f240 4257 	movw	r2, #1111	; 0x457
 800a57e:	492a      	ldr	r1, [pc, #168]	; (800a628 <tcp_free_acked_segments+0xe4>)
 800a580:	482a      	ldr	r0, [pc, #168]	; (800a62c <tcp_free_acked_segments+0xe8>)
 800a582:	f007 ffcf 	bl	8012524 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a58c:	8a7b      	ldrh	r3, [r7, #18]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	891a      	ldrh	r2, [r3, #8]
 800a59c:	4b24      	ldr	r3, [pc, #144]	; (800a630 <tcp_free_acked_segments+0xec>)
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	4b22      	ldr	r3, [pc, #136]	; (800a630 <tcp_free_acked_segments+0xec>)
 800a5a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a5a8:	6978      	ldr	r0, [r7, #20]
 800a5aa:	f7fe f8f6 	bl	800879a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <tcp_free_acked_segments+0x8e>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d106      	bne.n	800a5d2 <tcp_free_acked_segments+0x8e>
 800a5c4:	4b17      	ldr	r3, [pc, #92]	; (800a624 <tcp_free_acked_segments+0xe0>)
 800a5c6:	f240 4261 	movw	r2, #1121	; 0x461
 800a5ca:	491a      	ldr	r1, [pc, #104]	; (800a634 <tcp_free_acked_segments+0xf0>)
 800a5cc:	4817      	ldr	r0, [pc, #92]	; (800a62c <tcp_free_acked_segments+0xe8>)
 800a5ce:	f007 ffa9 	bl	8012524 <iprintf>
  while (seg_list != NULL &&
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d020      	beq.n	800a61a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fb f9ff 	bl	80059e2 <lwip_htonl>
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	899b      	ldrh	r3, [r3, #12]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fb f9df 	bl	80059b8 <lwip_htons>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <tcp_free_acked_segments+0xc6>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <tcp_free_acked_segments+0xc8>
 800a60a:	2300      	movs	r3, #0
 800a60c:	442b      	add	r3, r5
 800a60e:	18e2      	adds	r2, r4, r3
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <tcp_free_acked_segments+0xf4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a616:	2b00      	cmp	r3, #0
 800a618:	dd9c      	ble.n	800a554 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a61a:	68bb      	ldr	r3, [r7, #8]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bdb0      	pop	{r4, r5, r7, pc}
 800a624:	08014890 	.word	0x08014890
 800a628:	08014b78 	.word	0x08014b78
 800a62c:	080148dc 	.word	0x080148dc
 800a630:	200000f8 	.word	0x200000f8
 800a634:	08014ba0 	.word	0x08014ba0
 800a638:	200000f4 	.word	0x200000f4

0800a63c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a63c:	b5b0      	push	{r4, r5, r7, lr}
 800a63e:	b094      	sub	sp, #80	; 0x50
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <tcp_receive+0x20>
 800a64e:	4ba6      	ldr	r3, [pc, #664]	; (800a8e8 <tcp_receive+0x2ac>)
 800a650:	f240 427b 	movw	r2, #1147	; 0x47b
 800a654:	49a5      	ldr	r1, [pc, #660]	; (800a8ec <tcp_receive+0x2b0>)
 800a656:	48a6      	ldr	r0, [pc, #664]	; (800a8f0 <tcp_receive+0x2b4>)
 800a658:	f007 ff64 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7d1b      	ldrb	r3, [r3, #20]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d806      	bhi.n	800a672 <tcp_receive+0x36>
 800a664:	4ba0      	ldr	r3, [pc, #640]	; (800a8e8 <tcp_receive+0x2ac>)
 800a666:	f240 427c 	movw	r2, #1148	; 0x47c
 800a66a:	49a2      	ldr	r1, [pc, #648]	; (800a8f4 <tcp_receive+0x2b8>)
 800a66c:	48a0      	ldr	r0, [pc, #640]	; (800a8f0 <tcp_receive+0x2b4>)
 800a66e:	f007 ff59 	bl	8012524 <iprintf>

  if (flags & TCP_ACK) {
 800a672:	4ba1      	ldr	r3, [pc, #644]	; (800a8f8 <tcp_receive+0x2bc>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 8263 	beq.w	800ab46 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a686:	461a      	mov	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68c:	4413      	add	r3, r2
 800a68e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a694:	4b99      	ldr	r3, [pc, #612]	; (800a8fc <tcp_receive+0x2c0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	db1b      	blt.n	800a6d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6a2:	4b96      	ldr	r3, [pc, #600]	; (800a8fc <tcp_receive+0x2c0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d106      	bne.n	800a6b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6ae:	4b94      	ldr	r3, [pc, #592]	; (800a900 <tcp_receive+0x2c4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	db0e      	blt.n	800a6d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6bc:	4b90      	ldr	r3, [pc, #576]	; (800a900 <tcp_receive+0x2c4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d125      	bne.n	800a710 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a6c4:	4b8f      	ldr	r3, [pc, #572]	; (800a904 <tcp_receive+0x2c8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	89db      	ldrh	r3, [r3, #14]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d91c      	bls.n	800a710 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a6d6:	4b8b      	ldr	r3, [pc, #556]	; (800a904 <tcp_receive+0x2c8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	89db      	ldrh	r3, [r3, #14]
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d205      	bcs.n	800a700 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a700:	4b7e      	ldr	r3, [pc, #504]	; (800a8fc <tcp_receive+0x2c0>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a708:	4b7d      	ldr	r3, [pc, #500]	; (800a900 <tcp_receive+0x2c4>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a710:	4b7b      	ldr	r3, [pc, #492]	; (800a900 <tcp_receive+0x2c4>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dc58      	bgt.n	800a7d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a71e:	4b7a      	ldr	r3, [pc, #488]	; (800a908 <tcp_receive+0x2cc>)
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d14b      	bne.n	800a7be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a730:	4413      	add	r3, r2
 800a732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a734:	429a      	cmp	r2, r3
 800a736:	d142      	bne.n	800a7be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a73e:	2b00      	cmp	r3, #0
 800a740:	db3d      	blt.n	800a7be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a746:	4b6e      	ldr	r3, [pc, #440]	; (800a900 <tcp_receive+0x2c4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d137      	bne.n	800a7be <tcp_receive+0x182>
              found_dupack = 1;
 800a74e:	2301      	movs	r3, #1
 800a750:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a758:	2bff      	cmp	r3, #255	; 0xff
 800a75a:	d007      	beq.n	800a76c <tcp_receive+0x130>
                ++pcb->dupacks;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a762:	3301      	adds	r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a772:	2b03      	cmp	r3, #3
 800a774:	d91b      	bls.n	800a7ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a780:	4413      	add	r3, r2
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d30a      	bcc.n	800a7a4 <tcp_receive+0x168>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a798:	4413      	add	r3, r2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a7a2:	e004      	b.n	800a7ae <tcp_receive+0x172>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d902      	bls.n	800a7be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f002 fb41 	bl	800ce40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 8160 	bne.w	800aa86 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7ce:	e15a      	b.n	800aa86 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7d0:	4b4b      	ldr	r3, [pc, #300]	; (800a900 <tcp_receive+0x2c4>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f2c0 814d 	blt.w	800aa7c <tcp_receive+0x440>
 800a7e2:	4b47      	ldr	r3, [pc, #284]	; (800a900 <tcp_receive+0x2c4>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f300 8145 	bgt.w	800aa7c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8b5b      	ldrh	r3, [r3, #26]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d010      	beq.n	800a820 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8b5b      	ldrh	r3, [r3, #26]
 800a802:	f023 0304 	bic.w	r3, r3, #4
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a82e:	10db      	asrs	r3, r3, #3
 800a830:	b21b      	sxth	r3, r3
 800a832:	b29a      	uxth	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4413      	add	r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	b21a      	sxth	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a848:	4b2d      	ldr	r3, [pc, #180]	; (800a900 <tcp_receive+0x2c4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a852:	b29b      	uxth	r3, r3
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a860:	4b27      	ldr	r3, [pc, #156]	; (800a900 <tcp_receive+0x2c4>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7d1b      	ldrb	r3, [r3, #20]
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	f240 8096 	bls.w	800a99e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a87e:	429a      	cmp	r2, r3
 800a880:	d244      	bcs.n	800a90c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8b5b      	ldrh	r3, [r3, #26]
 800a886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <tcp_receive+0x256>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <tcp_receive+0x258>
 800a892:	2302      	movs	r3, #2
 800a894:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a898:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8a2:	fb12 f303 	smulbb	r3, r2, r3
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	bf28      	it	cs
 800a8ae:	4613      	movcs	r3, r2
 800a8b0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8ba:	4413      	add	r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d309      	bcc.n	800a8dc <tcp_receive+0x2a0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8d0:	4413      	add	r3, r2
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8da:	e060      	b.n	800a99e <tcp_receive+0x362>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8e6:	e05a      	b.n	800a99e <tcp_receive+0x362>
 800a8e8:	08014890 	.word	0x08014890
 800a8ec:	08014bc0 	.word	0x08014bc0
 800a8f0:	080148dc 	.word	0x080148dc
 800a8f4:	08014bdc 	.word	0x08014bdc
 800a8f8:	200000fc 	.word	0x200000fc
 800a8fc:	200000f0 	.word	0x200000f0
 800a900:	200000f4 	.word	0x200000f4
 800a904:	200000e0 	.word	0x200000e0
 800a908:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a914:	4413      	add	r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a91e:	429a      	cmp	r2, r3
 800a920:	d309      	bcc.n	800a936 <tcp_receive+0x2fa>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a92a:	4413      	add	r3, r2
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a934:	e004      	b.n	800a940 <tcp_receive+0x304>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a93c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d326      	bcc.n	800a99e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	b29a      	uxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a970:	4413      	add	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d30a      	bcc.n	800a994 <tcp_receive+0x358>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a988:	4413      	add	r3, r2
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a992:	e004      	b.n	800a99e <tcp_receive+0x362>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a99a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a6:	4a98      	ldr	r2, [pc, #608]	; (800ac08 <tcp_receive+0x5cc>)
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f7ff fdcb 	bl	800a544 <tcp_free_acked_segments>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9bc:	4a93      	ldr	r2, [pc, #588]	; (800ac0c <tcp_receive+0x5d0>)
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fdc0 	bl	800a544 <tcp_free_acked_segments>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d104      	bne.n	800a9dc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9d8:	861a      	strh	r2, [r3, #48]	; 0x30
 800a9da:	e002      	b.n	800a9e2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a9fe:	4b84      	ldr	r3, [pc, #528]	; (800ac10 <tcp_receive+0x5d4>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	4413      	add	r3, r2
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8b5b      	ldrh	r3, [r3, #26]
 800aa10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d035      	beq.n	800aa84 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d118      	bne.n	800aa52 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00c      	beq.n	800aa42 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fa ffd4 	bl	80059e2 <lwip_htonl>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dc20      	bgt.n	800aa84 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	8b5b      	ldrh	r3, [r3, #26]
 800aa46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa50:	e018      	b.n	800aa84 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fa ffbf 	bl	80059e2 <lwip_htonl>
 800aa64:	4603      	mov	r3, r0
 800aa66:	1ae3      	subs	r3, r4, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc0b      	bgt.n	800aa84 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	8b5b      	ldrh	r3, [r3, #26]
 800aa70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa7a:	e003      	b.n	800aa84 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f002 fbcd 	bl	800d21c <tcp_send_empty_ack>
 800aa82:	e000      	b.n	800aa86 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa84:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d05b      	beq.n	800ab46 <tcp_receive+0x50a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa92:	4b60      	ldr	r3, [pc, #384]	; (800ac14 <tcp_receive+0x5d8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	da54      	bge.n	800ab46 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aa9c:	4b5e      	ldr	r3, [pc, #376]	; (800ac18 <tcp_receive+0x5dc>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800aab0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aaba:	10db      	asrs	r3, r3, #3
 800aabc:	b21b      	sxth	r3, r3
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aace:	b29a      	uxth	r2, r3
 800aad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aad4:	4413      	add	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	b21a      	sxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800aade:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	da05      	bge.n	800aaf2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800aae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aaea:	425b      	negs	r3, r3
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800aaf2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aafc:	109b      	asrs	r3, r3, #2
 800aafe:	b21b      	sxth	r3, r3
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab16:	4413      	add	r3, r2
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	b21a      	sxth	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab26:	10db      	asrs	r3, r3, #3
 800ab28:	b21b      	sxth	r3, r3
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4413      	add	r3, r2
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	b21a      	sxth	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ab46:	4b35      	ldr	r3, [pc, #212]	; (800ac1c <tcp_receive+0x5e0>)
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 84e1 	beq.w	800b512 <tcp_receive+0xed6>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7d1b      	ldrb	r3, [r3, #20]
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	f200 84dc 	bhi.w	800b512 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab5e:	4b30      	ldr	r3, [pc, #192]	; (800ac20 <tcp_receive+0x5e4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f2c0 808e 	blt.w	800ac88 <tcp_receive+0x64c>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab70:	4b2a      	ldr	r3, [pc, #168]	; (800ac1c <tcp_receive+0x5e0>)
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	4b2a      	ldr	r3, [pc, #168]	; (800ac20 <tcp_receive+0x5e4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	440b      	add	r3, r1
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	3301      	adds	r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f300 8081 	bgt.w	800ac88 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ab86:	4b27      	ldr	r3, [pc, #156]	; (800ac24 <tcp_receive+0x5e8>)
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab90:	4b23      	ldr	r3, [pc, #140]	; (800ac20 <tcp_receive+0x5e4>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ab98:	4b22      	ldr	r3, [pc, #136]	; (800ac24 <tcp_receive+0x5e8>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <tcp_receive+0x572>
 800aba0:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <tcp_receive+0x5ec>)
 800aba2:	f240 5294 	movw	r2, #1428	; 0x594
 800aba6:	4921      	ldr	r1, [pc, #132]	; (800ac2c <tcp_receive+0x5f0>)
 800aba8:	4821      	ldr	r0, [pc, #132]	; (800ac30 <tcp_receive+0x5f4>)
 800abaa:	f007 fcbb 	bl	8012524 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d906      	bls.n	800abc6 <tcp_receive+0x58a>
 800abb8:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <tcp_receive+0x5ec>)
 800abba:	f240 5295 	movw	r2, #1429	; 0x595
 800abbe:	491d      	ldr	r1, [pc, #116]	; (800ac34 <tcp_receive+0x5f8>)
 800abc0:	481b      	ldr	r0, [pc, #108]	; (800ac30 <tcp_receive+0x5f4>)
 800abc2:	f007 fcaf 	bl	8012524 <iprintf>
      off = (u16_t)off32;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800abcc:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <tcp_receive+0x5e8>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	891b      	ldrh	r3, [r3, #8]
 800abd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d906      	bls.n	800abe8 <tcp_receive+0x5ac>
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <tcp_receive+0x5ec>)
 800abdc:	f240 5297 	movw	r2, #1431	; 0x597
 800abe0:	4915      	ldr	r1, [pc, #84]	; (800ac38 <tcp_receive+0x5fc>)
 800abe2:	4813      	ldr	r0, [pc, #76]	; (800ac30 <tcp_receive+0x5f4>)
 800abe4:	f007 fc9e 	bl	8012524 <iprintf>
      inseg.len -= off;
 800abe8:	4b0e      	ldr	r3, [pc, #56]	; (800ac24 <tcp_receive+0x5e8>)
 800abea:	891a      	ldrh	r2, [r3, #8]
 800abec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <tcp_receive+0x5e8>)
 800abf6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <tcp_receive+0x5e8>)
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	891a      	ldrh	r2, [r3, #8]
 800abfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ac06:	e029      	b.n	800ac5c <tcp_receive+0x620>
 800ac08:	08014bf8 	.word	0x08014bf8
 800ac0c:	08014c00 	.word	0x08014c00
 800ac10:	200000f8 	.word	0x200000f8
 800ac14:	200000f4 	.word	0x200000f4
 800ac18:	20006970 	.word	0x20006970
 800ac1c:	200000fa 	.word	0x200000fa
 800ac20:	200000f0 	.word	0x200000f0
 800ac24:	200000d0 	.word	0x200000d0
 800ac28:	08014890 	.word	0x08014890
 800ac2c:	08014c08 	.word	0x08014c08
 800ac30:	080148dc 	.word	0x080148dc
 800ac34:	08014c18 	.word	0x08014c18
 800ac38:	08014c28 	.word	0x08014c28
        off -= p->len;
 800ac3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac3e:	895b      	ldrh	r3, [r3, #10]
 800ac40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ac4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ac4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ac50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac52:	2200      	movs	r2, #0
 800ac54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ac5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5e:	895b      	ldrh	r3, [r3, #10]
 800ac60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d8e9      	bhi.n	800ac3c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ac68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ac70:	f7fc f8d0 	bl	8006e14 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	4a91      	ldr	r2, [pc, #580]	; (800aec0 <tcp_receive+0x884>)
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	4b91      	ldr	r3, [pc, #580]	; (800aec4 <tcp_receive+0x888>)
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	4a8f      	ldr	r2, [pc, #572]	; (800aec0 <tcp_receive+0x884>)
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ac86:	e00d      	b.n	800aca4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ac88:	4b8d      	ldr	r3, [pc, #564]	; (800aec0 <tcp_receive+0x884>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	da06      	bge.n	800aca4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8b5b      	ldrh	r3, [r3, #26]
 800ac9a:	f043 0302 	orr.w	r3, r3, #2
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aca4:	4b86      	ldr	r3, [pc, #536]	; (800aec0 <tcp_receive+0x884>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f2c0 842a 	blt.w	800b508 <tcp_receive+0xecc>
 800acb4:	4b82      	ldr	r3, [pc, #520]	; (800aec0 <tcp_receive+0x884>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800acc0:	440b      	add	r3, r1
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	3301      	adds	r3, #1
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f300 841e 	bgt.w	800b508 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acd0:	4b7b      	ldr	r3, [pc, #492]	; (800aec0 <tcp_receive+0x884>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f040 829a 	bne.w	800b20e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800acda:	4b7a      	ldr	r3, [pc, #488]	; (800aec4 <tcp_receive+0x888>)
 800acdc:	891c      	ldrh	r4, [r3, #8]
 800acde:	4b79      	ldr	r3, [pc, #484]	; (800aec4 <tcp_receive+0x888>)
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	899b      	ldrh	r3, [r3, #12]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fa fe66 	bl	80059b8 <lwip_htons>
 800acec:	4603      	mov	r3, r0
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	f003 0303 	and.w	r3, r3, #3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <tcp_receive+0x6c0>
 800acf8:	2301      	movs	r3, #1
 800acfa:	e000      	b.n	800acfe <tcp_receive+0x6c2>
 800acfc:	2300      	movs	r3, #0
 800acfe:	4423      	add	r3, r4
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	4b71      	ldr	r3, [pc, #452]	; (800aec8 <tcp_receive+0x88c>)
 800ad04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad0a:	4b6f      	ldr	r3, [pc, #444]	; (800aec8 <tcp_receive+0x88c>)
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d275      	bcs.n	800adfe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad12:	4b6c      	ldr	r3, [pc, #432]	; (800aec4 <tcp_receive+0x888>)
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	899b      	ldrh	r3, [r3, #12]
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fa fe4c 	bl	80059b8 <lwip_htons>
 800ad20:	4603      	mov	r3, r0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01f      	beq.n	800ad6c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ad2c:	4b65      	ldr	r3, [pc, #404]	; (800aec4 <tcp_receive+0x888>)
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	b21b      	sxth	r3, r3
 800ad36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad3a:	b21c      	sxth	r4, r3
 800ad3c:	4b61      	ldr	r3, [pc, #388]	; (800aec4 <tcp_receive+0x888>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	899b      	ldrh	r3, [r3, #12]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fa fe37 	bl	80059b8 <lwip_htons>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fa fe2e 	bl	80059b8 <lwip_htons>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	b21b      	sxth	r3, r3
 800ad60:	4323      	orrs	r3, r4
 800ad62:	b21a      	sxth	r2, r3
 800ad64:	4b57      	ldr	r3, [pc, #348]	; (800aec4 <tcp_receive+0x888>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad70:	4b54      	ldr	r3, [pc, #336]	; (800aec4 <tcp_receive+0x888>)
 800ad72:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ad74:	4b53      	ldr	r3, [pc, #332]	; (800aec4 <tcp_receive+0x888>)
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	899b      	ldrh	r3, [r3, #12]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa fe1b 	bl	80059b8 <lwip_htons>
 800ad82:	4603      	mov	r3, r0
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ad8e:	4b4d      	ldr	r3, [pc, #308]	; (800aec4 <tcp_receive+0x888>)
 800ad90:	891b      	ldrh	r3, [r3, #8]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	4b4b      	ldr	r3, [pc, #300]	; (800aec4 <tcp_receive+0x888>)
 800ad98:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ad9a:	4b4a      	ldr	r3, [pc, #296]	; (800aec4 <tcp_receive+0x888>)
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4a49      	ldr	r2, [pc, #292]	; (800aec4 <tcp_receive+0x888>)
 800ada0:	8912      	ldrh	r2, [r2, #8]
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fb ff35 	bl	8006c14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800adaa:	4b46      	ldr	r3, [pc, #280]	; (800aec4 <tcp_receive+0x888>)
 800adac:	891c      	ldrh	r4, [r3, #8]
 800adae:	4b45      	ldr	r3, [pc, #276]	; (800aec4 <tcp_receive+0x888>)
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fa fdfe 	bl	80059b8 <lwip_htons>
 800adbc:	4603      	mov	r3, r0
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <tcp_receive+0x790>
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <tcp_receive+0x792>
 800adcc:	2300      	movs	r3, #0
 800adce:	4423      	add	r3, r4
 800add0:	b29a      	uxth	r2, r3
 800add2:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <tcp_receive+0x88c>)
 800add4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800add6:	4b3c      	ldr	r3, [pc, #240]	; (800aec8 <tcp_receive+0x88c>)
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	4b38      	ldr	r3, [pc, #224]	; (800aec0 <tcp_receive+0x884>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	441a      	add	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adea:	440b      	add	r3, r1
 800adec:	429a      	cmp	r2, r3
 800adee:	d006      	beq.n	800adfe <tcp_receive+0x7c2>
 800adf0:	4b36      	ldr	r3, [pc, #216]	; (800aecc <tcp_receive+0x890>)
 800adf2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800adf6:	4936      	ldr	r1, [pc, #216]	; (800aed0 <tcp_receive+0x894>)
 800adf8:	4836      	ldr	r0, [pc, #216]	; (800aed4 <tcp_receive+0x898>)
 800adfa:	f007 fb93 	bl	8012524 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80e7 	beq.w	800afd6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae08:	4b2e      	ldr	r3, [pc, #184]	; (800aec4 <tcp_receive+0x888>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	899b      	ldrh	r3, [r3, #12]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fa fdd1 	bl	80059b8 <lwip_htons>
 800ae16:	4603      	mov	r3, r0
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d010      	beq.n	800ae44 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ae22:	e00a      	b.n	800ae3a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae28:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7fd fcb0 	bl	800879a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f0      	bne.n	800ae24 <tcp_receive+0x7e8>
 800ae42:	e0c8      	b.n	800afd6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ae4a:	e052      	b.n	800aef2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa fdaf 	bl	80059b8 <lwip_htons>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d03d      	beq.n	800aee2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ae66:	4b17      	ldr	r3, [pc, #92]	; (800aec4 <tcp_receive+0x888>)
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	899b      	ldrh	r3, [r3, #12]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fa fda2 	bl	80059b8 <lwip_htons>
 800ae74:	4603      	mov	r3, r0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d130      	bne.n	800aee2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ae80:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <tcp_receive+0x888>)
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	899b      	ldrh	r3, [r3, #12]
 800ae86:	b29c      	uxth	r4, r3
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7fa fd95 	bl	80059b8 <lwip_htons>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <tcp_receive+0x888>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	4322      	orrs	r2, r4
 800ae98:	b292      	uxth	r2, r2
 800ae9a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <tcp_receive+0x888>)
 800ae9e:	891c      	ldrh	r4, [r3, #8]
 800aea0:	4b08      	ldr	r3, [pc, #32]	; (800aec4 <tcp_receive+0x888>)
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	899b      	ldrh	r3, [r3, #12]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fa fd85 	bl	80059b8 <lwip_htons>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	f003 0303 	and.w	r3, r3, #3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00e      	beq.n	800aed8 <tcp_receive+0x89c>
 800aeba:	2301      	movs	r3, #1
 800aebc:	e00d      	b.n	800aeda <tcp_receive+0x89e>
 800aebe:	bf00      	nop
 800aec0:	200000f0 	.word	0x200000f0
 800aec4:	200000d0 	.word	0x200000d0
 800aec8:	200000fa 	.word	0x200000fa
 800aecc:	08014890 	.word	0x08014890
 800aed0:	08014c38 	.word	0x08014c38
 800aed4:	080148dc 	.word	0x080148dc
 800aed8:	2300      	movs	r3, #0
 800aeda:	4423      	add	r3, r4
 800aedc:	b29a      	uxth	r2, r3
 800aede:	4b98      	ldr	r3, [pc, #608]	; (800b140 <tcp_receive+0xb04>)
 800aee0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800aee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800aeec:	6938      	ldr	r0, [r7, #16]
 800aeee:	f7fd fc54 	bl	800879a <tcp_seg_free>
            while (next &&
 800aef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aef8:	4b91      	ldr	r3, [pc, #580]	; (800b140 <tcp_receive+0xb04>)
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	4b91      	ldr	r3, [pc, #580]	; (800b144 <tcp_receive+0xb08>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	441a      	add	r2, r3
 800af04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af0c:	8909      	ldrh	r1, [r1, #8]
 800af0e:	440b      	add	r3, r1
 800af10:	1ad3      	subs	r3, r2, r3
            while (next &&
 800af12:	2b00      	cmp	r3, #0
 800af14:	da9a      	bge.n	800ae4c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800af16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d059      	beq.n	800afd0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800af1c:	4b88      	ldr	r3, [pc, #544]	; (800b140 <tcp_receive+0xb04>)
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	4b88      	ldr	r3, [pc, #544]	; (800b144 <tcp_receive+0xb08>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	441a      	add	r2, r3
 800af28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800af30:	2b00      	cmp	r3, #0
 800af32:	dd4d      	ble.n	800afd0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800af34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	4b81      	ldr	r3, [pc, #516]	; (800b144 <tcp_receive+0xb08>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	b29b      	uxth	r3, r3
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	b29a      	uxth	r2, r3
 800af46:	4b80      	ldr	r3, [pc, #512]	; (800b148 <tcp_receive+0xb0c>)
 800af48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800af4a:	4b7f      	ldr	r3, [pc, #508]	; (800b148 <tcp_receive+0xb0c>)
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	899b      	ldrh	r3, [r3, #12]
 800af50:	b29b      	uxth	r3, r3
 800af52:	4618      	mov	r0, r3
 800af54:	f7fa fd30 	bl	80059b8 <lwip_htons>
 800af58:	4603      	mov	r3, r0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d005      	beq.n	800af70 <tcp_receive+0x934>
                inseg.len -= 1;
 800af64:	4b78      	ldr	r3, [pc, #480]	; (800b148 <tcp_receive+0xb0c>)
 800af66:	891b      	ldrh	r3, [r3, #8]
 800af68:	3b01      	subs	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	4b76      	ldr	r3, [pc, #472]	; (800b148 <tcp_receive+0xb0c>)
 800af6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800af70:	4b75      	ldr	r3, [pc, #468]	; (800b148 <tcp_receive+0xb0c>)
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	4a74      	ldr	r2, [pc, #464]	; (800b148 <tcp_receive+0xb0c>)
 800af76:	8912      	ldrh	r2, [r2, #8]
 800af78:	4611      	mov	r1, r2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fb fe4a 	bl	8006c14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800af80:	4b71      	ldr	r3, [pc, #452]	; (800b148 <tcp_receive+0xb0c>)
 800af82:	891c      	ldrh	r4, [r3, #8]
 800af84:	4b70      	ldr	r3, [pc, #448]	; (800b148 <tcp_receive+0xb0c>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	899b      	ldrh	r3, [r3, #12]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fa fd13 	bl	80059b8 <lwip_htons>
 800af92:	4603      	mov	r3, r0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0303 	and.w	r3, r3, #3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <tcp_receive+0x966>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <tcp_receive+0x968>
 800afa2:	2300      	movs	r3, #0
 800afa4:	4423      	add	r3, r4
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	4b65      	ldr	r3, [pc, #404]	; (800b140 <tcp_receive+0xb04>)
 800afaa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800afac:	4b64      	ldr	r3, [pc, #400]	; (800b140 <tcp_receive+0xb04>)
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b64      	ldr	r3, [pc, #400]	; (800b144 <tcp_receive+0xb08>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	441a      	add	r2, r3
 800afb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d006      	beq.n	800afd0 <tcp_receive+0x994>
 800afc2:	4b62      	ldr	r3, [pc, #392]	; (800b14c <tcp_receive+0xb10>)
 800afc4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800afc8:	4961      	ldr	r1, [pc, #388]	; (800b150 <tcp_receive+0xb14>)
 800afca:	4862      	ldr	r0, [pc, #392]	; (800b154 <tcp_receive+0xb18>)
 800afcc:	f007 faaa 	bl	8012524 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afd4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800afd6:	4b5a      	ldr	r3, [pc, #360]	; (800b140 <tcp_receive+0xb04>)
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	4b59      	ldr	r3, [pc, #356]	; (800b144 <tcp_receive+0xb08>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	441a      	add	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afea:	4b55      	ldr	r3, [pc, #340]	; (800b140 <tcp_receive+0xb04>)
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d206      	bcs.n	800b000 <tcp_receive+0x9c4>
 800aff2:	4b56      	ldr	r3, [pc, #344]	; (800b14c <tcp_receive+0xb10>)
 800aff4:	f240 6207 	movw	r2, #1543	; 0x607
 800aff8:	4957      	ldr	r1, [pc, #348]	; (800b158 <tcp_receive+0xb1c>)
 800affa:	4856      	ldr	r0, [pc, #344]	; (800b154 <tcp_receive+0xb18>)
 800affc:	f007 fa92 	bl	8012524 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b004:	4b4e      	ldr	r3, [pc, #312]	; (800b140 <tcp_receive+0xb04>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7fc fe9d 	bl	8007d50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b016:	4b4c      	ldr	r3, [pc, #304]	; (800b148 <tcp_receive+0xb0c>)
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	891b      	ldrh	r3, [r3, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d006      	beq.n	800b02e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b020:	4b49      	ldr	r3, [pc, #292]	; (800b148 <tcp_receive+0xb0c>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	4a4d      	ldr	r2, [pc, #308]	; (800b15c <tcp_receive+0xb20>)
 800b026:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b028:	4b47      	ldr	r3, [pc, #284]	; (800b148 <tcp_receive+0xb0c>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b02e:	4b46      	ldr	r3, [pc, #280]	; (800b148 <tcp_receive+0xb0c>)
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	899b      	ldrh	r3, [r3, #12]
 800b034:	b29b      	uxth	r3, r3
 800b036:	4618      	mov	r0, r3
 800b038:	f7fa fcbe 	bl	80059b8 <lwip_htons>
 800b03c:	4603      	mov	r3, r0
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 80b8 	beq.w	800b1ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b04a:	4b45      	ldr	r3, [pc, #276]	; (800b160 <tcp_receive+0xb24>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	f043 0320 	orr.w	r3, r3, #32
 800b052:	b2da      	uxtb	r2, r3
 800b054:	4b42      	ldr	r3, [pc, #264]	; (800b160 <tcp_receive+0xb24>)
 800b056:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b058:	e0af      	b.n	800b1ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4a36      	ldr	r2, [pc, #216]	; (800b144 <tcp_receive+0xb08>)
 800b06a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	891b      	ldrh	r3, [r3, #8]
 800b070:	461c      	mov	r4, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	899b      	ldrh	r3, [r3, #12]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fa fc9c 	bl	80059b8 <lwip_htons>
 800b080:	4603      	mov	r3, r0
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <tcp_receive+0xa54>
 800b08c:	2301      	movs	r3, #1
 800b08e:	e000      	b.n	800b092 <tcp_receive+0xa56>
 800b090:	2300      	movs	r3, #0
 800b092:	191a      	adds	r2, r3, r4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	441a      	add	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	891b      	ldrh	r3, [r3, #8]
 800b0a8:	461d      	mov	r5, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	899b      	ldrh	r3, [r3, #12]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fa fc80 	bl	80059b8 <lwip_htons>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	f003 0303 	and.w	r3, r3, #3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <tcp_receive+0xa8c>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e000      	b.n	800b0ca <tcp_receive+0xa8e>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	442b      	add	r3, r5
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	d206      	bcs.n	800b0de <tcp_receive+0xaa2>
 800b0d0:	4b1e      	ldr	r3, [pc, #120]	; (800b14c <tcp_receive+0xb10>)
 800b0d2:	f240 622b 	movw	r2, #1579	; 0x62b
 800b0d6:	4923      	ldr	r1, [pc, #140]	; (800b164 <tcp_receive+0xb28>)
 800b0d8:	481e      	ldr	r0, [pc, #120]	; (800b154 <tcp_receive+0xb18>)
 800b0da:	f007 fa23 	bl	8012524 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	891b      	ldrh	r3, [r3, #8]
 800b0e2:	461c      	mov	r4, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	899b      	ldrh	r3, [r3, #12]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fa fc63 	bl	80059b8 <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <tcp_receive+0xac6>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <tcp_receive+0xac8>
 800b102:	2300      	movs	r3, #0
 800b104:	1919      	adds	r1, r3, r4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b10a:	b28b      	uxth	r3, r1
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7fc fe1b 	bl	8007d50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	891b      	ldrh	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d028      	beq.n	800b176 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b124:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <tcp_receive+0xb20>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d01d      	beq.n	800b168 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <tcp_receive+0xb20>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4619      	mov	r1, r3
 800b136:	4610      	mov	r0, r2
 800b138:	f7fb ffb4 	bl	80070a4 <pbuf_cat>
 800b13c:	e018      	b.n	800b170 <tcp_receive+0xb34>
 800b13e:	bf00      	nop
 800b140:	200000fa 	.word	0x200000fa
 800b144:	200000f0 	.word	0x200000f0
 800b148:	200000d0 	.word	0x200000d0
 800b14c:	08014890 	.word	0x08014890
 800b150:	08014c70 	.word	0x08014c70
 800b154:	080148dc 	.word	0x080148dc
 800b158:	08014cac 	.word	0x08014cac
 800b15c:	20000100 	.word	0x20000100
 800b160:	200000fd 	.word	0x200000fd
 800b164:	08014ccc 	.word	0x08014ccc
            } else {
              recv_data = cseg->p;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	4a70      	ldr	r2, [pc, #448]	; (800b330 <tcp_receive+0xcf4>)
 800b16e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	899b      	ldrh	r3, [r3, #12]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fa fc1a 	bl	80059b8 <lwip_htons>
 800b184:	4603      	mov	r3, r0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00d      	beq.n	800b1ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b190:	4b68      	ldr	r3, [pc, #416]	; (800b334 <tcp_receive+0xcf8>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	f043 0320 	orr.w	r3, r3, #32
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	4b66      	ldr	r3, [pc, #408]	; (800b334 <tcp_receive+0xcf8>)
 800b19c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7d1b      	ldrb	r3, [r3, #20]
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d102      	bne.n	800b1ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2207      	movs	r2, #7
 800b1aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b1b4:	68b8      	ldr	r0, [r7, #8]
 800b1b6:	f7fd faf0 	bl	800879a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d008      	beq.n	800b1d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	f43f af43 	beq.w	800b05a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	8b5b      	ldrh	r3, [r3, #26]
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00e      	beq.n	800b1fe <tcp_receive+0xbc2>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	8b5b      	ldrh	r3, [r3, #26]
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	835a      	strh	r2, [r3, #26]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	8b5b      	ldrh	r3, [r3, #26]
 800b1f2:	f043 0302 	orr.w	r3, r3, #2
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b1fc:	e188      	b.n	800b510 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8b5b      	ldrh	r3, [r3, #26]
 800b202:	f043 0301 	orr.w	r3, r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b20c:	e180      	b.n	800b510 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b216:	4848      	ldr	r0, [pc, #288]	; (800b338 <tcp_receive+0xcfc>)
 800b218:	f7fd faf6 	bl	8008808 <tcp_seg_copy>
 800b21c:	4602      	mov	r2, r0
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	675a      	str	r2, [r3, #116]	; 0x74
 800b222:	e16d      	b.n	800b500 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b224:	2300      	movs	r3, #0
 800b226:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b22e:	e157      	b.n	800b4e0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	4b41      	ldr	r3, [pc, #260]	; (800b33c <tcp_receive+0xd00>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d11d      	bne.n	800b27a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b23e:	4b3e      	ldr	r3, [pc, #248]	; (800b338 <tcp_receive+0xcfc>)
 800b240:	891a      	ldrh	r2, [r3, #8]
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	891b      	ldrh	r3, [r3, #8]
 800b246:	429a      	cmp	r2, r3
 800b248:	f240 814f 	bls.w	800b4ea <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b24c:	483a      	ldr	r0, [pc, #232]	; (800b338 <tcp_receive+0xcfc>)
 800b24e:	f7fd fadb 	bl	8008808 <tcp_seg_copy>
 800b252:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 8149 	beq.w	800b4ee <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b264:	697a      	ldr	r2, [r7, #20]
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e002      	b.n	800b270 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b272:	6978      	ldr	r0, [r7, #20]
 800b274:	f7ff f8de 	bl	800a434 <tcp_oos_insert_segment>
                }
                break;
 800b278:	e139      	b.n	800b4ee <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d117      	bne.n	800b2b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b280:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <tcp_receive+0xd00>)
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	da57      	bge.n	800b340 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b290:	4829      	ldr	r0, [pc, #164]	; (800b338 <tcp_receive+0xcfc>)
 800b292:	f7fd fab9 	bl	8008808 <tcp_seg_copy>
 800b296:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8129 	beq.w	800b4f2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b2a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2a8:	69b8      	ldr	r0, [r7, #24]
 800b2aa:	f7ff f8c3 	bl	800a434 <tcp_oos_insert_segment>
                  }
                  break;
 800b2ae:	e120      	b.n	800b4f2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b2b0:	4b22      	ldr	r3, [pc, #136]	; (800b33c <tcp_receive+0xd00>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	db3e      	blt.n	800b340 <tcp_receive+0xd04>
 800b2c2:	4b1e      	ldr	r3, [pc, #120]	; (800b33c <tcp_receive+0xd00>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dc35      	bgt.n	800b340 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b2d4:	4818      	ldr	r0, [pc, #96]	; (800b338 <tcp_receive+0xcfc>)
 800b2d6:	f7fd fa97 	bl	8008808 <tcp_seg_copy>
 800b2da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 8109 	beq.w	800b4f6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ec:	8912      	ldrh	r2, [r2, #8]
 800b2ee:	441a      	add	r2, r3
 800b2f0:	4b12      	ldr	r3, [pc, #72]	; (800b33c <tcp_receive+0xd00>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dd12      	ble.n	800b320 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <tcp_receive+0xd00>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b29b      	uxth	r3, r3
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b316:	891b      	ldrh	r3, [r3, #8]
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f7fb fc7a 	bl	8006c14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b328:	69f8      	ldr	r0, [r7, #28]
 800b32a:	f7ff f883 	bl	800a434 <tcp_oos_insert_segment>
                  }
                  break;
 800b32e:	e0e2      	b.n	800b4f6 <tcp_receive+0xeba>
 800b330:	20000100 	.word	0x20000100
 800b334:	200000fd 	.word	0x200000fd
 800b338:	200000d0 	.word	0x200000d0
 800b33c:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f040 80c6 	bne.w	800b4da <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b34e:	4b80      	ldr	r3, [pc, #512]	; (800b550 <tcp_receive+0xf14>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f340 80bd 	ble.w	800b4da <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	899b      	ldrh	r3, [r3, #12]
 800b366:	b29b      	uxth	r3, r3
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fa fb25 	bl	80059b8 <lwip_htons>
 800b36e:	4603      	mov	r3, r0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 80bf 	bne.w	800b4fa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b37c:	4875      	ldr	r0, [pc, #468]	; (800b554 <tcp_receive+0xf18>)
 800b37e:	f7fd fa43 	bl	8008808 <tcp_seg_copy>
 800b382:	4602      	mov	r2, r0
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 80b6 	beq.w	800b4fe <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b39a:	8912      	ldrh	r2, [r2, #8]
 800b39c:	441a      	add	r2, r3
 800b39e:	4b6c      	ldr	r3, [pc, #432]	; (800b550 <tcp_receive+0xf14>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd12      	ble.n	800b3ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b3a8:	4b69      	ldr	r3, [pc, #420]	; (800b550 <tcp_receive+0xf14>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c4:	891b      	ldrh	r3, [r3, #8]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7fb fc23 	bl	8006c14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b3ce:	4b62      	ldr	r3, [pc, #392]	; (800b558 <tcp_receive+0xf1c>)
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4b5e      	ldr	r3, [pc, #376]	; (800b550 <tcp_receive+0xf14>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	441a      	add	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3e2:	440b      	add	r3, r1
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f340 8089 	ble.w	800b4fe <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	899b      	ldrh	r3, [r3, #12]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fa fade 	bl	80059b8 <lwip_htons>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b00      	cmp	r3, #0
 800b406:	d022      	beq.n	800b44e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	899b      	ldrh	r3, [r3, #12]
 800b410:	b29b      	uxth	r3, r3
 800b412:	b21b      	sxth	r3, r3
 800b414:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b418:	b21c      	sxth	r4, r3
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	b29b      	uxth	r3, r3
 800b424:	4618      	mov	r0, r3
 800b426:	f7fa fac7 	bl	80059b8 <lwip_htons>
 800b42a:	4603      	mov	r3, r0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	b29b      	uxth	r3, r3
 800b430:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b434:	b29b      	uxth	r3, r3
 800b436:	4618      	mov	r0, r3
 800b438:	f7fa fabe 	bl	80059b8 <lwip_htons>
 800b43c:	4603      	mov	r3, r0
 800b43e:	b21b      	sxth	r3, r3
 800b440:	4323      	orrs	r3, r4
 800b442:	b21a      	sxth	r2, r3
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	b292      	uxth	r2, r2
 800b44c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b458:	4413      	add	r3, r2
 800b45a:	b299      	uxth	r1, r3
 800b45c:	4b3c      	ldr	r3, [pc, #240]	; (800b550 <tcp_receive+0xf14>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	b29a      	uxth	r2, r3
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	1a8a      	subs	r2, r1, r2
 800b468:	b292      	uxth	r2, r2
 800b46a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	891b      	ldrh	r3, [r3, #8]
 800b478:	4619      	mov	r1, r3
 800b47a:	4610      	mov	r0, r2
 800b47c:	f7fb fbca 	bl	8006c14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	891c      	ldrh	r4, [r3, #8]
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	899b      	ldrh	r3, [r3, #12]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	4618      	mov	r0, r3
 800b492:	f7fa fa91 	bl	80059b8 <lwip_htons>
 800b496:	4603      	mov	r3, r0
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <tcp_receive+0xe6a>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <tcp_receive+0xe6c>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4423      	add	r3, r4
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	4b2a      	ldr	r3, [pc, #168]	; (800b558 <tcp_receive+0xf1c>)
 800b4ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4b0:	4b29      	ldr	r3, [pc, #164]	; (800b558 <tcp_receive+0xf1c>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	4b26      	ldr	r3, [pc, #152]	; (800b550 <tcp_receive+0xf14>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	441a      	add	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4c4:	440b      	add	r3, r1
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d019      	beq.n	800b4fe <tcp_receive+0xec2>
 800b4ca:	4b24      	ldr	r3, [pc, #144]	; (800b55c <tcp_receive+0xf20>)
 800b4cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b4d0:	4923      	ldr	r1, [pc, #140]	; (800b560 <tcp_receive+0xf24>)
 800b4d2:	4824      	ldr	r0, [pc, #144]	; (800b564 <tcp_receive+0xf28>)
 800b4d4:	f007 f826 	bl	8012524 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b4d8:	e011      	b.n	800b4fe <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f47f aea4 	bne.w	800b230 <tcp_receive+0xbf4>
 800b4e8:	e00a      	b.n	800b500 <tcp_receive+0xec4>
                break;
 800b4ea:	bf00      	nop
 800b4ec:	e008      	b.n	800b500 <tcp_receive+0xec4>
                break;
 800b4ee:	bf00      	nop
 800b4f0:	e006      	b.n	800b500 <tcp_receive+0xec4>
                  break;
 800b4f2:	bf00      	nop
 800b4f4:	e004      	b.n	800b500 <tcp_receive+0xec4>
                  break;
 800b4f6:	bf00      	nop
 800b4f8:	e002      	b.n	800b500 <tcp_receive+0xec4>
                  break;
 800b4fa:	bf00      	nop
 800b4fc:	e000      	b.n	800b500 <tcp_receive+0xec4>
                break;
 800b4fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f001 fe8b 	bl	800d21c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b506:	e003      	b.n	800b510 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 fe87 	bl	800d21c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b50e:	e01a      	b.n	800b546 <tcp_receive+0xf0a>
 800b510:	e019      	b.n	800b546 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <tcp_receive+0xf14>)
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	db0a      	blt.n	800b536 <tcp_receive+0xefa>
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <tcp_receive+0xf14>)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b52c:	440b      	add	r3, r1
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	3301      	adds	r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	dd07      	ble.n	800b546 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8b5b      	ldrh	r3, [r3, #26]
 800b53a:	f043 0302 	orr.w	r3, r3, #2
 800b53e:	b29a      	uxth	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b544:	e7ff      	b.n	800b546 <tcp_receive+0xf0a>
 800b546:	bf00      	nop
 800b548:	3750      	adds	r7, #80	; 0x50
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bdb0      	pop	{r4, r5, r7, pc}
 800b54e:	bf00      	nop
 800b550:	200000f0 	.word	0x200000f0
 800b554:	200000d0 	.word	0x200000d0
 800b558:	200000fa 	.word	0x200000fa
 800b55c:	08014890 	.word	0x08014890
 800b560:	08014c38 	.word	0x08014c38
 800b564:	080148dc 	.word	0x080148dc

0800b568 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b56e:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <tcp_get_next_optbyte+0x5c>)
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	b291      	uxth	r1, r2
 800b576:	4a13      	ldr	r2, [pc, #76]	; (800b5c4 <tcp_get_next_optbyte+0x5c>)
 800b578:	8011      	strh	r1, [r2, #0]
 800b57a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b57c:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <tcp_get_next_optbyte+0x60>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d004      	beq.n	800b58e <tcp_get_next_optbyte+0x26>
 800b584:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <tcp_get_next_optbyte+0x64>)
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	88fa      	ldrh	r2, [r7, #6]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d208      	bcs.n	800b5a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b58e:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <tcp_get_next_optbyte+0x68>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3314      	adds	r3, #20
 800b594:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b596:	88fb      	ldrh	r3, [r7, #6]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	4413      	add	r3, r2
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	e00b      	b.n	800b5b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <tcp_get_next_optbyte+0x64>)
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b5ae:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <tcp_get_next_optbyte+0x60>)
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	797b      	ldrb	r3, [r7, #5]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	200000ec 	.word	0x200000ec
 800b5c8:	200000e8 	.word	0x200000e8
 800b5cc:	200000e6 	.word	0x200000e6
 800b5d0:	200000e0 	.word	0x200000e0

0800b5d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <tcp_parseopt+0x1c>
 800b5e2:	4b32      	ldr	r3, [pc, #200]	; (800b6ac <tcp_parseopt+0xd8>)
 800b5e4:	f240 727d 	movw	r2, #1917	; 0x77d
 800b5e8:	4931      	ldr	r1, [pc, #196]	; (800b6b0 <tcp_parseopt+0xdc>)
 800b5ea:	4832      	ldr	r0, [pc, #200]	; (800b6b4 <tcp_parseopt+0xe0>)
 800b5ec:	f006 ff9a 	bl	8012524 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b5f0:	4b31      	ldr	r3, [pc, #196]	; (800b6b8 <tcp_parseopt+0xe4>)
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d055      	beq.n	800b6a4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b5f8:	4b30      	ldr	r3, [pc, #192]	; (800b6bc <tcp_parseopt+0xe8>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	e045      	b.n	800b68c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b600:	f7ff ffb2 	bl	800b568 <tcp_get_next_optbyte>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d006      	beq.n	800b61c <tcp_parseopt+0x48>
 800b60e:	2b02      	cmp	r3, #2
 800b610:	dc2b      	bgt.n	800b66a <tcp_parseopt+0x96>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d041      	beq.n	800b69a <tcp_parseopt+0xc6>
 800b616:	2b01      	cmp	r3, #1
 800b618:	d127      	bne.n	800b66a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b61a:	e037      	b.n	800b68c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b61c:	f7ff ffa4 	bl	800b568 <tcp_get_next_optbyte>
 800b620:	4603      	mov	r3, r0
 800b622:	2b04      	cmp	r3, #4
 800b624:	d13b      	bne.n	800b69e <tcp_parseopt+0xca>
 800b626:	4b25      	ldr	r3, [pc, #148]	; (800b6bc <tcp_parseopt+0xe8>)
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	4a22      	ldr	r2, [pc, #136]	; (800b6b8 <tcp_parseopt+0xe4>)
 800b62e:	8812      	ldrh	r2, [r2, #0]
 800b630:	4293      	cmp	r3, r2
 800b632:	da34      	bge.n	800b69e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b634:	f7ff ff98 	bl	800b568 <tcp_get_next_optbyte>
 800b638:	4603      	mov	r3, r0
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b640:	f7ff ff92 	bl	800b568 <tcp_get_next_optbyte>
 800b644:	4603      	mov	r3, r0
 800b646:	b29a      	uxth	r2, r3
 800b648:	89bb      	ldrh	r3, [r7, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b64e:	89bb      	ldrh	r3, [r7, #12]
 800b650:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b654:	d804      	bhi.n	800b660 <tcp_parseopt+0x8c>
 800b656:	89bb      	ldrh	r3, [r7, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <tcp_parseopt+0x8c>
 800b65c:	89ba      	ldrh	r2, [r7, #12]
 800b65e:	e001      	b.n	800b664 <tcp_parseopt+0x90>
 800b660:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b668:	e010      	b.n	800b68c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b66a:	f7ff ff7d 	bl	800b568 <tcp_get_next_optbyte>
 800b66e:	4603      	mov	r3, r0
 800b670:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d914      	bls.n	800b6a2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <tcp_parseopt+0xe8>)
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	4413      	add	r3, r2
 800b682:	b29b      	uxth	r3, r3
 800b684:	3b02      	subs	r3, #2
 800b686:	b29a      	uxth	r2, r3
 800b688:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <tcp_parseopt+0xe8>)
 800b68a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b68c:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <tcp_parseopt+0xe8>)
 800b68e:	881a      	ldrh	r2, [r3, #0]
 800b690:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <tcp_parseopt+0xe4>)
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	429a      	cmp	r2, r3
 800b696:	d3b3      	bcc.n	800b600 <tcp_parseopt+0x2c>
 800b698:	e004      	b.n	800b6a4 <tcp_parseopt+0xd0>
          return;
 800b69a:	bf00      	nop
 800b69c:	e002      	b.n	800b6a4 <tcp_parseopt+0xd0>
            return;
 800b69e:	bf00      	nop
 800b6a0:	e000      	b.n	800b6a4 <tcp_parseopt+0xd0>
            return;
 800b6a2:	bf00      	nop
      }
    }
  }
}
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	08014890 	.word	0x08014890
 800b6b0:	08014cf4 	.word	0x08014cf4
 800b6b4:	080148dc 	.word	0x080148dc
 800b6b8:	200000e4 	.word	0x200000e4
 800b6bc:	200000ec 	.word	0x200000ec

0800b6c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <tcp_trigger_input_pcb_close+0x1c>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f043 0310 	orr.w	r3, r3, #16
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4b03      	ldr	r3, [pc, #12]	; (800b6dc <tcp_trigger_input_pcb_close+0x1c>)
 800b6d0:	701a      	strb	r2, [r3, #0]
}
 800b6d2:	bf00      	nop
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	200000fd 	.word	0x200000fd

0800b6e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <tcp_route+0x28>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	7a1b      	ldrb	r3, [r3, #8]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d006      	beq.n	800b708 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	7a1b      	ldrb	r3, [r3, #8]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fb f8ae 	bl	8006860 <netif_get_by_index>
 800b704:	4603      	mov	r3, r0
 800b706:	e003      	b.n	800b710 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f003 fad5 	bl	800ecb8 <ip4_route>
 800b70e:	4603      	mov	r3, r0
  }
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	4613      	mov	r3, r2
 800b726:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d105      	bne.n	800b73a <tcp_create_segment+0x22>
 800b72e:	4b44      	ldr	r3, [pc, #272]	; (800b840 <tcp_create_segment+0x128>)
 800b730:	22a3      	movs	r2, #163	; 0xa3
 800b732:	4944      	ldr	r1, [pc, #272]	; (800b844 <tcp_create_segment+0x12c>)
 800b734:	4844      	ldr	r0, [pc, #272]	; (800b848 <tcp_create_segment+0x130>)
 800b736:	f006 fef5 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d105      	bne.n	800b74c <tcp_create_segment+0x34>
 800b740:	4b3f      	ldr	r3, [pc, #252]	; (800b840 <tcp_create_segment+0x128>)
 800b742:	22a4      	movs	r2, #164	; 0xa4
 800b744:	4941      	ldr	r1, [pc, #260]	; (800b84c <tcp_create_segment+0x134>)
 800b746:	4840      	ldr	r0, [pc, #256]	; (800b848 <tcp_create_segment+0x130>)
 800b748:	f006 feec 	bl	8012524 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b74c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b75a:	2003      	movs	r0, #3
 800b75c:	f7fa fd82 	bl	8006264 <memp_malloc>
 800b760:	6138      	str	r0, [r7, #16]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d104      	bne.n	800b772 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f7fb fbd9 	bl	8006f20 <pbuf_free>
    return NULL;
 800b76e:	2300      	movs	r3, #0
 800b770:	e061      	b.n	800b836 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b778:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	891a      	ldrh	r2, [r3, #8]
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	429a      	cmp	r2, r3
 800b790:	d205      	bcs.n	800b79e <tcp_create_segment+0x86>
 800b792:	4b2b      	ldr	r3, [pc, #172]	; (800b840 <tcp_create_segment+0x128>)
 800b794:	22b0      	movs	r2, #176	; 0xb0
 800b796:	492e      	ldr	r1, [pc, #184]	; (800b850 <tcp_create_segment+0x138>)
 800b798:	482b      	ldr	r0, [pc, #172]	; (800b848 <tcp_create_segment+0x130>)
 800b79a:	f006 fec3 	bl	8012524 <iprintf>
  seg->len = p->tot_len - optlen;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	891a      	ldrh	r2, [r3, #8]
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b7ae:	2114      	movs	r1, #20
 800b7b0:	68b8      	ldr	r0, [r7, #8]
 800b7b2:	f7fb fb1f 	bl	8006df4 <pbuf_add_header>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b7bc:	6938      	ldr	r0, [r7, #16]
 800b7be:	f7fc ffec 	bl	800879a <tcp_seg_free>
    return NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e037      	b.n	800b836 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8ada      	ldrh	r2, [r3, #22]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	68dc      	ldr	r4, [r3, #12]
 800b7d8:	4610      	mov	r0, r2
 800b7da:	f7fa f8ed 	bl	80059b8 <lwip_htons>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	8b1a      	ldrh	r2, [r3, #24]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	68dc      	ldr	r4, [r3, #12]
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	f7fa f8e4 	bl	80059b8 <lwip_htons>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	68dc      	ldr	r4, [r3, #12]
 800b7f8:	6838      	ldr	r0, [r7, #0]
 800b7fa:	f7fa f8f2 	bl	80059e2 <lwip_htonl>
 800b7fe:	4603      	mov	r3, r0
 800b800:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	089b      	lsrs	r3, r3, #2
 800b806:	b2db      	uxtb	r3, r3
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3305      	adds	r3, #5
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	031b      	lsls	r3, r3, #12
 800b810:	b29a      	uxth	r2, r3
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	b29b      	uxth	r3, r3
 800b816:	4313      	orrs	r3, r2
 800b818:	b29a      	uxth	r2, r3
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	68dc      	ldr	r4, [r3, #12]
 800b81e:	4610      	mov	r0, r2
 800b820:	f7fa f8ca 	bl	80059b8 <lwip_htons>
 800b824:	4603      	mov	r3, r0
 800b826:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	749a      	strb	r2, [r3, #18]
 800b830:	2200      	movs	r2, #0
 800b832:	74da      	strb	r2, [r3, #19]
  return seg;
 800b834:	693b      	ldr	r3, [r7, #16]
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd90      	pop	{r4, r7, pc}
 800b83e:	bf00      	nop
 800b840:	08014d10 	.word	0x08014d10
 800b844:	08014d44 	.word	0x08014d44
 800b848:	08014d64 	.word	0x08014d64
 800b84c:	08014d8c 	.word	0x08014d8c
 800b850:	08014db0 	.word	0x08014db0

0800b854 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	607b      	str	r3, [r7, #4]
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
 800b860:	460b      	mov	r3, r1
 800b862:	81bb      	strh	r3, [r7, #12]
 800b864:	4613      	mov	r3, r2
 800b866:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b868:	89bb      	ldrh	r3, [r7, #12]
 800b86a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d105      	bne.n	800b87e <tcp_pbuf_prealloc+0x2a>
 800b872:	4b30      	ldr	r3, [pc, #192]	; (800b934 <tcp_pbuf_prealloc+0xe0>)
 800b874:	22e8      	movs	r2, #232	; 0xe8
 800b876:	4930      	ldr	r1, [pc, #192]	; (800b938 <tcp_pbuf_prealloc+0xe4>)
 800b878:	4830      	ldr	r0, [pc, #192]	; (800b93c <tcp_pbuf_prealloc+0xe8>)
 800b87a:	f006 fe53 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d105      	bne.n	800b890 <tcp_pbuf_prealloc+0x3c>
 800b884:	4b2b      	ldr	r3, [pc, #172]	; (800b934 <tcp_pbuf_prealloc+0xe0>)
 800b886:	22e9      	movs	r2, #233	; 0xe9
 800b888:	492d      	ldr	r1, [pc, #180]	; (800b940 <tcp_pbuf_prealloc+0xec>)
 800b88a:	482c      	ldr	r0, [pc, #176]	; (800b93c <tcp_pbuf_prealloc+0xe8>)
 800b88c:	f006 fe4a 	bl	8012524 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b890:	89ba      	ldrh	r2, [r7, #12]
 800b892:	897b      	ldrh	r3, [r7, #10]
 800b894:	429a      	cmp	r2, r3
 800b896:	d221      	bcs.n	800b8dc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d111      	bne.n	800b8c8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	8b5b      	ldrh	r3, [r3, #26]
 800b8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d115      	bne.n	800b8dc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b8b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d009      	beq.n	800b8dc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b8c8:	89bb      	ldrh	r3, [r7, #12]
 800b8ca:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b8ce:	f023 0203 	bic.w	r2, r3, #3
 800b8d2:	897b      	ldrh	r3, [r7, #10]
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	bf28      	it	cs
 800b8d8:	4613      	movcs	r3, r2
 800b8da:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b8dc:	8af9      	ldrh	r1, [r7, #22]
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fb f837 	bl	8006958 <pbuf_alloc>
 800b8ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e019      	b.n	800b92a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d006      	beq.n	800b90c <tcp_pbuf_prealloc+0xb8>
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <tcp_pbuf_prealloc+0xe0>)
 800b900:	f240 120b 	movw	r2, #267	; 0x10b
 800b904:	490f      	ldr	r1, [pc, #60]	; (800b944 <tcp_pbuf_prealloc+0xf0>)
 800b906:	480d      	ldr	r0, [pc, #52]	; (800b93c <tcp_pbuf_prealloc+0xe8>)
 800b908:	f006 fe0c 	bl	8012524 <iprintf>
  *oversize = p->len - length;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	895a      	ldrh	r2, [r3, #10]
 800b910:	89bb      	ldrh	r3, [r7, #12]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	b29a      	uxth	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	89ba      	ldrh	r2, [r7, #12]
 800b91e:	811a      	strh	r2, [r3, #8]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	891a      	ldrh	r2, [r3, #8]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	815a      	strh	r2, [r3, #10]
  return p;
 800b928:	693b      	ldr	r3, [r7, #16]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	08014d10 	.word	0x08014d10
 800b938:	08014dc8 	.word	0x08014dc8
 800b93c:	08014d64 	.word	0x08014d64
 800b940:	08014dec 	.word	0x08014dec
 800b944:	08014e0c 	.word	0x08014e0c

0800b948 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <tcp_write_checks+0x20>
 800b95a:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <tcp_write_checks+0xe0>)
 800b95c:	f240 1233 	movw	r2, #307	; 0x133
 800b960:	4932      	ldr	r1, [pc, #200]	; (800ba2c <tcp_write_checks+0xe4>)
 800b962:	4833      	ldr	r0, [pc, #204]	; (800ba30 <tcp_write_checks+0xe8>)
 800b964:	f006 fdde 	bl	8012524 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	7d1b      	ldrb	r3, [r3, #20]
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d00e      	beq.n	800b98e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b974:	2b07      	cmp	r3, #7
 800b976:	d00a      	beq.n	800b98e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d006      	beq.n	800b98e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b984:	2b03      	cmp	r3, #3
 800b986:	d002      	beq.n	800b98e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b988:	f06f 030a 	mvn.w	r3, #10
 800b98c:	e048      	b.n	800ba20 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b98e:	887b      	ldrh	r3, [r7, #2]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <tcp_write_checks+0x50>
    return ERR_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	e043      	b.n	800ba20 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b99e:	887a      	ldrh	r2, [r7, #2]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d909      	bls.n	800b9b8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	8b5b      	ldrh	r3, [r3, #26]
 800b9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b6:	e033      	b.n	800ba20 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9be:	2b08      	cmp	r3, #8
 800b9c0:	d909      	bls.n	800b9d6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8b5b      	ldrh	r3, [r3, #26]
 800b9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d4:	e024      	b.n	800ba20 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00f      	beq.n	800ba00 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d11a      	bne.n	800ba1e <tcp_write_checks+0xd6>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d116      	bne.n	800ba1e <tcp_write_checks+0xd6>
 800b9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ba28 <tcp_write_checks+0xe0>)
 800b9f2:	f240 1255 	movw	r2, #341	; 0x155
 800b9f6:	490f      	ldr	r1, [pc, #60]	; (800ba34 <tcp_write_checks+0xec>)
 800b9f8:	480d      	ldr	r0, [pc, #52]	; (800ba30 <tcp_write_checks+0xe8>)
 800b9fa:	f006 fd93 	bl	8012524 <iprintf>
 800b9fe:	e00e      	b.n	800ba1e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d103      	bne.n	800ba10 <tcp_write_checks+0xc8>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d006      	beq.n	800ba1e <tcp_write_checks+0xd6>
 800ba10:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <tcp_write_checks+0xe0>)
 800ba12:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ba16:	4908      	ldr	r1, [pc, #32]	; (800ba38 <tcp_write_checks+0xf0>)
 800ba18:	4805      	ldr	r0, [pc, #20]	; (800ba30 <tcp_write_checks+0xe8>)
 800ba1a:	f006 fd83 	bl	8012524 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	08014d10 	.word	0x08014d10
 800ba2c:	08014e20 	.word	0x08014e20
 800ba30:	08014d64 	.word	0x08014d64
 800ba34:	08014e40 	.word	0x08014e40
 800ba38:	08014e7c 	.word	0x08014e7c

0800ba3c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b09b      	sub	sp, #108	; 0x6c
 800ba40:	af04      	add	r7, sp, #16
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	4611      	mov	r1, r2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	80fb      	strh	r3, [r7, #6]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	653b      	str	r3, [r7, #80]	; 0x50
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba5e:	2300      	movs	r3, #0
 800ba60:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba62:	2300      	movs	r3, #0
 800ba64:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ba66:	2300      	movs	r3, #0
 800ba68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d109      	bne.n	800ba98 <tcp_write+0x5c>
 800ba84:	4ba4      	ldr	r3, [pc, #656]	; (800bd18 <tcp_write+0x2dc>)
 800ba86:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ba8a:	49a4      	ldr	r1, [pc, #656]	; (800bd1c <tcp_write+0x2e0>)
 800ba8c:	48a4      	ldr	r0, [pc, #656]	; (800bd20 <tcp_write+0x2e4>)
 800ba8e:	f006 fd49 	bl	8012524 <iprintf>
 800ba92:	f06f 030f 	mvn.w	r3, #15
 800ba96:	e32a      	b.n	800c0ee <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba9e:	085b      	lsrs	r3, r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa6:	4293      	cmp	r3, r2
 800baa8:	bf28      	it	cs
 800baaa:	4613      	movcs	r3, r2
 800baac:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800baae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <tcp_write+0x7e>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bab8:	e000      	b.n	800babc <tcp_write+0x80>
 800baba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800babc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <tcp_write+0x9c>
 800bac4:	4b94      	ldr	r3, [pc, #592]	; (800bd18 <tcp_write+0x2dc>)
 800bac6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800baca:	4996      	ldr	r1, [pc, #600]	; (800bd24 <tcp_write+0x2e8>)
 800bacc:	4894      	ldr	r0, [pc, #592]	; (800bd20 <tcp_write+0x2e4>)
 800bace:	f006 fd29 	bl	8012524 <iprintf>
 800bad2:	f06f 030f 	mvn.w	r3, #15
 800bad6:	e30a      	b.n	800c0ee <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	4619      	mov	r1, r3
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff ff33 	bl	800b948 <tcp_write_checks>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bae8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <tcp_write+0xba>
    return err;
 800baf0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800baf4:	e2fb      	b.n	800c0ee <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bafc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb00:	2300      	movs	r3, #0
 800bb02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 80f6 	beq.w	800bcfc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb14:	653b      	str	r3, [r7, #80]	; 0x50
 800bb16:	e002      	b.n	800bb1e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1f8      	bne.n	800bb18 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb28:	7a9b      	ldrb	r3, [r3, #10]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bb34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb38:	891b      	ldrh	r3, [r3, #8]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	8c3b      	ldrh	r3, [r7, #32]
 800bb3e:	440b      	add	r3, r1
 800bb40:	429a      	cmp	r2, r3
 800bb42:	da06      	bge.n	800bb52 <tcp_write+0x116>
 800bb44:	4b74      	ldr	r3, [pc, #464]	; (800bd18 <tcp_write+0x2dc>)
 800bb46:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bb4a:	4977      	ldr	r1, [pc, #476]	; (800bd28 <tcp_write+0x2ec>)
 800bb4c:	4874      	ldr	r0, [pc, #464]	; (800bd20 <tcp_write+0x2e4>)
 800bb4e:	f006 fce9 	bl	8012524 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb54:	891a      	ldrh	r2, [r3, #8]
 800bb56:	8c3b      	ldrh	r3, [r7, #32]
 800bb58:	4413      	add	r3, r2
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb68:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bb6a:	8a7b      	ldrh	r3, [r7, #18]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d026      	beq.n	800bbbe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bb70:	8a7b      	ldrh	r3, [r7, #18]
 800bb72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d206      	bcs.n	800bb86 <tcp_write+0x14a>
 800bb78:	4b67      	ldr	r3, [pc, #412]	; (800bd18 <tcp_write+0x2dc>)
 800bb7a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bb7e:	496b      	ldr	r1, [pc, #428]	; (800bd2c <tcp_write+0x2f0>)
 800bb80:	4867      	ldr	r0, [pc, #412]	; (800bd20 <tcp_write+0x2e4>)
 800bb82:	f006 fccf 	bl	8012524 <iprintf>
      seg = last_unsent;
 800bb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb88:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bb8a:	8a7b      	ldrh	r3, [r7, #18]
 800bb8c:	88fa      	ldrh	r2, [r7, #6]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	bf28      	it	cs
 800bb92:	4613      	movcs	r3, r2
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	bf28      	it	cs
 800bb9c:	4613      	movcs	r3, r2
 800bb9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bba6:	4413      	add	r3, r2
 800bba8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800bbac:	8a7a      	ldrh	r2, [r7, #18]
 800bbae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bbb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bbb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bbbe:	8a7b      	ldrh	r3, [r7, #18]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <tcp_write+0x1a0>
 800bbc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bbc8:	88fb      	ldrh	r3, [r7, #6]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d006      	beq.n	800bbdc <tcp_write+0x1a0>
 800bbce:	4b52      	ldr	r3, [pc, #328]	; (800bd18 <tcp_write+0x2dc>)
 800bbd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbd4:	4956      	ldr	r1, [pc, #344]	; (800bd30 <tcp_write+0x2f4>)
 800bbd6:	4852      	ldr	r0, [pc, #328]	; (800bd20 <tcp_write+0x2e4>)
 800bbd8:	f006 fca4 	bl	8012524 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bbdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	f080 8167 	bcs.w	800beb6 <tcp_write+0x47a>
 800bbe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 8163 	beq.w	800beb6 <tcp_write+0x47a>
 800bbf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf2:	891b      	ldrh	r3, [r3, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 815e 	beq.w	800beb6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bbfa:	88fa      	ldrh	r2, [r7, #6]
 800bbfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc00:	1ad2      	subs	r2, r2, r3
 800bc02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc04:	4293      	cmp	r3, r2
 800bc06:	bfa8      	it	ge
 800bc08:	4613      	movge	r3, r2
 800bc0a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc0e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc10:	797b      	ldrb	r3, [r7, #5]
 800bc12:	f003 0301 	and.w	r3, r3, #1
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d027      	beq.n	800bc6a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bc1a:	f107 0012 	add.w	r0, r7, #18
 800bc1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bc20:	8bf9      	ldrh	r1, [r7, #30]
 800bc22:	2301      	movs	r3, #1
 800bc24:	9302      	str	r3, [sp, #8]
 800bc26:	797b      	ldrb	r3, [r7, #5]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2000      	movs	r0, #0
 800bc32:	f7ff fe0f 	bl	800b854 <tcp_pbuf_prealloc>
 800bc36:	6578      	str	r0, [r7, #84]	; 0x54
 800bc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 8225 	beq.w	800c08a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc42:	6858      	ldr	r0, [r3, #4]
 800bc44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	8bfa      	ldrh	r2, [r7, #30]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f006 fc52 	bl	80124f8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bc54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc56:	f7fb f9eb 	bl	8007030 <pbuf_clen>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc62:	4413      	add	r3, r2
 800bc64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bc68:	e041      	b.n	800bcee <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc70:	e002      	b.n	800bc78 <tcp_write+0x23c>
 800bc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1f8      	bne.n	800bc72 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc82:	7b1b      	ldrb	r3, [r3, #12]
 800bc84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d115      	bne.n	800bcb8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc92:	8952      	ldrh	r2, [r2, #10]
 800bc94:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d10d      	bne.n	800bcb8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bc9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d006      	beq.n	800bcb2 <tcp_write+0x276>
 800bca4:	4b1c      	ldr	r3, [pc, #112]	; (800bd18 <tcp_write+0x2dc>)
 800bca6:	f240 2231 	movw	r2, #561	; 0x231
 800bcaa:	4922      	ldr	r1, [pc, #136]	; (800bd34 <tcp_write+0x2f8>)
 800bcac:	481c      	ldr	r0, [pc, #112]	; (800bd20 <tcp_write+0x2e4>)
 800bcae:	f006 fc39 	bl	8012524 <iprintf>
          extendlen = seglen;
 800bcb2:	8bfb      	ldrh	r3, [r7, #30]
 800bcb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bcb6:	e01a      	b.n	800bcee <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bcb8:	8bfb      	ldrh	r3, [r7, #30]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f7fa fe4a 	bl	8006958 <pbuf_alloc>
 800bcc4:	6578      	str	r0, [r7, #84]	; 0x54
 800bcc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 81e0 	beq.w	800c08e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bcce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	441a      	add	r2, r3
 800bcd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcd8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bcda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bcdc:	f7fb f9a8 	bl	8007030 <pbuf_clen>
 800bce0:	4603      	mov	r3, r0
 800bce2:	461a      	mov	r2, r3
 800bce4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bce8:	4413      	add	r3, r2
 800bcea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bcee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bcf2:	8bfb      	ldrh	r3, [r7, #30]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bcfa:	e0dc      	b.n	800beb6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 80d7 	beq.w	800beb6 <tcp_write+0x47a>
 800bd08:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <tcp_write+0x2dc>)
 800bd0a:	f240 224a 	movw	r2, #586	; 0x24a
 800bd0e:	490a      	ldr	r1, [pc, #40]	; (800bd38 <tcp_write+0x2fc>)
 800bd10:	4803      	ldr	r0, [pc, #12]	; (800bd20 <tcp_write+0x2e4>)
 800bd12:	f006 fc07 	bl	8012524 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800bd16:	e0ce      	b.n	800beb6 <tcp_write+0x47a>
 800bd18:	08014d10 	.word	0x08014d10
 800bd1c:	08014eb0 	.word	0x08014eb0
 800bd20:	08014d64 	.word	0x08014d64
 800bd24:	08014ec8 	.word	0x08014ec8
 800bd28:	08014efc 	.word	0x08014efc
 800bd2c:	08014f14 	.word	0x08014f14
 800bd30:	08014f34 	.word	0x08014f34
 800bd34:	08014f54 	.word	0x08014f54
 800bd38:	08014f80 	.word	0x08014f80
    struct pbuf *p;
    u16_t left = len - pos;
 800bd3c:	88fa      	ldrh	r2, [r7, #6]
 800bd3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bd46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bd52:	8b7a      	ldrh	r2, [r7, #26]
 800bd54:	8bbb      	ldrh	r3, [r7, #28]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	bf28      	it	cs
 800bd5a:	4613      	movcs	r3, r2
 800bd5c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd5e:	797b      	ldrb	r3, [r7, #5]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d036      	beq.n	800bdd6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bd68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	8b3b      	ldrh	r3, [r7, #24]
 800bd70:	4413      	add	r3, r2
 800bd72:	b299      	uxth	r1, r3
 800bd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	bf0c      	ite	eq
 800bd7a:	2301      	moveq	r3, #1
 800bd7c:	2300      	movne	r3, #0
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f107 0012 	add.w	r0, r7, #18
 800bd84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd86:	9302      	str	r3, [sp, #8]
 800bd88:	797b      	ldrb	r3, [r7, #5]
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	4603      	mov	r3, r0
 800bd92:	2036      	movs	r0, #54	; 0x36
 800bd94:	f7ff fd5e 	bl	800b854 <tcp_pbuf_prealloc>
 800bd98:	6338      	str	r0, [r7, #48]	; 0x30
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8178 	beq.w	800c092 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	895b      	ldrh	r3, [r3, #10]
 800bda6:	8b3a      	ldrh	r2, [r7, #24]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d906      	bls.n	800bdba <tcp_write+0x37e>
 800bdac:	4b8c      	ldr	r3, [pc, #560]	; (800bfe0 <tcp_write+0x5a4>)
 800bdae:	f240 2266 	movw	r2, #614	; 0x266
 800bdb2:	498c      	ldr	r1, [pc, #560]	; (800bfe4 <tcp_write+0x5a8>)
 800bdb4:	488c      	ldr	r0, [pc, #560]	; (800bfe8 <tcp_write+0x5ac>)
 800bdb6:	f006 fbb5 	bl	8012524 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bdc2:	18d0      	adds	r0, r2, r3
 800bdc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	4413      	add	r3, r2
 800bdcc:	8b3a      	ldrh	r2, [r7, #24]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f006 fb92 	bl	80124f8 <memcpy>
 800bdd4:	e02f      	b.n	800be36 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bdd6:	8a7b      	ldrh	r3, [r7, #18]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d006      	beq.n	800bdea <tcp_write+0x3ae>
 800bddc:	4b80      	ldr	r3, [pc, #512]	; (800bfe0 <tcp_write+0x5a4>)
 800bdde:	f240 2271 	movw	r2, #625	; 0x271
 800bde2:	4982      	ldr	r1, [pc, #520]	; (800bfec <tcp_write+0x5b0>)
 800bde4:	4880      	ldr	r0, [pc, #512]	; (800bfe8 <tcp_write+0x5ac>)
 800bde6:	f006 fb9d 	bl	8012524 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bdea:	8b3b      	ldrh	r3, [r7, #24]
 800bdec:	2201      	movs	r2, #1
 800bdee:	4619      	mov	r1, r3
 800bdf0:	2036      	movs	r0, #54	; 0x36
 800bdf2:	f7fa fdb1 	bl	8006958 <pbuf_alloc>
 800bdf6:	6178      	str	r0, [r7, #20]
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 814b 	beq.w	800c096 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800be00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	441a      	add	r2, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800be0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be10:	b29b      	uxth	r3, r3
 800be12:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be16:	4619      	mov	r1, r3
 800be18:	2036      	movs	r0, #54	; 0x36
 800be1a:	f7fa fd9d 	bl	8006958 <pbuf_alloc>
 800be1e:	6338      	str	r0, [r7, #48]	; 0x30
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	2b00      	cmp	r3, #0
 800be24:	d103      	bne.n	800be2e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800be26:	6978      	ldr	r0, [r7, #20]
 800be28:	f7fb f87a 	bl	8006f20 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800be2c:	e136      	b.n	800c09c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800be2e:	6979      	ldr	r1, [r7, #20]
 800be30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be32:	f7fb f937 	bl	80070a4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800be36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be38:	f7fb f8fa 	bl	8007030 <pbuf_clen>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be44:	4413      	add	r3, r2
 800be46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800be4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be4e:	2b09      	cmp	r3, #9
 800be50:	d903      	bls.n	800be5a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800be52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be54:	f7fb f864 	bl	8006f20 <pbuf_free>
      goto memerr;
 800be58:	e120      	b.n	800c09c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be62:	441a      	add	r2, r3
 800be64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	4613      	mov	r3, r2
 800be6c:	2200      	movs	r2, #0
 800be6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fc51 	bl	800b718 <tcp_create_segment>
 800be76:	64f8      	str	r0, [r7, #76]	; 0x4c
 800be78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 810d 	beq.w	800c09a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be82:	2b00      	cmp	r3, #0
 800be84:	d102      	bne.n	800be8c <tcp_write+0x450>
      queue = seg;
 800be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be88:	647b      	str	r3, [r7, #68]	; 0x44
 800be8a:	e00c      	b.n	800bea6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800be8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <tcp_write+0x464>
 800be92:	4b53      	ldr	r3, [pc, #332]	; (800bfe0 <tcp_write+0x5a4>)
 800be94:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be98:	4955      	ldr	r1, [pc, #340]	; (800bff0 <tcp_write+0x5b4>)
 800be9a:	4853      	ldr	r0, [pc, #332]	; (800bfe8 <tcp_write+0x5ac>)
 800be9c:	f006 fb42 	bl	8012524 <iprintf>
      prev_seg->next = seg;
 800bea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bea4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800beaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800beae:	8b3b      	ldrh	r3, [r7, #24]
 800beb0:	4413      	add	r3, r2
 800beb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800beb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800beba:	88fb      	ldrh	r3, [r7, #6]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	f4ff af3d 	bcc.w	800bd3c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d02c      	beq.n	800bf22 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bece:	e01e      	b.n	800bf0e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	891a      	ldrh	r2, [r3, #8]
 800bed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bed6:	4413      	add	r3, r2
 800bed8:	b29a      	uxth	r2, r3
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d110      	bne.n	800bf08 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beec:	8952      	ldrh	r2, [r2, #10]
 800beee:	4413      	add	r3, r2
 800bef0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bef2:	68b9      	ldr	r1, [r7, #8]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f006 faff 	bl	80124f8 <memcpy>
        p->len += oversize_used;
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	895a      	ldrh	r2, [r3, #10]
 800befe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bf00:	4413      	add	r3, r2
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1dd      	bne.n	800bed0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800bf14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf16:	891a      	ldrh	r2, [r3, #8]
 800bf18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bf1a:	4413      	add	r3, r2
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf20:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bf22:	8a7a      	ldrh	r2, [r7, #18]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d018      	beq.n	800bf62 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bf30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_write+0x508>
 800bf36:	4b2a      	ldr	r3, [pc, #168]	; (800bfe0 <tcp_write+0x5a4>)
 800bf38:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800bf3c:	492d      	ldr	r1, [pc, #180]	; (800bff4 <tcp_write+0x5b8>)
 800bf3e:	482a      	ldr	r0, [pc, #168]	; (800bfe8 <tcp_write+0x5ac>)
 800bf40:	f006 faf0 	bl	8012524 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bf44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fb f8aa 	bl	80070a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bf50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf52:	891a      	ldrh	r2, [r3, #8]
 800bf54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5e:	811a      	strh	r2, [r3, #8]
 800bf60:	e037      	b.n	800bfd2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800bf62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d034      	beq.n	800bfd2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bf68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <tcp_write+0x53a>
 800bf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <tcp_write+0x548>
 800bf76:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <tcp_write+0x5a4>)
 800bf78:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bf7c:	491e      	ldr	r1, [pc, #120]	; (800bff8 <tcp_write+0x5bc>)
 800bf7e:	481a      	ldr	r0, [pc, #104]	; (800bfe8 <tcp_write+0x5ac>)
 800bf80:	f006 fad0 	bl	8012524 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8a:	e009      	b.n	800bfa0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	891a      	ldrh	r2, [r3, #8]
 800bf90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf92:	4413      	add	r3, r2
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1f1      	bne.n	800bf8c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	891a      	ldrh	r2, [r3, #8]
 800bfac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfae:	4413      	add	r3, r2
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb8:	895a      	ldrh	r2, [r3, #10]
 800bfba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfbc:	4413      	add	r3, r2
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bfc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc6:	891a      	ldrh	r2, [r3, #8]
 800bfc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfca:	4413      	add	r3, r2
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d111      	bne.n	800bffc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfdc:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfde:	e010      	b.n	800c002 <tcp_write+0x5c6>
 800bfe0:	08014d10 	.word	0x08014d10
 800bfe4:	08014fb0 	.word	0x08014fb0
 800bfe8:	08014d64 	.word	0x08014d64
 800bfec:	08014ff0 	.word	0x08014ff0
 800bff0:	08015000 	.word	0x08015000
 800bff4:	08015014 	.word	0x08015014
 800bff8:	0801504c 	.word	0x0801504c
  } else {
    last_unsent->next = queue;
 800bffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c000:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	441a      	add	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c014:	88fb      	ldrh	r3, [r7, #6]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	b29a      	uxth	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c026:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00e      	beq.n	800c052 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <tcp_write+0x616>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <tcp_write+0x616>
 800c044:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <tcp_write+0x6bc>)
 800c046:	f240 3212 	movw	r2, #786	; 0x312
 800c04a:	492c      	ldr	r1, [pc, #176]	; (800c0fc <tcp_write+0x6c0>)
 800c04c:	482c      	ldr	r0, [pc, #176]	; (800c100 <tcp_write+0x6c4>)
 800c04e:	f006 fa69 	bl	8012524 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c054:	2b00      	cmp	r3, #0
 800c056:	d016      	beq.n	800c086 <tcp_write+0x64a>
 800c058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d012      	beq.n	800c086 <tcp_write+0x64a>
 800c060:	797b      	ldrb	r3, [r7, #5]
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10d      	bne.n	800c086 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	899b      	ldrh	r3, [r3, #12]
 800c070:	b29c      	uxth	r4, r3
 800c072:	2008      	movs	r0, #8
 800c074:	f7f9 fca0 	bl	80059b8 <lwip_htons>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	4322      	orrs	r2, r4
 800c082:	b292      	uxth	r2, r2
 800c084:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	e031      	b.n	800c0ee <tcp_write+0x6b2>
          goto memerr;
 800c08a:	bf00      	nop
 800c08c:	e006      	b.n	800c09c <tcp_write+0x660>
            goto memerr;
 800c08e:	bf00      	nop
 800c090:	e004      	b.n	800c09c <tcp_write+0x660>
        goto memerr;
 800c092:	bf00      	nop
 800c094:	e002      	b.n	800c09c <tcp_write+0x660>
        goto memerr;
 800c096:	bf00      	nop
 800c098:	e000      	b.n	800c09c <tcp_write+0x660>
      goto memerr;
 800c09a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8b5b      	ldrh	r3, [r3, #26]
 800c0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c0b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c0b2:	f7fa ff35 	bl	8006f20 <pbuf_free>
  }
  if (queue != NULL) {
 800c0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c0bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0be:	f7fc fb57 	bl	8008770 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00e      	beq.n	800c0ea <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <tcp_write+0x6ae>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <tcp_write+0x6ae>
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <tcp_write+0x6bc>)
 800c0de:	f240 3227 	movw	r2, #807	; 0x327
 800c0e2:	4906      	ldr	r1, [pc, #24]	; (800c0fc <tcp_write+0x6c0>)
 800c0e4:	4806      	ldr	r0, [pc, #24]	; (800c100 <tcp_write+0x6c4>)
 800c0e6:	f006 fa1d 	bl	8012524 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	375c      	adds	r7, #92	; 0x5c
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd90      	pop	{r4, r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	08014d10 	.word	0x08014d10
 800c0fc:	08015084 	.word	0x08015084
 800c100:	08014d64 	.word	0x08014d64

0800c104 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b08b      	sub	sp, #44	; 0x2c
 800c108:	af02      	add	r7, sp, #8
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	61fb      	str	r3, [r7, #28]
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d106      	bne.n	800c130 <tcp_split_unsent_seg+0x2c>
 800c122:	4b95      	ldr	r3, [pc, #596]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c124:	f240 324b 	movw	r2, #843	; 0x34b
 800c128:	4994      	ldr	r1, [pc, #592]	; (800c37c <tcp_split_unsent_seg+0x278>)
 800c12a:	4895      	ldr	r0, [pc, #596]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c12c:	f006 f9fa 	bl	8012524 <iprintf>

  useg = pcb->unsent;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c134:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d102      	bne.n	800c142 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c13c:	f04f 33ff 	mov.w	r3, #4294967295
 800c140:	e116      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c142:	887b      	ldrh	r3, [r7, #2]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c148:	4b8b      	ldr	r3, [pc, #556]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c14a:	f240 3253 	movw	r2, #851	; 0x353
 800c14e:	498d      	ldr	r1, [pc, #564]	; (800c384 <tcp_split_unsent_seg+0x280>)
 800c150:	488b      	ldr	r0, [pc, #556]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c152:	f006 f9e7 	bl	8012524 <iprintf>
    return ERR_VAL;
 800c156:	f06f 0305 	mvn.w	r3, #5
 800c15a:	e109      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	891b      	ldrh	r3, [r3, #8]
 800c160:	887a      	ldrh	r2, [r7, #2]
 800c162:	429a      	cmp	r2, r3
 800c164:	d301      	bcc.n	800c16a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	e102      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c16e:	887a      	ldrh	r2, [r7, #2]
 800c170:	429a      	cmp	r2, r3
 800c172:	d906      	bls.n	800c182 <tcp_split_unsent_seg+0x7e>
 800c174:	4b80      	ldr	r3, [pc, #512]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c176:	f240 325b 	movw	r2, #859	; 0x35b
 800c17a:	4983      	ldr	r1, [pc, #524]	; (800c388 <tcp_split_unsent_seg+0x284>)
 800c17c:	4880      	ldr	r0, [pc, #512]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c17e:	f006 f9d1 	bl	8012524 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	891b      	ldrh	r3, [r3, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <tcp_split_unsent_seg+0x94>
 800c18a:	4b7b      	ldr	r3, [pc, #492]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c18c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c190:	497e      	ldr	r1, [pc, #504]	; (800c38c <tcp_split_unsent_seg+0x288>)
 800c192:	487b      	ldr	r0, [pc, #492]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c194:	f006 f9c6 	bl	8012524 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	7a9b      	ldrb	r3, [r3, #10]
 800c19c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	891a      	ldrh	r2, [r3, #8]
 800c1ae:	887b      	ldrh	r3, [r7, #2]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	89bb      	ldrh	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	2036      	movs	r0, #54	; 0x36
 800c1c6:	f7fa fbc7 	bl	8006958 <pbuf_alloc>
 800c1ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80b7 	beq.w	800c342 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	891a      	ldrh	r2, [r3, #8]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	891b      	ldrh	r3, [r3, #8]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	887b      	ldrh	r3, [r7, #2]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	6858      	ldr	r0, [r3, #4]
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	18d1      	adds	r1, r2, r3
 800c1f4:	897b      	ldrh	r3, [r7, #10]
 800c1f6:	89ba      	ldrh	r2, [r7, #12]
 800c1f8:	f7fb f88c 	bl	8007314 <pbuf_copy_partial>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	89bb      	ldrh	r3, [r7, #12]
 800c202:	4293      	cmp	r3, r2
 800c204:	f040 809f 	bne.w	800c346 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	899b      	ldrh	r3, [r3, #12]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4618      	mov	r0, r3
 800c212:	f7f9 fbd1 	bl	80059b8 <lwip_htons>
 800c216:	4603      	mov	r3, r0
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c21e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c220:	2300      	movs	r3, #0
 800c222:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c224:	7efb      	ldrb	r3, [r7, #27]
 800c226:	f003 0308 	and.w	r3, r3, #8
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c22e:	7efb      	ldrb	r3, [r7, #27]
 800c230:	f023 0308 	bic.w	r3, r3, #8
 800c234:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c236:	7ebb      	ldrb	r3, [r7, #26]
 800c238:	f043 0308 	orr.w	r3, r3, #8
 800c23c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c23e:	7efb      	ldrb	r3, [r7, #27]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d007      	beq.n	800c258 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c248:	7efb      	ldrb	r3, [r7, #27]
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c250:	7ebb      	ldrb	r3, [r7, #26]
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f9 fbbf 	bl	80059e2 <lwip_htonl>
 800c264:	4602      	mov	r2, r0
 800c266:	887b      	ldrh	r3, [r7, #2]
 800c268:	18d1      	adds	r1, r2, r3
 800c26a:	7eba      	ldrb	r2, [r7, #26]
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	460b      	mov	r3, r1
 800c272:	6939      	ldr	r1, [r7, #16]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fa4f 	bl	800b718 <tcp_create_segment>
 800c27a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d063      	beq.n	800c34a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	4618      	mov	r0, r3
 800c288:	f7fa fed2 	bl	8007030 <pbuf_clen>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	6858      	ldr	r0, [r3, #4]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	891a      	ldrh	r2, [r3, #8]
 800c2aa:	89bb      	ldrh	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fa fcaf 	bl	8006c14 <pbuf_realloc>
  useg->len -= remainder;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	891a      	ldrh	r2, [r3, #8]
 800c2ba:	89bb      	ldrh	r3, [r7, #12]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	899b      	ldrh	r3, [r3, #12]
 800c2ca:	b29c      	uxth	r4, r3
 800c2cc:	7efb      	ldrb	r3, [r7, #27]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7f9 fb71 	bl	80059b8 <lwip_htons>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	461a      	mov	r2, r3
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	4322      	orrs	r2, r4
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fa fea1 	bl	8007030 <pbuf_clen>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2f8:	4413      	add	r3, r2
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	f7fa fe92 	bl	8007030 <pbuf_clen>
 800c30c:	4603      	mov	r3, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c316:	4413      	add	r3, r2
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d103      	bne.n	800c33e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	e016      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c342:	bf00      	nop
 800c344:	e002      	b.n	800c34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c346:	bf00      	nop
 800c348:	e000      	b.n	800c34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c34a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <tcp_split_unsent_seg+0x25c>
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c354:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c358:	490d      	ldr	r1, [pc, #52]	; (800c390 <tcp_split_unsent_seg+0x28c>)
 800c35a:	4809      	ldr	r0, [pc, #36]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c35c:	f006 f8e2 	bl	8012524 <iprintf>
  if (p != NULL) {
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f7fa fdda 	bl	8006f20 <pbuf_free>
  }

  return ERR_MEM;
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c370:	4618      	mov	r0, r3
 800c372:	3724      	adds	r7, #36	; 0x24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd90      	pop	{r4, r7, pc}
 800c378:	08014d10 	.word	0x08014d10
 800c37c:	080150a4 	.word	0x080150a4
 800c380:	08014d64 	.word	0x08014d64
 800c384:	080150c8 	.word	0x080150c8
 800c388:	080150ec 	.word	0x080150ec
 800c38c:	080150fc 	.word	0x080150fc
 800c390:	0801510c 	.word	0x0801510c

0800c394 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <tcp_send_fin+0x1c>
 800c3a2:	4b21      	ldr	r3, [pc, #132]	; (800c428 <tcp_send_fin+0x94>)
 800c3a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c3a8:	4920      	ldr	r1, [pc, #128]	; (800c42c <tcp_send_fin+0x98>)
 800c3aa:	4821      	ldr	r0, [pc, #132]	; (800c430 <tcp_send_fin+0x9c>)
 800c3ac:	f006 f8ba 	bl	8012524 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d02e      	beq.n	800c416 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	e002      	b.n	800c3c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f8      	bne.n	800c3c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	899b      	ldrh	r3, [r3, #12]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f9 faee 	bl	80059b8 <lwip_htons>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f003 0307 	and.w	r3, r3, #7
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d116      	bne.n	800c416 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	899b      	ldrh	r3, [r3, #12]
 800c3ee:	b29c      	uxth	r4, r3
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f7f9 fae1 	bl	80059b8 <lwip_htons>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	4322      	orrs	r2, r4
 800c400:	b292      	uxth	r2, r2
 800c402:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	8b5b      	ldrh	r3, [r3, #26]
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	e004      	b.n	800c420 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c416:	2101      	movs	r1, #1
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f80b 	bl	800c434 <tcp_enqueue_flags>
 800c41e:	4603      	mov	r3, r0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}
 800c428:	08014d10 	.word	0x08014d10
 800c42c:	08015118 	.word	0x08015118
 800c430:	08014d64 	.word	0x08014d64

0800c434 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af02      	add	r7, sp, #8
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <tcp_enqueue_flags+0x2c>
 800c452:	4b67      	ldr	r3, [pc, #412]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c454:	f240 4211 	movw	r2, #1041	; 0x411
 800c458:	4966      	ldr	r1, [pc, #408]	; (800c5f4 <tcp_enqueue_flags+0x1c0>)
 800c45a:	4867      	ldr	r0, [pc, #412]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c45c:	f006 f862 	bl	8012524 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_enqueue_flags+0x40>
 800c466:	4b62      	ldr	r3, [pc, #392]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c468:	f240 4213 	movw	r2, #1043	; 0x413
 800c46c:	4963      	ldr	r1, [pc, #396]	; (800c5fc <tcp_enqueue_flags+0x1c8>)
 800c46e:	4862      	ldr	r0, [pc, #392]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c470:	f006 f858 	bl	8012524 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c47e:	2301      	movs	r3, #1
 800c480:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c482:	7ffb      	ldrb	r3, [r7, #31]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	b29b      	uxth	r3, r3
 800c492:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c496:	4619      	mov	r1, r3
 800c498:	2036      	movs	r0, #54	; 0x36
 800c49a:	f7fa fa5d 	bl	8006958 <pbuf_alloc>
 800c49e:	6138      	str	r0, [r7, #16]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8b5b      	ldrh	r3, [r3, #26]
 800c4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b8:	e095      	b.n	800c5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	895a      	ldrh	r2, [r3, #10]
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d206      	bcs.n	800c4d4 <tcp_enqueue_flags+0xa0>
 800c4c6:	4b4a      	ldr	r3, [pc, #296]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c4c8:	f240 4239 	movw	r2, #1081	; 0x439
 800c4cc:	494c      	ldr	r1, [pc, #304]	; (800c600 <tcp_enqueue_flags+0x1cc>)
 800c4ce:	484a      	ldr	r0, [pc, #296]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c4d0:	f006 f828 	bl	8012524 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c4d8:	78fa      	ldrb	r2, [r7, #3]
 800c4da:	7ffb      	ldrb	r3, [r7, #31]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	6939      	ldr	r1, [r7, #16]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff f918 	bl	800b718 <tcp_create_segment>
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d109      	bne.n	800c504 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8b5b      	ldrh	r3, [r3, #26]
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c502:	e070      	b.n	800c5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <tcp_enqueue_flags+0xea>
 800c510:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c512:	f240 4242 	movw	r2, #1090	; 0x442
 800c516:	493b      	ldr	r1, [pc, #236]	; (800c604 <tcp_enqueue_flags+0x1d0>)
 800c518:	4837      	ldr	r0, [pc, #220]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c51a:	f006 f803 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	891b      	ldrh	r3, [r3, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <tcp_enqueue_flags+0x100>
 800c526:	4b32      	ldr	r3, [pc, #200]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c528:	f240 4243 	movw	r2, #1091	; 0x443
 800c52c:	4936      	ldr	r1, [pc, #216]	; (800c608 <tcp_enqueue_flags+0x1d4>)
 800c52e:	4832      	ldr	r0, [pc, #200]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c530:	f005 fff8 	bl	8012524 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d103      	bne.n	800c544 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	66da      	str	r2, [r3, #108]	; 0x6c
 800c542:	e00d      	b.n	800c560 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c548:	61bb      	str	r3, [r7, #24]
 800c54a:	e002      	b.n	800c552 <tcp_enqueue_flags+0x11e>
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f8      	bne.n	800c54c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <tcp_enqueue_flags+0x148>
 800c572:	78fb      	ldrb	r3, [r7, #3]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c586:	78fb      	ldrb	r3, [r7, #3]
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8b5b      	ldrh	r3, [r3, #26]
 800c594:	f043 0320 	orr.w	r3, r3, #32
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fa fd44 	bl	8007030 <pbuf_clen>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5b2:	4413      	add	r3, r2
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00e      	beq.n	800c5e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <tcp_enqueue_flags+0x1b0>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_enqueue_flags+0x1b0>
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c5d8:	f240 4265 	movw	r2, #1125	; 0x465
 800c5dc:	490b      	ldr	r1, [pc, #44]	; (800c60c <tcp_enqueue_flags+0x1d8>)
 800c5de:	4806      	ldr	r0, [pc, #24]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c5e0:	f005 ffa0 	bl	8012524 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3720      	adds	r7, #32
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08014d10 	.word	0x08014d10
 800c5f4:	08015134 	.word	0x08015134
 800c5f8:	08014d64 	.word	0x08014d64
 800c5fc:	0801518c 	.word	0x0801518c
 800c600:	080151ac 	.word	0x080151ac
 800c604:	080151e8 	.word	0x080151e8
 800c608:	08015200 	.word	0x08015200
 800c60c:	0801522c 	.word	0x0801522c

0800c610 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <tcp_output+0x1c>
 800c61e:	4b9e      	ldr	r3, [pc, #632]	; (800c898 <tcp_output+0x288>)
 800c620:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c624:	499d      	ldr	r1, [pc, #628]	; (800c89c <tcp_output+0x28c>)
 800c626:	489e      	ldr	r0, [pc, #632]	; (800c8a0 <tcp_output+0x290>)
 800c628:	f005 ff7c 	bl	8012524 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d106      	bne.n	800c642 <tcp_output+0x32>
 800c634:	4b98      	ldr	r3, [pc, #608]	; (800c898 <tcp_output+0x288>)
 800c636:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c63a:	499a      	ldr	r1, [pc, #616]	; (800c8a4 <tcp_output+0x294>)
 800c63c:	4898      	ldr	r0, [pc, #608]	; (800c8a0 <tcp_output+0x290>)
 800c63e:	f005 ff71 	bl	8012524 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c642:	4b99      	ldr	r3, [pc, #612]	; (800c8a8 <tcp_output+0x298>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d101      	bne.n	800c650 <tcp_output+0x40>
    return ERR_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e1ce      	b.n	800c9ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c65c:	4293      	cmp	r3, r2
 800c65e:	bf28      	it	cs
 800c660:	4613      	movcs	r3, r2
 800c662:	b29b      	uxth	r3, r3
 800c664:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10b      	bne.n	800c68a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8b5b      	ldrh	r3, [r3, #26]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 81aa 	beq.w	800c9d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fdcb 	bl	800d21c <tcp_send_empty_ack>
 800c686:	4603      	mov	r3, r0
 800c688:	e1b1      	b.n	800c9ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3304      	adds	r3, #4
 800c690:	461a      	mov	r2, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff f824 	bl	800b6e0 <tcp_route>
 800c698:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <tcp_output+0x96>
    return ERR_RTE;
 800c6a0:	f06f 0303 	mvn.w	r3, #3
 800c6a4:	e1a3      	b.n	800c9ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <tcp_output+0xa4>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d111      	bne.n	800c6d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <tcp_output+0xb0>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	e000      	b.n	800c6c2 <tcp_output+0xb2>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d102      	bne.n	800c6d0 <tcp_output+0xc0>
      return ERR_RTE;
 800c6ca:	f06f 0303 	mvn.w	r3, #3
 800c6ce:	e18e      	b.n	800c9ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f9 f97f 	bl	80059e2 <lwip_htonl>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	8912      	ldrh	r2, [r2, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d227      	bcs.n	800c748 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6fe:	461a      	mov	r2, r3
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	4293      	cmp	r3, r2
 800c704:	d114      	bne.n	800c730 <tcp_output+0x120>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d110      	bne.n	800c730 <tcp_output+0x120>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10b      	bne.n	800c730 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 814d 	beq.w	800c9d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fd6c 	bl	800d21c <tcp_send_empty_ack>
 800c744:	4603      	mov	r3, r0
 800c746:	e152      	b.n	800c9ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 811c 	beq.w	800c996 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c75e:	e002      	b.n	800c766 <tcp_output+0x156>
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	623b      	str	r3, [r7, #32]
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f8      	bne.n	800c760 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c76e:	e112      	b.n	800c996 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	899b      	ldrh	r3, [r3, #12]
 800c776:	b29b      	uxth	r3, r3
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f9 f91d 	bl	80059b8 <lwip_htons>
 800c77e:	4603      	mov	r3, r0
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f003 0304 	and.w	r3, r3, #4
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <tcp_output+0x188>
 800c78a:	4b43      	ldr	r3, [pc, #268]	; (800c898 <tcp_output+0x288>)
 800c78c:	f240 5236 	movw	r2, #1334	; 0x536
 800c790:	4946      	ldr	r1, [pc, #280]	; (800c8ac <tcp_output+0x29c>)
 800c792:	4843      	ldr	r0, [pc, #268]	; (800c8a0 <tcp_output+0x290>)
 800c794:	f005 fec6 	bl	8012524 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01f      	beq.n	800c7e0 <tcp_output+0x1d0>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8b5b      	ldrh	r3, [r3, #26]
 800c7a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d119      	bne.n	800c7e0 <tcp_output+0x1d0>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <tcp_output+0x1bc>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d110      	bne.n	800c7e0 <tcp_output+0x1d0>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c2:	891a      	ldrh	r2, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d209      	bcs.n	800c7e0 <tcp_output+0x1d0>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d004      	beq.n	800c7e0 <tcp_output+0x1d0>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d901      	bls.n	800c7e4 <tcp_output+0x1d4>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e000      	b.n	800c7e6 <tcp_output+0x1d6>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8b5b      	ldrh	r3, [r3, #26]
 800c7ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80e4 	beq.w	800c9c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7d1b      	ldrb	r3, [r3, #20]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d00d      	beq.n	800c81c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	899b      	ldrh	r3, [r3, #12]
 800c806:	b29c      	uxth	r4, r3
 800c808:	2010      	movs	r0, #16
 800c80a:	f7f9 f8d5 	bl	80059b8 <lwip_htons>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	4322      	orrs	r2, r4
 800c818:	b292      	uxth	r2, r2
 800c81a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c822:	f000 f909 	bl	800ca38 <tcp_output_segment>
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d009      	beq.n	800c846 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	8b5b      	ldrh	r3, [r3, #26]
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	835a      	strh	r2, [r3, #26]
      return err;
 800c840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c844:	e0d3      	b.n	800c9ee <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	7d1b      	ldrb	r3, [r3, #20]
 800c852:	2b02      	cmp	r3, #2
 800c854:	d006      	beq.n	800c864 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	8b5b      	ldrh	r3, [r3, #26]
 800c85a:	f023 0303 	bic.w	r3, r3, #3
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7f9 f8b9 	bl	80059e2 <lwip_htonl>
 800c870:	4604      	mov	r4, r0
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	891b      	ldrh	r3, [r3, #8]
 800c876:	461d      	mov	r5, r3
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	899b      	ldrh	r3, [r3, #12]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	4618      	mov	r0, r3
 800c882:	f7f9 f899 	bl	80059b8 <lwip_htons>
 800c886:	4603      	mov	r3, r0
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	f003 0303 	and.w	r3, r3, #3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00e      	beq.n	800c8b0 <tcp_output+0x2a0>
 800c892:	2301      	movs	r3, #1
 800c894:	e00d      	b.n	800c8b2 <tcp_output+0x2a2>
 800c896:	bf00      	nop
 800c898:	08014d10 	.word	0x08014d10
 800c89c:	08015254 	.word	0x08015254
 800c8a0:	08014d64 	.word	0x08014d64
 800c8a4:	0801526c 	.word	0x0801526c
 800c8a8:	20006980 	.word	0x20006980
 800c8ac:	08015294 	.word	0x08015294
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	442b      	add	r3, r5
 800c8b4:	4423      	add	r3, r4
 800c8b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	da02      	bge.n	800c8ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	891b      	ldrh	r3, [r3, #8]
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	899b      	ldrh	r3, [r3, #12]
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7f9 f86d 	bl	80059b8 <lwip_htons>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <tcp_output+0x2de>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <tcp_output+0x2e0>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	4423      	add	r3, r4
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d049      	beq.n	800c98a <tcp_output+0x37a>
      seg->next = NULL;
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <tcp_output+0x300>
        pcb->unacked = seg;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c908:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	623b      	str	r3, [r7, #32]
 800c90e:	e03f      	b.n	800c990 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f7f9 f863 	bl	80059e2 <lwip_htonl>
 800c91c:	4604      	mov	r4, r0
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	f7f9 f85c 	bl	80059e2 <lwip_htonl>
 800c92a:	4603      	mov	r3, r0
 800c92c:	1ae3      	subs	r3, r4, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da24      	bge.n	800c97c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3370      	adds	r3, #112	; 0x70
 800c936:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c938:	e002      	b.n	800c940 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d011      	beq.n	800c96c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4618      	mov	r0, r3
 800c952:	f7f9 f846 	bl	80059e2 <lwip_htonl>
 800c956:	4604      	mov	r4, r0
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7f9 f83f 	bl	80059e2 <lwip_htonl>
 800c964:	4603      	mov	r3, r0
 800c966:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c968:	2b00      	cmp	r3, #0
 800c96a:	dbe6      	blt.n	800c93a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	e009      	b.n	800c990 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c980:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	623b      	str	r3, [r7, #32]
 800c988:	e002      	b.n	800c990 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c98c:	f7fb ff05 	bl	800879a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d012      	beq.n	800c9c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7f9 f81d 	bl	80059e2 <lwip_htonl>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b2:	8912      	ldrh	r2, [r2, #8]
 800c9b4:	4413      	add	r3, r2
  while (seg != NULL &&
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	f4bf aed9 	bcs.w	800c770 <tcp_output+0x160>
 800c9be:	e000      	b.n	800c9c2 <tcp_output+0x3b2>
      break;
 800c9c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d108      	bne.n	800c9dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c9d2:	e004      	b.n	800c9de <tcp_output+0x3ce>
    goto output_done;
 800c9d4:	bf00      	nop
 800c9d6:	e002      	b.n	800c9de <tcp_output+0x3ce>
    goto output_done;
 800c9d8:	bf00      	nop
 800c9da:	e000      	b.n	800c9de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c9dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8b5b      	ldrh	r3, [r3, #26]
 800c9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3728      	adds	r7, #40	; 0x28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c9f6:	bf00      	nop

0800c9f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <tcp_output_segment_busy+0x1c>
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <tcp_output_segment_busy+0x34>)
 800ca08:	f240 529a 	movw	r2, #1434	; 0x59a
 800ca0c:	4908      	ldr	r1, [pc, #32]	; (800ca30 <tcp_output_segment_busy+0x38>)
 800ca0e:	4809      	ldr	r0, [pc, #36]	; (800ca34 <tcp_output_segment_busy+0x3c>)
 800ca10:	f005 fd88 	bl	8012524 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	7b9b      	ldrb	r3, [r3, #14]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d001      	beq.n	800ca22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08014d10 	.word	0x08014d10
 800ca30:	080152ac 	.word	0x080152ac
 800ca34:	08014d64 	.word	0x08014d64

0800ca38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ca38:	b5b0      	push	{r4, r5, r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af04      	add	r7, sp, #16
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <tcp_output_segment+0x20>
 800ca4a:	4b63      	ldr	r3, [pc, #396]	; (800cbd8 <tcp_output_segment+0x1a0>)
 800ca4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ca50:	4962      	ldr	r1, [pc, #392]	; (800cbdc <tcp_output_segment+0x1a4>)
 800ca52:	4863      	ldr	r0, [pc, #396]	; (800cbe0 <tcp_output_segment+0x1a8>)
 800ca54:	f005 fd66 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <tcp_output_segment+0x34>
 800ca5e:	4b5e      	ldr	r3, [pc, #376]	; (800cbd8 <tcp_output_segment+0x1a0>)
 800ca60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ca64:	495f      	ldr	r1, [pc, #380]	; (800cbe4 <tcp_output_segment+0x1ac>)
 800ca66:	485e      	ldr	r0, [pc, #376]	; (800cbe0 <tcp_output_segment+0x1a8>)
 800ca68:	f005 fd5c 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <tcp_output_segment+0x48>
 800ca72:	4b59      	ldr	r3, [pc, #356]	; (800cbd8 <tcp_output_segment+0x1a0>)
 800ca74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ca78:	495b      	ldr	r1, [pc, #364]	; (800cbe8 <tcp_output_segment+0x1b0>)
 800ca7a:	4859      	ldr	r0, [pc, #356]	; (800cbe0 <tcp_output_segment+0x1a8>)
 800ca7c:	f005 fd52 	bl	8012524 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff ffb9 	bl	800c9f8 <tcp_output_segment_busy>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e09f      	b.n	800cbd0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68dc      	ldr	r4, [r3, #12]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7f8 ffa2 	bl	80059e2 <lwip_htonl>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68dc      	ldr	r4, [r3, #12]
 800caaa:	4610      	mov	r0, r2
 800caac:	f7f8 ff84 	bl	80059b8 <lwip_htons>
 800cab0:	4603      	mov	r3, r0
 800cab2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cabc:	441a      	add	r2, r3
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	3314      	adds	r3, #20
 800cac8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	7a9b      	ldrb	r3, [r3, #10]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d015      	beq.n	800cb02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	3304      	adds	r3, #4
 800cada:	461a      	mov	r2, r3
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cae2:	f7fc fa37 	bl	8008f54 <tcp_eff_send_mss_netif>
 800cae6:	4603      	mov	r3, r0
 800cae8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800caea:	8b7b      	ldrh	r3, [r7, #26]
 800caec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f8 ff76 	bl	80059e2 <lwip_htonl>
 800caf6:	4602      	mov	r2, r0
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	3304      	adds	r3, #4
 800cb00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da02      	bge.n	800cb12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10c      	bne.n	800cb34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cb1a:	4b34      	ldr	r3, [pc, #208]	; (800cbec <tcp_output_segment+0x1b4>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f8 ff5a 	bl	80059e2 <lwip_htonl>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	8959      	ldrh	r1, [r3, #10]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	8b3a      	ldrh	r2, [r7, #24]
 800cb4e:	1a8a      	subs	r2, r1, r2
 800cb50:	b292      	uxth	r2, r2
 800cb52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	8919      	ldrh	r1, [r3, #8]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	8b3a      	ldrh	r2, [r7, #24]
 800cb60:	1a8a      	subs	r2, r1, r2
 800cb62:	b292      	uxth	r2, r2
 800cb64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	68d2      	ldr	r2, [r2, #12]
 800cb6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	741a      	strb	r2, [r3, #16]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f103 0214 	add.w	r2, r3, #20
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	7a9b      	ldrb	r3, [r3, #10]
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	4413      	add	r3, r2
 800cb90:	69fa      	ldr	r2, [r7, #28]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d006      	beq.n	800cba4 <tcp_output_segment+0x16c>
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <tcp_output_segment+0x1a0>)
 800cb98:	f240 621c 	movw	r2, #1564	; 0x61c
 800cb9c:	4914      	ldr	r1, [pc, #80]	; (800cbf0 <tcp_output_segment+0x1b8>)
 800cb9e:	4810      	ldr	r0, [pc, #64]	; (800cbe0 <tcp_output_segment+0x1a8>)
 800cba0:	f005 fcc0 	bl	8012524 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6858      	ldr	r0, [r3, #4]
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	1d1c      	adds	r4, r3, #4
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	7add      	ldrb	r5, [r3, #11]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	7a9b      	ldrb	r3, [r3, #10]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	9202      	str	r2, [sp, #8]
 800cbba:	2206      	movs	r2, #6
 800cbbc:	9201      	str	r2, [sp, #4]
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	462b      	mov	r3, r5
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	f002 fa36 	bl	800f034 <ip4_output_if>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cbcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd8:	08014d10 	.word	0x08014d10
 800cbdc:	080152d4 	.word	0x080152d4
 800cbe0:	08014d64 	.word	0x08014d64
 800cbe4:	080152f4 	.word	0x080152f4
 800cbe8:	08015314 	.word	0x08015314
 800cbec:	20006970 	.word	0x20006970
 800cbf0:	08015338 	.word	0x08015338

0800cbf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cbf4:	b5b0      	push	{r4, r5, r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <tcp_rexmit_rto_prepare+0x1c>
 800cc02:	4b31      	ldr	r3, [pc, #196]	; (800ccc8 <tcp_rexmit_rto_prepare+0xd4>)
 800cc04:	f240 6263 	movw	r2, #1635	; 0x663
 800cc08:	4930      	ldr	r1, [pc, #192]	; (800cccc <tcp_rexmit_rto_prepare+0xd8>)
 800cc0a:	4831      	ldr	r0, [pc, #196]	; (800ccd0 <tcp_rexmit_rto_prepare+0xdc>)
 800cc0c:	f005 fc8a 	bl	8012524 <iprintf>

  if (pcb->unacked == NULL) {
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cc18:	f06f 0305 	mvn.w	r3, #5
 800cc1c:	e050      	b.n	800ccc0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e00b      	b.n	800cc3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f7ff fee6 	bl	800c9f8 <tcp_output_segment_busy>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cc32:	f06f 0305 	mvn.w	r3, #5
 800cc36:	e043      	b.n	800ccc0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1ef      	bne.n	800cc26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fed6 	bl	800c9f8 <tcp_output_segment_busy>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cc52:	f06f 0305 	mvn.w	r3, #5
 800cc56:	e033      	b.n	800ccc0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8b5b      	ldrh	r3, [r3, #26]
 800cc72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f8 fead 	bl	80059e2 <lwip_htonl>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	891b      	ldrh	r3, [r3, #8]
 800cc8e:	461d      	mov	r5, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	899b      	ldrh	r3, [r3, #12]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f8 fe8d 	bl	80059b8 <lwip_htons>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	f003 0303 	and.w	r3, r3, #3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <tcp_rexmit_rto_prepare+0xba>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <tcp_rexmit_rto_prepare+0xbc>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	442b      	add	r3, r5
 800ccb2:	18e2      	adds	r2, r4, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc8:	08014d10 	.word	0x08014d10
 800cccc:	0801534c 	.word	0x0801534c
 800ccd0:	08014d64 	.word	0x08014d64

0800ccd4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_rexmit_rto_commit+0x1c>
 800cce2:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <tcp_rexmit_rto_commit+0x44>)
 800cce4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cce8:	490c      	ldr	r1, [pc, #48]	; (800cd1c <tcp_rexmit_rto_commit+0x48>)
 800ccea:	480d      	ldr	r0, [pc, #52]	; (800cd20 <tcp_rexmit_rto_commit+0x4c>)
 800ccec:	f005 fc1a 	bl	8012524 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccf6:	2bff      	cmp	r3, #255	; 0xff
 800ccf8:	d007      	beq.n	800cd0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd00:	3301      	adds	r3, #1
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fc80 	bl	800c610 <tcp_output>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	08014d10 	.word	0x08014d10
 800cd1c:	08015370 	.word	0x08015370
 800cd20:	08014d64 	.word	0x08014d64

0800cd24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <tcp_rexmit_rto+0x1c>
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <tcp_rexmit_rto+0x38>)
 800cd34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cd38:	4909      	ldr	r1, [pc, #36]	; (800cd60 <tcp_rexmit_rto+0x3c>)
 800cd3a:	480a      	ldr	r0, [pc, #40]	; (800cd64 <tcp_rexmit_rto+0x40>)
 800cd3c:	f005 fbf2 	bl	8012524 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff ff57 	bl	800cbf4 <tcp_rexmit_rto_prepare>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ffc1 	bl	800ccd4 <tcp_rexmit_rto_commit>
  }
}
 800cd52:	bf00      	nop
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	08014d10 	.word	0x08014d10
 800cd60:	08015394 	.word	0x08015394
 800cd64:	08014d64 	.word	0x08014d64

0800cd68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cd68:	b590      	push	{r4, r7, lr}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <tcp_rexmit+0x1c>
 800cd76:	4b2f      	ldr	r3, [pc, #188]	; (800ce34 <tcp_rexmit+0xcc>)
 800cd78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cd7c:	492e      	ldr	r1, [pc, #184]	; (800ce38 <tcp_rexmit+0xd0>)
 800cd7e:	482f      	ldr	r0, [pc, #188]	; (800ce3c <tcp_rexmit+0xd4>)
 800cd80:	f005 fbd0 	bl	8012524 <iprintf>

  if (pcb->unacked == NULL) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cd8c:	f06f 0305 	mvn.w	r3, #5
 800cd90:	e04c      	b.n	800ce2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cd98:	68b8      	ldr	r0, [r7, #8]
 800cd9a:	f7ff fe2d 	bl	800c9f8 <tcp_output_segment_busy>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cda4:	f06f 0305 	mvn.w	r3, #5
 800cda8:	e040      	b.n	800ce2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	336c      	adds	r3, #108	; 0x6c
 800cdb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cdb8:	e002      	b.n	800cdc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d011      	beq.n	800cdec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7f8 fe06 	bl	80059e2 <lwip_htonl>
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f8 fdff 	bl	80059e2 <lwip_htonl>
 800cde4:	4603      	mov	r3, r0
 800cde6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dbe6      	blt.n	800cdba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d103      	bne.n	800ce0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce10:	2bff      	cmp	r3, #255	; 0xff
 800ce12:	d007      	beq.n	800ce24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ce2a:	2300      	movs	r3, #0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd90      	pop	{r4, r7, pc}
 800ce34:	08014d10 	.word	0x08014d10
 800ce38:	080153b0 	.word	0x080153b0
 800ce3c:	08014d64 	.word	0x08014d64

0800ce40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <tcp_rexmit_fast+0x1c>
 800ce4e:	4b2a      	ldr	r3, [pc, #168]	; (800cef8 <tcp_rexmit_fast+0xb8>)
 800ce50:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ce54:	4929      	ldr	r1, [pc, #164]	; (800cefc <tcp_rexmit_fast+0xbc>)
 800ce56:	482a      	ldr	r0, [pc, #168]	; (800cf00 <tcp_rexmit_fast+0xc0>)
 800ce58:	f005 fb64 	bl	8012524 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d045      	beq.n	800cef0 <tcp_rexmit_fast+0xb0>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	8b5b      	ldrh	r3, [r3, #26]
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d13f      	bne.n	800cef0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff ff79 	bl	800cd68 <tcp_rexmit>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d139      	bne.n	800cef0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	bf28      	it	cs
 800ce8c:	4613      	movcs	r3, r2
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	da00      	bge.n	800ce96 <tcp_rexmit_fast+0x56>
 800ce94:	3301      	adds	r3, #1
 800ce96:	105b      	asrs	r3, r3, #1
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cea6:	461a      	mov	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d206      	bcs.n	800cec0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceca:	4619      	mov	r1, r3
 800cecc:	0049      	lsls	r1, r1, #1
 800cece:	440b      	add	r3, r1
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	4413      	add	r3, r2
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	8b5b      	ldrh	r3, [r3, #26]
 800cee0:	f043 0304 	orr.w	r3, r3, #4
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	08014d10 	.word	0x08014d10
 800cefc:	080153c8 	.word	0x080153c8
 800cf00:	08014d64 	.word	0x08014d64

0800cf04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	607b      	str	r3, [r7, #4]
 800cf0e:	460b      	mov	r3, r1
 800cf10:	817b      	strh	r3, [r7, #10]
 800cf12:	4613      	mov	r3, r2
 800cf14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cf16:	897a      	ldrh	r2, [r7, #10]
 800cf18:	893b      	ldrh	r3, [r7, #8]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3314      	adds	r3, #20
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf26:	4619      	mov	r1, r3
 800cf28:	2022      	movs	r0, #34	; 0x22
 800cf2a:	f7f9 fd15 	bl	8006958 <pbuf_alloc>
 800cf2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d04d      	beq.n	800cfd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cf36:	897b      	ldrh	r3, [r7, #10]
 800cf38:	3313      	adds	r3, #19
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	8952      	ldrh	r2, [r2, #10]
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	db06      	blt.n	800cf50 <tcp_output_alloc_header_common+0x4c>
 800cf42:	4b26      	ldr	r3, [pc, #152]	; (800cfdc <tcp_output_alloc_header_common+0xd8>)
 800cf44:	f240 7223 	movw	r2, #1827	; 0x723
 800cf48:	4925      	ldr	r1, [pc, #148]	; (800cfe0 <tcp_output_alloc_header_common+0xdc>)
 800cf4a:	4826      	ldr	r0, [pc, #152]	; (800cfe4 <tcp_output_alloc_header_common+0xe0>)
 800cf4c:	f005 faea 	bl	8012524 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cf56:	8c3b      	ldrh	r3, [r7, #32]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7f8 fd2d 	bl	80059b8 <lwip_htons>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cf66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7f8 fd25 	bl	80059b8 <lwip_htons>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	461a      	mov	r2, r3
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f7f8 fd30 	bl	80059e2 <lwip_htonl>
 800cf82:	4602      	mov	r2, r0
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cf88:	897b      	ldrh	r3, [r7, #10]
 800cf8a:	089b      	lsrs	r3, r3, #2
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	3305      	adds	r3, #5
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	031b      	lsls	r3, r3, #12
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7f8 fd09 	bl	80059b8 <lwip_htons>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cfae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7f8 fd01 	bl	80059b8 <lwip_htons>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	741a      	strb	r2, [r3, #16]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	749a      	strb	r2, [r3, #18]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cfd2:	697b      	ldr	r3, [r7, #20]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	08014d10 	.word	0x08014d10
 800cfe0:	080153e8 	.word	0x080153e8
 800cfe4:	08014d64 	.word	0x08014d64

0800cfe8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cfe8:	b5b0      	push	{r4, r5, r7, lr}
 800cfea:	b08a      	sub	sp, #40	; 0x28
 800cfec:	af04      	add	r7, sp, #16
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	607b      	str	r3, [r7, #4]
 800cff2:	460b      	mov	r3, r1
 800cff4:	817b      	strh	r3, [r7, #10]
 800cff6:	4613      	mov	r3, r2
 800cff8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <tcp_output_alloc_header+0x26>
 800d000:	4b15      	ldr	r3, [pc, #84]	; (800d058 <tcp_output_alloc_header+0x70>)
 800d002:	f240 7242 	movw	r2, #1858	; 0x742
 800d006:	4915      	ldr	r1, [pc, #84]	; (800d05c <tcp_output_alloc_header+0x74>)
 800d008:	4815      	ldr	r0, [pc, #84]	; (800d060 <tcp_output_alloc_header+0x78>)
 800d00a:	f005 fa8b 	bl	8012524 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	8adb      	ldrh	r3, [r3, #22]
 800d016:	68fa      	ldr	r2, [r7, #12]
 800d018:	8b12      	ldrh	r2, [r2, #24]
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d01e:	893d      	ldrh	r5, [r7, #8]
 800d020:	897c      	ldrh	r4, [r7, #10]
 800d022:	9103      	str	r1, [sp, #12]
 800d024:	2110      	movs	r1, #16
 800d026:	9102      	str	r1, [sp, #8]
 800d028:	9201      	str	r2, [sp, #4]
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	462a      	mov	r2, r5
 800d030:	4621      	mov	r1, r4
 800d032:	f7ff ff67 	bl	800cf04 <tcp_output_alloc_header_common>
 800d036:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d006      	beq.n	800d04c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d046:	441a      	add	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d04c:	697b      	ldr	r3, [r7, #20]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bdb0      	pop	{r4, r5, r7, pc}
 800d056:	bf00      	nop
 800d058:	08014d10 	.word	0x08014d10
 800d05c:	08015418 	.word	0x08015418
 800d060:	08014d64 	.word	0x08014d64

0800d064 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	4611      	mov	r1, r2
 800d070:	461a      	mov	r2, r3
 800d072:	460b      	mov	r3, r1
 800d074:	71fb      	strb	r3, [r7, #7]
 800d076:	4613      	mov	r3, r2
 800d078:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d07a:	2300      	movs	r3, #0
 800d07c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d106      	bne.n	800d092 <tcp_output_fill_options+0x2e>
 800d084:	4b13      	ldr	r3, [pc, #76]	; (800d0d4 <tcp_output_fill_options+0x70>)
 800d086:	f240 7256 	movw	r2, #1878	; 0x756
 800d08a:	4913      	ldr	r1, [pc, #76]	; (800d0d8 <tcp_output_fill_options+0x74>)
 800d08c:	4813      	ldr	r0, [pc, #76]	; (800d0dc <tcp_output_fill_options+0x78>)
 800d08e:	f005 fa49 	bl	8012524 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	3314      	adds	r3, #20
 800d09c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	f103 0214 	add.w	r2, r3, #20
 800d0a4:	8bfb      	ldrh	r3, [r7, #30]
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	f003 0304 	and.w	r3, r3, #4
 800d0b2:	440b      	add	r3, r1
 800d0b4:	4413      	add	r3, r2
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d006      	beq.n	800d0ca <tcp_output_fill_options+0x66>
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <tcp_output_fill_options+0x70>)
 800d0be:	f240 7275 	movw	r2, #1909	; 0x775
 800d0c2:	4907      	ldr	r1, [pc, #28]	; (800d0e0 <tcp_output_fill_options+0x7c>)
 800d0c4:	4805      	ldr	r0, [pc, #20]	; (800d0dc <tcp_output_fill_options+0x78>)
 800d0c6:	f005 fa2d 	bl	8012524 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d0ca:	bf00      	nop
 800d0cc:	3720      	adds	r7, #32
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08014d10 	.word	0x08014d10
 800d0d8:	08015440 	.word	0x08015440
 800d0dc:	08014d64 	.word	0x08014d64
 800d0e0:	08015338 	.word	0x08015338

0800d0e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08a      	sub	sp, #40	; 0x28
 800d0e8:	af04      	add	r7, sp, #16
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <tcp_output_control_segment+0x22>
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <tcp_output_control_segment+0x88>)
 800d0fa:	f240 7287 	movw	r2, #1927	; 0x787
 800d0fe:	491c      	ldr	r1, [pc, #112]	; (800d170 <tcp_output_control_segment+0x8c>)
 800d100:	481c      	ldr	r0, [pc, #112]	; (800d174 <tcp_output_control_segment+0x90>)
 800d102:	f005 fa0f 	bl	8012524 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	6879      	ldr	r1, [r7, #4]
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7fe fae8 	bl	800b6e0 <tcp_route>
 800d110:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d118:	23fc      	movs	r3, #252	; 0xfc
 800d11a:	75fb      	strb	r3, [r7, #23]
 800d11c:	e01c      	b.n	800d158 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d006      	beq.n	800d132 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	7adb      	ldrb	r3, [r3, #11]
 800d128:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	7a9b      	ldrb	r3, [r3, #10]
 800d12e:	757b      	strb	r3, [r7, #21]
 800d130:	e003      	b.n	800d13a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d132:	23ff      	movs	r3, #255	; 0xff
 800d134:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d13a:	7dba      	ldrb	r2, [r7, #22]
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	9302      	str	r3, [sp, #8]
 800d140:	2306      	movs	r3, #6
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	7d7b      	ldrb	r3, [r7, #21]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	68b8      	ldr	r0, [r7, #8]
 800d150:	f001 ff70 	bl	800f034 <ip4_output_if>
 800d154:	4603      	mov	r3, r0
 800d156:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f7f9 fee1 	bl	8006f20 <pbuf_free>
  return err;
 800d15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	08014d10 	.word	0x08014d10
 800d170:	08015468 	.word	0x08015468
 800d174:	08014d64 	.word	0x08014d64

0800d178 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b08b      	sub	sp, #44	; 0x2c
 800d17c:	af04      	add	r7, sp, #16
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d106      	bne.n	800d19a <tcp_rst+0x22>
 800d18c:	4b1f      	ldr	r3, [pc, #124]	; (800d20c <tcp_rst+0x94>)
 800d18e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d192:	491f      	ldr	r1, [pc, #124]	; (800d210 <tcp_rst+0x98>)
 800d194:	481f      	ldr	r0, [pc, #124]	; (800d214 <tcp_rst+0x9c>)
 800d196:	f005 f9c5 	bl	8012524 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d106      	bne.n	800d1ae <tcp_rst+0x36>
 800d1a0:	4b1a      	ldr	r3, [pc, #104]	; (800d20c <tcp_rst+0x94>)
 800d1a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d1a6:	491c      	ldr	r1, [pc, #112]	; (800d218 <tcp_rst+0xa0>)
 800d1a8:	481a      	ldr	r0, [pc, #104]	; (800d214 <tcp_rst+0x9c>)
 800d1aa:	f005 f9bb 	bl	8012524 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d1b2:	f246 0308 	movw	r3, #24584	; 0x6008
 800d1b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	b29c      	uxth	r4, r3
 800d1bc:	68b8      	ldr	r0, [r7, #8]
 800d1be:	f7f8 fc10 	bl	80059e2 <lwip_htonl>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	8abb      	ldrh	r3, [r7, #20]
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	2314      	movs	r3, #20
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	4621      	mov	r1, r4
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fe92 	bl	800cf04 <tcp_output_alloc_header_common>
 800d1e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00c      	beq.n	800d202 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	6939      	ldr	r1, [r7, #16]
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7ff ff38 	bl	800d064 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	6939      	ldr	r1, [r7, #16]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff ff72 	bl	800d0e4 <tcp_output_control_segment>
 800d200:	e000      	b.n	800d204 <tcp_rst+0x8c>
    return;
 800d202:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d204:	371c      	adds	r7, #28
 800d206:	46bd      	mov	sp, r7
 800d208:	bd90      	pop	{r4, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08014d10 	.word	0x08014d10
 800d210:	08015494 	.word	0x08015494
 800d214:	08014d64 	.word	0x08014d64
 800d218:	080154b0 	.word	0x080154b0

0800d21c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <tcp_send_empty_ack+0x24>
 800d232:	4b28      	ldr	r3, [pc, #160]	; (800d2d4 <tcp_send_empty_ack+0xb8>)
 800d234:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d238:	4927      	ldr	r1, [pc, #156]	; (800d2d8 <tcp_send_empty_ack+0xbc>)
 800d23a:	4828      	ldr	r0, [pc, #160]	; (800d2dc <tcp_send_empty_ack+0xc0>)
 800d23c:	f005 f972 	bl	8012524 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 0304 	and.w	r3, r3, #4
 800d24a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d24c:	7d7b      	ldrb	r3, [r7, #21]
 800d24e:	b29c      	uxth	r4, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d254:	4618      	mov	r0, r3
 800d256:	f7f8 fbc4 	bl	80059e2 <lwip_htonl>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2200      	movs	r2, #0
 800d25e:	4621      	mov	r1, r4
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff fec1 	bl	800cfe8 <tcp_output_alloc_header>
 800d266:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d109      	bne.n	800d282 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8b5b      	ldrh	r3, [r3, #26]
 800d272:	f043 0303 	orr.w	r3, r3, #3
 800d276:	b29a      	uxth	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d27c:	f06f 0301 	mvn.w	r3, #1
 800d280:	e023      	b.n	800d2ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d282:	7dbb      	ldrb	r3, [r7, #22]
 800d284:	7dfa      	ldrb	r2, [r7, #23]
 800d286:	6939      	ldr	r1, [r7, #16]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff feeb 	bl	800d064 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3304      	adds	r3, #4
 800d294:	6939      	ldr	r1, [r7, #16]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff ff24 	bl	800d0e4 <tcp_output_control_segment>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d007      	beq.n	800d2b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f043 0303 	orr.w	r3, r3, #3
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	835a      	strh	r2, [r3, #26]
 800d2b6:	e006      	b.n	800d2c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8b5b      	ldrh	r3, [r3, #26]
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	371c      	adds	r7, #28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd90      	pop	{r4, r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08014d10 	.word	0x08014d10
 800d2d8:	080154cc 	.word	0x080154cc
 800d2dc:	08014d64 	.word	0x08014d64

0800d2e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <tcp_keepalive+0x20>
 800d2f2:	4b18      	ldr	r3, [pc, #96]	; (800d354 <tcp_keepalive+0x74>)
 800d2f4:	f640 0224 	movw	r2, #2084	; 0x824
 800d2f8:	4917      	ldr	r1, [pc, #92]	; (800d358 <tcp_keepalive+0x78>)
 800d2fa:	4818      	ldr	r0, [pc, #96]	; (800d35c <tcp_keepalive+0x7c>)
 800d2fc:	f005 f912 	bl	8012524 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d300:	7dfb      	ldrb	r3, [r7, #23]
 800d302:	b29c      	uxth	r4, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d308:	3b01      	subs	r3, #1
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f8 fb69 	bl	80059e2 <lwip_htonl>
 800d310:	4603      	mov	r3, r0
 800d312:	2200      	movs	r2, #0
 800d314:	4621      	mov	r1, r4
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff fe66 	bl	800cfe8 <tcp_output_alloc_header>
 800d31c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d324:	f04f 33ff 	mov.w	r3, #4294967295
 800d328:	e010      	b.n	800d34c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
 800d32c:	2200      	movs	r2, #0
 800d32e:	6939      	ldr	r1, [r7, #16]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fe97 	bl	800d064 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	3304      	adds	r3, #4
 800d33c:	6939      	ldr	r1, [r7, #16]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fed0 	bl	800d0e4 <tcp_output_control_segment>
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}
 800d354:	08014d10 	.word	0x08014d10
 800d358:	080154ec 	.word	0x080154ec
 800d35c:	08014d64 	.word	0x08014d64

0800d360 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b08b      	sub	sp, #44	; 0x2c
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d368:	2300      	movs	r3, #0
 800d36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d106      	bne.n	800d382 <tcp_zero_window_probe+0x22>
 800d374:	4b4c      	ldr	r3, [pc, #304]	; (800d4a8 <tcp_zero_window_probe+0x148>)
 800d376:	f640 024f 	movw	r2, #2127	; 0x84f
 800d37a:	494c      	ldr	r1, [pc, #304]	; (800d4ac <tcp_zero_window_probe+0x14c>)
 800d37c:	484c      	ldr	r0, [pc, #304]	; (800d4b0 <tcp_zero_window_probe+0x150>)
 800d37e:	f005 f8d1 	bl	8012524 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d386:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	e086      	b.n	800d4a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d398:	2bff      	cmp	r3, #255	; 0xff
 800d39a:	d007      	beq.n	800d3ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	899b      	ldrh	r3, [r3, #12]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7f8 faff 	bl	80059b8 <lwip_htons>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d005      	beq.n	800d3d2 <tcp_zero_window_probe+0x72>
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	891b      	ldrh	r3, [r3, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <tcp_zero_window_probe+0x72>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e000      	b.n	800d3d4 <tcp_zero_window_probe+0x74>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d3d6:	7ffb      	ldrb	r3, [r7, #31]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bf0c      	ite	eq
 800d3dc:	2301      	moveq	r3, #1
 800d3de:	2300      	movne	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3e8:	b299      	uxth	r1, r3
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	8bba      	ldrh	r2, [r7, #28]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff fdf8 	bl	800cfe8 <tcp_output_alloc_header>
 800d3f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d102      	bne.n	800d406 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d400:	f04f 33ff 	mov.w	r3, #4294967295
 800d404:	e04c      	b.n	800d4a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d40c:	7ffb      	ldrb	r3, [r7, #31]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d011      	beq.n	800d436 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	899b      	ldrh	r3, [r3, #12]
 800d416:	b29b      	uxth	r3, r3
 800d418:	b21b      	sxth	r3, r3
 800d41a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d41e:	b21c      	sxth	r4, r3
 800d420:	2011      	movs	r0, #17
 800d422:	f7f8 fac9 	bl	80059b8 <lwip_htons>
 800d426:	4603      	mov	r3, r0
 800d428:	b21b      	sxth	r3, r3
 800d42a:	4323      	orrs	r3, r4
 800d42c:	b21b      	sxth	r3, r3
 800d42e:	b29a      	uxth	r2, r3
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	819a      	strh	r2, [r3, #12]
 800d434:	e010      	b.n	800d458 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	3314      	adds	r3, #20
 800d43c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	6858      	ldr	r0, [r3, #4]
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	891a      	ldrh	r2, [r3, #8]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	891b      	ldrh	r3, [r3, #8]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2201      	movs	r2, #1
 800d452:	6939      	ldr	r1, [r7, #16]
 800d454:	f7f9 ff5e 	bl	8007314 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d458:	6a3b      	ldr	r3, [r7, #32]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f8 fabf 	bl	80059e2 <lwip_htonl>
 800d464:	4603      	mov	r3, r0
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	da02      	bge.n	800d47c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d480:	2200      	movs	r2, #0
 800d482:	69b9      	ldr	r1, [r7, #24]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fded 	bl	800d064 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3304      	adds	r3, #4
 800d490:	69b9      	ldr	r1, [r7, #24]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff fe26 	bl	800d0e4 <tcp_output_control_segment>
 800d498:	4603      	mov	r3, r0
 800d49a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d49c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	372c      	adds	r7, #44	; 0x2c
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd90      	pop	{r4, r7, pc}
 800d4a8:	08014d10 	.word	0x08014d10
 800d4ac:	08015508 	.word	0x08015508
 800d4b0:	08014d64 	.word	0x08014d64

0800d4b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d4bc:	f7fa f818 	bl	80074f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <tcpip_tcp_timer+0x38>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <tcpip_tcp_timer+0x1c>
 800d4c8:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <tcpip_tcp_timer+0x3c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	4908      	ldr	r1, [pc, #32]	; (800d4f4 <tcpip_tcp_timer+0x40>)
 800d4d4:	20fa      	movs	r0, #250	; 0xfa
 800d4d6:	f000 f8f3 	bl	800d6c0 <sys_timeout>
 800d4da:	e003      	b.n	800d4e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <tcpip_tcp_timer+0x44>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
  }
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	2000696c 	.word	0x2000696c
 800d4f0:	2000697c 	.word	0x2000697c
 800d4f4:	0800d4b5 	.word	0x0800d4b5
 800d4f8:	2000010c 	.word	0x2000010c

0800d4fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <tcp_timer_needed+0x30>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10f      	bne.n	800d528 <tcp_timer_needed+0x2c>
 800d508:	4b09      	ldr	r3, [pc, #36]	; (800d530 <tcp_timer_needed+0x34>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d103      	bne.n	800d518 <tcp_timer_needed+0x1c>
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <tcp_timer_needed+0x38>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d007      	beq.n	800d528 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <tcp_timer_needed+0x30>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d51e:	2200      	movs	r2, #0
 800d520:	4905      	ldr	r1, [pc, #20]	; (800d538 <tcp_timer_needed+0x3c>)
 800d522:	20fa      	movs	r0, #250	; 0xfa
 800d524:	f000 f8cc 	bl	800d6c0 <sys_timeout>
  }
}
 800d528:	bf00      	nop
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	2000010c 	.word	0x2000010c
 800d530:	2000696c 	.word	0x2000696c
 800d534:	2000697c 	.word	0x2000697c
 800d538:	0800d4b5 	.word	0x0800d4b5

0800d53c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d548:	2006      	movs	r0, #6
 800d54a:	f7f8 fe8b 	bl	8006264 <memp_malloc>
 800d54e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d151      	bne.n	800d600 <sys_timeout_abs+0xc4>
 800d55c:	4b2a      	ldr	r3, [pc, #168]	; (800d608 <sys_timeout_abs+0xcc>)
 800d55e:	22be      	movs	r2, #190	; 0xbe
 800d560:	492a      	ldr	r1, [pc, #168]	; (800d60c <sys_timeout_abs+0xd0>)
 800d562:	482b      	ldr	r0, [pc, #172]	; (800d610 <sys_timeout_abs+0xd4>)
 800d564:	f004 ffde 	bl	8012524 <iprintf>
    return;
 800d568:	e04a      	b.n	800d600 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <sys_timeout_abs+0xd8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d103      	bne.n	800d592 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d58a:	4a22      	ldr	r2, [pc, #136]	; (800d614 <sys_timeout_abs+0xd8>)
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6013      	str	r3, [r2, #0]
    return;
 800d590:	e037      	b.n	800d602 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	4b1f      	ldr	r3, [pc, #124]	; (800d614 <sys_timeout_abs+0xd8>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	0fdb      	lsrs	r3, r3, #31
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d5aa:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d5b2:	4a18      	ldr	r2, [pc, #96]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	e023      	b.n	800d602 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d5ba:	4b16      	ldr	r3, [pc, #88]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	617b      	str	r3, [r7, #20]
 800d5c0:	e01a      	b.n	800d5f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <sys_timeout_abs+0xa6>
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	0fdb      	lsrs	r3, r3, #31
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d007      	beq.n	800d5f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	601a      	str	r2, [r3, #0]
        break;
 800d5f0:	e007      	b.n	800d602 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e1      	bne.n	800d5c2 <sys_timeout_abs+0x86>
 800d5fe:	e000      	b.n	800d602 <sys_timeout_abs+0xc6>
    return;
 800d600:	bf00      	nop
      }
    }
  }
}
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	0801552c 	.word	0x0801552c
 800d60c:	08015560 	.word	0x08015560
 800d610:	080155a0 	.word	0x080155a0
 800d614:	20000104 	.word	0x20000104

0800d618 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	4798      	blx	r3

  now = sys_now();
 800d62a:	f7f8 f937 	bl	800589c <sys_now>
 800d62e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <lwip_cyclic_timer+0x5c>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4413      	add	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	0fdb      	lsrs	r3, r3, #31
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4413      	add	r3, r2
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	4907      	ldr	r1, [pc, #28]	; (800d678 <lwip_cyclic_timer+0x60>)
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff ff6e 	bl	800d53c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d660:	e004      	b.n	800d66c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	4904      	ldr	r1, [pc, #16]	; (800d678 <lwip_cyclic_timer+0x60>)
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f7ff ff68 	bl	800d53c <sys_timeout_abs>
}
 800d66c:	bf00      	nop
 800d66e:	3718      	adds	r7, #24
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20000108 	.word	0x20000108
 800d678:	0800d619 	.word	0x0800d619

0800d67c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d682:	2301      	movs	r3, #1
 800d684:	607b      	str	r3, [r7, #4]
 800d686:	e00e      	b.n	800d6a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d688:	4a0b      	ldr	r2, [pc, #44]	; (800d6b8 <sys_timeouts_init+0x3c>)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4a08      	ldr	r2, [pc, #32]	; (800d6b8 <sys_timeouts_init+0x3c>)
 800d696:	4413      	add	r3, r2
 800d698:	461a      	mov	r2, r3
 800d69a:	4908      	ldr	r1, [pc, #32]	; (800d6bc <sys_timeouts_init+0x40>)
 800d69c:	f000 f810 	bl	800d6c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	607b      	str	r3, [r7, #4]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d9ed      	bls.n	800d688 <sys_timeouts_init+0xc>
  }
}
 800d6ac:	bf00      	nop
 800d6ae:	bf00      	nop
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	08016194 	.word	0x08016194
 800d6bc:	0800d619 	.word	0x0800d619

0800d6c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d2:	d306      	bcc.n	800d6e2 <sys_timeout+0x22>
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <sys_timeout+0x40>)
 800d6d6:	f240 1229 	movw	r2, #297	; 0x129
 800d6da:	490a      	ldr	r1, [pc, #40]	; (800d704 <sys_timeout+0x44>)
 800d6dc:	480a      	ldr	r0, [pc, #40]	; (800d708 <sys_timeout+0x48>)
 800d6de:	f004 ff21 	bl	8012524 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d6e2:	f7f8 f8db 	bl	800589c <sys_now>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	68b9      	ldr	r1, [r7, #8]
 800d6f2:	6978      	ldr	r0, [r7, #20]
 800d6f4:	f7ff ff22 	bl	800d53c <sys_timeout_abs>
#endif
}
 800d6f8:	bf00      	nop
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	0801552c 	.word	0x0801552c
 800d704:	080155c8 	.word	0x080155c8
 800d708:	080155a0 	.word	0x080155a0

0800d70c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d712:	f7f8 f8c3 	bl	800589c <sys_now>
 800d716:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d718:	4b1a      	ldr	r3, [pc, #104]	; (800d784 <sys_check_timeouts+0x78>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <sys_check_timeouts+0x1a>
 800d722:	f7f9 f8c3 	bl	80068ac <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d726:	4b18      	ldr	r3, [pc, #96]	; (800d788 <sys_check_timeouts+0x7c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d022      	beq.n	800d778 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	0fdb      	lsrs	r3, r3, #31
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d11a      	bne.n	800d77c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a0f      	ldr	r2, [pc, #60]	; (800d788 <sys_check_timeouts+0x7c>)
 800d74c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	4a0b      	ldr	r2, [pc, #44]	; (800d78c <sys_check_timeouts+0x80>)
 800d760:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d762:	68b9      	ldr	r1, [r7, #8]
 800d764:	2006      	movs	r0, #6
 800d766:	f7f8 fdc9 	bl	80062fc <memp_free>
    if (handler != NULL) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d0d3      	beq.n	800d718 <sys_check_timeouts+0xc>
      handler(arg);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6838      	ldr	r0, [r7, #0]
 800d774:	4798      	blx	r3
  do {
 800d776:	e7cf      	b.n	800d718 <sys_check_timeouts+0xc>
      return;
 800d778:	bf00      	nop
 800d77a:	e000      	b.n	800d77e <sys_check_timeouts+0x72>
      return;
 800d77c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	20006964 	.word	0x20006964
 800d788:	20000104 	.word	0x20000104
 800d78c:	20000108 	.word	0x20000108

0800d790 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d794:	f004 ff54 	bl	8012640 <rand>
 800d798:	4603      	mov	r3, r0
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	4b01      	ldr	r3, [pc, #4]	; (800d7b0 <udp_init+0x20>)
 800d7aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7ac:	bf00      	nop
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20000010 	.word	0x20000010

0800d7b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d105      	bne.n	800d7d4 <udp_input_local_match+0x20>
 800d7c8:	4b27      	ldr	r3, [pc, #156]	; (800d868 <udp_input_local_match+0xb4>)
 800d7ca:	2287      	movs	r2, #135	; 0x87
 800d7cc:	4927      	ldr	r1, [pc, #156]	; (800d86c <udp_input_local_match+0xb8>)
 800d7ce:	4828      	ldr	r0, [pc, #160]	; (800d870 <udp_input_local_match+0xbc>)
 800d7d0:	f004 fea8 	bl	8012524 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <udp_input_local_match+0x32>
 800d7da:	4b23      	ldr	r3, [pc, #140]	; (800d868 <udp_input_local_match+0xb4>)
 800d7dc:	2288      	movs	r2, #136	; 0x88
 800d7de:	4925      	ldr	r1, [pc, #148]	; (800d874 <udp_input_local_match+0xc0>)
 800d7e0:	4823      	ldr	r0, [pc, #140]	; (800d870 <udp_input_local_match+0xbc>)
 800d7e2:	f004 fe9f 	bl	8012524 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	7a1b      	ldrb	r3, [r3, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00b      	beq.n	800d806 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	7a1a      	ldrb	r2, [r3, #8]
 800d7f2:	4b21      	ldr	r3, [pc, #132]	; (800d878 <udp_input_local_match+0xc4>)
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d001      	beq.n	800d806 <udp_input_local_match+0x52>
    return 0;
 800d802:	2300      	movs	r3, #0
 800d804:	e02b      	b.n	800d85e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d018      	beq.n	800d83e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d013      	beq.n	800d83a <udp_input_local_match+0x86>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00f      	beq.n	800d83a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d81a:	4b17      	ldr	r3, [pc, #92]	; (800d878 <udp_input_local_match+0xc4>)
 800d81c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d822:	d00a      	beq.n	800d83a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	4b13      	ldr	r3, [pc, #76]	; (800d878 <udp_input_local_match+0xc4>)
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	405a      	eors	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	3308      	adds	r3, #8
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d836:	2b00      	cmp	r3, #0
 800d838:	d110      	bne.n	800d85c <udp_input_local_match+0xa8>
          return 1;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e00f      	b.n	800d85e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <udp_input_local_match+0xa4>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d005      	beq.n	800d858 <udp_input_local_match+0xa4>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	4b09      	ldr	r3, [pc, #36]	; (800d878 <udp_input_local_match+0xc4>)
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	429a      	cmp	r2, r3
 800d856:	d101      	bne.n	800d85c <udp_input_local_match+0xa8>
        return 1;
 800d858:	2301      	movs	r3, #1
 800d85a:	e000      	b.n	800d85e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	08015614 	.word	0x08015614
 800d86c:	08015644 	.word	0x08015644
 800d870:	08015668 	.word	0x08015668
 800d874:	08015690 	.word	0x08015690
 800d878:	20003428 	.word	0x20003428

0800d87c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d87c:	b590      	push	{r4, r7, lr}
 800d87e:	b08d      	sub	sp, #52	; 0x34
 800d880:	af02      	add	r7, sp, #8
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d105      	bne.n	800d89c <udp_input+0x20>
 800d890:	4b7c      	ldr	r3, [pc, #496]	; (800da84 <udp_input+0x208>)
 800d892:	22cf      	movs	r2, #207	; 0xcf
 800d894:	497c      	ldr	r1, [pc, #496]	; (800da88 <udp_input+0x20c>)
 800d896:	487d      	ldr	r0, [pc, #500]	; (800da8c <udp_input+0x210>)
 800d898:	f004 fe44 	bl	8012524 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d105      	bne.n	800d8ae <udp_input+0x32>
 800d8a2:	4b78      	ldr	r3, [pc, #480]	; (800da84 <udp_input+0x208>)
 800d8a4:	22d0      	movs	r2, #208	; 0xd0
 800d8a6:	497a      	ldr	r1, [pc, #488]	; (800da90 <udp_input+0x214>)
 800d8a8:	4878      	ldr	r0, [pc, #480]	; (800da8c <udp_input+0x210>)
 800d8aa:	f004 fe3b 	bl	8012524 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	895b      	ldrh	r3, [r3, #10]
 800d8b2:	2b07      	cmp	r3, #7
 800d8b4:	d803      	bhi.n	800d8be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7f9 fb32 	bl	8006f20 <pbuf_free>
    goto end;
 800d8bc:	e0de      	b.n	800da7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d8c4:	4b73      	ldr	r3, [pc, #460]	; (800da94 <udp_input+0x218>)
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	4a72      	ldr	r2, [pc, #456]	; (800da94 <udp_input+0x218>)
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fc88 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7f8 f86a 	bl	80059b8 <lwip_htons>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	885b      	ldrh	r3, [r3, #2]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f8 f862 	bl	80059b8 <lwip_htons>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d900:	2300      	movs	r3, #0
 800d902:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d904:	4b64      	ldr	r3, [pc, #400]	; (800da98 <udp_input+0x21c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
 800d90a:	e054      	b.n	800d9b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	8a5b      	ldrh	r3, [r3, #18]
 800d910:	89fa      	ldrh	r2, [r7, #14]
 800d912:	429a      	cmp	r2, r3
 800d914:	d14a      	bne.n	800d9ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d916:	7cfb      	ldrb	r3, [r7, #19]
 800d918:	461a      	mov	r2, r3
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d91e:	f7ff ff49 	bl	800d7b4 <udp_input_local_match>
 800d922:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d924:	2b00      	cmp	r3, #0
 800d926:	d041      	beq.n	800d9ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	7c1b      	ldrb	r3, [r3, #16]
 800d92c:	f003 0304 	and.w	r3, r3, #4
 800d930:	2b00      	cmp	r3, #0
 800d932:	d11d      	bne.n	800d970 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d102      	bne.n	800d940 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	61fb      	str	r3, [r7, #28]
 800d93e:	e017      	b.n	800d970 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d940:	7cfb      	ldrb	r3, [r7, #19]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d014      	beq.n	800d970 <udp_input+0xf4>
 800d946:	4b53      	ldr	r3, [pc, #332]	; (800da94 <udp_input+0x218>)
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94e:	d10f      	bne.n	800d970 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	3304      	adds	r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d008      	beq.n	800d970 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	3304      	adds	r3, #4
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d101      	bne.n	800d970 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	8a9b      	ldrh	r3, [r3, #20]
 800d974:	8a3a      	ldrh	r2, [r7, #16]
 800d976:	429a      	cmp	r2, r3
 800d978:	d118      	bne.n	800d9ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d005      	beq.n	800d98e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	4b43      	ldr	r3, [pc, #268]	; (800da94 <udp_input+0x218>)
 800d988:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d10e      	bne.n	800d9ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d014      	beq.n	800d9be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	68da      	ldr	r2, [r3, #12]
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d99c:	4b3e      	ldr	r3, [pc, #248]	; (800da98 <udp_input+0x21c>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d9a4:	4a3c      	ldr	r2, [pc, #240]	; (800da98 <udp_input+0x21c>)
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d9aa:	e008      	b.n	800d9be <udp_input+0x142>
      }
    }

    prev = pcb;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1a7      	bne.n	800d90c <udp_input+0x90>
 800d9bc:	e000      	b.n	800d9c0 <udp_input+0x144>
        break;
 800d9be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <udp_input+0x14e>
    pcb = uncon_pcb;
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <udp_input+0x15a>
    for_us = 1;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	76fb      	strb	r3, [r7, #27]
 800d9d4:	e00a      	b.n	800d9ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	4b2d      	ldr	r3, [pc, #180]	; (800da94 <udp_input+0x218>)
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	bf0c      	ite	eq
 800d9e4:	2301      	moveq	r3, #1
 800d9e6:	2300      	movne	r3, #0
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d9ec:	7efb      	ldrb	r3, [r7, #27]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d041      	beq.n	800da76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d9f2:	2108      	movs	r1, #8
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7f9 fa0d 	bl	8006e14 <pbuf_remove_header>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00a      	beq.n	800da16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800da00:	4b20      	ldr	r3, [pc, #128]	; (800da84 <udp_input+0x208>)
 800da02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800da06:	4925      	ldr	r1, [pc, #148]	; (800da9c <udp_input+0x220>)
 800da08:	4820      	ldr	r0, [pc, #128]	; (800da8c <udp_input+0x210>)
 800da0a:	f004 fd8b 	bl	8012524 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7f9 fa86 	bl	8006f20 <pbuf_free>
      goto end;
 800da14:	e032      	b.n	800da7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800da16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d012      	beq.n	800da42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00a      	beq.n	800da3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	699c      	ldr	r4, [r3, #24]
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	69d8      	ldr	r0, [r3, #28]
 800da2c:	8a3b      	ldrh	r3, [r7, #16]
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	4b1b      	ldr	r3, [pc, #108]	; (800daa0 <udp_input+0x224>)
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800da38:	e021      	b.n	800da7e <udp_input+0x202>
        pbuf_free(p);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7f9 fa70 	bl	8006f20 <pbuf_free>
        goto end;
 800da40:	e01c      	b.n	800da7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800da42:	7cfb      	ldrb	r3, [r7, #19]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d112      	bne.n	800da6e <udp_input+0x1f2>
 800da48:	4b12      	ldr	r3, [pc, #72]	; (800da94 <udp_input+0x218>)
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da50:	2be0      	cmp	r3, #224	; 0xe0
 800da52:	d00c      	beq.n	800da6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800da54:	4b0f      	ldr	r3, [pc, #60]	; (800da94 <udp_input+0x218>)
 800da56:	899b      	ldrh	r3, [r3, #12]
 800da58:	3308      	adds	r3, #8
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	b21b      	sxth	r3, r3
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7f9 fa4a 	bl	8006efa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800da66:	2103      	movs	r1, #3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 f89b 	bl	800eba4 <icmp_dest_unreach>
      pbuf_free(p);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7f9 fa56 	bl	8006f20 <pbuf_free>
  return;
 800da74:	e003      	b.n	800da7e <udp_input+0x202>
    pbuf_free(p);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7f9 fa52 	bl	8006f20 <pbuf_free>
  return;
 800da7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800da7e:	372c      	adds	r7, #44	; 0x2c
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}
 800da84:	08015614 	.word	0x08015614
 800da88:	080156b8 	.word	0x080156b8
 800da8c:	08015668 	.word	0x08015668
 800da90:	080156d0 	.word	0x080156d0
 800da94:	20003428 	.word	0x20003428
 800da98:	20006984 	.word	0x20006984
 800da9c:	080156ec 	.word	0x080156ec
 800daa0:	20003438 	.word	0x20003438

0800daa4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01e      	beq.n	800daf2 <udp_netif_ip_addr_changed+0x4e>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d01a      	beq.n	800daf2 <udp_netif_ip_addr_changed+0x4e>
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d017      	beq.n	800daf2 <udp_netif_ip_addr_changed+0x4e>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d013      	beq.n	800daf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800daca:	4b0d      	ldr	r3, [pc, #52]	; (800db00 <udp_netif_ip_addr_changed+0x5c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	e00c      	b.n	800daec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d103      	bne.n	800dae6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1ef      	bne.n	800dad2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800daf2:	bf00      	nop
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	20006984 	.word	0x20006984

0800db04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800db0c:	4915      	ldr	r1, [pc, #84]	; (800db64 <etharp_free_entry+0x60>)
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	4613      	mov	r3, r2
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	4413      	add	r3, r2
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	440b      	add	r3, r1
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d013      	beq.n	800db48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800db20:	4910      	ldr	r1, [pc, #64]	; (800db64 <etharp_free_entry+0x60>)
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	4613      	mov	r3, r2
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	4413      	add	r3, r2
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	440b      	add	r3, r1
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4618      	mov	r0, r3
 800db32:	f7f9 f9f5 	bl	8006f20 <pbuf_free>
    arp_table[i].q = NULL;
 800db36:	490b      	ldr	r1, [pc, #44]	; (800db64 <etharp_free_entry+0x60>)
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	4613      	mov	r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	4413      	add	r3, r2
 800db40:	00db      	lsls	r3, r3, #3
 800db42:	440b      	add	r3, r1
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800db48:	4906      	ldr	r1, [pc, #24]	; (800db64 <etharp_free_entry+0x60>)
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	4613      	mov	r3, r2
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	4413      	add	r3, r2
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	440b      	add	r3, r1
 800db56:	3314      	adds	r3, #20
 800db58:	2200      	movs	r2, #0
 800db5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20000110 	.word	0x20000110

0800db68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db6e:	2300      	movs	r3, #0
 800db70:	607b      	str	r3, [r7, #4]
 800db72:	e096      	b.n	800dca2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800db74:	494f      	ldr	r1, [pc, #316]	; (800dcb4 <etharp_tmr+0x14c>)
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	4613      	mov	r3, r2
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	3314      	adds	r3, #20
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800db88:	78fb      	ldrb	r3, [r7, #3]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 8086 	beq.w	800dc9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800db90:	4948      	ldr	r1, [pc, #288]	; (800dcb4 <etharp_tmr+0x14c>)
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	4613      	mov	r3, r2
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	4413      	add	r3, r2
 800db9a:	00db      	lsls	r3, r3, #3
 800db9c:	440b      	add	r3, r1
 800db9e:	3312      	adds	r3, #18
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	b298      	uxth	r0, r3
 800dba6:	4943      	ldr	r1, [pc, #268]	; (800dcb4 <etharp_tmr+0x14c>)
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	4413      	add	r3, r2
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	440b      	add	r3, r1
 800dbb4:	3312      	adds	r3, #18
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbba:	493e      	ldr	r1, [pc, #248]	; (800dcb4 <etharp_tmr+0x14c>)
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	4413      	add	r3, r2
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	440b      	add	r3, r1
 800dbc8:	3312      	adds	r3, #18
 800dbca:	881b      	ldrh	r3, [r3, #0]
 800dbcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dbd0:	d215      	bcs.n	800dbfe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dbd2:	4938      	ldr	r1, [pc, #224]	; (800dcb4 <etharp_tmr+0x14c>)
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	440b      	add	r3, r1
 800dbe0:	3314      	adds	r3, #20
 800dbe2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d10e      	bne.n	800dc06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dbe8:	4932      	ldr	r1, [pc, #200]	; (800dcb4 <etharp_tmr+0x14c>)
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	4613      	mov	r3, r2
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	4413      	add	r3, r2
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	440b      	add	r3, r1
 800dbf6:	3312      	adds	r3, #18
 800dbf8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	d903      	bls.n	800dc06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff ff80 	bl	800db04 <etharp_free_entry>
 800dc04:	e04a      	b.n	800dc9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dc06:	492b      	ldr	r1, [pc, #172]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4413      	add	r3, r2
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	440b      	add	r3, r1
 800dc14:	3314      	adds	r3, #20
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d10a      	bne.n	800dc32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dc1c:	4925      	ldr	r1, [pc, #148]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	4613      	mov	r3, r2
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	4413      	add	r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	440b      	add	r3, r1
 800dc2a:	3314      	adds	r3, #20
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	701a      	strb	r2, [r3, #0]
 800dc30:	e034      	b.n	800dc9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dc32:	4920      	ldr	r1, [pc, #128]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	4613      	mov	r3, r2
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	4413      	add	r3, r2
 800dc3c:	00db      	lsls	r3, r3, #3
 800dc3e:	440b      	add	r3, r1
 800dc40:	3314      	adds	r3, #20
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d10a      	bne.n	800dc5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dc48:	491a      	ldr	r1, [pc, #104]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	440b      	add	r3, r1
 800dc56:	3314      	adds	r3, #20
 800dc58:	2202      	movs	r2, #2
 800dc5a:	701a      	strb	r2, [r3, #0]
 800dc5c:	e01e      	b.n	800dc9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dc5e:	4915      	ldr	r1, [pc, #84]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	4613      	mov	r3, r2
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	4413      	add	r3, r2
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	440b      	add	r3, r1
 800dc6c:	3314      	adds	r3, #20
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d113      	bne.n	800dc9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dc74:	490f      	ldr	r1, [pc, #60]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	440b      	add	r3, r1
 800dc82:	3308      	adds	r3, #8
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	4a08      	ldr	r2, [pc, #32]	; (800dcb4 <etharp_tmr+0x14c>)
 800dc92:	4413      	add	r3, r2
 800dc94:	3304      	adds	r3, #4
 800dc96:	4619      	mov	r1, r3
 800dc98:	f000 fe6e 	bl	800e978 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	607b      	str	r3, [r7, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b09      	cmp	r3, #9
 800dca6:	f77f af65 	ble.w	800db74 <etharp_tmr+0xc>
      }
    }
  }
}
 800dcaa:	bf00      	nop
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20000110 	.word	0x20000110

0800dcb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b08a      	sub	sp, #40	; 0x28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dcc6:	230a      	movs	r3, #10
 800dcc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dcca:	230a      	movs	r3, #10
 800dccc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dcce:	230a      	movs	r3, #10
 800dcd0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dcd6:	230a      	movs	r3, #10
 800dcd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	83bb      	strh	r3, [r7, #28]
 800dcde:	2300      	movs	r3, #0
 800dce0:	837b      	strh	r3, [r7, #26]
 800dce2:	2300      	movs	r3, #0
 800dce4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dce6:	2300      	movs	r3, #0
 800dce8:	843b      	strh	r3, [r7, #32]
 800dcea:	e0ae      	b.n	800de4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dcec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcf0:	49a6      	ldr	r1, [pc, #664]	; (800df8c <etharp_find_entry+0x2d4>)
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	4413      	add	r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	440b      	add	r3, r1
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dd02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd06:	2b0a      	cmp	r3, #10
 800dd08:	d105      	bne.n	800dd16 <etharp_find_entry+0x5e>
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dd10:	8c3b      	ldrh	r3, [r7, #32]
 800dd12:	847b      	strh	r3, [r7, #34]	; 0x22
 800dd14:	e095      	b.n	800de42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dd16:	7dfb      	ldrb	r3, [r7, #23]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 8092 	beq.w	800de42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d009      	beq.n	800dd38 <etharp_find_entry+0x80>
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d806      	bhi.n	800dd38 <etharp_find_entry+0x80>
 800dd2a:	4b99      	ldr	r3, [pc, #612]	; (800df90 <etharp_find_entry+0x2d8>)
 800dd2c:	f240 1223 	movw	r2, #291	; 0x123
 800dd30:	4998      	ldr	r1, [pc, #608]	; (800df94 <etharp_find_entry+0x2dc>)
 800dd32:	4899      	ldr	r0, [pc, #612]	; (800df98 <etharp_find_entry+0x2e0>)
 800dd34:	f004 fbf6 	bl	8012524 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d020      	beq.n	800dd80 <etharp_find_entry+0xc8>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6819      	ldr	r1, [r3, #0]
 800dd42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd46:	4891      	ldr	r0, [pc, #580]	; (800df8c <etharp_find_entry+0x2d4>)
 800dd48:	4613      	mov	r3, r2
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	4413      	add	r3, r2
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	4403      	add	r3, r0
 800dd52:	3304      	adds	r3, #4
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4299      	cmp	r1, r3
 800dd58:	d112      	bne.n	800dd80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00c      	beq.n	800dd7a <etharp_find_entry+0xc2>
 800dd60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd64:	4989      	ldr	r1, [pc, #548]	; (800df8c <etharp_find_entry+0x2d4>)
 800dd66:	4613      	mov	r3, r2
 800dd68:	005b      	lsls	r3, r3, #1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	440b      	add	r3, r1
 800dd70:	3308      	adds	r3, #8
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d102      	bne.n	800dd80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dd7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd7e:	e100      	b.n	800df82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dd80:	7dfb      	ldrb	r3, [r7, #23]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d140      	bne.n	800de08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dd86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd8a:	4980      	ldr	r1, [pc, #512]	; (800df8c <etharp_find_entry+0x2d4>)
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	4413      	add	r3, r2
 800dd92:	00db      	lsls	r3, r3, #3
 800dd94:	440b      	add	r3, r1
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01a      	beq.n	800ddd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dd9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dda0:	497a      	ldr	r1, [pc, #488]	; (800df8c <etharp_find_entry+0x2d4>)
 800dda2:	4613      	mov	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	4413      	add	r3, r2
 800dda8:	00db      	lsls	r3, r3, #3
 800ddaa:	440b      	add	r3, r1
 800ddac:	3312      	adds	r3, #18
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	8bba      	ldrh	r2, [r7, #28]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d845      	bhi.n	800de42 <etharp_find_entry+0x18a>
            old_queue = i;
 800ddb6:	8c3b      	ldrh	r3, [r7, #32]
 800ddb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ddba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddbe:	4973      	ldr	r1, [pc, #460]	; (800df8c <etharp_find_entry+0x2d4>)
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	4413      	add	r3, r2
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	440b      	add	r3, r1
 800ddca:	3312      	adds	r3, #18
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	83bb      	strh	r3, [r7, #28]
 800ddd0:	e037      	b.n	800de42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ddd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddd6:	496d      	ldr	r1, [pc, #436]	; (800df8c <etharp_find_entry+0x2d4>)
 800ddd8:	4613      	mov	r3, r2
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	4413      	add	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	440b      	add	r3, r1
 800dde2:	3312      	adds	r3, #18
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	8b7a      	ldrh	r2, [r7, #26]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d82a      	bhi.n	800de42 <etharp_find_entry+0x18a>
            old_pending = i;
 800ddec:	8c3b      	ldrh	r3, [r7, #32]
 800ddee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ddf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddf4:	4965      	ldr	r1, [pc, #404]	; (800df8c <etharp_find_entry+0x2d4>)
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	440b      	add	r3, r1
 800de00:	3312      	adds	r3, #18
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	837b      	strh	r3, [r7, #26]
 800de06:	e01c      	b.n	800de42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d919      	bls.n	800de42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800de0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de12:	495e      	ldr	r1, [pc, #376]	; (800df8c <etharp_find_entry+0x2d4>)
 800de14:	4613      	mov	r3, r2
 800de16:	005b      	lsls	r3, r3, #1
 800de18:	4413      	add	r3, r2
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	440b      	add	r3, r1
 800de1e:	3312      	adds	r3, #18
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	8b3a      	ldrh	r2, [r7, #24]
 800de24:	429a      	cmp	r2, r3
 800de26:	d80c      	bhi.n	800de42 <etharp_find_entry+0x18a>
            old_stable = i;
 800de28:	8c3b      	ldrh	r3, [r7, #32]
 800de2a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800de2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de30:	4956      	ldr	r1, [pc, #344]	; (800df8c <etharp_find_entry+0x2d4>)
 800de32:	4613      	mov	r3, r2
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	4413      	add	r3, r2
 800de38:	00db      	lsls	r3, r3, #3
 800de3a:	440b      	add	r3, r1
 800de3c:	3312      	adds	r3, #18
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de42:	8c3b      	ldrh	r3, [r7, #32]
 800de44:	3301      	adds	r3, #1
 800de46:	b29b      	uxth	r3, r3
 800de48:	843b      	strh	r3, [r7, #32]
 800de4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de4e:	2b09      	cmp	r3, #9
 800de50:	f77f af4c 	ble.w	800dcec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800de54:	7afb      	ldrb	r3, [r7, #11]
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d108      	bne.n	800de70 <etharp_find_entry+0x1b8>
 800de5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800de62:	2b0a      	cmp	r3, #10
 800de64:	d107      	bne.n	800de76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800de66:	7afb      	ldrb	r3, [r7, #11]
 800de68:	f003 0301 	and.w	r3, r3, #1
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800de70:	f04f 33ff 	mov.w	r3, #4294967295
 800de74:	e085      	b.n	800df82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800de76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800de7a:	2b09      	cmp	r3, #9
 800de7c:	dc02      	bgt.n	800de84 <etharp_find_entry+0x1cc>
    i = empty;
 800de7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de80:	843b      	strh	r3, [r7, #32]
 800de82:	e039      	b.n	800def8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800de84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800de88:	2b09      	cmp	r3, #9
 800de8a:	dc14      	bgt.n	800deb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800de8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800de90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de94:	493d      	ldr	r1, [pc, #244]	; (800df8c <etharp_find_entry+0x2d4>)
 800de96:	4613      	mov	r3, r2
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	4413      	add	r3, r2
 800de9c:	00db      	lsls	r3, r3, #3
 800de9e:	440b      	add	r3, r1
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d018      	beq.n	800ded8 <etharp_find_entry+0x220>
 800dea6:	4b3a      	ldr	r3, [pc, #232]	; (800df90 <etharp_find_entry+0x2d8>)
 800dea8:	f240 126d 	movw	r2, #365	; 0x16d
 800deac:	493b      	ldr	r1, [pc, #236]	; (800df9c <etharp_find_entry+0x2e4>)
 800deae:	483a      	ldr	r0, [pc, #232]	; (800df98 <etharp_find_entry+0x2e0>)
 800deb0:	f004 fb38 	bl	8012524 <iprintf>
 800deb4:	e010      	b.n	800ded8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800deb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800deba:	2b09      	cmp	r3, #9
 800debc:	dc02      	bgt.n	800dec4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800debe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dec0:	843b      	strh	r3, [r7, #32]
 800dec2:	e009      	b.n	800ded8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dec4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dec8:	2b09      	cmp	r3, #9
 800deca:	dc02      	bgt.n	800ded2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800decc:	8bfb      	ldrh	r3, [r7, #30]
 800dece:	843b      	strh	r3, [r7, #32]
 800ded0:	e002      	b.n	800ded8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ded2:	f04f 33ff 	mov.w	r3, #4294967295
 800ded6:	e054      	b.n	800df82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ded8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dedc:	2b09      	cmp	r3, #9
 800dede:	dd06      	ble.n	800deee <etharp_find_entry+0x236>
 800dee0:	4b2b      	ldr	r3, [pc, #172]	; (800df90 <etharp_find_entry+0x2d8>)
 800dee2:	f240 127f 	movw	r2, #383	; 0x17f
 800dee6:	492e      	ldr	r1, [pc, #184]	; (800dfa0 <etharp_find_entry+0x2e8>)
 800dee8:	482b      	ldr	r0, [pc, #172]	; (800df98 <etharp_find_entry+0x2e0>)
 800deea:	f004 fb1b 	bl	8012524 <iprintf>
    etharp_free_entry(i);
 800deee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800def2:	4618      	mov	r0, r3
 800def4:	f7ff fe06 	bl	800db04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800def8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800defc:	2b09      	cmp	r3, #9
 800defe:	dd06      	ble.n	800df0e <etharp_find_entry+0x256>
 800df00:	4b23      	ldr	r3, [pc, #140]	; (800df90 <etharp_find_entry+0x2d8>)
 800df02:	f240 1283 	movw	r2, #387	; 0x183
 800df06:	4926      	ldr	r1, [pc, #152]	; (800dfa0 <etharp_find_entry+0x2e8>)
 800df08:	4823      	ldr	r0, [pc, #140]	; (800df98 <etharp_find_entry+0x2e0>)
 800df0a:	f004 fb0b 	bl	8012524 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800df0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df12:	491e      	ldr	r1, [pc, #120]	; (800df8c <etharp_find_entry+0x2d4>)
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	3314      	adds	r3, #20
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d006      	beq.n	800df34 <etharp_find_entry+0x27c>
 800df26:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <etharp_find_entry+0x2d8>)
 800df28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800df2c:	491d      	ldr	r1, [pc, #116]	; (800dfa4 <etharp_find_entry+0x2ec>)
 800df2e:	481a      	ldr	r0, [pc, #104]	; (800df98 <etharp_find_entry+0x2e0>)
 800df30:	f004 faf8 	bl	8012524 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00b      	beq.n	800df52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800df3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6819      	ldr	r1, [r3, #0]
 800df42:	4812      	ldr	r0, [pc, #72]	; (800df8c <etharp_find_entry+0x2d4>)
 800df44:	4613      	mov	r3, r2
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	4413      	add	r3, r2
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	4403      	add	r3, r0
 800df4e:	3304      	adds	r3, #4
 800df50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800df52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df56:	490d      	ldr	r1, [pc, #52]	; (800df8c <etharp_find_entry+0x2d4>)
 800df58:	4613      	mov	r3, r2
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	4413      	add	r3, r2
 800df5e:	00db      	lsls	r3, r3, #3
 800df60:	440b      	add	r3, r1
 800df62:	3312      	adds	r3, #18
 800df64:	2200      	movs	r2, #0
 800df66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800df68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df6c:	4907      	ldr	r1, [pc, #28]	; (800df8c <etharp_find_entry+0x2d4>)
 800df6e:	4613      	mov	r3, r2
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	4413      	add	r3, r2
 800df74:	00db      	lsls	r3, r3, #3
 800df76:	440b      	add	r3, r1
 800df78:	3308      	adds	r3, #8
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800df7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3728      	adds	r7, #40	; 0x28
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000110 	.word	0x20000110
 800df90:	08015978 	.word	0x08015978
 800df94:	080159b0 	.word	0x080159b0
 800df98:	080159f0 	.word	0x080159f0
 800df9c:	08015a18 	.word	0x08015a18
 800dfa0:	08015a30 	.word	0x08015a30
 800dfa4:	08015a44 	.word	0x08015a44

0800dfa8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af02      	add	r7, sp, #8
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dfbc:	2b06      	cmp	r3, #6
 800dfbe:	d006      	beq.n	800dfce <etharp_update_arp_entry+0x26>
 800dfc0:	4b48      	ldr	r3, [pc, #288]	; (800e0e4 <etharp_update_arp_entry+0x13c>)
 800dfc2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800dfc6:	4948      	ldr	r1, [pc, #288]	; (800e0e8 <etharp_update_arp_entry+0x140>)
 800dfc8:	4848      	ldr	r0, [pc, #288]	; (800e0ec <etharp_update_arp_entry+0x144>)
 800dfca:	f004 faab 	bl	8012524 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d012      	beq.n	800dffa <etharp_update_arp_entry+0x52>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00e      	beq.n	800dffa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	68f9      	ldr	r1, [r7, #12]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f001 f8fe 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800dfe8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d105      	bne.n	800dffa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dff6:	2be0      	cmp	r3, #224	; 0xe0
 800dff8:	d102      	bne.n	800e000 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dffa:	f06f 030f 	mvn.w	r3, #15
 800dffe:	e06c      	b.n	800e0da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	4619      	mov	r1, r3
 800e006:	68b8      	ldr	r0, [r7, #8]
 800e008:	f7ff fe56 	bl	800dcb8 <etharp_find_entry>
 800e00c:	4603      	mov	r3, r0
 800e00e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e010:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e014:	2b00      	cmp	r3, #0
 800e016:	da02      	bge.n	800e01e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e018:	8afb      	ldrh	r3, [r7, #22]
 800e01a:	b25b      	sxtb	r3, r3
 800e01c:	e05d      	b.n	800e0da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e01e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e022:	4933      	ldr	r1, [pc, #204]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e024:	4613      	mov	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	4413      	add	r3, r2
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	440b      	add	r3, r1
 800e02e:	3314      	adds	r3, #20
 800e030:	2202      	movs	r2, #2
 800e032:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e038:	492d      	ldr	r1, [pc, #180]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e03a:	4613      	mov	r3, r2
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	4413      	add	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	440b      	add	r3, r1
 800e044:	3308      	adds	r3, #8
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e04a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e04e:	4613      	mov	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	4413      	add	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	3308      	adds	r3, #8
 800e058:	4a25      	ldr	r2, [pc, #148]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e05a:	4413      	add	r3, r2
 800e05c:	3304      	adds	r3, #4
 800e05e:	2206      	movs	r2, #6
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	4618      	mov	r0, r3
 800e064:	f004 fa48 	bl	80124f8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e068:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e06c:	4920      	ldr	r1, [pc, #128]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	3312      	adds	r3, #18
 800e07a:	2200      	movs	r2, #0
 800e07c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e07e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e082:	491b      	ldr	r1, [pc, #108]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d021      	beq.n	800e0d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e094:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e098:	4915      	ldr	r1, [pc, #84]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e09a:	4613      	mov	r3, r2
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	4413      	add	r3, r2
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	440b      	add	r3, r1
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e0a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0ac:	4910      	ldr	r1, [pc, #64]	; (800e0f0 <etharp_update_arp_entry+0x148>)
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	005b      	lsls	r3, r3, #1
 800e0b2:	4413      	add	r3, r2
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	440b      	add	r3, r1
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e0c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6939      	ldr	r1, [r7, #16]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f001 ff91 	bl	800fff4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e0d2:	6938      	ldr	r0, [r7, #16]
 800e0d4:	f7f8 ff24 	bl	8006f20 <pbuf_free>
  }
  return ERR_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3718      	adds	r7, #24
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	08015978 	.word	0x08015978
 800e0e8:	08015a70 	.word	0x08015a70
 800e0ec:	080159f0 	.word	0x080159f0
 800e0f0:	20000110 	.word	0x20000110

0800e0f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60fb      	str	r3, [r7, #12]
 800e100:	e01e      	b.n	800e140 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e102:	4913      	ldr	r1, [pc, #76]	; (800e150 <etharp_cleanup_netif+0x5c>)
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	4613      	mov	r3, r2
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	4413      	add	r3, r2
 800e10c:	00db      	lsls	r3, r3, #3
 800e10e:	440b      	add	r3, r1
 800e110:	3314      	adds	r3, #20
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e116:	7afb      	ldrb	r3, [r7, #11]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00e      	beq.n	800e13a <etharp_cleanup_netif+0x46>
 800e11c:	490c      	ldr	r1, [pc, #48]	; (800e150 <etharp_cleanup_netif+0x5c>)
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	3308      	adds	r3, #8
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	429a      	cmp	r2, r3
 800e132:	d102      	bne.n	800e13a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f7ff fce5 	bl	800db04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	3301      	adds	r3, #1
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b09      	cmp	r3, #9
 800e144:	dddd      	ble.n	800e102 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e146:	bf00      	nop
 800e148:	bf00      	nop
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	20000110 	.word	0x20000110

0800e154 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e154:	b5b0      	push	{r4, r5, r7, lr}
 800e156:	b08a      	sub	sp, #40	; 0x28
 800e158:	af04      	add	r7, sp, #16
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d107      	bne.n	800e174 <etharp_input+0x20>
 800e164:	4b3d      	ldr	r3, [pc, #244]	; (800e25c <etharp_input+0x108>)
 800e166:	f240 228a 	movw	r2, #650	; 0x28a
 800e16a:	493d      	ldr	r1, [pc, #244]	; (800e260 <etharp_input+0x10c>)
 800e16c:	483d      	ldr	r0, [pc, #244]	; (800e264 <etharp_input+0x110>)
 800e16e:	f004 f9d9 	bl	8012524 <iprintf>
 800e172:	e06f      	b.n	800e254 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e184:	d10c      	bne.n	800e1a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e18a:	2b06      	cmp	r3, #6
 800e18c:	d108      	bne.n	800e1a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e192:	2b04      	cmp	r3, #4
 800e194:	d104      	bne.n	800e1a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	885b      	ldrh	r3, [r3, #2]
 800e19a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e19c:	2b08      	cmp	r3, #8
 800e19e:	d003      	beq.n	800e1a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7f8 febd 	bl	8006f20 <pbuf_free>
    return;
 800e1a6:	e055      	b.n	800e254 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	330e      	adds	r3, #14
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	3318      	adds	r3, #24
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d102      	bne.n	800e1c8 <etharp_input+0x74>
    for_us = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	75fb      	strb	r3, [r7, #23]
 800e1c6:	e009      	b.n	800e1dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	bf0c      	ite	eq
 800e1d4:	2301      	moveq	r3, #1
 800e1d6:	2300      	movne	r3, #0
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f103 0208 	add.w	r2, r3, #8
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <etharp_input+0x98>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e000      	b.n	800e1ee <etharp_input+0x9a>
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	f107 010c 	add.w	r1, r7, #12
 800e1f2:	6838      	ldr	r0, [r7, #0]
 800e1f4:	f7ff fed8 	bl	800dfa8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	88db      	ldrh	r3, [r3, #6]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e202:	d003      	beq.n	800e20c <etharp_input+0xb8>
 800e204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e208:	d01e      	beq.n	800e248 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e20a:	e020      	b.n	800e24e <etharp_input+0xfa>
      if (for_us) {
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d01c      	beq.n	800e24c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e22c:	2102      	movs	r1, #2
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	f107 010c 	add.w	r1, r7, #12
 800e234:	9102      	str	r1, [sp, #8]
 800e236:	9201      	str	r2, [sp, #4]
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	462b      	mov	r3, r5
 800e23c:	4622      	mov	r2, r4
 800e23e:	4601      	mov	r1, r0
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f000 faeb 	bl	800e81c <etharp_raw>
      break;
 800e246:	e001      	b.n	800e24c <etharp_input+0xf8>
      break;
 800e248:	bf00      	nop
 800e24a:	e000      	b.n	800e24e <etharp_input+0xfa>
      break;
 800e24c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7f8 fe66 	bl	8006f20 <pbuf_free>
}
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bdb0      	pop	{r4, r5, r7, pc}
 800e25a:	bf00      	nop
 800e25c:	08015978 	.word	0x08015978
 800e260:	08015ac8 	.word	0x08015ac8
 800e264:	080159f0 	.word	0x080159f0

0800e268 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af02      	add	r7, sp, #8
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e276:	79fa      	ldrb	r2, [r7, #7]
 800e278:	4944      	ldr	r1, [pc, #272]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e27a:	4613      	mov	r3, r2
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	4413      	add	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	440b      	add	r3, r1
 800e284:	3314      	adds	r3, #20
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d806      	bhi.n	800e29a <etharp_output_to_arp_index+0x32>
 800e28c:	4b40      	ldr	r3, [pc, #256]	; (800e390 <etharp_output_to_arp_index+0x128>)
 800e28e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e292:	4940      	ldr	r1, [pc, #256]	; (800e394 <etharp_output_to_arp_index+0x12c>)
 800e294:	4840      	ldr	r0, [pc, #256]	; (800e398 <etharp_output_to_arp_index+0x130>)
 800e296:	f004 f945 	bl	8012524 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e29a:	79fa      	ldrb	r2, [r7, #7]
 800e29c:	493b      	ldr	r1, [pc, #236]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e29e:	4613      	mov	r3, r2
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	4413      	add	r3, r2
 800e2a4:	00db      	lsls	r3, r3, #3
 800e2a6:	440b      	add	r3, r1
 800e2a8:	3314      	adds	r3, #20
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d153      	bne.n	800e358 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e2b0:	79fa      	ldrb	r2, [r7, #7]
 800e2b2:	4936      	ldr	r1, [pc, #216]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	005b      	lsls	r3, r3, #1
 800e2b8:	4413      	add	r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	440b      	add	r3, r1
 800e2be:	3312      	adds	r3, #18
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e2c6:	d919      	bls.n	800e2fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e2c8:	79fa      	ldrb	r2, [r7, #7]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	4413      	add	r3, r2
 800e2d0:	00db      	lsls	r3, r3, #3
 800e2d2:	4a2e      	ldr	r2, [pc, #184]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e2d4:	4413      	add	r3, r2
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	4619      	mov	r1, r3
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 fb4c 	bl	800e978 <etharp_request>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d138      	bne.n	800e358 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e2e6:	79fa      	ldrb	r2, [r7, #7]
 800e2e8:	4928      	ldr	r1, [pc, #160]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4413      	add	r3, r2
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	440b      	add	r3, r1
 800e2f4:	3314      	adds	r3, #20
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	e02d      	b.n	800e358 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e2fc:	79fa      	ldrb	r2, [r7, #7]
 800e2fe:	4923      	ldr	r1, [pc, #140]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e300:	4613      	mov	r3, r2
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	4413      	add	r3, r2
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	440b      	add	r3, r1
 800e30a:	3312      	adds	r3, #18
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e312:	d321      	bcc.n	800e358 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e314:	79fa      	ldrb	r2, [r7, #7]
 800e316:	4613      	mov	r3, r2
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4413      	add	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	4a1b      	ldr	r2, [pc, #108]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e320:	4413      	add	r3, r2
 800e322:	1d19      	adds	r1, r3, #4
 800e324:	79fa      	ldrb	r2, [r7, #7]
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	3308      	adds	r3, #8
 800e330:	4a16      	ldr	r2, [pc, #88]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e332:	4413      	add	r3, r2
 800e334:	3304      	adds	r3, #4
 800e336:	461a      	mov	r2, r3
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f000 fafb 	bl	800e934 <etharp_request_dst>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d109      	bne.n	800e358 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e344:	79fa      	ldrb	r2, [r7, #7]
 800e346:	4911      	ldr	r1, [pc, #68]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	440b      	add	r3, r1
 800e352:	3314      	adds	r3, #20
 800e354:	2203      	movs	r2, #3
 800e356:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e35e:	79fa      	ldrb	r2, [r7, #7]
 800e360:	4613      	mov	r3, r2
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	4413      	add	r3, r2
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	3308      	adds	r3, #8
 800e36a:	4a08      	ldr	r2, [pc, #32]	; (800e38c <etharp_output_to_arp_index+0x124>)
 800e36c:	4413      	add	r3, r2
 800e36e:	3304      	adds	r3, #4
 800e370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e374:	9200      	str	r2, [sp, #0]
 800e376:	460a      	mov	r2, r1
 800e378:	68b9      	ldr	r1, [r7, #8]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f001 fe3a 	bl	800fff4 <ethernet_output>
 800e380:	4603      	mov	r3, r0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	20000110 	.word	0x20000110
 800e390:	08015978 	.word	0x08015978
 800e394:	08015ae8 	.word	0x08015ae8
 800e398:	080159f0 	.word	0x080159f0

0800e39c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08a      	sub	sp, #40	; 0x28
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <etharp_output+0x24>
 800e3b2:	4b73      	ldr	r3, [pc, #460]	; (800e580 <etharp_output+0x1e4>)
 800e3b4:	f240 321e 	movw	r2, #798	; 0x31e
 800e3b8:	4972      	ldr	r1, [pc, #456]	; (800e584 <etharp_output+0x1e8>)
 800e3ba:	4873      	ldr	r0, [pc, #460]	; (800e588 <etharp_output+0x1ec>)
 800e3bc:	f004 f8b2 	bl	8012524 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <etharp_output+0x38>
 800e3c6:	4b6e      	ldr	r3, [pc, #440]	; (800e580 <etharp_output+0x1e4>)
 800e3c8:	f240 321f 	movw	r2, #799	; 0x31f
 800e3cc:	496f      	ldr	r1, [pc, #444]	; (800e58c <etharp_output+0x1f0>)
 800e3ce:	486e      	ldr	r0, [pc, #440]	; (800e588 <etharp_output+0x1ec>)
 800e3d0:	f004 f8a8 	bl	8012524 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <etharp_output+0x4c>
 800e3da:	4b69      	ldr	r3, [pc, #420]	; (800e580 <etharp_output+0x1e4>)
 800e3dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e3e0:	496b      	ldr	r1, [pc, #428]	; (800e590 <etharp_output+0x1f4>)
 800e3e2:	4869      	ldr	r0, [pc, #420]	; (800e588 <etharp_output+0x1ec>)
 800e3e4:	f004 f89e 	bl	8012524 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68f9      	ldr	r1, [r7, #12]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 fef8 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d002      	beq.n	800e400 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e3fa:	4b66      	ldr	r3, [pc, #408]	; (800e594 <etharp_output+0x1f8>)
 800e3fc:	61fb      	str	r3, [r7, #28]
 800e3fe:	e0af      	b.n	800e560 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e408:	2be0      	cmp	r3, #224	; 0xe0
 800e40a:	d118      	bne.n	800e43e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e40c:	2301      	movs	r3, #1
 800e40e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e410:	2300      	movs	r3, #0
 800e412:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e414:	235e      	movs	r3, #94	; 0x5e
 800e416:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3301      	adds	r3, #1
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e422:	b2db      	uxtb	r3, r3
 800e424:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3302      	adds	r3, #2
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3303      	adds	r3, #3
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e436:	f107 0310 	add.w	r3, r7, #16
 800e43a:	61fb      	str	r3, [r7, #28]
 800e43c:	e090      	b.n	800e560 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	3304      	adds	r3, #4
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	405a      	eors	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	3308      	adds	r3, #8
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4013      	ands	r3, r2
 800e452:	2b00      	cmp	r3, #0
 800e454:	d012      	beq.n	800e47c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e45c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e460:	4293      	cmp	r3, r2
 800e462:	d00b      	beq.n	800e47c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	330c      	adds	r3, #12
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	330c      	adds	r3, #12
 800e472:	61bb      	str	r3, [r7, #24]
 800e474:	e002      	b.n	800e47c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e476:	f06f 0303 	mvn.w	r3, #3
 800e47a:	e07d      	b.n	800e578 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e47c:	4b46      	ldr	r3, [pc, #280]	; (800e598 <etharp_output+0x1fc>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	4619      	mov	r1, r3
 800e482:	4a46      	ldr	r2, [pc, #280]	; (800e59c <etharp_output+0x200>)
 800e484:	460b      	mov	r3, r1
 800e486:	005b      	lsls	r3, r3, #1
 800e488:	440b      	add	r3, r1
 800e48a:	00db      	lsls	r3, r3, #3
 800e48c:	4413      	add	r3, r2
 800e48e:	3314      	adds	r3, #20
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	2b01      	cmp	r3, #1
 800e494:	d925      	bls.n	800e4e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e496:	4b40      	ldr	r3, [pc, #256]	; (800e598 <etharp_output+0x1fc>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	4619      	mov	r1, r3
 800e49c:	4a3f      	ldr	r2, [pc, #252]	; (800e59c <etharp_output+0x200>)
 800e49e:	460b      	mov	r3, r1
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	440b      	add	r3, r1
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	4413      	add	r3, r2
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d117      	bne.n	800e4e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	4b38      	ldr	r3, [pc, #224]	; (800e598 <etharp_output+0x1fc>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	4937      	ldr	r1, [pc, #220]	; (800e59c <etharp_output+0x200>)
 800e4be:	4603      	mov	r3, r0
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	4403      	add	r3, r0
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	440b      	add	r3, r1
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d108      	bne.n	800e4e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e4d0:	4b31      	ldr	r3, [pc, #196]	; (800e598 <etharp_output+0x1fc>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff fec5 	bl	800e268 <etharp_output_to_arp_index>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	e04a      	b.n	800e578 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	75fb      	strb	r3, [r7, #23]
 800e4e6:	e031      	b.n	800e54c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e4e8:	7dfa      	ldrb	r2, [r7, #23]
 800e4ea:	492c      	ldr	r1, [pc, #176]	; (800e59c <etharp_output+0x200>)
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	4413      	add	r3, r2
 800e4f2:	00db      	lsls	r3, r3, #3
 800e4f4:	440b      	add	r3, r1
 800e4f6:	3314      	adds	r3, #20
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d923      	bls.n	800e546 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e4fe:	7dfa      	ldrb	r2, [r7, #23]
 800e500:	4926      	ldr	r1, [pc, #152]	; (800e59c <etharp_output+0x200>)
 800e502:	4613      	mov	r3, r2
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	4413      	add	r3, r2
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	440b      	add	r3, r1
 800e50c:	3308      	adds	r3, #8
 800e50e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	429a      	cmp	r2, r3
 800e514:	d117      	bne.n	800e546 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	6819      	ldr	r1, [r3, #0]
 800e51a:	7dfa      	ldrb	r2, [r7, #23]
 800e51c:	481f      	ldr	r0, [pc, #124]	; (800e59c <etharp_output+0x200>)
 800e51e:	4613      	mov	r3, r2
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	4413      	add	r3, r2
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	4403      	add	r3, r0
 800e528:	3304      	adds	r3, #4
 800e52a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e52c:	4299      	cmp	r1, r3
 800e52e:	d10a      	bne.n	800e546 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e530:	4a19      	ldr	r2, [pc, #100]	; (800e598 <etharp_output+0x1fc>)
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e536:	7dfb      	ldrb	r3, [r7, #23]
 800e538:	461a      	mov	r2, r3
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff fe93 	bl	800e268 <etharp_output_to_arp_index>
 800e542:	4603      	mov	r3, r0
 800e544:	e018      	b.n	800e578 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	3301      	adds	r3, #1
 800e54a:	75fb      	strb	r3, [r7, #23]
 800e54c:	7dfb      	ldrb	r3, [r7, #23]
 800e54e:	2b09      	cmp	r3, #9
 800e550:	d9ca      	bls.n	800e4e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	69b9      	ldr	r1, [r7, #24]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f822 	bl	800e5a0 <etharp_query>
 800e55c:	4603      	mov	r3, r0
 800e55e:	e00b      	b.n	800e578 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f001 fd3f 	bl	800fff4 <ethernet_output>
 800e576:	4603      	mov	r3, r0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	08015978 	.word	0x08015978
 800e584:	08015ac8 	.word	0x08015ac8
 800e588:	080159f0 	.word	0x080159f0
 800e58c:	08015b18 	.word	0x08015b18
 800e590:	08015ab8 	.word	0x08015ab8
 800e594:	080161b0 	.word	0x080161b0
 800e598:	20000200 	.word	0x20000200
 800e59c:	20000110 	.word	0x20000110

0800e5a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08c      	sub	sp, #48	; 0x30
 800e5a4:	af02      	add	r7, sp, #8
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3326      	adds	r3, #38	; 0x26
 800e5b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e5b2:	23ff      	movs	r3, #255	; 0xff
 800e5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68f9      	ldr	r1, [r7, #12]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f000 fe0e 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10c      	bne.n	800e5e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e5d6:	2be0      	cmp	r3, #224	; 0xe0
 800e5d8:	d006      	beq.n	800e5e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d003      	beq.n	800e5e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e5e8:	f06f 030f 	mvn.w	r3, #15
 800e5ec:	e101      	b.n	800e7f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	68b8      	ldr	r0, [r7, #8]
 800e5f4:	f7ff fb60 	bl	800dcb8 <etharp_find_entry>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e5fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e600:	2b00      	cmp	r3, #0
 800e602:	da02      	bge.n	800e60a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e604:	8a7b      	ldrh	r3, [r7, #18]
 800e606:	b25b      	sxtb	r3, r3
 800e608:	e0f3      	b.n	800e7f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e60a:	8a7b      	ldrh	r3, [r7, #18]
 800e60c:	2b7e      	cmp	r3, #126	; 0x7e
 800e60e:	d906      	bls.n	800e61e <etharp_query+0x7e>
 800e610:	4b7a      	ldr	r3, [pc, #488]	; (800e7fc <etharp_query+0x25c>)
 800e612:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e616:	497a      	ldr	r1, [pc, #488]	; (800e800 <etharp_query+0x260>)
 800e618:	487a      	ldr	r0, [pc, #488]	; (800e804 <etharp_query+0x264>)
 800e61a:	f003 ff83 	bl	8012524 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e61e:	8a7b      	ldrh	r3, [r7, #18]
 800e620:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e622:	7c7a      	ldrb	r2, [r7, #17]
 800e624:	4978      	ldr	r1, [pc, #480]	; (800e808 <etharp_query+0x268>)
 800e626:	4613      	mov	r3, r2
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	4413      	add	r3, r2
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	440b      	add	r3, r1
 800e630:	3314      	adds	r3, #20
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d115      	bne.n	800e664 <etharp_query+0xc4>
    is_new_entry = 1;
 800e638:	2301      	movs	r3, #1
 800e63a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e63c:	7c7a      	ldrb	r2, [r7, #17]
 800e63e:	4972      	ldr	r1, [pc, #456]	; (800e808 <etharp_query+0x268>)
 800e640:	4613      	mov	r3, r2
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	4413      	add	r3, r2
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	440b      	add	r3, r1
 800e64a:	3314      	adds	r3, #20
 800e64c:	2201      	movs	r2, #1
 800e64e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e650:	7c7a      	ldrb	r2, [r7, #17]
 800e652:	496d      	ldr	r1, [pc, #436]	; (800e808 <etharp_query+0x268>)
 800e654:	4613      	mov	r3, r2
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	4413      	add	r3, r2
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	440b      	add	r3, r1
 800e65e:	3308      	adds	r3, #8
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e664:	7c7a      	ldrb	r2, [r7, #17]
 800e666:	4968      	ldr	r1, [pc, #416]	; (800e808 <etharp_query+0x268>)
 800e668:	4613      	mov	r3, r2
 800e66a:	005b      	lsls	r3, r3, #1
 800e66c:	4413      	add	r3, r2
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	440b      	add	r3, r1
 800e672:	3314      	adds	r3, #20
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d011      	beq.n	800e69e <etharp_query+0xfe>
 800e67a:	7c7a      	ldrb	r2, [r7, #17]
 800e67c:	4962      	ldr	r1, [pc, #392]	; (800e808 <etharp_query+0x268>)
 800e67e:	4613      	mov	r3, r2
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	4413      	add	r3, r2
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	440b      	add	r3, r1
 800e688:	3314      	adds	r3, #20
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d806      	bhi.n	800e69e <etharp_query+0xfe>
 800e690:	4b5a      	ldr	r3, [pc, #360]	; (800e7fc <etharp_query+0x25c>)
 800e692:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e696:	495d      	ldr	r1, [pc, #372]	; (800e80c <etharp_query+0x26c>)
 800e698:	485a      	ldr	r0, [pc, #360]	; (800e804 <etharp_query+0x264>)
 800e69a:	f003 ff43 	bl	8012524 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d102      	bne.n	800e6aa <etharp_query+0x10a>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10c      	bne.n	800e6c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e6aa:	68b9      	ldr	r1, [r7, #8]
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f000 f963 	bl	800e978 <etharp_request>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <etharp_query+0x124>
      return result;
 800e6be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6c2:	e096      	b.n	800e7f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d106      	bne.n	800e6d8 <etharp_query+0x138>
 800e6ca:	4b4c      	ldr	r3, [pc, #304]	; (800e7fc <etharp_query+0x25c>)
 800e6cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e6d0:	494f      	ldr	r1, [pc, #316]	; (800e810 <etharp_query+0x270>)
 800e6d2:	484c      	ldr	r0, [pc, #304]	; (800e804 <etharp_query+0x264>)
 800e6d4:	f003 ff26 	bl	8012524 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e6d8:	7c7a      	ldrb	r2, [r7, #17]
 800e6da:	494b      	ldr	r1, [pc, #300]	; (800e808 <etharp_query+0x268>)
 800e6dc:	4613      	mov	r3, r2
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	440b      	add	r3, r1
 800e6e6:	3314      	adds	r3, #20
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d917      	bls.n	800e71e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e6ee:	4a49      	ldr	r2, [pc, #292]	; (800e814 <etharp_query+0x274>)
 800e6f0:	7c7b      	ldrb	r3, [r7, #17]
 800e6f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e6f4:	7c7a      	ldrb	r2, [r7, #17]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	4413      	add	r3, r2
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	3308      	adds	r3, #8
 800e700:	4a41      	ldr	r2, [pc, #260]	; (800e808 <etharp_query+0x268>)
 800e702:	4413      	add	r3, r2
 800e704:	3304      	adds	r3, #4
 800e706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e70a:	9200      	str	r2, [sp, #0]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f001 fc6f 	bl	800fff4 <ethernet_output>
 800e716:	4603      	mov	r3, r0
 800e718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e71c:	e067      	b.n	800e7ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e71e:	7c7a      	ldrb	r2, [r7, #17]
 800e720:	4939      	ldr	r1, [pc, #228]	; (800e808 <etharp_query+0x268>)
 800e722:	4613      	mov	r3, r2
 800e724:	005b      	lsls	r3, r3, #1
 800e726:	4413      	add	r3, r2
 800e728:	00db      	lsls	r3, r3, #3
 800e72a:	440b      	add	r3, r1
 800e72c:	3314      	adds	r3, #20
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d15c      	bne.n	800e7ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e73c:	e01c      	b.n	800e778 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	895a      	ldrh	r2, [r3, #10]
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	891b      	ldrh	r3, [r3, #8]
 800e746:	429a      	cmp	r2, r3
 800e748:	d10a      	bne.n	800e760 <etharp_query+0x1c0>
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d006      	beq.n	800e760 <etharp_query+0x1c0>
 800e752:	4b2a      	ldr	r3, [pc, #168]	; (800e7fc <etharp_query+0x25c>)
 800e754:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e758:	492f      	ldr	r1, [pc, #188]	; (800e818 <etharp_query+0x278>)
 800e75a:	482a      	ldr	r0, [pc, #168]	; (800e804 <etharp_query+0x264>)
 800e75c:	f003 fee2 	bl	8012524 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	7b1b      	ldrb	r3, [r3, #12]
 800e764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d002      	beq.n	800e772 <etharp_query+0x1d2>
        copy_needed = 1;
 800e76c:	2301      	movs	r3, #1
 800e76e:	61bb      	str	r3, [r7, #24]
        break;
 800e770:	e005      	b.n	800e77e <etharp_query+0x1de>
      }
      p = p->next;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1df      	bne.n	800e73e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d007      	beq.n	800e794 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e78a:	200e      	movs	r0, #14
 800e78c:	f7f8 fe34 	bl	80073f8 <pbuf_clone>
 800e790:	61f8      	str	r0, [r7, #28]
 800e792:	e004      	b.n	800e79e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e798:	69f8      	ldr	r0, [r7, #28]
 800e79a:	f7f8 fc61 	bl	8007060 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d021      	beq.n	800e7e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e7a4:	7c7a      	ldrb	r2, [r7, #17]
 800e7a6:	4918      	ldr	r1, [pc, #96]	; (800e808 <etharp_query+0x268>)
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	4413      	add	r3, r2
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	440b      	add	r3, r1
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00a      	beq.n	800e7ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e7b8:	7c7a      	ldrb	r2, [r7, #17]
 800e7ba:	4913      	ldr	r1, [pc, #76]	; (800e808 <etharp_query+0x268>)
 800e7bc:	4613      	mov	r3, r2
 800e7be:	005b      	lsls	r3, r3, #1
 800e7c0:	4413      	add	r3, r2
 800e7c2:	00db      	lsls	r3, r3, #3
 800e7c4:	440b      	add	r3, r1
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7f8 fba9 	bl	8006f20 <pbuf_free>
      }
      arp_table[i].q = p;
 800e7ce:	7c7a      	ldrb	r2, [r7, #17]
 800e7d0:	490d      	ldr	r1, [pc, #52]	; (800e808 <etharp_query+0x268>)
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	4413      	add	r3, r2
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	440b      	add	r3, r1
 800e7dc:	69fa      	ldr	r2, [r7, #28]
 800e7de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7e6:	e002      	b.n	800e7ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e7e8:	23ff      	movs	r3, #255	; 0xff
 800e7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e7ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3728      	adds	r7, #40	; 0x28
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08015978 	.word	0x08015978
 800e800:	08015b24 	.word	0x08015b24
 800e804:	080159f0 	.word	0x080159f0
 800e808:	20000110 	.word	0x20000110
 800e80c:	08015b34 	.word	0x08015b34
 800e810:	08015b18 	.word	0x08015b18
 800e814:	20000200 	.word	0x20000200
 800e818:	08015b5c 	.word	0x08015b5c

0800e81c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b08a      	sub	sp, #40	; 0x28
 800e820:	af02      	add	r7, sp, #8
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d106      	bne.n	800e842 <etharp_raw+0x26>
 800e834:	4b3a      	ldr	r3, [pc, #232]	; (800e920 <etharp_raw+0x104>)
 800e836:	f240 4257 	movw	r2, #1111	; 0x457
 800e83a:	493a      	ldr	r1, [pc, #232]	; (800e924 <etharp_raw+0x108>)
 800e83c:	483a      	ldr	r0, [pc, #232]	; (800e928 <etharp_raw+0x10c>)
 800e83e:	f003 fe71 	bl	8012524 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e842:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e846:	211c      	movs	r1, #28
 800e848:	200e      	movs	r0, #14
 800e84a:	f7f8 f885 	bl	8006958 <pbuf_alloc>
 800e84e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e856:	f04f 33ff 	mov.w	r3, #4294967295
 800e85a:	e05d      	b.n	800e918 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	895b      	ldrh	r3, [r3, #10]
 800e860:	2b1b      	cmp	r3, #27
 800e862:	d806      	bhi.n	800e872 <etharp_raw+0x56>
 800e864:	4b2e      	ldr	r3, [pc, #184]	; (800e920 <etharp_raw+0x104>)
 800e866:	f240 4262 	movw	r2, #1122	; 0x462
 800e86a:	4930      	ldr	r1, [pc, #192]	; (800e92c <etharp_raw+0x110>)
 800e86c:	482e      	ldr	r0, [pc, #184]	; (800e928 <etharp_raw+0x10c>)
 800e86e:	f003 fe59 	bl	8012524 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e878:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7f7 f89c 	bl	80059b8 <lwip_htons>
 800e880:	4603      	mov	r3, r0
 800e882:	461a      	mov	r2, r3
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e88e:	2b06      	cmp	r3, #6
 800e890:	d006      	beq.n	800e8a0 <etharp_raw+0x84>
 800e892:	4b23      	ldr	r3, [pc, #140]	; (800e920 <etharp_raw+0x104>)
 800e894:	f240 4269 	movw	r2, #1129	; 0x469
 800e898:	4925      	ldr	r1, [pc, #148]	; (800e930 <etharp_raw+0x114>)
 800e89a:	4823      	ldr	r0, [pc, #140]	; (800e928 <etharp_raw+0x10c>)
 800e89c:	f003 fe42 	bl	8012524 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	2206      	movs	r2, #6
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f003 fe25 	bl	80124f8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	3312      	adds	r3, #18
 800e8b2:	2206      	movs	r2, #6
 800e8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f003 fe1e 	bl	80124f8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	330e      	adds	r3, #14
 800e8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c2:	6812      	ldr	r2, [r2, #0]
 800e8c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	3318      	adds	r3, #24
 800e8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8cc:	6812      	ldr	r2, [r2, #0]
 800e8ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f042 0201 	orr.w	r2, r2, #1
 800e8dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f042 0208 	orr.w	r2, r2, #8
 800e8e6:	709a      	strb	r2, [r3, #2]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2206      	movs	r2, #6
 800e8f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2204      	movs	r2, #4
 800e8f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e8f8:	f640 0306 	movw	r3, #2054	; 0x806
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	69b9      	ldr	r1, [r7, #24]
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f001 fb75 	bl	800fff4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e90a:	69b8      	ldr	r0, [r7, #24]
 800e90c:	f7f8 fb08 	bl	8006f20 <pbuf_free>
  p = NULL;
 800e910:	2300      	movs	r3, #0
 800e912:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e914:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3720      	adds	r7, #32
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	08015978 	.word	0x08015978
 800e924:	08015ac8 	.word	0x08015ac8
 800e928:	080159f0 	.word	0x080159f0
 800e92c:	08015b78 	.word	0x08015b78
 800e930:	08015bac 	.word	0x08015bac

0800e934 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af04      	add	r7, sp, #16
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e950:	2201      	movs	r2, #1
 800e952:	9203      	str	r2, [sp, #12]
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	9202      	str	r2, [sp, #8]
 800e958:	4a06      	ldr	r2, [pc, #24]	; (800e974 <etharp_request_dst+0x40>)
 800e95a:	9201      	str	r2, [sp, #4]
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	4603      	mov	r3, r0
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f7ff ff5a 	bl	800e81c <etharp_raw>
 800e968:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	080161b8 	.word	0x080161b8

0800e978 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e982:	4a05      	ldr	r2, [pc, #20]	; (800e998 <etharp_request+0x20>)
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff ffd4 	bl	800e934 <etharp_request_dst>
 800e98c:	4603      	mov	r3, r0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	080161b0 	.word	0x080161b0

0800e99c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08e      	sub	sp, #56	; 0x38
 800e9a0:	af04      	add	r7, sp, #16
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e9a6:	4b79      	ldr	r3, [pc, #484]	; (800eb8c <icmp_input+0x1f0>)
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	f003 030f 	and.w	r3, r3, #15
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e9bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9be:	2b13      	cmp	r3, #19
 800e9c0:	f240 80cd 	bls.w	800eb5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	895b      	ldrh	r3, [r3, #10]
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	f240 80ca 	bls.w	800eb62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e9d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 80b7 	beq.w	800eb50 <icmp_input+0x1b4>
 800e9e2:	2b08      	cmp	r3, #8
 800e9e4:	f040 80b7 	bne.w	800eb56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e9e8:	4b69      	ldr	r3, [pc, #420]	; (800eb90 <icmp_input+0x1f4>)
 800e9ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e9ec:	4b67      	ldr	r3, [pc, #412]	; (800eb8c <icmp_input+0x1f0>)
 800e9ee:	695b      	ldr	r3, [r3, #20]
 800e9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9f4:	2be0      	cmp	r3, #224	; 0xe0
 800e9f6:	f000 80bb 	beq.w	800eb70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e9fa:	4b64      	ldr	r3, [pc, #400]	; (800eb8c <icmp_input+0x1f0>)
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	4a63      	ldr	r2, [pc, #396]	; (800eb8c <icmp_input+0x1f0>)
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 fbed 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f040 80b1 	bne.w	800eb74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	891b      	ldrh	r3, [r3, #8]
 800ea16:	2b07      	cmp	r3, #7
 800ea18:	f240 80a5 	bls.w	800eb66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ea1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea1e:	330e      	adds	r3, #14
 800ea20:	4619      	mov	r1, r3
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7f8 f9e6 	bl	8006df4 <pbuf_add_header>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d04b      	beq.n	800eac6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	891a      	ldrh	r2, [r3, #8]
 800ea32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea34:	4413      	add	r3, r2
 800ea36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	8b7a      	ldrh	r2, [r7, #26]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	f0c0 809a 	bcc.w	800eb78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ea44:	8b7b      	ldrh	r3, [r7, #26]
 800ea46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	200e      	movs	r0, #14
 800ea4e:	f7f7 ff83 	bl	8006958 <pbuf_alloc>
 800ea52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 8090 	beq.w	800eb7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	895b      	ldrh	r3, [r3, #10]
 800ea60:	461a      	mov	r2, r3
 800ea62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea64:	3308      	adds	r3, #8
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d203      	bcs.n	800ea72 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ea6a:	6978      	ldr	r0, [r7, #20]
 800ea6c:	f7f8 fa58 	bl	8006f20 <pbuf_free>
          goto icmperr;
 800ea70:	e085      	b.n	800eb7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f003 fd3c 	bl	80124f8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ea80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea82:	4619      	mov	r1, r3
 800ea84:	6978      	ldr	r0, [r7, #20]
 800ea86:	f7f8 f9c5 	bl	8006e14 <pbuf_remove_header>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d009      	beq.n	800eaa4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ea90:	4b40      	ldr	r3, [pc, #256]	; (800eb94 <icmp_input+0x1f8>)
 800ea92:	22b6      	movs	r2, #182	; 0xb6
 800ea94:	4940      	ldr	r1, [pc, #256]	; (800eb98 <icmp_input+0x1fc>)
 800ea96:	4841      	ldr	r0, [pc, #260]	; (800eb9c <icmp_input+0x200>)
 800ea98:	f003 fd44 	bl	8012524 <iprintf>
          pbuf_free(r);
 800ea9c:	6978      	ldr	r0, [r7, #20]
 800ea9e:	f7f8 fa3f 	bl	8006f20 <pbuf_free>
          goto icmperr;
 800eaa2:	e06c      	b.n	800eb7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	6978      	ldr	r0, [r7, #20]
 800eaa8:	f7f8 fb62 	bl	8007170 <pbuf_copy>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d003      	beq.n	800eaba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eab2:	6978      	ldr	r0, [r7, #20]
 800eab4:	f7f8 fa34 	bl	8006f20 <pbuf_free>
          goto icmperr;
 800eab8:	e061      	b.n	800eb7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7f8 fa30 	bl	8006f20 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	e00f      	b.n	800eae6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eac8:	330e      	adds	r3, #14
 800eaca:	4619      	mov	r1, r3
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f8 f9a1 	bl	8006e14 <pbuf_remove_header>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d006      	beq.n	800eae6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ead8:	4b2e      	ldr	r3, [pc, #184]	; (800eb94 <icmp_input+0x1f8>)
 800eada:	22c7      	movs	r2, #199	; 0xc7
 800eadc:	4930      	ldr	r1, [pc, #192]	; (800eba0 <icmp_input+0x204>)
 800eade:	482f      	ldr	r0, [pc, #188]	; (800eb9c <icmp_input+0x200>)
 800eae0:	f003 fd20 	bl	8012524 <iprintf>
          goto icmperr;
 800eae4:	e04b      	b.n	800eb7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800eaec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7f8 f97f 	bl	8006df4 <pbuf_add_header>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d12b      	bne.n	800eb54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800eb0a:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <icmp_input+0x1f0>)
 800eb0c:	691a      	ldr	r2, [r3, #16]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	2200      	movs	r2, #0
 800eb16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	709a      	strb	r2, [r3, #2]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	22ff      	movs	r2, #255	; 0xff
 800eb26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	729a      	strb	r2, [r3, #10]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	9302      	str	r3, [sp, #8]
 800eb36:	2301      	movs	r3, #1
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	23ff      	movs	r3, #255	; 0xff
 800eb40:	2200      	movs	r2, #0
 800eb42:	69f9      	ldr	r1, [r7, #28]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fa75 	bl	800f034 <ip4_output_if>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800eb4e:	e001      	b.n	800eb54 <icmp_input+0x1b8>
      break;
 800eb50:	bf00      	nop
 800eb52:	e000      	b.n	800eb56 <icmp_input+0x1ba>
      break;
 800eb54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7f8 f9e2 	bl	8006f20 <pbuf_free>
  return;
 800eb5c:	e013      	b.n	800eb86 <icmp_input+0x1ea>
    goto lenerr;
 800eb5e:	bf00      	nop
 800eb60:	e002      	b.n	800eb68 <icmp_input+0x1cc>
    goto lenerr;
 800eb62:	bf00      	nop
 800eb64:	e000      	b.n	800eb68 <icmp_input+0x1cc>
        goto lenerr;
 800eb66:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7f8 f9d9 	bl	8006f20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eb6e:	e00a      	b.n	800eb86 <icmp_input+0x1ea>
        goto icmperr;
 800eb70:	bf00      	nop
 800eb72:	e004      	b.n	800eb7e <icmp_input+0x1e2>
        goto icmperr;
 800eb74:	bf00      	nop
 800eb76:	e002      	b.n	800eb7e <icmp_input+0x1e2>
          goto icmperr;
 800eb78:	bf00      	nop
 800eb7a:	e000      	b.n	800eb7e <icmp_input+0x1e2>
          goto icmperr;
 800eb7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7f8 f9ce 	bl	8006f20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eb84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800eb86:	3728      	adds	r7, #40	; 0x28
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20003428 	.word	0x20003428
 800eb90:	2000343c 	.word	0x2000343c
 800eb94:	08015bf0 	.word	0x08015bf0
 800eb98:	08015c28 	.word	0x08015c28
 800eb9c:	08015c60 	.word	0x08015c60
 800eba0:	08015c88 	.word	0x08015c88

0800eba4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ebb0:	78fb      	ldrb	r3, [r7, #3]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	2103      	movs	r1, #3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f814 	bl	800ebe4 <icmp_send_response>
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ebd0:	78fb      	ldrb	r3, [r7, #3]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	210b      	movs	r1, #11
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 f804 	bl	800ebe4 <icmp_send_response>
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08c      	sub	sp, #48	; 0x30
 800ebe8:	af04      	add	r7, sp, #16
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	460b      	mov	r3, r1
 800ebee:	70fb      	strb	r3, [r7, #3]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ebf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebf8:	2124      	movs	r1, #36	; 0x24
 800ebfa:	2022      	movs	r0, #34	; 0x22
 800ebfc:	f7f7 feac 	bl	8006958 <pbuf_alloc>
 800ec00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d04c      	beq.n	800eca2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	895b      	ldrh	r3, [r3, #10]
 800ec0c:	2b23      	cmp	r3, #35	; 0x23
 800ec0e:	d806      	bhi.n	800ec1e <icmp_send_response+0x3a>
 800ec10:	4b26      	ldr	r3, [pc, #152]	; (800ecac <icmp_send_response+0xc8>)
 800ec12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ec16:	4926      	ldr	r1, [pc, #152]	; (800ecb0 <icmp_send_response+0xcc>)
 800ec18:	4826      	ldr	r0, [pc, #152]	; (800ecb4 <icmp_send_response+0xd0>)
 800ec1a:	f003 fc83 	bl	8012524 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	78fa      	ldrb	r2, [r7, #3]
 800ec2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	78ba      	ldrb	r2, [r7, #2]
 800ec34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	711a      	strb	r2, [r3, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	2200      	movs	r2, #0
 800ec44:	719a      	strb	r2, [r3, #6]
 800ec46:	2200      	movs	r2, #0
 800ec48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	f103 0008 	add.w	r0, r3, #8
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	221c      	movs	r2, #28
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f003 fc4d 	bl	80124f8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ec64:	f107 030c 	add.w	r3, r7, #12
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f000 f825 	bl	800ecb8 <ip4_route>
 800ec6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d011      	beq.n	800ec9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	709a      	strb	r2, [r3, #2]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ec80:	f107 020c 	add.w	r2, r7, #12
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	2301      	movs	r3, #1
 800ec8a:	9301      	str	r3, [sp, #4]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	23ff      	movs	r3, #255	; 0xff
 800ec92:	2100      	movs	r1, #0
 800ec94:	69f8      	ldr	r0, [r7, #28]
 800ec96:	f000 f9cd 	bl	800f034 <ip4_output_if>
  }
  pbuf_free(q);
 800ec9a:	69f8      	ldr	r0, [r7, #28]
 800ec9c:	f7f8 f940 	bl	8006f20 <pbuf_free>
 800eca0:	e000      	b.n	800eca4 <icmp_send_response+0xc0>
    return;
 800eca2:	bf00      	nop
}
 800eca4:	3720      	adds	r7, #32
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	08015bf0 	.word	0x08015bf0
 800ecb0:	08015cbc 	.word	0x08015cbc
 800ecb4:	08015c60 	.word	0x08015c60

0800ecb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ecc0:	4b33      	ldr	r3, [pc, #204]	; (800ed90 <ip4_route+0xd8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	60fb      	str	r3, [r7, #12]
 800ecc6:	e036      	b.n	800ed36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d02b      	beq.n	800ed30 <ip4_route+0x78>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecde:	089b      	lsrs	r3, r3, #2
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d022      	beq.n	800ed30 <ip4_route+0x78>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3304      	adds	r3, #4
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d01d      	beq.n	800ed30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	405a      	eors	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3308      	adds	r3, #8
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4013      	ands	r3, r2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d101      	bne.n	800ed10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	e038      	b.n	800ed82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed16:	f003 0302 	and.w	r3, r3, #2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d108      	bne.n	800ed30 <ip4_route+0x78>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	330c      	adds	r3, #12
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d101      	bne.n	800ed30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	e028      	b.n	800ed82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1c5      	bne.n	800ecc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ed3c:	4b15      	ldr	r3, [pc, #84]	; (800ed94 <ip4_route+0xdc>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d01a      	beq.n	800ed7a <ip4_route+0xc2>
 800ed44:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <ip4_route+0xdc>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d012      	beq.n	800ed7a <ip4_route+0xc2>
 800ed54:	4b0f      	ldr	r3, [pc, #60]	; (800ed94 <ip4_route+0xdc>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed5c:	f003 0304 	and.w	r3, r3, #4
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00a      	beq.n	800ed7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <ip4_route+0xdc>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d004      	beq.n	800ed7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b7f      	cmp	r3, #127	; 0x7f
 800ed78:	d101      	bne.n	800ed7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e001      	b.n	800ed82 <ip4_route+0xca>
  }

  return netif_default;
 800ed7e:	4b05      	ldr	r3, [pc, #20]	; (800ed94 <ip4_route+0xdc>)
 800ed80:	681b      	ldr	r3, [r3, #0]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3714      	adds	r7, #20
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	2000695c 	.word	0x2000695c
 800ed94:	20006960 	.word	0x20006960

0800ed98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d016      	beq.n	800edde <ip4_input_accept+0x46>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3304      	adds	r3, #4
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d011      	beq.n	800edde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800edba:	4b0b      	ldr	r3, [pc, #44]	; (800ede8 <ip4_input_accept+0x50>)
 800edbc:	695a      	ldr	r2, [r3, #20]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3304      	adds	r3, #4
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d008      	beq.n	800edda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800edc8:	4b07      	ldr	r3, [pc, #28]	; (800ede8 <ip4_input_accept+0x50>)
 800edca:	695b      	ldr	r3, [r3, #20]
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fa08 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800edd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800edda:	2301      	movs	r3, #1
 800eddc:	e000      	b.n	800ede0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20003428 	.word	0x20003428

0800edec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	091b      	lsrs	r3, r3, #4
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b04      	cmp	r3, #4
 800ee06:	d004      	beq.n	800ee12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7f8 f889 	bl	8006f20 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e107      	b.n	800f022 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 030f 	and.w	r3, r3, #15
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	885b      	ldrh	r3, [r3, #2]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7f6 fdc5 	bl	80059b8 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	891b      	ldrh	r3, [r3, #8]
 800ee36:	89ba      	ldrh	r2, [r7, #12]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d204      	bcs.n	800ee46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ee3c:	89bb      	ldrh	r3, [r7, #12]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7f7 fee7 	bl	8006c14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	895b      	ldrh	r3, [r3, #10]
 800ee4a:	89fa      	ldrh	r2, [r7, #14]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d807      	bhi.n	800ee60 <ip4_input+0x74>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	891b      	ldrh	r3, [r3, #8]
 800ee54:	89ba      	ldrh	r2, [r7, #12]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d802      	bhi.n	800ee60 <ip4_input+0x74>
 800ee5a:	89fb      	ldrh	r3, [r7, #14]
 800ee5c:	2b13      	cmp	r3, #19
 800ee5e:	d804      	bhi.n	800ee6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7f8 f85d 	bl	8006f20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	e0db      	b.n	800f022 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	4a6f      	ldr	r2, [pc, #444]	; (800f02c <ip4_input+0x240>)
 800ee70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	4a6d      	ldr	r2, [pc, #436]	; (800f02c <ip4_input+0x240>)
 800ee78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee7a:	4b6c      	ldr	r3, [pc, #432]	; (800f02c <ip4_input+0x240>)
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee82:	2be0      	cmp	r3, #224	; 0xe0
 800ee84:	d112      	bne.n	800eeac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d007      	beq.n	800eea6 <ip4_input+0xba>
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	3304      	adds	r3, #4
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <ip4_input+0xba>
      netif = inp;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	613b      	str	r3, [r7, #16]
 800eea4:	e02a      	b.n	800eefc <ip4_input+0x110>
    } else {
      netif = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	613b      	str	r3, [r7, #16]
 800eeaa:	e027      	b.n	800eefc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800eeac:	6838      	ldr	r0, [r7, #0]
 800eeae:	f7ff ff73 	bl	800ed98 <ip4_input_accept>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <ip4_input+0xd2>
      netif = inp;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	613b      	str	r3, [r7, #16]
 800eebc:	e01e      	b.n	800eefc <ip4_input+0x110>
    } else {
      netif = NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eec2:	4b5a      	ldr	r3, [pc, #360]	; (800f02c <ip4_input+0x240>)
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b7f      	cmp	r3, #127	; 0x7f
 800eeca:	d017      	beq.n	800eefc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800eecc:	4b58      	ldr	r3, [pc, #352]	; (800f030 <ip4_input+0x244>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	613b      	str	r3, [r7, #16]
 800eed2:	e00e      	b.n	800eef2 <ip4_input+0x106>
          if (netif == inp) {
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d006      	beq.n	800eeea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800eedc:	6938      	ldr	r0, [r7, #16]
 800eede:	f7ff ff5b 	bl	800ed98 <ip4_input_accept>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d108      	bne.n	800eefa <ip4_input+0x10e>
 800eee8:	e000      	b.n	800eeec <ip4_input+0x100>
            continue;
 800eeea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	613b      	str	r3, [r7, #16]
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1ed      	bne.n	800eed4 <ip4_input+0xe8>
 800eef8:	e000      	b.n	800eefc <ip4_input+0x110>
            break;
 800eefa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eefc:	4b4b      	ldr	r3, [pc, #300]	; (800f02c <ip4_input+0x240>)
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 f96e 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d105      	bne.n	800ef1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ef0e:	4b47      	ldr	r3, [pc, #284]	; (800f02c <ip4_input+0x240>)
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef16:	2be0      	cmp	r3, #224	; 0xe0
 800ef18:	d104      	bne.n	800ef24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7f8 f800 	bl	8006f20 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e07e      	b.n	800f022 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d104      	bne.n	800ef34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f7f7 fff8 	bl	8006f20 <pbuf_free>
    return ERR_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	e076      	b.n	800f022 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ef40:	4013      	ands	r3, r2
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00b      	beq.n	800ef5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 fc92 	bl	800f870 <ip4_reass>
 800ef4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <ip4_input+0x16c>
      return ERR_OK;
 800ef54:	2300      	movs	r3, #0
 800ef56:	e064      	b.n	800f022 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ef5e:	4a33      	ldr	r2, [pc, #204]	; (800f02c <ip4_input+0x240>)
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ef64:	4a31      	ldr	r2, [pc, #196]	; (800f02c <ip4_input+0x240>)
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ef6a:	4a30      	ldr	r2, [pc, #192]	; (800f02c <ip4_input+0x240>)
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	f003 030f 	and.w	r3, r3, #15
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	4b2a      	ldr	r3, [pc, #168]	; (800f02c <ip4_input+0x240>)
 800ef82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ef84:	89fb      	ldrh	r3, [r7, #14]
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7f7 ff43 	bl	8006e14 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	7a5b      	ldrb	r3, [r3, #9]
 800ef92:	2b11      	cmp	r3, #17
 800ef94:	d006      	beq.n	800efa4 <ip4_input+0x1b8>
 800ef96:	2b11      	cmp	r3, #17
 800ef98:	dc13      	bgt.n	800efc2 <ip4_input+0x1d6>
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d00c      	beq.n	800efb8 <ip4_input+0x1cc>
 800ef9e:	2b06      	cmp	r3, #6
 800efa0:	d005      	beq.n	800efae <ip4_input+0x1c2>
 800efa2:	e00e      	b.n	800efc2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7fe fc68 	bl	800d87c <udp_input>
        break;
 800efac:	e026      	b.n	800effc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fa f88d 	bl	80090d0 <tcp_input>
        break;
 800efb6:	e021      	b.n	800effc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fcee 	bl	800e99c <icmp_input>
        break;
 800efc0:	e01c      	b.n	800effc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800efc2:	4b1a      	ldr	r3, [pc, #104]	; (800f02c <ip4_input+0x240>)
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	6939      	ldr	r1, [r7, #16]
 800efc8:	4618      	mov	r0, r3
 800efca:	f000 f90b 	bl	800f1e4 <ip4_addr_isbroadcast_u32>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10f      	bne.n	800eff4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800efd4:	4b15      	ldr	r3, [pc, #84]	; (800f02c <ip4_input+0x240>)
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800efdc:	2be0      	cmp	r3, #224	; 0xe0
 800efde:	d009      	beq.n	800eff4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800efe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f7 ff87 	bl	8006efa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800efec:	2102      	movs	r1, #2
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fdd8 	bl	800eba4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f7 ff93 	bl	8006f20 <pbuf_free>
        break;
 800effa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800effc:	4b0b      	ldr	r3, [pc, #44]	; (800f02c <ip4_input+0x240>)
 800effe:	2200      	movs	r2, #0
 800f000:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f002:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <ip4_input+0x240>)
 800f004:	2200      	movs	r2, #0
 800f006:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f008:	4b08      	ldr	r3, [pc, #32]	; (800f02c <ip4_input+0x240>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f00e:	4b07      	ldr	r3, [pc, #28]	; (800f02c <ip4_input+0x240>)
 800f010:	2200      	movs	r2, #0
 800f012:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f014:	4b05      	ldr	r3, [pc, #20]	; (800f02c <ip4_input+0x240>)
 800f016:	2200      	movs	r2, #0
 800f018:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f01a:	4b04      	ldr	r3, [pc, #16]	; (800f02c <ip4_input+0x240>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20003428 	.word	0x20003428
 800f030:	2000695c 	.word	0x2000695c

0800f034 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08a      	sub	sp, #40	; 0x28
 800f038:	af04      	add	r7, sp, #16
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d009      	beq.n	800f060 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d003      	beq.n	800f05a <ip4_output_if+0x26>
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d102      	bne.n	800f060 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	3304      	adds	r3, #4
 800f05e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f060:	78fa      	ldrb	r2, [r7, #3]
 800f062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f064:	9302      	str	r3, [sp, #8]
 800f066:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	4613      	mov	r3, r2
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	6979      	ldr	r1, [r7, #20]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 f805 	bl	800f088 <ip4_output_if_src>
 800f07e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f080:	4618      	mov	r0, r3
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b088      	sub	sp, #32
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	7b9b      	ldrb	r3, [r3, #14]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d006      	beq.n	800f0ac <ip4_output_if_src+0x24>
 800f09e:	4b4b      	ldr	r3, [pc, #300]	; (800f1cc <ip4_output_if_src+0x144>)
 800f0a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f0a4:	494a      	ldr	r1, [pc, #296]	; (800f1d0 <ip4_output_if_src+0x148>)
 800f0a6:	484b      	ldr	r0, [pc, #300]	; (800f1d4 <ip4_output_if_src+0x14c>)
 800f0a8:	f003 fa3c 	bl	8012524 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d060      	beq.n	800f174 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f0b2:	2314      	movs	r3, #20
 800f0b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f0b6:	2114      	movs	r1, #20
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f7f7 fe9b 	bl	8006df4 <pbuf_add_header>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d002      	beq.n	800f0ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f0c4:	f06f 0301 	mvn.w	r3, #1
 800f0c8:	e07c      	b.n	800f1c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	895b      	ldrh	r3, [r3, #10]
 800f0d4:	2b13      	cmp	r3, #19
 800f0d6:	d806      	bhi.n	800f0e6 <ip4_output_if_src+0x5e>
 800f0d8:	4b3c      	ldr	r3, [pc, #240]	; (800f1cc <ip4_output_if_src+0x144>)
 800f0da:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f0de:	493e      	ldr	r1, [pc, #248]	; (800f1d8 <ip4_output_if_src+0x150>)
 800f0e0:	483c      	ldr	r0, [pc, #240]	; (800f1d4 <ip4_output_if_src+0x14c>)
 800f0e2:	f003 fa1f 	bl	8012524 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	78fa      	ldrb	r2, [r7, #3]
 800f0ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f0f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f0fc:	8b7b      	ldrh	r3, [r7, #26]
 800f0fe:	089b      	lsrs	r3, r3, #2
 800f100:	b29b      	uxth	r3, r3
 800f102:	b2db      	uxtb	r3, r3
 800f104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f114:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	891b      	ldrh	r3, [r3, #8]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7f6 fc4c 	bl	80059b8 <lwip_htons>
 800f120:	4603      	mov	r3, r0
 800f122:	461a      	mov	r2, r3
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	2200      	movs	r2, #0
 800f12c:	719a      	strb	r2, [r3, #6]
 800f12e:	2200      	movs	r2, #0
 800f130:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f132:	4b2a      	ldr	r3, [pc, #168]	; (800f1dc <ip4_output_if_src+0x154>)
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	4618      	mov	r0, r3
 800f138:	f7f6 fc3e 	bl	80059b8 <lwip_htons>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461a      	mov	r2, r3
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f144:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <ip4_output_if_src+0x154>)
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	3301      	adds	r3, #1
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	4b23      	ldr	r3, [pc, #140]	; (800f1dc <ip4_output_if_src+0x154>)
 800f14e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d104      	bne.n	800f160 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f156:	4b22      	ldr	r3, [pc, #136]	; (800f1e0 <ip4_output_if_src+0x158>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	60da      	str	r2, [r3, #12]
 800f15e:	e003      	b.n	800f168 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2200      	movs	r2, #0
 800f16c:	729a      	strb	r2, [r3, #10]
 800f16e:	2200      	movs	r2, #0
 800f170:	72da      	strb	r2, [r3, #11]
 800f172:	e00f      	b.n	800f194 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	895b      	ldrh	r3, [r3, #10]
 800f178:	2b13      	cmp	r3, #19
 800f17a:	d802      	bhi.n	800f182 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f17c:	f06f 0301 	mvn.w	r3, #1
 800f180:	e020      	b.n	800f1c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f18e:	f107 0314 	add.w	r3, r7, #20
 800f192:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00c      	beq.n	800f1b6 <ip4_output_if_src+0x12e>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	891a      	ldrh	r2, [r3, #8]
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d906      	bls.n	800f1b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f000 fd4d 	bl	800fc4c <ip4_frag>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	e006      	b.n	800f1c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68f9      	ldr	r1, [r7, #12]
 800f1be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1c0:	4798      	blx	r3
 800f1c2:	4603      	mov	r3, r0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3720      	adds	r7, #32
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	08015ce8 	.word	0x08015ce8
 800f1d0:	08015d1c 	.word	0x08015d1c
 800f1d4:	08015d28 	.word	0x08015d28
 800f1d8:	08015d50 	.word	0x08015d50
 800f1dc:	20000202 	.word	0x20000202
 800f1e0:	080161ac 	.word	0x080161ac

0800f1e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d002      	beq.n	800f200 <ip4_addr_isbroadcast_u32+0x1c>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f200:	2301      	movs	r3, #1
 800f202:	e02a      	b.n	800f25a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f212:	2300      	movs	r3, #0
 800f214:	e021      	b.n	800f25a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	3304      	adds	r3, #4
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d101      	bne.n	800f226 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f222:	2300      	movs	r3, #0
 800f224:	e019      	b.n	800f25a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	3304      	adds	r3, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	405a      	eors	r2, r3
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	3308      	adds	r3, #8
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4013      	ands	r3, r2
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10d      	bne.n	800f258 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	3308      	adds	r3, #8
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	43da      	mvns	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	3308      	adds	r3, #8
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f250:	429a      	cmp	r2, r3
 800f252:	d101      	bne.n	800f258 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f254:	2301      	movs	r3, #1
 800f256:	e000      	b.n	800f25a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f258:	2300      	movs	r3, #0
  }
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
	...

0800f268 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f272:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <ip_reass_tmr+0x54>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f278:	e018      	b.n	800f2ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	7fdb      	ldrb	r3, [r3, #31]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00b      	beq.n	800f29a <ip_reass_tmr+0x32>
      r->timer--;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	7fdb      	ldrb	r3, [r3, #31]
 800f286:	3b01      	subs	r3, #1
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	e008      	b.n	800f2ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f2a4:	68b9      	ldr	r1, [r7, #8]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 f80a 	bl	800f2c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1e3      	bne.n	800f27a <ip_reass_tmr+0x12>
    }
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	bf00      	nop
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	20000204 	.word	0x20000204

0800f2c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d105      	bne.n	800f2e2 <ip_reass_free_complete_datagram+0x22>
 800f2d6:	4b45      	ldr	r3, [pc, #276]	; (800f3ec <ip_reass_free_complete_datagram+0x12c>)
 800f2d8:	22ab      	movs	r2, #171	; 0xab
 800f2da:	4945      	ldr	r1, [pc, #276]	; (800f3f0 <ip_reass_free_complete_datagram+0x130>)
 800f2dc:	4845      	ldr	r0, [pc, #276]	; (800f3f4 <ip_reass_free_complete_datagram+0x134>)
 800f2de:	f003 f921 	bl	8012524 <iprintf>
  if (prev != NULL) {
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00a      	beq.n	800f2fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d005      	beq.n	800f2fe <ip_reass_free_complete_datagram+0x3e>
 800f2f2:	4b3e      	ldr	r3, [pc, #248]	; (800f3ec <ip_reass_free_complete_datagram+0x12c>)
 800f2f4:	22ad      	movs	r2, #173	; 0xad
 800f2f6:	4940      	ldr	r1, [pc, #256]	; (800f3f8 <ip_reass_free_complete_datagram+0x138>)
 800f2f8:	483e      	ldr	r0, [pc, #248]	; (800f3f4 <ip_reass_free_complete_datagram+0x134>)
 800f2fa:	f003 f913 	bl	8012524 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	889b      	ldrh	r3, [r3, #4]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d12a      	bne.n	800f366 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	6858      	ldr	r0, [r3, #4]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3308      	adds	r3, #8
 800f326:	2214      	movs	r2, #20
 800f328:	4619      	mov	r1, r3
 800f32a:	f003 f8e5 	bl	80124f8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f32e:	2101      	movs	r1, #1
 800f330:	69b8      	ldr	r0, [r7, #24]
 800f332:	f7ff fc47 	bl	800ebc4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f336:	69b8      	ldr	r0, [r7, #24]
 800f338:	f7f7 fe7a 	bl	8007030 <pbuf_clen>
 800f33c:	4603      	mov	r3, r0
 800f33e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f340:	8bfa      	ldrh	r2, [r7, #30]
 800f342:	8a7b      	ldrh	r3, [r7, #18]
 800f344:	4413      	add	r3, r2
 800f346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f34a:	db05      	blt.n	800f358 <ip_reass_free_complete_datagram+0x98>
 800f34c:	4b27      	ldr	r3, [pc, #156]	; (800f3ec <ip_reass_free_complete_datagram+0x12c>)
 800f34e:	22bc      	movs	r2, #188	; 0xbc
 800f350:	492a      	ldr	r1, [pc, #168]	; (800f3fc <ip_reass_free_complete_datagram+0x13c>)
 800f352:	4828      	ldr	r0, [pc, #160]	; (800f3f4 <ip_reass_free_complete_datagram+0x134>)
 800f354:	f003 f8e6 	bl	8012524 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f358:	8bfa      	ldrh	r2, [r7, #30]
 800f35a:	8a7b      	ldrh	r3, [r7, #18]
 800f35c:	4413      	add	r3, r2
 800f35e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f360:	69b8      	ldr	r0, [r7, #24]
 800f362:	f7f7 fddd 	bl	8006f20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f36c:	e01f      	b.n	800f3ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7f7 fe56 	bl	8007030 <pbuf_clen>
 800f384:	4603      	mov	r3, r0
 800f386:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f388:	8bfa      	ldrh	r2, [r7, #30]
 800f38a:	8a7b      	ldrh	r3, [r7, #18]
 800f38c:	4413      	add	r3, r2
 800f38e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f392:	db05      	blt.n	800f3a0 <ip_reass_free_complete_datagram+0xe0>
 800f394:	4b15      	ldr	r3, [pc, #84]	; (800f3ec <ip_reass_free_complete_datagram+0x12c>)
 800f396:	22cc      	movs	r2, #204	; 0xcc
 800f398:	4918      	ldr	r1, [pc, #96]	; (800f3fc <ip_reass_free_complete_datagram+0x13c>)
 800f39a:	4816      	ldr	r0, [pc, #88]	; (800f3f4 <ip_reass_free_complete_datagram+0x134>)
 800f39c:	f003 f8c2 	bl	8012524 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f3a0:	8bfa      	ldrh	r2, [r7, #30]
 800f3a2:	8a7b      	ldrh	r3, [r7, #18]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f7f7 fdb9 	bl	8006f20 <pbuf_free>
  while (p != NULL) {
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1dc      	bne.n	800f36e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 f8c2 	bl	800f540 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f3bc:	4b10      	ldr	r3, [pc, #64]	; (800f400 <ip_reass_free_complete_datagram+0x140>)
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	8bfa      	ldrh	r2, [r7, #30]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d905      	bls.n	800f3d2 <ip_reass_free_complete_datagram+0x112>
 800f3c6:	4b09      	ldr	r3, [pc, #36]	; (800f3ec <ip_reass_free_complete_datagram+0x12c>)
 800f3c8:	22d2      	movs	r2, #210	; 0xd2
 800f3ca:	490e      	ldr	r1, [pc, #56]	; (800f404 <ip_reass_free_complete_datagram+0x144>)
 800f3cc:	4809      	ldr	r0, [pc, #36]	; (800f3f4 <ip_reass_free_complete_datagram+0x134>)
 800f3ce:	f003 f8a9 	bl	8012524 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f3d2:	4b0b      	ldr	r3, [pc, #44]	; (800f400 <ip_reass_free_complete_datagram+0x140>)
 800f3d4:	881a      	ldrh	r2, [r3, #0]
 800f3d6:	8bfb      	ldrh	r3, [r7, #30]
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	4b08      	ldr	r3, [pc, #32]	; (800f400 <ip_reass_free_complete_datagram+0x140>)
 800f3de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f3e0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3720      	adds	r7, #32
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	08015d80 	.word	0x08015d80
 800f3f0:	08015dbc 	.word	0x08015dbc
 800f3f4:	08015dc8 	.word	0x08015dc8
 800f3f8:	08015df0 	.word	0x08015df0
 800f3fc:	08015e04 	.word	0x08015e04
 800f400:	20000208 	.word	0x20000208
 800f404:	08015e24 	.word	0x08015e24

0800f408 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08a      	sub	sp, #40	; 0x28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f412:	2300      	movs	r3, #0
 800f414:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f41e:	2300      	movs	r3, #0
 800f420:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f426:	4b28      	ldr	r3, [pc, #160]	; (800f4c8 <ip_reass_remove_oldest_datagram+0xc0>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f42c:	e030      	b.n	800f490 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f430:	695a      	ldr	r2, [r3, #20]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	429a      	cmp	r2, r3
 800f438:	d10c      	bne.n	800f454 <ip_reass_remove_oldest_datagram+0x4c>
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	699a      	ldr	r2, [r3, #24]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	429a      	cmp	r2, r3
 800f444:	d106      	bne.n	800f454 <ip_reass_remove_oldest_datagram+0x4c>
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	899a      	ldrh	r2, [r3, #12]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	889b      	ldrh	r3, [r3, #4]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	429a      	cmp	r2, r3
 800f452:	d014      	beq.n	800f47e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	3301      	adds	r3, #1
 800f458:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d104      	bne.n	800f46a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	61bb      	str	r3, [r7, #24]
 800f468:	e009      	b.n	800f47e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46c:	7fda      	ldrb	r2, [r3, #31]
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	7fdb      	ldrb	r3, [r3, #31]
 800f472:	429a      	cmp	r2, r3
 800f474:	d803      	bhi.n	800f47e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f478:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	2b00      	cmp	r3, #0
 800f494:	d1cb      	bne.n	800f42e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d008      	beq.n	800f4ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f49c:	69b9      	ldr	r1, [r7, #24]
 800f49e:	6a38      	ldr	r0, [r7, #32]
 800f4a0:	f7ff ff0e 	bl	800f2c0 <ip_reass_free_complete_datagram>
 800f4a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	da02      	bge.n	800f4bc <ip_reass_remove_oldest_datagram+0xb4>
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	dcac      	bgt.n	800f416 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f4bc:	697b      	ldr	r3, [r7, #20]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3728      	adds	r7, #40	; 0x28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20000204 	.word	0x20000204

0800f4cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f4d6:	2004      	movs	r0, #4
 800f4d8:	f7f6 fec4 	bl	8006264 <memp_malloc>
 800f4dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d110      	bne.n	800f506 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ff8e 	bl	800f408 <ip_reass_remove_oldest_datagram>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	dc03      	bgt.n	800f4fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f4f4:	2004      	movs	r0, #4
 800f4f6:	f7f6 feb5 	bl	8006264 <memp_malloc>
 800f4fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f502:	2300      	movs	r3, #0
 800f504:	e016      	b.n	800f534 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f506:	2220      	movs	r2, #32
 800f508:	2100      	movs	r1, #0
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f003 f802 	bl	8012514 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	220f      	movs	r2, #15
 800f514:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f516:	4b09      	ldr	r3, [pc, #36]	; (800f53c <ip_reass_enqueue_new_datagram+0x70>)
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f51e:	4a07      	ldr	r2, [pc, #28]	; (800f53c <ip_reass_enqueue_new_datagram+0x70>)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	3308      	adds	r3, #8
 800f528:	2214      	movs	r2, #20
 800f52a:	6879      	ldr	r1, [r7, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f002 ffe3 	bl	80124f8 <memcpy>
  return ipr;
 800f532:	68fb      	ldr	r3, [r7, #12]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20000204 	.word	0x20000204

0800f540 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f54a:	4b10      	ldr	r3, [pc, #64]	; (800f58c <ip_reass_dequeue_datagram+0x4c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	429a      	cmp	r2, r3
 800f552:	d104      	bne.n	800f55e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a0c      	ldr	r2, [pc, #48]	; (800f58c <ip_reass_dequeue_datagram+0x4c>)
 800f55a:	6013      	str	r3, [r2, #0]
 800f55c:	e00d      	b.n	800f57a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d106      	bne.n	800f572 <ip_reass_dequeue_datagram+0x32>
 800f564:	4b0a      	ldr	r3, [pc, #40]	; (800f590 <ip_reass_dequeue_datagram+0x50>)
 800f566:	f240 1245 	movw	r2, #325	; 0x145
 800f56a:	490a      	ldr	r1, [pc, #40]	; (800f594 <ip_reass_dequeue_datagram+0x54>)
 800f56c:	480a      	ldr	r0, [pc, #40]	; (800f598 <ip_reass_dequeue_datagram+0x58>)
 800f56e:	f002 ffd9 	bl	8012524 <iprintf>
    prev->next = ipr->next;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	2004      	movs	r0, #4
 800f57e:	f7f6 febd 	bl	80062fc <memp_free>
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20000204 	.word	0x20000204
 800f590:	08015d80 	.word	0x08015d80
 800f594:	08015e48 	.word	0x08015e48
 800f598:	08015dc8 	.word	0x08015dc8

0800f59c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08c      	sub	sp, #48	; 0x30
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	885b      	ldrh	r3, [r3, #2]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7f6 f9fb 	bl	80059b8 <lwip_htons>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	f003 030f 	and.w	r3, r3, #15
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f5d4:	7e7b      	ldrb	r3, [r7, #25]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	8b7a      	ldrh	r2, [r7, #26]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d202      	bcs.n	800f5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f5de:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e2:	e135      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f5e4:	7e7b      	ldrb	r3, [r7, #25]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	8b7a      	ldrh	r2, [r7, #26]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	88db      	ldrh	r3, [r3, #6]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7f6 f9df 	bl	80059b8 <lwip_htons>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f600:	b29b      	uxth	r3, r3
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
 800f612:	2200      	movs	r2, #0
 800f614:	705a      	strb	r2, [r3, #1]
 800f616:	2200      	movs	r2, #0
 800f618:	709a      	strb	r2, [r3, #2]
 800f61a:	2200      	movs	r2, #0
 800f61c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f620:	8afa      	ldrh	r2, [r7, #22]
 800f622:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f624:	8afa      	ldrh	r2, [r7, #22]
 800f626:	8b7b      	ldrh	r3, [r7, #26]
 800f628:	4413      	add	r3, r2
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f632:	88db      	ldrh	r3, [r3, #6]
 800f634:	b29b      	uxth	r3, r3
 800f636:	8afa      	ldrh	r2, [r7, #22]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d902      	bls.n	800f642 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f63c:	f04f 33ff 	mov.w	r3, #4294967295
 800f640:	e106      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
 800f648:	e068      	b.n	800f71c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f652:	889b      	ldrh	r3, [r3, #4]
 800f654:	b29a      	uxth	r2, r3
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	889b      	ldrh	r3, [r3, #4]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d235      	bcs.n	800f6cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f664:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d020      	beq.n	800f6ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	889b      	ldrh	r3, [r3, #4]
 800f670:	b29a      	uxth	r2, r3
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	88db      	ldrh	r3, [r3, #6]
 800f676:	b29b      	uxth	r3, r3
 800f678:	429a      	cmp	r2, r3
 800f67a:	d307      	bcc.n	800f68c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	88db      	ldrh	r3, [r3, #6]
 800f680:	b29a      	uxth	r2, r3
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	889b      	ldrh	r3, [r3, #4]
 800f686:	b29b      	uxth	r3, r3
 800f688:	429a      	cmp	r2, r3
 800f68a:	d902      	bls.n	800f692 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f68c:	f04f 33ff 	mov.w	r3, #4294967295
 800f690:	e0de      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	88db      	ldrh	r3, [r3, #6]
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	889b      	ldrh	r3, [r3, #4]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d03d      	beq.n	800f724 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f6ac:	e03a      	b.n	800f724 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	88db      	ldrh	r3, [r3, #6]
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	889b      	ldrh	r3, [r3, #4]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d902      	bls.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6be:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c2:	e0c5      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	605a      	str	r2, [r3, #4]
      break;
 800f6ca:	e02b      	b.n	800f724 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	889b      	ldrh	r3, [r3, #4]
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	889b      	ldrh	r3, [r3, #4]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d102      	bne.n	800f6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e0:	e0b6      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	88db      	ldrh	r3, [r3, #6]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d202      	bcs.n	800f6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f6:	e0ab      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d009      	beq.n	800f712 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	88db      	ldrh	r3, [r3, #6]
 800f702:	b29a      	uxth	r2, r3
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	889b      	ldrh	r3, [r3, #4]
 800f708:	b29b      	uxth	r3, r3
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d001      	beq.n	800f712 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d193      	bne.n	800f64a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f722:	e000      	b.n	800f726 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f724:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d12d      	bne.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d01c      	beq.n	800f76c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f734:	88db      	ldrh	r3, [r3, #6]
 800f736:	b29a      	uxth	r2, r3
 800f738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73a:	889b      	ldrh	r3, [r3, #4]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	429a      	cmp	r2, r3
 800f740:	d906      	bls.n	800f750 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f742:	4b45      	ldr	r3, [pc, #276]	; (800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f744:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f748:	4944      	ldr	r1, [pc, #272]	; (800f85c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f74a:	4845      	ldr	r0, [pc, #276]	; (800f860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f74c:	f002 feea 	bl	8012524 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	88db      	ldrh	r3, [r3, #6]
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75e:	889b      	ldrh	r3, [r3, #4]
 800f760:	b29b      	uxth	r3, r3
 800f762:	429a      	cmp	r2, r3
 800f764:	d010      	beq.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	623b      	str	r3, [r7, #32]
 800f76a:	e00d      	b.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d006      	beq.n	800f782 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f774:	4b38      	ldr	r3, [pc, #224]	; (800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f776:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f77a:	493a      	ldr	r1, [pc, #232]	; (800f864 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f77c:	4838      	ldr	r0, [pc, #224]	; (800f860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f77e:	f002 fed1 	bl	8012524 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d105      	bne.n	800f79a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	7f9b      	ldrb	r3, [r3, #30]
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d059      	beq.n	800f84e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d04f      	beq.n	800f840 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d006      	beq.n	800f7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	889b      	ldrh	r3, [r3, #4]
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	623b      	str	r3, [r7, #32]
 800f7ba:	e041      	b.n	800f840 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7be:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f7c6:	e012      	b.n	800f7ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	88db      	ldrh	r3, [r3, #6]
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d002      	beq.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	623b      	str	r3, [r7, #32]
            break;
 800f7e2:	e007      	b.n	800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1e9      	bne.n	800f7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f7f4:	6a3b      	ldr	r3, [r7, #32]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d022      	beq.n	800f840 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f802:	4b15      	ldr	r3, [pc, #84]	; (800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f804:	f240 12df 	movw	r2, #479	; 0x1df
 800f808:	4917      	ldr	r1, [pc, #92]	; (800f868 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f80a:	4815      	ldr	r0, [pc, #84]	; (800f860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f80c:	f002 fe8a 	bl	8012524 <iprintf>
          LWIP_ASSERT("sanity check",
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f818:	429a      	cmp	r2, r3
 800f81a:	d106      	bne.n	800f82a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f81c:	4b0e      	ldr	r3, [pc, #56]	; (800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f81e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f822:	4911      	ldr	r1, [pc, #68]	; (800f868 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f824:	480e      	ldr	r0, [pc, #56]	; (800f860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f826:	f002 fe7d 	bl	8012524 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d006      	beq.n	800f840 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f832:	4b09      	ldr	r3, [pc, #36]	; (800f858 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f834:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f838:	490c      	ldr	r1, [pc, #48]	; (800f86c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f83a:	4809      	ldr	r0, [pc, #36]	; (800f860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f83c:	f002 fe72 	bl	8012524 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	2b00      	cmp	r3, #0
 800f844:	bf14      	ite	ne
 800f846:	2301      	movne	r3, #1
 800f848:	2300      	moveq	r3, #0
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	e000      	b.n	800f850 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f84e:	2300      	movs	r3, #0
}
 800f850:	4618      	mov	r0, r3
 800f852:	3730      	adds	r7, #48	; 0x30
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	08015d80 	.word	0x08015d80
 800f85c:	08015e64 	.word	0x08015e64
 800f860:	08015dc8 	.word	0x08015dc8
 800f864:	08015e84 	.word	0x08015e84
 800f868:	08015ebc 	.word	0x08015ebc
 800f86c:	08015ecc 	.word	0x08015ecc

0800f870 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b08e      	sub	sp, #56	; 0x38
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f003 030f 	and.w	r3, r3, #15
 800f886:	b2db      	uxtb	r3, r3
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b14      	cmp	r3, #20
 800f88e:	f040 8167 	bne.w	800fb60 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	88db      	ldrh	r3, [r3, #6]
 800f896:	b29b      	uxth	r3, r3
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f6 f88d 	bl	80059b8 <lwip_htons>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	00db      	lsls	r3, r3, #3
 800f8a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ac:	885b      	ldrh	r3, [r3, #2]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7f6 f881 	bl	80059b8 <lwip_htons>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	f003 030f 	and.w	r3, r3, #15
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f8ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	f0c0 8146 	bcc.w	800fb64 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f8d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7f7 fba3 	bl	8007030 <pbuf_clen>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f8ee:	4b9f      	ldr	r3, [pc, #636]	; (800fb6c <ip4_reass+0x2fc>)
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	8c3b      	ldrh	r3, [r7, #32]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	2b0a      	cmp	r3, #10
 800f8fa:	dd10      	ble.n	800f91e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f8fc:	8c3b      	ldrh	r3, [r7, #32]
 800f8fe:	4619      	mov	r1, r3
 800f900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f902:	f7ff fd81 	bl	800f408 <ip_reass_remove_oldest_datagram>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 812d 	beq.w	800fb68 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f90e:	4b97      	ldr	r3, [pc, #604]	; (800fb6c <ip4_reass+0x2fc>)
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	8c3b      	ldrh	r3, [r7, #32]
 800f916:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f918:	2b0a      	cmp	r3, #10
 800f91a:	f300 8125 	bgt.w	800fb68 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f91e:	4b94      	ldr	r3, [pc, #592]	; (800fb70 <ip4_reass+0x300>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	633b      	str	r3, [r7, #48]	; 0x30
 800f924:	e015      	b.n	800f952 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	695a      	ldr	r2, [r3, #20]
 800f92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d10c      	bne.n	800f94c <ip4_reass+0xdc>
 800f932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f934:	699a      	ldr	r2, [r3, #24]
 800f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f938:	691b      	ldr	r3, [r3, #16]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d106      	bne.n	800f94c <ip4_reass+0xdc>
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	899a      	ldrh	r2, [r3, #12]
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	889b      	ldrh	r3, [r3, #4]
 800f946:	b29b      	uxth	r3, r3
 800f948:	429a      	cmp	r2, r3
 800f94a:	d006      	beq.n	800f95a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	633b      	str	r3, [r7, #48]	; 0x30
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	2b00      	cmp	r3, #0
 800f956:	d1e6      	bne.n	800f926 <ip4_reass+0xb6>
 800f958:	e000      	b.n	800f95c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f95a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d109      	bne.n	800f976 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f962:	8c3b      	ldrh	r3, [r7, #32]
 800f964:	4619      	mov	r1, r3
 800f966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f968:	f7ff fdb0 	bl	800f4cc <ip_reass_enqueue_new_datagram>
 800f96c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	2b00      	cmp	r3, #0
 800f972:	d11c      	bne.n	800f9ae <ip4_reass+0x13e>
      goto nullreturn;
 800f974:	e109      	b.n	800fb8a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f978:	88db      	ldrh	r3, [r3, #6]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f6 f81b 	bl	80059b8 <lwip_htons>
 800f982:	4603      	mov	r3, r0
 800f984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d110      	bne.n	800f9ae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	89db      	ldrh	r3, [r3, #14]
 800f990:	4618      	mov	r0, r3
 800f992:	f7f6 f811 	bl	80059b8 <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d006      	beq.n	800f9ae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	2214      	movs	r2, #20
 800f9a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 fda5 	bl	80124f8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	88db      	ldrh	r3, [r3, #6]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	f003 0320 	and.w	r3, r3, #32
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	bf0c      	ite	eq
 800f9bc:	2301      	moveq	r3, #1
 800f9be:	2300      	movne	r3, #0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00e      	beq.n	800f9e8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9ce:	4413      	add	r3, r2
 800f9d0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f9d2:	8b7a      	ldrh	r2, [r7, #26]
 800f9d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	f0c0 80a0 	bcc.w	800fb1c <ip4_reass+0x2ac>
 800f9dc:	8b7b      	ldrh	r3, [r7, #26]
 800f9de:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	f200 809a 	bhi.w	800fb1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f9e8:	69fa      	ldr	r2, [r7, #28]
 800f9ea:	6879      	ldr	r1, [r7, #4]
 800f9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9ee:	f7ff fdd5 	bl	800f59c <ip_reass_chain_frag_into_datagram_and_validate>
 800f9f2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	f000 8091 	beq.w	800fb20 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f9fe:	4b5b      	ldr	r3, [pc, #364]	; (800fb6c <ip4_reass+0x2fc>)
 800fa00:	881a      	ldrh	r2, [r3, #0]
 800fa02:	8c3b      	ldrh	r3, [r7, #32]
 800fa04:	4413      	add	r3, r2
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	4b58      	ldr	r3, [pc, #352]	; (800fb6c <ip4_reass+0x2fc>)
 800fa0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00d      	beq.n	800fa2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fa12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa16:	4413      	add	r3, r2
 800fa18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	8a7a      	ldrh	r2, [r7, #18]
 800fa1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa22:	7f9b      	ldrb	r3, [r3, #30]
 800fa24:	f043 0301 	orr.w	r3, r3, #1
 800fa28:	b2da      	uxtb	r2, r3
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d171      	bne.n	800fb18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa36:	8b9b      	ldrh	r3, [r3, #28]
 800fa38:	3314      	adds	r3, #20
 800fa3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	3308      	adds	r3, #8
 800fa52:	2214      	movs	r2, #20
 800fa54:	4619      	mov	r1, r3
 800fa56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa58:	f002 fd4e 	bl	80124f8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fa5c:	8a3b      	ldrh	r3, [r7, #16]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7f5 ffaa 	bl	80059b8 <lwip_htons>
 800fa64:	4603      	mov	r3, r0
 800fa66:	461a      	mov	r2, r3
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	2200      	movs	r2, #0
 800fa70:	719a      	strb	r2, [r3, #6]
 800fa72:	2200      	movs	r2, #0
 800fa74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa78:	2200      	movs	r2, #0
 800fa7a:	729a      	strb	r2, [r3, #10]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fa86:	e00d      	b.n	800faa4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fa8e:	2114      	movs	r1, #20
 800fa90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa92:	f7f7 f9bf 	bl	8006e14 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fa96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7f7 fb03 	bl	80070a4 <pbuf_cat>
      r = iprh->next_pbuf;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800faa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d1ee      	bne.n	800fa88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800faaa:	4b31      	ldr	r3, [pc, #196]	; (800fb70 <ip4_reass+0x300>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d102      	bne.n	800faba <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fab4:	2300      	movs	r3, #0
 800fab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fab8:	e010      	b.n	800fadc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800faba:	4b2d      	ldr	r3, [pc, #180]	; (800fb70 <ip4_reass+0x300>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fac0:	e007      	b.n	800fad2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fac8:	429a      	cmp	r2, r3
 800faca:	d006      	beq.n	800fada <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1f4      	bne.n	800fac2 <ip4_reass+0x252>
 800fad8:	e000      	b.n	800fadc <ip4_reass+0x26c>
          break;
 800fada:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fadc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fae0:	f7ff fd2e 	bl	800f540 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7f7 faa3 	bl	8007030 <pbuf_clen>
 800faea:	4603      	mov	r3, r0
 800faec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800faee:	4b1f      	ldr	r3, [pc, #124]	; (800fb6c <ip4_reass+0x2fc>)
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	8c3a      	ldrh	r2, [r7, #32]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d906      	bls.n	800fb06 <ip4_reass+0x296>
 800faf8:	4b1e      	ldr	r3, [pc, #120]	; (800fb74 <ip4_reass+0x304>)
 800fafa:	f240 229b 	movw	r2, #667	; 0x29b
 800fafe:	491e      	ldr	r1, [pc, #120]	; (800fb78 <ip4_reass+0x308>)
 800fb00:	481e      	ldr	r0, [pc, #120]	; (800fb7c <ip4_reass+0x30c>)
 800fb02:	f002 fd0f 	bl	8012524 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fb06:	4b19      	ldr	r3, [pc, #100]	; (800fb6c <ip4_reass+0x2fc>)
 800fb08:	881a      	ldrh	r2, [r3, #0]
 800fb0a:	8c3b      	ldrh	r3, [r7, #32]
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	4b16      	ldr	r3, [pc, #88]	; (800fb6c <ip4_reass+0x2fc>)
 800fb12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	e03c      	b.n	800fb92 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e03a      	b.n	800fb92 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fb20:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d106      	bne.n	800fb36 <ip4_reass+0x2c6>
 800fb28:	4b12      	ldr	r3, [pc, #72]	; (800fb74 <ip4_reass+0x304>)
 800fb2a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fb2e:	4914      	ldr	r1, [pc, #80]	; (800fb80 <ip4_reass+0x310>)
 800fb30:	4812      	ldr	r0, [pc, #72]	; (800fb7c <ip4_reass+0x30c>)
 800fb32:	f002 fcf7 	bl	8012524 <iprintf>
  if (ipr->p == NULL) {
 800fb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d124      	bne.n	800fb88 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fb3e:	4b0c      	ldr	r3, [pc, #48]	; (800fb70 <ip4_reass+0x300>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d006      	beq.n	800fb56 <ip4_reass+0x2e6>
 800fb48:	4b0a      	ldr	r3, [pc, #40]	; (800fb74 <ip4_reass+0x304>)
 800fb4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fb4e:	490d      	ldr	r1, [pc, #52]	; (800fb84 <ip4_reass+0x314>)
 800fb50:	480a      	ldr	r0, [pc, #40]	; (800fb7c <ip4_reass+0x30c>)
 800fb52:	f002 fce7 	bl	8012524 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fb56:	2100      	movs	r1, #0
 800fb58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb5a:	f7ff fcf1 	bl	800f540 <ip_reass_dequeue_datagram>
 800fb5e:	e014      	b.n	800fb8a <ip4_reass+0x31a>
    goto nullreturn;
 800fb60:	bf00      	nop
 800fb62:	e012      	b.n	800fb8a <ip4_reass+0x31a>
    goto nullreturn;
 800fb64:	bf00      	nop
 800fb66:	e010      	b.n	800fb8a <ip4_reass+0x31a>
      goto nullreturn;
 800fb68:	bf00      	nop
 800fb6a:	e00e      	b.n	800fb8a <ip4_reass+0x31a>
 800fb6c:	20000208 	.word	0x20000208
 800fb70:	20000204 	.word	0x20000204
 800fb74:	08015d80 	.word	0x08015d80
 800fb78:	08015ef0 	.word	0x08015ef0
 800fb7c:	08015dc8 	.word	0x08015dc8
 800fb80:	08015f0c 	.word	0x08015f0c
 800fb84:	08015f18 	.word	0x08015f18
  }

nullreturn:
 800fb88:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7f7 f9c8 	bl	8006f20 <pbuf_free>
  return NULL;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3738      	adds	r7, #56	; 0x38
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop

0800fb9c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fba0:	2005      	movs	r0, #5
 800fba2:	f7f6 fb5f 	bl	8006264 <memp_malloc>
 800fba6:	4603      	mov	r3, r0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d106      	bne.n	800fbc8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fbba:	4b07      	ldr	r3, [pc, #28]	; (800fbd8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fbbc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fbc0:	4906      	ldr	r1, [pc, #24]	; (800fbdc <ip_frag_free_pbuf_custom_ref+0x30>)
 800fbc2:	4807      	ldr	r0, [pc, #28]	; (800fbe0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fbc4:	f002 fcae 	bl	8012524 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fbc8:	6879      	ldr	r1, [r7, #4]
 800fbca:	2005      	movs	r0, #5
 800fbcc:	f7f6 fb96 	bl	80062fc <memp_free>
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	08015d80 	.word	0x08015d80
 800fbdc:	08015f38 	.word	0x08015f38
 800fbe0:	08015dc8 	.word	0x08015dc8

0800fbe4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d106      	bne.n	800fc04 <ipfrag_free_pbuf_custom+0x20>
 800fbf6:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <ipfrag_free_pbuf_custom+0x58>)
 800fbf8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fbfc:	4910      	ldr	r1, [pc, #64]	; (800fc40 <ipfrag_free_pbuf_custom+0x5c>)
 800fbfe:	4811      	ldr	r0, [pc, #68]	; (800fc44 <ipfrag_free_pbuf_custom+0x60>)
 800fc00:	f002 fc90 	bl	8012524 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d006      	beq.n	800fc1a <ipfrag_free_pbuf_custom+0x36>
 800fc0c:	4b0b      	ldr	r3, [pc, #44]	; (800fc3c <ipfrag_free_pbuf_custom+0x58>)
 800fc0e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fc12:	490d      	ldr	r1, [pc, #52]	; (800fc48 <ipfrag_free_pbuf_custom+0x64>)
 800fc14:	480b      	ldr	r0, [pc, #44]	; (800fc44 <ipfrag_free_pbuf_custom+0x60>)
 800fc16:	f002 fc85 	bl	8012524 <iprintf>
  if (pcr->original != NULL) {
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d004      	beq.n	800fc2c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	695b      	ldr	r3, [r3, #20]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7f7 f97a 	bl	8006f20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff ffbd 	bl	800fbac <ip_frag_free_pbuf_custom_ref>
}
 800fc32:	bf00      	nop
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08015d80 	.word	0x08015d80
 800fc40:	08015f44 	.word	0x08015f44
 800fc44:	08015dc8 	.word	0x08015dc8
 800fc48:	08015f50 	.word	0x08015f50

0800fc4c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b094      	sub	sp, #80	; 0x50
 800fc50:	af02      	add	r7, sp, #8
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc62:	3b14      	subs	r3, #20
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da00      	bge.n	800fc6a <ip4_frag+0x1e>
 800fc68:	3307      	adds	r3, #7
 800fc6a:	10db      	asrs	r3, r3, #3
 800fc6c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fc6e:	2314      	movs	r3, #20
 800fc70:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 030f 	and.w	r3, r3, #15
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b14      	cmp	r3, #20
 800fc8c:	d002      	beq.n	800fc94 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fc8e:	f06f 0305 	mvn.w	r3, #5
 800fc92:	e110      	b.n	800feb6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	895b      	ldrh	r3, [r3, #10]
 800fc98:	2b13      	cmp	r3, #19
 800fc9a:	d809      	bhi.n	800fcb0 <ip4_frag+0x64>
 800fc9c:	4b88      	ldr	r3, [pc, #544]	; (800fec0 <ip4_frag+0x274>)
 800fc9e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fca2:	4988      	ldr	r1, [pc, #544]	; (800fec4 <ip4_frag+0x278>)
 800fca4:	4888      	ldr	r0, [pc, #544]	; (800fec8 <ip4_frag+0x27c>)
 800fca6:	f002 fc3d 	bl	8012524 <iprintf>
 800fcaa:	f06f 0305 	mvn.w	r3, #5
 800fcae:	e102      	b.n	800feb6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb2:	88db      	ldrh	r3, [r3, #6]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f5 fe7e 	bl	80059b8 <lwip_htons>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fcc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fcca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	891b      	ldrh	r3, [r3, #8]
 800fcd6:	3b14      	subs	r3, #20
 800fcd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fcdc:	e0e1      	b.n	800fea2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fcde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fce8:	4293      	cmp	r3, r2
 800fcea:	bf28      	it	cs
 800fcec:	4613      	movcs	r3, r2
 800fcee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fcf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcf4:	2114      	movs	r1, #20
 800fcf6:	200e      	movs	r0, #14
 800fcf8:	f7f6 fe2e 	bl	8006958 <pbuf_alloc>
 800fcfc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f000 80d5 	beq.w	800feb0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd08:	895b      	ldrh	r3, [r3, #10]
 800fd0a:	2b13      	cmp	r3, #19
 800fd0c:	d806      	bhi.n	800fd1c <ip4_frag+0xd0>
 800fd0e:	4b6c      	ldr	r3, [pc, #432]	; (800fec0 <ip4_frag+0x274>)
 800fd10:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fd14:	496d      	ldr	r1, [pc, #436]	; (800fecc <ip4_frag+0x280>)
 800fd16:	486c      	ldr	r0, [pc, #432]	; (800fec8 <ip4_frag+0x27c>)
 800fd18:	f002 fc04 	bl	8012524 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	2214      	movs	r2, #20
 800fd22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd24:	4618      	mov	r0, r3
 800fd26:	f002 fbe7 	bl	80124f8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fd30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fd36:	e064      	b.n	800fe02 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	895a      	ldrh	r2, [r3, #10]
 800fd3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	895b      	ldrh	r3, [r3, #10]
 800fd46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d906      	bls.n	800fd5a <ip4_frag+0x10e>
 800fd4c:	4b5c      	ldr	r3, [pc, #368]	; (800fec0 <ip4_frag+0x274>)
 800fd4e:	f240 322d 	movw	r2, #813	; 0x32d
 800fd52:	495f      	ldr	r1, [pc, #380]	; (800fed0 <ip4_frag+0x284>)
 800fd54:	485c      	ldr	r0, [pc, #368]	; (800fec8 <ip4_frag+0x27c>)
 800fd56:	f002 fbe5 	bl	8012524 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fd5a:	8bfa      	ldrh	r2, [r7, #30]
 800fd5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd60:	4293      	cmp	r3, r2
 800fd62:	bf28      	it	cs
 800fd64:	4613      	movcs	r3, r2
 800fd66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fd6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d105      	bne.n	800fd7e <ip4_frag+0x132>
        poff = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	60fb      	str	r3, [r7, #12]
        continue;
 800fd7c:	e041      	b.n	800fe02 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fd7e:	f7ff ff0d 	bl	800fb9c <ip_frag_alloc_pbuf_custom_ref>
 800fd82:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d103      	bne.n	800fd92 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fd8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd8c:	f7f7 f8c8 	bl	8006f20 <pbuf_free>
        goto memerr;
 800fd90:	e08f      	b.n	800feb2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd92:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fda0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fda4:	9201      	str	r2, [sp, #4]
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2241      	movs	r2, #65	; 0x41
 800fdac:	2000      	movs	r0, #0
 800fdae:	f7f6 fefd 	bl	8006bac <pbuf_alloced_custom>
 800fdb2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fdba:	69b8      	ldr	r0, [r7, #24]
 800fdbc:	f7ff fef6 	bl	800fbac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fdc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdc2:	f7f7 f8ad 	bl	8006f20 <pbuf_free>
        goto memerr;
 800fdc6:	e074      	b.n	800feb2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f7f7 f949 	bl	8007060 <pbuf_ref>
      pcr->original = p;
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	4a3f      	ldr	r2, [pc, #252]	; (800fed4 <ip4_frag+0x288>)
 800fdd8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fdda:	6979      	ldr	r1, [r7, #20]
 800fddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdde:	f7f7 f961 	bl	80070a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fde2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fde6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fdf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <ip4_frag+0x1b6>
        poff = 0;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fe02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d196      	bne.n	800fd38 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fe0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fe0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe10:	4413      	add	r3, r2
 800fe12:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe18:	f1a3 0213 	sub.w	r2, r3, #19
 800fe1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe20:	429a      	cmp	r2, r3
 800fe22:	bfcc      	ite	gt
 800fe24:	2301      	movgt	r3, #1
 800fe26:	2300      	movle	r3, #0
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fe2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d002      	beq.n	800fe42 <ip4_frag+0x1f6>
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fe42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe48:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fe4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f5 fdb3 	bl	80059b8 <lwip_htons>
 800fe52:	4603      	mov	r3, r0
 800fe54:	461a      	mov	r2, r3
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fe5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe5c:	3314      	adds	r3, #20
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7f5 fda9 	bl	80059b8 <lwip_htons>
 800fe66:	4603      	mov	r3, r0
 800fe68:	461a      	mov	r2, r3
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	2200      	movs	r2, #0
 800fe72:	729a      	strb	r2, [r3, #10]
 800fe74:	2200      	movs	r2, #0
 800fe76:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe80:	68b8      	ldr	r0, [r7, #8]
 800fe82:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fe84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe86:	f7f7 f84b 	bl	8006f20 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fe8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fe96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fe9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fea2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f47f af19 	bne.w	800fcde <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	e002      	b.n	800feb6 <ip4_frag+0x26a>
      goto memerr;
 800feb0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800feb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3748      	adds	r7, #72	; 0x48
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	08015d80 	.word	0x08015d80
 800fec4:	08015f5c 	.word	0x08015f5c
 800fec8:	08015dc8 	.word	0x08015dc8
 800fecc:	08015f78 	.word	0x08015f78
 800fed0:	08015f98 	.word	0x08015f98
 800fed4:	0800fbe5 	.word	0x0800fbe5

0800fed8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fee2:	230e      	movs	r3, #14
 800fee4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	895b      	ldrh	r3, [r3, #10]
 800feea:	2b0e      	cmp	r3, #14
 800feec:	d96e      	bls.n	800ffcc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	7bdb      	ldrb	r3, [r3, #15]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fefc:	3301      	adds	r3, #1
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	7b1a      	ldrb	r2, [r3, #12]
 800ff0e:	7b5b      	ldrb	r3, [r3, #13]
 800ff10:	021b      	lsls	r3, r3, #8
 800ff12:	4313      	orrs	r3, r2
 800ff14:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	f003 0301 	and.w	r3, r3, #1
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d023      	beq.n	800ff6a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d10f      	bne.n	800ff4a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	785b      	ldrb	r3, [r3, #1]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d11b      	bne.n	800ff6a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff36:	2b5e      	cmp	r3, #94	; 0x5e
 800ff38:	d117      	bne.n	800ff6a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	7b5b      	ldrb	r3, [r3, #13]
 800ff3e:	f043 0310 	orr.w	r3, r3, #16
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	735a      	strb	r2, [r3, #13]
 800ff48:	e00f      	b.n	800ff6a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	2206      	movs	r2, #6
 800ff4e:	4928      	ldr	r1, [pc, #160]	; (800fff0 <ethernet_input+0x118>)
 800ff50:	4618      	mov	r0, r3
 800ff52:	f002 fac3 	bl	80124dc <memcmp>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d106      	bne.n	800ff6a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	7b5b      	ldrb	r3, [r3, #13]
 800ff60:	f043 0308 	orr.w	r3, r3, #8
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ff6a:	89fb      	ldrh	r3, [r7, #14]
 800ff6c:	2b08      	cmp	r3, #8
 800ff6e:	d003      	beq.n	800ff78 <ethernet_input+0xa0>
 800ff70:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ff74:	d014      	beq.n	800ffa0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ff76:	e032      	b.n	800ffde <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff7e:	f003 0308 	and.w	r3, r3, #8
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d024      	beq.n	800ffd0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ff86:	8afb      	ldrh	r3, [r7, #22]
 800ff88:	4619      	mov	r1, r3
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f6 ff42 	bl	8006e14 <pbuf_remove_header>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d11e      	bne.n	800ffd4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7fe ff27 	bl	800edec <ip4_input>
      break;
 800ff9e:	e013      	b.n	800ffc8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffa6:	f003 0308 	and.w	r3, r3, #8
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d014      	beq.n	800ffd8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffae:	8afb      	ldrh	r3, [r7, #22]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7f6 ff2e 	bl	8006e14 <pbuf_remove_header>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d10e      	bne.n	800ffdc <ethernet_input+0x104>
        etharp_input(p, netif);
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7fe f8c7 	bl	800e154 <etharp_input>
      break;
 800ffc6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e00c      	b.n	800ffe6 <ethernet_input+0x10e>
    goto free_and_return;
 800ffcc:	bf00      	nop
 800ffce:	e006      	b.n	800ffde <ethernet_input+0x106>
        goto free_and_return;
 800ffd0:	bf00      	nop
 800ffd2:	e004      	b.n	800ffde <ethernet_input+0x106>
        goto free_and_return;
 800ffd4:	bf00      	nop
 800ffd6:	e002      	b.n	800ffde <ethernet_input+0x106>
        goto free_and_return;
 800ffd8:	bf00      	nop
 800ffda:	e000      	b.n	800ffde <ethernet_input+0x106>
        goto free_and_return;
 800ffdc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7f6 ff9e 	bl	8006f20 <pbuf_free>
  return ERR_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	080161b0 	.word	0x080161b0

0800fff4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
 8010000:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010002:	8c3b      	ldrh	r3, [r7, #32]
 8010004:	4618      	mov	r0, r3
 8010006:	f7f5 fcd7 	bl	80059b8 <lwip_htons>
 801000a:	4603      	mov	r3, r0
 801000c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801000e:	210e      	movs	r1, #14
 8010010:	68b8      	ldr	r0, [r7, #8]
 8010012:	f7f6 feef 	bl	8006df4 <pbuf_add_header>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d125      	bne.n	8010068 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	8afa      	ldrh	r2, [r7, #22]
 8010026:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	2206      	movs	r2, #6
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	4618      	mov	r0, r3
 8010030:	f002 fa62 	bl	80124f8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	3306      	adds	r3, #6
 8010038:	2206      	movs	r2, #6
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	f002 fa5b 	bl	80124f8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010048:	2b06      	cmp	r3, #6
 801004a:	d006      	beq.n	801005a <ethernet_output+0x66>
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <ethernet_output+0x84>)
 801004e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010052:	490a      	ldr	r1, [pc, #40]	; (801007c <ethernet_output+0x88>)
 8010054:	480a      	ldr	r0, [pc, #40]	; (8010080 <ethernet_output+0x8c>)
 8010056:	f002 fa65 	bl	8012524 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	699b      	ldr	r3, [r3, #24]
 801005e:	68b9      	ldr	r1, [r7, #8]
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	4798      	blx	r3
 8010064:	4603      	mov	r3, r0
 8010066:	e002      	b.n	801006e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010068:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801006a:	f06f 0301 	mvn.w	r3, #1
}
 801006e:	4618      	mov	r0, r3
 8010070:	3718      	adds	r7, #24
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	08015fa8 	.word	0x08015fa8
 801007c:	08015fe0 	.word	0x08015fe0
 8010080:	08016014 	.word	0x08016014

08010084 <tcp_server_init>:
  * @brief  Initializes the tcp  server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_server_pcb = tcp_new();
 801008a:	f7f8 fd91 	bl	8008bb0 <tcp_new>
 801008e:	4603      	mov	r3, r0
 8010090:	4a19      	ldr	r2, [pc, #100]	; (80100f8 <tcp_server_init+0x74>)
 8010092:	6013      	str	r3, [r2, #0]

  if (tcp_server_pcb != NULL)
 8010094:	4b18      	ldr	r3, [pc, #96]	; (80100f8 <tcp_server_init+0x74>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d025      	beq.n	80100e8 <tcp_server_init+0x64>
  {
    err_t err;
    ip4_addr_t ipAddress;
    IP4_ADDR(&ipAddress, 192, 168, 100, 1);
 801009c:	4b17      	ldr	r3, [pc, #92]	; (80100fc <tcp_server_init+0x78>)
 801009e:	603b      	str	r3, [r7, #0]
    uint16_t port = 8000;
 80100a0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80100a4:	80fb      	strh	r3, [r7, #6]

    /* bind _pcb to port 7 ( protocol) */
    //err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 7);

    err = tcp_bind(tcp_server_pcb, &ipAddress, port);
 80100a6:	4b14      	ldr	r3, [pc, #80]	; (80100f8 <tcp_server_init+0x74>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	88fa      	ldrh	r2, [r7, #6]
 80100ac:	4639      	mov	r1, r7
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7f7 fcda 	bl	8007a68 <tcp_bind>
 80100b4:	4603      	mov	r3, r0
 80100b6:	717b      	strb	r3, [r7, #5]

    if (err == ERR_OK)
 80100b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10f      	bne.n	80100e0 <tcp_server_init+0x5c>
    {
      /* start tcp listening for _pcb */
      tcp_server_pcb = tcp_listen(tcp_server_pcb);
 80100c0:	4b0d      	ldr	r3, [pc, #52]	; (80100f8 <tcp_server_init+0x74>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	21ff      	movs	r1, #255	; 0xff
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7f7 fd86 	bl	8007bd8 <tcp_listen_with_backlog>
 80100cc:	4603      	mov	r3, r0
 80100ce:	4a0a      	ldr	r2, [pc, #40]	; (80100f8 <tcp_server_init+0x74>)
 80100d0:	6013      	str	r3, [r2, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_server_pcb, tcp_server_accept);
 80100d2:	4b09      	ldr	r3, [pc, #36]	; (80100f8 <tcp_server_init+0x74>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	490a      	ldr	r1, [pc, #40]	; (8010100 <tcp_server_init+0x7c>)
 80100d8:	4618      	mov	r0, r3
 80100da:	f7f8 fde9 	bl	8008cb0 <tcp_accept>
  }
  else
  {
    printf("Can not create new pcb\n");
  }
}
 80100de:	e006      	b.n	80100ee <tcp_server_init+0x6a>
      printf("Can not bind pcb\n");
 80100e0:	4808      	ldr	r0, [pc, #32]	; (8010104 <tcp_server_init+0x80>)
 80100e2:	f002 faa5 	bl	8012630 <puts>
}
 80100e6:	e002      	b.n	80100ee <tcp_server_init+0x6a>
    printf("Can not create new pcb\n");
 80100e8:	4807      	ldr	r0, [pc, #28]	; (8010108 <tcp_server_init+0x84>)
 80100ea:	f002 faa1 	bl	8012630 <puts>
}
 80100ee:	bf00      	nop
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	2000020c 	.word	0x2000020c
 80100fc:	0164a8c0 	.word	0x0164a8c0
 8010100:	0801010d 	.word	0x0801010d
 8010104:	0801603c 	.word	0x0801603c
 8010108:	08016050 	.word	0x08016050

0801010c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	4613      	mov	r3, r2
 8010118:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 801011a:	2101      	movs	r1, #1
 801011c:	68b8      	ldr	r0, [r7, #8]
 801011e:	f7f8 fb55 	bl	80087cc <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8010122:	200c      	movs	r0, #12
 8010124:	f7f5 ff30 	bl	8005f88 <mem_malloc>
 8010128:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d01c      	beq.n	801016a <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	2201      	movs	r2, #1
 8010134:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	2200      	movs	r2, #0
 8010140:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8010142:	6939      	ldr	r1, [r7, #16]
 8010144:	68b8      	ldr	r0, [r7, #8]
 8010146:	f7f8 fd3b 	bl	8008bc0 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 801014a:	490c      	ldr	r1, [pc, #48]	; (801017c <tcp_server_accept+0x70>)
 801014c:	68b8      	ldr	r0, [r7, #8]
 801014e:	f7f8 fd49 	bl	8008be4 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8010152:	490b      	ldr	r1, [pc, #44]	; (8010180 <tcp_server_accept+0x74>)
 8010154:	68b8      	ldr	r0, [r7, #8]
 8010156:	f7f8 fd89 	bl	8008c6c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 801015a:	2201      	movs	r2, #1
 801015c:	4909      	ldr	r1, [pc, #36]	; (8010184 <tcp_server_accept+0x78>)
 801015e:	68b8      	ldr	r0, [r7, #8]
 8010160:	f7f8 fdbe 	bl	8008ce0 <tcp_poll>

    ret_err = ERR_OK;
 8010164:	2300      	movs	r3, #0
 8010166:	75fb      	strb	r3, [r7, #23]
 8010168:	e001      	b.n	801016e <tcp_server_accept+0x62>
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
 801016a:	23ff      	movs	r3, #255	; 0xff
 801016c:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 801016e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3718      	adds	r7, #24
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	08010189 	.word	0x08010189
 8010180:	08010299 	.word	0x08010299
 8010184:	080102bd 	.word	0x080102bd

08010188 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b088      	sub	sp, #32
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d105      	bne.n	80101a8 <tcp_server_recv+0x20>
 801019c:	4b3a      	ldr	r3, [pc, #232]	; (8010288 <tcp_server_recv+0x100>)
 801019e:	227b      	movs	r2, #123	; 0x7b
 80101a0:	493a      	ldr	r1, [pc, #232]	; (801028c <tcp_server_recv+0x104>)
 80101a2:	483b      	ldr	r0, [pc, #236]	; (8010290 <tcp_server_recv+0x108>)
 80101a4:	f002 f9be 	bl	8012524 <iprintf>

  es = (struct tcp_server_struct *)arg;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d116      	bne.n	80101e0 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	2203      	movs	r2, #3
 80101b6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d104      	bne.n	80101ca <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 80101c0:	69b9      	ldr	r1, [r7, #24]
 80101c2:	68b8      	ldr	r0, [r7, #8]
 80101c4:	f000 f92c 	bl	8010420 <tcp_server_connection_close>
 80101c8:	e007      	b.n	80101da <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 80101ca:	4932      	ldr	r1, [pc, #200]	; (8010294 <tcp_server_recv+0x10c>)
 80101cc:	68b8      	ldr	r0, [r7, #8]
 80101ce:	f7f8 fd2b 	bl	8008c28 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 80101d2:	69b9      	ldr	r1, [r7, #24]
 80101d4:	68b8      	ldr	r0, [r7, #8]
 80101d6:	f000 f8b9 	bl	801034c <tcp_server_send>
    }
    ret_err = ERR_OK;
 80101da:	2300      	movs	r3, #0
 80101dc:	77fb      	strb	r3, [r7, #31]
 80101de:	e04c      	b.n	801027a <tcp_server_recv+0xf2>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80101e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00b      	beq.n	8010200 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d005      	beq.n	80101fa <tcp_server_recv+0x72>
    {
      es->p = NULL;
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	2200      	movs	r2, #0
 80101f2:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7f6 fe93 	bl	8006f20 <pbuf_free>
    }
    ret_err = err;
 80101fa:	78fb      	ldrb	r3, [r7, #3]
 80101fc:	77fb      	strb	r3, [r7, #31]
 80101fe:	e03c      	b.n	801027a <tcp_server_recv+0xf2>
  }
  else if(es->state == ES_ACCEPTED)
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d110      	bne.n	801022a <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	2202      	movs	r2, #2
 801020c:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8010214:	491f      	ldr	r1, [pc, #124]	; (8010294 <tcp_server_recv+0x10c>)
 8010216:	68b8      	ldr	r0, [r7, #8]
 8010218:	f7f8 fd06 	bl	8008c28 <tcp_sent>

    /* send back the received data () */
    tcp_server_send(tpcb, es);
 801021c:	69b9      	ldr	r1, [r7, #24]
 801021e:	68b8      	ldr	r0, [r7, #8]
 8010220:	f000 f894 	bl	801034c <tcp_server_send>

    ret_err = ERR_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	77fb      	strb	r3, [r7, #31]
 8010228:	e027      	b.n	801027a <tcp_server_recv+0xf2>
  }
  else if (es->state == ES_RECEIVED)
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	2b02      	cmp	r3, #2
 8010230:	d115      	bne.n	801025e <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d107      	bne.n	801024a <tcp_server_recv+0xc2>
    {
      es->p = p;
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 8010240:	69b9      	ldr	r1, [r7, #24]
 8010242:	68b8      	ldr	r0, [r7, #8]
 8010244:	f000 f882 	bl	801034c <tcp_server_send>
 8010248:	e006      	b.n	8010258 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8010250:	6879      	ldr	r1, [r7, #4]
 8010252:	6978      	ldr	r0, [r7, #20]
 8010254:	f7f6 ff7c 	bl	8007150 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8010258:	2300      	movs	r3, #0
 801025a:	77fb      	strb	r3, [r7, #31]
 801025c:	e00d      	b.n	801027a <tcp_server_recv+0xf2>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	891b      	ldrh	r3, [r3, #8]
 8010262:	4619      	mov	r1, r3
 8010264:	68b8      	ldr	r0, [r7, #8]
 8010266:	f7f7 fdcd 	bl	8007e04 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	2200      	movs	r2, #0
 801026e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7f6 fe55 	bl	8006f20 <pbuf_free>
    ret_err = ERR_OK;
 8010276:	2300      	movs	r3, #0
 8010278:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 801027a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3720      	adds	r7, #32
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	08016068 	.word	0x08016068
 801028c:	08016084 	.word	0x08016084
 8010290:	08016090 	.word	0x08016090
 8010294:	0801030f 	.word	0x0801030f

08010298 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d002      	beq.n	80102b4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f7f5 fd04 	bl	8005cbc <mem_free>
  }
}
 80102b4:	bf00      	nop
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d013      	beq.n	80102f8 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d004      	beq.n	80102e2 <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 80102d8:	68b9      	ldr	r1, [r7, #8]
 80102da:	6838      	ldr	r0, [r7, #0]
 80102dc:	f000 f836 	bl	801034c <tcp_server_send>
 80102e0:	e007      	b.n	80102f2 <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b03      	cmp	r3, #3
 80102e8:	d103      	bne.n	80102f2 <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80102ea:	68b9      	ldr	r1, [r7, #8]
 80102ec:	6838      	ldr	r0, [r7, #0]
 80102ee:	f000 f897 	bl	8010420 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80102f2:	2300      	movs	r3, #0
 80102f4:	73fb      	strb	r3, [r7, #15]
 80102f6:	e004      	b.n	8010302 <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80102f8:	6838      	ldr	r0, [r7, #0]
 80102fa:	f7f7 fba9 	bl	8007a50 <tcp_abort>
    ret_err = ERR_ABRT;
 80102fe:	23f3      	movs	r3, #243	; 0xf3
 8010300:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8010302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b086      	sub	sp, #24
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	4613      	mov	r3, r2
 801031a:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8010328:	6979      	ldr	r1, [r7, #20]
 801032a:	68b8      	ldr	r0, [r7, #8]
 801032c:	f000 f80e 	bl	801034c <tcp_server_send>
 8010330:	e007      	b.n	8010342 <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b03      	cmp	r3, #3
 8010338:	d103      	bne.n	8010342 <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 801033a:	6979      	ldr	r1, [r7, #20]
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f000 f86f 	bl	8010420 <tcp_server_connection_close>
  }
  return ERR_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b086      	sub	sp, #24
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 801035a:	e04d      	b.n	80103f8 <tcp_server_send+0xac>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	6859      	ldr	r1, [r3, #4]
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	895a      	ldrh	r2, [r3, #10]
 801036a:	2301      	movs	r3, #1
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f7fb fb65 	bl	800ba3c <tcp_write>
 8010372:	4603      	mov	r3, r0
 8010374:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8010376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d134      	bne.n	80103e8 <tcp_server_send+0x9c>
    {
      u16_t plen;

      plen = ptr->len;
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	895b      	ldrh	r3, [r3, #10]
 8010382:	81fb      	strh	r3, [r7, #14]

      char *pReceived = (char*)mem_malloc((size_t)(plen + 1));
 8010384:	89fb      	ldrh	r3, [r7, #14]
 8010386:	3301      	adds	r3, #1
 8010388:	b29b      	uxth	r3, r3
 801038a:	4618      	mov	r0, r3
 801038c:	f7f5 fdfc 	bl	8005f88 <mem_malloc>
 8010390:	60b8      	str	r0, [r7, #8]
      memcpy(pReceived, ptr->payload, plen);
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	89fa      	ldrh	r2, [r7, #14]
 8010398:	4619      	mov	r1, r3
 801039a:	68b8      	ldr	r0, [r7, #8]
 801039c:	f002 f8ac 	bl	80124f8 <memcpy>
      memset(pReceived + plen, 0, 1);
 80103a0:	89fb      	ldrh	r3, [r7, #14]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	4413      	add	r3, r2
 80103a6:	2201      	movs	r2, #1
 80103a8:	2100      	movs	r1, #0
 80103aa:	4618      	mov	r0, r3
 80103ac:	f002 f8b2 	bl	8012514 <memset>
      printf("%s\n", pReceived);
 80103b0:	68b8      	ldr	r0, [r7, #8]
 80103b2:	f002 f93d 	bl	8012630 <puts>
      mem_free(pReceived);
 80103b6:	68b8      	ldr	r0, [r7, #8]
 80103b8:	f7f5 fc80 	bl	8005cbc <mem_free>

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d004      	beq.n	80103d6 <tcp_server_send+0x8a>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f6 fe45 	bl	8007060 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 80103d6:	6938      	ldr	r0, [r7, #16]
 80103d8:	f7f6 fda2 	bl	8006f20 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 80103dc:	89fb      	ldrh	r3, [r7, #14]
 80103de:	4619      	mov	r1, r3
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f7f7 fd0f 	bl	8007e04 <tcp_recved>
 80103e6:	e007      	b.n	80103f8 <tcp_server_send+0xac>
   }
   else if(wr_err == ERR_MEM)
 80103e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f0:	d102      	bne.n	80103f8 <tcp_server_send+0xac>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80103f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10b      	bne.n	8010418 <tcp_server_send+0xcc>
         (es->p != NULL) &&
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8010404:	2b00      	cmp	r3, #0
 8010406:	d007      	beq.n	8010418 <tcp_server_send+0xcc>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	895a      	ldrh	r2, [r3, #10]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8010414:	429a      	cmp	r2, r3
 8010416:	d9a1      	bls.n	801035c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8010418:	bf00      	nop
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 801042a:	2100      	movs	r1, #0
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7f8 fbc7 	bl	8008bc0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8010432:	2100      	movs	r1, #0
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7f8 fbf7 	bl	8008c28 <tcp_sent>
  tcp_recv(tpcb, NULL);
 801043a:	2100      	movs	r1, #0
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7f8 fbd1 	bl	8008be4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8010442:	2100      	movs	r1, #0
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7f8 fc11 	bl	8008c6c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 801044a:	2200      	movs	r2, #0
 801044c:	2100      	movs	r1, #0
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7f8 fc46 	bl	8008ce0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 801045a:	6838      	ldr	r0, [r7, #0]
 801045c:	f7f5 fc2e 	bl	8005cbc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7f7 fa0b 	bl	800787c <tcp_close>
}
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <snake_control>:
/* Needed for getch - no*/

static uint32_t gPrgCycle = 0;

void snake_control(snake_t* snake)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
	platform_get_control(snake);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fc10 	bl	8010c9c <platform_get_control>
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <snake_init>:
{
	platform_init();
}

void snake_init(snake_t* snake)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
	snake->length = SNAKE_INIT_LNG;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2203      	movs	r2, #3
 8010490:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	snake->direction = PAUSE;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2250      	movs	r2, #80	; 0x50
 8010498:	701a      	strb	r2, [r3, #0]
	snake->state = PLAYING;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	snake->ghost.x = INVALID_COORDS;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104a8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	snake->ghost.y = INVALID_COORDS;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b2:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

	memset(&snake->body[0], 0, SNAKE_MAX_LNG*sizeof(coord_t));
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3302      	adds	r3, #2
 80104ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80104be:	2100      	movs	r1, #0
 80104c0:	4618      	mov	r0, r3
 80104c2:	f002 f827 	bl	8012514 <memset>

	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 80104c6:	2300      	movs	r3, #0
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	e012      	b.n	80104f2 <snake_init+0x6e>
	{
		snake->body[idx].x = SNAKE_INIT_X_CORD + idx;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	3301      	adds	r3, #1
 80104d2:	b299      	uxth	r1, r3
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	4413      	add	r3, r2
 80104dc:	460a      	mov	r2, r1
 80104de:	805a      	strh	r2, [r3, #2]
		snake->body[idx].y = SNAKE_INIT_Y_CORD;
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4413      	add	r3, r2
 80104e8:	220a      	movs	r2, #10
 80104ea:	809a      	strh	r2, [r3, #4]
	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3301      	adds	r3, #1
 80104f0:	60fb      	str	r3, [r7, #12]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	dde9      	ble.n	80104cc <snake_init+0x48>
	}

	platform_refresh_hw();
 80104f8:	f000 fafa 	bl	8010af0 <platform_refresh_hw>

}
 80104fc:	bf00      	nop
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <snake_display>:

void snake_display(snake_t* snake)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
	if (INVALID_COORDS != snake->ghost.x && INVALID_COORDS != snake->ghost.y)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8010512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010516:	4293      	cmp	r3, r2
 8010518:	d010      	beq.n	801053c <snake_display+0x38>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010524:	4293      	cmp	r3, r2
 8010526:	d009      	beq.n	801053c <snake_display+0x38>
	{
		platform_eraseCell(snake->ghost.x, snake->ghost.y);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010534:	4619      	mov	r1, r3
 8010536:	4610      	mov	r0, r2
 8010538:	f000 fb27 	bl	8010b8a <platform_eraseCell>
	}
	for (int idx = 0; idx < snake->length; idx++)
 801053c:	2300      	movs	r3, #0
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	e00f      	b.n	8010562 <snake_display+0x5e>
	{
		platform_drawCell(snake->body[idx].x, snake->body[idx].y);
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	4413      	add	r3, r2
 801054a:	8858      	ldrh	r0, [r3, #2]
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	4413      	add	r3, r2
 8010554:	889b      	ldrh	r3, [r3, #4]
 8010556:	4619      	mov	r1, r3
 8010558:	f000 fad1 	bl	8010afe <platform_drawCell>
	for (int idx = 0; idx < snake->length; idx++)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3301      	adds	r3, #1
 8010560:	60fb      	str	r3, [r7, #12]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010568:	461a      	mov	r2, r3
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	4293      	cmp	r3, r2
 801056e:	dbe8      	blt.n	8010542 <snake_display+0x3e>
	}
}
 8010570:	bf00      	nop
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
	...

0801057c <snake_move>:
void snake_diplay_borders(void)
{
}

void snake_move(snake_t* snake)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b086      	sub	sp, #24
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
	if (NULL == snake || PAUSE == snake->direction)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 8196 	beq.w	80108b8 <snake_move+0x33c>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2b50      	cmp	r3, #80	; 0x50
 8010592:	f000 8191 	beq.w	80108b8 <snake_move+0x33c>
	{
		return;
	}
	snake->ghost = snake->body[0];
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 801059e:	3202      	adds	r2, #2
 80105a0:	6812      	ldr	r2, [r2, #0]
 80105a2:	601a      	str	r2, [r3, #0]
	memcpy(&snake->body[0], &snake->body[1], sizeof(coord_t) * (snake->length - 1));
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	1c98      	adds	r0, r3, #2
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	1d99      	adds	r1, r3, #6
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80105b2:	3b01      	subs	r3, #1
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	461a      	mov	r2, r3
 80105b8:	f001 ff9e 	bl	80124f8 <memcpy>

	switch (snake->direction)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	3b41      	subs	r3, #65	; 0x41
 80105c2:	2b16      	cmp	r3, #22
 80105c4:	f200 816e 	bhi.w	80108a4 <snake_move+0x328>
 80105c8:	a201      	add	r2, pc, #4	; (adr r2, 80105d0 <snake_move+0x54>)
 80105ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ce:	bf00      	nop
 80105d0:	08010807 	.word	0x08010807
 80105d4:	080108a5 	.word	0x080108a5
 80105d8:	080108a5 	.word	0x080108a5
 80105dc:	08010769 	.word	0x08010769
 80105e0:	080108a5 	.word	0x080108a5
 80105e4:	080108a5 	.word	0x080108a5
 80105e8:	080108a5 	.word	0x080108a5
 80105ec:	080108a5 	.word	0x080108a5
 80105f0:	080108a5 	.word	0x080108a5
 80105f4:	080108a5 	.word	0x080108a5
 80105f8:	080108a5 	.word	0x080108a5
 80105fc:	080108a5 	.word	0x080108a5
 8010600:	080108a5 	.word	0x080108a5
 8010604:	080108a5 	.word	0x080108a5
 8010608:	080108a5 	.word	0x080108a5
 801060c:	080108a5 	.word	0x080108a5
 8010610:	080108a5 	.word	0x080108a5
 8010614:	080108a5 	.word	0x080108a5
 8010618:	080106cb 	.word	0x080106cb
 801061c:	080108a5 	.word	0x080108a5
 8010620:	080108a5 	.word	0x080108a5
 8010624:	080108a5 	.word	0x080108a5
 8010628:	0801062d 	.word	0x0801062d
	{
	case UP:
	{
		if ((snake->body[snake->length - 1].y - 1) == ARENA_MIN_Y)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010632:	3b01      	subs	r3, #1
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4413      	add	r3, r2
 801063a:	889b      	ldrh	r3, [r3, #4]
 801063c:	2b01      	cmp	r3, #1
 801063e:	d104      	bne.n	801064a <snake_move+0xce>
		{
			snake->state = CRASHED;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010648:	e12c      	b.n	80108a4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 801064a:	2300      	movs	r3, #0
 801064c:	617b      	str	r3, [r7, #20]
 801064e:	e025      	b.n	801069c <snake_move+0x120>
		{
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010656:	3b01      	subs	r3, #1
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	889b      	ldrh	r3, [r3, #4]
 8010660:	1e5a      	subs	r2, r3, #1
 8010662:	6879      	ldr	r1, [r7, #4]
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	440b      	add	r3, r1
 801066a:	889b      	ldrh	r3, [r3, #4]
 801066c:	429a      	cmp	r2, r3
 801066e:	d112      	bne.n	8010696 <snake_move+0x11a>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010676:	3b01      	subs	r3, #1
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	4413      	add	r3, r2
 801067e:	885a      	ldrh	r2, [r3, #2]
 8010680:	6879      	ldr	r1, [r7, #4]
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	440b      	add	r3, r1
 8010688:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 801068a:	429a      	cmp	r2, r3
 801068c:	d103      	bne.n	8010696 <snake_move+0x11a>
			{
				snake->state = CRASHED;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2201      	movs	r2, #1
 8010692:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	3301      	adds	r3, #1
 801069a:	617b      	str	r3, [r7, #20]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80106a2:	461a      	mov	r2, r3
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	4293      	cmp	r3, r2
 80106a8:	dbd2      	blt.n	8010650 <snake_move+0xd4>
			}
		}
		snake->body[snake->length - 1].y--;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80106b0:	1e5a      	subs	r2, r3, #1
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	0093      	lsls	r3, r2, #2
 80106b6:	440b      	add	r3, r1
 80106b8:	889b      	ldrh	r3, [r3, #4]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	b298      	uxth	r0, r3
 80106be:	6879      	ldr	r1, [r7, #4]
 80106c0:	0093      	lsls	r3, r2, #2
 80106c2:	440b      	add	r3, r1
 80106c4:	4602      	mov	r2, r0
 80106c6:	809a      	strh	r2, [r3, #4]
	}
	break;
 80106c8:	e0ec      	b.n	80108a4 <snake_move+0x328>
	case DOWN:
	{
		if ((snake->body[snake->length - 1].y + 1) == ARENA_MAX_Y)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80106d0:	3b01      	subs	r3, #1
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	4413      	add	r3, r2
 80106d8:	889b      	ldrh	r3, [r3, #4]
 80106da:	2b14      	cmp	r3, #20
 80106dc:	d104      	bne.n	80106e8 <snake_move+0x16c>
		{
			snake->state = CRASHED;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2201      	movs	r2, #1
 80106e2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 80106e6:	e0dd      	b.n	80108a4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 80106e8:	2300      	movs	r3, #0
 80106ea:	613b      	str	r3, [r7, #16]
 80106ec:	e025      	b.n	801073a <snake_move+0x1be>
		{
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80106f4:	3b01      	subs	r3, #1
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	889b      	ldrh	r3, [r3, #4]
 80106fe:	1c5a      	adds	r2, r3, #1
 8010700:	6879      	ldr	r1, [r7, #4]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	440b      	add	r3, r1
 8010708:	889b      	ldrh	r3, [r3, #4]
 801070a:	429a      	cmp	r2, r3
 801070c:	d112      	bne.n	8010734 <snake_move+0x1b8>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010714:	3b01      	subs	r3, #1
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	885a      	ldrh	r2, [r3, #2]
 801071e:	6879      	ldr	r1, [r7, #4]
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	440b      	add	r3, r1
 8010726:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8010728:	429a      	cmp	r2, r3
 801072a:	d103      	bne.n	8010734 <snake_move+0x1b8>
			{
				snake->state = CRASHED;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2201      	movs	r2, #1
 8010730:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	3301      	adds	r3, #1
 8010738:	613b      	str	r3, [r7, #16]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010740:	461a      	mov	r2, r3
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	4293      	cmp	r3, r2
 8010746:	dbd2      	blt.n	80106ee <snake_move+0x172>
			}
		}

		snake->body[snake->length - 1].y++;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801074e:	1e5a      	subs	r2, r3, #1
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	0093      	lsls	r3, r2, #2
 8010754:	440b      	add	r3, r1
 8010756:	889b      	ldrh	r3, [r3, #4]
 8010758:	3301      	adds	r3, #1
 801075a:	b298      	uxth	r0, r3
 801075c:	6879      	ldr	r1, [r7, #4]
 801075e:	0093      	lsls	r3, r2, #2
 8010760:	440b      	add	r3, r1
 8010762:	4602      	mov	r2, r0
 8010764:	809a      	strh	r2, [r3, #4]
	}
	break;
 8010766:	e09d      	b.n	80108a4 <snake_move+0x328>
	case RIGHT:
	{
		if ((snake->body[snake->length - 1].x + 1) == ARENA_MAX_X)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801076e:	3b01      	subs	r3, #1
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	885b      	ldrh	r3, [r3, #2]
 8010778:	2b0d      	cmp	r3, #13
 801077a:	d104      	bne.n	8010786 <snake_move+0x20a>
		{
			snake->state = CRASHED;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010784:	e08e      	b.n	80108a4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8010786:	2300      	movs	r3, #0
 8010788:	60fb      	str	r3, [r7, #12]
 801078a:	e025      	b.n	80107d8 <snake_move+0x25c>
		{
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010792:	3b01      	subs	r3, #1
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4413      	add	r3, r2
 801079a:	885b      	ldrh	r3, [r3, #2]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	885b      	ldrh	r3, [r3, #2]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d112      	bne.n	80107d2 <snake_move+0x256>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80107b2:	3b01      	subs	r3, #1
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	889a      	ldrh	r2, [r3, #4]
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	440b      	add	r3, r1
 80107c4:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d103      	bne.n	80107d2 <snake_move+0x256>
			{
				snake->state = CRASHED;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3301      	adds	r3, #1
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80107de:	461a      	mov	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4293      	cmp	r3, r2
 80107e4:	dbd2      	blt.n	801078c <snake_move+0x210>
			}
		}
		snake->body[snake->length - 1].x++;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80107ec:	1e5a      	subs	r2, r3, #1
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	0093      	lsls	r3, r2, #2
 80107f2:	440b      	add	r3, r1
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	3301      	adds	r3, #1
 80107f8:	b298      	uxth	r0, r3
 80107fa:	6879      	ldr	r1, [r7, #4]
 80107fc:	0093      	lsls	r3, r2, #2
 80107fe:	440b      	add	r3, r1
 8010800:	4602      	mov	r2, r0
 8010802:	805a      	strh	r2, [r3, #2]
	}
	break;
 8010804:	e04e      	b.n	80108a4 <snake_move+0x328>
	case LEFT:
	{
		if ((snake->body[snake->length - 1].x - 1) == ARENA_MIN_X)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801080c:	3b01      	subs	r3, #1
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	885b      	ldrh	r3, [r3, #2]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d104      	bne.n	8010824 <snake_move+0x2a8>
		{
			snake->state = CRASHED;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010822:	e03f      	b.n	80108a4 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8010824:	2300      	movs	r3, #0
 8010826:	60bb      	str	r3, [r7, #8]
 8010828:	e025      	b.n	8010876 <snake_move+0x2fa>
		{
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010830:	3b01      	subs	r3, #1
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	885b      	ldrh	r3, [r3, #2]
 801083a:	1e5a      	subs	r2, r3, #1
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	440b      	add	r3, r1
 8010844:	885b      	ldrh	r3, [r3, #2]
 8010846:	429a      	cmp	r2, r3
 8010848:	d112      	bne.n	8010870 <snake_move+0x2f4>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010850:	3b01      	subs	r3, #1
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	4413      	add	r3, r2
 8010858:	889a      	ldrh	r2, [r3, #4]
 801085a:	6879      	ldr	r1, [r7, #4]
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	440b      	add	r3, r1
 8010862:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8010864:	429a      	cmp	r2, r3
 8010866:	d103      	bne.n	8010870 <snake_move+0x2f4>
			{
				snake->state = CRASHED;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2201      	movs	r2, #1
 801086c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	3301      	adds	r3, #1
 8010874:	60bb      	str	r3, [r7, #8]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801087c:	461a      	mov	r2, r3
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	4293      	cmp	r3, r2
 8010882:	dbd2      	blt.n	801082a <snake_move+0x2ae>
			}
		}
		snake->body[snake->length - 1].x--;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801088a:	1e5a      	subs	r2, r3, #1
 801088c:	6879      	ldr	r1, [r7, #4]
 801088e:	0093      	lsls	r3, r2, #2
 8010890:	440b      	add	r3, r1
 8010892:	885b      	ldrh	r3, [r3, #2]
 8010894:	3b01      	subs	r3, #1
 8010896:	b298      	uxth	r0, r3
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	0093      	lsls	r3, r2, #2
 801089c:	440b      	add	r3, r1
 801089e:	4602      	mov	r2, r0
 80108a0:	805a      	strh	r2, [r3, #2]
	}
	break;
 80108a2:	bf00      	nop
	default:
	{
	}
	}

	if (snake->length == SNAKE_WON_LIMIT)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80108aa:	2b63      	cmp	r3, #99	; 0x63
 80108ac:	d105      	bne.n	80108ba <snake_move+0x33e>
	{
		snake->state = WON;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2202      	movs	r2, #2
 80108b2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80108b6:	e000      	b.n	80108ba <snake_move+0x33e>
		return;
 80108b8:	bf00      	nop
	}
}
 80108ba:	3718      	adds	r7, #24
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <generate_food>:

uint16_t generate_food(snake_t* snake, food_t *food)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b086      	sub	sp, #24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
	uint16_t isInvalid = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	82fb      	strh	r3, [r7, #22]
	uint16_t iter = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	81fb      	strh	r3, [r7, #14]

	do
	{
		food->coord.x = (uint16_t)((platform_randomize() % (FOOD_MAX_X - FOOD_MIN_X + 1)) + FOOD_MIN_X);
 80108d2:	f000 f9b5 	bl	8010c40 <platform_randomize>
 80108d6:	4603      	mov	r3, r0
 80108d8:	4619      	mov	r1, r3
 80108da:	4b2e      	ldr	r3, [pc, #184]	; (8010994 <generate_food+0xd4>)
 80108dc:	fba3 2301 	umull	r2, r3, r3, r1
 80108e0:	089a      	lsrs	r2, r3, #2
 80108e2:	4613      	mov	r3, r2
 80108e4:	005b      	lsls	r3, r3, #1
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4413      	add	r3, r2
 80108ec:	1acb      	subs	r3, r1, r3
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	3301      	adds	r3, #1
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	801a      	strh	r2, [r3, #0]
		food->coord.y = (uint16_t)((platform_randomize() % (FOOD_MAX_Y - FOOD_MIN_Y + 1)) + FOOD_MIN_Y);
 80108f8:	f000 f9a2 	bl	8010c40 <platform_randomize>
 80108fc:	4603      	mov	r3, r0
 80108fe:	461a      	mov	r2, r3
 8010900:	4b25      	ldr	r3, [pc, #148]	; (8010998 <generate_food+0xd8>)
 8010902:	fba3 1302 	umull	r1, r3, r3, r2
 8010906:	0919      	lsrs	r1, r3, #4
 8010908:	460b      	mov	r3, r1
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	440b      	add	r3, r1
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	b29b      	uxth	r3, r3
 8010914:	3301      	adds	r3, #1
 8010916:	b29a      	uxth	r2, r3
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	805a      	strh	r2, [r3, #2]

		for (int idx = 0; idx < snake->length; idx++)
 801091c:	2300      	movs	r3, #0
 801091e:	613b      	str	r3, [r7, #16]
 8010920:	e018      	b.n	8010954 <generate_food+0x94>
		{
			if ((snake->body[idx].x == food->coord.x) &&
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	4413      	add	r3, r2
 801092a:	885a      	ldrh	r2, [r3, #2]
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	d10c      	bne.n	801094e <generate_food+0x8e>
				(snake->body[idx].y == food->coord.y))
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	4413      	add	r3, r2
 801093c:	889a      	ldrh	r2, [r3, #4]
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	885b      	ldrh	r3, [r3, #2]
			if ((snake->body[idx].x == food->coord.x) &&
 8010942:	429a      	cmp	r2, r3
 8010944:	d103      	bne.n	801094e <generate_food+0x8e>
			{
				isInvalid = GENERAL_ERROR;
 8010946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801094a:	82fb      	strh	r3, [r7, #22]
				break;
 801094c:	e009      	b.n	8010962 <generate_food+0xa2>
		for (int idx = 0; idx < snake->length; idx++)
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	3301      	adds	r3, #1
 8010952:	613b      	str	r3, [r7, #16]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801095a:	461a      	mov	r2, r3
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	4293      	cmp	r3, r2
 8010960:	dbdf      	blt.n	8010922 <generate_food+0x62>
			}
		}
		if (iter > FOOD_MAX_ITER)
 8010962:	89fb      	ldrh	r3, [r7, #14]
 8010964:	2b64      	cmp	r3, #100	; 0x64
 8010966:	d803      	bhi.n	8010970 <generate_food+0xb0>
		{
			break;
		}

	} while (isInvalid);
 8010968:	8afb      	ldrh	r3, [r7, #22]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1b1      	bne.n	80108d2 <generate_food+0x12>
 801096e:	e000      	b.n	8010972 <generate_food+0xb2>
			break;
 8010970:	bf00      	nop

	if (!isInvalid)
 8010972:	8afb      	ldrh	r3, [r7, #22]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d107      	bne.n	8010988 <generate_food+0xc8>
	{
		platform_drawFood(food->coord.x, food->coord.y);
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	881a      	ldrh	r2, [r3, #0]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	885b      	ldrh	r3, [r3, #2]
 8010980:	4619      	mov	r1, r3
 8010982:	4610      	mov	r0, r2
 8010984:	f000 f929 	bl	8010bda <platform_drawFood>
	}

	return isInvalid;
 8010988:	8afb      	ldrh	r3, [r7, #22]

}
 801098a:	4618      	mov	r0, r3
 801098c:	3718      	adds	r7, #24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	4ec4ec4f 	.word	0x4ec4ec4f
 8010998:	cccccccd 	.word	0xcccccccd

0801099c <snake_place_food>:


void snake_place_food(snake_t* snake, food_t* food, uint32_t tick)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
	if (0 == gPrgCycle % 10 || food->time_elapsed)
 80109a8:	4b17      	ldr	r3, [pc, #92]	; (8010a08 <snake_place_food+0x6c>)
 80109aa:	6819      	ldr	r1, [r3, #0]
 80109ac:	4b17      	ldr	r3, [pc, #92]	; (8010a0c <snake_place_food+0x70>)
 80109ae:	fba3 2301 	umull	r2, r3, r3, r1
 80109b2:	08da      	lsrs	r2, r3, #3
 80109b4:	4613      	mov	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	1aca      	subs	r2, r1, r3
 80109be:	2a00      	cmp	r2, #0
 80109c0:	d003      	beq.n	80109ca <snake_place_food+0x2e>
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	88db      	ldrh	r3, [r3, #6]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d01a      	beq.n	8010a00 <snake_place_food+0x64>
	{
		if (food->state != PLACED)
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	791b      	ldrb	r3, [r3, #4]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d013      	beq.n	80109fa <snake_place_food+0x5e>
		{
			if (GENERAL_ERROR == generate_food(snake, food))
 80109d2:	68b9      	ldr	r1, [r7, #8]
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f7ff ff73 	bl	80108c0 <generate_food>
 80109da:	4603      	mov	r3, r0
 80109dc:	461a      	mov	r2, r3
 80109de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d102      	bne.n	80109ec <snake_place_food+0x50>
			{
				platform_fatal();
 80109e6:	f000 f94f 	bl	8010c88 <platform_fatal>
			food->time_elapsed = 1;
		}

	}

}
 80109ea:	e009      	b.n	8010a00 <snake_place_food+0x64>
				food->time_elapsed = 0;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2200      	movs	r2, #0
 80109f0:	80da      	strh	r2, [r3, #6]
				food->state = PLACED;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	2201      	movs	r2, #1
 80109f6:	711a      	strb	r2, [r3, #4]
}
 80109f8:	e002      	b.n	8010a00 <snake_place_food+0x64>
			food->time_elapsed = 1;
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2201      	movs	r2, #1
 80109fe:	80da      	strh	r2, [r3, #6]
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	20000210 	.word	0x20000210
 8010a0c:	cccccccd 	.word	0xcccccccd

08010a10 <snake_haseaten>:
void snake_haseaten(snake_t* snake, food_t* food)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b0e6      	sub	sp, #408	; 0x198
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	1d3b      	adds	r3, r7, #4
 8010a18:	6018      	str	r0, [r3, #0]
 8010a1a:	463b      	mov	r3, r7
 8010a1c:	6019      	str	r1, [r3, #0]


	if ((snake->body[snake->length - 1].x == food->coord.x)
 8010a1e:	1d3b      	adds	r3, r7, #4
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010a26:	3b01      	subs	r3, #1
 8010a28:	1d3a      	adds	r2, r7, #4
 8010a2a:	6812      	ldr	r2, [r2, #0]
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	885a      	ldrh	r2, [r3, #2]
 8010a32:	463b      	mov	r3, r7
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	881b      	ldrh	r3, [r3, #0]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d154      	bne.n	8010ae6 <snake_haseaten+0xd6>
		&& (snake->body[snake->length - 1].y == food->coord.y))
 8010a3c:	1d3b      	adds	r3, r7, #4
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010a44:	3b01      	subs	r3, #1
 8010a46:	1d3a      	adds	r2, r7, #4
 8010a48:	6812      	ldr	r2, [r2, #0]
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	4413      	add	r3, r2
 8010a4e:	889a      	ldrh	r2, [r3, #4]
 8010a50:	463b      	mov	r3, r7
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	885b      	ldrh	r3, [r3, #2]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d145      	bne.n	8010ae6 <snake_haseaten+0xd6>
	{
		/* Needed temporary copy for shifting the whole array right - for embedded*/
		coord_t tempSnake[SNAKE_MAX_LNG] = {0};
 8010a5a:	f107 0308 	add.w	r3, r7, #8
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010a64:	461a      	mov	r2, r3
 8010a66:	2100      	movs	r1, #0
 8010a68:	f001 fd54 	bl	8012514 <memset>
		memcpy(tempSnake, &(snake->body[0]), (size_t)snake->length*sizeof(coord_t));
 8010a6c:	1d3b      	adds	r3, r7, #4
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	1c99      	adds	r1, r3, #2
 8010a72:	1d3b      	adds	r3, r7, #4
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010a7a:	009a      	lsls	r2, r3, #2
 8010a7c:	f107 0308 	add.w	r3, r7, #8
 8010a80:	4618      	mov	r0, r3
 8010a82:	f001 fd39 	bl	80124f8 <memcpy>

		/* Just append the ghost to the end, increment length and disable ghost*/
		memcpy(&(snake->body[1]), tempSnake, (size_t)snake->length*sizeof(coord_t));
 8010a86:	1d3b      	adds	r3, r7, #4
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	1d98      	adds	r0, r3, #6
 8010a8c:	1d3b      	adds	r3, r7, #4
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010a94:	009a      	lsls	r2, r3, #2
 8010a96:	f107 0308 	add.w	r3, r7, #8
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	f001 fd2c 	bl	80124f8 <memcpy>
		snake->body[0] = snake->ghost;
 8010aa0:	1d3b      	adds	r3, r7, #4
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	1d3a      	adds	r2, r7, #4
 8010aa6:	6812      	ldr	r2, [r2, #0]
 8010aa8:	3302      	adds	r3, #2
 8010aaa:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8010aae:	6812      	ldr	r2, [r2, #0]
 8010ab0:	601a      	str	r2, [r3, #0]
		snake->ghost.x = INVALID_COORDS;
 8010ab2:	1d3b      	adds	r3, r7, #4
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aba:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		snake->ghost.y = INVALID_COORDS;
 8010abe:	1d3b      	adds	r3, r7, #4
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ac6:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		snake->length++;
 8010aca:	1d3b      	adds	r3, r7, #4
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	1d3b      	adds	r3, r7, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

		food->state = EATEN;
 8010ade:	463b      	mov	r3, r7
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2202      	movs	r2, #2
 8010ae4:	711a      	strb	r2, [r3, #4]
	}
}
 8010ae6:	bf00      	nop
 8010ae8:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <platform_refresh_hw>:
    tft_init(readID());
}


void platform_refresh_hw(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8010af4:	2000      	movs	r0, #0
 8010af6:	f001 f82b 	bl	8011b50 <fillScreen>
}
 8010afa:	bf00      	nop
 8010afc:	bd80      	pop	{r7, pc}

08010afe <platform_drawCell>:

void platform_drawCell(uint16_t x, uint16_t y)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b084      	sub	sp, #16
 8010b02:	af02      	add	r7, sp, #8
 8010b04:	4603      	mov	r3, r0
 8010b06:	460a      	mov	r2, r1
 8010b08:	80fb      	strh	r3, [r7, #6]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	80bb      	strh	r3, [r7, #4]

	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8010b0e:	88fb      	ldrh	r3, [r7, #6]
 8010b10:	461a      	mov	r2, r3
 8010b12:	0092      	lsls	r2, r2, #2
 8010b14:	441a      	add	r2, r3
 8010b16:	0052      	lsls	r2, r2, #1
 8010b18:	4413      	add	r3, r2
 8010b1a:	005b      	lsls	r3, r3, #1
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	3306      	adds	r3, #6
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 8010b24:	88bb      	ldrh	r3, [r7, #4]
 8010b26:	461a      	mov	r2, r3
 8010b28:	0092      	lsls	r2, r2, #2
 8010b2a:	441a      	add	r2, r3
 8010b2c:	0052      	lsls	r2, r2, #1
 8010b2e:	4413      	add	r3, r2
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	3309      	adds	r3, #9
 8010b36:	b29b      	uxth	r3, r3
	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8010b38:	b219      	sxth	r1, r3
 8010b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	2316      	movs	r3, #22
 8010b42:	2216      	movs	r2, #22
 8010b44:	f001 f959 	bl	8011dfa <drawRect>
			CELL_SIZE,
			CELL_SIZE,
			WHITE);

	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 8010b48:	88fb      	ldrh	r3, [r7, #6]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	0092      	lsls	r2, r2, #2
 8010b4e:	441a      	add	r2, r3
 8010b50:	0052      	lsls	r2, r2, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	3307      	adds	r3, #7
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y + 1,
 8010b5e:	88bb      	ldrh	r3, [r7, #4]
 8010b60:	461a      	mov	r2, r3
 8010b62:	0092      	lsls	r2, r2, #2
 8010b64:	441a      	add	r2, r3
 8010b66:	0052      	lsls	r2, r2, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	005b      	lsls	r3, r3, #1
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	330a      	adds	r3, #10
 8010b70:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 8010b72:	b219      	sxth	r1, r3
 8010b74:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	2314      	movs	r3, #20
 8010b7c:	2214      	movs	r2, #20
 8010b7e:	f001 f97d 	bl	8011e7c <fillRect>
			CELL_SIZE - 2,
			CELL_SIZE - 2,
			MAGENTA);
}
 8010b82:	bf00      	nop
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <platform_eraseCell>:

void platform_eraseCell(uint16_t x, uint16_t y)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af02      	add	r7, sp, #8
 8010b90:	4603      	mov	r3, r0
 8010b92:	460a      	mov	r2, r1
 8010b94:	80fb      	strh	r3, [r7, #6]
 8010b96:	4613      	mov	r3, r2
 8010b98:	80bb      	strh	r3, [r7, #4]
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8010b9a:	88fb      	ldrh	r3, [r7, #6]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	0092      	lsls	r2, r2, #2
 8010ba0:	441a      	add	r2, r3
 8010ba2:	0052      	lsls	r2, r2, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	005b      	lsls	r3, r3, #1
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	3306      	adds	r3, #6
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 8010bb0:	88bb      	ldrh	r3, [r7, #4]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	0092      	lsls	r2, r2, #2
 8010bb6:	441a      	add	r2, r3
 8010bb8:	0052      	lsls	r2, r2, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	3309      	adds	r3, #9
 8010bc2:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8010bc4:	b219      	sxth	r1, r3
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	2316      	movs	r3, #22
 8010bcc:	2216      	movs	r2, #22
 8010bce:	f001 f955 	bl	8011e7c <fillRect>
			CELL_SIZE,
			CELL_SIZE,
			BLACK);
}
 8010bd2:	bf00      	nop
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <platform_drawFood>:

void platform_drawFood(uint16_t x, uint16_t y)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b082      	sub	sp, #8
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	4603      	mov	r3, r0
 8010be2:	460a      	mov	r2, r1
 8010be4:	80fb      	strh	r3, [r7, #6]
 8010be6:	4613      	mov	r3, r2
 8010be8:	80bb      	strh	r3, [r7, #4]
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 8010bea:	88fb      	ldrh	r3, [r7, #6]
 8010bec:	461a      	mov	r2, r3
 8010bee:	0092      	lsls	r2, r2, #2
 8010bf0:	441a      	add	r2, r3
 8010bf2:	0052      	lsls	r2, r2, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	3311      	adds	r3, #17
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	b218      	sxth	r0, r3
			   ARENA_OFFSET_Y + CELL_SIZE*y + CELL_SIZE/2,
 8010c00:	88bb      	ldrh	r3, [r7, #4]
 8010c02:	461a      	mov	r2, r3
 8010c04:	0092      	lsls	r2, r2, #2
 8010c06:	441a      	add	r2, r3
 8010c08:	0052      	lsls	r2, r2, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	3314      	adds	r3, #20
 8010c12:	b29b      	uxth	r3, r3
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 8010c14:	b219      	sxth	r1, r3
 8010c16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8010c1a:	2207      	movs	r2, #7
 8010c1c:	f000 ffef 	bl	8011bfe <fillCircle>
			   CELL_SIZE/3,
			   GREEN);
}
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <platform_showInformal>:
	platform_control_init();
	platform_display_init();
}

void platform_showInformal(char* str, uint16_t length)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	460b      	mov	r3, r1
 8010c32:	807b      	strh	r3, [r7, #2]
}
 8010c34:	bf00      	nop
 8010c36:	370c      	adds	r7, #12
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <platform_randomize>:

uint16_t platform_randomize(void)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
  uint16_t lsb;

  lsb = gRandSeed & 1;
 8010c46:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <platform_randomize+0x40>)
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	80fb      	strh	r3, [r7, #6]
  gRandSeed >>= 1;
 8010c50:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <platform_randomize+0x40>)
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	085b      	lsrs	r3, r3, #1
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	4b09      	ldr	r3, [pc, #36]	; (8010c80 <platform_randomize+0x40>)
 8010c5a:	801a      	strh	r2, [r3, #0]
  if (lsb == 1)
 8010c5c:	88fb      	ldrh	r3, [r7, #6]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d106      	bne.n	8010c70 <platform_randomize+0x30>
  {
	  gRandSeed ^= 0xB400u;
 8010c62:	4b07      	ldr	r3, [pc, #28]	; (8010c80 <platform_randomize+0x40>)
 8010c64:	881a      	ldrh	r2, [r3, #0]
 8010c66:	4b07      	ldr	r3, [pc, #28]	; (8010c84 <platform_randomize+0x44>)
 8010c68:	4053      	eors	r3, r2
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	4b04      	ldr	r3, [pc, #16]	; (8010c80 <platform_randomize+0x40>)
 8010c6e:	801a      	strh	r2, [r3, #0]
  }

  return gRandSeed;
 8010c70:	4b03      	ldr	r3, [pc, #12]	; (8010c80 <platform_randomize+0x40>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr
 8010c80:	20000214 	.word	0x20000214
 8010c84:	ffffb400 	.word	0xffffb400

08010c88 <platform_fatal>:
{
	return;
}

void platform_fatal(void)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	af00      	add	r7, sp, #0

	platform_showInformal("FatalError\n", strlen("FatalError\n"));
 8010c8c:	210b      	movs	r1, #11
 8010c8e:	4802      	ldr	r0, [pc, #8]	; (8010c98 <platform_fatal+0x10>)
 8010c90:	f7ff ffca 	bl	8010c28 <platform_showInformal>
	while (1);
 8010c94:	e7fe      	b.n	8010c94 <platform_fatal+0xc>
 8010c96:	bf00      	nop
 8010c98:	080160b8 	.word	0x080160b8

08010c9c <platform_get_control>:
}

void platform_get_control(snake_t * snake)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
	snake_dir_e direction = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	73fb      	strb	r3, [r7, #15]
	static snake_dir_e prev_direction = RIGHT;

	direction = (snake_dir_e)extKeyBoardButton;
 8010ca8:	4b30      	ldr	r3, [pc, #192]	; (8010d6c <platform_get_control+0xd0>)
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	73fb      	strb	r3, [r7, #15]

	if (direction == 0)
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d054      	beq.n	8010d5e <platform_get_control+0xc2>
	{
		return;
	}

	extKeyBoardButton = 0;
 8010cb4:	4b2d      	ldr	r3, [pc, #180]	; (8010d6c <platform_get_control+0xd0>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	701a      	strb	r2, [r3, #0]

	if ((direction != LEFT) && (direction != RIGHT) && (direction != UP) &&
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
 8010cbc:	2b41      	cmp	r3, #65	; 0x41
 8010cbe:	d016      	beq.n	8010cee <platform_get_control+0x52>
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	2b44      	cmp	r3, #68	; 0x44
 8010cc4:	d013      	beq.n	8010cee <platform_get_control+0x52>
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	2b57      	cmp	r3, #87	; 0x57
 8010cca:	d010      	beq.n	8010cee <platform_get_control+0x52>
 8010ccc:	7bfb      	ldrb	r3, [r7, #15]
 8010cce:	2b53      	cmp	r3, #83	; 0x53
 8010cd0:	d00d      	beq.n	8010cee <platform_get_control+0x52>
		(direction != DOWN) && (direction != PAUSE) && (direction != QUIT))
 8010cd2:	7bfb      	ldrb	r3, [r7, #15]
 8010cd4:	2b50      	cmp	r3, #80	; 0x50
 8010cd6:	d00a      	beq.n	8010cee <platform_get_control+0x52>
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
 8010cda:	2b51      	cmp	r3, #81	; 0x51
 8010cdc:	d007      	beq.n	8010cee <platform_get_control+0x52>
	{
		prev_direction = snake->direction;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	781a      	ldrb	r2, [r3, #0]
 8010ce2:	4b23      	ldr	r3, [pc, #140]	; (8010d70 <platform_get_control+0xd4>)
 8010ce4:	701a      	strb	r2, [r3, #0]
		snake->direction = PAUSE;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2250      	movs	r2, #80	; 0x50
 8010cea:	701a      	strb	r2, [r3, #0]
 8010cec:	e038      	b.n	8010d60 <platform_get_control+0xc4>
	}
	else
	{
		if (direction == PAUSE)
 8010cee:	7bfb      	ldrb	r3, [r7, #15]
 8010cf0:	2b50      	cmp	r3, #80	; 0x50
 8010cf2:	d110      	bne.n	8010d16 <platform_get_control+0x7a>
		{
			if (snake->direction != PAUSE)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	2b50      	cmp	r3, #80	; 0x50
 8010cfa:	d007      	beq.n	8010d0c <platform_get_control+0x70>
			{
				prev_direction = snake->direction;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	781a      	ldrb	r2, [r3, #0]
 8010d00:	4b1b      	ldr	r3, [pc, #108]	; (8010d70 <platform_get_control+0xd4>)
 8010d02:	701a      	strb	r2, [r3, #0]
				snake->direction = PAUSE;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2250      	movs	r2, #80	; 0x50
 8010d08:	701a      	strb	r2, [r3, #0]
 8010d0a:	e029      	b.n	8010d60 <platform_get_control+0xc4>
			}
			else
			{
				snake->direction = prev_direction;
 8010d0c:	4b18      	ldr	r3, [pc, #96]	; (8010d70 <platform_get_control+0xd4>)
 8010d0e:	781a      	ldrb	r2, [r3, #0]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	701a      	strb	r2, [r3, #0]
 8010d14:	e024      	b.n	8010d60 <platform_get_control+0xc4>
			}
		}

		else
		{
			if ((snake->direction != PAUSE) &&
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	2b50      	cmp	r3, #80	; 0x50
 8010d1c:	d020      	beq.n	8010d60 <platform_get_control+0xc4>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	781b      	ldrb	r3, [r3, #0]
			if ((snake->direction != PAUSE) &&
 8010d22:	2b41      	cmp	r3, #65	; 0x41
 8010d24:	d102      	bne.n	8010d2c <platform_get_control+0x90>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8010d26:	7bfb      	ldrb	r3, [r7, #15]
 8010d28:	2b44      	cmp	r3, #68	; 0x44
 8010d2a:	d019      	beq.n	8010d60 <platform_get_control+0xc4>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == LEFT && direction == RIGHT) &&
 8010d30:	2b44      	cmp	r3, #68	; 0x44
 8010d32:	d102      	bne.n	8010d3a <platform_get_control+0x9e>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	2b41      	cmp	r3, #65	; 0x41
 8010d38:	d012      	beq.n	8010d60 <platform_get_control+0xc4>
				!(snake->direction == UP && direction == DOWN) &&
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == RIGHT && direction == LEFT) &&
 8010d3e:	2b57      	cmp	r3, #87	; 0x57
 8010d40:	d102      	bne.n	8010d48 <platform_get_control+0xac>
				!(snake->direction == UP && direction == DOWN) &&
 8010d42:	7bfb      	ldrb	r3, [r7, #15]
 8010d44:	2b53      	cmp	r3, #83	; 0x53
 8010d46:	d00b      	beq.n	8010d60 <platform_get_control+0xc4>
				!(snake->direction == DOWN && direction == UP))
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == UP && direction == DOWN) &&
 8010d4c:	2b53      	cmp	r3, #83	; 0x53
 8010d4e:	d102      	bne.n	8010d56 <platform_get_control+0xba>
				!(snake->direction == DOWN && direction == UP))
 8010d50:	7bfb      	ldrb	r3, [r7, #15]
 8010d52:	2b57      	cmp	r3, #87	; 0x57
 8010d54:	d004      	beq.n	8010d60 <platform_get_control+0xc4>
			{
				snake->direction = direction;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	7bfa      	ldrb	r2, [r7, #15]
 8010d5a:	701a      	strb	r2, [r3, #0]
 8010d5c:	e000      	b.n	8010d60 <platform_get_control+0xc4>
		return;
 8010d5e:	bf00      	nop
			}
		}
	}
}
 8010d60:	3714      	adds	r7, #20
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	20006988 	.word	0x20006988
 8010d70:	20000012 	.word	0x20000012

08010d74 <PIN_LOW>:
	}

}

void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8010d80:	887b      	ldrh	r3, [r7, #2]
 8010d82:	2200      	movs	r2, #0
 8010d84:	4619      	mov	r1, r3
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7f1 ff52 	bl	8002c30 <HAL_GPIO_WritePin>
}
 8010d8c:	bf00      	nop
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8010da0:	887b      	ldrh	r3, [r7, #2]
 8010da2:	2201      	movs	r2, #1
 8010da4:	4619      	mov	r1, r3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7f1 ff42 	bl	8002c30 <HAL_GPIO_WritePin>
}
 8010dac:	bf00      	nop
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8010db4:	b480      	push	{r7}
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	4b03      	ldr	r3, [pc, #12]	; (8010dc8 <width+0x14>)
 8010dba:	881b      	ldrh	r3, [r3, #0]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	20000014 	.word	0x20000014

08010dcc <height>:

uint16_t height(void)
{ return _height; }
 8010dcc:	b480      	push	{r7}
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	4b03      	ldr	r3, [pc, #12]	; (8010de0 <height+0x14>)
 8010dd2:	881b      	ldrh	r3, [r3, #0]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20000016 	.word	0x20000016

08010de4 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8010dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010df2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010df6:	b21a      	sxth	r2, r3
 8010df8:	88fb      	ldrh	r3, [r7, #6]
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	b21b      	sxth	r3, r3
 8010dfe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e02:	b21b      	sxth	r3, r3
 8010e04:	4313      	orrs	r3, r2
 8010e06:	b21a      	sxth	r2, r3
 8010e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	b21b      	sxth	r3, r3
 8010e12:	4313      	orrs	r3, r2
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	b29b      	uxth	r3, r3
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr

08010e24 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	460a      	mov	r2, r1
 8010e2e:	80fb      	strh	r3, [r7, #6]
 8010e30:	4613      	mov	r3, r2
 8010e32:	80bb      	strh	r3, [r7, #4]
 8010e34:	88ba      	ldrh	r2, [r7, #4]
 8010e36:	88fb      	ldrh	r3, [r7, #6]
 8010e38:	4611      	mov	r1, r2
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 f804 	bl	8010e48 <writecmddata>
 8010e40:	bf00      	nop
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <writecmddata>:
    write8(b);
}


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	4603      	mov	r3, r0
 8010e50:	460a      	mov	r2, r1
 8010e52:	80fb      	strh	r3, [r7, #6]
 8010e54:	4613      	mov	r3, r2
 8010e56:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8010e58:	2108      	movs	r1, #8
 8010e5a:	48c3      	ldr	r0, [pc, #780]	; (8011168 <writecmddata+0x320>)
 8010e5c:	f7ff ff8a 	bl	8010d74 <PIN_LOW>
    WriteCmd(cmd);
 8010e60:	2120      	movs	r1, #32
 8010e62:	48c2      	ldr	r0, [pc, #776]	; (801116c <writecmddata+0x324>)
 8010e64:	f7ff ff86 	bl	8010d74 <PIN_LOW>
 8010e68:	88fb      	ldrh	r3, [r7, #6]
 8010e6a:	0a1b      	lsrs	r3, r3, #8
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	73fb      	strb	r3, [r7, #15]
 8010e70:	88fb      	ldrh	r3, [r7, #6]
 8010e72:	73bb      	strb	r3, [r7, #14]
 8010e74:	4bbd      	ldr	r3, [pc, #756]	; (801116c <writecmddata+0x324>)
 8010e76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e7a:	619a      	str	r2, [r3, #24]
 8010e7c:	4bbc      	ldr	r3, [pc, #752]	; (8011170 <writecmddata+0x328>)
 8010e7e:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8010e82:	619a      	str	r2, [r3, #24]
 8010e84:	4bb8      	ldr	r3, [pc, #736]	; (8011168 <writecmddata+0x320>)
 8010e86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8010e8a:	619a      	str	r2, [r3, #24]
 8010e8c:	7bfb      	ldrb	r3, [r7, #15]
 8010e8e:	039b      	lsls	r3, r3, #14
 8010e90:	4ab6      	ldr	r2, [pc, #728]	; (801116c <writecmddata+0x324>)
 8010e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e96:	6193      	str	r3, [r2, #24]
 8010e98:	7bfb      	ldrb	r3, [r7, #15]
 8010e9a:	029b      	lsls	r3, r3, #10
 8010e9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010ea0:	7bfb      	ldrb	r3, [r7, #15]
 8010ea2:	019b      	lsls	r3, r3, #6
 8010ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ea8:	431a      	orrs	r2, r3
 8010eaa:	7bfb      	ldrb	r3, [r7, #15]
 8010eac:	00db      	lsls	r3, r3, #3
 8010eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010eb2:	431a      	orrs	r2, r3
 8010eb4:	4bae      	ldr	r3, [pc, #696]	; (8011170 <writecmddata+0x328>)
 8010eb6:	619a      	str	r2, [r3, #24]
 8010eb8:	7bfb      	ldrb	r3, [r7, #15]
 8010eba:	031b      	lsls	r3, r3, #12
 8010ebc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010ec0:	7bfb      	ldrb	r3, [r7, #15]
 8010ec2:	035b      	lsls	r3, r3, #13
 8010ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ec8:	431a      	orrs	r2, r3
 8010eca:	7bfb      	ldrb	r3, [r7, #15]
 8010ecc:	029b      	lsls	r3, r3, #10
 8010ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ed2:	431a      	orrs	r2, r3
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	019b      	lsls	r3, r3, #6
 8010ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010edc:	431a      	orrs	r2, r3
 8010ede:	4ba2      	ldr	r3, [pc, #648]	; (8011168 <writecmddata+0x320>)
 8010ee0:	619a      	str	r2, [r3, #24]
 8010ee2:	2101      	movs	r1, #1
 8010ee4:	48a3      	ldr	r0, [pc, #652]	; (8011174 <writecmddata+0x32c>)
 8010ee6:	f7ff ff45 	bl	8010d74 <PIN_LOW>
 8010eea:	2101      	movs	r1, #1
 8010eec:	48a1      	ldr	r0, [pc, #644]	; (8011174 <writecmddata+0x32c>)
 8010eee:	f7ff ff41 	bl	8010d74 <PIN_LOW>
 8010ef2:	2101      	movs	r1, #1
 8010ef4:	489f      	ldr	r0, [pc, #636]	; (8011174 <writecmddata+0x32c>)
 8010ef6:	f7ff ff3d 	bl	8010d74 <PIN_LOW>
 8010efa:	2101      	movs	r1, #1
 8010efc:	489d      	ldr	r0, [pc, #628]	; (8011174 <writecmddata+0x32c>)
 8010efe:	f7ff ff39 	bl	8010d74 <PIN_LOW>
 8010f02:	2101      	movs	r1, #1
 8010f04:	489b      	ldr	r0, [pc, #620]	; (8011174 <writecmddata+0x32c>)
 8010f06:	f7ff ff35 	bl	8010d74 <PIN_LOW>
 8010f0a:	2101      	movs	r1, #1
 8010f0c:	4899      	ldr	r0, [pc, #612]	; (8011174 <writecmddata+0x32c>)
 8010f0e:	f7ff ff31 	bl	8010d74 <PIN_LOW>
 8010f12:	2101      	movs	r1, #1
 8010f14:	4897      	ldr	r0, [pc, #604]	; (8011174 <writecmddata+0x32c>)
 8010f16:	f7ff ff2d 	bl	8010d74 <PIN_LOW>
 8010f1a:	2101      	movs	r1, #1
 8010f1c:	4895      	ldr	r0, [pc, #596]	; (8011174 <writecmddata+0x32c>)
 8010f1e:	f7ff ff29 	bl	8010d74 <PIN_LOW>
 8010f22:	2101      	movs	r1, #1
 8010f24:	4893      	ldr	r0, [pc, #588]	; (8011174 <writecmddata+0x32c>)
 8010f26:	f7ff ff25 	bl	8010d74 <PIN_LOW>
 8010f2a:	2101      	movs	r1, #1
 8010f2c:	4891      	ldr	r0, [pc, #580]	; (8011174 <writecmddata+0x32c>)
 8010f2e:	f7ff ff21 	bl	8010d74 <PIN_LOW>
 8010f32:	2101      	movs	r1, #1
 8010f34:	488f      	ldr	r0, [pc, #572]	; (8011174 <writecmddata+0x32c>)
 8010f36:	f7ff ff1d 	bl	8010d74 <PIN_LOW>
 8010f3a:	2101      	movs	r1, #1
 8010f3c:	488d      	ldr	r0, [pc, #564]	; (8011174 <writecmddata+0x32c>)
 8010f3e:	f7ff ff19 	bl	8010d74 <PIN_LOW>
 8010f42:	2101      	movs	r1, #1
 8010f44:	488b      	ldr	r0, [pc, #556]	; (8011174 <writecmddata+0x32c>)
 8010f46:	f7ff ff15 	bl	8010d74 <PIN_LOW>
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	4889      	ldr	r0, [pc, #548]	; (8011174 <writecmddata+0x32c>)
 8010f4e:	f7ff ff11 	bl	8010d74 <PIN_LOW>
 8010f52:	2101      	movs	r1, #1
 8010f54:	4887      	ldr	r0, [pc, #540]	; (8011174 <writecmddata+0x32c>)
 8010f56:	f7ff ff0d 	bl	8010d74 <PIN_LOW>
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	4885      	ldr	r0, [pc, #532]	; (8011174 <writecmddata+0x32c>)
 8010f5e:	f7ff ff09 	bl	8010d74 <PIN_LOW>
 8010f62:	2101      	movs	r1, #1
 8010f64:	4883      	ldr	r0, [pc, #524]	; (8011174 <writecmddata+0x32c>)
 8010f66:	f7ff ff05 	bl	8010d74 <PIN_LOW>
 8010f6a:	2101      	movs	r1, #1
 8010f6c:	4881      	ldr	r0, [pc, #516]	; (8011174 <writecmddata+0x32c>)
 8010f6e:	f7ff ff11 	bl	8010d94 <PIN_HIGH>
 8010f72:	2101      	movs	r1, #1
 8010f74:	487f      	ldr	r0, [pc, #508]	; (8011174 <writecmddata+0x32c>)
 8010f76:	f7ff ff0d 	bl	8010d94 <PIN_HIGH>
 8010f7a:	4b7c      	ldr	r3, [pc, #496]	; (801116c <writecmddata+0x324>)
 8010f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010f80:	619a      	str	r2, [r3, #24]
 8010f82:	4b7b      	ldr	r3, [pc, #492]	; (8011170 <writecmddata+0x328>)
 8010f84:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8010f88:	619a      	str	r2, [r3, #24]
 8010f8a:	4b77      	ldr	r3, [pc, #476]	; (8011168 <writecmddata+0x320>)
 8010f8c:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8010f90:	619a      	str	r2, [r3, #24]
 8010f92:	7bbb      	ldrb	r3, [r7, #14]
 8010f94:	039b      	lsls	r3, r3, #14
 8010f96:	4a75      	ldr	r2, [pc, #468]	; (801116c <writecmddata+0x324>)
 8010f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f9c:	6193      	str	r3, [r2, #24]
 8010f9e:	7bbb      	ldrb	r3, [r7, #14]
 8010fa0:	029b      	lsls	r3, r3, #10
 8010fa2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010fa6:	7bbb      	ldrb	r3, [r7, #14]
 8010fa8:	019b      	lsls	r3, r3, #6
 8010faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fae:	431a      	orrs	r2, r3
 8010fb0:	7bbb      	ldrb	r3, [r7, #14]
 8010fb2:	00db      	lsls	r3, r3, #3
 8010fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010fb8:	431a      	orrs	r2, r3
 8010fba:	4b6d      	ldr	r3, [pc, #436]	; (8011170 <writecmddata+0x328>)
 8010fbc:	619a      	str	r2, [r3, #24]
 8010fbe:	7bbb      	ldrb	r3, [r7, #14]
 8010fc0:	031b      	lsls	r3, r3, #12
 8010fc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010fc6:	7bbb      	ldrb	r3, [r7, #14]
 8010fc8:	035b      	lsls	r3, r3, #13
 8010fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fce:	431a      	orrs	r2, r3
 8010fd0:	7bbb      	ldrb	r3, [r7, #14]
 8010fd2:	029b      	lsls	r3, r3, #10
 8010fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd8:	431a      	orrs	r2, r3
 8010fda:	7bbb      	ldrb	r3, [r7, #14]
 8010fdc:	019b      	lsls	r3, r3, #6
 8010fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fe2:	431a      	orrs	r2, r3
 8010fe4:	4b60      	ldr	r3, [pc, #384]	; (8011168 <writecmddata+0x320>)
 8010fe6:	619a      	str	r2, [r3, #24]
 8010fe8:	2101      	movs	r1, #1
 8010fea:	4862      	ldr	r0, [pc, #392]	; (8011174 <writecmddata+0x32c>)
 8010fec:	f7ff fec2 	bl	8010d74 <PIN_LOW>
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4860      	ldr	r0, [pc, #384]	; (8011174 <writecmddata+0x32c>)
 8010ff4:	f7ff febe 	bl	8010d74 <PIN_LOW>
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	485e      	ldr	r0, [pc, #376]	; (8011174 <writecmddata+0x32c>)
 8010ffc:	f7ff feba 	bl	8010d74 <PIN_LOW>
 8011000:	2101      	movs	r1, #1
 8011002:	485c      	ldr	r0, [pc, #368]	; (8011174 <writecmddata+0x32c>)
 8011004:	f7ff feb6 	bl	8010d74 <PIN_LOW>
 8011008:	2101      	movs	r1, #1
 801100a:	485a      	ldr	r0, [pc, #360]	; (8011174 <writecmddata+0x32c>)
 801100c:	f7ff feb2 	bl	8010d74 <PIN_LOW>
 8011010:	2101      	movs	r1, #1
 8011012:	4858      	ldr	r0, [pc, #352]	; (8011174 <writecmddata+0x32c>)
 8011014:	f7ff feae 	bl	8010d74 <PIN_LOW>
 8011018:	2101      	movs	r1, #1
 801101a:	4856      	ldr	r0, [pc, #344]	; (8011174 <writecmddata+0x32c>)
 801101c:	f7ff feaa 	bl	8010d74 <PIN_LOW>
 8011020:	2101      	movs	r1, #1
 8011022:	4854      	ldr	r0, [pc, #336]	; (8011174 <writecmddata+0x32c>)
 8011024:	f7ff fea6 	bl	8010d74 <PIN_LOW>
 8011028:	2101      	movs	r1, #1
 801102a:	4852      	ldr	r0, [pc, #328]	; (8011174 <writecmddata+0x32c>)
 801102c:	f7ff fea2 	bl	8010d74 <PIN_LOW>
 8011030:	2101      	movs	r1, #1
 8011032:	4850      	ldr	r0, [pc, #320]	; (8011174 <writecmddata+0x32c>)
 8011034:	f7ff fe9e 	bl	8010d74 <PIN_LOW>
 8011038:	2101      	movs	r1, #1
 801103a:	484e      	ldr	r0, [pc, #312]	; (8011174 <writecmddata+0x32c>)
 801103c:	f7ff fe9a 	bl	8010d74 <PIN_LOW>
 8011040:	2101      	movs	r1, #1
 8011042:	484c      	ldr	r0, [pc, #304]	; (8011174 <writecmddata+0x32c>)
 8011044:	f7ff fe96 	bl	8010d74 <PIN_LOW>
 8011048:	2101      	movs	r1, #1
 801104a:	484a      	ldr	r0, [pc, #296]	; (8011174 <writecmddata+0x32c>)
 801104c:	f7ff fe92 	bl	8010d74 <PIN_LOW>
 8011050:	2101      	movs	r1, #1
 8011052:	4848      	ldr	r0, [pc, #288]	; (8011174 <writecmddata+0x32c>)
 8011054:	f7ff fe8e 	bl	8010d74 <PIN_LOW>
 8011058:	2101      	movs	r1, #1
 801105a:	4846      	ldr	r0, [pc, #280]	; (8011174 <writecmddata+0x32c>)
 801105c:	f7ff fe8a 	bl	8010d74 <PIN_LOW>
 8011060:	2101      	movs	r1, #1
 8011062:	4844      	ldr	r0, [pc, #272]	; (8011174 <writecmddata+0x32c>)
 8011064:	f7ff fe86 	bl	8010d74 <PIN_LOW>
 8011068:	2101      	movs	r1, #1
 801106a:	4842      	ldr	r0, [pc, #264]	; (8011174 <writecmddata+0x32c>)
 801106c:	f7ff fe82 	bl	8010d74 <PIN_LOW>
 8011070:	2101      	movs	r1, #1
 8011072:	4840      	ldr	r0, [pc, #256]	; (8011174 <writecmddata+0x32c>)
 8011074:	f7ff fe8e 	bl	8010d94 <PIN_HIGH>
 8011078:	2101      	movs	r1, #1
 801107a:	483e      	ldr	r0, [pc, #248]	; (8011174 <writecmddata+0x32c>)
 801107c:	f7ff fe8a 	bl	8010d94 <PIN_HIGH>
 8011080:	2120      	movs	r1, #32
 8011082:	483a      	ldr	r0, [pc, #232]	; (801116c <writecmddata+0x324>)
 8011084:	f7ff fe86 	bl	8010d94 <PIN_HIGH>
    WriteData(dat);
 8011088:	88bb      	ldrh	r3, [r7, #4]
 801108a:	0a1b      	lsrs	r3, r3, #8
 801108c:	b29b      	uxth	r3, r3
 801108e:	737b      	strb	r3, [r7, #13]
 8011090:	88bb      	ldrh	r3, [r7, #4]
 8011092:	733b      	strb	r3, [r7, #12]
 8011094:	4b35      	ldr	r3, [pc, #212]	; (801116c <writecmddata+0x324>)
 8011096:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801109a:	619a      	str	r2, [r3, #24]
 801109c:	4b34      	ldr	r3, [pc, #208]	; (8011170 <writecmddata+0x328>)
 801109e:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80110a2:	619a      	str	r2, [r3, #24]
 80110a4:	4b30      	ldr	r3, [pc, #192]	; (8011168 <writecmddata+0x320>)
 80110a6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80110aa:	619a      	str	r2, [r3, #24]
 80110ac:	7b7b      	ldrb	r3, [r7, #13]
 80110ae:	039b      	lsls	r3, r3, #14
 80110b0:	4a2e      	ldr	r2, [pc, #184]	; (801116c <writecmddata+0x324>)
 80110b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110b6:	6193      	str	r3, [r2, #24]
 80110b8:	7b7b      	ldrb	r3, [r7, #13]
 80110ba:	029b      	lsls	r3, r3, #10
 80110bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80110c0:	7b7b      	ldrb	r3, [r7, #13]
 80110c2:	019b      	lsls	r3, r3, #6
 80110c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110c8:	431a      	orrs	r2, r3
 80110ca:	7b7b      	ldrb	r3, [r7, #13]
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110d2:	431a      	orrs	r2, r3
 80110d4:	4b26      	ldr	r3, [pc, #152]	; (8011170 <writecmddata+0x328>)
 80110d6:	619a      	str	r2, [r3, #24]
 80110d8:	7b7b      	ldrb	r3, [r7, #13]
 80110da:	031b      	lsls	r3, r3, #12
 80110dc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80110e0:	7b7b      	ldrb	r3, [r7, #13]
 80110e2:	035b      	lsls	r3, r3, #13
 80110e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110e8:	431a      	orrs	r2, r3
 80110ea:	7b7b      	ldrb	r3, [r7, #13]
 80110ec:	029b      	lsls	r3, r3, #10
 80110ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110f2:	431a      	orrs	r2, r3
 80110f4:	7b7b      	ldrb	r3, [r7, #13]
 80110f6:	019b      	lsls	r3, r3, #6
 80110f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80110fc:	431a      	orrs	r2, r3
 80110fe:	4b1a      	ldr	r3, [pc, #104]	; (8011168 <writecmddata+0x320>)
 8011100:	619a      	str	r2, [r3, #24]
 8011102:	2101      	movs	r1, #1
 8011104:	481b      	ldr	r0, [pc, #108]	; (8011174 <writecmddata+0x32c>)
 8011106:	f7ff fe35 	bl	8010d74 <PIN_LOW>
 801110a:	2101      	movs	r1, #1
 801110c:	4819      	ldr	r0, [pc, #100]	; (8011174 <writecmddata+0x32c>)
 801110e:	f7ff fe31 	bl	8010d74 <PIN_LOW>
 8011112:	2101      	movs	r1, #1
 8011114:	4817      	ldr	r0, [pc, #92]	; (8011174 <writecmddata+0x32c>)
 8011116:	f7ff fe2d 	bl	8010d74 <PIN_LOW>
 801111a:	2101      	movs	r1, #1
 801111c:	4815      	ldr	r0, [pc, #84]	; (8011174 <writecmddata+0x32c>)
 801111e:	f7ff fe29 	bl	8010d74 <PIN_LOW>
 8011122:	2101      	movs	r1, #1
 8011124:	4813      	ldr	r0, [pc, #76]	; (8011174 <writecmddata+0x32c>)
 8011126:	f7ff fe25 	bl	8010d74 <PIN_LOW>
 801112a:	2101      	movs	r1, #1
 801112c:	4811      	ldr	r0, [pc, #68]	; (8011174 <writecmddata+0x32c>)
 801112e:	f7ff fe21 	bl	8010d74 <PIN_LOW>
 8011132:	2101      	movs	r1, #1
 8011134:	480f      	ldr	r0, [pc, #60]	; (8011174 <writecmddata+0x32c>)
 8011136:	f7ff fe1d 	bl	8010d74 <PIN_LOW>
 801113a:	2101      	movs	r1, #1
 801113c:	480d      	ldr	r0, [pc, #52]	; (8011174 <writecmddata+0x32c>)
 801113e:	f7ff fe19 	bl	8010d74 <PIN_LOW>
 8011142:	2101      	movs	r1, #1
 8011144:	480b      	ldr	r0, [pc, #44]	; (8011174 <writecmddata+0x32c>)
 8011146:	f7ff fe15 	bl	8010d74 <PIN_LOW>
 801114a:	2101      	movs	r1, #1
 801114c:	4809      	ldr	r0, [pc, #36]	; (8011174 <writecmddata+0x32c>)
 801114e:	f7ff fe11 	bl	8010d74 <PIN_LOW>
 8011152:	2101      	movs	r1, #1
 8011154:	4807      	ldr	r0, [pc, #28]	; (8011174 <writecmddata+0x32c>)
 8011156:	f7ff fe0d 	bl	8010d74 <PIN_LOW>
 801115a:	2101      	movs	r1, #1
 801115c:	4805      	ldr	r0, [pc, #20]	; (8011174 <writecmddata+0x32c>)
 801115e:	f7ff fe09 	bl	8010d74 <PIN_LOW>
 8011162:	2101      	movs	r1, #1
 8011164:	e008      	b.n	8011178 <writecmddata+0x330>
 8011166:	bf00      	nop
 8011168:	40021400 	.word	0x40021400
 801116c:	40020c00 	.word	0x40020c00
 8011170:	40021000 	.word	0x40021000
 8011174:	40020800 	.word	0x40020800
 8011178:	4852      	ldr	r0, [pc, #328]	; (80112c4 <writecmddata+0x47c>)
 801117a:	f7ff fdfb 	bl	8010d74 <PIN_LOW>
 801117e:	2101      	movs	r1, #1
 8011180:	4850      	ldr	r0, [pc, #320]	; (80112c4 <writecmddata+0x47c>)
 8011182:	f7ff fdf7 	bl	8010d74 <PIN_LOW>
 8011186:	2101      	movs	r1, #1
 8011188:	484e      	ldr	r0, [pc, #312]	; (80112c4 <writecmddata+0x47c>)
 801118a:	f7ff fdf3 	bl	8010d74 <PIN_LOW>
 801118e:	2101      	movs	r1, #1
 8011190:	484c      	ldr	r0, [pc, #304]	; (80112c4 <writecmddata+0x47c>)
 8011192:	f7ff fdef 	bl	8010d74 <PIN_LOW>
 8011196:	2101      	movs	r1, #1
 8011198:	484a      	ldr	r0, [pc, #296]	; (80112c4 <writecmddata+0x47c>)
 801119a:	f7ff fdeb 	bl	8010d74 <PIN_LOW>
 801119e:	2101      	movs	r1, #1
 80111a0:	4848      	ldr	r0, [pc, #288]	; (80112c4 <writecmddata+0x47c>)
 80111a2:	f7ff fdf7 	bl	8010d94 <PIN_HIGH>
 80111a6:	2101      	movs	r1, #1
 80111a8:	4846      	ldr	r0, [pc, #280]	; (80112c4 <writecmddata+0x47c>)
 80111aa:	f7ff fdf3 	bl	8010d94 <PIN_HIGH>
 80111ae:	4b46      	ldr	r3, [pc, #280]	; (80112c8 <writecmddata+0x480>)
 80111b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80111b4:	619a      	str	r2, [r3, #24]
 80111b6:	4b45      	ldr	r3, [pc, #276]	; (80112cc <writecmddata+0x484>)
 80111b8:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80111bc:	619a      	str	r2, [r3, #24]
 80111be:	4b44      	ldr	r3, [pc, #272]	; (80112d0 <writecmddata+0x488>)
 80111c0:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80111c4:	619a      	str	r2, [r3, #24]
 80111c6:	7b3b      	ldrb	r3, [r7, #12]
 80111c8:	039b      	lsls	r3, r3, #14
 80111ca:	4a3f      	ldr	r2, [pc, #252]	; (80112c8 <writecmddata+0x480>)
 80111cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111d0:	6193      	str	r3, [r2, #24]
 80111d2:	7b3b      	ldrb	r3, [r7, #12]
 80111d4:	029b      	lsls	r3, r3, #10
 80111d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80111da:	7b3b      	ldrb	r3, [r7, #12]
 80111dc:	019b      	lsls	r3, r3, #6
 80111de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111e2:	431a      	orrs	r2, r3
 80111e4:	7b3b      	ldrb	r3, [r7, #12]
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80111ec:	431a      	orrs	r2, r3
 80111ee:	4b37      	ldr	r3, [pc, #220]	; (80112cc <writecmddata+0x484>)
 80111f0:	619a      	str	r2, [r3, #24]
 80111f2:	7b3b      	ldrb	r3, [r7, #12]
 80111f4:	031b      	lsls	r3, r3, #12
 80111f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80111fa:	7b3b      	ldrb	r3, [r7, #12]
 80111fc:	035b      	lsls	r3, r3, #13
 80111fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011202:	431a      	orrs	r2, r3
 8011204:	7b3b      	ldrb	r3, [r7, #12]
 8011206:	029b      	lsls	r3, r3, #10
 8011208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801120c:	431a      	orrs	r2, r3
 801120e:	7b3b      	ldrb	r3, [r7, #12]
 8011210:	019b      	lsls	r3, r3, #6
 8011212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011216:	431a      	orrs	r2, r3
 8011218:	4b2d      	ldr	r3, [pc, #180]	; (80112d0 <writecmddata+0x488>)
 801121a:	619a      	str	r2, [r3, #24]
 801121c:	2101      	movs	r1, #1
 801121e:	4829      	ldr	r0, [pc, #164]	; (80112c4 <writecmddata+0x47c>)
 8011220:	f7ff fda8 	bl	8010d74 <PIN_LOW>
 8011224:	2101      	movs	r1, #1
 8011226:	4827      	ldr	r0, [pc, #156]	; (80112c4 <writecmddata+0x47c>)
 8011228:	f7ff fda4 	bl	8010d74 <PIN_LOW>
 801122c:	2101      	movs	r1, #1
 801122e:	4825      	ldr	r0, [pc, #148]	; (80112c4 <writecmddata+0x47c>)
 8011230:	f7ff fda0 	bl	8010d74 <PIN_LOW>
 8011234:	2101      	movs	r1, #1
 8011236:	4823      	ldr	r0, [pc, #140]	; (80112c4 <writecmddata+0x47c>)
 8011238:	f7ff fd9c 	bl	8010d74 <PIN_LOW>
 801123c:	2101      	movs	r1, #1
 801123e:	4821      	ldr	r0, [pc, #132]	; (80112c4 <writecmddata+0x47c>)
 8011240:	f7ff fd98 	bl	8010d74 <PIN_LOW>
 8011244:	2101      	movs	r1, #1
 8011246:	481f      	ldr	r0, [pc, #124]	; (80112c4 <writecmddata+0x47c>)
 8011248:	f7ff fd94 	bl	8010d74 <PIN_LOW>
 801124c:	2101      	movs	r1, #1
 801124e:	481d      	ldr	r0, [pc, #116]	; (80112c4 <writecmddata+0x47c>)
 8011250:	f7ff fd90 	bl	8010d74 <PIN_LOW>
 8011254:	2101      	movs	r1, #1
 8011256:	481b      	ldr	r0, [pc, #108]	; (80112c4 <writecmddata+0x47c>)
 8011258:	f7ff fd8c 	bl	8010d74 <PIN_LOW>
 801125c:	2101      	movs	r1, #1
 801125e:	4819      	ldr	r0, [pc, #100]	; (80112c4 <writecmddata+0x47c>)
 8011260:	f7ff fd88 	bl	8010d74 <PIN_LOW>
 8011264:	2101      	movs	r1, #1
 8011266:	4817      	ldr	r0, [pc, #92]	; (80112c4 <writecmddata+0x47c>)
 8011268:	f7ff fd84 	bl	8010d74 <PIN_LOW>
 801126c:	2101      	movs	r1, #1
 801126e:	4815      	ldr	r0, [pc, #84]	; (80112c4 <writecmddata+0x47c>)
 8011270:	f7ff fd80 	bl	8010d74 <PIN_LOW>
 8011274:	2101      	movs	r1, #1
 8011276:	4813      	ldr	r0, [pc, #76]	; (80112c4 <writecmddata+0x47c>)
 8011278:	f7ff fd7c 	bl	8010d74 <PIN_LOW>
 801127c:	2101      	movs	r1, #1
 801127e:	4811      	ldr	r0, [pc, #68]	; (80112c4 <writecmddata+0x47c>)
 8011280:	f7ff fd78 	bl	8010d74 <PIN_LOW>
 8011284:	2101      	movs	r1, #1
 8011286:	480f      	ldr	r0, [pc, #60]	; (80112c4 <writecmddata+0x47c>)
 8011288:	f7ff fd74 	bl	8010d74 <PIN_LOW>
 801128c:	2101      	movs	r1, #1
 801128e:	480d      	ldr	r0, [pc, #52]	; (80112c4 <writecmddata+0x47c>)
 8011290:	f7ff fd70 	bl	8010d74 <PIN_LOW>
 8011294:	2101      	movs	r1, #1
 8011296:	480b      	ldr	r0, [pc, #44]	; (80112c4 <writecmddata+0x47c>)
 8011298:	f7ff fd6c 	bl	8010d74 <PIN_LOW>
 801129c:	2101      	movs	r1, #1
 801129e:	4809      	ldr	r0, [pc, #36]	; (80112c4 <writecmddata+0x47c>)
 80112a0:	f7ff fd68 	bl	8010d74 <PIN_LOW>
 80112a4:	2101      	movs	r1, #1
 80112a6:	4807      	ldr	r0, [pc, #28]	; (80112c4 <writecmddata+0x47c>)
 80112a8:	f7ff fd74 	bl	8010d94 <PIN_HIGH>
 80112ac:	2101      	movs	r1, #1
 80112ae:	4805      	ldr	r0, [pc, #20]	; (80112c4 <writecmddata+0x47c>)
 80112b0:	f7ff fd70 	bl	8010d94 <PIN_HIGH>
    CS_IDLE;
 80112b4:	2108      	movs	r1, #8
 80112b6:	4806      	ldr	r0, [pc, #24]	; (80112d0 <writecmddata+0x488>)
 80112b8:	f7ff fd6c 	bl	8010d94 <PIN_HIGH>
}
 80112bc:	bf00      	nop
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	40020800 	.word	0x40020800
 80112c8:	40020c00 	.word	0x40020c00
 80112cc:	40021000 	.word	0x40021000
 80112d0:	40021400 	.word	0x40021400

080112d4 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	603a      	str	r2, [r7, #0]
 80112de:	80fb      	strh	r3, [r7, #6]
 80112e0:	460b      	mov	r3, r1
 80112e2:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80112e4:	2108      	movs	r1, #8
 80112e6:	488c      	ldr	r0, [pc, #560]	; (8011518 <WriteCmdParamN+0x244>)
 80112e8:	f7ff fd44 	bl	8010d74 <PIN_LOW>
    WriteCmd(cmd);
 80112ec:	2120      	movs	r1, #32
 80112ee:	488b      	ldr	r0, [pc, #556]	; (801151c <WriteCmdParamN+0x248>)
 80112f0:	f7ff fd40 	bl	8010d74 <PIN_LOW>
 80112f4:	88fb      	ldrh	r3, [r7, #6]
 80112f6:	0a1b      	lsrs	r3, r3, #8
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	73fb      	strb	r3, [r7, #15]
 80112fc:	88fb      	ldrh	r3, [r7, #6]
 80112fe:	73bb      	strb	r3, [r7, #14]
 8011300:	4b86      	ldr	r3, [pc, #536]	; (801151c <WriteCmdParamN+0x248>)
 8011302:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011306:	619a      	str	r2, [r3, #24]
 8011308:	4b85      	ldr	r3, [pc, #532]	; (8011520 <WriteCmdParamN+0x24c>)
 801130a:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801130e:	619a      	str	r2, [r3, #24]
 8011310:	4b81      	ldr	r3, [pc, #516]	; (8011518 <WriteCmdParamN+0x244>)
 8011312:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011316:	619a      	str	r2, [r3, #24]
 8011318:	7bfb      	ldrb	r3, [r7, #15]
 801131a:	039b      	lsls	r3, r3, #14
 801131c:	4a7f      	ldr	r2, [pc, #508]	; (801151c <WriteCmdParamN+0x248>)
 801131e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011322:	6193      	str	r3, [r2, #24]
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	029b      	lsls	r3, r3, #10
 8011328:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801132c:	7bfb      	ldrb	r3, [r7, #15]
 801132e:	019b      	lsls	r3, r3, #6
 8011330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011334:	431a      	orrs	r2, r3
 8011336:	7bfb      	ldrb	r3, [r7, #15]
 8011338:	00db      	lsls	r3, r3, #3
 801133a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801133e:	431a      	orrs	r2, r3
 8011340:	4b77      	ldr	r3, [pc, #476]	; (8011520 <WriteCmdParamN+0x24c>)
 8011342:	619a      	str	r2, [r3, #24]
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	031b      	lsls	r3, r3, #12
 8011348:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801134c:	7bfb      	ldrb	r3, [r7, #15]
 801134e:	035b      	lsls	r3, r3, #13
 8011350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011354:	431a      	orrs	r2, r3
 8011356:	7bfb      	ldrb	r3, [r7, #15]
 8011358:	029b      	lsls	r3, r3, #10
 801135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801135e:	431a      	orrs	r2, r3
 8011360:	7bfb      	ldrb	r3, [r7, #15]
 8011362:	019b      	lsls	r3, r3, #6
 8011364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011368:	431a      	orrs	r2, r3
 801136a:	4b6b      	ldr	r3, [pc, #428]	; (8011518 <WriteCmdParamN+0x244>)
 801136c:	619a      	str	r2, [r3, #24]
 801136e:	2101      	movs	r1, #1
 8011370:	486c      	ldr	r0, [pc, #432]	; (8011524 <WriteCmdParamN+0x250>)
 8011372:	f7ff fcff 	bl	8010d74 <PIN_LOW>
 8011376:	2101      	movs	r1, #1
 8011378:	486a      	ldr	r0, [pc, #424]	; (8011524 <WriteCmdParamN+0x250>)
 801137a:	f7ff fcfb 	bl	8010d74 <PIN_LOW>
 801137e:	2101      	movs	r1, #1
 8011380:	4868      	ldr	r0, [pc, #416]	; (8011524 <WriteCmdParamN+0x250>)
 8011382:	f7ff fcf7 	bl	8010d74 <PIN_LOW>
 8011386:	2101      	movs	r1, #1
 8011388:	4866      	ldr	r0, [pc, #408]	; (8011524 <WriteCmdParamN+0x250>)
 801138a:	f7ff fcf3 	bl	8010d74 <PIN_LOW>
 801138e:	2101      	movs	r1, #1
 8011390:	4864      	ldr	r0, [pc, #400]	; (8011524 <WriteCmdParamN+0x250>)
 8011392:	f7ff fcef 	bl	8010d74 <PIN_LOW>
 8011396:	2101      	movs	r1, #1
 8011398:	4862      	ldr	r0, [pc, #392]	; (8011524 <WriteCmdParamN+0x250>)
 801139a:	f7ff fceb 	bl	8010d74 <PIN_LOW>
 801139e:	2101      	movs	r1, #1
 80113a0:	4860      	ldr	r0, [pc, #384]	; (8011524 <WriteCmdParamN+0x250>)
 80113a2:	f7ff fce7 	bl	8010d74 <PIN_LOW>
 80113a6:	2101      	movs	r1, #1
 80113a8:	485e      	ldr	r0, [pc, #376]	; (8011524 <WriteCmdParamN+0x250>)
 80113aa:	f7ff fce3 	bl	8010d74 <PIN_LOW>
 80113ae:	2101      	movs	r1, #1
 80113b0:	485c      	ldr	r0, [pc, #368]	; (8011524 <WriteCmdParamN+0x250>)
 80113b2:	f7ff fcdf 	bl	8010d74 <PIN_LOW>
 80113b6:	2101      	movs	r1, #1
 80113b8:	485a      	ldr	r0, [pc, #360]	; (8011524 <WriteCmdParamN+0x250>)
 80113ba:	f7ff fcdb 	bl	8010d74 <PIN_LOW>
 80113be:	2101      	movs	r1, #1
 80113c0:	4858      	ldr	r0, [pc, #352]	; (8011524 <WriteCmdParamN+0x250>)
 80113c2:	f7ff fcd7 	bl	8010d74 <PIN_LOW>
 80113c6:	2101      	movs	r1, #1
 80113c8:	4856      	ldr	r0, [pc, #344]	; (8011524 <WriteCmdParamN+0x250>)
 80113ca:	f7ff fcd3 	bl	8010d74 <PIN_LOW>
 80113ce:	2101      	movs	r1, #1
 80113d0:	4854      	ldr	r0, [pc, #336]	; (8011524 <WriteCmdParamN+0x250>)
 80113d2:	f7ff fccf 	bl	8010d74 <PIN_LOW>
 80113d6:	2101      	movs	r1, #1
 80113d8:	4852      	ldr	r0, [pc, #328]	; (8011524 <WriteCmdParamN+0x250>)
 80113da:	f7ff fccb 	bl	8010d74 <PIN_LOW>
 80113de:	2101      	movs	r1, #1
 80113e0:	4850      	ldr	r0, [pc, #320]	; (8011524 <WriteCmdParamN+0x250>)
 80113e2:	f7ff fcc7 	bl	8010d74 <PIN_LOW>
 80113e6:	2101      	movs	r1, #1
 80113e8:	484e      	ldr	r0, [pc, #312]	; (8011524 <WriteCmdParamN+0x250>)
 80113ea:	f7ff fcc3 	bl	8010d74 <PIN_LOW>
 80113ee:	2101      	movs	r1, #1
 80113f0:	484c      	ldr	r0, [pc, #304]	; (8011524 <WriteCmdParamN+0x250>)
 80113f2:	f7ff fcbf 	bl	8010d74 <PIN_LOW>
 80113f6:	2101      	movs	r1, #1
 80113f8:	484a      	ldr	r0, [pc, #296]	; (8011524 <WriteCmdParamN+0x250>)
 80113fa:	f7ff fccb 	bl	8010d94 <PIN_HIGH>
 80113fe:	2101      	movs	r1, #1
 8011400:	4848      	ldr	r0, [pc, #288]	; (8011524 <WriteCmdParamN+0x250>)
 8011402:	f7ff fcc7 	bl	8010d94 <PIN_HIGH>
 8011406:	4b45      	ldr	r3, [pc, #276]	; (801151c <WriteCmdParamN+0x248>)
 8011408:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801140c:	619a      	str	r2, [r3, #24]
 801140e:	4b44      	ldr	r3, [pc, #272]	; (8011520 <WriteCmdParamN+0x24c>)
 8011410:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011414:	619a      	str	r2, [r3, #24]
 8011416:	4b40      	ldr	r3, [pc, #256]	; (8011518 <WriteCmdParamN+0x244>)
 8011418:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801141c:	619a      	str	r2, [r3, #24]
 801141e:	7bbb      	ldrb	r3, [r7, #14]
 8011420:	039b      	lsls	r3, r3, #14
 8011422:	4a3e      	ldr	r2, [pc, #248]	; (801151c <WriteCmdParamN+0x248>)
 8011424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011428:	6193      	str	r3, [r2, #24]
 801142a:	7bbb      	ldrb	r3, [r7, #14]
 801142c:	029b      	lsls	r3, r3, #10
 801142e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011432:	7bbb      	ldrb	r3, [r7, #14]
 8011434:	019b      	lsls	r3, r3, #6
 8011436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801143a:	431a      	orrs	r2, r3
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	00db      	lsls	r3, r3, #3
 8011440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011444:	431a      	orrs	r2, r3
 8011446:	4b36      	ldr	r3, [pc, #216]	; (8011520 <WriteCmdParamN+0x24c>)
 8011448:	619a      	str	r2, [r3, #24]
 801144a:	7bbb      	ldrb	r3, [r7, #14]
 801144c:	031b      	lsls	r3, r3, #12
 801144e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011452:	7bbb      	ldrb	r3, [r7, #14]
 8011454:	035b      	lsls	r3, r3, #13
 8011456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801145a:	431a      	orrs	r2, r3
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	029b      	lsls	r3, r3, #10
 8011460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011464:	431a      	orrs	r2, r3
 8011466:	7bbb      	ldrb	r3, [r7, #14]
 8011468:	019b      	lsls	r3, r3, #6
 801146a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801146e:	431a      	orrs	r2, r3
 8011470:	4b29      	ldr	r3, [pc, #164]	; (8011518 <WriteCmdParamN+0x244>)
 8011472:	619a      	str	r2, [r3, #24]
 8011474:	2101      	movs	r1, #1
 8011476:	482b      	ldr	r0, [pc, #172]	; (8011524 <WriteCmdParamN+0x250>)
 8011478:	f7ff fc7c 	bl	8010d74 <PIN_LOW>
 801147c:	2101      	movs	r1, #1
 801147e:	4829      	ldr	r0, [pc, #164]	; (8011524 <WriteCmdParamN+0x250>)
 8011480:	f7ff fc78 	bl	8010d74 <PIN_LOW>
 8011484:	2101      	movs	r1, #1
 8011486:	4827      	ldr	r0, [pc, #156]	; (8011524 <WriteCmdParamN+0x250>)
 8011488:	f7ff fc74 	bl	8010d74 <PIN_LOW>
 801148c:	2101      	movs	r1, #1
 801148e:	4825      	ldr	r0, [pc, #148]	; (8011524 <WriteCmdParamN+0x250>)
 8011490:	f7ff fc70 	bl	8010d74 <PIN_LOW>
 8011494:	2101      	movs	r1, #1
 8011496:	4823      	ldr	r0, [pc, #140]	; (8011524 <WriteCmdParamN+0x250>)
 8011498:	f7ff fc6c 	bl	8010d74 <PIN_LOW>
 801149c:	2101      	movs	r1, #1
 801149e:	4821      	ldr	r0, [pc, #132]	; (8011524 <WriteCmdParamN+0x250>)
 80114a0:	f7ff fc68 	bl	8010d74 <PIN_LOW>
 80114a4:	2101      	movs	r1, #1
 80114a6:	481f      	ldr	r0, [pc, #124]	; (8011524 <WriteCmdParamN+0x250>)
 80114a8:	f7ff fc64 	bl	8010d74 <PIN_LOW>
 80114ac:	2101      	movs	r1, #1
 80114ae:	481d      	ldr	r0, [pc, #116]	; (8011524 <WriteCmdParamN+0x250>)
 80114b0:	f7ff fc60 	bl	8010d74 <PIN_LOW>
 80114b4:	2101      	movs	r1, #1
 80114b6:	481b      	ldr	r0, [pc, #108]	; (8011524 <WriteCmdParamN+0x250>)
 80114b8:	f7ff fc5c 	bl	8010d74 <PIN_LOW>
 80114bc:	2101      	movs	r1, #1
 80114be:	4819      	ldr	r0, [pc, #100]	; (8011524 <WriteCmdParamN+0x250>)
 80114c0:	f7ff fc58 	bl	8010d74 <PIN_LOW>
 80114c4:	2101      	movs	r1, #1
 80114c6:	4817      	ldr	r0, [pc, #92]	; (8011524 <WriteCmdParamN+0x250>)
 80114c8:	f7ff fc54 	bl	8010d74 <PIN_LOW>
 80114cc:	2101      	movs	r1, #1
 80114ce:	4815      	ldr	r0, [pc, #84]	; (8011524 <WriteCmdParamN+0x250>)
 80114d0:	f7ff fc50 	bl	8010d74 <PIN_LOW>
 80114d4:	2101      	movs	r1, #1
 80114d6:	4813      	ldr	r0, [pc, #76]	; (8011524 <WriteCmdParamN+0x250>)
 80114d8:	f7ff fc4c 	bl	8010d74 <PIN_LOW>
 80114dc:	2101      	movs	r1, #1
 80114de:	4811      	ldr	r0, [pc, #68]	; (8011524 <WriteCmdParamN+0x250>)
 80114e0:	f7ff fc48 	bl	8010d74 <PIN_LOW>
 80114e4:	2101      	movs	r1, #1
 80114e6:	480f      	ldr	r0, [pc, #60]	; (8011524 <WriteCmdParamN+0x250>)
 80114e8:	f7ff fc44 	bl	8010d74 <PIN_LOW>
 80114ec:	2101      	movs	r1, #1
 80114ee:	480d      	ldr	r0, [pc, #52]	; (8011524 <WriteCmdParamN+0x250>)
 80114f0:	f7ff fc40 	bl	8010d74 <PIN_LOW>
 80114f4:	2101      	movs	r1, #1
 80114f6:	480b      	ldr	r0, [pc, #44]	; (8011524 <WriteCmdParamN+0x250>)
 80114f8:	f7ff fc3c 	bl	8010d74 <PIN_LOW>
 80114fc:	2101      	movs	r1, #1
 80114fe:	4809      	ldr	r0, [pc, #36]	; (8011524 <WriteCmdParamN+0x250>)
 8011500:	f7ff fc48 	bl	8010d94 <PIN_HIGH>
 8011504:	2101      	movs	r1, #1
 8011506:	4807      	ldr	r0, [pc, #28]	; (8011524 <WriteCmdParamN+0x250>)
 8011508:	f7ff fc44 	bl	8010d94 <PIN_HIGH>
 801150c:	2120      	movs	r1, #32
 801150e:	4803      	ldr	r0, [pc, #12]	; (801151c <WriteCmdParamN+0x248>)
 8011510:	f7ff fc40 	bl	8010d94 <PIN_HIGH>
    while (N-- > 0) {
 8011514:	e1bd      	b.n	8011892 <WriteCmdParamN+0x5be>
 8011516:	bf00      	nop
 8011518:	40021400 	.word	0x40021400
 801151c:	40020c00 	.word	0x40020c00
 8011520:	40021000 	.word	0x40021000
 8011524:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	1c5a      	adds	r2, r3, #1
 801152c:	603a      	str	r2, [r7, #0]
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8011532:	4bc3      	ldr	r3, [pc, #780]	; (8011840 <WriteCmdParamN+0x56c>)
 8011534:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011538:	619a      	str	r2, [r3, #24]
 801153a:	4bc2      	ldr	r3, [pc, #776]	; (8011844 <WriteCmdParamN+0x570>)
 801153c:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011540:	619a      	str	r2, [r3, #24]
 8011542:	4bc1      	ldr	r3, [pc, #772]	; (8011848 <WriteCmdParamN+0x574>)
 8011544:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011548:	619a      	str	r2, [r3, #24]
 801154a:	7b7b      	ldrb	r3, [r7, #13]
 801154c:	039b      	lsls	r3, r3, #14
 801154e:	4abc      	ldr	r2, [pc, #752]	; (8011840 <WriteCmdParamN+0x56c>)
 8011550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011554:	6193      	str	r3, [r2, #24]
 8011556:	7b7b      	ldrb	r3, [r7, #13]
 8011558:	029b      	lsls	r3, r3, #10
 801155a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801155e:	7b7b      	ldrb	r3, [r7, #13]
 8011560:	019b      	lsls	r3, r3, #6
 8011562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011566:	431a      	orrs	r2, r3
 8011568:	7b7b      	ldrb	r3, [r7, #13]
 801156a:	00db      	lsls	r3, r3, #3
 801156c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011570:	431a      	orrs	r2, r3
 8011572:	4bb4      	ldr	r3, [pc, #720]	; (8011844 <WriteCmdParamN+0x570>)
 8011574:	619a      	str	r2, [r3, #24]
 8011576:	7b7b      	ldrb	r3, [r7, #13]
 8011578:	031b      	lsls	r3, r3, #12
 801157a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801157e:	7b7b      	ldrb	r3, [r7, #13]
 8011580:	035b      	lsls	r3, r3, #13
 8011582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011586:	431a      	orrs	r2, r3
 8011588:	7b7b      	ldrb	r3, [r7, #13]
 801158a:	029b      	lsls	r3, r3, #10
 801158c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011590:	431a      	orrs	r2, r3
 8011592:	7b7b      	ldrb	r3, [r7, #13]
 8011594:	019b      	lsls	r3, r3, #6
 8011596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801159a:	431a      	orrs	r2, r3
 801159c:	4baa      	ldr	r3, [pc, #680]	; (8011848 <WriteCmdParamN+0x574>)
 801159e:	619a      	str	r2, [r3, #24]
 80115a0:	2101      	movs	r1, #1
 80115a2:	48aa      	ldr	r0, [pc, #680]	; (801184c <WriteCmdParamN+0x578>)
 80115a4:	f7ff fbe6 	bl	8010d74 <PIN_LOW>
 80115a8:	2101      	movs	r1, #1
 80115aa:	48a8      	ldr	r0, [pc, #672]	; (801184c <WriteCmdParamN+0x578>)
 80115ac:	f7ff fbe2 	bl	8010d74 <PIN_LOW>
 80115b0:	2101      	movs	r1, #1
 80115b2:	48a6      	ldr	r0, [pc, #664]	; (801184c <WriteCmdParamN+0x578>)
 80115b4:	f7ff fbde 	bl	8010d74 <PIN_LOW>
 80115b8:	2101      	movs	r1, #1
 80115ba:	48a4      	ldr	r0, [pc, #656]	; (801184c <WriteCmdParamN+0x578>)
 80115bc:	f7ff fbda 	bl	8010d74 <PIN_LOW>
 80115c0:	2101      	movs	r1, #1
 80115c2:	48a2      	ldr	r0, [pc, #648]	; (801184c <WriteCmdParamN+0x578>)
 80115c4:	f7ff fbd6 	bl	8010d74 <PIN_LOW>
 80115c8:	2101      	movs	r1, #1
 80115ca:	48a0      	ldr	r0, [pc, #640]	; (801184c <WriteCmdParamN+0x578>)
 80115cc:	f7ff fbd2 	bl	8010d74 <PIN_LOW>
 80115d0:	2101      	movs	r1, #1
 80115d2:	489e      	ldr	r0, [pc, #632]	; (801184c <WriteCmdParamN+0x578>)
 80115d4:	f7ff fbce 	bl	8010d74 <PIN_LOW>
 80115d8:	2101      	movs	r1, #1
 80115da:	489c      	ldr	r0, [pc, #624]	; (801184c <WriteCmdParamN+0x578>)
 80115dc:	f7ff fbca 	bl	8010d74 <PIN_LOW>
 80115e0:	2101      	movs	r1, #1
 80115e2:	489a      	ldr	r0, [pc, #616]	; (801184c <WriteCmdParamN+0x578>)
 80115e4:	f7ff fbc6 	bl	8010d74 <PIN_LOW>
 80115e8:	2101      	movs	r1, #1
 80115ea:	4898      	ldr	r0, [pc, #608]	; (801184c <WriteCmdParamN+0x578>)
 80115ec:	f7ff fbc2 	bl	8010d74 <PIN_LOW>
 80115f0:	2101      	movs	r1, #1
 80115f2:	4896      	ldr	r0, [pc, #600]	; (801184c <WriteCmdParamN+0x578>)
 80115f4:	f7ff fbbe 	bl	8010d74 <PIN_LOW>
 80115f8:	2101      	movs	r1, #1
 80115fa:	4894      	ldr	r0, [pc, #592]	; (801184c <WriteCmdParamN+0x578>)
 80115fc:	f7ff fbba 	bl	8010d74 <PIN_LOW>
 8011600:	2101      	movs	r1, #1
 8011602:	4892      	ldr	r0, [pc, #584]	; (801184c <WriteCmdParamN+0x578>)
 8011604:	f7ff fbb6 	bl	8010d74 <PIN_LOW>
 8011608:	2101      	movs	r1, #1
 801160a:	4890      	ldr	r0, [pc, #576]	; (801184c <WriteCmdParamN+0x578>)
 801160c:	f7ff fbb2 	bl	8010d74 <PIN_LOW>
 8011610:	2101      	movs	r1, #1
 8011612:	488e      	ldr	r0, [pc, #568]	; (801184c <WriteCmdParamN+0x578>)
 8011614:	f7ff fbae 	bl	8010d74 <PIN_LOW>
 8011618:	2101      	movs	r1, #1
 801161a:	488c      	ldr	r0, [pc, #560]	; (801184c <WriteCmdParamN+0x578>)
 801161c:	f7ff fbaa 	bl	8010d74 <PIN_LOW>
 8011620:	2101      	movs	r1, #1
 8011622:	488a      	ldr	r0, [pc, #552]	; (801184c <WriteCmdParamN+0x578>)
 8011624:	f7ff fba6 	bl	8010d74 <PIN_LOW>
 8011628:	2101      	movs	r1, #1
 801162a:	4888      	ldr	r0, [pc, #544]	; (801184c <WriteCmdParamN+0x578>)
 801162c:	f7ff fbb2 	bl	8010d94 <PIN_HIGH>
 8011630:	2101      	movs	r1, #1
 8011632:	4886      	ldr	r0, [pc, #536]	; (801184c <WriteCmdParamN+0x578>)
 8011634:	f7ff fbae 	bl	8010d94 <PIN_HIGH>
        if (N && is8347) {
 8011638:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801163c:	2b00      	cmp	r3, #0
 801163e:	f000 8128 	beq.w	8011892 <WriteCmdParamN+0x5be>
 8011642:	4b83      	ldr	r3, [pc, #524]	; (8011850 <WriteCmdParamN+0x57c>)
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f000 8123 	beq.w	8011892 <WriteCmdParamN+0x5be>
            cmd++;
 801164c:	88fb      	ldrh	r3, [r7, #6]
 801164e:	3301      	adds	r3, #1
 8011650:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8011652:	2120      	movs	r1, #32
 8011654:	487a      	ldr	r0, [pc, #488]	; (8011840 <WriteCmdParamN+0x56c>)
 8011656:	f7ff fb8d 	bl	8010d74 <PIN_LOW>
 801165a:	88fb      	ldrh	r3, [r7, #6]
 801165c:	0a1b      	lsrs	r3, r3, #8
 801165e:	b29b      	uxth	r3, r3
 8011660:	733b      	strb	r3, [r7, #12]
 8011662:	88fb      	ldrh	r3, [r7, #6]
 8011664:	72fb      	strb	r3, [r7, #11]
 8011666:	4b76      	ldr	r3, [pc, #472]	; (8011840 <WriteCmdParamN+0x56c>)
 8011668:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801166c:	619a      	str	r2, [r3, #24]
 801166e:	4b75      	ldr	r3, [pc, #468]	; (8011844 <WriteCmdParamN+0x570>)
 8011670:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011674:	619a      	str	r2, [r3, #24]
 8011676:	4b74      	ldr	r3, [pc, #464]	; (8011848 <WriteCmdParamN+0x574>)
 8011678:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801167c:	619a      	str	r2, [r3, #24]
 801167e:	7b3b      	ldrb	r3, [r7, #12]
 8011680:	039b      	lsls	r3, r3, #14
 8011682:	4a6f      	ldr	r2, [pc, #444]	; (8011840 <WriteCmdParamN+0x56c>)
 8011684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011688:	6193      	str	r3, [r2, #24]
 801168a:	7b3b      	ldrb	r3, [r7, #12]
 801168c:	029b      	lsls	r3, r3, #10
 801168e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011692:	7b3b      	ldrb	r3, [r7, #12]
 8011694:	019b      	lsls	r3, r3, #6
 8011696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801169a:	431a      	orrs	r2, r3
 801169c:	7b3b      	ldrb	r3, [r7, #12]
 801169e:	00db      	lsls	r3, r3, #3
 80116a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116a4:	431a      	orrs	r2, r3
 80116a6:	4b67      	ldr	r3, [pc, #412]	; (8011844 <WriteCmdParamN+0x570>)
 80116a8:	619a      	str	r2, [r3, #24]
 80116aa:	7b3b      	ldrb	r3, [r7, #12]
 80116ac:	031b      	lsls	r3, r3, #12
 80116ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80116b2:	7b3b      	ldrb	r3, [r7, #12]
 80116b4:	035b      	lsls	r3, r3, #13
 80116b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80116ba:	431a      	orrs	r2, r3
 80116bc:	7b3b      	ldrb	r3, [r7, #12]
 80116be:	029b      	lsls	r3, r3, #10
 80116c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116c4:	431a      	orrs	r2, r3
 80116c6:	7b3b      	ldrb	r3, [r7, #12]
 80116c8:	019b      	lsls	r3, r3, #6
 80116ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80116ce:	431a      	orrs	r2, r3
 80116d0:	4b5d      	ldr	r3, [pc, #372]	; (8011848 <WriteCmdParamN+0x574>)
 80116d2:	619a      	str	r2, [r3, #24]
 80116d4:	2101      	movs	r1, #1
 80116d6:	485d      	ldr	r0, [pc, #372]	; (801184c <WriteCmdParamN+0x578>)
 80116d8:	f7ff fb4c 	bl	8010d74 <PIN_LOW>
 80116dc:	2101      	movs	r1, #1
 80116de:	485b      	ldr	r0, [pc, #364]	; (801184c <WriteCmdParamN+0x578>)
 80116e0:	f7ff fb48 	bl	8010d74 <PIN_LOW>
 80116e4:	2101      	movs	r1, #1
 80116e6:	4859      	ldr	r0, [pc, #356]	; (801184c <WriteCmdParamN+0x578>)
 80116e8:	f7ff fb44 	bl	8010d74 <PIN_LOW>
 80116ec:	2101      	movs	r1, #1
 80116ee:	4857      	ldr	r0, [pc, #348]	; (801184c <WriteCmdParamN+0x578>)
 80116f0:	f7ff fb40 	bl	8010d74 <PIN_LOW>
 80116f4:	2101      	movs	r1, #1
 80116f6:	4855      	ldr	r0, [pc, #340]	; (801184c <WriteCmdParamN+0x578>)
 80116f8:	f7ff fb3c 	bl	8010d74 <PIN_LOW>
 80116fc:	2101      	movs	r1, #1
 80116fe:	4853      	ldr	r0, [pc, #332]	; (801184c <WriteCmdParamN+0x578>)
 8011700:	f7ff fb38 	bl	8010d74 <PIN_LOW>
 8011704:	2101      	movs	r1, #1
 8011706:	4851      	ldr	r0, [pc, #324]	; (801184c <WriteCmdParamN+0x578>)
 8011708:	f7ff fb34 	bl	8010d74 <PIN_LOW>
 801170c:	2101      	movs	r1, #1
 801170e:	484f      	ldr	r0, [pc, #316]	; (801184c <WriteCmdParamN+0x578>)
 8011710:	f7ff fb30 	bl	8010d74 <PIN_LOW>
 8011714:	2101      	movs	r1, #1
 8011716:	484d      	ldr	r0, [pc, #308]	; (801184c <WriteCmdParamN+0x578>)
 8011718:	f7ff fb2c 	bl	8010d74 <PIN_LOW>
 801171c:	2101      	movs	r1, #1
 801171e:	484b      	ldr	r0, [pc, #300]	; (801184c <WriteCmdParamN+0x578>)
 8011720:	f7ff fb28 	bl	8010d74 <PIN_LOW>
 8011724:	2101      	movs	r1, #1
 8011726:	4849      	ldr	r0, [pc, #292]	; (801184c <WriteCmdParamN+0x578>)
 8011728:	f7ff fb24 	bl	8010d74 <PIN_LOW>
 801172c:	2101      	movs	r1, #1
 801172e:	4847      	ldr	r0, [pc, #284]	; (801184c <WriteCmdParamN+0x578>)
 8011730:	f7ff fb20 	bl	8010d74 <PIN_LOW>
 8011734:	2101      	movs	r1, #1
 8011736:	4845      	ldr	r0, [pc, #276]	; (801184c <WriteCmdParamN+0x578>)
 8011738:	f7ff fb1c 	bl	8010d74 <PIN_LOW>
 801173c:	2101      	movs	r1, #1
 801173e:	4843      	ldr	r0, [pc, #268]	; (801184c <WriteCmdParamN+0x578>)
 8011740:	f7ff fb18 	bl	8010d74 <PIN_LOW>
 8011744:	2101      	movs	r1, #1
 8011746:	4841      	ldr	r0, [pc, #260]	; (801184c <WriteCmdParamN+0x578>)
 8011748:	f7ff fb14 	bl	8010d74 <PIN_LOW>
 801174c:	2101      	movs	r1, #1
 801174e:	483f      	ldr	r0, [pc, #252]	; (801184c <WriteCmdParamN+0x578>)
 8011750:	f7ff fb10 	bl	8010d74 <PIN_LOW>
 8011754:	2101      	movs	r1, #1
 8011756:	483d      	ldr	r0, [pc, #244]	; (801184c <WriteCmdParamN+0x578>)
 8011758:	f7ff fb0c 	bl	8010d74 <PIN_LOW>
 801175c:	2101      	movs	r1, #1
 801175e:	483b      	ldr	r0, [pc, #236]	; (801184c <WriteCmdParamN+0x578>)
 8011760:	f7ff fb18 	bl	8010d94 <PIN_HIGH>
 8011764:	2101      	movs	r1, #1
 8011766:	4839      	ldr	r0, [pc, #228]	; (801184c <WriteCmdParamN+0x578>)
 8011768:	f7ff fb14 	bl	8010d94 <PIN_HIGH>
 801176c:	4b34      	ldr	r3, [pc, #208]	; (8011840 <WriteCmdParamN+0x56c>)
 801176e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011772:	619a      	str	r2, [r3, #24]
 8011774:	4b33      	ldr	r3, [pc, #204]	; (8011844 <WriteCmdParamN+0x570>)
 8011776:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801177a:	619a      	str	r2, [r3, #24]
 801177c:	4b32      	ldr	r3, [pc, #200]	; (8011848 <WriteCmdParamN+0x574>)
 801177e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011782:	619a      	str	r2, [r3, #24]
 8011784:	7afb      	ldrb	r3, [r7, #11]
 8011786:	039b      	lsls	r3, r3, #14
 8011788:	4a2d      	ldr	r2, [pc, #180]	; (8011840 <WriteCmdParamN+0x56c>)
 801178a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801178e:	6193      	str	r3, [r2, #24]
 8011790:	7afb      	ldrb	r3, [r7, #11]
 8011792:	029b      	lsls	r3, r3, #10
 8011794:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011798:	7afb      	ldrb	r3, [r7, #11]
 801179a:	019b      	lsls	r3, r3, #6
 801179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117a0:	431a      	orrs	r2, r3
 80117a2:	7afb      	ldrb	r3, [r7, #11]
 80117a4:	00db      	lsls	r3, r3, #3
 80117a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117aa:	431a      	orrs	r2, r3
 80117ac:	4b25      	ldr	r3, [pc, #148]	; (8011844 <WriteCmdParamN+0x570>)
 80117ae:	619a      	str	r2, [r3, #24]
 80117b0:	7afb      	ldrb	r3, [r7, #11]
 80117b2:	031b      	lsls	r3, r3, #12
 80117b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80117b8:	7afb      	ldrb	r3, [r7, #11]
 80117ba:	035b      	lsls	r3, r3, #13
 80117bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117c0:	431a      	orrs	r2, r3
 80117c2:	7afb      	ldrb	r3, [r7, #11]
 80117c4:	029b      	lsls	r3, r3, #10
 80117c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117ca:	431a      	orrs	r2, r3
 80117cc:	7afb      	ldrb	r3, [r7, #11]
 80117ce:	019b      	lsls	r3, r3, #6
 80117d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80117d4:	431a      	orrs	r2, r3
 80117d6:	4b1c      	ldr	r3, [pc, #112]	; (8011848 <WriteCmdParamN+0x574>)
 80117d8:	619a      	str	r2, [r3, #24]
 80117da:	2101      	movs	r1, #1
 80117dc:	481b      	ldr	r0, [pc, #108]	; (801184c <WriteCmdParamN+0x578>)
 80117de:	f7ff fac9 	bl	8010d74 <PIN_LOW>
 80117e2:	2101      	movs	r1, #1
 80117e4:	4819      	ldr	r0, [pc, #100]	; (801184c <WriteCmdParamN+0x578>)
 80117e6:	f7ff fac5 	bl	8010d74 <PIN_LOW>
 80117ea:	2101      	movs	r1, #1
 80117ec:	4817      	ldr	r0, [pc, #92]	; (801184c <WriteCmdParamN+0x578>)
 80117ee:	f7ff fac1 	bl	8010d74 <PIN_LOW>
 80117f2:	2101      	movs	r1, #1
 80117f4:	4815      	ldr	r0, [pc, #84]	; (801184c <WriteCmdParamN+0x578>)
 80117f6:	f7ff fabd 	bl	8010d74 <PIN_LOW>
 80117fa:	2101      	movs	r1, #1
 80117fc:	4813      	ldr	r0, [pc, #76]	; (801184c <WriteCmdParamN+0x578>)
 80117fe:	f7ff fab9 	bl	8010d74 <PIN_LOW>
 8011802:	2101      	movs	r1, #1
 8011804:	4811      	ldr	r0, [pc, #68]	; (801184c <WriteCmdParamN+0x578>)
 8011806:	f7ff fab5 	bl	8010d74 <PIN_LOW>
 801180a:	2101      	movs	r1, #1
 801180c:	480f      	ldr	r0, [pc, #60]	; (801184c <WriteCmdParamN+0x578>)
 801180e:	f7ff fab1 	bl	8010d74 <PIN_LOW>
 8011812:	2101      	movs	r1, #1
 8011814:	480d      	ldr	r0, [pc, #52]	; (801184c <WriteCmdParamN+0x578>)
 8011816:	f7ff faad 	bl	8010d74 <PIN_LOW>
 801181a:	2101      	movs	r1, #1
 801181c:	480b      	ldr	r0, [pc, #44]	; (801184c <WriteCmdParamN+0x578>)
 801181e:	f7ff faa9 	bl	8010d74 <PIN_LOW>
 8011822:	2101      	movs	r1, #1
 8011824:	4809      	ldr	r0, [pc, #36]	; (801184c <WriteCmdParamN+0x578>)
 8011826:	f7ff faa5 	bl	8010d74 <PIN_LOW>
 801182a:	2101      	movs	r1, #1
 801182c:	4807      	ldr	r0, [pc, #28]	; (801184c <WriteCmdParamN+0x578>)
 801182e:	f7ff faa1 	bl	8010d74 <PIN_LOW>
 8011832:	2101      	movs	r1, #1
 8011834:	4805      	ldr	r0, [pc, #20]	; (801184c <WriteCmdParamN+0x578>)
 8011836:	f7ff fa9d 	bl	8010d74 <PIN_LOW>
 801183a:	2101      	movs	r1, #1
 801183c:	e00a      	b.n	8011854 <WriteCmdParamN+0x580>
 801183e:	bf00      	nop
 8011840:	40020c00 	.word	0x40020c00
 8011844:	40021000 	.word	0x40021000
 8011848:	40021400 	.word	0x40021400
 801184c:	40020800 	.word	0x40020800
 8011850:	20000216 	.word	0x20000216
 8011854:	4817      	ldr	r0, [pc, #92]	; (80118b4 <WriteCmdParamN+0x5e0>)
 8011856:	f7ff fa8d 	bl	8010d74 <PIN_LOW>
 801185a:	2101      	movs	r1, #1
 801185c:	4815      	ldr	r0, [pc, #84]	; (80118b4 <WriteCmdParamN+0x5e0>)
 801185e:	f7ff fa89 	bl	8010d74 <PIN_LOW>
 8011862:	2101      	movs	r1, #1
 8011864:	4813      	ldr	r0, [pc, #76]	; (80118b4 <WriteCmdParamN+0x5e0>)
 8011866:	f7ff fa85 	bl	8010d74 <PIN_LOW>
 801186a:	2101      	movs	r1, #1
 801186c:	4811      	ldr	r0, [pc, #68]	; (80118b4 <WriteCmdParamN+0x5e0>)
 801186e:	f7ff fa81 	bl	8010d74 <PIN_LOW>
 8011872:	2101      	movs	r1, #1
 8011874:	480f      	ldr	r0, [pc, #60]	; (80118b4 <WriteCmdParamN+0x5e0>)
 8011876:	f7ff fa7d 	bl	8010d74 <PIN_LOW>
 801187a:	2101      	movs	r1, #1
 801187c:	480d      	ldr	r0, [pc, #52]	; (80118b4 <WriteCmdParamN+0x5e0>)
 801187e:	f7ff fa89 	bl	8010d94 <PIN_HIGH>
 8011882:	2101      	movs	r1, #1
 8011884:	480b      	ldr	r0, [pc, #44]	; (80118b4 <WriteCmdParamN+0x5e0>)
 8011886:	f7ff fa85 	bl	8010d94 <PIN_HIGH>
 801188a:	2120      	movs	r1, #32
 801188c:	480a      	ldr	r0, [pc, #40]	; (80118b8 <WriteCmdParamN+0x5e4>)
 801188e:	f7ff fa81 	bl	8010d94 <PIN_HIGH>
    while (N-- > 0) {
 8011892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011896:	b2da      	uxtb	r2, r3
 8011898:	3a01      	subs	r2, #1
 801189a:	b2d2      	uxtb	r2, r2
 801189c:	717a      	strb	r2, [r7, #5]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	f73f ae42 	bgt.w	8011528 <WriteCmdParamN+0x254>
        }
    }
    CS_IDLE;
 80118a4:	2108      	movs	r1, #8
 80118a6:	4805      	ldr	r0, [pc, #20]	; (80118bc <WriteCmdParamN+0x5e8>)
 80118a8:	f7ff fa74 	bl	8010d94 <PIN_HIGH>
}
 80118ac:	bf00      	nop
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	40020800 	.word	0x40020800
 80118b8:	40020c00 	.word	0x40020c00
 80118bc:	40021400 	.word	0x40021400

080118c0 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80118c0:	b590      	push	{r4, r7, lr}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4604      	mov	r4, r0
 80118c8:	4608      	mov	r0, r1
 80118ca:	4611      	mov	r1, r2
 80118cc:	461a      	mov	r2, r3
 80118ce:	4623      	mov	r3, r4
 80118d0:	71fb      	strb	r3, [r7, #7]
 80118d2:	4603      	mov	r3, r0
 80118d4:	71bb      	strb	r3, [r7, #6]
 80118d6:	460b      	mov	r3, r1
 80118d8:	717b      	strb	r3, [r7, #5]
 80118da:	4613      	mov	r3, r2
 80118dc:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 80118de:	79bb      	ldrb	r3, [r7, #6]
 80118e0:	733b      	strb	r3, [r7, #12]
 80118e2:	797b      	ldrb	r3, [r7, #5]
 80118e4:	737b      	strb	r3, [r7, #13]
 80118e6:	793b      	ldrb	r3, [r7, #4]
 80118e8:	73bb      	strb	r3, [r7, #14]
 80118ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118ee:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80118f0:	79fb      	ldrb	r3, [r7, #7]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	f107 020c 	add.w	r2, r7, #12
 80118f8:	2104      	movs	r1, #4
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff fcea 	bl	80112d4 <WriteCmdParamN>
}
 8011900:	bf00      	nop
 8011902:	3714      	adds	r7, #20
 8011904:	46bd      	mov	sp, r7
 8011906:	bd90      	pop	{r4, r7, pc}

08011908 <setAddrWindow>:
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
   WriteCmdData(_MW, color);
}

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8011908:	b590      	push	{r4, r7, lr}
 801190a:	b087      	sub	sp, #28
 801190c:	af02      	add	r7, sp, #8
 801190e:	4604      	mov	r4, r0
 8011910:	4608      	mov	r0, r1
 8011912:	4611      	mov	r1, r2
 8011914:	461a      	mov	r2, r3
 8011916:	4623      	mov	r3, r4
 8011918:	80fb      	strh	r3, [r7, #6]
 801191a:	4603      	mov	r3, r0
 801191c:	80bb      	strh	r3, [r7, #4]
 801191e:	460b      	mov	r3, r1
 8011920:	807b      	strh	r3, [r7, #2]
 8011922:	4613      	mov	r3, r2
 8011924:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8011926:	4b80      	ldr	r3, [pc, #512]	; (8011b28 <setAddrWindow+0x220>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	f249 3227 	movw	r2, #37671	; 0x9327
 801192e:	4293      	cmp	r3, r2
 8011930:	d117      	bne.n	8011962 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8011932:	4b7e      	ldr	r3, [pc, #504]	; (8011b2c <setAddrWindow+0x224>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b02      	cmp	r3, #2
 8011938:	d107      	bne.n	801194a <setAddrWindow+0x42>
 801193a:	88bb      	ldrh	r3, [r7, #4]
 801193c:	3320      	adds	r3, #32
 801193e:	b29b      	uxth	r3, r3
 8011940:	80bb      	strh	r3, [r7, #4]
 8011942:	883b      	ldrh	r3, [r7, #0]
 8011944:	3320      	adds	r3, #32
 8011946:	b29b      	uxth	r3, r3
 8011948:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 801194a:	4b78      	ldr	r3, [pc, #480]	; (8011b2c <setAddrWindow+0x224>)
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b03      	cmp	r3, #3
 8011950:	d107      	bne.n	8011962 <setAddrWindow+0x5a>
 8011952:	88fb      	ldrh	r3, [r7, #6]
 8011954:	3320      	adds	r3, #32
 8011956:	b29b      	uxth	r3, r3
 8011958:	80fb      	strh	r3, [r7, #6]
 801195a:	887b      	ldrh	r3, [r7, #2]
 801195c:	3320      	adds	r3, #32
 801195e:	b29b      	uxth	r3, r3
 8011960:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8011962:	4b71      	ldr	r3, [pc, #452]	; (8011b28 <setAddrWindow+0x220>)
 8011964:	881b      	ldrh	r3, [r3, #0]
 8011966:	f241 5226 	movw	r2, #5414	; 0x1526
 801196a:	4293      	cmp	r3, r2
 801196c:	d128      	bne.n	80119c0 <setAddrWindow+0xb8>
 801196e:	4b6f      	ldr	r3, [pc, #444]	; (8011b2c <setAddrWindow+0x224>)
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	f003 0301 	and.w	r3, r3, #1
 8011976:	2b00      	cmp	r3, #0
 8011978:	d022      	beq.n	80119c0 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 801197a:	887a      	ldrh	r2, [r7, #2]
 801197c:	88fb      	ldrh	r3, [r7, #6]
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	b29b      	uxth	r3, r3
 8011982:	81fb      	strh	r3, [r7, #14]
 8011984:	883a      	ldrh	r2, [r7, #0]
 8011986:	88bb      	ldrh	r3, [r7, #4]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 801198e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <setAddrWindow+0x9c>
 8011996:	f9b7 3000 	ldrsh.w	r3, [r7]
 801199a:	b29b      	uxth	r3, r3
 801199c:	3301      	adds	r3, #1
 801199e:	b29b      	uxth	r3, r3
 80119a0:	803b      	strh	r3, [r7, #0]
 80119a2:	e00d      	b.n	80119c0 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80119a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d109      	bne.n	80119c0 <setAddrWindow+0xb8>
 80119ac:	887a      	ldrh	r2, [r7, #2]
 80119ae:	89bb      	ldrh	r3, [r7, #12]
 80119b0:	4413      	add	r3, r2
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	807b      	strh	r3, [r7, #2]
 80119b6:	883a      	ldrh	r2, [r7, #0]
 80119b8:	89bb      	ldrh	r3, [r7, #12]
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	b29b      	uxth	r3, r3
 80119be:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 80119c0:	4b5b      	ldr	r3, [pc, #364]	; (8011b30 <setAddrWindow+0x228>)
 80119c2:	881b      	ldrh	r3, [r3, #0]
 80119c4:	f003 0301 	and.w	r3, r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d054      	beq.n	8011a76 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80119cc:	4b59      	ldr	r3, [pc, #356]	; (8011b34 <setAddrWindow+0x22c>)
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	b2d8      	uxtb	r0, r3
 80119d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119d6:	121b      	asrs	r3, r3, #8
 80119d8:	b21b      	sxth	r3, r3
 80119da:	b2d9      	uxtb	r1, r3
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	b2da      	uxtb	r2, r3
 80119e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119e4:	121b      	asrs	r3, r3, #8
 80119e6:	b21b      	sxth	r3, r3
 80119e8:	b2dc      	uxtb	r4, r3
 80119ea:	887b      	ldrh	r3, [r7, #2]
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	4623      	mov	r3, r4
 80119f2:	f7ff ff65 	bl	80118c0 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80119f6:	4b50      	ldr	r3, [pc, #320]	; (8011b38 <setAddrWindow+0x230>)
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	b2d8      	uxtb	r0, r3
 80119fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011a00:	121b      	asrs	r3, r3, #8
 8011a02:	b21b      	sxth	r3, r3
 8011a04:	b2d9      	uxtb	r1, r3
 8011a06:	88bb      	ldrh	r3, [r7, #4]
 8011a08:	b2da      	uxtb	r2, r3
 8011a0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a0e:	121b      	asrs	r3, r3, #8
 8011a10:	b21b      	sxth	r3, r3
 8011a12:	b2dc      	uxtb	r4, r3
 8011a14:	883b      	ldrh	r3, [r7, #0]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	4623      	mov	r3, r4
 8011a1c:	f7ff ff50 	bl	80118c0 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8011a20:	4b46      	ldr	r3, [pc, #280]	; (8011b3c <setAddrWindow+0x234>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d07b      	beq.n	8011b20 <setAddrWindow+0x218>
 8011a28:	4b3f      	ldr	r3, [pc, #252]	; (8011b28 <setAddrWindow+0x220>)
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	2b65      	cmp	r3, #101	; 0x65
 8011a2e:	d177      	bne.n	8011b20 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8011a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a34:	121b      	asrs	r3, r3, #8
 8011a36:	b21b      	sxth	r3, r3
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	723b      	strb	r3, [r7, #8]
 8011a3c:	88fb      	ldrh	r3, [r7, #6]
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8011a42:	4b3f      	ldr	r3, [pc, #252]	; (8011b40 <setAddrWindow+0x238>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	f107 0208 	add.w	r2, r7, #8
 8011a4a:	2102      	movs	r1, #2
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff fc41 	bl	80112d4 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8011a52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011a56:	121b      	asrs	r3, r3, #8
 8011a58:	b21b      	sxth	r3, r3
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	723b      	strb	r3, [r7, #8]
 8011a5e:	88bb      	ldrh	r3, [r7, #4]
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8011a64:	4b37      	ldr	r3, [pc, #220]	; (8011b44 <setAddrWindow+0x23c>)
 8011a66:	881b      	ldrh	r3, [r3, #0]
 8011a68:	f107 0208 	add.w	r2, r7, #8
 8011a6c:	2102      	movs	r1, #2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7ff fc30 	bl	80112d4 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8011a74:	e054      	b.n	8011b20 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8011a76:	4b32      	ldr	r3, [pc, #200]	; (8011b40 <setAddrWindow+0x238>)
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	88fa      	ldrh	r2, [r7, #6]
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7ff f9d0 	bl	8010e24 <WriteCmdData>
       WriteCmdData(_MP, y);
 8011a84:	4b2f      	ldr	r3, [pc, #188]	; (8011b44 <setAddrWindow+0x23c>)
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	88ba      	ldrh	r2, [r7, #4]
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7ff f9c9 	bl	8010e24 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8011a92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d105      	bne.n	8011aaa <setAddrWindow+0x1a2>
 8011a9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011aa2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d03a      	beq.n	8011b20 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8011aaa:	4b21      	ldr	r3, [pc, #132]	; (8011b30 <setAddrWindow+0x228>)
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	f003 0320 	and.w	r3, r3, #32
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d018      	beq.n	8011ae8 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8011ab6:	4b1d      	ldr	r3, [pc, #116]	; (8011b2c <setAddrWindow+0x224>)
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	f003 0301 	and.w	r3, r3, #1
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d009      	beq.n	8011ad6 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8011ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ac6:	021b      	lsls	r3, r3, #8
 8011ac8:	b21a      	sxth	r2, r3
 8011aca:	88bb      	ldrh	r3, [r7, #4]
 8011acc:	4313      	orrs	r3, r2
 8011ace:	80bb      	strh	r3, [r7, #4]
 8011ad0:	88bb      	ldrh	r3, [r7, #4]
 8011ad2:	803b      	strh	r3, [r7, #0]
 8011ad4:	e008      	b.n	8011ae8 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8011ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ada:	021b      	lsls	r3, r3, #8
 8011adc:	b21a      	sxth	r2, r3
 8011ade:	88fb      	ldrh	r3, [r7, #6]
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	80fb      	strh	r3, [r7, #6]
 8011ae4:	88fb      	ldrh	r3, [r7, #6]
 8011ae6:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8011ae8:	4b12      	ldr	r3, [pc, #72]	; (8011b34 <setAddrWindow+0x22c>)
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	88fa      	ldrh	r2, [r7, #6]
 8011aee:	4611      	mov	r1, r2
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff f997 	bl	8010e24 <WriteCmdData>
           WriteCmdData(_SP, y);
 8011af6:	4b10      	ldr	r3, [pc, #64]	; (8011b38 <setAddrWindow+0x230>)
 8011af8:	881b      	ldrh	r3, [r3, #0]
 8011afa:	88ba      	ldrh	r2, [r7, #4]
 8011afc:	4611      	mov	r1, r2
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff f990 	bl	8010e24 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8011b04:	4b10      	ldr	r3, [pc, #64]	; (8011b48 <setAddrWindow+0x240>)
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	887a      	ldrh	r2, [r7, #2]
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7ff f989 	bl	8010e24 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8011b12:	4b0e      	ldr	r3, [pc, #56]	; (8011b4c <setAddrWindow+0x244>)
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	883a      	ldrh	r2, [r7, #0]
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7ff f982 	bl	8010e24 <WriteCmdData>
}
 8011b20:	bf00      	nop
 8011b22:	3714      	adds	r7, #20
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd90      	pop	{r4, r7, pc}
 8011b28:	2000699c 	.word	0x2000699c
 8011b2c:	20000218 	.word	0x20000218
 8011b30:	2000698e 	.word	0x2000698e
 8011b34:	20006998 	.word	0x20006998
 8011b38:	20006990 	.word	0x20006990
 8011b3c:	20000216 	.word	0x20000216
 8011b40:	20006996 	.word	0x20006996
 8011b44:	20006994 	.word	0x20006994
 8011b48:	200069a0 	.word	0x200069a0
 8011b4c:	2000699a 	.word	0x2000699a

08011b50 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af02      	add	r7, sp, #8
 8011b56:	4603      	mov	r3, r0
 8011b58:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8011b5a:	4b08      	ldr	r3, [pc, #32]	; (8011b7c <fillScreen+0x2c>)
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	b21a      	sxth	r2, r3
 8011b60:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <fillScreen+0x30>)
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	b219      	sxth	r1, r3
 8011b66:	88fb      	ldrh	r3, [r7, #6]
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	2000      	movs	r0, #0
 8011b70:	f000 f984 	bl	8011e7c <fillRect>
}
 8011b74:	bf00      	nop
 8011b76:	3708      	adds	r7, #8
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	20000014 	.word	0x20000014
 8011b80:	20000016 	.word	0x20000016

08011b84 <drawFastVLine>:
        break;
    }
}

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8011b84:	b590      	push	{r4, r7, lr}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af02      	add	r7, sp, #8
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	461a      	mov	r2, r3
 8011b92:	4623      	mov	r3, r4
 8011b94:	80fb      	strh	r3, [r7, #6]
 8011b96:	4603      	mov	r3, r0
 8011b98:	80bb      	strh	r3, [r7, #4]
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	807b      	strh	r3, [r7, #2]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8011ba2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011ba6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011baa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011bae:	883b      	ldrh	r3, [r7, #0]
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	f000 f961 	bl	8011e7c <fillRect>
}
 8011bba:	bf00      	nop
 8011bbc:	370c      	adds	r7, #12
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd90      	pop	{r4, r7, pc}

08011bc2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8011bc2:	b590      	push	{r4, r7, lr}
 8011bc4:	b085      	sub	sp, #20
 8011bc6:	af02      	add	r7, sp, #8
 8011bc8:	4604      	mov	r4, r0
 8011bca:	4608      	mov	r0, r1
 8011bcc:	4611      	mov	r1, r2
 8011bce:	461a      	mov	r2, r3
 8011bd0:	4623      	mov	r3, r4
 8011bd2:	80fb      	strh	r3, [r7, #6]
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	80bb      	strh	r3, [r7, #4]
 8011bd8:	460b      	mov	r3, r1
 8011bda:	807b      	strh	r3, [r7, #2]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8011be0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011be4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011be8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011bec:	883b      	ldrh	r3, [r7, #0]
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	f000 f943 	bl	8011e7c <fillRect>
}
 8011bf6:	bf00      	nop
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd90      	pop	{r4, r7, pc}

08011bfe <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8011bfe:	b590      	push	{r4, r7, lr}
 8011c00:	b085      	sub	sp, #20
 8011c02:	af02      	add	r7, sp, #8
 8011c04:	4604      	mov	r4, r0
 8011c06:	4608      	mov	r0, r1
 8011c08:	4611      	mov	r1, r2
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	4623      	mov	r3, r4
 8011c0e:	80fb      	strh	r3, [r7, #6]
 8011c10:	4603      	mov	r3, r0
 8011c12:	80bb      	strh	r3, [r7, #4]
 8011c14:	460b      	mov	r3, r1
 8011c16:	807b      	strh	r3, [r7, #2]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8011c1c:	88ba      	ldrh	r2, [r7, #4]
 8011c1e:	887b      	ldrh	r3, [r7, #2]
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	b219      	sxth	r1, r3
 8011c26:	887b      	ldrh	r3, [r7, #2]
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	b21a      	sxth	r2, r3
 8011c32:	883b      	ldrh	r3, [r7, #0]
 8011c34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011c38:	f7ff ffa4 	bl	8011b84 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8011c3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011c40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011c44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011c48:	883b      	ldrh	r3, [r7, #0]
 8011c4a:	9301      	str	r3, [sp, #4]
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	2303      	movs	r3, #3
 8011c52:	f000 f804 	bl	8011c5e <fillCircleHelper>
}
 8011c56:	bf00      	nop
 8011c58:	370c      	adds	r7, #12
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd90      	pop	{r4, r7, pc}

08011c5e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8011c5e:	b590      	push	{r4, r7, lr}
 8011c60:	b087      	sub	sp, #28
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	4604      	mov	r4, r0
 8011c66:	4608      	mov	r0, r1
 8011c68:	4611      	mov	r1, r2
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4623      	mov	r3, r4
 8011c6e:	80fb      	strh	r3, [r7, #6]
 8011c70:	4603      	mov	r3, r0
 8011c72:	80bb      	strh	r3, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	807b      	strh	r3, [r7, #2]
 8011c78:	4613      	mov	r3, r2
 8011c7a:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8011c7c:	887b      	ldrh	r3, [r7, #2]
 8011c7e:	f1c3 0301 	rsb	r3, r3, #1
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8011c86:	2301      	movs	r3, #1
 8011c88:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8011c8a:	887b      	ldrh	r3, [r7, #2]
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	03d2      	lsls	r2, r2, #15
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8011c9c:	887b      	ldrh	r3, [r7, #2]
 8011c9e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8011ca0:	8a3b      	ldrh	r3, [r7, #16]
 8011ca2:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8011ca4:	89fb      	ldrh	r3, [r7, #14]
 8011ca6:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8011ca8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	3301      	adds	r3, #1
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8011cb4:	e095      	b.n	8011de2 <fillCircleHelper+0x184>
        if (f >= 0) {
 8011cb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	db0e      	blt.n	8011cdc <fillCircleHelper+0x7e>
            y--;
 8011cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8011cca:	8a7b      	ldrh	r3, [r7, #18]
 8011ccc:	3302      	adds	r3, #2
 8011cce:	b29b      	uxth	r3, r3
 8011cd0:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8011cd2:	8afa      	ldrh	r2, [r7, #22]
 8011cd4:	8a7b      	ldrh	r3, [r7, #18]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8011cdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8011ce8:	8abb      	ldrh	r3, [r7, #20]
 8011cea:	3302      	adds	r3, #2
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8011cf0:	8afa      	ldrh	r2, [r7, #22]
 8011cf2:	8abb      	ldrh	r3, [r7, #20]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8011cfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011cfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	db31      	blt.n	8011d6a <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8011d06:	787b      	ldrb	r3, [r7, #1]
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d013      	beq.n	8011d38 <fillCircleHelper+0xda>
 8011d10:	88fa      	ldrh	r2, [r7, #6]
 8011d12:	8a3b      	ldrh	r3, [r7, #16]
 8011d14:	4413      	add	r3, r2
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	b218      	sxth	r0, r3
 8011d1a:	88ba      	ldrh	r2, [r7, #4]
 8011d1c:	89fb      	ldrh	r3, [r7, #14]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	b219      	sxth	r1, r3
 8011d24:	89fb      	ldrh	r3, [r7, #14]
 8011d26:	005b      	lsls	r3, r3, #1
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d2c:	4413      	add	r3, r2
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	b21a      	sxth	r2, r3
 8011d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011d34:	f7ff ff26 	bl	8011b84 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8011d38:	787b      	ldrb	r3, [r7, #1]
 8011d3a:	f003 0302 	and.w	r3, r3, #2
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d013      	beq.n	8011d6a <fillCircleHelper+0x10c>
 8011d42:	88fa      	ldrh	r2, [r7, #6]
 8011d44:	8a3b      	ldrh	r3, [r7, #16]
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	b218      	sxth	r0, r3
 8011d4c:	88ba      	ldrh	r2, [r7, #4]
 8011d4e:	89fb      	ldrh	r3, [r7, #14]
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	b219      	sxth	r1, r3
 8011d56:	89fb      	ldrh	r3, [r7, #14]
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d5e:	4413      	add	r3, r2
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	b21a      	sxth	r2, r3
 8011d64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011d66:	f7ff ff0d 	bl	8011b84 <drawFastVLine>
        }
        if(y != py) {
 8011d6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011d6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d033      	beq.n	8011dde <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8011d76:	787b      	ldrb	r3, [r7, #1]
 8011d78:	f003 0301 	and.w	r3, r3, #1
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d013      	beq.n	8011da8 <fillCircleHelper+0x14a>
 8011d80:	88fa      	ldrh	r2, [r7, #6]
 8011d82:	897b      	ldrh	r3, [r7, #10]
 8011d84:	4413      	add	r3, r2
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	b218      	sxth	r0, r3
 8011d8a:	88ba      	ldrh	r2, [r7, #4]
 8011d8c:	89bb      	ldrh	r3, [r7, #12]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	b219      	sxth	r1, r3
 8011d94:	89bb      	ldrh	r3, [r7, #12]
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d9c:	4413      	add	r3, r2
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	b21a      	sxth	r2, r3
 8011da2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011da4:	f7ff feee 	bl	8011b84 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8011da8:	787b      	ldrb	r3, [r7, #1]
 8011daa:	f003 0302 	and.w	r3, r3, #2
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d013      	beq.n	8011dda <fillCircleHelper+0x17c>
 8011db2:	88fa      	ldrh	r2, [r7, #6]
 8011db4:	897b      	ldrh	r3, [r7, #10]
 8011db6:	1ad3      	subs	r3, r2, r3
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	b218      	sxth	r0, r3
 8011dbc:	88ba      	ldrh	r2, [r7, #4]
 8011dbe:	89bb      	ldrh	r3, [r7, #12]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	b219      	sxth	r1, r3
 8011dc6:	89bb      	ldrh	r3, [r7, #12]
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011dce:	4413      	add	r3, r2
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	b21a      	sxth	r2, r3
 8011dd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011dd6:	f7ff fed5 	bl	8011b84 <drawFastVLine>
            py = y;
 8011dda:	89fb      	ldrh	r3, [r7, #14]
 8011ddc:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8011dde:	8a3b      	ldrh	r3, [r7, #16]
 8011de0:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8011de2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011de6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	f6ff af63 	blt.w	8011cb6 <fillCircleHelper+0x58>
    }
}
 8011df0:	bf00      	nop
 8011df2:	bf00      	nop
 8011df4:	371c      	adds	r7, #28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}

08011dfa <drawRect>:

void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8011dfa:	b590      	push	{r4, r7, lr}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	4604      	mov	r4, r0
 8011e02:	4608      	mov	r0, r1
 8011e04:	4611      	mov	r1, r2
 8011e06:	461a      	mov	r2, r3
 8011e08:	4623      	mov	r3, r4
 8011e0a:	80fb      	strh	r3, [r7, #6]
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	80bb      	strh	r3, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	807b      	strh	r3, [r7, #2]
 8011e14:	4613      	mov	r3, r2
 8011e16:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8011e18:	8b3b      	ldrh	r3, [r7, #24]
 8011e1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011e22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011e26:	f7ff fecc 	bl	8011bc2 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8011e2a:	88ba      	ldrh	r2, [r7, #4]
 8011e2c:	883b      	ldrh	r3, [r7, #0]
 8011e2e:	4413      	add	r3, r2
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	3b01      	subs	r3, #1
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	b219      	sxth	r1, r3
 8011e38:	8b3b      	ldrh	r3, [r7, #24]
 8011e3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e3e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011e42:	f7ff febe 	bl	8011bc2 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8011e46:	8b3b      	ldrh	r3, [r7, #24]
 8011e48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011e4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011e50:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011e54:	f7ff fe96 	bl	8011b84 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8011e58:	88fa      	ldrh	r2, [r7, #6]
 8011e5a:	887b      	ldrh	r3, [r7, #2]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	3b01      	subs	r3, #1
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	b218      	sxth	r0, r3
 8011e66:	8b3b      	ldrh	r3, [r7, #24]
 8011e68:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011e6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011e70:	f7ff fe88 	bl	8011b84 <drawFastVLine>
}
 8011e74:	bf00      	nop
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd90      	pop	{r4, r7, pc}

08011e7c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8011e7c:	b590      	push	{r4, r7, lr}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4604      	mov	r4, r0
 8011e84:	4608      	mov	r0, r1
 8011e86:	4611      	mov	r1, r2
 8011e88:	461a      	mov	r2, r3
 8011e8a:	4623      	mov	r3, r4
 8011e8c:	80fb      	strh	r3, [r7, #6]
 8011e8e:	4603      	mov	r3, r0
 8011e90:	80bb      	strh	r3, [r7, #4]
 8011e92:	460b      	mov	r3, r1
 8011e94:	807b      	strh	r3, [r7, #2]
 8011e96:	4613      	mov	r3, r2
 8011e98:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8011e9a:	4bb9      	ldr	r3, [pc, #740]	; (8012180 <fillRect+0x304>)
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d005      	beq.n	8011eae <fillRect+0x32>
 8011ea2:	8c3b      	ldrh	r3, [r7, #32]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fe ff9d 	bl	8010de4 <color565_to_555>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8011eae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	da08      	bge.n	8011ec8 <fillRect+0x4c>
        w = -w;
 8011eb6:	887b      	ldrh	r3, [r7, #2]
 8011eb8:	425b      	negs	r3, r3
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	807b      	strh	r3, [r7, #2]
        x -= w;
 8011ebe:	88fa      	ldrh	r2, [r7, #6]
 8011ec0:	887b      	ldrh	r3, [r7, #2]
 8011ec2:	1ad3      	subs	r3, r2, r3
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8011ec8:	88fa      	ldrh	r2, [r7, #6]
 8011eca:	887b      	ldrh	r3, [r7, #2]
 8011ecc:	4413      	add	r3, r2
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8011ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	da01      	bge.n	8011ede <fillRect+0x62>
        x = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8011ede:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8011ee2:	f7fe ff67 	bl	8010db4 <width>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	429c      	cmp	r4, r3
 8011eea:	dd03      	ble.n	8011ef4 <fillRect+0x78>
        end = width();
 8011eec:	f7fe ff62 	bl	8010db4 <width>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8011ef4:	89fa      	ldrh	r2, [r7, #14]
 8011ef6:	88fb      	ldrh	r3, [r7, #6]
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8011efe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	da08      	bge.n	8011f18 <fillRect+0x9c>
        h = -h;
 8011f06:	883b      	ldrh	r3, [r7, #0]
 8011f08:	425b      	negs	r3, r3
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	803b      	strh	r3, [r7, #0]
        y -= h;
 8011f0e:	88ba      	ldrh	r2, [r7, #4]
 8011f10:	883b      	ldrh	r3, [r7, #0]
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8011f18:	88ba      	ldrh	r2, [r7, #4]
 8011f1a:	883b      	ldrh	r3, [r7, #0]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8011f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	da01      	bge.n	8011f2e <fillRect+0xb2>
        y = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8011f2e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8011f32:	f7fe ff4b 	bl	8010dcc <height>
 8011f36:	4603      	mov	r3, r0
 8011f38:	429c      	cmp	r4, r3
 8011f3a:	dd03      	ble.n	8011f44 <fillRect+0xc8>
        end = height();
 8011f3c:	f7fe ff46 	bl	8010dcc <height>
 8011f40:	4603      	mov	r3, r0
 8011f42:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8011f44:	89fa      	ldrh	r2, [r7, #14]
 8011f46:	88bb      	ldrh	r3, [r7, #4]
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8011f4e:	88fa      	ldrh	r2, [r7, #6]
 8011f50:	887b      	ldrh	r3, [r7, #2]
 8011f52:	4413      	add	r3, r2
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	3b01      	subs	r3, #1
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	b21c      	sxth	r4, r3
 8011f5c:	88ba      	ldrh	r2, [r7, #4]
 8011f5e:	883b      	ldrh	r3, [r7, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	3b01      	subs	r3, #1
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	b21b      	sxth	r3, r3
 8011f6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011f6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011f72:	4622      	mov	r2, r4
 8011f74:	f7ff fcc8 	bl	8011908 <setAddrWindow>
    CS_ACTIVE;
 8011f78:	2108      	movs	r1, #8
 8011f7a:	4882      	ldr	r0, [pc, #520]	; (8012184 <fillRect+0x308>)
 8011f7c:	f7fe fefa 	bl	8010d74 <PIN_LOW>
    WriteCmd(_MW);
 8011f80:	2120      	movs	r1, #32
 8011f82:	4881      	ldr	r0, [pc, #516]	; (8012188 <fillRect+0x30c>)
 8011f84:	f7fe fef6 	bl	8010d74 <PIN_LOW>
 8011f88:	4b80      	ldr	r3, [pc, #512]	; (801218c <fillRect+0x310>)
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	0a1b      	lsrs	r3, r3, #8
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	737b      	strb	r3, [r7, #13]
 8011f92:	4b7e      	ldr	r3, [pc, #504]	; (801218c <fillRect+0x310>)
 8011f94:	881b      	ldrh	r3, [r3, #0]
 8011f96:	733b      	strb	r3, [r7, #12]
 8011f98:	4b7b      	ldr	r3, [pc, #492]	; (8012188 <fillRect+0x30c>)
 8011f9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f9e:	619a      	str	r2, [r3, #24]
 8011fa0:	4b7b      	ldr	r3, [pc, #492]	; (8012190 <fillRect+0x314>)
 8011fa2:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011fa6:	619a      	str	r2, [r3, #24]
 8011fa8:	4b76      	ldr	r3, [pc, #472]	; (8012184 <fillRect+0x308>)
 8011faa:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011fae:	619a      	str	r2, [r3, #24]
 8011fb0:	7b7b      	ldrb	r3, [r7, #13]
 8011fb2:	039b      	lsls	r3, r3, #14
 8011fb4:	4a74      	ldr	r2, [pc, #464]	; (8012188 <fillRect+0x30c>)
 8011fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011fba:	6193      	str	r3, [r2, #24]
 8011fbc:	7b7b      	ldrb	r3, [r7, #13]
 8011fbe:	029b      	lsls	r3, r3, #10
 8011fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011fc4:	7b7b      	ldrb	r3, [r7, #13]
 8011fc6:	019b      	lsls	r3, r3, #6
 8011fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fcc:	431a      	orrs	r2, r3
 8011fce:	7b7b      	ldrb	r3, [r7, #13]
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011fd6:	431a      	orrs	r2, r3
 8011fd8:	4b6d      	ldr	r3, [pc, #436]	; (8012190 <fillRect+0x314>)
 8011fda:	619a      	str	r2, [r3, #24]
 8011fdc:	7b7b      	ldrb	r3, [r7, #13]
 8011fde:	031b      	lsls	r3, r3, #12
 8011fe0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011fe4:	7b7b      	ldrb	r3, [r7, #13]
 8011fe6:	035b      	lsls	r3, r3, #13
 8011fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011fec:	431a      	orrs	r2, r3
 8011fee:	7b7b      	ldrb	r3, [r7, #13]
 8011ff0:	029b      	lsls	r3, r3, #10
 8011ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ff6:	431a      	orrs	r2, r3
 8011ff8:	7b7b      	ldrb	r3, [r7, #13]
 8011ffa:	019b      	lsls	r3, r3, #6
 8011ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012000:	431a      	orrs	r2, r3
 8012002:	4b60      	ldr	r3, [pc, #384]	; (8012184 <fillRect+0x308>)
 8012004:	619a      	str	r2, [r3, #24]
 8012006:	2101      	movs	r1, #1
 8012008:	4862      	ldr	r0, [pc, #392]	; (8012194 <fillRect+0x318>)
 801200a:	f7fe feb3 	bl	8010d74 <PIN_LOW>
 801200e:	2101      	movs	r1, #1
 8012010:	4860      	ldr	r0, [pc, #384]	; (8012194 <fillRect+0x318>)
 8012012:	f7fe feaf 	bl	8010d74 <PIN_LOW>
 8012016:	2101      	movs	r1, #1
 8012018:	485e      	ldr	r0, [pc, #376]	; (8012194 <fillRect+0x318>)
 801201a:	f7fe feab 	bl	8010d74 <PIN_LOW>
 801201e:	2101      	movs	r1, #1
 8012020:	485c      	ldr	r0, [pc, #368]	; (8012194 <fillRect+0x318>)
 8012022:	f7fe fea7 	bl	8010d74 <PIN_LOW>
 8012026:	2101      	movs	r1, #1
 8012028:	485a      	ldr	r0, [pc, #360]	; (8012194 <fillRect+0x318>)
 801202a:	f7fe fea3 	bl	8010d74 <PIN_LOW>
 801202e:	2101      	movs	r1, #1
 8012030:	4858      	ldr	r0, [pc, #352]	; (8012194 <fillRect+0x318>)
 8012032:	f7fe fe9f 	bl	8010d74 <PIN_LOW>
 8012036:	2101      	movs	r1, #1
 8012038:	4856      	ldr	r0, [pc, #344]	; (8012194 <fillRect+0x318>)
 801203a:	f7fe fe9b 	bl	8010d74 <PIN_LOW>
 801203e:	2101      	movs	r1, #1
 8012040:	4854      	ldr	r0, [pc, #336]	; (8012194 <fillRect+0x318>)
 8012042:	f7fe fe97 	bl	8010d74 <PIN_LOW>
 8012046:	2101      	movs	r1, #1
 8012048:	4852      	ldr	r0, [pc, #328]	; (8012194 <fillRect+0x318>)
 801204a:	f7fe fe93 	bl	8010d74 <PIN_LOW>
 801204e:	2101      	movs	r1, #1
 8012050:	4850      	ldr	r0, [pc, #320]	; (8012194 <fillRect+0x318>)
 8012052:	f7fe fe8f 	bl	8010d74 <PIN_LOW>
 8012056:	2101      	movs	r1, #1
 8012058:	484e      	ldr	r0, [pc, #312]	; (8012194 <fillRect+0x318>)
 801205a:	f7fe fe8b 	bl	8010d74 <PIN_LOW>
 801205e:	2101      	movs	r1, #1
 8012060:	484c      	ldr	r0, [pc, #304]	; (8012194 <fillRect+0x318>)
 8012062:	f7fe fe87 	bl	8010d74 <PIN_LOW>
 8012066:	2101      	movs	r1, #1
 8012068:	484a      	ldr	r0, [pc, #296]	; (8012194 <fillRect+0x318>)
 801206a:	f7fe fe83 	bl	8010d74 <PIN_LOW>
 801206e:	2101      	movs	r1, #1
 8012070:	4848      	ldr	r0, [pc, #288]	; (8012194 <fillRect+0x318>)
 8012072:	f7fe fe7f 	bl	8010d74 <PIN_LOW>
 8012076:	2101      	movs	r1, #1
 8012078:	4846      	ldr	r0, [pc, #280]	; (8012194 <fillRect+0x318>)
 801207a:	f7fe fe7b 	bl	8010d74 <PIN_LOW>
 801207e:	2101      	movs	r1, #1
 8012080:	4844      	ldr	r0, [pc, #272]	; (8012194 <fillRect+0x318>)
 8012082:	f7fe fe77 	bl	8010d74 <PIN_LOW>
 8012086:	2101      	movs	r1, #1
 8012088:	4842      	ldr	r0, [pc, #264]	; (8012194 <fillRect+0x318>)
 801208a:	f7fe fe73 	bl	8010d74 <PIN_LOW>
 801208e:	2101      	movs	r1, #1
 8012090:	4840      	ldr	r0, [pc, #256]	; (8012194 <fillRect+0x318>)
 8012092:	f7fe fe7f 	bl	8010d94 <PIN_HIGH>
 8012096:	2101      	movs	r1, #1
 8012098:	483e      	ldr	r0, [pc, #248]	; (8012194 <fillRect+0x318>)
 801209a:	f7fe fe7b 	bl	8010d94 <PIN_HIGH>
 801209e:	4b3a      	ldr	r3, [pc, #232]	; (8012188 <fillRect+0x30c>)
 80120a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80120a4:	619a      	str	r2, [r3, #24]
 80120a6:	4b3a      	ldr	r3, [pc, #232]	; (8012190 <fillRect+0x314>)
 80120a8:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80120ac:	619a      	str	r2, [r3, #24]
 80120ae:	4b35      	ldr	r3, [pc, #212]	; (8012184 <fillRect+0x308>)
 80120b0:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80120b4:	619a      	str	r2, [r3, #24]
 80120b6:	7b3b      	ldrb	r3, [r7, #12]
 80120b8:	039b      	lsls	r3, r3, #14
 80120ba:	4a33      	ldr	r2, [pc, #204]	; (8012188 <fillRect+0x30c>)
 80120bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120c0:	6193      	str	r3, [r2, #24]
 80120c2:	7b3b      	ldrb	r3, [r7, #12]
 80120c4:	029b      	lsls	r3, r3, #10
 80120c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80120ca:	7b3b      	ldrb	r3, [r7, #12]
 80120cc:	019b      	lsls	r3, r3, #6
 80120ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120d2:	431a      	orrs	r2, r3
 80120d4:	7b3b      	ldrb	r3, [r7, #12]
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80120dc:	431a      	orrs	r2, r3
 80120de:	4b2c      	ldr	r3, [pc, #176]	; (8012190 <fillRect+0x314>)
 80120e0:	619a      	str	r2, [r3, #24]
 80120e2:	7b3b      	ldrb	r3, [r7, #12]
 80120e4:	031b      	lsls	r3, r3, #12
 80120e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80120ea:	7b3b      	ldrb	r3, [r7, #12]
 80120ec:	035b      	lsls	r3, r3, #13
 80120ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120f2:	431a      	orrs	r2, r3
 80120f4:	7b3b      	ldrb	r3, [r7, #12]
 80120f6:	029b      	lsls	r3, r3, #10
 80120f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120fc:	431a      	orrs	r2, r3
 80120fe:	7b3b      	ldrb	r3, [r7, #12]
 8012100:	019b      	lsls	r3, r3, #6
 8012102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012106:	431a      	orrs	r2, r3
 8012108:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <fillRect+0x308>)
 801210a:	619a      	str	r2, [r3, #24]
 801210c:	2101      	movs	r1, #1
 801210e:	4821      	ldr	r0, [pc, #132]	; (8012194 <fillRect+0x318>)
 8012110:	f7fe fe30 	bl	8010d74 <PIN_LOW>
 8012114:	2101      	movs	r1, #1
 8012116:	481f      	ldr	r0, [pc, #124]	; (8012194 <fillRect+0x318>)
 8012118:	f7fe fe2c 	bl	8010d74 <PIN_LOW>
 801211c:	2101      	movs	r1, #1
 801211e:	481d      	ldr	r0, [pc, #116]	; (8012194 <fillRect+0x318>)
 8012120:	f7fe fe28 	bl	8010d74 <PIN_LOW>
 8012124:	2101      	movs	r1, #1
 8012126:	481b      	ldr	r0, [pc, #108]	; (8012194 <fillRect+0x318>)
 8012128:	f7fe fe24 	bl	8010d74 <PIN_LOW>
 801212c:	2101      	movs	r1, #1
 801212e:	4819      	ldr	r0, [pc, #100]	; (8012194 <fillRect+0x318>)
 8012130:	f7fe fe20 	bl	8010d74 <PIN_LOW>
 8012134:	2101      	movs	r1, #1
 8012136:	4817      	ldr	r0, [pc, #92]	; (8012194 <fillRect+0x318>)
 8012138:	f7fe fe1c 	bl	8010d74 <PIN_LOW>
 801213c:	2101      	movs	r1, #1
 801213e:	4815      	ldr	r0, [pc, #84]	; (8012194 <fillRect+0x318>)
 8012140:	f7fe fe18 	bl	8010d74 <PIN_LOW>
 8012144:	2101      	movs	r1, #1
 8012146:	4813      	ldr	r0, [pc, #76]	; (8012194 <fillRect+0x318>)
 8012148:	f7fe fe14 	bl	8010d74 <PIN_LOW>
 801214c:	2101      	movs	r1, #1
 801214e:	4811      	ldr	r0, [pc, #68]	; (8012194 <fillRect+0x318>)
 8012150:	f7fe fe10 	bl	8010d74 <PIN_LOW>
 8012154:	2101      	movs	r1, #1
 8012156:	480f      	ldr	r0, [pc, #60]	; (8012194 <fillRect+0x318>)
 8012158:	f7fe fe0c 	bl	8010d74 <PIN_LOW>
 801215c:	2101      	movs	r1, #1
 801215e:	480d      	ldr	r0, [pc, #52]	; (8012194 <fillRect+0x318>)
 8012160:	f7fe fe08 	bl	8010d74 <PIN_LOW>
 8012164:	2101      	movs	r1, #1
 8012166:	480b      	ldr	r0, [pc, #44]	; (8012194 <fillRect+0x318>)
 8012168:	f7fe fe04 	bl	8010d74 <PIN_LOW>
 801216c:	2101      	movs	r1, #1
 801216e:	4809      	ldr	r0, [pc, #36]	; (8012194 <fillRect+0x318>)
 8012170:	f7fe fe00 	bl	8010d74 <PIN_LOW>
 8012174:	2101      	movs	r1, #1
 8012176:	4807      	ldr	r0, [pc, #28]	; (8012194 <fillRect+0x318>)
 8012178:	f7fe fdfc 	bl	8010d74 <PIN_LOW>
 801217c:	2101      	movs	r1, #1
 801217e:	e00b      	b.n	8012198 <fillRect+0x31c>
 8012180:	20000217 	.word	0x20000217
 8012184:	40021400 	.word	0x40021400
 8012188:	40020c00 	.word	0x40020c00
 801218c:	2000698c 	.word	0x2000698c
 8012190:	40021000 	.word	0x40021000
 8012194:	40020800 	.word	0x40020800
 8012198:	48b7      	ldr	r0, [pc, #732]	; (8012478 <fillRect+0x5fc>)
 801219a:	f7fe fdeb 	bl	8010d74 <PIN_LOW>
 801219e:	2101      	movs	r1, #1
 80121a0:	48b5      	ldr	r0, [pc, #724]	; (8012478 <fillRect+0x5fc>)
 80121a2:	f7fe fde7 	bl	8010d74 <PIN_LOW>
 80121a6:	2101      	movs	r1, #1
 80121a8:	48b3      	ldr	r0, [pc, #716]	; (8012478 <fillRect+0x5fc>)
 80121aa:	f7fe fde3 	bl	8010d74 <PIN_LOW>
 80121ae:	2101      	movs	r1, #1
 80121b0:	48b1      	ldr	r0, [pc, #708]	; (8012478 <fillRect+0x5fc>)
 80121b2:	f7fe fdef 	bl	8010d94 <PIN_HIGH>
 80121b6:	2101      	movs	r1, #1
 80121b8:	48af      	ldr	r0, [pc, #700]	; (8012478 <fillRect+0x5fc>)
 80121ba:	f7fe fdeb 	bl	8010d94 <PIN_HIGH>
 80121be:	2120      	movs	r1, #32
 80121c0:	48ae      	ldr	r0, [pc, #696]	; (801247c <fillRect+0x600>)
 80121c2:	f7fe fde7 	bl	8010d94 <PIN_HIGH>
    if (h > w) {
 80121c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80121ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	dd05      	ble.n	80121de <fillRect+0x362>
        end = h;
 80121d2:	883b      	ldrh	r3, [r7, #0]
 80121d4:	81fb      	strh	r3, [r7, #14]
        h = w;
 80121d6:	887b      	ldrh	r3, [r7, #2]
 80121d8:	803b      	strh	r3, [r7, #0]
        w = end;
 80121da:	89fb      	ldrh	r3, [r7, #14]
 80121dc:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80121de:	8c3b      	ldrh	r3, [r7, #32]
 80121e0:	0a1b      	lsrs	r3, r3, #8
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	72fb      	strb	r3, [r7, #11]
 80121e6:	8c3b      	ldrh	r3, [r7, #32]
 80121e8:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 80121ea:	e110      	b.n	801240e <fillRect+0x592>
        end = w;
 80121ec:	887b      	ldrh	r3, [r7, #2]
 80121ee:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 80121f0:	4ba2      	ldr	r3, [pc, #648]	; (801247c <fillRect+0x600>)
 80121f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80121f6:	619a      	str	r2, [r3, #24]
 80121f8:	4ba1      	ldr	r3, [pc, #644]	; (8012480 <fillRect+0x604>)
 80121fa:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80121fe:	619a      	str	r2, [r3, #24]
 8012200:	4ba0      	ldr	r3, [pc, #640]	; (8012484 <fillRect+0x608>)
 8012202:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012206:	619a      	str	r2, [r3, #24]
 8012208:	7afb      	ldrb	r3, [r7, #11]
 801220a:	039b      	lsls	r3, r3, #14
 801220c:	4a9b      	ldr	r2, [pc, #620]	; (801247c <fillRect+0x600>)
 801220e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012212:	6193      	str	r3, [r2, #24]
 8012214:	7afb      	ldrb	r3, [r7, #11]
 8012216:	029b      	lsls	r3, r3, #10
 8012218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801221c:	7afb      	ldrb	r3, [r7, #11]
 801221e:	019b      	lsls	r3, r3, #6
 8012220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012224:	431a      	orrs	r2, r3
 8012226:	7afb      	ldrb	r3, [r7, #11]
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801222e:	431a      	orrs	r2, r3
 8012230:	4b93      	ldr	r3, [pc, #588]	; (8012480 <fillRect+0x604>)
 8012232:	619a      	str	r2, [r3, #24]
 8012234:	7afb      	ldrb	r3, [r7, #11]
 8012236:	031b      	lsls	r3, r3, #12
 8012238:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	035b      	lsls	r3, r3, #13
 8012240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012244:	431a      	orrs	r2, r3
 8012246:	7afb      	ldrb	r3, [r7, #11]
 8012248:	029b      	lsls	r3, r3, #10
 801224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801224e:	431a      	orrs	r2, r3
 8012250:	7afb      	ldrb	r3, [r7, #11]
 8012252:	019b      	lsls	r3, r3, #6
 8012254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012258:	431a      	orrs	r2, r3
 801225a:	4b8a      	ldr	r3, [pc, #552]	; (8012484 <fillRect+0x608>)
 801225c:	619a      	str	r2, [r3, #24]
 801225e:	2101      	movs	r1, #1
 8012260:	4885      	ldr	r0, [pc, #532]	; (8012478 <fillRect+0x5fc>)
 8012262:	f7fe fd87 	bl	8010d74 <PIN_LOW>
 8012266:	2101      	movs	r1, #1
 8012268:	4883      	ldr	r0, [pc, #524]	; (8012478 <fillRect+0x5fc>)
 801226a:	f7fe fd83 	bl	8010d74 <PIN_LOW>
 801226e:	2101      	movs	r1, #1
 8012270:	4881      	ldr	r0, [pc, #516]	; (8012478 <fillRect+0x5fc>)
 8012272:	f7fe fd7f 	bl	8010d74 <PIN_LOW>
 8012276:	2101      	movs	r1, #1
 8012278:	487f      	ldr	r0, [pc, #508]	; (8012478 <fillRect+0x5fc>)
 801227a:	f7fe fd7b 	bl	8010d74 <PIN_LOW>
 801227e:	2101      	movs	r1, #1
 8012280:	487d      	ldr	r0, [pc, #500]	; (8012478 <fillRect+0x5fc>)
 8012282:	f7fe fd77 	bl	8010d74 <PIN_LOW>
 8012286:	2101      	movs	r1, #1
 8012288:	487b      	ldr	r0, [pc, #492]	; (8012478 <fillRect+0x5fc>)
 801228a:	f7fe fd73 	bl	8010d74 <PIN_LOW>
 801228e:	2101      	movs	r1, #1
 8012290:	4879      	ldr	r0, [pc, #484]	; (8012478 <fillRect+0x5fc>)
 8012292:	f7fe fd6f 	bl	8010d74 <PIN_LOW>
 8012296:	2101      	movs	r1, #1
 8012298:	4877      	ldr	r0, [pc, #476]	; (8012478 <fillRect+0x5fc>)
 801229a:	f7fe fd6b 	bl	8010d74 <PIN_LOW>
 801229e:	2101      	movs	r1, #1
 80122a0:	4875      	ldr	r0, [pc, #468]	; (8012478 <fillRect+0x5fc>)
 80122a2:	f7fe fd67 	bl	8010d74 <PIN_LOW>
 80122a6:	2101      	movs	r1, #1
 80122a8:	4873      	ldr	r0, [pc, #460]	; (8012478 <fillRect+0x5fc>)
 80122aa:	f7fe fd63 	bl	8010d74 <PIN_LOW>
 80122ae:	2101      	movs	r1, #1
 80122b0:	4871      	ldr	r0, [pc, #452]	; (8012478 <fillRect+0x5fc>)
 80122b2:	f7fe fd5f 	bl	8010d74 <PIN_LOW>
 80122b6:	2101      	movs	r1, #1
 80122b8:	486f      	ldr	r0, [pc, #444]	; (8012478 <fillRect+0x5fc>)
 80122ba:	f7fe fd5b 	bl	8010d74 <PIN_LOW>
 80122be:	2101      	movs	r1, #1
 80122c0:	486d      	ldr	r0, [pc, #436]	; (8012478 <fillRect+0x5fc>)
 80122c2:	f7fe fd57 	bl	8010d74 <PIN_LOW>
 80122c6:	2101      	movs	r1, #1
 80122c8:	486b      	ldr	r0, [pc, #428]	; (8012478 <fillRect+0x5fc>)
 80122ca:	f7fe fd53 	bl	8010d74 <PIN_LOW>
 80122ce:	2101      	movs	r1, #1
 80122d0:	4869      	ldr	r0, [pc, #420]	; (8012478 <fillRect+0x5fc>)
 80122d2:	f7fe fd4f 	bl	8010d74 <PIN_LOW>
 80122d6:	2101      	movs	r1, #1
 80122d8:	4867      	ldr	r0, [pc, #412]	; (8012478 <fillRect+0x5fc>)
 80122da:	f7fe fd4b 	bl	8010d74 <PIN_LOW>
 80122de:	2101      	movs	r1, #1
 80122e0:	4865      	ldr	r0, [pc, #404]	; (8012478 <fillRect+0x5fc>)
 80122e2:	f7fe fd47 	bl	8010d74 <PIN_LOW>
 80122e6:	2101      	movs	r1, #1
 80122e8:	4863      	ldr	r0, [pc, #396]	; (8012478 <fillRect+0x5fc>)
 80122ea:	f7fe fd53 	bl	8010d94 <PIN_HIGH>
 80122ee:	2101      	movs	r1, #1
 80122f0:	4861      	ldr	r0, [pc, #388]	; (8012478 <fillRect+0x5fc>)
 80122f2:	f7fe fd4f 	bl	8010d94 <PIN_HIGH>
            write8(lo);
 80122f6:	4b61      	ldr	r3, [pc, #388]	; (801247c <fillRect+0x600>)
 80122f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80122fc:	619a      	str	r2, [r3, #24]
 80122fe:	4b60      	ldr	r3, [pc, #384]	; (8012480 <fillRect+0x604>)
 8012300:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012304:	619a      	str	r2, [r3, #24]
 8012306:	4b5f      	ldr	r3, [pc, #380]	; (8012484 <fillRect+0x608>)
 8012308:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801230c:	619a      	str	r2, [r3, #24]
 801230e:	7abb      	ldrb	r3, [r7, #10]
 8012310:	039b      	lsls	r3, r3, #14
 8012312:	4a5a      	ldr	r2, [pc, #360]	; (801247c <fillRect+0x600>)
 8012314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012318:	6193      	str	r3, [r2, #24]
 801231a:	7abb      	ldrb	r3, [r7, #10]
 801231c:	029b      	lsls	r3, r3, #10
 801231e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012322:	7abb      	ldrb	r3, [r7, #10]
 8012324:	019b      	lsls	r3, r3, #6
 8012326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801232a:	431a      	orrs	r2, r3
 801232c:	7abb      	ldrb	r3, [r7, #10]
 801232e:	00db      	lsls	r3, r3, #3
 8012330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012334:	431a      	orrs	r2, r3
 8012336:	4b52      	ldr	r3, [pc, #328]	; (8012480 <fillRect+0x604>)
 8012338:	619a      	str	r2, [r3, #24]
 801233a:	7abb      	ldrb	r3, [r7, #10]
 801233c:	031b      	lsls	r3, r3, #12
 801233e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012342:	7abb      	ldrb	r3, [r7, #10]
 8012344:	035b      	lsls	r3, r3, #13
 8012346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801234a:	431a      	orrs	r2, r3
 801234c:	7abb      	ldrb	r3, [r7, #10]
 801234e:	029b      	lsls	r3, r3, #10
 8012350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012354:	431a      	orrs	r2, r3
 8012356:	7abb      	ldrb	r3, [r7, #10]
 8012358:	019b      	lsls	r3, r3, #6
 801235a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801235e:	431a      	orrs	r2, r3
 8012360:	4b48      	ldr	r3, [pc, #288]	; (8012484 <fillRect+0x608>)
 8012362:	619a      	str	r2, [r3, #24]
 8012364:	2101      	movs	r1, #1
 8012366:	4844      	ldr	r0, [pc, #272]	; (8012478 <fillRect+0x5fc>)
 8012368:	f7fe fd04 	bl	8010d74 <PIN_LOW>
 801236c:	2101      	movs	r1, #1
 801236e:	4842      	ldr	r0, [pc, #264]	; (8012478 <fillRect+0x5fc>)
 8012370:	f7fe fd00 	bl	8010d74 <PIN_LOW>
 8012374:	2101      	movs	r1, #1
 8012376:	4840      	ldr	r0, [pc, #256]	; (8012478 <fillRect+0x5fc>)
 8012378:	f7fe fcfc 	bl	8010d74 <PIN_LOW>
 801237c:	2101      	movs	r1, #1
 801237e:	483e      	ldr	r0, [pc, #248]	; (8012478 <fillRect+0x5fc>)
 8012380:	f7fe fcf8 	bl	8010d74 <PIN_LOW>
 8012384:	2101      	movs	r1, #1
 8012386:	483c      	ldr	r0, [pc, #240]	; (8012478 <fillRect+0x5fc>)
 8012388:	f7fe fcf4 	bl	8010d74 <PIN_LOW>
 801238c:	2101      	movs	r1, #1
 801238e:	483a      	ldr	r0, [pc, #232]	; (8012478 <fillRect+0x5fc>)
 8012390:	f7fe fcf0 	bl	8010d74 <PIN_LOW>
 8012394:	2101      	movs	r1, #1
 8012396:	4838      	ldr	r0, [pc, #224]	; (8012478 <fillRect+0x5fc>)
 8012398:	f7fe fcec 	bl	8010d74 <PIN_LOW>
 801239c:	2101      	movs	r1, #1
 801239e:	4836      	ldr	r0, [pc, #216]	; (8012478 <fillRect+0x5fc>)
 80123a0:	f7fe fce8 	bl	8010d74 <PIN_LOW>
 80123a4:	2101      	movs	r1, #1
 80123a6:	4834      	ldr	r0, [pc, #208]	; (8012478 <fillRect+0x5fc>)
 80123a8:	f7fe fce4 	bl	8010d74 <PIN_LOW>
 80123ac:	2101      	movs	r1, #1
 80123ae:	4832      	ldr	r0, [pc, #200]	; (8012478 <fillRect+0x5fc>)
 80123b0:	f7fe fce0 	bl	8010d74 <PIN_LOW>
 80123b4:	2101      	movs	r1, #1
 80123b6:	4830      	ldr	r0, [pc, #192]	; (8012478 <fillRect+0x5fc>)
 80123b8:	f7fe fcdc 	bl	8010d74 <PIN_LOW>
 80123bc:	2101      	movs	r1, #1
 80123be:	482e      	ldr	r0, [pc, #184]	; (8012478 <fillRect+0x5fc>)
 80123c0:	f7fe fcd8 	bl	8010d74 <PIN_LOW>
 80123c4:	2101      	movs	r1, #1
 80123c6:	482c      	ldr	r0, [pc, #176]	; (8012478 <fillRect+0x5fc>)
 80123c8:	f7fe fcd4 	bl	8010d74 <PIN_LOW>
 80123cc:	2101      	movs	r1, #1
 80123ce:	482a      	ldr	r0, [pc, #168]	; (8012478 <fillRect+0x5fc>)
 80123d0:	f7fe fcd0 	bl	8010d74 <PIN_LOW>
 80123d4:	2101      	movs	r1, #1
 80123d6:	4828      	ldr	r0, [pc, #160]	; (8012478 <fillRect+0x5fc>)
 80123d8:	f7fe fccc 	bl	8010d74 <PIN_LOW>
 80123dc:	2101      	movs	r1, #1
 80123de:	4826      	ldr	r0, [pc, #152]	; (8012478 <fillRect+0x5fc>)
 80123e0:	f7fe fcc8 	bl	8010d74 <PIN_LOW>
 80123e4:	2101      	movs	r1, #1
 80123e6:	4824      	ldr	r0, [pc, #144]	; (8012478 <fillRect+0x5fc>)
 80123e8:	f7fe fcc4 	bl	8010d74 <PIN_LOW>
 80123ec:	2101      	movs	r1, #1
 80123ee:	4822      	ldr	r0, [pc, #136]	; (8012478 <fillRect+0x5fc>)
 80123f0:	f7fe fcd0 	bl	8010d94 <PIN_HIGH>
 80123f4:	2101      	movs	r1, #1
 80123f6:	4820      	ldr	r0, [pc, #128]	; (8012478 <fillRect+0x5fc>)
 80123f8:	f7fe fccc 	bl	8010d94 <PIN_HIGH>
        } while (--end != 0);
 80123fc:	89fb      	ldrh	r3, [r7, #14]
 80123fe:	3b01      	subs	r3, #1
 8012400:	b29b      	uxth	r3, r3
 8012402:	81fb      	strh	r3, [r7, #14]
 8012404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012408:	2b00      	cmp	r3, #0
 801240a:	f47f aef1 	bne.w	80121f0 <fillRect+0x374>
    while (h-- > 0) {
 801240e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012412:	b29a      	uxth	r2, r3
 8012414:	3a01      	subs	r2, #1
 8012416:	b292      	uxth	r2, r2
 8012418:	803a      	strh	r2, [r7, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	f73f aee6 	bgt.w	80121ec <fillRect+0x370>
#endif
    }
    CS_IDLE;
 8012420:	2108      	movs	r1, #8
 8012422:	4818      	ldr	r0, [pc, #96]	; (8012484 <fillRect+0x608>)
 8012424:	f7fe fcb6 	bl	8010d94 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8012428:	4b17      	ldr	r3, [pc, #92]	; (8012488 <fillRect+0x60c>)
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	f003 0301 	and.w	r3, r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00b      	beq.n	801244c <fillRect+0x5d0>
 8012434:	4b15      	ldr	r3, [pc, #84]	; (801248c <fillRect+0x610>)
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	f241 5226 	movw	r2, #5414	; 0x1526
 801243c:	4293      	cmp	r3, r2
 801243e:	d116      	bne.n	801246e <fillRect+0x5f2>
 8012440:	4b13      	ldr	r3, [pc, #76]	; (8012490 <fillRect+0x614>)
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	d010      	beq.n	801246e <fillRect+0x5f2>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 801244c:	f7fe fcb2 	bl	8010db4 <width>
 8012450:	4603      	mov	r3, r0
 8012452:	3b01      	subs	r3, #1
 8012454:	b29b      	uxth	r3, r3
 8012456:	b21c      	sxth	r4, r3
 8012458:	f7fe fcb8 	bl	8010dcc <height>
 801245c:	4603      	mov	r3, r0
 801245e:	3b01      	subs	r3, #1
 8012460:	b29b      	uxth	r3, r3
 8012462:	b21b      	sxth	r3, r3
 8012464:	4622      	mov	r2, r4
 8012466:	2100      	movs	r1, #0
 8012468:	2000      	movs	r0, #0
 801246a:	f7ff fa4d 	bl	8011908 <setAddrWindow>
}
 801246e:	bf00      	nop
 8012470:	3714      	adds	r7, #20
 8012472:	46bd      	mov	sp, r7
 8012474:	bd90      	pop	{r4, r7, pc}
 8012476:	bf00      	nop
 8012478:	40020800 	.word	0x40020800
 801247c:	40020c00 	.word	0x40020c00
 8012480:	40021000 	.word	0x40021000
 8012484:	40021400 	.word	0x40021400
 8012488:	2000698e 	.word	0x2000698e
 801248c:	2000699c 	.word	0x2000699c
 8012490:	20000218 	.word	0x20000218

08012494 <__libc_init_array>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	4d0d      	ldr	r5, [pc, #52]	; (80124cc <__libc_init_array+0x38>)
 8012498:	4c0d      	ldr	r4, [pc, #52]	; (80124d0 <__libc_init_array+0x3c>)
 801249a:	1b64      	subs	r4, r4, r5
 801249c:	10a4      	asrs	r4, r4, #2
 801249e:	2600      	movs	r6, #0
 80124a0:	42a6      	cmp	r6, r4
 80124a2:	d109      	bne.n	80124b8 <__libc_init_array+0x24>
 80124a4:	4d0b      	ldr	r5, [pc, #44]	; (80124d4 <__libc_init_array+0x40>)
 80124a6:	4c0c      	ldr	r4, [pc, #48]	; (80124d8 <__libc_init_array+0x44>)
 80124a8:	f001 f8cc 	bl	8013644 <_init>
 80124ac:	1b64      	subs	r4, r4, r5
 80124ae:	10a4      	asrs	r4, r4, #2
 80124b0:	2600      	movs	r6, #0
 80124b2:	42a6      	cmp	r6, r4
 80124b4:	d105      	bne.n	80124c2 <__libc_init_array+0x2e>
 80124b6:	bd70      	pop	{r4, r5, r6, pc}
 80124b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80124bc:	4798      	blx	r3
 80124be:	3601      	adds	r6, #1
 80124c0:	e7ee      	b.n	80124a0 <__libc_init_array+0xc>
 80124c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80124c6:	4798      	blx	r3
 80124c8:	3601      	adds	r6, #1
 80124ca:	e7f2      	b.n	80124b2 <__libc_init_array+0x1e>
 80124cc:	08016314 	.word	0x08016314
 80124d0:	08016314 	.word	0x08016314
 80124d4:	08016314 	.word	0x08016314
 80124d8:	08016318 	.word	0x08016318

080124dc <memcmp>:
 80124dc:	b530      	push	{r4, r5, lr}
 80124de:	3901      	subs	r1, #1
 80124e0:	2400      	movs	r4, #0
 80124e2:	42a2      	cmp	r2, r4
 80124e4:	d101      	bne.n	80124ea <memcmp+0xe>
 80124e6:	2000      	movs	r0, #0
 80124e8:	e005      	b.n	80124f6 <memcmp+0x1a>
 80124ea:	5d03      	ldrb	r3, [r0, r4]
 80124ec:	3401      	adds	r4, #1
 80124ee:	5d0d      	ldrb	r5, [r1, r4]
 80124f0:	42ab      	cmp	r3, r5
 80124f2:	d0f6      	beq.n	80124e2 <memcmp+0x6>
 80124f4:	1b58      	subs	r0, r3, r5
 80124f6:	bd30      	pop	{r4, r5, pc}

080124f8 <memcpy>:
 80124f8:	440a      	add	r2, r1
 80124fa:	4291      	cmp	r1, r2
 80124fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012500:	d100      	bne.n	8012504 <memcpy+0xc>
 8012502:	4770      	bx	lr
 8012504:	b510      	push	{r4, lr}
 8012506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801250a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801250e:	4291      	cmp	r1, r2
 8012510:	d1f9      	bne.n	8012506 <memcpy+0xe>
 8012512:	bd10      	pop	{r4, pc}

08012514 <memset>:
 8012514:	4402      	add	r2, r0
 8012516:	4603      	mov	r3, r0
 8012518:	4293      	cmp	r3, r2
 801251a:	d100      	bne.n	801251e <memset+0xa>
 801251c:	4770      	bx	lr
 801251e:	f803 1b01 	strb.w	r1, [r3], #1
 8012522:	e7f9      	b.n	8012518 <memset+0x4>

08012524 <iprintf>:
 8012524:	b40f      	push	{r0, r1, r2, r3}
 8012526:	4b0a      	ldr	r3, [pc, #40]	; (8012550 <iprintf+0x2c>)
 8012528:	b513      	push	{r0, r1, r4, lr}
 801252a:	681c      	ldr	r4, [r3, #0]
 801252c:	b124      	cbz	r4, 8012538 <iprintf+0x14>
 801252e:	69a3      	ldr	r3, [r4, #24]
 8012530:	b913      	cbnz	r3, 8012538 <iprintf+0x14>
 8012532:	4620      	mov	r0, r4
 8012534:	f000 fabc 	bl	8012ab0 <__sinit>
 8012538:	ab05      	add	r3, sp, #20
 801253a:	9a04      	ldr	r2, [sp, #16]
 801253c:	68a1      	ldr	r1, [r4, #8]
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	4620      	mov	r0, r4
 8012542:	f000 fca7 	bl	8012e94 <_vfiprintf_r>
 8012546:	b002      	add	sp, #8
 8012548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801254c:	b004      	add	sp, #16
 801254e:	4770      	bx	lr
 8012550:	20000018 	.word	0x20000018

08012554 <_puts_r>:
 8012554:	b570      	push	{r4, r5, r6, lr}
 8012556:	460e      	mov	r6, r1
 8012558:	4605      	mov	r5, r0
 801255a:	b118      	cbz	r0, 8012564 <_puts_r+0x10>
 801255c:	6983      	ldr	r3, [r0, #24]
 801255e:	b90b      	cbnz	r3, 8012564 <_puts_r+0x10>
 8012560:	f000 faa6 	bl	8012ab0 <__sinit>
 8012564:	69ab      	ldr	r3, [r5, #24]
 8012566:	68ac      	ldr	r4, [r5, #8]
 8012568:	b913      	cbnz	r3, 8012570 <_puts_r+0x1c>
 801256a:	4628      	mov	r0, r5
 801256c:	f000 faa0 	bl	8012ab0 <__sinit>
 8012570:	4b2c      	ldr	r3, [pc, #176]	; (8012624 <_puts_r+0xd0>)
 8012572:	429c      	cmp	r4, r3
 8012574:	d120      	bne.n	80125b8 <_puts_r+0x64>
 8012576:	686c      	ldr	r4, [r5, #4]
 8012578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801257a:	07db      	lsls	r3, r3, #31
 801257c:	d405      	bmi.n	801258a <_puts_r+0x36>
 801257e:	89a3      	ldrh	r3, [r4, #12]
 8012580:	0598      	lsls	r0, r3, #22
 8012582:	d402      	bmi.n	801258a <_puts_r+0x36>
 8012584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012586:	f000 fb43 	bl	8012c10 <__retarget_lock_acquire_recursive>
 801258a:	89a3      	ldrh	r3, [r4, #12]
 801258c:	0719      	lsls	r1, r3, #28
 801258e:	d51d      	bpl.n	80125cc <_puts_r+0x78>
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	b1db      	cbz	r3, 80125cc <_puts_r+0x78>
 8012594:	3e01      	subs	r6, #1
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801259c:	3b01      	subs	r3, #1
 801259e:	60a3      	str	r3, [r4, #8]
 80125a0:	bb39      	cbnz	r1, 80125f2 <_puts_r+0x9e>
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	da38      	bge.n	8012618 <_puts_r+0xc4>
 80125a6:	4622      	mov	r2, r4
 80125a8:	210a      	movs	r1, #10
 80125aa:	4628      	mov	r0, r5
 80125ac:	f000 f888 	bl	80126c0 <__swbuf_r>
 80125b0:	3001      	adds	r0, #1
 80125b2:	d011      	beq.n	80125d8 <_puts_r+0x84>
 80125b4:	250a      	movs	r5, #10
 80125b6:	e011      	b.n	80125dc <_puts_r+0x88>
 80125b8:	4b1b      	ldr	r3, [pc, #108]	; (8012628 <_puts_r+0xd4>)
 80125ba:	429c      	cmp	r4, r3
 80125bc:	d101      	bne.n	80125c2 <_puts_r+0x6e>
 80125be:	68ac      	ldr	r4, [r5, #8]
 80125c0:	e7da      	b.n	8012578 <_puts_r+0x24>
 80125c2:	4b1a      	ldr	r3, [pc, #104]	; (801262c <_puts_r+0xd8>)
 80125c4:	429c      	cmp	r4, r3
 80125c6:	bf08      	it	eq
 80125c8:	68ec      	ldreq	r4, [r5, #12]
 80125ca:	e7d5      	b.n	8012578 <_puts_r+0x24>
 80125cc:	4621      	mov	r1, r4
 80125ce:	4628      	mov	r0, r5
 80125d0:	f000 f8c8 	bl	8012764 <__swsetup_r>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d0dd      	beq.n	8012594 <_puts_r+0x40>
 80125d8:	f04f 35ff 	mov.w	r5, #4294967295
 80125dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125de:	07da      	lsls	r2, r3, #31
 80125e0:	d405      	bmi.n	80125ee <_puts_r+0x9a>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	059b      	lsls	r3, r3, #22
 80125e6:	d402      	bmi.n	80125ee <_puts_r+0x9a>
 80125e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ea:	f000 fb12 	bl	8012c12 <__retarget_lock_release_recursive>
 80125ee:	4628      	mov	r0, r5
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	da04      	bge.n	8012600 <_puts_r+0xac>
 80125f6:	69a2      	ldr	r2, [r4, #24]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	dc06      	bgt.n	801260a <_puts_r+0xb6>
 80125fc:	290a      	cmp	r1, #10
 80125fe:	d004      	beq.n	801260a <_puts_r+0xb6>
 8012600:	6823      	ldr	r3, [r4, #0]
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	6022      	str	r2, [r4, #0]
 8012606:	7019      	strb	r1, [r3, #0]
 8012608:	e7c5      	b.n	8012596 <_puts_r+0x42>
 801260a:	4622      	mov	r2, r4
 801260c:	4628      	mov	r0, r5
 801260e:	f000 f857 	bl	80126c0 <__swbuf_r>
 8012612:	3001      	adds	r0, #1
 8012614:	d1bf      	bne.n	8012596 <_puts_r+0x42>
 8012616:	e7df      	b.n	80125d8 <_puts_r+0x84>
 8012618:	6823      	ldr	r3, [r4, #0]
 801261a:	250a      	movs	r5, #10
 801261c:	1c5a      	adds	r2, r3, #1
 801261e:	6022      	str	r2, [r4, #0]
 8012620:	701d      	strb	r5, [r3, #0]
 8012622:	e7db      	b.n	80125dc <_puts_r+0x88>
 8012624:	08016298 	.word	0x08016298
 8012628:	080162b8 	.word	0x080162b8
 801262c:	08016278 	.word	0x08016278

08012630 <puts>:
 8012630:	4b02      	ldr	r3, [pc, #8]	; (801263c <puts+0xc>)
 8012632:	4601      	mov	r1, r0
 8012634:	6818      	ldr	r0, [r3, #0]
 8012636:	f7ff bf8d 	b.w	8012554 <_puts_r>
 801263a:	bf00      	nop
 801263c:	20000018 	.word	0x20000018

08012640 <rand>:
 8012640:	4b17      	ldr	r3, [pc, #92]	; (80126a0 <rand+0x60>)
 8012642:	b510      	push	{r4, lr}
 8012644:	681c      	ldr	r4, [r3, #0]
 8012646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012648:	b9b3      	cbnz	r3, 8012678 <rand+0x38>
 801264a:	2018      	movs	r0, #24
 801264c:	f000 fb46 	bl	8012cdc <malloc>
 8012650:	63a0      	str	r0, [r4, #56]	; 0x38
 8012652:	b928      	cbnz	r0, 8012660 <rand+0x20>
 8012654:	4602      	mov	r2, r0
 8012656:	4b13      	ldr	r3, [pc, #76]	; (80126a4 <rand+0x64>)
 8012658:	4813      	ldr	r0, [pc, #76]	; (80126a8 <rand+0x68>)
 801265a:	214e      	movs	r1, #78	; 0x4e
 801265c:	f000 f8f0 	bl	8012840 <__assert_func>
 8012660:	4a12      	ldr	r2, [pc, #72]	; (80126ac <rand+0x6c>)
 8012662:	4b13      	ldr	r3, [pc, #76]	; (80126b0 <rand+0x70>)
 8012664:	e9c0 2300 	strd	r2, r3, [r0]
 8012668:	4b12      	ldr	r3, [pc, #72]	; (80126b4 <rand+0x74>)
 801266a:	6083      	str	r3, [r0, #8]
 801266c:	230b      	movs	r3, #11
 801266e:	8183      	strh	r3, [r0, #12]
 8012670:	2201      	movs	r2, #1
 8012672:	2300      	movs	r3, #0
 8012674:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012678:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801267a:	480f      	ldr	r0, [pc, #60]	; (80126b8 <rand+0x78>)
 801267c:	690a      	ldr	r2, [r1, #16]
 801267e:	694b      	ldr	r3, [r1, #20]
 8012680:	4c0e      	ldr	r4, [pc, #56]	; (80126bc <rand+0x7c>)
 8012682:	4350      	muls	r0, r2
 8012684:	fb04 0003 	mla	r0, r4, r3, r0
 8012688:	fba2 3404 	umull	r3, r4, r2, r4
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	4404      	add	r4, r0
 8012690:	f144 0000 	adc.w	r0, r4, #0
 8012694:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801269c:	bd10      	pop	{r4, pc}
 801269e:	bf00      	nop
 80126a0:	20000018 	.word	0x20000018
 80126a4:	080161c4 	.word	0x080161c4
 80126a8:	080161db 	.word	0x080161db
 80126ac:	abcd330e 	.word	0xabcd330e
 80126b0:	e66d1234 	.word	0xe66d1234
 80126b4:	0005deec 	.word	0x0005deec
 80126b8:	5851f42d 	.word	0x5851f42d
 80126bc:	4c957f2d 	.word	0x4c957f2d

080126c0 <__swbuf_r>:
 80126c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126c2:	460e      	mov	r6, r1
 80126c4:	4614      	mov	r4, r2
 80126c6:	4605      	mov	r5, r0
 80126c8:	b118      	cbz	r0, 80126d2 <__swbuf_r+0x12>
 80126ca:	6983      	ldr	r3, [r0, #24]
 80126cc:	b90b      	cbnz	r3, 80126d2 <__swbuf_r+0x12>
 80126ce:	f000 f9ef 	bl	8012ab0 <__sinit>
 80126d2:	4b21      	ldr	r3, [pc, #132]	; (8012758 <__swbuf_r+0x98>)
 80126d4:	429c      	cmp	r4, r3
 80126d6:	d12b      	bne.n	8012730 <__swbuf_r+0x70>
 80126d8:	686c      	ldr	r4, [r5, #4]
 80126da:	69a3      	ldr	r3, [r4, #24]
 80126dc:	60a3      	str	r3, [r4, #8]
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	071a      	lsls	r2, r3, #28
 80126e2:	d52f      	bpl.n	8012744 <__swbuf_r+0x84>
 80126e4:	6923      	ldr	r3, [r4, #16]
 80126e6:	b36b      	cbz	r3, 8012744 <__swbuf_r+0x84>
 80126e8:	6923      	ldr	r3, [r4, #16]
 80126ea:	6820      	ldr	r0, [r4, #0]
 80126ec:	1ac0      	subs	r0, r0, r3
 80126ee:	6963      	ldr	r3, [r4, #20]
 80126f0:	b2f6      	uxtb	r6, r6
 80126f2:	4283      	cmp	r3, r0
 80126f4:	4637      	mov	r7, r6
 80126f6:	dc04      	bgt.n	8012702 <__swbuf_r+0x42>
 80126f8:	4621      	mov	r1, r4
 80126fa:	4628      	mov	r0, r5
 80126fc:	f000 f944 	bl	8012988 <_fflush_r>
 8012700:	bb30      	cbnz	r0, 8012750 <__swbuf_r+0x90>
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	3b01      	subs	r3, #1
 8012706:	60a3      	str	r3, [r4, #8]
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	1c5a      	adds	r2, r3, #1
 801270c:	6022      	str	r2, [r4, #0]
 801270e:	701e      	strb	r6, [r3, #0]
 8012710:	6963      	ldr	r3, [r4, #20]
 8012712:	3001      	adds	r0, #1
 8012714:	4283      	cmp	r3, r0
 8012716:	d004      	beq.n	8012722 <__swbuf_r+0x62>
 8012718:	89a3      	ldrh	r3, [r4, #12]
 801271a:	07db      	lsls	r3, r3, #31
 801271c:	d506      	bpl.n	801272c <__swbuf_r+0x6c>
 801271e:	2e0a      	cmp	r6, #10
 8012720:	d104      	bne.n	801272c <__swbuf_r+0x6c>
 8012722:	4621      	mov	r1, r4
 8012724:	4628      	mov	r0, r5
 8012726:	f000 f92f 	bl	8012988 <_fflush_r>
 801272a:	b988      	cbnz	r0, 8012750 <__swbuf_r+0x90>
 801272c:	4638      	mov	r0, r7
 801272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012730:	4b0a      	ldr	r3, [pc, #40]	; (801275c <__swbuf_r+0x9c>)
 8012732:	429c      	cmp	r4, r3
 8012734:	d101      	bne.n	801273a <__swbuf_r+0x7a>
 8012736:	68ac      	ldr	r4, [r5, #8]
 8012738:	e7cf      	b.n	80126da <__swbuf_r+0x1a>
 801273a:	4b09      	ldr	r3, [pc, #36]	; (8012760 <__swbuf_r+0xa0>)
 801273c:	429c      	cmp	r4, r3
 801273e:	bf08      	it	eq
 8012740:	68ec      	ldreq	r4, [r5, #12]
 8012742:	e7ca      	b.n	80126da <__swbuf_r+0x1a>
 8012744:	4621      	mov	r1, r4
 8012746:	4628      	mov	r0, r5
 8012748:	f000 f80c 	bl	8012764 <__swsetup_r>
 801274c:	2800      	cmp	r0, #0
 801274e:	d0cb      	beq.n	80126e8 <__swbuf_r+0x28>
 8012750:	f04f 37ff 	mov.w	r7, #4294967295
 8012754:	e7ea      	b.n	801272c <__swbuf_r+0x6c>
 8012756:	bf00      	nop
 8012758:	08016298 	.word	0x08016298
 801275c:	080162b8 	.word	0x080162b8
 8012760:	08016278 	.word	0x08016278

08012764 <__swsetup_r>:
 8012764:	4b32      	ldr	r3, [pc, #200]	; (8012830 <__swsetup_r+0xcc>)
 8012766:	b570      	push	{r4, r5, r6, lr}
 8012768:	681d      	ldr	r5, [r3, #0]
 801276a:	4606      	mov	r6, r0
 801276c:	460c      	mov	r4, r1
 801276e:	b125      	cbz	r5, 801277a <__swsetup_r+0x16>
 8012770:	69ab      	ldr	r3, [r5, #24]
 8012772:	b913      	cbnz	r3, 801277a <__swsetup_r+0x16>
 8012774:	4628      	mov	r0, r5
 8012776:	f000 f99b 	bl	8012ab0 <__sinit>
 801277a:	4b2e      	ldr	r3, [pc, #184]	; (8012834 <__swsetup_r+0xd0>)
 801277c:	429c      	cmp	r4, r3
 801277e:	d10f      	bne.n	80127a0 <__swsetup_r+0x3c>
 8012780:	686c      	ldr	r4, [r5, #4]
 8012782:	89a3      	ldrh	r3, [r4, #12]
 8012784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012788:	0719      	lsls	r1, r3, #28
 801278a:	d42c      	bmi.n	80127e6 <__swsetup_r+0x82>
 801278c:	06dd      	lsls	r5, r3, #27
 801278e:	d411      	bmi.n	80127b4 <__swsetup_r+0x50>
 8012790:	2309      	movs	r3, #9
 8012792:	6033      	str	r3, [r6, #0]
 8012794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012798:	81a3      	strh	r3, [r4, #12]
 801279a:	f04f 30ff 	mov.w	r0, #4294967295
 801279e:	e03e      	b.n	801281e <__swsetup_r+0xba>
 80127a0:	4b25      	ldr	r3, [pc, #148]	; (8012838 <__swsetup_r+0xd4>)
 80127a2:	429c      	cmp	r4, r3
 80127a4:	d101      	bne.n	80127aa <__swsetup_r+0x46>
 80127a6:	68ac      	ldr	r4, [r5, #8]
 80127a8:	e7eb      	b.n	8012782 <__swsetup_r+0x1e>
 80127aa:	4b24      	ldr	r3, [pc, #144]	; (801283c <__swsetup_r+0xd8>)
 80127ac:	429c      	cmp	r4, r3
 80127ae:	bf08      	it	eq
 80127b0:	68ec      	ldreq	r4, [r5, #12]
 80127b2:	e7e6      	b.n	8012782 <__swsetup_r+0x1e>
 80127b4:	0758      	lsls	r0, r3, #29
 80127b6:	d512      	bpl.n	80127de <__swsetup_r+0x7a>
 80127b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127ba:	b141      	cbz	r1, 80127ce <__swsetup_r+0x6a>
 80127bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c0:	4299      	cmp	r1, r3
 80127c2:	d002      	beq.n	80127ca <__swsetup_r+0x66>
 80127c4:	4630      	mov	r0, r6
 80127c6:	f000 fa91 	bl	8012cec <_free_r>
 80127ca:	2300      	movs	r3, #0
 80127cc:	6363      	str	r3, [r4, #52]	; 0x34
 80127ce:	89a3      	ldrh	r3, [r4, #12]
 80127d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127d4:	81a3      	strh	r3, [r4, #12]
 80127d6:	2300      	movs	r3, #0
 80127d8:	6063      	str	r3, [r4, #4]
 80127da:	6923      	ldr	r3, [r4, #16]
 80127dc:	6023      	str	r3, [r4, #0]
 80127de:	89a3      	ldrh	r3, [r4, #12]
 80127e0:	f043 0308 	orr.w	r3, r3, #8
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	6923      	ldr	r3, [r4, #16]
 80127e8:	b94b      	cbnz	r3, 80127fe <__swsetup_r+0x9a>
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127f4:	d003      	beq.n	80127fe <__swsetup_r+0x9a>
 80127f6:	4621      	mov	r1, r4
 80127f8:	4630      	mov	r0, r6
 80127fa:	f000 fa2f 	bl	8012c5c <__smakebuf_r>
 80127fe:	89a0      	ldrh	r0, [r4, #12]
 8012800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012804:	f010 0301 	ands.w	r3, r0, #1
 8012808:	d00a      	beq.n	8012820 <__swsetup_r+0xbc>
 801280a:	2300      	movs	r3, #0
 801280c:	60a3      	str	r3, [r4, #8]
 801280e:	6963      	ldr	r3, [r4, #20]
 8012810:	425b      	negs	r3, r3
 8012812:	61a3      	str	r3, [r4, #24]
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	b943      	cbnz	r3, 801282a <__swsetup_r+0xc6>
 8012818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801281c:	d1ba      	bne.n	8012794 <__swsetup_r+0x30>
 801281e:	bd70      	pop	{r4, r5, r6, pc}
 8012820:	0781      	lsls	r1, r0, #30
 8012822:	bf58      	it	pl
 8012824:	6963      	ldrpl	r3, [r4, #20]
 8012826:	60a3      	str	r3, [r4, #8]
 8012828:	e7f4      	b.n	8012814 <__swsetup_r+0xb0>
 801282a:	2000      	movs	r0, #0
 801282c:	e7f7      	b.n	801281e <__swsetup_r+0xba>
 801282e:	bf00      	nop
 8012830:	20000018 	.word	0x20000018
 8012834:	08016298 	.word	0x08016298
 8012838:	080162b8 	.word	0x080162b8
 801283c:	08016278 	.word	0x08016278

08012840 <__assert_func>:
 8012840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012842:	4614      	mov	r4, r2
 8012844:	461a      	mov	r2, r3
 8012846:	4b09      	ldr	r3, [pc, #36]	; (801286c <__assert_func+0x2c>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4605      	mov	r5, r0
 801284c:	68d8      	ldr	r0, [r3, #12]
 801284e:	b14c      	cbz	r4, 8012864 <__assert_func+0x24>
 8012850:	4b07      	ldr	r3, [pc, #28]	; (8012870 <__assert_func+0x30>)
 8012852:	9100      	str	r1, [sp, #0]
 8012854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012858:	4906      	ldr	r1, [pc, #24]	; (8012874 <__assert_func+0x34>)
 801285a:	462b      	mov	r3, r5
 801285c:	f000 f9a6 	bl	8012bac <fiprintf>
 8012860:	f000 fe42 	bl	80134e8 <abort>
 8012864:	4b04      	ldr	r3, [pc, #16]	; (8012878 <__assert_func+0x38>)
 8012866:	461c      	mov	r4, r3
 8012868:	e7f3      	b.n	8012852 <__assert_func+0x12>
 801286a:	bf00      	nop
 801286c:	20000018 	.word	0x20000018
 8012870:	0801623a 	.word	0x0801623a
 8012874:	08016247 	.word	0x08016247
 8012878:	08016275 	.word	0x08016275

0801287c <__sflush_r>:
 801287c:	898a      	ldrh	r2, [r1, #12]
 801287e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012882:	4605      	mov	r5, r0
 8012884:	0710      	lsls	r0, r2, #28
 8012886:	460c      	mov	r4, r1
 8012888:	d458      	bmi.n	801293c <__sflush_r+0xc0>
 801288a:	684b      	ldr	r3, [r1, #4]
 801288c:	2b00      	cmp	r3, #0
 801288e:	dc05      	bgt.n	801289c <__sflush_r+0x20>
 8012890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012892:	2b00      	cmp	r3, #0
 8012894:	dc02      	bgt.n	801289c <__sflush_r+0x20>
 8012896:	2000      	movs	r0, #0
 8012898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801289e:	2e00      	cmp	r6, #0
 80128a0:	d0f9      	beq.n	8012896 <__sflush_r+0x1a>
 80128a2:	2300      	movs	r3, #0
 80128a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128a8:	682f      	ldr	r7, [r5, #0]
 80128aa:	602b      	str	r3, [r5, #0]
 80128ac:	d032      	beq.n	8012914 <__sflush_r+0x98>
 80128ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128b0:	89a3      	ldrh	r3, [r4, #12]
 80128b2:	075a      	lsls	r2, r3, #29
 80128b4:	d505      	bpl.n	80128c2 <__sflush_r+0x46>
 80128b6:	6863      	ldr	r3, [r4, #4]
 80128b8:	1ac0      	subs	r0, r0, r3
 80128ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128bc:	b10b      	cbz	r3, 80128c2 <__sflush_r+0x46>
 80128be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128c0:	1ac0      	subs	r0, r0, r3
 80128c2:	2300      	movs	r3, #0
 80128c4:	4602      	mov	r2, r0
 80128c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128c8:	6a21      	ldr	r1, [r4, #32]
 80128ca:	4628      	mov	r0, r5
 80128cc:	47b0      	blx	r6
 80128ce:	1c43      	adds	r3, r0, #1
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	d106      	bne.n	80128e2 <__sflush_r+0x66>
 80128d4:	6829      	ldr	r1, [r5, #0]
 80128d6:	291d      	cmp	r1, #29
 80128d8:	d82c      	bhi.n	8012934 <__sflush_r+0xb8>
 80128da:	4a2a      	ldr	r2, [pc, #168]	; (8012984 <__sflush_r+0x108>)
 80128dc:	40ca      	lsrs	r2, r1
 80128de:	07d6      	lsls	r6, r2, #31
 80128e0:	d528      	bpl.n	8012934 <__sflush_r+0xb8>
 80128e2:	2200      	movs	r2, #0
 80128e4:	6062      	str	r2, [r4, #4]
 80128e6:	04d9      	lsls	r1, r3, #19
 80128e8:	6922      	ldr	r2, [r4, #16]
 80128ea:	6022      	str	r2, [r4, #0]
 80128ec:	d504      	bpl.n	80128f8 <__sflush_r+0x7c>
 80128ee:	1c42      	adds	r2, r0, #1
 80128f0:	d101      	bne.n	80128f6 <__sflush_r+0x7a>
 80128f2:	682b      	ldr	r3, [r5, #0]
 80128f4:	b903      	cbnz	r3, 80128f8 <__sflush_r+0x7c>
 80128f6:	6560      	str	r0, [r4, #84]	; 0x54
 80128f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128fa:	602f      	str	r7, [r5, #0]
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d0ca      	beq.n	8012896 <__sflush_r+0x1a>
 8012900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012904:	4299      	cmp	r1, r3
 8012906:	d002      	beq.n	801290e <__sflush_r+0x92>
 8012908:	4628      	mov	r0, r5
 801290a:	f000 f9ef 	bl	8012cec <_free_r>
 801290e:	2000      	movs	r0, #0
 8012910:	6360      	str	r0, [r4, #52]	; 0x34
 8012912:	e7c1      	b.n	8012898 <__sflush_r+0x1c>
 8012914:	6a21      	ldr	r1, [r4, #32]
 8012916:	2301      	movs	r3, #1
 8012918:	4628      	mov	r0, r5
 801291a:	47b0      	blx	r6
 801291c:	1c41      	adds	r1, r0, #1
 801291e:	d1c7      	bne.n	80128b0 <__sflush_r+0x34>
 8012920:	682b      	ldr	r3, [r5, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d0c4      	beq.n	80128b0 <__sflush_r+0x34>
 8012926:	2b1d      	cmp	r3, #29
 8012928:	d001      	beq.n	801292e <__sflush_r+0xb2>
 801292a:	2b16      	cmp	r3, #22
 801292c:	d101      	bne.n	8012932 <__sflush_r+0xb6>
 801292e:	602f      	str	r7, [r5, #0]
 8012930:	e7b1      	b.n	8012896 <__sflush_r+0x1a>
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012938:	81a3      	strh	r3, [r4, #12]
 801293a:	e7ad      	b.n	8012898 <__sflush_r+0x1c>
 801293c:	690f      	ldr	r7, [r1, #16]
 801293e:	2f00      	cmp	r7, #0
 8012940:	d0a9      	beq.n	8012896 <__sflush_r+0x1a>
 8012942:	0793      	lsls	r3, r2, #30
 8012944:	680e      	ldr	r6, [r1, #0]
 8012946:	bf08      	it	eq
 8012948:	694b      	ldreq	r3, [r1, #20]
 801294a:	600f      	str	r7, [r1, #0]
 801294c:	bf18      	it	ne
 801294e:	2300      	movne	r3, #0
 8012950:	eba6 0807 	sub.w	r8, r6, r7
 8012954:	608b      	str	r3, [r1, #8]
 8012956:	f1b8 0f00 	cmp.w	r8, #0
 801295a:	dd9c      	ble.n	8012896 <__sflush_r+0x1a>
 801295c:	6a21      	ldr	r1, [r4, #32]
 801295e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012960:	4643      	mov	r3, r8
 8012962:	463a      	mov	r2, r7
 8012964:	4628      	mov	r0, r5
 8012966:	47b0      	blx	r6
 8012968:	2800      	cmp	r0, #0
 801296a:	dc06      	bgt.n	801297a <__sflush_r+0xfe>
 801296c:	89a3      	ldrh	r3, [r4, #12]
 801296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012972:	81a3      	strh	r3, [r4, #12]
 8012974:	f04f 30ff 	mov.w	r0, #4294967295
 8012978:	e78e      	b.n	8012898 <__sflush_r+0x1c>
 801297a:	4407      	add	r7, r0
 801297c:	eba8 0800 	sub.w	r8, r8, r0
 8012980:	e7e9      	b.n	8012956 <__sflush_r+0xda>
 8012982:	bf00      	nop
 8012984:	20400001 	.word	0x20400001

08012988 <_fflush_r>:
 8012988:	b538      	push	{r3, r4, r5, lr}
 801298a:	690b      	ldr	r3, [r1, #16]
 801298c:	4605      	mov	r5, r0
 801298e:	460c      	mov	r4, r1
 8012990:	b913      	cbnz	r3, 8012998 <_fflush_r+0x10>
 8012992:	2500      	movs	r5, #0
 8012994:	4628      	mov	r0, r5
 8012996:	bd38      	pop	{r3, r4, r5, pc}
 8012998:	b118      	cbz	r0, 80129a2 <_fflush_r+0x1a>
 801299a:	6983      	ldr	r3, [r0, #24]
 801299c:	b90b      	cbnz	r3, 80129a2 <_fflush_r+0x1a>
 801299e:	f000 f887 	bl	8012ab0 <__sinit>
 80129a2:	4b14      	ldr	r3, [pc, #80]	; (80129f4 <_fflush_r+0x6c>)
 80129a4:	429c      	cmp	r4, r3
 80129a6:	d11b      	bne.n	80129e0 <_fflush_r+0x58>
 80129a8:	686c      	ldr	r4, [r5, #4]
 80129aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d0ef      	beq.n	8012992 <_fflush_r+0xa>
 80129b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129b4:	07d0      	lsls	r0, r2, #31
 80129b6:	d404      	bmi.n	80129c2 <_fflush_r+0x3a>
 80129b8:	0599      	lsls	r1, r3, #22
 80129ba:	d402      	bmi.n	80129c2 <_fflush_r+0x3a>
 80129bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129be:	f000 f927 	bl	8012c10 <__retarget_lock_acquire_recursive>
 80129c2:	4628      	mov	r0, r5
 80129c4:	4621      	mov	r1, r4
 80129c6:	f7ff ff59 	bl	801287c <__sflush_r>
 80129ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129cc:	07da      	lsls	r2, r3, #31
 80129ce:	4605      	mov	r5, r0
 80129d0:	d4e0      	bmi.n	8012994 <_fflush_r+0xc>
 80129d2:	89a3      	ldrh	r3, [r4, #12]
 80129d4:	059b      	lsls	r3, r3, #22
 80129d6:	d4dd      	bmi.n	8012994 <_fflush_r+0xc>
 80129d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129da:	f000 f91a 	bl	8012c12 <__retarget_lock_release_recursive>
 80129de:	e7d9      	b.n	8012994 <_fflush_r+0xc>
 80129e0:	4b05      	ldr	r3, [pc, #20]	; (80129f8 <_fflush_r+0x70>)
 80129e2:	429c      	cmp	r4, r3
 80129e4:	d101      	bne.n	80129ea <_fflush_r+0x62>
 80129e6:	68ac      	ldr	r4, [r5, #8]
 80129e8:	e7df      	b.n	80129aa <_fflush_r+0x22>
 80129ea:	4b04      	ldr	r3, [pc, #16]	; (80129fc <_fflush_r+0x74>)
 80129ec:	429c      	cmp	r4, r3
 80129ee:	bf08      	it	eq
 80129f0:	68ec      	ldreq	r4, [r5, #12]
 80129f2:	e7da      	b.n	80129aa <_fflush_r+0x22>
 80129f4:	08016298 	.word	0x08016298
 80129f8:	080162b8 	.word	0x080162b8
 80129fc:	08016278 	.word	0x08016278

08012a00 <std>:
 8012a00:	2300      	movs	r3, #0
 8012a02:	b510      	push	{r4, lr}
 8012a04:	4604      	mov	r4, r0
 8012a06:	e9c0 3300 	strd	r3, r3, [r0]
 8012a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a0e:	6083      	str	r3, [r0, #8]
 8012a10:	8181      	strh	r1, [r0, #12]
 8012a12:	6643      	str	r3, [r0, #100]	; 0x64
 8012a14:	81c2      	strh	r2, [r0, #14]
 8012a16:	6183      	str	r3, [r0, #24]
 8012a18:	4619      	mov	r1, r3
 8012a1a:	2208      	movs	r2, #8
 8012a1c:	305c      	adds	r0, #92	; 0x5c
 8012a1e:	f7ff fd79 	bl	8012514 <memset>
 8012a22:	4b05      	ldr	r3, [pc, #20]	; (8012a38 <std+0x38>)
 8012a24:	6263      	str	r3, [r4, #36]	; 0x24
 8012a26:	4b05      	ldr	r3, [pc, #20]	; (8012a3c <std+0x3c>)
 8012a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a2a:	4b05      	ldr	r3, [pc, #20]	; (8012a40 <std+0x40>)
 8012a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a2e:	4b05      	ldr	r3, [pc, #20]	; (8012a44 <std+0x44>)
 8012a30:	6224      	str	r4, [r4, #32]
 8012a32:	6323      	str	r3, [r4, #48]	; 0x30
 8012a34:	bd10      	pop	{r4, pc}
 8012a36:	bf00      	nop
 8012a38:	0801343d 	.word	0x0801343d
 8012a3c:	0801345f 	.word	0x0801345f
 8012a40:	08013497 	.word	0x08013497
 8012a44:	080134bb 	.word	0x080134bb

08012a48 <_cleanup_r>:
 8012a48:	4901      	ldr	r1, [pc, #4]	; (8012a50 <_cleanup_r+0x8>)
 8012a4a:	f000 b8c1 	b.w	8012bd0 <_fwalk_reent>
 8012a4e:	bf00      	nop
 8012a50:	08012989 	.word	0x08012989

08012a54 <__sfmoreglue>:
 8012a54:	b570      	push	{r4, r5, r6, lr}
 8012a56:	1e4a      	subs	r2, r1, #1
 8012a58:	2568      	movs	r5, #104	; 0x68
 8012a5a:	4355      	muls	r5, r2
 8012a5c:	460e      	mov	r6, r1
 8012a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a62:	f000 f993 	bl	8012d8c <_malloc_r>
 8012a66:	4604      	mov	r4, r0
 8012a68:	b140      	cbz	r0, 8012a7c <__sfmoreglue+0x28>
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8012a70:	300c      	adds	r0, #12
 8012a72:	60a0      	str	r0, [r4, #8]
 8012a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a78:	f7ff fd4c 	bl	8012514 <memset>
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	bd70      	pop	{r4, r5, r6, pc}

08012a80 <__sfp_lock_acquire>:
 8012a80:	4801      	ldr	r0, [pc, #4]	; (8012a88 <__sfp_lock_acquire+0x8>)
 8012a82:	f000 b8c5 	b.w	8012c10 <__retarget_lock_acquire_recursive>
 8012a86:	bf00      	nop
 8012a88:	200069b0 	.word	0x200069b0

08012a8c <__sfp_lock_release>:
 8012a8c:	4801      	ldr	r0, [pc, #4]	; (8012a94 <__sfp_lock_release+0x8>)
 8012a8e:	f000 b8c0 	b.w	8012c12 <__retarget_lock_release_recursive>
 8012a92:	bf00      	nop
 8012a94:	200069b0 	.word	0x200069b0

08012a98 <__sinit_lock_acquire>:
 8012a98:	4801      	ldr	r0, [pc, #4]	; (8012aa0 <__sinit_lock_acquire+0x8>)
 8012a9a:	f000 b8b9 	b.w	8012c10 <__retarget_lock_acquire_recursive>
 8012a9e:	bf00      	nop
 8012aa0:	200069ab 	.word	0x200069ab

08012aa4 <__sinit_lock_release>:
 8012aa4:	4801      	ldr	r0, [pc, #4]	; (8012aac <__sinit_lock_release+0x8>)
 8012aa6:	f000 b8b4 	b.w	8012c12 <__retarget_lock_release_recursive>
 8012aaa:	bf00      	nop
 8012aac:	200069ab 	.word	0x200069ab

08012ab0 <__sinit>:
 8012ab0:	b510      	push	{r4, lr}
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	f7ff fff0 	bl	8012a98 <__sinit_lock_acquire>
 8012ab8:	69a3      	ldr	r3, [r4, #24]
 8012aba:	b11b      	cbz	r3, 8012ac4 <__sinit+0x14>
 8012abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac0:	f7ff bff0 	b.w	8012aa4 <__sinit_lock_release>
 8012ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8012aca:	4b13      	ldr	r3, [pc, #76]	; (8012b18 <__sinit+0x68>)
 8012acc:	4a13      	ldr	r2, [pc, #76]	; (8012b1c <__sinit+0x6c>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ad2:	42a3      	cmp	r3, r4
 8012ad4:	bf04      	itt	eq
 8012ad6:	2301      	moveq	r3, #1
 8012ad8:	61a3      	streq	r3, [r4, #24]
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 f820 	bl	8012b20 <__sfp>
 8012ae0:	6060      	str	r0, [r4, #4]
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f000 f81c 	bl	8012b20 <__sfp>
 8012ae8:	60a0      	str	r0, [r4, #8]
 8012aea:	4620      	mov	r0, r4
 8012aec:	f000 f818 	bl	8012b20 <__sfp>
 8012af0:	2200      	movs	r2, #0
 8012af2:	60e0      	str	r0, [r4, #12]
 8012af4:	2104      	movs	r1, #4
 8012af6:	6860      	ldr	r0, [r4, #4]
 8012af8:	f7ff ff82 	bl	8012a00 <std>
 8012afc:	68a0      	ldr	r0, [r4, #8]
 8012afe:	2201      	movs	r2, #1
 8012b00:	2109      	movs	r1, #9
 8012b02:	f7ff ff7d 	bl	8012a00 <std>
 8012b06:	68e0      	ldr	r0, [r4, #12]
 8012b08:	2202      	movs	r2, #2
 8012b0a:	2112      	movs	r1, #18
 8012b0c:	f7ff ff78 	bl	8012a00 <std>
 8012b10:	2301      	movs	r3, #1
 8012b12:	61a3      	str	r3, [r4, #24]
 8012b14:	e7d2      	b.n	8012abc <__sinit+0xc>
 8012b16:	bf00      	nop
 8012b18:	080161c0 	.word	0x080161c0
 8012b1c:	08012a49 	.word	0x08012a49

08012b20 <__sfp>:
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	4607      	mov	r7, r0
 8012b24:	f7ff ffac 	bl	8012a80 <__sfp_lock_acquire>
 8012b28:	4b1e      	ldr	r3, [pc, #120]	; (8012ba4 <__sfp+0x84>)
 8012b2a:	681e      	ldr	r6, [r3, #0]
 8012b2c:	69b3      	ldr	r3, [r6, #24]
 8012b2e:	b913      	cbnz	r3, 8012b36 <__sfp+0x16>
 8012b30:	4630      	mov	r0, r6
 8012b32:	f7ff ffbd 	bl	8012ab0 <__sinit>
 8012b36:	3648      	adds	r6, #72	; 0x48
 8012b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	d503      	bpl.n	8012b48 <__sfp+0x28>
 8012b40:	6833      	ldr	r3, [r6, #0]
 8012b42:	b30b      	cbz	r3, 8012b88 <__sfp+0x68>
 8012b44:	6836      	ldr	r6, [r6, #0]
 8012b46:	e7f7      	b.n	8012b38 <__sfp+0x18>
 8012b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b4c:	b9d5      	cbnz	r5, 8012b84 <__sfp+0x64>
 8012b4e:	4b16      	ldr	r3, [pc, #88]	; (8012ba8 <__sfp+0x88>)
 8012b50:	60e3      	str	r3, [r4, #12]
 8012b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b56:	6665      	str	r5, [r4, #100]	; 0x64
 8012b58:	f000 f859 	bl	8012c0e <__retarget_lock_init_recursive>
 8012b5c:	f7ff ff96 	bl	8012a8c <__sfp_lock_release>
 8012b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b68:	6025      	str	r5, [r4, #0]
 8012b6a:	61a5      	str	r5, [r4, #24]
 8012b6c:	2208      	movs	r2, #8
 8012b6e:	4629      	mov	r1, r5
 8012b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b74:	f7ff fcce 	bl	8012514 <memset>
 8012b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b80:	4620      	mov	r0, r4
 8012b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b84:	3468      	adds	r4, #104	; 0x68
 8012b86:	e7d9      	b.n	8012b3c <__sfp+0x1c>
 8012b88:	2104      	movs	r1, #4
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	f7ff ff62 	bl	8012a54 <__sfmoreglue>
 8012b90:	4604      	mov	r4, r0
 8012b92:	6030      	str	r0, [r6, #0]
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d1d5      	bne.n	8012b44 <__sfp+0x24>
 8012b98:	f7ff ff78 	bl	8012a8c <__sfp_lock_release>
 8012b9c:	230c      	movs	r3, #12
 8012b9e:	603b      	str	r3, [r7, #0]
 8012ba0:	e7ee      	b.n	8012b80 <__sfp+0x60>
 8012ba2:	bf00      	nop
 8012ba4:	080161c0 	.word	0x080161c0
 8012ba8:	ffff0001 	.word	0xffff0001

08012bac <fiprintf>:
 8012bac:	b40e      	push	{r1, r2, r3}
 8012bae:	b503      	push	{r0, r1, lr}
 8012bb0:	4601      	mov	r1, r0
 8012bb2:	ab03      	add	r3, sp, #12
 8012bb4:	4805      	ldr	r0, [pc, #20]	; (8012bcc <fiprintf+0x20>)
 8012bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bba:	6800      	ldr	r0, [r0, #0]
 8012bbc:	9301      	str	r3, [sp, #4]
 8012bbe:	f000 f969 	bl	8012e94 <_vfiprintf_r>
 8012bc2:	b002      	add	sp, #8
 8012bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bc8:	b003      	add	sp, #12
 8012bca:	4770      	bx	lr
 8012bcc:	20000018 	.word	0x20000018

08012bd0 <_fwalk_reent>:
 8012bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	4688      	mov	r8, r1
 8012bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012bdc:	2700      	movs	r7, #0
 8012bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012be2:	f1b9 0901 	subs.w	r9, r9, #1
 8012be6:	d505      	bpl.n	8012bf4 <_fwalk_reent+0x24>
 8012be8:	6824      	ldr	r4, [r4, #0]
 8012bea:	2c00      	cmp	r4, #0
 8012bec:	d1f7      	bne.n	8012bde <_fwalk_reent+0xe>
 8012bee:	4638      	mov	r0, r7
 8012bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf4:	89ab      	ldrh	r3, [r5, #12]
 8012bf6:	2b01      	cmp	r3, #1
 8012bf8:	d907      	bls.n	8012c0a <_fwalk_reent+0x3a>
 8012bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	d003      	beq.n	8012c0a <_fwalk_reent+0x3a>
 8012c02:	4629      	mov	r1, r5
 8012c04:	4630      	mov	r0, r6
 8012c06:	47c0      	blx	r8
 8012c08:	4307      	orrs	r7, r0
 8012c0a:	3568      	adds	r5, #104	; 0x68
 8012c0c:	e7e9      	b.n	8012be2 <_fwalk_reent+0x12>

08012c0e <__retarget_lock_init_recursive>:
 8012c0e:	4770      	bx	lr

08012c10 <__retarget_lock_acquire_recursive>:
 8012c10:	4770      	bx	lr

08012c12 <__retarget_lock_release_recursive>:
 8012c12:	4770      	bx	lr

08012c14 <__swhatbuf_r>:
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	460e      	mov	r6, r1
 8012c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	b096      	sub	sp, #88	; 0x58
 8012c20:	4614      	mov	r4, r2
 8012c22:	461d      	mov	r5, r3
 8012c24:	da07      	bge.n	8012c36 <__swhatbuf_r+0x22>
 8012c26:	2300      	movs	r3, #0
 8012c28:	602b      	str	r3, [r5, #0]
 8012c2a:	89b3      	ldrh	r3, [r6, #12]
 8012c2c:	061a      	lsls	r2, r3, #24
 8012c2e:	d410      	bmi.n	8012c52 <__swhatbuf_r+0x3e>
 8012c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c34:	e00e      	b.n	8012c54 <__swhatbuf_r+0x40>
 8012c36:	466a      	mov	r2, sp
 8012c38:	f000 fc6e 	bl	8013518 <_fstat_r>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	dbf2      	blt.n	8012c26 <__swhatbuf_r+0x12>
 8012c40:	9a01      	ldr	r2, [sp, #4]
 8012c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c4a:	425a      	negs	r2, r3
 8012c4c:	415a      	adcs	r2, r3
 8012c4e:	602a      	str	r2, [r5, #0]
 8012c50:	e7ee      	b.n	8012c30 <__swhatbuf_r+0x1c>
 8012c52:	2340      	movs	r3, #64	; 0x40
 8012c54:	2000      	movs	r0, #0
 8012c56:	6023      	str	r3, [r4, #0]
 8012c58:	b016      	add	sp, #88	; 0x58
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}

08012c5c <__smakebuf_r>:
 8012c5c:	898b      	ldrh	r3, [r1, #12]
 8012c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c60:	079d      	lsls	r5, r3, #30
 8012c62:	4606      	mov	r6, r0
 8012c64:	460c      	mov	r4, r1
 8012c66:	d507      	bpl.n	8012c78 <__smakebuf_r+0x1c>
 8012c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c6c:	6023      	str	r3, [r4, #0]
 8012c6e:	6123      	str	r3, [r4, #16]
 8012c70:	2301      	movs	r3, #1
 8012c72:	6163      	str	r3, [r4, #20]
 8012c74:	b002      	add	sp, #8
 8012c76:	bd70      	pop	{r4, r5, r6, pc}
 8012c78:	ab01      	add	r3, sp, #4
 8012c7a:	466a      	mov	r2, sp
 8012c7c:	f7ff ffca 	bl	8012c14 <__swhatbuf_r>
 8012c80:	9900      	ldr	r1, [sp, #0]
 8012c82:	4605      	mov	r5, r0
 8012c84:	4630      	mov	r0, r6
 8012c86:	f000 f881 	bl	8012d8c <_malloc_r>
 8012c8a:	b948      	cbnz	r0, 8012ca0 <__smakebuf_r+0x44>
 8012c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c90:	059a      	lsls	r2, r3, #22
 8012c92:	d4ef      	bmi.n	8012c74 <__smakebuf_r+0x18>
 8012c94:	f023 0303 	bic.w	r3, r3, #3
 8012c98:	f043 0302 	orr.w	r3, r3, #2
 8012c9c:	81a3      	strh	r3, [r4, #12]
 8012c9e:	e7e3      	b.n	8012c68 <__smakebuf_r+0xc>
 8012ca0:	4b0d      	ldr	r3, [pc, #52]	; (8012cd8 <__smakebuf_r+0x7c>)
 8012ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ca4:	89a3      	ldrh	r3, [r4, #12]
 8012ca6:	6020      	str	r0, [r4, #0]
 8012ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cac:	81a3      	strh	r3, [r4, #12]
 8012cae:	9b00      	ldr	r3, [sp, #0]
 8012cb0:	6163      	str	r3, [r4, #20]
 8012cb2:	9b01      	ldr	r3, [sp, #4]
 8012cb4:	6120      	str	r0, [r4, #16]
 8012cb6:	b15b      	cbz	r3, 8012cd0 <__smakebuf_r+0x74>
 8012cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f000 fc3d 	bl	801353c <_isatty_r>
 8012cc2:	b128      	cbz	r0, 8012cd0 <__smakebuf_r+0x74>
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	f023 0303 	bic.w	r3, r3, #3
 8012cca:	f043 0301 	orr.w	r3, r3, #1
 8012cce:	81a3      	strh	r3, [r4, #12]
 8012cd0:	89a0      	ldrh	r0, [r4, #12]
 8012cd2:	4305      	orrs	r5, r0
 8012cd4:	81a5      	strh	r5, [r4, #12]
 8012cd6:	e7cd      	b.n	8012c74 <__smakebuf_r+0x18>
 8012cd8:	08012a49 	.word	0x08012a49

08012cdc <malloc>:
 8012cdc:	4b02      	ldr	r3, [pc, #8]	; (8012ce8 <malloc+0xc>)
 8012cde:	4601      	mov	r1, r0
 8012ce0:	6818      	ldr	r0, [r3, #0]
 8012ce2:	f000 b853 	b.w	8012d8c <_malloc_r>
 8012ce6:	bf00      	nop
 8012ce8:	20000018 	.word	0x20000018

08012cec <_free_r>:
 8012cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cee:	2900      	cmp	r1, #0
 8012cf0:	d048      	beq.n	8012d84 <_free_r+0x98>
 8012cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cf6:	9001      	str	r0, [sp, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8012cfe:	bfb8      	it	lt
 8012d00:	18e4      	addlt	r4, r4, r3
 8012d02:	f000 fc3d 	bl	8013580 <__malloc_lock>
 8012d06:	4a20      	ldr	r2, [pc, #128]	; (8012d88 <_free_r+0x9c>)
 8012d08:	9801      	ldr	r0, [sp, #4]
 8012d0a:	6813      	ldr	r3, [r2, #0]
 8012d0c:	4615      	mov	r5, r2
 8012d0e:	b933      	cbnz	r3, 8012d1e <_free_r+0x32>
 8012d10:	6063      	str	r3, [r4, #4]
 8012d12:	6014      	str	r4, [r2, #0]
 8012d14:	b003      	add	sp, #12
 8012d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d1a:	f000 bc37 	b.w	801358c <__malloc_unlock>
 8012d1e:	42a3      	cmp	r3, r4
 8012d20:	d90b      	bls.n	8012d3a <_free_r+0x4e>
 8012d22:	6821      	ldr	r1, [r4, #0]
 8012d24:	1862      	adds	r2, r4, r1
 8012d26:	4293      	cmp	r3, r2
 8012d28:	bf04      	itt	eq
 8012d2a:	681a      	ldreq	r2, [r3, #0]
 8012d2c:	685b      	ldreq	r3, [r3, #4]
 8012d2e:	6063      	str	r3, [r4, #4]
 8012d30:	bf04      	itt	eq
 8012d32:	1852      	addeq	r2, r2, r1
 8012d34:	6022      	streq	r2, [r4, #0]
 8012d36:	602c      	str	r4, [r5, #0]
 8012d38:	e7ec      	b.n	8012d14 <_free_r+0x28>
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	b10b      	cbz	r3, 8012d44 <_free_r+0x58>
 8012d40:	42a3      	cmp	r3, r4
 8012d42:	d9fa      	bls.n	8012d3a <_free_r+0x4e>
 8012d44:	6811      	ldr	r1, [r2, #0]
 8012d46:	1855      	adds	r5, r2, r1
 8012d48:	42a5      	cmp	r5, r4
 8012d4a:	d10b      	bne.n	8012d64 <_free_r+0x78>
 8012d4c:	6824      	ldr	r4, [r4, #0]
 8012d4e:	4421      	add	r1, r4
 8012d50:	1854      	adds	r4, r2, r1
 8012d52:	42a3      	cmp	r3, r4
 8012d54:	6011      	str	r1, [r2, #0]
 8012d56:	d1dd      	bne.n	8012d14 <_free_r+0x28>
 8012d58:	681c      	ldr	r4, [r3, #0]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	6053      	str	r3, [r2, #4]
 8012d5e:	4421      	add	r1, r4
 8012d60:	6011      	str	r1, [r2, #0]
 8012d62:	e7d7      	b.n	8012d14 <_free_r+0x28>
 8012d64:	d902      	bls.n	8012d6c <_free_r+0x80>
 8012d66:	230c      	movs	r3, #12
 8012d68:	6003      	str	r3, [r0, #0]
 8012d6a:	e7d3      	b.n	8012d14 <_free_r+0x28>
 8012d6c:	6825      	ldr	r5, [r4, #0]
 8012d6e:	1961      	adds	r1, r4, r5
 8012d70:	428b      	cmp	r3, r1
 8012d72:	bf04      	itt	eq
 8012d74:	6819      	ldreq	r1, [r3, #0]
 8012d76:	685b      	ldreq	r3, [r3, #4]
 8012d78:	6063      	str	r3, [r4, #4]
 8012d7a:	bf04      	itt	eq
 8012d7c:	1949      	addeq	r1, r1, r5
 8012d7e:	6021      	streq	r1, [r4, #0]
 8012d80:	6054      	str	r4, [r2, #4]
 8012d82:	e7c7      	b.n	8012d14 <_free_r+0x28>
 8012d84:	b003      	add	sp, #12
 8012d86:	bd30      	pop	{r4, r5, pc}
 8012d88:	2000021c 	.word	0x2000021c

08012d8c <_malloc_r>:
 8012d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d8e:	1ccd      	adds	r5, r1, #3
 8012d90:	f025 0503 	bic.w	r5, r5, #3
 8012d94:	3508      	adds	r5, #8
 8012d96:	2d0c      	cmp	r5, #12
 8012d98:	bf38      	it	cc
 8012d9a:	250c      	movcc	r5, #12
 8012d9c:	2d00      	cmp	r5, #0
 8012d9e:	4606      	mov	r6, r0
 8012da0:	db01      	blt.n	8012da6 <_malloc_r+0x1a>
 8012da2:	42a9      	cmp	r1, r5
 8012da4:	d903      	bls.n	8012dae <_malloc_r+0x22>
 8012da6:	230c      	movs	r3, #12
 8012da8:	6033      	str	r3, [r6, #0]
 8012daa:	2000      	movs	r0, #0
 8012dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dae:	f000 fbe7 	bl	8013580 <__malloc_lock>
 8012db2:	4921      	ldr	r1, [pc, #132]	; (8012e38 <_malloc_r+0xac>)
 8012db4:	680a      	ldr	r2, [r1, #0]
 8012db6:	4614      	mov	r4, r2
 8012db8:	b99c      	cbnz	r4, 8012de2 <_malloc_r+0x56>
 8012dba:	4f20      	ldr	r7, [pc, #128]	; (8012e3c <_malloc_r+0xb0>)
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	b923      	cbnz	r3, 8012dca <_malloc_r+0x3e>
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	f000 fb2a 	bl	801341c <_sbrk_r>
 8012dc8:	6038      	str	r0, [r7, #0]
 8012dca:	4629      	mov	r1, r5
 8012dcc:	4630      	mov	r0, r6
 8012dce:	f000 fb25 	bl	801341c <_sbrk_r>
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	d123      	bne.n	8012e1e <_malloc_r+0x92>
 8012dd6:	230c      	movs	r3, #12
 8012dd8:	6033      	str	r3, [r6, #0]
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f000 fbd6 	bl	801358c <__malloc_unlock>
 8012de0:	e7e3      	b.n	8012daa <_malloc_r+0x1e>
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	1b5b      	subs	r3, r3, r5
 8012de6:	d417      	bmi.n	8012e18 <_malloc_r+0x8c>
 8012de8:	2b0b      	cmp	r3, #11
 8012dea:	d903      	bls.n	8012df4 <_malloc_r+0x68>
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	441c      	add	r4, r3
 8012df0:	6025      	str	r5, [r4, #0]
 8012df2:	e004      	b.n	8012dfe <_malloc_r+0x72>
 8012df4:	6863      	ldr	r3, [r4, #4]
 8012df6:	42a2      	cmp	r2, r4
 8012df8:	bf0c      	ite	eq
 8012dfa:	600b      	streq	r3, [r1, #0]
 8012dfc:	6053      	strne	r3, [r2, #4]
 8012dfe:	4630      	mov	r0, r6
 8012e00:	f000 fbc4 	bl	801358c <__malloc_unlock>
 8012e04:	f104 000b 	add.w	r0, r4, #11
 8012e08:	1d23      	adds	r3, r4, #4
 8012e0a:	f020 0007 	bic.w	r0, r0, #7
 8012e0e:	1ac2      	subs	r2, r0, r3
 8012e10:	d0cc      	beq.n	8012dac <_malloc_r+0x20>
 8012e12:	1a1b      	subs	r3, r3, r0
 8012e14:	50a3      	str	r3, [r4, r2]
 8012e16:	e7c9      	b.n	8012dac <_malloc_r+0x20>
 8012e18:	4622      	mov	r2, r4
 8012e1a:	6864      	ldr	r4, [r4, #4]
 8012e1c:	e7cc      	b.n	8012db8 <_malloc_r+0x2c>
 8012e1e:	1cc4      	adds	r4, r0, #3
 8012e20:	f024 0403 	bic.w	r4, r4, #3
 8012e24:	42a0      	cmp	r0, r4
 8012e26:	d0e3      	beq.n	8012df0 <_malloc_r+0x64>
 8012e28:	1a21      	subs	r1, r4, r0
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f000 faf6 	bl	801341c <_sbrk_r>
 8012e30:	3001      	adds	r0, #1
 8012e32:	d1dd      	bne.n	8012df0 <_malloc_r+0x64>
 8012e34:	e7cf      	b.n	8012dd6 <_malloc_r+0x4a>
 8012e36:	bf00      	nop
 8012e38:	2000021c 	.word	0x2000021c
 8012e3c:	20000220 	.word	0x20000220

08012e40 <__sfputc_r>:
 8012e40:	6893      	ldr	r3, [r2, #8]
 8012e42:	3b01      	subs	r3, #1
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	b410      	push	{r4}
 8012e48:	6093      	str	r3, [r2, #8]
 8012e4a:	da08      	bge.n	8012e5e <__sfputc_r+0x1e>
 8012e4c:	6994      	ldr	r4, [r2, #24]
 8012e4e:	42a3      	cmp	r3, r4
 8012e50:	db01      	blt.n	8012e56 <__sfputc_r+0x16>
 8012e52:	290a      	cmp	r1, #10
 8012e54:	d103      	bne.n	8012e5e <__sfputc_r+0x1e>
 8012e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e5a:	f7ff bc31 	b.w	80126c0 <__swbuf_r>
 8012e5e:	6813      	ldr	r3, [r2, #0]
 8012e60:	1c58      	adds	r0, r3, #1
 8012e62:	6010      	str	r0, [r2, #0]
 8012e64:	7019      	strb	r1, [r3, #0]
 8012e66:	4608      	mov	r0, r1
 8012e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <__sfputs_r>:
 8012e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e70:	4606      	mov	r6, r0
 8012e72:	460f      	mov	r7, r1
 8012e74:	4614      	mov	r4, r2
 8012e76:	18d5      	adds	r5, r2, r3
 8012e78:	42ac      	cmp	r4, r5
 8012e7a:	d101      	bne.n	8012e80 <__sfputs_r+0x12>
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	e007      	b.n	8012e90 <__sfputs_r+0x22>
 8012e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e84:	463a      	mov	r2, r7
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7ff ffda 	bl	8012e40 <__sfputc_r>
 8012e8c:	1c43      	adds	r3, r0, #1
 8012e8e:	d1f3      	bne.n	8012e78 <__sfputs_r+0xa>
 8012e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e94 <_vfiprintf_r>:
 8012e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e98:	460d      	mov	r5, r1
 8012e9a:	b09d      	sub	sp, #116	; 0x74
 8012e9c:	4614      	mov	r4, r2
 8012e9e:	4698      	mov	r8, r3
 8012ea0:	4606      	mov	r6, r0
 8012ea2:	b118      	cbz	r0, 8012eac <_vfiprintf_r+0x18>
 8012ea4:	6983      	ldr	r3, [r0, #24]
 8012ea6:	b90b      	cbnz	r3, 8012eac <_vfiprintf_r+0x18>
 8012ea8:	f7ff fe02 	bl	8012ab0 <__sinit>
 8012eac:	4b89      	ldr	r3, [pc, #548]	; (80130d4 <_vfiprintf_r+0x240>)
 8012eae:	429d      	cmp	r5, r3
 8012eb0:	d11b      	bne.n	8012eea <_vfiprintf_r+0x56>
 8012eb2:	6875      	ldr	r5, [r6, #4]
 8012eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eb6:	07d9      	lsls	r1, r3, #31
 8012eb8:	d405      	bmi.n	8012ec6 <_vfiprintf_r+0x32>
 8012eba:	89ab      	ldrh	r3, [r5, #12]
 8012ebc:	059a      	lsls	r2, r3, #22
 8012ebe:	d402      	bmi.n	8012ec6 <_vfiprintf_r+0x32>
 8012ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ec2:	f7ff fea5 	bl	8012c10 <__retarget_lock_acquire_recursive>
 8012ec6:	89ab      	ldrh	r3, [r5, #12]
 8012ec8:	071b      	lsls	r3, r3, #28
 8012eca:	d501      	bpl.n	8012ed0 <_vfiprintf_r+0x3c>
 8012ecc:	692b      	ldr	r3, [r5, #16]
 8012ece:	b9eb      	cbnz	r3, 8012f0c <_vfiprintf_r+0x78>
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f7ff fc46 	bl	8012764 <__swsetup_r>
 8012ed8:	b1c0      	cbz	r0, 8012f0c <_vfiprintf_r+0x78>
 8012eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012edc:	07dc      	lsls	r4, r3, #31
 8012ede:	d50e      	bpl.n	8012efe <_vfiprintf_r+0x6a>
 8012ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee4:	b01d      	add	sp, #116	; 0x74
 8012ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eea:	4b7b      	ldr	r3, [pc, #492]	; (80130d8 <_vfiprintf_r+0x244>)
 8012eec:	429d      	cmp	r5, r3
 8012eee:	d101      	bne.n	8012ef4 <_vfiprintf_r+0x60>
 8012ef0:	68b5      	ldr	r5, [r6, #8]
 8012ef2:	e7df      	b.n	8012eb4 <_vfiprintf_r+0x20>
 8012ef4:	4b79      	ldr	r3, [pc, #484]	; (80130dc <_vfiprintf_r+0x248>)
 8012ef6:	429d      	cmp	r5, r3
 8012ef8:	bf08      	it	eq
 8012efa:	68f5      	ldreq	r5, [r6, #12]
 8012efc:	e7da      	b.n	8012eb4 <_vfiprintf_r+0x20>
 8012efe:	89ab      	ldrh	r3, [r5, #12]
 8012f00:	0598      	lsls	r0, r3, #22
 8012f02:	d4ed      	bmi.n	8012ee0 <_vfiprintf_r+0x4c>
 8012f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f06:	f7ff fe84 	bl	8012c12 <__retarget_lock_release_recursive>
 8012f0a:	e7e9      	b.n	8012ee0 <_vfiprintf_r+0x4c>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f10:	2320      	movs	r3, #32
 8012f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f1a:	2330      	movs	r3, #48	; 0x30
 8012f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80130e0 <_vfiprintf_r+0x24c>
 8012f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f24:	f04f 0901 	mov.w	r9, #1
 8012f28:	4623      	mov	r3, r4
 8012f2a:	469a      	mov	sl, r3
 8012f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f30:	b10a      	cbz	r2, 8012f36 <_vfiprintf_r+0xa2>
 8012f32:	2a25      	cmp	r2, #37	; 0x25
 8012f34:	d1f9      	bne.n	8012f2a <_vfiprintf_r+0x96>
 8012f36:	ebba 0b04 	subs.w	fp, sl, r4
 8012f3a:	d00b      	beq.n	8012f54 <_vfiprintf_r+0xc0>
 8012f3c:	465b      	mov	r3, fp
 8012f3e:	4622      	mov	r2, r4
 8012f40:	4629      	mov	r1, r5
 8012f42:	4630      	mov	r0, r6
 8012f44:	f7ff ff93 	bl	8012e6e <__sfputs_r>
 8012f48:	3001      	adds	r0, #1
 8012f4a:	f000 80aa 	beq.w	80130a2 <_vfiprintf_r+0x20e>
 8012f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f50:	445a      	add	r2, fp
 8012f52:	9209      	str	r2, [sp, #36]	; 0x24
 8012f54:	f89a 3000 	ldrb.w	r3, [sl]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f000 80a2 	beq.w	80130a2 <_vfiprintf_r+0x20e>
 8012f5e:	2300      	movs	r3, #0
 8012f60:	f04f 32ff 	mov.w	r2, #4294967295
 8012f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f68:	f10a 0a01 	add.w	sl, sl, #1
 8012f6c:	9304      	str	r3, [sp, #16]
 8012f6e:	9307      	str	r3, [sp, #28]
 8012f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f74:	931a      	str	r3, [sp, #104]	; 0x68
 8012f76:	4654      	mov	r4, sl
 8012f78:	2205      	movs	r2, #5
 8012f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f7e:	4858      	ldr	r0, [pc, #352]	; (80130e0 <_vfiprintf_r+0x24c>)
 8012f80:	f7ed f95e 	bl	8000240 <memchr>
 8012f84:	9a04      	ldr	r2, [sp, #16]
 8012f86:	b9d8      	cbnz	r0, 8012fc0 <_vfiprintf_r+0x12c>
 8012f88:	06d1      	lsls	r1, r2, #27
 8012f8a:	bf44      	itt	mi
 8012f8c:	2320      	movmi	r3, #32
 8012f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f92:	0713      	lsls	r3, r2, #28
 8012f94:	bf44      	itt	mi
 8012f96:	232b      	movmi	r3, #43	; 0x2b
 8012f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8012fa2:	d015      	beq.n	8012fd0 <_vfiprintf_r+0x13c>
 8012fa4:	9a07      	ldr	r2, [sp, #28]
 8012fa6:	4654      	mov	r4, sl
 8012fa8:	2000      	movs	r0, #0
 8012faa:	f04f 0c0a 	mov.w	ip, #10
 8012fae:	4621      	mov	r1, r4
 8012fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fb4:	3b30      	subs	r3, #48	; 0x30
 8012fb6:	2b09      	cmp	r3, #9
 8012fb8:	d94e      	bls.n	8013058 <_vfiprintf_r+0x1c4>
 8012fba:	b1b0      	cbz	r0, 8012fea <_vfiprintf_r+0x156>
 8012fbc:	9207      	str	r2, [sp, #28]
 8012fbe:	e014      	b.n	8012fea <_vfiprintf_r+0x156>
 8012fc0:	eba0 0308 	sub.w	r3, r0, r8
 8012fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	9304      	str	r3, [sp, #16]
 8012fcc:	46a2      	mov	sl, r4
 8012fce:	e7d2      	b.n	8012f76 <_vfiprintf_r+0xe2>
 8012fd0:	9b03      	ldr	r3, [sp, #12]
 8012fd2:	1d19      	adds	r1, r3, #4
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	9103      	str	r1, [sp, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	bfbb      	ittet	lt
 8012fdc:	425b      	neglt	r3, r3
 8012fde:	f042 0202 	orrlt.w	r2, r2, #2
 8012fe2:	9307      	strge	r3, [sp, #28]
 8012fe4:	9307      	strlt	r3, [sp, #28]
 8012fe6:	bfb8      	it	lt
 8012fe8:	9204      	strlt	r2, [sp, #16]
 8012fea:	7823      	ldrb	r3, [r4, #0]
 8012fec:	2b2e      	cmp	r3, #46	; 0x2e
 8012fee:	d10c      	bne.n	801300a <_vfiprintf_r+0x176>
 8012ff0:	7863      	ldrb	r3, [r4, #1]
 8012ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ff4:	d135      	bne.n	8013062 <_vfiprintf_r+0x1ce>
 8012ff6:	9b03      	ldr	r3, [sp, #12]
 8012ff8:	1d1a      	adds	r2, r3, #4
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	9203      	str	r2, [sp, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	bfb8      	it	lt
 8013002:	f04f 33ff 	movlt.w	r3, #4294967295
 8013006:	3402      	adds	r4, #2
 8013008:	9305      	str	r3, [sp, #20]
 801300a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80130f0 <_vfiprintf_r+0x25c>
 801300e:	7821      	ldrb	r1, [r4, #0]
 8013010:	2203      	movs	r2, #3
 8013012:	4650      	mov	r0, sl
 8013014:	f7ed f914 	bl	8000240 <memchr>
 8013018:	b140      	cbz	r0, 801302c <_vfiprintf_r+0x198>
 801301a:	2340      	movs	r3, #64	; 0x40
 801301c:	eba0 000a 	sub.w	r0, r0, sl
 8013020:	fa03 f000 	lsl.w	r0, r3, r0
 8013024:	9b04      	ldr	r3, [sp, #16]
 8013026:	4303      	orrs	r3, r0
 8013028:	3401      	adds	r4, #1
 801302a:	9304      	str	r3, [sp, #16]
 801302c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013030:	482c      	ldr	r0, [pc, #176]	; (80130e4 <_vfiprintf_r+0x250>)
 8013032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013036:	2206      	movs	r2, #6
 8013038:	f7ed f902 	bl	8000240 <memchr>
 801303c:	2800      	cmp	r0, #0
 801303e:	d03f      	beq.n	80130c0 <_vfiprintf_r+0x22c>
 8013040:	4b29      	ldr	r3, [pc, #164]	; (80130e8 <_vfiprintf_r+0x254>)
 8013042:	bb1b      	cbnz	r3, 801308c <_vfiprintf_r+0x1f8>
 8013044:	9b03      	ldr	r3, [sp, #12]
 8013046:	3307      	adds	r3, #7
 8013048:	f023 0307 	bic.w	r3, r3, #7
 801304c:	3308      	adds	r3, #8
 801304e:	9303      	str	r3, [sp, #12]
 8013050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013052:	443b      	add	r3, r7
 8013054:	9309      	str	r3, [sp, #36]	; 0x24
 8013056:	e767      	b.n	8012f28 <_vfiprintf_r+0x94>
 8013058:	fb0c 3202 	mla	r2, ip, r2, r3
 801305c:	460c      	mov	r4, r1
 801305e:	2001      	movs	r0, #1
 8013060:	e7a5      	b.n	8012fae <_vfiprintf_r+0x11a>
 8013062:	2300      	movs	r3, #0
 8013064:	3401      	adds	r4, #1
 8013066:	9305      	str	r3, [sp, #20]
 8013068:	4619      	mov	r1, r3
 801306a:	f04f 0c0a 	mov.w	ip, #10
 801306e:	4620      	mov	r0, r4
 8013070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013074:	3a30      	subs	r2, #48	; 0x30
 8013076:	2a09      	cmp	r2, #9
 8013078:	d903      	bls.n	8013082 <_vfiprintf_r+0x1ee>
 801307a:	2b00      	cmp	r3, #0
 801307c:	d0c5      	beq.n	801300a <_vfiprintf_r+0x176>
 801307e:	9105      	str	r1, [sp, #20]
 8013080:	e7c3      	b.n	801300a <_vfiprintf_r+0x176>
 8013082:	fb0c 2101 	mla	r1, ip, r1, r2
 8013086:	4604      	mov	r4, r0
 8013088:	2301      	movs	r3, #1
 801308a:	e7f0      	b.n	801306e <_vfiprintf_r+0x1da>
 801308c:	ab03      	add	r3, sp, #12
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	462a      	mov	r2, r5
 8013092:	4b16      	ldr	r3, [pc, #88]	; (80130ec <_vfiprintf_r+0x258>)
 8013094:	a904      	add	r1, sp, #16
 8013096:	4630      	mov	r0, r6
 8013098:	f3af 8000 	nop.w
 801309c:	4607      	mov	r7, r0
 801309e:	1c78      	adds	r0, r7, #1
 80130a0:	d1d6      	bne.n	8013050 <_vfiprintf_r+0x1bc>
 80130a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130a4:	07d9      	lsls	r1, r3, #31
 80130a6:	d405      	bmi.n	80130b4 <_vfiprintf_r+0x220>
 80130a8:	89ab      	ldrh	r3, [r5, #12]
 80130aa:	059a      	lsls	r2, r3, #22
 80130ac:	d402      	bmi.n	80130b4 <_vfiprintf_r+0x220>
 80130ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130b0:	f7ff fdaf 	bl	8012c12 <__retarget_lock_release_recursive>
 80130b4:	89ab      	ldrh	r3, [r5, #12]
 80130b6:	065b      	lsls	r3, r3, #25
 80130b8:	f53f af12 	bmi.w	8012ee0 <_vfiprintf_r+0x4c>
 80130bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130be:	e711      	b.n	8012ee4 <_vfiprintf_r+0x50>
 80130c0:	ab03      	add	r3, sp, #12
 80130c2:	9300      	str	r3, [sp, #0]
 80130c4:	462a      	mov	r2, r5
 80130c6:	4b09      	ldr	r3, [pc, #36]	; (80130ec <_vfiprintf_r+0x258>)
 80130c8:	a904      	add	r1, sp, #16
 80130ca:	4630      	mov	r0, r6
 80130cc:	f000 f880 	bl	80131d0 <_printf_i>
 80130d0:	e7e4      	b.n	801309c <_vfiprintf_r+0x208>
 80130d2:	bf00      	nop
 80130d4:	08016298 	.word	0x08016298
 80130d8:	080162b8 	.word	0x080162b8
 80130dc:	08016278 	.word	0x08016278
 80130e0:	080162d8 	.word	0x080162d8
 80130e4:	080162e2 	.word	0x080162e2
 80130e8:	00000000 	.word	0x00000000
 80130ec:	08012e6f 	.word	0x08012e6f
 80130f0:	080162de 	.word	0x080162de

080130f4 <_printf_common>:
 80130f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130f8:	4616      	mov	r6, r2
 80130fa:	4699      	mov	r9, r3
 80130fc:	688a      	ldr	r2, [r1, #8]
 80130fe:	690b      	ldr	r3, [r1, #16]
 8013100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013104:	4293      	cmp	r3, r2
 8013106:	bfb8      	it	lt
 8013108:	4613      	movlt	r3, r2
 801310a:	6033      	str	r3, [r6, #0]
 801310c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013110:	4607      	mov	r7, r0
 8013112:	460c      	mov	r4, r1
 8013114:	b10a      	cbz	r2, 801311a <_printf_common+0x26>
 8013116:	3301      	adds	r3, #1
 8013118:	6033      	str	r3, [r6, #0]
 801311a:	6823      	ldr	r3, [r4, #0]
 801311c:	0699      	lsls	r1, r3, #26
 801311e:	bf42      	ittt	mi
 8013120:	6833      	ldrmi	r3, [r6, #0]
 8013122:	3302      	addmi	r3, #2
 8013124:	6033      	strmi	r3, [r6, #0]
 8013126:	6825      	ldr	r5, [r4, #0]
 8013128:	f015 0506 	ands.w	r5, r5, #6
 801312c:	d106      	bne.n	801313c <_printf_common+0x48>
 801312e:	f104 0a19 	add.w	sl, r4, #25
 8013132:	68e3      	ldr	r3, [r4, #12]
 8013134:	6832      	ldr	r2, [r6, #0]
 8013136:	1a9b      	subs	r3, r3, r2
 8013138:	42ab      	cmp	r3, r5
 801313a:	dc26      	bgt.n	801318a <_printf_common+0x96>
 801313c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013140:	1e13      	subs	r3, r2, #0
 8013142:	6822      	ldr	r2, [r4, #0]
 8013144:	bf18      	it	ne
 8013146:	2301      	movne	r3, #1
 8013148:	0692      	lsls	r2, r2, #26
 801314a:	d42b      	bmi.n	80131a4 <_printf_common+0xb0>
 801314c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013150:	4649      	mov	r1, r9
 8013152:	4638      	mov	r0, r7
 8013154:	47c0      	blx	r8
 8013156:	3001      	adds	r0, #1
 8013158:	d01e      	beq.n	8013198 <_printf_common+0xa4>
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	68e5      	ldr	r5, [r4, #12]
 801315e:	6832      	ldr	r2, [r6, #0]
 8013160:	f003 0306 	and.w	r3, r3, #6
 8013164:	2b04      	cmp	r3, #4
 8013166:	bf08      	it	eq
 8013168:	1aad      	subeq	r5, r5, r2
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	6922      	ldr	r2, [r4, #16]
 801316e:	bf0c      	ite	eq
 8013170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013174:	2500      	movne	r5, #0
 8013176:	4293      	cmp	r3, r2
 8013178:	bfc4      	itt	gt
 801317a:	1a9b      	subgt	r3, r3, r2
 801317c:	18ed      	addgt	r5, r5, r3
 801317e:	2600      	movs	r6, #0
 8013180:	341a      	adds	r4, #26
 8013182:	42b5      	cmp	r5, r6
 8013184:	d11a      	bne.n	80131bc <_printf_common+0xc8>
 8013186:	2000      	movs	r0, #0
 8013188:	e008      	b.n	801319c <_printf_common+0xa8>
 801318a:	2301      	movs	r3, #1
 801318c:	4652      	mov	r2, sl
 801318e:	4649      	mov	r1, r9
 8013190:	4638      	mov	r0, r7
 8013192:	47c0      	blx	r8
 8013194:	3001      	adds	r0, #1
 8013196:	d103      	bne.n	80131a0 <_printf_common+0xac>
 8013198:	f04f 30ff 	mov.w	r0, #4294967295
 801319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a0:	3501      	adds	r5, #1
 80131a2:	e7c6      	b.n	8013132 <_printf_common+0x3e>
 80131a4:	18e1      	adds	r1, r4, r3
 80131a6:	1c5a      	adds	r2, r3, #1
 80131a8:	2030      	movs	r0, #48	; 0x30
 80131aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131ae:	4422      	add	r2, r4
 80131b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131b8:	3302      	adds	r3, #2
 80131ba:	e7c7      	b.n	801314c <_printf_common+0x58>
 80131bc:	2301      	movs	r3, #1
 80131be:	4622      	mov	r2, r4
 80131c0:	4649      	mov	r1, r9
 80131c2:	4638      	mov	r0, r7
 80131c4:	47c0      	blx	r8
 80131c6:	3001      	adds	r0, #1
 80131c8:	d0e6      	beq.n	8013198 <_printf_common+0xa4>
 80131ca:	3601      	adds	r6, #1
 80131cc:	e7d9      	b.n	8013182 <_printf_common+0x8e>
	...

080131d0 <_printf_i>:
 80131d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131d4:	460c      	mov	r4, r1
 80131d6:	4691      	mov	r9, r2
 80131d8:	7e27      	ldrb	r7, [r4, #24]
 80131da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131dc:	2f78      	cmp	r7, #120	; 0x78
 80131de:	4680      	mov	r8, r0
 80131e0:	469a      	mov	sl, r3
 80131e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131e6:	d807      	bhi.n	80131f8 <_printf_i+0x28>
 80131e8:	2f62      	cmp	r7, #98	; 0x62
 80131ea:	d80a      	bhi.n	8013202 <_printf_i+0x32>
 80131ec:	2f00      	cmp	r7, #0
 80131ee:	f000 80d8 	beq.w	80133a2 <_printf_i+0x1d2>
 80131f2:	2f58      	cmp	r7, #88	; 0x58
 80131f4:	f000 80a3 	beq.w	801333e <_printf_i+0x16e>
 80131f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80131fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013200:	e03a      	b.n	8013278 <_printf_i+0xa8>
 8013202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013206:	2b15      	cmp	r3, #21
 8013208:	d8f6      	bhi.n	80131f8 <_printf_i+0x28>
 801320a:	a001      	add	r0, pc, #4	; (adr r0, 8013210 <_printf_i+0x40>)
 801320c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013210:	08013269 	.word	0x08013269
 8013214:	0801327d 	.word	0x0801327d
 8013218:	080131f9 	.word	0x080131f9
 801321c:	080131f9 	.word	0x080131f9
 8013220:	080131f9 	.word	0x080131f9
 8013224:	080131f9 	.word	0x080131f9
 8013228:	0801327d 	.word	0x0801327d
 801322c:	080131f9 	.word	0x080131f9
 8013230:	080131f9 	.word	0x080131f9
 8013234:	080131f9 	.word	0x080131f9
 8013238:	080131f9 	.word	0x080131f9
 801323c:	08013389 	.word	0x08013389
 8013240:	080132ad 	.word	0x080132ad
 8013244:	0801336b 	.word	0x0801336b
 8013248:	080131f9 	.word	0x080131f9
 801324c:	080131f9 	.word	0x080131f9
 8013250:	080133ab 	.word	0x080133ab
 8013254:	080131f9 	.word	0x080131f9
 8013258:	080132ad 	.word	0x080132ad
 801325c:	080131f9 	.word	0x080131f9
 8013260:	080131f9 	.word	0x080131f9
 8013264:	08013373 	.word	0x08013373
 8013268:	680b      	ldr	r3, [r1, #0]
 801326a:	1d1a      	adds	r2, r3, #4
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	600a      	str	r2, [r1, #0]
 8013270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013278:	2301      	movs	r3, #1
 801327a:	e0a3      	b.n	80133c4 <_printf_i+0x1f4>
 801327c:	6825      	ldr	r5, [r4, #0]
 801327e:	6808      	ldr	r0, [r1, #0]
 8013280:	062e      	lsls	r6, r5, #24
 8013282:	f100 0304 	add.w	r3, r0, #4
 8013286:	d50a      	bpl.n	801329e <_printf_i+0xce>
 8013288:	6805      	ldr	r5, [r0, #0]
 801328a:	600b      	str	r3, [r1, #0]
 801328c:	2d00      	cmp	r5, #0
 801328e:	da03      	bge.n	8013298 <_printf_i+0xc8>
 8013290:	232d      	movs	r3, #45	; 0x2d
 8013292:	426d      	negs	r5, r5
 8013294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013298:	485e      	ldr	r0, [pc, #376]	; (8013414 <_printf_i+0x244>)
 801329a:	230a      	movs	r3, #10
 801329c:	e019      	b.n	80132d2 <_printf_i+0x102>
 801329e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80132a2:	6805      	ldr	r5, [r0, #0]
 80132a4:	600b      	str	r3, [r1, #0]
 80132a6:	bf18      	it	ne
 80132a8:	b22d      	sxthne	r5, r5
 80132aa:	e7ef      	b.n	801328c <_printf_i+0xbc>
 80132ac:	680b      	ldr	r3, [r1, #0]
 80132ae:	6825      	ldr	r5, [r4, #0]
 80132b0:	1d18      	adds	r0, r3, #4
 80132b2:	6008      	str	r0, [r1, #0]
 80132b4:	0628      	lsls	r0, r5, #24
 80132b6:	d501      	bpl.n	80132bc <_printf_i+0xec>
 80132b8:	681d      	ldr	r5, [r3, #0]
 80132ba:	e002      	b.n	80132c2 <_printf_i+0xf2>
 80132bc:	0669      	lsls	r1, r5, #25
 80132be:	d5fb      	bpl.n	80132b8 <_printf_i+0xe8>
 80132c0:	881d      	ldrh	r5, [r3, #0]
 80132c2:	4854      	ldr	r0, [pc, #336]	; (8013414 <_printf_i+0x244>)
 80132c4:	2f6f      	cmp	r7, #111	; 0x6f
 80132c6:	bf0c      	ite	eq
 80132c8:	2308      	moveq	r3, #8
 80132ca:	230a      	movne	r3, #10
 80132cc:	2100      	movs	r1, #0
 80132ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132d2:	6866      	ldr	r6, [r4, #4]
 80132d4:	60a6      	str	r6, [r4, #8]
 80132d6:	2e00      	cmp	r6, #0
 80132d8:	bfa2      	ittt	ge
 80132da:	6821      	ldrge	r1, [r4, #0]
 80132dc:	f021 0104 	bicge.w	r1, r1, #4
 80132e0:	6021      	strge	r1, [r4, #0]
 80132e2:	b90d      	cbnz	r5, 80132e8 <_printf_i+0x118>
 80132e4:	2e00      	cmp	r6, #0
 80132e6:	d04d      	beq.n	8013384 <_printf_i+0x1b4>
 80132e8:	4616      	mov	r6, r2
 80132ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80132ee:	fb03 5711 	mls	r7, r3, r1, r5
 80132f2:	5dc7      	ldrb	r7, [r0, r7]
 80132f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132f8:	462f      	mov	r7, r5
 80132fa:	42bb      	cmp	r3, r7
 80132fc:	460d      	mov	r5, r1
 80132fe:	d9f4      	bls.n	80132ea <_printf_i+0x11a>
 8013300:	2b08      	cmp	r3, #8
 8013302:	d10b      	bne.n	801331c <_printf_i+0x14c>
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	07df      	lsls	r7, r3, #31
 8013308:	d508      	bpl.n	801331c <_printf_i+0x14c>
 801330a:	6923      	ldr	r3, [r4, #16]
 801330c:	6861      	ldr	r1, [r4, #4]
 801330e:	4299      	cmp	r1, r3
 8013310:	bfde      	ittt	le
 8013312:	2330      	movle	r3, #48	; 0x30
 8013314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013318:	f106 36ff 	addle.w	r6, r6, #4294967295
 801331c:	1b92      	subs	r2, r2, r6
 801331e:	6122      	str	r2, [r4, #16]
 8013320:	f8cd a000 	str.w	sl, [sp]
 8013324:	464b      	mov	r3, r9
 8013326:	aa03      	add	r2, sp, #12
 8013328:	4621      	mov	r1, r4
 801332a:	4640      	mov	r0, r8
 801332c:	f7ff fee2 	bl	80130f4 <_printf_common>
 8013330:	3001      	adds	r0, #1
 8013332:	d14c      	bne.n	80133ce <_printf_i+0x1fe>
 8013334:	f04f 30ff 	mov.w	r0, #4294967295
 8013338:	b004      	add	sp, #16
 801333a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801333e:	4835      	ldr	r0, [pc, #212]	; (8013414 <_printf_i+0x244>)
 8013340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013344:	6823      	ldr	r3, [r4, #0]
 8013346:	680e      	ldr	r6, [r1, #0]
 8013348:	061f      	lsls	r7, r3, #24
 801334a:	f856 5b04 	ldr.w	r5, [r6], #4
 801334e:	600e      	str	r6, [r1, #0]
 8013350:	d514      	bpl.n	801337c <_printf_i+0x1ac>
 8013352:	07d9      	lsls	r1, r3, #31
 8013354:	bf44      	itt	mi
 8013356:	f043 0320 	orrmi.w	r3, r3, #32
 801335a:	6023      	strmi	r3, [r4, #0]
 801335c:	b91d      	cbnz	r5, 8013366 <_printf_i+0x196>
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	f023 0320 	bic.w	r3, r3, #32
 8013364:	6023      	str	r3, [r4, #0]
 8013366:	2310      	movs	r3, #16
 8013368:	e7b0      	b.n	80132cc <_printf_i+0xfc>
 801336a:	6823      	ldr	r3, [r4, #0]
 801336c:	f043 0320 	orr.w	r3, r3, #32
 8013370:	6023      	str	r3, [r4, #0]
 8013372:	2378      	movs	r3, #120	; 0x78
 8013374:	4828      	ldr	r0, [pc, #160]	; (8013418 <_printf_i+0x248>)
 8013376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801337a:	e7e3      	b.n	8013344 <_printf_i+0x174>
 801337c:	065e      	lsls	r6, r3, #25
 801337e:	bf48      	it	mi
 8013380:	b2ad      	uxthmi	r5, r5
 8013382:	e7e6      	b.n	8013352 <_printf_i+0x182>
 8013384:	4616      	mov	r6, r2
 8013386:	e7bb      	b.n	8013300 <_printf_i+0x130>
 8013388:	680b      	ldr	r3, [r1, #0]
 801338a:	6826      	ldr	r6, [r4, #0]
 801338c:	6960      	ldr	r0, [r4, #20]
 801338e:	1d1d      	adds	r5, r3, #4
 8013390:	600d      	str	r5, [r1, #0]
 8013392:	0635      	lsls	r5, r6, #24
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	d501      	bpl.n	801339c <_printf_i+0x1cc>
 8013398:	6018      	str	r0, [r3, #0]
 801339a:	e002      	b.n	80133a2 <_printf_i+0x1d2>
 801339c:	0671      	lsls	r1, r6, #25
 801339e:	d5fb      	bpl.n	8013398 <_printf_i+0x1c8>
 80133a0:	8018      	strh	r0, [r3, #0]
 80133a2:	2300      	movs	r3, #0
 80133a4:	6123      	str	r3, [r4, #16]
 80133a6:	4616      	mov	r6, r2
 80133a8:	e7ba      	b.n	8013320 <_printf_i+0x150>
 80133aa:	680b      	ldr	r3, [r1, #0]
 80133ac:	1d1a      	adds	r2, r3, #4
 80133ae:	600a      	str	r2, [r1, #0]
 80133b0:	681e      	ldr	r6, [r3, #0]
 80133b2:	6862      	ldr	r2, [r4, #4]
 80133b4:	2100      	movs	r1, #0
 80133b6:	4630      	mov	r0, r6
 80133b8:	f7ec ff42 	bl	8000240 <memchr>
 80133bc:	b108      	cbz	r0, 80133c2 <_printf_i+0x1f2>
 80133be:	1b80      	subs	r0, r0, r6
 80133c0:	6060      	str	r0, [r4, #4]
 80133c2:	6863      	ldr	r3, [r4, #4]
 80133c4:	6123      	str	r3, [r4, #16]
 80133c6:	2300      	movs	r3, #0
 80133c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133cc:	e7a8      	b.n	8013320 <_printf_i+0x150>
 80133ce:	6923      	ldr	r3, [r4, #16]
 80133d0:	4632      	mov	r2, r6
 80133d2:	4649      	mov	r1, r9
 80133d4:	4640      	mov	r0, r8
 80133d6:	47d0      	blx	sl
 80133d8:	3001      	adds	r0, #1
 80133da:	d0ab      	beq.n	8013334 <_printf_i+0x164>
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	079b      	lsls	r3, r3, #30
 80133e0:	d413      	bmi.n	801340a <_printf_i+0x23a>
 80133e2:	68e0      	ldr	r0, [r4, #12]
 80133e4:	9b03      	ldr	r3, [sp, #12]
 80133e6:	4298      	cmp	r0, r3
 80133e8:	bfb8      	it	lt
 80133ea:	4618      	movlt	r0, r3
 80133ec:	e7a4      	b.n	8013338 <_printf_i+0x168>
 80133ee:	2301      	movs	r3, #1
 80133f0:	4632      	mov	r2, r6
 80133f2:	4649      	mov	r1, r9
 80133f4:	4640      	mov	r0, r8
 80133f6:	47d0      	blx	sl
 80133f8:	3001      	adds	r0, #1
 80133fa:	d09b      	beq.n	8013334 <_printf_i+0x164>
 80133fc:	3501      	adds	r5, #1
 80133fe:	68e3      	ldr	r3, [r4, #12]
 8013400:	9903      	ldr	r1, [sp, #12]
 8013402:	1a5b      	subs	r3, r3, r1
 8013404:	42ab      	cmp	r3, r5
 8013406:	dcf2      	bgt.n	80133ee <_printf_i+0x21e>
 8013408:	e7eb      	b.n	80133e2 <_printf_i+0x212>
 801340a:	2500      	movs	r5, #0
 801340c:	f104 0619 	add.w	r6, r4, #25
 8013410:	e7f5      	b.n	80133fe <_printf_i+0x22e>
 8013412:	bf00      	nop
 8013414:	080162e9 	.word	0x080162e9
 8013418:	080162fa 	.word	0x080162fa

0801341c <_sbrk_r>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4d06      	ldr	r5, [pc, #24]	; (8013438 <_sbrk_r+0x1c>)
 8013420:	2300      	movs	r3, #0
 8013422:	4604      	mov	r4, r0
 8013424:	4608      	mov	r0, r1
 8013426:	602b      	str	r3, [r5, #0]
 8013428:	f7ed fb8e 	bl	8000b48 <_sbrk>
 801342c:	1c43      	adds	r3, r0, #1
 801342e:	d102      	bne.n	8013436 <_sbrk_r+0x1a>
 8013430:	682b      	ldr	r3, [r5, #0]
 8013432:	b103      	cbz	r3, 8013436 <_sbrk_r+0x1a>
 8013434:	6023      	str	r3, [r4, #0]
 8013436:	bd38      	pop	{r3, r4, r5, pc}
 8013438:	200069a4 	.word	0x200069a4

0801343c <__sread>:
 801343c:	b510      	push	{r4, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013444:	f000 f8a8 	bl	8013598 <_read_r>
 8013448:	2800      	cmp	r0, #0
 801344a:	bfab      	itete	ge
 801344c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801344e:	89a3      	ldrhlt	r3, [r4, #12]
 8013450:	181b      	addge	r3, r3, r0
 8013452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013456:	bfac      	ite	ge
 8013458:	6563      	strge	r3, [r4, #84]	; 0x54
 801345a:	81a3      	strhlt	r3, [r4, #12]
 801345c:	bd10      	pop	{r4, pc}

0801345e <__swrite>:
 801345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013462:	461f      	mov	r7, r3
 8013464:	898b      	ldrh	r3, [r1, #12]
 8013466:	05db      	lsls	r3, r3, #23
 8013468:	4605      	mov	r5, r0
 801346a:	460c      	mov	r4, r1
 801346c:	4616      	mov	r6, r2
 801346e:	d505      	bpl.n	801347c <__swrite+0x1e>
 8013470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013474:	2302      	movs	r3, #2
 8013476:	2200      	movs	r2, #0
 8013478:	f000 f870 	bl	801355c <_lseek_r>
 801347c:	89a3      	ldrh	r3, [r4, #12]
 801347e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013486:	81a3      	strh	r3, [r4, #12]
 8013488:	4632      	mov	r2, r6
 801348a:	463b      	mov	r3, r7
 801348c:	4628      	mov	r0, r5
 801348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013492:	f000 b817 	b.w	80134c4 <_write_r>

08013496 <__sseek>:
 8013496:	b510      	push	{r4, lr}
 8013498:	460c      	mov	r4, r1
 801349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801349e:	f000 f85d 	bl	801355c <_lseek_r>
 80134a2:	1c43      	adds	r3, r0, #1
 80134a4:	89a3      	ldrh	r3, [r4, #12]
 80134a6:	bf15      	itete	ne
 80134a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80134aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134b2:	81a3      	strheq	r3, [r4, #12]
 80134b4:	bf18      	it	ne
 80134b6:	81a3      	strhne	r3, [r4, #12]
 80134b8:	bd10      	pop	{r4, pc}

080134ba <__sclose>:
 80134ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134be:	f000 b81b 	b.w	80134f8 <_close_r>
	...

080134c4 <_write_r>:
 80134c4:	b538      	push	{r3, r4, r5, lr}
 80134c6:	4d07      	ldr	r5, [pc, #28]	; (80134e4 <_write_r+0x20>)
 80134c8:	4604      	mov	r4, r0
 80134ca:	4608      	mov	r0, r1
 80134cc:	4611      	mov	r1, r2
 80134ce:	2200      	movs	r2, #0
 80134d0:	602a      	str	r2, [r5, #0]
 80134d2:	461a      	mov	r2, r3
 80134d4:	f7ed fa4e 	bl	8000974 <_write>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	d102      	bne.n	80134e2 <_write_r+0x1e>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	b103      	cbz	r3, 80134e2 <_write_r+0x1e>
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	bd38      	pop	{r3, r4, r5, pc}
 80134e4:	200069a4 	.word	0x200069a4

080134e8 <abort>:
 80134e8:	b508      	push	{r3, lr}
 80134ea:	2006      	movs	r0, #6
 80134ec:	f000 f88e 	bl	801360c <raise>
 80134f0:	2001      	movs	r0, #1
 80134f2:	f7ed facd 	bl	8000a90 <_exit>
	...

080134f8 <_close_r>:
 80134f8:	b538      	push	{r3, r4, r5, lr}
 80134fa:	4d06      	ldr	r5, [pc, #24]	; (8013514 <_close_r+0x1c>)
 80134fc:	2300      	movs	r3, #0
 80134fe:	4604      	mov	r4, r0
 8013500:	4608      	mov	r0, r1
 8013502:	602b      	str	r3, [r5, #0]
 8013504:	f7ed faeb 	bl	8000ade <_close>
 8013508:	1c43      	adds	r3, r0, #1
 801350a:	d102      	bne.n	8013512 <_close_r+0x1a>
 801350c:	682b      	ldr	r3, [r5, #0]
 801350e:	b103      	cbz	r3, 8013512 <_close_r+0x1a>
 8013510:	6023      	str	r3, [r4, #0]
 8013512:	bd38      	pop	{r3, r4, r5, pc}
 8013514:	200069a4 	.word	0x200069a4

08013518 <_fstat_r>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4d07      	ldr	r5, [pc, #28]	; (8013538 <_fstat_r+0x20>)
 801351c:	2300      	movs	r3, #0
 801351e:	4604      	mov	r4, r0
 8013520:	4608      	mov	r0, r1
 8013522:	4611      	mov	r1, r2
 8013524:	602b      	str	r3, [r5, #0]
 8013526:	f7ed fae6 	bl	8000af6 <_fstat>
 801352a:	1c43      	adds	r3, r0, #1
 801352c:	d102      	bne.n	8013534 <_fstat_r+0x1c>
 801352e:	682b      	ldr	r3, [r5, #0]
 8013530:	b103      	cbz	r3, 8013534 <_fstat_r+0x1c>
 8013532:	6023      	str	r3, [r4, #0]
 8013534:	bd38      	pop	{r3, r4, r5, pc}
 8013536:	bf00      	nop
 8013538:	200069a4 	.word	0x200069a4

0801353c <_isatty_r>:
 801353c:	b538      	push	{r3, r4, r5, lr}
 801353e:	4d06      	ldr	r5, [pc, #24]	; (8013558 <_isatty_r+0x1c>)
 8013540:	2300      	movs	r3, #0
 8013542:	4604      	mov	r4, r0
 8013544:	4608      	mov	r0, r1
 8013546:	602b      	str	r3, [r5, #0]
 8013548:	f7ed fae5 	bl	8000b16 <_isatty>
 801354c:	1c43      	adds	r3, r0, #1
 801354e:	d102      	bne.n	8013556 <_isatty_r+0x1a>
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	b103      	cbz	r3, 8013556 <_isatty_r+0x1a>
 8013554:	6023      	str	r3, [r4, #0]
 8013556:	bd38      	pop	{r3, r4, r5, pc}
 8013558:	200069a4 	.word	0x200069a4

0801355c <_lseek_r>:
 801355c:	b538      	push	{r3, r4, r5, lr}
 801355e:	4d07      	ldr	r5, [pc, #28]	; (801357c <_lseek_r+0x20>)
 8013560:	4604      	mov	r4, r0
 8013562:	4608      	mov	r0, r1
 8013564:	4611      	mov	r1, r2
 8013566:	2200      	movs	r2, #0
 8013568:	602a      	str	r2, [r5, #0]
 801356a:	461a      	mov	r2, r3
 801356c:	f7ed fade 	bl	8000b2c <_lseek>
 8013570:	1c43      	adds	r3, r0, #1
 8013572:	d102      	bne.n	801357a <_lseek_r+0x1e>
 8013574:	682b      	ldr	r3, [r5, #0]
 8013576:	b103      	cbz	r3, 801357a <_lseek_r+0x1e>
 8013578:	6023      	str	r3, [r4, #0]
 801357a:	bd38      	pop	{r3, r4, r5, pc}
 801357c:	200069a4 	.word	0x200069a4

08013580 <__malloc_lock>:
 8013580:	4801      	ldr	r0, [pc, #4]	; (8013588 <__malloc_lock+0x8>)
 8013582:	f7ff bb45 	b.w	8012c10 <__retarget_lock_acquire_recursive>
 8013586:	bf00      	nop
 8013588:	200069ac 	.word	0x200069ac

0801358c <__malloc_unlock>:
 801358c:	4801      	ldr	r0, [pc, #4]	; (8013594 <__malloc_unlock+0x8>)
 801358e:	f7ff bb40 	b.w	8012c12 <__retarget_lock_release_recursive>
 8013592:	bf00      	nop
 8013594:	200069ac 	.word	0x200069ac

08013598 <_read_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	4d07      	ldr	r5, [pc, #28]	; (80135b8 <_read_r+0x20>)
 801359c:	4604      	mov	r4, r0
 801359e:	4608      	mov	r0, r1
 80135a0:	4611      	mov	r1, r2
 80135a2:	2200      	movs	r2, #0
 80135a4:	602a      	str	r2, [r5, #0]
 80135a6:	461a      	mov	r2, r3
 80135a8:	f7ed fa7c 	bl	8000aa4 <_read>
 80135ac:	1c43      	adds	r3, r0, #1
 80135ae:	d102      	bne.n	80135b6 <_read_r+0x1e>
 80135b0:	682b      	ldr	r3, [r5, #0]
 80135b2:	b103      	cbz	r3, 80135b6 <_read_r+0x1e>
 80135b4:	6023      	str	r3, [r4, #0]
 80135b6:	bd38      	pop	{r3, r4, r5, pc}
 80135b8:	200069a4 	.word	0x200069a4

080135bc <_raise_r>:
 80135bc:	291f      	cmp	r1, #31
 80135be:	b538      	push	{r3, r4, r5, lr}
 80135c0:	4604      	mov	r4, r0
 80135c2:	460d      	mov	r5, r1
 80135c4:	d904      	bls.n	80135d0 <_raise_r+0x14>
 80135c6:	2316      	movs	r3, #22
 80135c8:	6003      	str	r3, [r0, #0]
 80135ca:	f04f 30ff 	mov.w	r0, #4294967295
 80135ce:	bd38      	pop	{r3, r4, r5, pc}
 80135d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135d2:	b112      	cbz	r2, 80135da <_raise_r+0x1e>
 80135d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135d8:	b94b      	cbnz	r3, 80135ee <_raise_r+0x32>
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 f830 	bl	8013640 <_getpid_r>
 80135e0:	462a      	mov	r2, r5
 80135e2:	4601      	mov	r1, r0
 80135e4:	4620      	mov	r0, r4
 80135e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ea:	f000 b817 	b.w	801361c <_kill_r>
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d00a      	beq.n	8013608 <_raise_r+0x4c>
 80135f2:	1c59      	adds	r1, r3, #1
 80135f4:	d103      	bne.n	80135fe <_raise_r+0x42>
 80135f6:	2316      	movs	r3, #22
 80135f8:	6003      	str	r3, [r0, #0]
 80135fa:	2001      	movs	r0, #1
 80135fc:	e7e7      	b.n	80135ce <_raise_r+0x12>
 80135fe:	2400      	movs	r4, #0
 8013600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013604:	4628      	mov	r0, r5
 8013606:	4798      	blx	r3
 8013608:	2000      	movs	r0, #0
 801360a:	e7e0      	b.n	80135ce <_raise_r+0x12>

0801360c <raise>:
 801360c:	4b02      	ldr	r3, [pc, #8]	; (8013618 <raise+0xc>)
 801360e:	4601      	mov	r1, r0
 8013610:	6818      	ldr	r0, [r3, #0]
 8013612:	f7ff bfd3 	b.w	80135bc <_raise_r>
 8013616:	bf00      	nop
 8013618:	20000018 	.word	0x20000018

0801361c <_kill_r>:
 801361c:	b538      	push	{r3, r4, r5, lr}
 801361e:	4d07      	ldr	r5, [pc, #28]	; (801363c <_kill_r+0x20>)
 8013620:	2300      	movs	r3, #0
 8013622:	4604      	mov	r4, r0
 8013624:	4608      	mov	r0, r1
 8013626:	4611      	mov	r1, r2
 8013628:	602b      	str	r3, [r5, #0]
 801362a:	f7ed fa1f 	bl	8000a6c <_kill>
 801362e:	1c43      	adds	r3, r0, #1
 8013630:	d102      	bne.n	8013638 <_kill_r+0x1c>
 8013632:	682b      	ldr	r3, [r5, #0]
 8013634:	b103      	cbz	r3, 8013638 <_kill_r+0x1c>
 8013636:	6023      	str	r3, [r4, #0]
 8013638:	bd38      	pop	{r3, r4, r5, pc}
 801363a:	bf00      	nop
 801363c:	200069a4 	.word	0x200069a4

08013640 <_getpid_r>:
 8013640:	f7ed ba0c 	b.w	8000a5c <_getpid>

08013644 <_init>:
 8013644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013646:	bf00      	nop
 8013648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801364a:	bc08      	pop	{r3}
 801364c:	469e      	mov	lr, r3
 801364e:	4770      	bx	lr

08013650 <_fini>:
 8013650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013652:	bf00      	nop
 8013654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013656:	bc08      	pop	{r3}
 8013658:	469e      	mov	lr, r3
 801365a:	4770      	bx	lr
