
SnakeServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  08017ebc  08017ebc  00027ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b074  0801b074  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b074  0801b074  0002b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b07c  0801b07c  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b07c  0801b07c  0002b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b080  0801b080  0002b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801b084  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006938  2000007c  0801b100  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069b4  0801b100  000369b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b0de  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f2d  00000000  00000000  0006b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  000720b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  00073a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035b76  00000000  00000000  00075280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d48e  00000000  00000000  000aadf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112db5  00000000  00000000  000d8284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001eb039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006efc  00000000  00000000  001eb08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08017ea4 	.word	0x08017ea4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08017ea4 	.word	0x08017ea4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_ADC1_Init+0x98>)
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ADC1_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <MX_ADC1_Init+0x98>)
 8000638:	f000 fca2 	bl	8000f80 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa3d 	bl	8000ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000646:	2304      	movs	r3, #4
 8000648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2301      	movs	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_ADC1_Init+0x98>)
 8000658:	f000 fe70 	bl	800133c <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000662:	f000 fa2d 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000224 	.word	0x20000224
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0x74>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d123      	bne.n	80006e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ce:	2310      	movs	r3, #16
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0x7c>)
 80006e2:	f002 fb23 	bl	8002d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a62      	ldr	r2, [pc, #392]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a5c      	ldr	r2, [pc, #368]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a56      	ldr	r2, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b51      	ldr	r3, [pc, #324]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a50      	ldr	r2, [pc, #320]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b4e      	ldr	r3, [pc, #312]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000772:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a4a      	ldr	r2, [pc, #296]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a3e      	ldr	r2, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d8:	4832      	ldr	r0, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 80007da:	f002 fc53 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_D0_Pin|LCD_D7_Pin|LCD_D4_Pin|LCD_D2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007e4:	4830      	ldr	r0, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 80007e6:	f002 fc4d 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D5_Pin|LCD_D3_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 80007f0:	482e      	ldr	r0, [pc, #184]	; (80008ac <MX_GPIO_Init+0x1b0>)
 80007f2:	f002 fc47 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D1_Pin|LCD_RS_Pin|LCD_RD_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f248 01a0 	movw	r1, #32928	; 0x80a0
 80007fc:	482c      	ldr	r0, [pc, #176]	; (80008b0 <MX_GPIO_Init+0x1b4>)
 80007fe:	f002 fc41 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <MX_GPIO_Init+0x1b8>)
 800081a:	f002 fa87 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000838:	f002 fa78 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D7_Pin|LCD_D4_Pin|LCD_D2_Pin;
 800083c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 8000856:	f002 fa69 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D3_Pin;
 800085a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_GPIO_Init+0x1b0>)
 8000874:	f002 fa5a 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_RS_Pin|LCD_RD_Pin;
 8000878:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_GPIO_Init+0x1b4>)
 8000892:	f002 fa4b 	bl	8002d2c <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021400 	.word	0x40021400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40020800 	.word	0x40020800

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ea      	sub	sp, #424	; 0x1a8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fade 	bl	8000e7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f851 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff19 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ca:	f000 fa17 	bl	8000cfc <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80008ce:	f005 f841 	bl	8005954 <MX_LWIP_Init>
  MX_ADC1_Init();
 80008d2:	f7ff fe81 	bl	80005d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  snake_hw_init();
 80008d6:	f010 fa7b 	bl	8010dd0 <snake_hw_init>
  tcp_server_init();
 80008da:	f010 f873 	bl	80109c4 <tcp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80008de:	f005 f96b 	bl	8005bb8 <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snake_t snake = { 0 };
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80008ea:	461a      	mov	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f016 fa41 	bl	8016d74 <memset>
	  food_t food = { 0 };
 80008f2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
	  uint32_t gPrgCycle = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  snake_init(&snake);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f010 fa69 	bl	8010ddc <snake_init>

	  for(;;)
	  {
		snake_control(&snake);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f010 fa54 	bl	8010dba <snake_control>
		snake_move(&snake);
 8000912:	463b      	mov	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f010 fadd 	bl	8010ed4 <snake_move>

		if (snake.state != PLAYING) break;
 800091a:	463b      	mov	r3, r7
 800091c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8000920:	2b00      	cmp	r3, #0
 8000922:	d11c      	bne.n	800095e <main+0xa6>

		snake_haseaten(&snake, &food);
 8000924:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8000928:	463b      	mov	r3, r7
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f010 fd1b 	bl	8011368 <snake_haseaten>
		snake_display(&snake);
 8000932:	463b      	mov	r3, r7
 8000934:	4618      	mov	r0, r3
 8000936:	f010 fa91 	bl	8010e5c <snake_display>
		snake_place_food(&snake, &food, gPrgCycle);
 800093a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800093e:	463b      	mov	r3, r7
 8000940:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000944:	4618      	mov	r0, r3
 8000946:	f010 fcd5 	bl	80112f4 <snake_place_food>

		gPrgCycle++;
 800094a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800094e:	3301      	adds	r3, #1
 8000950:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		VS_DelayWithPolling(150, MX_LWIP_Process);
 8000954:	4903      	ldr	r1, [pc, #12]	; (8000964 <main+0xac>)
 8000956:	2096      	movs	r0, #150	; 0x96
 8000958:	f000 f88c 	bl	8000a74 <VS_DelayWithPolling>
		snake_control(&snake);
 800095c:	e7d5      	b.n	800090a <main+0x52>
		if (snake.state != PLAYING) break;
 800095e:	bf00      	nop
  {
 8000960:	e7bd      	b.n	80008de <main+0x26>
 8000962:	bf00      	nop
 8000964:	08005bb9 	.word	0x08005bb9

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2234      	movs	r2, #52	; 0x34
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f016 f9fc 	bl	8016d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800098c:	f002 fb94 	bl	80030b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <SystemClock_Config+0xd8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemClock_Config+0xd8>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xd8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <SystemClock_Config+0xdc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <SystemClock_Config+0xdc>)
 80009ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SystemClock_Config+0xdc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009d8:	23d8      	movs	r3, #216	; 0xd8
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009dc:	2302      	movs	r3, #2
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fbc3 	bl	8003178 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 f862 	bl	8000ac0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009fc:	f002 fb6c 	bl	80030d8 <HAL_PWREx_EnableOverDrive>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a06:	f000 f85b 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2107      	movs	r1, #7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fe53 	bl	80036d4 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a34:	f000 f844 	bl	8000ac0 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	; 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <_write>:

/* USER CODE BEGIN 4 */
/*printf <=> uart redirection */
int _write(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <_write+0x28>)
 8000a60:	f003 fcb0 	bl	80043c4 <HAL_UART_Transmit>
	return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000026c 	.word	0x2000026c

08000a74 <VS_DelayWithPolling>:

void VS_DelayWithPolling(uint32_t Delay, fn_t func)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8000a7e:	f000 fa4f 	bl	8000f20 <HAL_GetTick>
 8000a82:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8e:	d008      	beq.n	8000aa2 <VS_DelayWithPolling+0x2e>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <VS_DelayWithPolling+0x48>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a9c:	e001      	b.n	8000aa2 <VS_DelayWithPolling+0x2e>
  {
	  func();
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	4798      	blx	r3
  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	f000 fa3d 	bl	8000f20 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d8f5      	bhi.n	8000a9e <VS_DelayWithPolling+0x2a>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f9ca 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <USART3_IRQHandler+0x10>)
 8000b6e:	f003 fd0b 	bl	8004588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000026c 	.word	0x2000026c

08000b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_kill>:

int _kill(int pid, int sig)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_kill+0x20>)
 8000b98:	2216      	movs	r2, #22
 8000b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	200069a4 	.word	0x200069a4

08000bb0 <_exit>:

void _exit (int status)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ffe5 	bl	8000b8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bc2:	e7fe      	b.n	8000bc2 <_exit+0x12>

08000bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
	}

return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c26:	605a      	str	r2, [r3, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_isatty>:

int _isatty(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d205      	bcs.n	8000ca4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <_sbrk+0x6c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	20080000 	.word	0x20080000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	20000098 	.word	0x20000098
 8000cd0:	200069b8 	.word	0x200069b8
 8000cd4:	200069a4 	.word	0x200069a4

08000cd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <MX_USART3_UART_Init+0x5c>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d08:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d40:	f003 faf2 	bl	8004328 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f7ff feb9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000026c 	.word	0x2000026c
 8000d58:	40004800 	.word	0x40004800

08000d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ae      	sub	sp, #184	; 0xb8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2290      	movs	r2, #144	; 0x90
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f015 fff9 	bl	8016d74 <memset>
  if(uartHandle->Instance==USART3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <HAL_UART_MspInit+0xc4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d144      	bne.n	8000e16 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fe9c 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000da6:	f7ff fe8b 	bl	8000ac0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0xc8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <HAL_UART_MspInit+0xcc>)
 8000e02:	f001 ff93 	bl	8002d2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2027      	movs	r0, #39	; 0x27
 8000e0c:	f000 fdc1 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e10:	2027      	movs	r0, #39	; 0x27
 8000e12:	f000 fdda 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	37b8      	adds	r7, #184	; 0xb8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004800 	.word	0x40004800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020c00 	.word	0x40020c00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ff3f 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f015 ff4b 	bl	8016cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fd2b 	bl	80008b8 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e70:	0801b084 	.word	0x0801b084
  ldr r2, =_sbss
 8000e74:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e78:	200069b4 	.word	0x200069b4

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>

08000e7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 fd7a 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f805 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8e:	f7ff fe1d 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd95 	bl	80019e6 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fd5d 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	200002f0 	.word	0x200002f0

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200002f0 	.word	0x200002f0

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e031      	b.n	8000ffa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d109      	bne.n	8000fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fb6c 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d116      	bne.n	8000fec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_ADC_Init+0x84>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	f043 0202 	orr.w	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fb0a 	bl	80015e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fea:	e001      	b.n	8000ff0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	ffffeefd 	.word	0xffffeefd

08001008 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Start+0x1a>
 800101e:	2302      	movs	r3, #2
 8001020:	e0ad      	b.n	800117e <HAL_ADC_Start+0x176>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d018      	beq.n	800106a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <HAL_ADC_Start+0x184>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a50      	ldr	r2, [pc, #320]	; (8001190 <HAL_ADC_Start+0x188>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800105c:	e002      	b.n	8001064 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3b01      	subs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f9      	bne.n	800105e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d175      	bne.n	8001164 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_ADC_Start+0x18c>)
 800107e:	4013      	ands	r3, r2
 8001080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b2:	d106      	bne.n	80010c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f023 0206 	bic.w	r2, r3, #6
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	645a      	str	r2, [r3, #68]	; 0x44
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_ADC_Start+0x190>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10f      	bne.n	8001106 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d143      	bne.n	800117c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e03a      	b.n	800117c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_ADC_Start+0x194>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d10e      	bne.n	800112e <HAL_ADC_Start+0x126>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800112c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_ADC_Start+0x190>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d120      	bne.n	800117c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_ADC_Start+0x198>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11b      	bne.n	800117c <HAL_ADC_Start+0x174>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d114      	bne.n	800117c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e00b      	b.n	800117c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f043 0210 	orr.w	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83
 8001194:	fffff8fe 	.word	0xfffff8fe
 8001198:	40012300 	.word	0x40012300
 800119c:	40012000 	.word	0x40012000
 80011a0:	40012200 	.word	0x40012200

080011a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Stop+0x16>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e01f      	b.n	80011fa <HAL_ADC_Stop+0x56>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_ADC_Stop+0x64>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	ffffeefe 	.word	0xffffeefe

0800120c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001228:	d113      	bne.n	8001252 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001238:	d10b      	bne.n	8001252 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e063      	b.n	800131a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001252:	f7ff fe65 	bl	8000f20 <HAL_GetTick>
 8001256:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001258:	e021      	b.n	800129e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d01d      	beq.n	800129e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_ADC_PollForConversion+0x6c>
 8001268:	f7ff fe5a 	bl	8000f20 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d212      	bcs.n	800129e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b02      	cmp	r3, #2
 8001284:	d00b      	beq.n	800129e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f043 0204 	orr.w	r2, r3, #4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e03d      	b.n	800131a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d1d6      	bne.n	800125a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f06f 0212 	mvn.w	r2, #18
 80012b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d123      	bne.n	8001318 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d11f      	bne.n	8001318 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1c>
 8001354:	2302      	movs	r3, #2
 8001356:	e136      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x28a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d93a      	bls.n	80013de <HAL_ADC_ConfigChannel+0xa2>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001370:	d035      	beq.n	80013de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	3b1e      	subs	r3, #30
 8001388:	2207      	movs	r2, #7
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a8d      	ldr	r2, [pc, #564]	; (80015d4 <HAL_ADC_ConfigChannel+0x298>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10a      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68d9      	ldr	r1, [r3, #12]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	061a      	lsls	r2, r3, #24
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b6:	e035      	b.n	8001424 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4403      	add	r3, r0
 80013d0:	3b1e      	subs	r3, #30
 80013d2:	409a      	lsls	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013dc:	e022      	b.n	8001424 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6919      	ldr	r1, [r3, #16]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6919      	ldr	r1, [r3, #16]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	409a      	lsls	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b06      	cmp	r3, #6
 800142a:	d824      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b05      	subs	r3, #5
 800143e:	221f      	movs	r2, #31
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b05      	subs	r3, #5
 8001468:	fa00 f203 	lsl.w	r2, r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
 8001474:	e04c      	b.n	8001510 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d824      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b23      	subs	r3, #35	; 0x23
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b23      	subs	r3, #35	; 0x23
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
 80014c6:	e023      	b.n	8001510 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b41      	subs	r3, #65	; 0x41
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b41      	subs	r3, #65	; 0x41
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a30      	ldr	r2, [pc, #192]	; (80015d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10a      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1f4>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001522:	d105      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 800152a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800152e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10f      	bne.n	800155a <HAL_ADC_ConfigChannel+0x21e>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d10b      	bne.n	800155a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001548:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800154c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001558:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d12b      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x280>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_ADC_ConfigChannel+0x298>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x23a>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b11      	cmp	r3, #17
 8001574:	d122      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 800157c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001580:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800158c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x298>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d111      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9a      	lsrs	r2, r3, #18
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015ae:	e002      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f9      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	10000012 	.word	0x10000012
 80015d8:	40012000 	.word	0x40012000
 80015dc:	40012300 	.word	0x40012300
 80015e0:	20000000 	.word	0x20000000
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015f0:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <ADC_Init+0x1ec>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a77      	ldr	r2, [pc, #476]	; (80017d4 <ADC_Init+0x1ec>)
 80015f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015fc:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <ADC_Init+0x1ec>)
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4973      	ldr	r1, [pc, #460]	; (80017d4 <ADC_Init+0x1ec>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <ADC_Init+0x1f0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e00f      	b.n	80016e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0202 	bic.w	r2, r2, #2
 80016f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	005a      	lsls	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	035a      	lsls	r2, r3, #13
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	051a      	lsls	r2, r3, #20
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179a:	025a      	lsls	r2, r3, #9
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	029a      	lsls	r2, r3, #10
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	05fa0000 	.word	0x05fa0000

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fa88 	bl	8000f20 <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d008      	beq.n	8001a30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e052      	b.n	8001ad6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0216 	bic.w	r2, r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <HAL_DMA_Abort+0x62>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0208 	bic.w	r2, r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e013      	b.n	8001aaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fa4d 	bl	8000f20 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d90c      	bls.n	8001aaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e015      	b.n	8001ad6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e4      	bne.n	8001a82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00c      	b.n	8001b16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2205      	movs	r2, #5
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001b34:	4ba9      	ldr	r3, [pc, #676]	; (8001ddc <HAL_ETH_Init+0x2b8>)
 8001b36:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e181      	b.n	8001e4e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f004 f836 	bl	8005bd0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_ETH_Init+0x2bc>)
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	4a9d      	ldr	r2, [pc, #628]	; (8001de0 <HAL_ETH_Init+0x2bc>)
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b70:	4b9b      	ldr	r3, [pc, #620]	; (8001de0 <HAL_ETH_Init+0x2bc>)
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b7c:	4b99      	ldr	r3, [pc, #612]	; (8001de4 <HAL_ETH_Init+0x2c0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a98      	ldr	r2, [pc, #608]	; (8001de4 <HAL_ETH_Init+0x2c0>)
 8001b82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b86:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b88:	4b96      	ldr	r3, [pc, #600]	; (8001de4 <HAL_ETH_Init+0x2c0>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4994      	ldr	r1, [pc, #592]	; (8001de4 <HAL_ETH_Init+0x2c0>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bae:	f7ff f9b7 	bl	8000f20 <HAL_GetTick>
 8001bb2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001bb4:	e011      	b.n	8001bda <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001bb6:	f7ff f9b3 	bl	8000f20 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bc4:	d909      	bls.n	8001bda <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e139      	b.n	8001e4e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e4      	bne.n	8001bb6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f023 031c 	bic.w	r3, r3, #28
 8001bfa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bfc:	f001 ff38 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8001c00:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_ETH_Init+0x2c4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d908      	bls.n	8001c1c <HAL_ETH_Init+0xf8>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4a77      	ldr	r2, [pc, #476]	; (8001dec <HAL_ETH_Init+0x2c8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d804      	bhi.n	8001c1c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e027      	b.n	8001c6c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	4a73      	ldr	r2, [pc, #460]	; (8001dec <HAL_ETH_Init+0x2c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d908      	bls.n	8001c36 <HAL_ETH_Init+0x112>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	4a6d      	ldr	r2, [pc, #436]	; (8001ddc <HAL_ETH_Init+0x2b8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d204      	bcs.n	8001c36 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f043 030c 	orr.w	r3, r3, #12
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e01a      	b.n	8001c6c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4a68      	ldr	r2, [pc, #416]	; (8001ddc <HAL_ETH_Init+0x2b8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d303      	bcc.n	8001c46 <HAL_ETH_Init+0x122>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4a6b      	ldr	r2, [pc, #428]	; (8001df0 <HAL_ETH_Init+0x2cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d911      	bls.n	8001c6a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4a69      	ldr	r2, [pc, #420]	; (8001df0 <HAL_ETH_Init+0x2cc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d908      	bls.n	8001c60 <HAL_ETH_Init+0x13c>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4a68      	ldr	r2, [pc, #416]	; (8001df4 <HAL_ETH_Init+0x2d0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d804      	bhi.n	8001c60 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e005      	b.n	8001c6c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e000      	b.n	8001c6c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c6a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c78:	2100      	movs	r1, #0
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fb98 	bl	80023b0 <HAL_ETH_WritePHYRegister>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c8a:	6939      	ldr	r1, [r7, #16]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fd4d 	bl	800272c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0d7      	b.n	8001e4e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c9e:	20ff      	movs	r0, #255	; 0xff
 8001ca0:	f7ff f94a 	bl	8000f38 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a5 	beq.w	8001df8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cae:	f7ff f937 	bl	8000f20 <HAL_GetTick>
 8001cb2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2101      	movs	r1, #1
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fb0f 	bl	80022e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001cc2:	f7ff f92d 	bl	8000f20 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d90f      	bls.n	8001cf4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fd26 	bl	800272c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0ac      	b.n	8001e4e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0da      	beq.n	8001cb4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fb53 	bl	80023b0 <HAL_ETH_WritePHYRegister>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d14:	6939      	ldr	r1, [r7, #16]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fd08 	bl	800272c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d24:	2301      	movs	r3, #1
 8001d26:	e092      	b.n	8001e4e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d28:	f7ff f8fa 	bl	8000f20 <HAL_GetTick>
 8001d2c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	461a      	mov	r2, r3
 8001d34:	2101      	movs	r1, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fad2 	bl	80022e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d3c:	f7ff f8f0 	bl	8000f20 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d90f      	bls.n	8001d6e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fce9 	bl	800272c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e06f      	b.n	8001e4e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0da      	beq.n	8001d2e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2110      	movs	r1, #16
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 faad 	bl	80022e0 <HAL_ETH_ReadPHYRegister>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d90:	6939      	ldr	r1, [r7, #16]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fcca 	bl	800272c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001da0:	2301      	movs	r3, #1
 8001da2:	e054      	b.n	8001e4e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	e002      	b.n	8001dbe <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	e035      	b.n	8001e3c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e030      	b.n	8001e3c <HAL_ETH_Init+0x318>
 8001dda:	bf00      	nop
 8001ddc:	03938700 	.word	0x03938700
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	01312cff 	.word	0x01312cff
 8001dec:	02160ebf 	.word	0x02160ebf
 8001df0:	05f5e0ff 	.word	0x05f5e0ff
 8001df4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 facd 	bl	80023b0 <HAL_ETH_WritePHYRegister>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fc82 	bl	800272c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e00c      	b.n	8001e4e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001e34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e38:	f7ff f87e 	bl	8000f38 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fc74 	bl	800272c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop

08001e58 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ETH_DMATxDescListInit+0x20>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e052      	b.n	8001f1e <HAL_ETH_DMATxDescListInit+0xc6>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e030      	b.n	8001ef6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e002      	b.n	8001ef0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3ca      	bcc.n	8001e94 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f241 0310 	movw	r3, #4112	; 0x1010
 8001f08:	440b      	add	r3, r1
 8001f0a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ETH_DMARxDescListInit+0x20>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e056      	b.n	8001ff8 <HAL_ETH_DMARxDescListInit+0xce>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e034      	b.n	8001fd0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	015b      	lsls	r3, r3, #5
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f76:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f7e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	461a      	mov	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d208      	bcs.n	8001fc4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	e002      	b.n	8001fca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3c6      	bcc.n	8001f66 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	f241 030c 	movw	r3, #4108	; 0x100c
 8001fe2:	440b      	add	r3, r1
 8001fe4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ETH_TransmitFrame+0x24>
 8002024:	2302      	movs	r3, #2
 8002026:	e0cd      	b.n	80021c4 <HAL_ETH_TransmitFrame+0x1c0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800204e:	2301      	movs	r3, #1
 8002050:	e0b8      	b.n	80021c4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da09      	bge.n	8002070 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2212      	movs	r2, #18
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0a9      	b.n	80021c4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002076:	4293      	cmp	r3, r2
 8002078:	d915      	bls.n	80020a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4a54      	ldr	r2, [pc, #336]	; (80021d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800208a:	fba3 1302 	umull	r1, r3, r3, r2
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e001      	b.n	80020aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d11c      	bne.n	80020ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80020be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80020ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020e8:	e04b      	b.n	8002182 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e044      	b.n	800217a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d107      	bne.n	8002116 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002114:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800211e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3b01      	subs	r3, #1
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	429a      	cmp	r2, r3
 8002128:	d116      	bne.n	8002158 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002138:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800213e:	fb02 f203 	mul.w	r2, r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800214a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002156:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002166:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3301      	adds	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3b6      	bcc.n	80020f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f241 0314 	movw	r3, #4116	; 0x1014
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f241 0314 	movw	r3, #4116	; 0x1014
 800219e:	4413      	add	r3, r2
 80021a0:	2204      	movs	r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f241 0304 	movw	r3, #4100	; 0x1004
 80021ac:	4413      	add	r3, r2
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	ac02b00b 	.word	0xac02b00b
 80021d4:	fffffa0c 	.word	0xfffffa0c

080021d8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ETH_GetReceivedFrame+0x1a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e070      	b.n	80022d4 <HAL_ETH_GetReceivedFrame+0xfc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db5a      	blt.n	80022c2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d030      	beq.n	800227c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	2b01      	cmp	r3, #1
 800222a:	d103      	bne.n	8002234 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002248:	3b04      	subs	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e02b      	b.n	80022d4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
 80022aa:	e00a      	b.n	80022c2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	460b      	mov	r3, r1
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b82      	cmp	r3, #130	; 0x82
 8002300:	d101      	bne.n	8002306 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	e050      	b.n	80023a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2282      	movs	r2, #130	; 0x82
 800230a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8a1b      	ldrh	r3, [r3, #16]
 8002322:	02db      	lsls	r3, r3, #11
 8002324:	b29b      	uxth	r3, r3
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	019b      	lsls	r3, r3, #6
 8002330:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002352:	f7fe fde5 	bl	8000f20 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002358:	e015      	b.n	8002386 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800235a:	f7fe fde1 	bl	8000f20 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002368:	d309      	bcc.n	800237e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e014      	b.n	80023a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e4      	bne.n	800235a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	460b      	mov	r3, r1
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b42      	cmp	r3, #66	; 0x42
 80023d0:	d101      	bne.n	80023d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e04e      	b.n	8002474 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2242      	movs	r2, #66	; 0x42
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 031c 	and.w	r3, r3, #28
 80023ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8a1b      	ldrh	r3, [r3, #16]
 80023f2:	02db      	lsls	r3, r3, #11
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80023fc:	897b      	ldrh	r3, [r7, #10]
 80023fe:	019b      	lsls	r3, r3, #6
 8002400:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800242c:	f7fe fd78 	bl	8000f20 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002432:	e015      	b.n	8002460 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002434:	f7fe fd74 	bl	8000f20 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d309      	bcc.n	8002458 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e00d      	b.n	8002474 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e4      	bne.n	8002434 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ETH_Start+0x16>
 800248e:	2302      	movs	r3, #2
 8002490:	e01f      	b.n	80024d2 <HAL_ETH_Start+0x56>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fb44 	bl	8002b30 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb7b 	bl	8002ba4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fc12 	bl	8002cd8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fbaf 	bl	8002c18 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fbdc 	bl	8002c78 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ETH_Stop+0x16>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e01f      	b.n	8002530 <HAL_ETH_Stop+0x56>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fba1 	bl	8002c48 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fbce 	bl	8002ca8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fb66 	bl	8002bde <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fbe0 	bl	8002cd8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fb26 	bl	8002b6a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_ETH_ConfigMAC+0x1c>
 8002550:	2302      	movs	r3, #2
 8002552:	e0e4      	b.n	800271e <HAL_ETH_ConfigMAC+0x1e6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80b1 	beq.w	80026ce <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_ETH_ConfigMAC+0x1f0>)
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002584:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800258a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002590:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002596:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800259c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80025a2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80025a8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80025ae:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80025b4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80025ba:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80025c0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80025c6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fcaa 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025f4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80025fa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002600:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002606:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800260c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002612:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800261e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002620:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800262a:	2001      	movs	r0, #1
 800262c:	f7fe fc84 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002640:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800264a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f64f 7341 	movw	r3, #65345	; 0xff41
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002668:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800266e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002674:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800267a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002680:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe fc4d 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80026be:	2001      	movs	r0, #1
 80026c0:	f7fe fc3a 	bl	8000f38 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	61da      	str	r2, [r3, #28]
 80026cc:	e01e      	b.n	800270c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80026dc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe fc1a 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	ff20810f 	.word	0xff20810f

0800272c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0b0      	sub	sp, #192	; 0xc0
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002748:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002750:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800275a:	2300      	movs	r3, #0
 800275c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002776:	663b      	str	r3, [r7, #96]	; 0x60
 8002778:	e001      	b.n	800277e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800277e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002782:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002788:	2300      	movs	r3, #0
 800278a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002798:	2340      	movs	r3, #64	; 0x40
 800279a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002804:	4bab      	ldr	r3, [pc, #684]	; (8002ab4 <ETH_MACDMAConfig+0x388>)
 8002806:	4013      	ands	r3, r2
 8002808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800280c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800280e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002810:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002814:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002818:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800281e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002822:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002826:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800282c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800282e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002830:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002834:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002838:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800283c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800283e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002840:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002842:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002854:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7fe fb69 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800286e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002870:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002874:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002878:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800287a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800287e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002884:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800288a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002890:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002894:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800289c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800289e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7fe fb44 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80028d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028e0:	4013      	ands	r3, r2
 80028e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80028ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80028f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80028f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80028f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80028fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80028fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002902:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002908:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800290a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800291c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002928:	2001      	movs	r0, #1
 800292a:	f7fe fb05 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002936:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002938:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800293c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002952:	2001      	movs	r0, #1
 8002954:	f7fe faf0 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002960:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002974:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002986:	2304      	movs	r3, #4
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80029b6:	4413      	add	r3, r2
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <ETH_MACDMAConfig+0x38c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80029cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80029d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80029d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80029d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80029d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80029d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80029da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80029dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80029de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80029e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80029e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80029e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80029ea:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80029ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80029fe:	4413      	add	r3, r2
 8002a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a0e:	4413      	add	r3, r2
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7fe fa8e 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a24:	4413      	add	r3, r2
 8002a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a2a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a30:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a34:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a38:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002a3c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a40:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a42:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a46:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a54:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7fe fa67 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a76:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10d      	bne.n	8002a9c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a88:	4413      	add	r3, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6811      	ldr	r1, [r2, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <ETH_MACDMAConfig+0x390>)
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a98:	440b      	add	r3, r1
 8002a9a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f80b 	bl	8002ac0 <ETH_MACAddressConfig>
}
 8002aaa:	bf00      	nop
 8002aac:	37c0      	adds	r7, #192	; 0xc0
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	ff20810f 	.word	0xff20810f
 8002ab8:	f8de3f23 	.word	0xf8de3f23
 8002abc:	00010040 	.word	0x00010040

08002ac0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3305      	adds	r3, #5
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	3204      	adds	r2, #4
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <ETH_MACAddressConfig+0x68>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3303      	adds	r3, #3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	061a      	lsls	r2, r3, #24
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3302      	adds	r3, #2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4313      	orrs	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <ETH_MACAddressConfig+0x6c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40028040 	.word	0x40028040
 8002b2c:	40028044 	.word	0x40028044

08002b30 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b54:	2001      	movs	r0, #1
 8002b56:	f7fe f9ef 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7fe f9d2 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0204 	orr.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7fe f9b5 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
 8002bf8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7fe f998 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c34:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c38:	440b      	add	r3, r1
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6811      	ldr	r1, [r2, #0]
 8002c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c64:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c68:	440b      	add	r3, r1
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c88:	4413      	add	r3, r2
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6811      	ldr	r1, [r2, #0]
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c98:	440b      	add	r3, r1
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6811      	ldr	r1, [r2, #0]
 8002cc0:	f023 0202 	bic.w	r2, r3, #2
 8002cc4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cc8:	440b      	add	r3, r1
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cec:	4413      	add	r3, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cfc:	440b      	add	r3, r1
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d08:	4413      	add	r3, r2
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7fe f912 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d1e:	440b      	add	r3, r1
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e175      	b.n	8003038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8164 	bne.w	8003032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x56>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80be 	beq.w	8003032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a65      	ldr	r2, [pc, #404]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ece:	4a61      	ldr	r2, [pc, #388]	; (8003054 <HAL_GPIO_Init+0x328>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_GPIO_Init+0x32c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d037      	beq.n	8002f6a <HAL_GPIO_Init+0x23e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_GPIO_Init+0x330>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d031      	beq.n	8002f66 <HAL_GPIO_Init+0x23a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a56      	ldr	r2, [pc, #344]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <HAL_GPIO_Init+0x236>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a55      	ldr	r2, [pc, #340]	; (8003064 <HAL_GPIO_Init+0x338>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d025      	beq.n	8002f5e <HAL_GPIO_Init+0x232>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a54      	ldr	r2, [pc, #336]	; (8003068 <HAL_GPIO_Init+0x33c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <HAL_GPIO_Init+0x22e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a53      	ldr	r2, [pc, #332]	; (800306c <HAL_GPIO_Init+0x340>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x22a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_GPIO_Init+0x344>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x226>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a51      	ldr	r2, [pc, #324]	; (8003074 <HAL_GPIO_Init+0x348>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x222>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_GPIO_Init+0x34c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x21e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4f      	ldr	r2, [pc, #316]	; (800307c <HAL_GPIO_Init+0x350>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x21a>
 8002f42:	2309      	movs	r3, #9
 8002f44:	e012      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f46:	230a      	movs	r3, #10
 8002f48:	e010      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e00e      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f52:	2306      	movs	r3, #6
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x240>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x328>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_GPIO_Init+0x354>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a34      	ldr	r2, [pc, #208]	; (8003080 <HAL_GPIO_Init+0x354>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_GPIO_Init+0x354>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_GPIO_Init+0x354>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_GPIO_Init+0x354>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003002:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_GPIO_Init+0x354>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_GPIO_Init+0x354>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <HAL_GPIO_Init+0x354>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f ae86 	bls.w	8002d4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40021400 	.word	0x40021400
 8003070:	40021800 	.word	0x40021800
 8003074:	40021c00 	.word	0x40021c00
 8003078:	40022000 	.word	0x40022000
 800307c:	40022400 	.word	0x40022400
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a22      	ldr	r2, [pc, #136]	; (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003106:	f7fd ff0b 	bl	8000f20 <HAL_GetTick>
 800310a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310c:	e009      	b.n	8003122 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800310e:	f7fd ff07 	bl	8000f20 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311c:	d901      	bls.n	8003122 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e022      	b.n	8003168 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d1ee      	bne.n	800310e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313c:	f7fd fef0 	bl	8000f20 <HAL_GetTick>
 8003140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003142:	e009      	b.n	8003158 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003144:	f7fd feec 	bl	8000f20 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003152:	d901      	bls.n	8003158 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e007      	b.n	8003168 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003164:	d1ee      	bne.n	8003144 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000

08003178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003180:	2300      	movs	r3, #0
 8003182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e29b      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800319c:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d112      	bne.n	80031da <HAL_RCC_OscConfig+0x62>
 80031b4:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x130>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e275      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x7a>
 80031e4:	4b84      	ldr	r3, [pc, #528]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a83      	ldr	r2, [pc, #524]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x9c>
 80031fa:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7e      	ldr	r2, [pc, #504]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b7c      	ldr	r3, [pc, #496]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7b      	ldr	r2, [pc, #492]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xc0>
 800321e:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a75      	ldr	r2, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a72      	ldr	r2, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd8>
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6e      	ldr	r2, [pc, #440]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6b      	ldr	r2, [pc, #428]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd fe62 	bl	8000f20 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fd fe5e 	bl	8000f20 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e229      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe8>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fe4e 	bl	8000f20 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fe4a 	bl	8000f20 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e215      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x110>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d069      	beq.n	800338a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b6:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x190>
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x17a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1e9      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	493d      	ldr	r1, [pc, #244]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e040      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d023      	beq.n	8003358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fe00 	bl	8000f20 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd fdfc 	bl	8000f20 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1c7      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4929      	ldr	r1, [pc, #164]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
 8003356:	e018      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fddc 	bl	8000f20 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7fd fdd8 	bl	8000f20 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1a3      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d038      	beq.n	8003408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d019      	beq.n	80033d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fd fdb9 	bl	8000f20 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fd fdb5 	bl	8000f20 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e180      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x23a>
 80033d0:	e01a      	b.n	8003408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_RCC_OscConfig+0x280>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fd fd9f 	bl	8000f20 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fd fd9b 	bl	8000f20 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d903      	bls.n	80033fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e166      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
 80033f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a4 	beq.w	800355e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b8c      	ldr	r3, [pc, #560]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b89      	ldr	r3, [pc, #548]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a88      	ldr	r2, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b86      	ldr	r3, [pc, #536]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343e:	4b83      	ldr	r3, [pc, #524]	; (800364c <HAL_RCC_OscConfig+0x4d4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800344a:	4b80      	ldr	r3, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x4d4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x4d4>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fd fd63 	bl	8000f20 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fd fd5f 	bl	8000f20 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e12a      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003470:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x4d4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x31a>
 8003484:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a6f      	ldr	r2, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e02d      	b.n	80034ee <HAL_RCC_OscConfig+0x376>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x33c>
 800349a:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	e01c      	b.n	80034ee <HAL_RCC_OscConfig+0x376>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x35e>
 80034bc:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a61      	ldr	r2, [pc, #388]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a5e      	ldr	r2, [pc, #376]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0x376>
 80034d6:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a5b      	ldr	r2, [pc, #364]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fd fd13 	bl	8000f20 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd fd0f 	bl	8000f20 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0d8      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ee      	beq.n	80034fe <HAL_RCC_OscConfig+0x386>
 8003520:	e014      	b.n	800354c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd fcfd 	bl	8000f20 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fcf9 	bl	8000f20 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0c2      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ee      	bne.n	800352a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80ae 	beq.w	80036c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003568:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d06d      	beq.n	8003650 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d14b      	bne.n	8003614 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fcca 	bl	8000f20 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fd fcc6 	bl	8000f20 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e091      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fc98 	bl	8000f20 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fd fc94 	bl	8000f20 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e05f      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x47c>
 8003612:	e057      	b.n	80036c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fc7e 	bl	8000f20 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fd fc7a 	bl	8000f20 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e045      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x4b0>
 8003646:	e03d      	b.n	80036c4 <HAL_RCC_OscConfig+0x54c>
 8003648:	40023800 	.word	0x40023800
 800364c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <HAL_RCC_OscConfig+0x558>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d030      	beq.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d129      	bne.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d122      	bne.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003686:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003688:	4293      	cmp	r3, r2
 800368a:	d119      	bne.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d10f      	bne.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0d0      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d910      	bls.n	800371c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 020f 	bic.w	r2, r3, #15
 8003702:	4965      	ldr	r1, [pc, #404]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0b8      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003734:	4b59      	ldr	r3, [pc, #356]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a58      	ldr	r2, [pc, #352]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800373e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800374c:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	494d      	ldr	r1, [pc, #308]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d040      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d115      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e073      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06b      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4936      	ldr	r1, [pc, #216]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fbaa 	bl	8000f20 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd fba6 	bl	8000f20 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e053      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d210      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	4922      	ldr	r1, [pc, #136]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e032      	b.n	800388e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4916      	ldr	r1, [pc, #88]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490e      	ldr	r1, [pc, #56]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003866:	f000 f821 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490a      	ldr	r1, [pc, #40]	; (80038a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fb06 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00
 800389c:	40023800 	.word	0x40023800
 80038a0:	0801a928 	.word	0x0801a928
 80038a4:	20000000 	.word	0x20000000
 80038a8:	20000004 	.word	0x20000004

080038ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	2300      	movs	r3, #0
 80038be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c4:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d00d      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x40>
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	f200 80bd 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x34>
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038de:	e0b7      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038e2:	60bb      	str	r3, [r7, #8]
      break;
 80038e4:	e0b7      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e6:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038e8:	60bb      	str	r3, [r7, #8]
      break;
 80038ea:	e0b4      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ec:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04d      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	461a      	mov	r2, r3
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	ea02 0800 	and.w	r8, r2, r0
 800391a:	ea03 0901 	and.w	r9, r3, r1
 800391e:	4640      	mov	r0, r8
 8003920:	4649      	mov	r1, r9
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	014b      	lsls	r3, r1, #5
 800392c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003930:	0142      	lsls	r2, r0, #5
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	ebb0 0008 	subs.w	r0, r0, r8
 800393a:	eb61 0109 	sbc.w	r1, r1, r9
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	018b      	lsls	r3, r1, #6
 8003948:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800394c:	0182      	lsls	r2, r0, #6
 800394e:	1a12      	subs	r2, r2, r0
 8003950:	eb63 0301 	sbc.w	r3, r3, r1
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	00d9      	lsls	r1, r3, #3
 800395e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003962:	00d0      	lsls	r0, r2, #3
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	eb12 0208 	adds.w	r2, r2, r8
 800396c:	eb43 0309 	adc.w	r3, r3, r9
 8003970:	f04f 0000 	mov.w	r0, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	0259      	lsls	r1, r3, #9
 800397a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800397e:	0250      	lsls	r0, r2, #9
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f7fc fca6 	bl	80002e0 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e04a      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	ea02 0400 	and.w	r4, r2, r0
 80039b6:	ea03 0501 	and.w	r5, r3, r1
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039cc:	0142      	lsls	r2, r0, #5
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	1b00      	subs	r0, r0, r4
 80039d4:	eb61 0105 	sbc.w	r1, r1, r5
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e6:	0182      	lsls	r2, r0, #6
 80039e8:	1a12      	subs	r2, r2, r0
 80039ea:	eb63 0301 	sbc.w	r3, r3, r1
 80039ee:	f04f 0000 	mov.w	r0, #0
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039fc:	00d0      	lsls	r0, r2, #3
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	1912      	adds	r2, r2, r4
 8003a04:	eb45 0303 	adc.w	r3, r5, r3
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	0299      	lsls	r1, r3, #10
 8003a12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a16:	0290      	lsls	r0, r2, #10
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f7fc fc5a 	bl	80002e0 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a52:	60bb      	str	r3, [r7, #8]
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	68bb      	ldr	r3, [r7, #8]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff0 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0801a938 	.word	0x0801a938

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab4:	f7ff ffdc 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0b5b      	lsrs	r3, r3, #13
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	0801a938 	.word	0x0801a938

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d012      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	4964      	ldr	r1, [pc, #400]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b32:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	4959      	ldr	r1, [pc, #356]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b50:	d101      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d017      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	494a      	ldr	r1, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 808b 	beq.w	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	4a39      	ldr	r2, [pc, #228]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc8:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd f99e 	bl	8000f20 <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be8:	f7fd f99a 	bl	8000f20 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e38f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c06:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d035      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d02e      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d114      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd f962 	bl	8000f20 <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd f95e 	bl	8000f20 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e351      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	4901      	ldr	r1, [pc, #4]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	0ffffcff 	.word	0x0ffffcff
 8003cb4:	4bb3      	ldr	r3, [pc, #716]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4ab2      	ldr	r2, [pc, #712]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cbe:	6093      	str	r3, [r2, #8]
 8003cc0:	4bb0      	ldr	r3, [pc, #704]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	49ad      	ldr	r1, [pc, #692]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d010      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cde:	4ba9      	ldr	r3, [pc, #676]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce4:	4aa7      	ldr	r2, [pc, #668]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cee:	4ba5      	ldr	r3, [pc, #660]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	49a2      	ldr	r1, [pc, #648]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1a:	499a      	ldr	r1, [pc, #616]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2e:	4b95      	ldr	r3, [pc, #596]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3c:	4991      	ldr	r1, [pc, #580]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d50:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5e:	4989      	ldr	r1, [pc, #548]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d72:	4b84      	ldr	r3, [pc, #528]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4980      	ldr	r1, [pc, #512]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d94:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	4978      	ldr	r1, [pc, #480]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db6:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f023 020c 	bic.w	r2, r3, #12
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc4:	496f      	ldr	r1, [pc, #444]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	4967      	ldr	r1, [pc, #412]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dfa:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	495e      	ldr	r1, [pc, #376]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	4956      	ldr	r1, [pc, #344]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e3e:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	494d      	ldr	r1, [pc, #308]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e60:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	4945      	ldr	r1, [pc, #276]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e82:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	493c      	ldr	r1, [pc, #240]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ea4:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb2:	4934      	ldr	r1, [pc, #208]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d011      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed4:	492b      	ldr	r1, [pc, #172]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee4:	d101      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f14:	491b      	ldr	r1, [pc, #108]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f38:	4912      	ldr	r1, [pc, #72]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	4909      	ldr	r1, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	e002      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	4986      	ldr	r1, [pc, #536]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f9c:	4b81      	ldr	r3, [pc, #516]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fac:	497d      	ldr	r1, [pc, #500]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d006      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80d6 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc8:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fc ffa4 	bl	8000f20 <HAL_GetTick>
 8003fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fdc:	f7fc ffa0 	bl	8000f20 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e195      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d021      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11d      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	0e1b      	lsrs	r3, r3, #24
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	019a      	lsls	r2, r3, #6
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	4958      	ldr	r1, [pc, #352]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004074:	d129      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004076:	4b4b      	ldr	r3, [pc, #300]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004084:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408a:	0f1b      	lsrs	r3, r3, #28
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	019a      	lsls	r2, r3, #6
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	493e      	ldr	r1, [pc, #248]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b2:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b8:	f023 021f 	bic.w	r2, r3, #31
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4938      	ldr	r1, [pc, #224]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	0f1b      	lsrs	r3, r3, #28
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	019a      	lsls	r2, r3, #6
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	431a      	orrs	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	061b      	lsls	r3, r3, #24
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	4926      	ldr	r1, [pc, #152]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	019a      	lsls	r2, r3, #6
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	491a      	ldr	r1, [pc, #104]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800414c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414e:	f7fc fee7 	bl	8000f20 <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004156:	f7fc fee3 	bl	8000f20 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b64      	cmp	r3, #100	; 0x64
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0d8      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	f040 80ce 	bne.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fc feca 	bl	8000f20 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800418e:	e00b      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004190:	f7fc fec6 	bl	8000f20 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d904      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0bb      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d0ec      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d12a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041de:	4b51      	ldr	r3, [pc, #324]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	0f1b      	lsrs	r3, r3, #28
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	019a      	lsls	r2, r3, #6
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	4944      	ldr	r1, [pc, #272]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800421a:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d022      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004248:	d11d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	0e1b      	lsrs	r3, r3, #24
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	0f1b      	lsrs	r3, r3, #28
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	019a      	lsls	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	4929      	ldr	r1, [pc, #164]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	0e1b      	lsrs	r3, r3, #24
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	4917      	ldr	r1, [pc, #92]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4911      	ldr	r1, [pc, #68]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fc fe16 	bl	8000f20 <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f8:	f7fc fe12 	bl	8000f20 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e007      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004316:	d1ef      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e040      	b.n	80043bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fd06 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fc18 	bl	8004b9c <UART_SetConfig>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fe6e 	bl	8005060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fef5 	bl	80051a4 <UART_CheckIdleState>
 80043ba:	4603      	mov	r3, r0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d8:	2b20      	cmp	r3, #32
 80043da:	f040 8081 	bne.w	80044e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_Transmit+0x26>
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e079      	b.n	80044e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_UART_Transmit+0x38>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e072      	b.n	80044e2 <HAL_UART_Transmit+0x11e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2221      	movs	r2, #33	; 0x21
 8004410:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004412:	f7fc fd85 	bl	8000f20 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004430:	d108      	bne.n	8004444 <HAL_UART_Transmit+0x80>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e003      	b.n	800444c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004454:	e02c      	b.n	80044b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fee8 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e038      	b.n	80044e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004484:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3302      	adds	r3, #2
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e007      	b.n	800449e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3301      	adds	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1cc      	bne.n	8004456 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 feb5 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e005      	b.n	80044e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b08a      	sub	sp, #40	; 0x28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	4613      	mov	r3, r2
 80044f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d13d      	bne.n	800457c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Receive_IT+0x22>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e036      	b.n	800457e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_UART_Receive_IT+0x34>
 800451a:	2302      	movs	r3, #2
 800451c:	e02f      	b.n	800457e <HAL_UART_Receive_IT+0x94>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	613b      	str	r3, [r7, #16]
   return(result);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	61bb      	str	r3, [r7, #24]
   return(result);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	461a      	mov	r2, r3
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 ff24 	bl	80053c0 <UART_Start_Receive_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	e000      	b.n	800457e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b0ba      	sub	sp, #232	; 0xe8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80045b6:	4013      	ands	r3, r2
 80045b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d115      	bne.n	80045f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00f      	beq.n	80045f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 82a4 	beq.w	8004b2e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
      }
      return;
 80045ee:	e29e      	b.n	8004b2e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8117 	beq.w	8004828 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <HAL_UART_IRQHandler+0x298>)
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 810a 	beq.w	8004828 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_UART_IRQHandler+0xbc>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d011      	beq.n	8004674 <HAL_UART_IRQHandler+0xec>
 8004650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00b      	beq.n	8004674 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2202      	movs	r2, #2
 8004662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d011      	beq.n	80046a4 <HAL_UART_IRQHandler+0x11c>
 8004680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2204      	movs	r2, #4
 8004692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d017      	beq.n	80046e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2208      	movs	r2, #8
 80046ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d6:	f043 0208 	orr.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <HAL_UART_IRQHandler+0x18a>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 820a 	beq.w	8004b32 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d005      	beq.n	800476a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800475e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004762:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04f      	beq.n	800480a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fef2 	bl	8005554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d141      	bne.n	8004802 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1d9      	bne.n	800477e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a13      	ldr	r2, [pc, #76]	; (8004824 <HAL_UART_IRQHandler+0x29c>)
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fd f97d 	bl	8001ade <HAL_DMA_Abort_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00f      	b.n	800481a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9ae 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e00b      	b.n	800481a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9aa 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	e007      	b.n	800481a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9a6 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004818:	e18b      	b.n	8004b32 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481a:	bf00      	nop
    return;
 800481c:	e189      	b.n	8004b32 <HAL_UART_IRQHandler+0x5aa>
 800481e:	bf00      	nop
 8004820:	04000120 	.word	0x04000120
 8004824:	0800561b 	.word	0x0800561b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 8144 	bne.w	8004aba <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 813d 	beq.w	8004aba <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8136 	beq.w	8004aba <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2210      	movs	r2, #16
 8004854:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	f040 80b2 	bne.w	80049ca <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004872:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 815d 	beq.w	8004b36 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004886:	429a      	cmp	r2, r3
 8004888:	f080 8155 	bcs.w	8004b36 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a0:	f000 8085 	beq.w	80049ae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1da      	bne.n	80048a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004912:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004916:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800491a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e1      	bne.n	80048ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800494e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800495c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	f023 0310 	bic.w	r3, r3, #16
 8004982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004990:	65bb      	str	r3, [r7, #88]	; 0x58
 8004992:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e4      	bne.n	800496e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd f828 	bl	80019fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8d4 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049c8:	e0b5      	b.n	8004b36 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80a7 	beq.w	8004b3a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a2 	beq.w	8004b3a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e4      	bne.n	80049f6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a50:	633a      	str	r2, [r7, #48]	; 0x30
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e3      	bne.n	8004a2c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0310 	bic.w	r3, r3, #16
 8004a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	69b9      	ldr	r1, [r7, #24]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e4      	bne.n	8004a76 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f85c 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab8:	e03f      	b.n	8004b3a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00e      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x55c>
 8004ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f853 	bl	8004b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae2:	e02d      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01c      	beq.n	8004b3e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
    }
    return;
 8004b0c:	e017      	b.n	8004b3e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d012      	beq.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fd8d 	bl	8005646 <UART_EndTransmit_IT>
    return;
 8004b2c:	e008      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b2e:	bf00      	nop
 8004b30:	e006      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b32:	bf00      	nop
 8004b34:	e004      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004b3e:	bf00      	nop
  }

}
 8004b40:	37e8      	adds	r7, #232	; 0xe8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop

08004b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4ba7      	ldr	r3, [pc, #668]	; (8004e64 <UART_SetConfig+0x2c8>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	6979      	ldr	r1, [r7, #20]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a95      	ldr	r2, [pc, #596]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d120      	bne.n	8004c5a <UART_SetConfig+0xbe>
 8004c18:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d816      	bhi.n	8004c54 <UART_SetConfig+0xb8>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x90>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c49 	.word	0x08004c49
 8004c34:	08004c43 	.word	0x08004c43
 8004c38:	08004c4f 	.word	0x08004c4f
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e14f      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e14c      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e149      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e146      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e143      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a84      	ldr	r2, [pc, #528]	; (8004e70 <UART_SetConfig+0x2d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d132      	bne.n	8004cca <UART_SetConfig+0x12e>
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d828      	bhi.n	8004cc4 <UART_SetConfig+0x128>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0xdc>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cb3 	.word	0x08004cb3
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004cbf 	.word	0x08004cbf
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e117      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e114      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e111      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e10e      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e10b      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <UART_SetConfig+0x2d8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d120      	bne.n	8004d16 <UART_SetConfig+0x17a>
 8004cd4:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cde:	2b30      	cmp	r3, #48	; 0x30
 8004ce0:	d013      	beq.n	8004d0a <UART_SetConfig+0x16e>
 8004ce2:	2b30      	cmp	r3, #48	; 0x30
 8004ce4:	d814      	bhi.n	8004d10 <UART_SetConfig+0x174>
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d009      	beq.n	8004cfe <UART_SetConfig+0x162>
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d810      	bhi.n	8004d10 <UART_SetConfig+0x174>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0x15c>
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d006      	beq.n	8004d04 <UART_SetConfig+0x168>
 8004cf6:	e00b      	b.n	8004d10 <UART_SetConfig+0x174>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0f1      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0ee      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0eb      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0e8      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e0e5      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a57      	ldr	r2, [pc, #348]	; (8004e78 <UART_SetConfig+0x2dc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d120      	bne.n	8004d62 <UART_SetConfig+0x1c6>
 8004d20:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d2c:	d013      	beq.n	8004d56 <UART_SetConfig+0x1ba>
 8004d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d30:	d814      	bhi.n	8004d5c <UART_SetConfig+0x1c0>
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d009      	beq.n	8004d4a <UART_SetConfig+0x1ae>
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d810      	bhi.n	8004d5c <UART_SetConfig+0x1c0>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <UART_SetConfig+0x1a8>
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d006      	beq.n	8004d50 <UART_SetConfig+0x1b4>
 8004d42:	e00b      	b.n	8004d5c <UART_SetConfig+0x1c0>
 8004d44:	2300      	movs	r3, #0
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e0cb      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e0c8      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d50:	2304      	movs	r3, #4
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e0c5      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d56:	2308      	movs	r3, #8
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e0c2      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0bf      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a45      	ldr	r2, [pc, #276]	; (8004e7c <UART_SetConfig+0x2e0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d125      	bne.n	8004db8 <UART_SetConfig+0x21c>
 8004d6c:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7a:	d017      	beq.n	8004dac <UART_SetConfig+0x210>
 8004d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d80:	d817      	bhi.n	8004db2 <UART_SetConfig+0x216>
 8004d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d86:	d00b      	beq.n	8004da0 <UART_SetConfig+0x204>
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d811      	bhi.n	8004db2 <UART_SetConfig+0x216>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <UART_SetConfig+0x1fe>
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d006      	beq.n	8004da6 <UART_SetConfig+0x20a>
 8004d98:	e00b      	b.n	8004db2 <UART_SetConfig+0x216>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e0a0      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004da0:	2302      	movs	r3, #2
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e09d      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004da6:	2304      	movs	r3, #4
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e09a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004dac:	2308      	movs	r3, #8
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e097      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004db2:	2310      	movs	r3, #16
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e094      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <UART_SetConfig+0x2e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d125      	bne.n	8004e0e <UART_SetConfig+0x272>
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd0:	d017      	beq.n	8004e02 <UART_SetConfig+0x266>
 8004dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd6:	d817      	bhi.n	8004e08 <UART_SetConfig+0x26c>
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d00b      	beq.n	8004df6 <UART_SetConfig+0x25a>
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	d811      	bhi.n	8004e08 <UART_SetConfig+0x26c>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x254>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dec:	d006      	beq.n	8004dfc <UART_SetConfig+0x260>
 8004dee:	e00b      	b.n	8004e08 <UART_SetConfig+0x26c>
 8004df0:	2301      	movs	r3, #1
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e075      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004df6:	2302      	movs	r3, #2
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e072      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e06f      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e02:	2308      	movs	r3, #8
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e06c      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e069      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <UART_SetConfig+0x2e8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d137      	bne.n	8004e88 <UART_SetConfig+0x2ec>
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e26:	d017      	beq.n	8004e58 <UART_SetConfig+0x2bc>
 8004e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e2c:	d817      	bhi.n	8004e5e <UART_SetConfig+0x2c2>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d00b      	beq.n	8004e4c <UART_SetConfig+0x2b0>
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d811      	bhi.n	8004e5e <UART_SetConfig+0x2c2>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <UART_SetConfig+0x2aa>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d006      	beq.n	8004e52 <UART_SetConfig+0x2b6>
 8004e44:	e00b      	b.n	8004e5e <UART_SetConfig+0x2c2>
 8004e46:	2300      	movs	r3, #0
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e04a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e047      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e52:	2304      	movs	r3, #4
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e044      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e041      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e03e      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	40011000 	.word	0x40011000
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	40004c00 	.word	0x40004c00
 8004e7c:	40005000 	.word	0x40005000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	40007800 	.word	0x40007800
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a71      	ldr	r2, [pc, #452]	; (8005054 <UART_SetConfig+0x4b8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d125      	bne.n	8004ede <UART_SetConfig+0x342>
 8004e92:	4b71      	ldr	r3, [pc, #452]	; (8005058 <UART_SetConfig+0x4bc>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ea0:	d017      	beq.n	8004ed2 <UART_SetConfig+0x336>
 8004ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ea6:	d817      	bhi.n	8004ed8 <UART_SetConfig+0x33c>
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eac:	d00b      	beq.n	8004ec6 <UART_SetConfig+0x32a>
 8004eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb2:	d811      	bhi.n	8004ed8 <UART_SetConfig+0x33c>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <UART_SetConfig+0x324>
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d006      	beq.n	8004ecc <UART_SetConfig+0x330>
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x33c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e00d      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e00a      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e007      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e004      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e001      	b.n	8004ee2 <UART_SetConfig+0x346>
 8004ede:	2310      	movs	r3, #16
 8004ee0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d15a      	bne.n	8004fa2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d827      	bhi.n	8004f42 <UART_SetConfig+0x3a6>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <UART_SetConfig+0x35c>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f33 	.word	0x08004f33
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f3b 	.word	0x08004f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe fdb4 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004f20:	61b8      	str	r0, [r7, #24]
        break;
 8004f22:	e013      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe fdc4 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004f28:	61b8      	str	r0, [r7, #24]
        break;
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <UART_SetConfig+0x4c0>)
 8004f2e:	61bb      	str	r3, [r7, #24]
        break;
 8004f30:	e00c      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fe fcbb 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8004f36:	61b8      	str	r0, [r7, #24]
        break;
 8004f38:	e008      	b.n	8004f4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3e:	61bb      	str	r3, [r7, #24]
        break;
 8004f40:	e004      	b.n	8004f4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	77bb      	strb	r3, [r7, #30]
        break;
 8004f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d074      	beq.n	800503c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	005a      	lsls	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d916      	bls.n	8004f9c <UART_SetConfig+0x400>
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d212      	bcs.n	8004f9c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f023 030f 	bic.w	r3, r3, #15
 8004f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	89fa      	ldrh	r2, [r7, #14]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	e04f      	b.n	800503c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77bb      	strb	r3, [r7, #30]
 8004fa0:	e04c      	b.n	800503c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d828      	bhi.n	8004ffa <UART_SetConfig+0x45e>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x414>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fd58 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61b8      	str	r0, [r7, #24]
        break;
 8004fda:	e013      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fd68 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61b8      	str	r0, [r7, #24]
        break;
 8004fe2:	e00f      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <UART_SetConfig+0x4c0>)
 8004fe6:	61bb      	str	r3, [r7, #24]
        break;
 8004fe8:	e00c      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe fc5f 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8004fee:	61b8      	str	r0, [r7, #24]
        break;
 8004ff0:	e008      	b.n	8005004 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e004      	b.n	8005004 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77bb      	strb	r3, [r7, #30]
        break;
 8005002:	bf00      	nop
    }

    if (pclk != 0U)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085a      	lsrs	r2, r3, #1
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d909      	bls.n	8005038 <UART_SetConfig+0x49c>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d205      	bcs.n	8005038 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e001      	b.n	800503c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005048:	7fbb      	ldrb	r3, [r7, #30]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40007c00 	.word	0x40007c00
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400

08005060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515e:	d10a      	bne.n	8005176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b4:	f7fb feb4 	bl	8000f20 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10e      	bne.n	80051e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f82d 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e023      	b.n	800522e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d10e      	bne.n	8005212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f817 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00d      	b.n	800522e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b09c      	sub	sp, #112	; 0x70
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	e0a5      	b.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	f000 80a1 	beq.w	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fb fe65 	bl	8000f20 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <UART_WaitOnFlagUntilTimeout+0x32>
 8005262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13e      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800527c:	667b      	str	r3, [r7, #100]	; 0x64
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005288:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800528c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	663b      	str	r3, [r7, #96]	; 0x60
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e067      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d04f      	beq.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d147      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005360:	623a      	str	r2, [r7, #32]
 8005362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	69f9      	ldr	r1, [r7, #28]
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	61bb      	str	r3, [r7, #24]
   return(result);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e010      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	f43f af4a 	beq.w	8005248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3770      	adds	r7, #112	; 0x70
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b097      	sub	sp, #92	; 0x5c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d10e      	bne.n	8005412 <UART_Start_Receive_IT+0x52>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <UART_Start_Receive_IT+0x48>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005406:	e02d      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005410:	e028      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <UART_Start_Receive_IT+0x76>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <UART_Start_Receive_IT+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e01b      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	; 0x7f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e016      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d10d      	bne.n	800545c <UART_Start_Receive_IT+0x9c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <UART_Start_Receive_IT+0x92>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	227f      	movs	r2, #127	; 0x7f
 800544c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005450:	e008      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545a:	e003      	b.n	8005464 <UART_Start_Receive_IT+0xa4>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2222      	movs	r2, #34	; 0x22
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	657b      	str	r3, [r7, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005492:	64ba      	str	r2, [r7, #72]	; 0x48
 8005494:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d107      	bne.n	80054c0 <UART_Start_Receive_IT+0x100>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <UART_Start_Receive_IT+0x18c>)
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64
 80054be:	e002      	b.n	80054c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a23      	ldr	r2, [pc, #140]	; (8005550 <UART_Start_Receive_IT+0x190>)
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d019      	beq.n	800550a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_Start_Receive_IT+0x116>
 8005508:	e018      	b.n	800553c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	613b      	str	r3, [r7, #16]
   return(result);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	653b      	str	r3, [r7, #80]	; 0x50
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	61bb      	str	r3, [r7, #24]
   return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	375c      	adds	r7, #92	; 0x5c
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	080057f7 	.word	0x080057f7
 8005550:	0800569b 	.word	0x0800569b

08005554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b095      	sub	sp, #84	; 0x54
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e6      	bne.n	800555c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	61fb      	str	r3, [r7, #28]
   return(result);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d118      	bne.n	80055fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0310 	bic.w	r3, r3, #16
 80055de:	647b      	str	r3, [r7, #68]	; 0x44
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	613b      	str	r3, [r7, #16]
   return(result);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800560e:	bf00      	nop
 8005610:	3754      	adds	r7, #84	; 0x54
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fa8f 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b088      	sub	sp, #32
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	60bb      	str	r3, [r7, #8]
   return(result);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6979      	ldr	r1, [r7, #20]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	613b      	str	r3, [r7, #16]
   return(result);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e6      	bne.n	800564e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fa5b 	bl	8004b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b096      	sub	sp, #88	; 0x58
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	2b22      	cmp	r3, #34	; 0x22
 80056b2:	f040 8094 	bne.w	80057de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80056c4:	b2d9      	uxtb	r1, r3
 80056c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	400a      	ands	r2, r1
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d177      	bne.n	80057ee <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	647b      	str	r3, [r7, #68]	; 0x44
 800571e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	623b      	str	r3, [r7, #32]
   return(result);
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005750:	633a      	str	r2, [r7, #48]	; 0x30
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2b01      	cmp	r3, #1
 8005776:	d12e      	bne.n	80057d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60fb      	str	r3, [r7, #12]
   return(result);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	617b      	str	r3, [r7, #20]
   return(result);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d103      	bne.n	80057c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2210      	movs	r2, #16
 80057c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f9ce 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057d4:	e00b      	b.n	80057ee <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f00b fe36 	bl	8011448 <HAL_UART_RxCpltCallback>
}
 80057dc:	e007      	b.n	80057ee <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	3758      	adds	r7, #88	; 0x58
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b096      	sub	sp, #88	; 0x58
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005804:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580c:	2b22      	cmp	r3, #34	; 0x22
 800580e:	f040 8094 	bne.w	800593a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005822:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005826:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800582a:	4013      	ands	r3, r2
 800582c:	b29a      	uxth	r2, r3
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d177      	bne.n	800594a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005878:	643b      	str	r3, [r7, #64]	; 0x40
 800587a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800587e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	61fb      	str	r3, [r7, #28]
   return(result);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d12e      	bne.n	8005932 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	613b      	str	r3, [r7, #16]
   return(result);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b10      	cmp	r3, #16
 8005918:	d103      	bne.n	8005922 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2210      	movs	r2, #16
 8005920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff f920 	bl	8004b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005930:	e00b      	b.n	800594a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00b fd88 	bl	8011448 <HAL_UART_RxCpltCallback>
}
 8005938:	e007      	b.n	800594a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	619a      	str	r2, [r3, #24]
}
 800594a:	bf00      	nop
 800594c:	3758      	adds	r7, #88	; 0x58
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800595a:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <MX_LWIP_Init+0x23c>)
 800595c:	22c0      	movs	r2, #192	; 0xc0
 800595e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005960:	4b8b      	ldr	r3, [pc, #556]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005962:	22a8      	movs	r2, #168	; 0xa8
 8005964:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8005966:	4b8a      	ldr	r3, [pc, #552]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005968:	2264      	movs	r2, #100	; 0x64
 800596a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800596c:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <MX_LWIP_Init+0x23c>)
 800596e:	2201      	movs	r2, #1
 8005970:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005978:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <MX_LWIP_Init+0x240>)
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800597e:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005980:	22ff      	movs	r2, #255	; 0xff
 8005982:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005984:	4b83      	ldr	r3, [pc, #524]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005986:	2200      	movs	r2, #0
 8005988:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800598a:	4b83      	ldr	r3, [pc, #524]	; (8005b98 <MX_LWIP_Init+0x244>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005990:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005992:	2200      	movs	r2, #0
 8005994:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005996:	4b80      	ldr	r3, [pc, #512]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005998:	2200      	movs	r2, #0
 800599a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800599c:	4b7e      	ldr	r3, [pc, #504]	; (8005b98 <MX_LWIP_Init+0x244>)
 800599e:	2200      	movs	r2, #0
 80059a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80059a2:	f000 fcd7 	bl	8006354 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80059a6:	4b7a      	ldr	r3, [pc, #488]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	061a      	lsls	r2, r3, #24
 80059ac:	4b78      	ldr	r3, [pc, #480]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	431a      	orrs	r2, r3
 80059b4:	4b76      	ldr	r3, [pc, #472]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059b6:	789b      	ldrb	r3, [r3, #2]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	4313      	orrs	r3, r2
 80059bc:	4a74      	ldr	r2, [pc, #464]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059be:	78d2      	ldrb	r2, [r2, #3]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	061a      	lsls	r2, r3, #24
 80059c4:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	0619      	lsls	r1, r3, #24
 80059ca:	4b71      	ldr	r3, [pc, #452]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	4319      	orrs	r1, r3
 80059d2:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059d4:	789b      	ldrb	r3, [r3, #2]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	430b      	orrs	r3, r1
 80059da:	496d      	ldr	r1, [pc, #436]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059dc:	78c9      	ldrb	r1, [r1, #3]
 80059de:	430b      	orrs	r3, r1
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e6:	431a      	orrs	r2, r3
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	0619      	lsls	r1, r3, #24
 80059ee:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	4319      	orrs	r1, r3
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <MX_LWIP_Init+0x23c>)
 80059f8:	789b      	ldrb	r3, [r3, #2]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	430b      	orrs	r3, r1
 80059fe:	4964      	ldr	r1, [pc, #400]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005a00:	78c9      	ldrb	r1, [r1, #3]
 8005a02:	430b      	orrs	r3, r1
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	4b60      	ldr	r3, [pc, #384]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	0619      	lsls	r1, r3, #24
 8005a12:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	4319      	orrs	r1, r3
 8005a1a:	4b5d      	ldr	r3, [pc, #372]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	430b      	orrs	r3, r1
 8005a22:	495b      	ldr	r1, [pc, #364]	; (8005b90 <MX_LWIP_Init+0x23c>)
 8005a24:	78c9      	ldrb	r1, [r1, #3]
 8005a26:	430b      	orrs	r3, r1
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	4a5b      	ldr	r2, [pc, #364]	; (8005b9c <MX_LWIP_Init+0x248>)
 8005a2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a30:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	061a      	lsls	r2, r3, #24
 8005a36:	4b57      	ldr	r3, [pc, #348]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	4b55      	ldr	r3, [pc, #340]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a40:	789b      	ldrb	r3, [r3, #2]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a53      	ldr	r2, [pc, #332]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a48:	78d2      	ldrb	r2, [r2, #3]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	061a      	lsls	r2, r3, #24
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	0619      	lsls	r1, r3, #24
 8005a54:	4b4f      	ldr	r3, [pc, #316]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	4319      	orrs	r1, r3
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a5e:	789b      	ldrb	r3, [r3, #2]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	494b      	ldr	r1, [pc, #300]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a66:	78c9      	ldrb	r1, [r1, #3]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a70:	431a      	orrs	r2, r3
 8005a72:	4b48      	ldr	r3, [pc, #288]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	0619      	lsls	r1, r3, #24
 8005a78:	4b46      	ldr	r3, [pc, #280]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	4319      	orrs	r1, r3
 8005a80:	4b44      	ldr	r3, [pc, #272]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a82:	789b      	ldrb	r3, [r3, #2]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	4942      	ldr	r1, [pc, #264]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a8a:	78c9      	ldrb	r1, [r1, #3]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a94:	431a      	orrs	r2, r3
 8005a96:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	0619      	lsls	r1, r3, #24
 8005a9c:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	4319      	orrs	r1, r3
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005aa6:	789b      	ldrb	r3, [r3, #2]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	4939      	ldr	r1, [pc, #228]	; (8005b94 <MX_LWIP_Init+0x240>)
 8005aae:	78c9      	ldrb	r1, [r1, #3]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	4a3a      	ldr	r2, [pc, #232]	; (8005ba0 <MX_LWIP_Init+0x24c>)
 8005ab8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005aba:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	061a      	lsls	r2, r3, #24
 8005ac0:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	4a31      	ldr	r2, [pc, #196]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005ad2:	78d2      	ldrb	r2, [r2, #3]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	061a      	lsls	r2, r3, #24
 8005ad8:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	0619      	lsls	r1, r3, #24
 8005ade:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	4319      	orrs	r1, r3
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005ae8:	789b      	ldrb	r3, [r3, #2]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	430b      	orrs	r3, r1
 8005aee:	492a      	ldr	r1, [pc, #168]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005af0:	78c9      	ldrb	r1, [r1, #3]
 8005af2:	430b      	orrs	r3, r1
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005afa:	431a      	orrs	r2, r3
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	0619      	lsls	r1, r3, #24
 8005b02:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	4319      	orrs	r1, r3
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b0c:	789b      	ldrb	r3, [r3, #2]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	430b      	orrs	r3, r1
 8005b12:	4921      	ldr	r1, [pc, #132]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b14:	78c9      	ldrb	r1, [r1, #3]
 8005b16:	430b      	orrs	r3, r1
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	0619      	lsls	r1, r3, #24
 8005b26:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	4319      	orrs	r1, r3
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b30:	789b      	ldrb	r3, [r3, #2]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	430b      	orrs	r3, r1
 8005b36:	4918      	ldr	r1, [pc, #96]	; (8005b98 <MX_LWIP_Init+0x244>)
 8005b38:	78c9      	ldrb	r1, [r1, #3]
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <MX_LWIP_Init+0x250>)
 8005b42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005b44:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <MX_LWIP_Init+0x254>)
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	4b18      	ldr	r3, [pc, #96]	; (8005bac <MX_LWIP_Init+0x258>)
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <MX_LWIP_Init+0x250>)
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <MX_LWIP_Init+0x24c>)
 8005b54:	4911      	ldr	r1, [pc, #68]	; (8005b9c <MX_LWIP_Init+0x248>)
 8005b56:	4816      	ldr	r0, [pc, #88]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b58:	f001 f8a2 	bl	8006ca0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005b5c:	4814      	ldr	r0, [pc, #80]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b5e:	f001 fa51 	bl	8007004 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005b74:	480e      	ldr	r0, [pc, #56]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b76:	f001 fa55 	bl	8007024 <netif_set_up>
 8005b7a:	e002      	b.n	8005b82 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005b7c:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b7e:	f001 fabd 	bl	80070fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005b82:	490c      	ldr	r1, [pc, #48]	; (8005bb4 <MX_LWIP_Init+0x260>)
 8005b84:	480a      	ldr	r0, [pc, #40]	; (8005bb0 <MX_LWIP_Init+0x25c>)
 8005b86:	f001 faeb 	bl	8007160 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000334 	.word	0x20000334
 8005b94:	20000330 	.word	0x20000330
 8005b98:	200002f4 	.word	0x200002f4
 8005b9c:	2000032c 	.word	0x2000032c
 8005ba0:	20000338 	.word	0x20000338
 8005ba4:	2000033c 	.word	0x2000033c
 8005ba8:	08010819 	.word	0x08010819
 8005bac:	08006181 	.word	0x08006181
 8005bb0:	200002f8 	.word	0x200002f8
 8005bb4:	080061ed 	.word	0x080061ed

08005bb8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005bbc:	4803      	ldr	r0, [pc, #12]	; (8005bcc <MX_LWIP_Process+0x14>)
 8005bbe:	f000 fabf 	bl	8006140 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005bc2:	f008 fa43 	bl	800e04c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200002f8 	.word	0x200002f8

08005bd0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a4e      	ldr	r2, [pc, #312]	; (8005d28 <HAL_ETH_MspInit+0x158>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f040 8096 	bne.w	8005d20 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005bf4:	4b4d      	ldr	r3, [pc, #308]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	4a4c      	ldr	r2, [pc, #304]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005c00:	4b4a      	ldr	r3, [pc, #296]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4a46      	ldr	r2, [pc, #280]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c16:	6313      	str	r3, [r2, #48]	; 0x30
 8005c18:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4a40      	ldr	r2, [pc, #256]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c42:	f043 0304 	orr.w	r3, r3, #4
 8005c46:	6313      	str	r3, [r2, #48]	; 0x30
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a34      	ldr	r2, [pc, #208]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6c:	4b2f      	ldr	r3, [pc, #188]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	4a2e      	ldr	r2, [pc, #184]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	6313      	str	r3, [r2, #48]	; 0x30
 8005c78:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c84:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c90:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <HAL_ETH_MspInit+0x15c>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005c9c:	2332      	movs	r3, #50	; 0x32
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cac:	230b      	movs	r3, #11
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	481e      	ldr	r0, [pc, #120]	; (8005d30 <HAL_ETH_MspInit+0x160>)
 8005cb8:	f7fd f838 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005cbc:	2386      	movs	r3, #134	; 0x86
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ccc:	230b      	movs	r3, #11
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4817      	ldr	r0, [pc, #92]	; (8005d34 <HAL_ETH_MspInit+0x164>)
 8005cd8:	f7fd f828 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cea:	2303      	movs	r3, #3
 8005cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cee:	230b      	movs	r3, #11
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	480f      	ldr	r0, [pc, #60]	; (8005d38 <HAL_ETH_MspInit+0x168>)
 8005cfa:	f7fd f817 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005cfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d04:	2302      	movs	r3, #2
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d10:	230b      	movs	r3, #11
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4808      	ldr	r0, [pc, #32]	; (8005d3c <HAL_ETH_MspInit+0x16c>)
 8005d1c:	f7fd f806 	bl	8002d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005d20:	bf00      	nop
 8005d22:	3738      	adds	r7, #56	; 0x38
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40028000 	.word	0x40028000
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40020800 	.word	0x40020800
 8005d34:	40020000 	.word	0x40020000
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40021800 	.word	0x40021800

08005d40 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <low_level_init+0x144>)
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <low_level_init+0x148>)
 8005d50:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005d52:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <low_level_init+0x144>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005d58:	4b4a      	ldr	r3, [pc, #296]	; (8005e84 <low_level_init+0x144>)
 8005d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d5e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d60:	4b48      	ldr	r3, [pc, #288]	; (8005e84 <low_level_init+0x144>)
 8005d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d66:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005d68:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <low_level_init+0x144>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d76:	23e1      	movs	r3, #225	; 0xe1
 8005d78:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005d82:	2300      	movs	r3, #0
 8005d84:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005d86:	4a3f      	ldr	r2, [pc, #252]	; (8005e84 <low_level_init+0x144>)
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <low_level_init+0x144>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005d94:	4b3b      	ldr	r3, [pc, #236]	; (8005e84 <low_level_init+0x144>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <low_level_init+0x144>)
 8005d9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005da0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005da2:	4838      	ldr	r0, [pc, #224]	; (8005e84 <low_level_init+0x144>)
 8005da4:	f7fb febe 	bl	8001b24 <HAL_ETH_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	4a31      	ldr	r2, [pc, #196]	; (8005e8c <low_level_init+0x14c>)
 8005dc8:	4931      	ldr	r1, [pc, #196]	; (8005e90 <low_level_init+0x150>)
 8005dca:	482e      	ldr	r0, [pc, #184]	; (8005e84 <low_level_init+0x144>)
 8005dcc:	f7fc f844 	bl	8001e58 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <low_level_init+0x154>)
 8005dd4:	4930      	ldr	r1, [pc, #192]	; (8005e98 <low_level_init+0x158>)
 8005dd6:	482b      	ldr	r0, [pc, #172]	; (8005e84 <low_level_init+0x144>)
 8005dd8:	f7fc f8a7 	bl	8001f2a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2206      	movs	r2, #6
 8005de0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <low_level_init+0x144>)
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <low_level_init+0x144>)
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	785a      	ldrb	r2, [r3, #1]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <low_level_init+0x144>)
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	789a      	ldrb	r2, [r3, #2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <low_level_init+0x144>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	78da      	ldrb	r2, [r3, #3]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <low_level_init+0x144>)
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	791a      	ldrb	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <low_level_init+0x144>)
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	795a      	ldrb	r2, [r3, #5]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e32:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e3a:	f043 030a 	orr.w	r3, r3, #10
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005e46:	480f      	ldr	r0, [pc, #60]	; (8005e84 <low_level_init+0x144>)
 8005e48:	f7fc fb18 	bl	800247c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005e4c:	f107 0310 	add.w	r3, r7, #16
 8005e50:	461a      	mov	r2, r3
 8005e52:	211d      	movs	r1, #29
 8005e54:	480b      	ldr	r0, [pc, #44]	; (8005e84 <low_level_init+0x144>)
 8005e56:	f7fc fa43 	bl	80022e0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f043 030b 	orr.w	r3, r3, #11
 8005e60:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	461a      	mov	r2, r3
 8005e66:	211d      	movs	r1, #29
 8005e68:	4806      	ldr	r0, [pc, #24]	; (8005e84 <low_level_init+0x144>)
 8005e6a:	f7fc faa1 	bl	80023b0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	461a      	mov	r2, r3
 8005e74:	211d      	movs	r1, #29
 8005e76:	4803      	ldr	r0, [pc, #12]	; (8005e84 <low_level_init+0x144>)
 8005e78:	f7fc fa32 	bl	80022e0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20001c10 	.word	0x20001c10
 8005e88:	40028000 	.word	0x40028000
 8005e8c:	20001c58 	.word	0x20001c58
 8005e90:	20000340 	.word	0x20000340
 8005e94:	200003c0 	.word	0x200003c0
 8005e98:	20001b90 	.word	0x20001b90

08005e9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005ea6:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <low_level_output+0x138>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005ebe:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <low_level_output+0x138>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	623b      	str	r3, [r7, #32]
 8005ecc:	e05a      	b.n	8005f84 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da03      	bge.n	8005ede <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005ed6:	23f8      	movs	r3, #248	; 0xf8
 8005ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005edc:	e05c      	b.n	8005f98 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	895b      	ldrh	r3, [r3, #10]
 8005ee2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ee8:	e02f      	b.n	8005f4a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	18d0      	adds	r0, r2, r3
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	18d1      	adds	r1, r2, r3
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	f010 ff29 	bl	8016d58 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da03      	bge.n	8005f1c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005f1a:	e03d      	b.n	8005f98 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005f2c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f38:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f44:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d8c8      	bhi.n	8005eea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	18d0      	adds	r0, r2, r3
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f010 fef5 	bl	8016d58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1a1      	bne.n	8005ece <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	4811      	ldr	r0, [pc, #68]	; (8005fd4 <low_level_output+0x138>)
 8005f8e:	f7fc f839 	bl	8002004 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005f98:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <low_level_output+0x138>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005fa0:	4413      	add	r3, r2
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <low_level_output+0x138>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005fb4:	4413      	add	r3, r2
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <low_level_output+0x138>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f241 0304 	movw	r3, #4100	; 0x1004
 8005fc2:	4413      	add	r3, r2
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005fc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3728      	adds	r7, #40	; 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20001c10 	.word	0x20001c10

08005fd8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08c      	sub	sp, #48	; 0x30
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005ffc:	484f      	ldr	r0, [pc, #316]	; (800613c <low_level_input+0x164>)
 8005ffe:	f7fc f8eb 	bl	80021d8 <HAL_ETH_GetReceivedFrame>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <low_level_input+0x34>

    return NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	e092      	b.n	8006132 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800600c:	4b4b      	ldr	r3, [pc, #300]	; (800613c <low_level_input+0x164>)
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006012:	4b4a      	ldr	r3, [pc, #296]	; (800613c <low_level_input+0x164>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006024:	4619      	mov	r1, r3
 8006026:	2000      	movs	r0, #0
 8006028:	f001 f936 	bl	8007298 <pbuf_alloc>
 800602c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d04b      	beq.n	80060cc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006034:	4b41      	ldr	r3, [pc, #260]	; (800613c <low_level_input+0x164>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
 8006042:	e040      	b.n	80060c6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	895b      	ldrh	r3, [r3, #10]
 8006048:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800604e:	e021      	b.n	8006094 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	18d0      	adds	r0, r2, r3
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	461a      	mov	r2, r3
 8006068:	f010 fe76 	bl	8016d58 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4413      	add	r3, r2
 800607e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006082:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800608e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800609e:	4293      	cmp	r3, r2
 80060a0:	d8d6      	bhi.n	8006050 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	18d0      	adds	r0, r2, r3
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4619      	mov	r1, r3
 80060b4:	f010 fe50 	bl	8016d58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1bb      	bne.n	8006044 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <low_level_input+0x164>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	e00b      	b.n	80060f0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3301      	adds	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	4b12      	ldr	r3, [pc, #72]	; (800613c <low_level_input+0x164>)
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d3ee      	bcc.n	80060d8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <low_level_input+0x164>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <low_level_input+0x164>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	f241 0314 	movw	r3, #4116	; 0x1014
 8006108:	4413      	add	r3, r2
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <low_level_input+0x164>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	f241 0314 	movw	r3, #4116	; 0x1014
 800611c:	4413      	add	r3, r2
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <low_level_input+0x164>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f241 0308 	movw	r3, #4104	; 0x1008
 800612a:	4413      	add	r3, r2
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006132:	4618      	mov	r0, r3
 8006134:	3730      	adds	r7, #48	; 0x30
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20001c10 	.word	0x20001c10

08006140 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff ff45 	bl	8005fd8 <low_level_input>
 800614e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d010      	beq.n	8006178 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	4798      	blx	r3
 8006160:	4603      	mov	r3, r0
 8006162:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006164:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f001 fb77 	bl	8007860 <pbuf_free>
    p = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e000      	b.n	800617a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006178:	bf00      	nop
  }
}
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <ethernetif_init+0x1c>
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <ethernetif_init+0x48>)
 8006190:	f240 2212 	movw	r2, #530	; 0x212
 8006194:	490d      	ldr	r1, [pc, #52]	; (80061cc <ethernetif_init+0x4c>)
 8006196:	480e      	ldr	r0, [pc, #56]	; (80061d0 <ethernetif_init+0x50>)
 8006198:	f010 fdf4 	bl	8016d84 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2273      	movs	r2, #115	; 0x73
 80061a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2274      	movs	r2, #116	; 0x74
 80061a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <ethernetif_init+0x54>)
 80061b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <ethernetif_init+0x58>)
 80061b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fdc1 	bl	8005d40 <low_level_init>

  return ERR_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	08017ebc 	.word	0x08017ebc
 80061cc:	08017ed8 	.word	0x08017ed8
 80061d0:	08017ee8 	.word	0x08017ee8
 80061d4:	0800ecdd 	.word	0x0800ecdd
 80061d8:	08005e9d 	.word	0x08005e9d

080061dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80061e0:	f7fa fe9e 	bl	8000f20 <HAL_GetTick>
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d05d      	beq.n	80062ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800620e:	4b34      	ldr	r3, [pc, #208]	; (80062e0 <ethernetif_update_config+0xf4>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d03f      	beq.n	8006296 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800621a:	2100      	movs	r1, #0
 800621c:	4830      	ldr	r0, [pc, #192]	; (80062e0 <ethernetif_update_config+0xf4>)
 800621e:	f7fc f8c7 	bl	80023b0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006222:	f7fa fe7d 	bl	8000f20 <HAL_GetTick>
 8006226:	4603      	mov	r3, r0
 8006228:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	461a      	mov	r2, r3
 8006230:	2101      	movs	r1, #1
 8006232:	482b      	ldr	r0, [pc, #172]	; (80062e0 <ethernetif_update_config+0xf4>)
 8006234:	f7fc f854 	bl	80022e0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006238:	f7fa fe72 	bl	8000f20 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006246:	d828      	bhi.n	800629a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0eb      	beq.n	800622a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	461a      	mov	r2, r3
 8006258:	2110      	movs	r1, #16
 800625a:	4821      	ldr	r0, [pc, #132]	; (80062e0 <ethernetif_update_config+0xf4>)
 800625c:	f7fc f840 	bl	80022e0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <ethernetif_update_config+0xf4>)
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	e002      	b.n	800627a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <ethernetif_update_config+0xf4>)
 8006276:	2200      	movs	r2, #0
 8006278:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <ethernetif_update_config+0xf4>)
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	e016      	b.n	80062ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <ethernetif_update_config+0xf4>)
 800628e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	e011      	b.n	80062ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <ethernetif_update_config+0xb0>
          goto error;
 800629a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <ethernetif_update_config+0xf4>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	08db      	lsrs	r3, r3, #3
 80062a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <ethernetif_update_config+0xf4>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	2100      	movs	r1, #0
 80062b4:	480a      	ldr	r0, [pc, #40]	; (80062e0 <ethernetif_update_config+0xf4>)
 80062b6:	f7fc f87b 	bl	80023b0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80062ba:	2100      	movs	r1, #0
 80062bc:	4808      	ldr	r0, [pc, #32]	; (80062e0 <ethernetif_update_config+0xf4>)
 80062be:	f7fc f93b 	bl	8002538 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80062c2:	4807      	ldr	r0, [pc, #28]	; (80062e0 <ethernetif_update_config+0xf4>)
 80062c4:	f7fc f8da 	bl	800247c <HAL_ETH_Start>
 80062c8:	e002      	b.n	80062d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80062ca:	4805      	ldr	r0, [pc, #20]	; (80062e0 <ethernetif_update_config+0xf4>)
 80062cc:	f7fc f905 	bl	80024da <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f807 	bl	80062e4 <ethernetif_notify_conn_changed>
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20001c10 	.word	0x20001c10

080062e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	b21a      	sxth	r2, r3
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	b21b      	sxth	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b21b      	sxth	r3, r3
 8006314:	b29b      	uxth	r3, r3
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	061a      	lsls	r2, r3, #24
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0e1b      	lsrs	r3, r3, #24
 8006346:	4313      	orrs	r3, r2
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800635e:	f000 f8d5 	bl	800650c <mem_init>
  memp_init();
 8006362:	f000 fbdb 	bl	8006b1c <memp_init>
  pbuf_init();
  netif_init();
 8006366:	f000 fc93 	bl	8006c90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800636a:	f007 feb1 	bl	800e0d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800636e:	f001 fd15 	bl	8007d9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006372:	f007 fe23 	bl	800dfbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <ptr_to_mem+0x20>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	4413      	add	r3, r2
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	2000009c 	.word	0x2000009c

080063a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <mem_to_ptr+0x20>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000009c 	.word	0x2000009c

080063c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80063d0:	4b45      	ldr	r3, [pc, #276]	; (80064e8 <plug_holes+0x120>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d206      	bcs.n	80063e8 <plug_holes+0x20>
 80063da:	4b44      	ldr	r3, [pc, #272]	; (80064ec <plug_holes+0x124>)
 80063dc:	f240 12df 	movw	r2, #479	; 0x1df
 80063e0:	4943      	ldr	r1, [pc, #268]	; (80064f0 <plug_holes+0x128>)
 80063e2:	4844      	ldr	r0, [pc, #272]	; (80064f4 <plug_holes+0x12c>)
 80063e4:	f010 fcce 	bl	8016d84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <plug_holes+0x130>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d306      	bcc.n	8006400 <plug_holes+0x38>
 80063f2:	4b3e      	ldr	r3, [pc, #248]	; (80064ec <plug_holes+0x124>)
 80063f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063f8:	4940      	ldr	r1, [pc, #256]	; (80064fc <plug_holes+0x134>)
 80063fa:	483e      	ldr	r0, [pc, #248]	; (80064f4 <plug_holes+0x12c>)
 80063fc:	f010 fcc2 	bl	8016d84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	791b      	ldrb	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <plug_holes+0x4e>
 8006408:	4b38      	ldr	r3, [pc, #224]	; (80064ec <plug_holes+0x124>)
 800640a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800640e:	493c      	ldr	r1, [pc, #240]	; (8006500 <plug_holes+0x138>)
 8006410:	4838      	ldr	r0, [pc, #224]	; (80064f4 <plug_holes+0x12c>)
 8006412:	f010 fcb7 	bl	8016d84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800641e:	d906      	bls.n	800642e <plug_holes+0x66>
 8006420:	4b32      	ldr	r3, [pc, #200]	; (80064ec <plug_holes+0x124>)
 8006422:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006426:	4937      	ldr	r1, [pc, #220]	; (8006504 <plug_holes+0x13c>)
 8006428:	4832      	ldr	r0, [pc, #200]	; (80064f4 <plug_holes+0x12c>)
 800642a:	f010 fcab 	bl	8016d84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff ffa4 	bl	8006380 <ptr_to_mem>
 8006438:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	429a      	cmp	r2, r3
 8006440:	d024      	beq.n	800648c <plug_holes+0xc4>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	791b      	ldrb	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d120      	bne.n	800648c <plug_holes+0xc4>
 800644a:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <plug_holes+0x130>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	429a      	cmp	r2, r3
 8006452:	d01b      	beq.n	800648c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006454:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <plug_holes+0x140>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d102      	bne.n	8006464 <plug_holes+0x9c>
      lfree = mem;
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <plug_holes+0x140>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006474:	d00a      	beq.n	800648c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff80 	bl	8006380 <ptr_to_mem>
 8006480:	4604      	mov	r4, r0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff ff8e 	bl	80063a4 <mem_to_ptr>
 8006488:	4603      	mov	r3, r0
 800648a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	885b      	ldrh	r3, [r3, #2]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff75 	bl	8006380 <ptr_to_mem>
 8006496:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d01f      	beq.n	80064e0 <plug_holes+0x118>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	791b      	ldrb	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11b      	bne.n	80064e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <plug_holes+0x140>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d102      	bne.n	80064b8 <plug_holes+0xf0>
      lfree = pmem;
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <plug_holes+0x140>)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064c8:	d00a      	beq.n	80064e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ff56 	bl	8006380 <ptr_to_mem>
 80064d4:	4604      	mov	r4, r0
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f7ff ff64 	bl	80063a4 <mem_to_ptr>
 80064dc:	4603      	mov	r3, r0
 80064de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd90      	pop	{r4, r7, pc}
 80064e8:	2000009c 	.word	0x2000009c
 80064ec:	08017f10 	.word	0x08017f10
 80064f0:	08017f40 	.word	0x08017f40
 80064f4:	08017f58 	.word	0x08017f58
 80064f8:	200000a0 	.word	0x200000a0
 80064fc:	08017f80 	.word	0x08017f80
 8006500:	08017f9c 	.word	0x08017f9c
 8006504:	08017fb8 	.word	0x08017fb8
 8006508:	200000a4 	.word	0x200000a4

0800650c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006512:	4b18      	ldr	r3, [pc, #96]	; (8006574 <mem_init+0x68>)
 8006514:	3303      	adds	r3, #3
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	461a      	mov	r2, r3
 800651c:	4b16      	ldr	r3, [pc, #88]	; (8006578 <mem_init+0x6c>)
 800651e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <mem_init+0x6c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800652c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800653a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800653e:	f7ff ff1f 	bl	8006380 <ptr_to_mem>
 8006542:	4603      	mov	r3, r0
 8006544:	4a0d      	ldr	r2, [pc, #52]	; (800657c <mem_init+0x70>)
 8006546:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <mem_init+0x70>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <mem_init+0x70>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006558:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <mem_init+0x70>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006562:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <mem_init+0x6c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a05      	ldr	r2, [pc, #20]	; (8006580 <mem_init+0x74>)
 800656a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20003440 	.word	0x20003440
 8006578:	2000009c 	.word	0x2000009c
 800657c:	200000a0 	.word	0x200000a0
 8006580:	200000a4 	.word	0x200000a4

08006584 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff09 	bl	80063a4 <mem_to_ptr>
 8006592:	4603      	mov	r3, r0
 8006594:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fef0 	bl	8006380 <ptr_to_mem>
 80065a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	885b      	ldrh	r3, [r3, #2]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff feea 	bl	8006380 <ptr_to_mem>
 80065ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80065b6:	d818      	bhi.n	80065ea <mem_link_valid+0x66>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80065c0:	d813      	bhi.n	80065ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80065c6:	8afa      	ldrh	r2, [r7, #22]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d004      	beq.n	80065d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	8afa      	ldrh	r2, [r7, #22]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d109      	bne.n	80065ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065d6:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <mem_link_valid+0x74>)
 80065d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d006      	beq.n	80065ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	885b      	ldrh	r3, [r3, #2]
 80065e4:	8afa      	ldrh	r2, [r7, #22]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d001      	beq.n	80065ee <mem_link_valid+0x6a>
    return 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <mem_link_valid+0x6c>
  }
  return 1;
 80065ee:	2301      	movs	r3, #1
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200000a0 	.word	0x200000a0

080065fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d04c      	beq.n	80066a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <mem_free+0xb0>)
 8006616:	f240 2273 	movw	r2, #627	; 0x273
 800661a:	4925      	ldr	r1, [pc, #148]	; (80066b0 <mem_free+0xb4>)
 800661c:	4825      	ldr	r0, [pc, #148]	; (80066b4 <mem_free+0xb8>)
 800661e:	f010 fbb1 	bl	8016d84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006622:	e040      	b.n	80066a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3b08      	subs	r3, #8
 8006628:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800662a:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <mem_free+0xbc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	429a      	cmp	r2, r3
 8006632:	d306      	bcc.n	8006642 <mem_free+0x46>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f103 020c 	add.w	r2, r3, #12
 800663a:	4b20      	ldr	r3, [pc, #128]	; (80066bc <mem_free+0xc0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d907      	bls.n	8006652 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <mem_free+0xb0>)
 8006644:	f240 227f 	movw	r2, #639	; 0x27f
 8006648:	491d      	ldr	r1, [pc, #116]	; (80066c0 <mem_free+0xc4>)
 800664a:	481a      	ldr	r0, [pc, #104]	; (80066b4 <mem_free+0xb8>)
 800664c:	f010 fb9a 	bl	8016d84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006650:	e029      	b.n	80066a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	791b      	ldrb	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <mem_free+0xb0>)
 800665c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006660:	4918      	ldr	r1, [pc, #96]	; (80066c4 <mem_free+0xc8>)
 8006662:	4814      	ldr	r0, [pc, #80]	; (80066b4 <mem_free+0xb8>)
 8006664:	f010 fb8e 	bl	8016d84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006668:	e01d      	b.n	80066a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff ff8a 	bl	8006584 <mem_link_valid>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006676:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <mem_free+0xb0>)
 8006678:	f240 2295 	movw	r2, #661	; 0x295
 800667c:	4912      	ldr	r1, [pc, #72]	; (80066c8 <mem_free+0xcc>)
 800667e:	480d      	ldr	r0, [pc, #52]	; (80066b4 <mem_free+0xb8>)
 8006680:	f010 fb80 	bl	8016d84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006684:	e00f      	b.n	80066a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <mem_free+0xd0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	429a      	cmp	r2, r3
 8006694:	d202      	bcs.n	800669c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <mem_free+0xd0>)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fe93 	bl	80063c8 <plug_holes>
 80066a2:	e000      	b.n	80066a6 <mem_free+0xaa>
    return;
 80066a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	08017f10 	.word	0x08017f10
 80066b0:	08017fe4 	.word	0x08017fe4
 80066b4:	08017f58 	.word	0x08017f58
 80066b8:	2000009c 	.word	0x2000009c
 80066bc:	200000a0 	.word	0x200000a0
 80066c0:	08018008 	.word	0x08018008
 80066c4:	08018024 	.word	0x08018024
 80066c8:	0801804c 	.word	0x0801804c
 80066cc:	200000a4 	.word	0x200000a4

080066d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	3303      	adds	r3, #3
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80066e8:	8bfb      	ldrh	r3, [r7, #30]
 80066ea:	2b0b      	cmp	r3, #11
 80066ec:	d801      	bhi.n	80066f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80066ee:	230c      	movs	r3, #12
 80066f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80066f2:	8bfb      	ldrh	r3, [r7, #30]
 80066f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066f8:	d803      	bhi.n	8006702 <mem_trim+0x32>
 80066fa:	8bfa      	ldrh	r2, [r7, #30]
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d201      	bcs.n	8006706 <mem_trim+0x36>
    return NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	e0cc      	b.n	80068a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006706:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <mem_trim+0x1d8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d304      	bcc.n	800671a <mem_trim+0x4a>
 8006710:	4b66      	ldr	r3, [pc, #408]	; (80068ac <mem_trim+0x1dc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	429a      	cmp	r2, r3
 8006718:	d306      	bcc.n	8006728 <mem_trim+0x58>
 800671a:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <mem_trim+0x1e0>)
 800671c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006720:	4964      	ldr	r1, [pc, #400]	; (80068b4 <mem_trim+0x1e4>)
 8006722:	4865      	ldr	r0, [pc, #404]	; (80068b8 <mem_trim+0x1e8>)
 8006724:	f010 fb2e 	bl	8016d84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006728:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <mem_trim+0x1d8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d304      	bcc.n	800673c <mem_trim+0x6c>
 8006732:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <mem_trim+0x1dc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	429a      	cmp	r2, r3
 800673a:	d301      	bcc.n	8006740 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	e0af      	b.n	80068a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3b08      	subs	r3, #8
 8006744:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006746:	69b8      	ldr	r0, [r7, #24]
 8006748:	f7ff fe2c 	bl	80063a4 <mem_to_ptr>
 800674c:	4603      	mov	r3, r0
 800674e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	881a      	ldrh	r2, [r3, #0]
 8006754:	8afb      	ldrh	r3, [r7, #22]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b08      	subs	r3, #8
 800675c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800675e:	8bfa      	ldrh	r2, [r7, #30]
 8006760:	8abb      	ldrh	r3, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d906      	bls.n	8006774 <mem_trim+0xa4>
 8006766:	4b52      	ldr	r3, [pc, #328]	; (80068b0 <mem_trim+0x1e0>)
 8006768:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800676c:	4953      	ldr	r1, [pc, #332]	; (80068bc <mem_trim+0x1ec>)
 800676e:	4852      	ldr	r0, [pc, #328]	; (80068b8 <mem_trim+0x1e8>)
 8006770:	f010 fb08 	bl	8016d84 <iprintf>
  if (newsize > size) {
 8006774:	8bfa      	ldrh	r2, [r7, #30]
 8006776:	8abb      	ldrh	r3, [r7, #20]
 8006778:	429a      	cmp	r2, r3
 800677a:	d901      	bls.n	8006780 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	e08f      	b.n	80068a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006780:	8bfa      	ldrh	r2, [r7, #30]
 8006782:	8abb      	ldrh	r3, [r7, #20]
 8006784:	429a      	cmp	r2, r3
 8006786:	d101      	bne.n	800678c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	e089      	b.n	80068a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fdf5 	bl	8006380 <ptr_to_mem>
 8006796:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	791b      	ldrb	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d13f      	bne.n	8006820 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067a8:	d106      	bne.n	80067b8 <mem_trim+0xe8>
 80067aa:	4b41      	ldr	r3, [pc, #260]	; (80068b0 <mem_trim+0x1e0>)
 80067ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80067b0:	4943      	ldr	r1, [pc, #268]	; (80068c0 <mem_trim+0x1f0>)
 80067b2:	4841      	ldr	r0, [pc, #260]	; (80068b8 <mem_trim+0x1e8>)
 80067b4:	f010 fae6 	bl	8016d84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80067be:	8afa      	ldrh	r2, [r7, #22]
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	4413      	add	r3, r2
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3308      	adds	r3, #8
 80067c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80067ca:	4b3e      	ldr	r3, [pc, #248]	; (80068c4 <mem_trim+0x1f4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d106      	bne.n	80067e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fdd2 	bl	8006380 <ptr_to_mem>
 80067dc:	4603      	mov	r3, r0
 80067de:	4a39      	ldr	r2, [pc, #228]	; (80068c4 <mem_trim+0x1f4>)
 80067e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80067e2:	89fb      	ldrh	r3, [r7, #14]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fdcb 	bl	8006380 <ptr_to_mem>
 80067ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2200      	movs	r2, #0
 80067f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	89ba      	ldrh	r2, [r7, #12]
 80067f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	8afa      	ldrh	r2, [r7, #22]
 80067fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	89fa      	ldrh	r2, [r7, #14]
 8006802:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800680c:	d047      	beq.n	800689e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fdb4 	bl	8006380 <ptr_to_mem>
 8006818:	4602      	mov	r2, r0
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	8053      	strh	r3, [r2, #2]
 800681e:	e03e      	b.n	800689e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	f103 0214 	add.w	r2, r3, #20
 8006826:	8abb      	ldrh	r3, [r7, #20]
 8006828:	429a      	cmp	r2, r3
 800682a:	d838      	bhi.n	800689e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800682c:	8afa      	ldrh	r2, [r7, #22]
 800682e:	8bfb      	ldrh	r3, [r7, #30]
 8006830:	4413      	add	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	3308      	adds	r3, #8
 8006836:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006840:	d106      	bne.n	8006850 <mem_trim+0x180>
 8006842:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <mem_trim+0x1e0>)
 8006844:	f240 3216 	movw	r2, #790	; 0x316
 8006848:	491d      	ldr	r1, [pc, #116]	; (80068c0 <mem_trim+0x1f0>)
 800684a:	481b      	ldr	r0, [pc, #108]	; (80068b8 <mem_trim+0x1e8>)
 800684c:	f010 fa9a 	bl	8016d84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fd94 	bl	8006380 <ptr_to_mem>
 8006858:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <mem_trim+0x1f4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d202      	bcs.n	800686a <mem_trim+0x19a>
      lfree = mem2;
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <mem_trim+0x1f4>)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2200      	movs	r2, #0
 800686e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	8afa      	ldrh	r2, [r7, #22]
 800687c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	89fa      	ldrh	r2, [r7, #14]
 8006882:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800688c:	d007      	beq.n	800689e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fd74 	bl	8006380 <ptr_to_mem>
 8006898:	4602      	mov	r2, r0
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800689e:	687b      	ldr	r3, [r7, #4]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	2000009c 	.word	0x2000009c
 80068ac:	200000a0 	.word	0x200000a0
 80068b0:	08017f10 	.word	0x08017f10
 80068b4:	08018080 	.word	0x08018080
 80068b8:	08017f58 	.word	0x08017f58
 80068bc:	08018098 	.word	0x08018098
 80068c0:	080180b8 	.word	0x080180b8
 80068c4:	200000a4 	.word	0x200000a4

080068c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <mem_malloc+0x14>
    return NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	e0d9      	b.n	8006a90 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80068dc:	88fb      	ldrh	r3, [r7, #6]
 80068de:	3303      	adds	r3, #3
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80068e8:	8bbb      	ldrh	r3, [r7, #28]
 80068ea:	2b0b      	cmp	r3, #11
 80068ec:	d801      	bhi.n	80068f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80068ee:	230c      	movs	r3, #12
 80068f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80068f2:	8bbb      	ldrh	r3, [r7, #28]
 80068f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068f8:	d803      	bhi.n	8006902 <mem_malloc+0x3a>
 80068fa:	8bba      	ldrh	r2, [r7, #28]
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d201      	bcs.n	8006906 <mem_malloc+0x3e>
    return NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	e0c4      	b.n	8006a90 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006906:	4b64      	ldr	r3, [pc, #400]	; (8006a98 <mem_malloc+0x1d0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fd4a 	bl	80063a4 <mem_to_ptr>
 8006910:	4603      	mov	r3, r0
 8006912:	83fb      	strh	r3, [r7, #30]
 8006914:	e0b4      	b.n	8006a80 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006916:	8bfb      	ldrh	r3, [r7, #30]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff fd31 	bl	8006380 <ptr_to_mem>
 800691e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 80a4 	bne.w	8006a72 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	8bfb      	ldrh	r3, [r7, #30]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f1a3 0208 	sub.w	r2, r3, #8
 8006938:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800693a:	429a      	cmp	r2, r3
 800693c:	f0c0 8099 	bcc.w	8006a72 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	8bfb      	ldrh	r3, [r7, #30]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f1a3 0208 	sub.w	r2, r3, #8
 800694e:	8bbb      	ldrh	r3, [r7, #28]
 8006950:	3314      	adds	r3, #20
 8006952:	429a      	cmp	r2, r3
 8006954:	d333      	bcc.n	80069be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006956:	8bfa      	ldrh	r2, [r7, #30]
 8006958:	8bbb      	ldrh	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	b29b      	uxth	r3, r3
 800695e:	3308      	adds	r3, #8
 8006960:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006968:	d106      	bne.n	8006978 <mem_malloc+0xb0>
 800696a:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <mem_malloc+0x1d4>)
 800696c:	f240 3287 	movw	r2, #903	; 0x387
 8006970:	494b      	ldr	r1, [pc, #300]	; (8006aa0 <mem_malloc+0x1d8>)
 8006972:	484c      	ldr	r0, [pc, #304]	; (8006aa4 <mem_malloc+0x1dc>)
 8006974:	f010 fa06 	bl	8016d84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006978:	8a7b      	ldrh	r3, [r7, #18]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fd00 	bl	8006380 <ptr_to_mem>
 8006980:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8bfa      	ldrh	r2, [r7, #30]
 8006994:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	8a7a      	ldrh	r2, [r7, #18]
 800699a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2201      	movs	r2, #1
 80069a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069aa:	d00b      	beq.n	80069c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fce5 	bl	8006380 <ptr_to_mem>
 80069b6:	4602      	mov	r2, r0
 80069b8:	8a7b      	ldrh	r3, [r7, #18]
 80069ba:	8053      	strh	r3, [r2, #2]
 80069bc:	e002      	b.n	80069c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2201      	movs	r2, #1
 80069c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80069c4:	4b34      	ldr	r3, [pc, #208]	; (8006a98 <mem_malloc+0x1d0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d127      	bne.n	8006a1e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <mem_malloc+0x1d0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80069d4:	e005      	b.n	80069e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fcd0 	bl	8006380 <ptr_to_mem>
 80069e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <mem_malloc+0x12c>
 80069ea:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <mem_malloc+0x1e0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d1f0      	bne.n	80069d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80069f4:	4a28      	ldr	r2, [pc, #160]	; (8006a98 <mem_malloc+0x1d0>)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80069fa:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <mem_malloc+0x1d0>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b2a      	ldr	r3, [pc, #168]	; (8006aa8 <mem_malloc+0x1e0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d00b      	beq.n	8006a1e <mem_malloc+0x156>
 8006a06:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <mem_malloc+0x1d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d006      	beq.n	8006a1e <mem_malloc+0x156>
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <mem_malloc+0x1d4>)
 8006a12:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006a16:	4925      	ldr	r1, [pc, #148]	; (8006aac <mem_malloc+0x1e4>)
 8006a18:	4822      	ldr	r0, [pc, #136]	; (8006aa4 <mem_malloc+0x1dc>)
 8006a1a:	f010 f9b3 	bl	8016d84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006a1e:	8bba      	ldrh	r2, [r7, #28]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4413      	add	r3, r2
 8006a24:	3308      	adds	r3, #8
 8006a26:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <mem_malloc+0x1e0>)
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d906      	bls.n	8006a3c <mem_malloc+0x174>
 8006a2e:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <mem_malloc+0x1d4>)
 8006a30:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006a34:	491e      	ldr	r1, [pc, #120]	; (8006ab0 <mem_malloc+0x1e8>)
 8006a36:	481b      	ldr	r0, [pc, #108]	; (8006aa4 <mem_malloc+0x1dc>)
 8006a38:	f010 f9a4 	bl	8016d84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <mem_malloc+0x18c>
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <mem_malloc+0x1d4>)
 8006a48:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006a4c:	4919      	ldr	r1, [pc, #100]	; (8006ab4 <mem_malloc+0x1ec>)
 8006a4e:	4815      	ldr	r0, [pc, #84]	; (8006aa4 <mem_malloc+0x1dc>)
 8006a50:	f010 f998 	bl	8016d84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <mem_malloc+0x1a4>
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <mem_malloc+0x1d4>)
 8006a60:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006a64:	4914      	ldr	r1, [pc, #80]	; (8006ab8 <mem_malloc+0x1f0>)
 8006a66:	480f      	ldr	r0, [pc, #60]	; (8006aa4 <mem_malloc+0x1dc>)
 8006a68:	f010 f98c 	bl	8016d84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	e00e      	b.n	8006a90 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006a72:	8bfb      	ldrh	r3, [r7, #30]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc83 	bl	8006380 <ptr_to_mem>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a80:	8bfa      	ldrh	r2, [r7, #30]
 8006a82:	8bbb      	ldrh	r3, [r7, #28]
 8006a84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	f4ff af44 	bcc.w	8006916 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200000a4 	.word	0x200000a4
 8006a9c:	08017f10 	.word	0x08017f10
 8006aa0:	080180b8 	.word	0x080180b8
 8006aa4:	08017f58 	.word	0x08017f58
 8006aa8:	200000a0 	.word	0x200000a0
 8006aac:	080180cc 	.word	0x080180cc
 8006ab0:	080180e8 	.word	0x080180e8
 8006ab4:	08018118 	.word	0x08018118
 8006ab8:	08018148 	.word	0x08018148

08006abc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e011      	b.n	8006b02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	dbe7      	blt.n	8006ade <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b22:	2300      	movs	r3, #0
 8006b24:	80fb      	strh	r3, [r7, #6]
 8006b26:	e009      	b.n	8006b3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <memp_init+0x30>)
 8006b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ffc3 	bl	8006abc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	80fb      	strh	r3, [r7, #6]
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d9f2      	bls.n	8006b28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	0801a9ac 	.word	0x0801a9ac

08006b50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d012      	beq.n	8006b8c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d006      	beq.n	8006b88 <do_memp_malloc_pool+0x38>
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <do_memp_malloc_pool+0x48>)
 8006b7c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b80:	4906      	ldr	r1, [pc, #24]	; (8006b9c <do_memp_malloc_pool+0x4c>)
 8006b82:	4807      	ldr	r0, [pc, #28]	; (8006ba0 <do_memp_malloc_pool+0x50>)
 8006b84:	f010 f8fe 	bl	8016d84 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e000      	b.n	8006b8e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0801816c 	.word	0x0801816c
 8006b9c:	0801819c 	.word	0x0801819c
 8006ba0:	080181c0 	.word	0x080181c0

08006ba4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d908      	bls.n	8006bc6 <memp_malloc+0x22>
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <memp_malloc+0x3c>)
 8006bb6:	f240 1257 	movw	r2, #343	; 0x157
 8006bba:	490a      	ldr	r1, [pc, #40]	; (8006be4 <memp_malloc+0x40>)
 8006bbc:	480a      	ldr	r0, [pc, #40]	; (8006be8 <memp_malloc+0x44>)
 8006bbe:	f010 f8e1 	bl	8016d84 <iprintf>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e008      	b.n	8006bd8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	4a08      	ldr	r2, [pc, #32]	; (8006bec <memp_malloc+0x48>)
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff ffbe 	bl	8006b50 <do_memp_malloc_pool>
 8006bd4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	0801816c 	.word	0x0801816c
 8006be4:	080181fc 	.word	0x080181fc
 8006be8:	080181c0 	.word	0x080181c0
 8006bec:	0801a9ac 	.word	0x0801a9ac

08006bf0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <do_memp_free_pool+0x22>
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <do_memp_free_pool+0x40>)
 8006c06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006c0a:	490a      	ldr	r1, [pc, #40]	; (8006c34 <do_memp_free_pool+0x44>)
 8006c0c:	480a      	ldr	r0, [pc, #40]	; (8006c38 <do_memp_free_pool+0x48>)
 8006c0e:	f010 f8b9 	bl	8016d84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	0801816c 	.word	0x0801816c
 8006c34:	0801821c 	.word	0x0801821c
 8006c38:	080181c0 	.word	0x080181c0

08006c3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d907      	bls.n	8006c5e <memp_free+0x22>
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <memp_free+0x44>)
 8006c50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006c54:	490b      	ldr	r1, [pc, #44]	; (8006c84 <memp_free+0x48>)
 8006c56:	480c      	ldr	r0, [pc, #48]	; (8006c88 <memp_free+0x4c>)
 8006c58:	f010 f894 	bl	8016d84 <iprintf>
 8006c5c:	e00c      	b.n	8006c78 <memp_free+0x3c>

  if (mem == NULL) {
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <memp_free+0x50>)
 8006c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff ffbe 	bl	8006bf0 <do_memp_free_pool>
 8006c74:	e000      	b.n	8006c78 <memp_free+0x3c>
    return;
 8006c76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	0801816c 	.word	0x0801816c
 8006c84:	0801823c 	.word	0x0801823c
 8006c88:	080181c0 	.word	0x080181c0
 8006c8c:	0801a9ac 	.word	0x0801a9ac

08006c90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <netif_add+0x26>
 8006cb4:	4b57      	ldr	r3, [pc, #348]	; (8006e14 <netif_add+0x174>)
 8006cb6:	f240 1227 	movw	r2, #295	; 0x127
 8006cba:	4957      	ldr	r1, [pc, #348]	; (8006e18 <netif_add+0x178>)
 8006cbc:	4857      	ldr	r0, [pc, #348]	; (8006e1c <netif_add+0x17c>)
 8006cbe:	f010 f861 	bl	8016d84 <iprintf>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e0a2      	b.n	8006e0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d108      	bne.n	8006cde <netif_add+0x3e>
 8006ccc:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <netif_add+0x174>)
 8006cce:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006cd2:	4953      	ldr	r1, [pc, #332]	; (8006e20 <netif_add+0x180>)
 8006cd4:	4851      	ldr	r0, [pc, #324]	; (8006e1c <netif_add+0x17c>)
 8006cd6:	f010 f855 	bl	8016d84 <iprintf>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e096      	b.n	8006e0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006ce4:	4b4f      	ldr	r3, [pc, #316]	; (8006e24 <netif_add+0x184>)
 8006ce6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006cee:	4b4d      	ldr	r3, [pc, #308]	; (8006e24 <netif_add+0x184>)
 8006cf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006cf8:	4b4a      	ldr	r3, [pc, #296]	; (8006e24 <netif_add+0x184>)
 8006cfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a45      	ldr	r2, [pc, #276]	; (8006e28 <netif_add+0x188>)
 8006d12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <netif_add+0x18c>)
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f913 	bl	8006f70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <netif_add+0xba>
    return NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e058      	b.n	8006e0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d60:	2bff      	cmp	r3, #255	; 0xff
 8006d62:	d103      	bne.n	8006d6c <netif_add+0xcc>
        netif->num = 0;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d70:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <netif_add+0x190>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e02b      	b.n	8006dd0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d106      	bne.n	8006d8e <netif_add+0xee>
 8006d80:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <netif_add+0x174>)
 8006d82:	f240 128b 	movw	r2, #395	; 0x18b
 8006d86:	492b      	ldr	r1, [pc, #172]	; (8006e34 <netif_add+0x194>)
 8006d88:	4824      	ldr	r0, [pc, #144]	; (8006e1c <netif_add+0x17c>)
 8006d8a:	f00f fffb 	bl	8016d84 <iprintf>
        num_netifs++;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3301      	adds	r3, #1
 8006d92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2bff      	cmp	r3, #255	; 0xff
 8006d98:	dd06      	ble.n	8006da8 <netif_add+0x108>
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <netif_add+0x174>)
 8006d9c:	f240 128d 	movw	r2, #397	; 0x18d
 8006da0:	4925      	ldr	r1, [pc, #148]	; (8006e38 <netif_add+0x198>)
 8006da2:	481e      	ldr	r0, [pc, #120]	; (8006e1c <netif_add+0x17c>)
 8006da4:	f00f ffee 	bl	8016d84 <iprintf>
        if (netif2->num == netif->num) {
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d108      	bne.n	8006dca <netif_add+0x12a>
          netif->num++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006dc8:	e005      	b.n	8006dd6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d0      	bne.n	8006d78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1be      	bne.n	8006d5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006de2:	2bfe      	cmp	r3, #254	; 0xfe
 8006de4:	d103      	bne.n	8006dee <netif_add+0x14e>
    netif_num = 0;
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <netif_add+0x18c>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e006      	b.n	8006dfc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <netif_add+0x18c>)
 8006dfa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <netif_add+0x190>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006e04:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <netif_add+0x190>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08018258 	.word	0x08018258
 8006e18:	080182ec 	.word	0x080182ec
 8006e1c:	080182a8 	.word	0x080182a8
 8006e20:	08018308 	.word	0x08018308
 8006e24:	0801aa10 	.word	0x0801aa10
 8006e28:	08007183 	.word	0x08007183
 8006e2c:	200000cc 	.word	0x200000cc
 8006e30:	2000695c 	.word	0x2000695c
 8006e34:	0801832c 	.word	0x0801832c
 8006e38:	08018340 	.word	0x08018340

08006e3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 fd8f 	bl	800996c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f007 fac7 	bl	800e3e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <netif_do_set_ipaddr+0x20>
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <netif_do_set_ipaddr+0x88>)
 8006e74:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006e78:	491c      	ldr	r1, [pc, #112]	; (8006eec <netif_do_set_ipaddr+0x8c>)
 8006e7a:	481d      	ldr	r0, [pc, #116]	; (8006ef0 <netif_do_set_ipaddr+0x90>)
 8006e7c:	f00f ff82 	bl	8016d84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <netif_do_set_ipaddr+0x34>
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <netif_do_set_ipaddr+0x88>)
 8006e88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006e8c:	4917      	ldr	r1, [pc, #92]	; (8006eec <netif_do_set_ipaddr+0x8c>)
 8006e8e:	4818      	ldr	r0, [pc, #96]	; (8006ef0 <netif_do_set_ipaddr+0x90>)
 8006e90:	f00f ff78 	bl	8016d84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d01c      	beq.n	8006edc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ffbf 	bl	8006e3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <netif_do_set_ipaddr+0x6a>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	e000      	b.n	8006ecc <netif_do_set_ipaddr+0x6c>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f8d2 	bl	800707c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08018258 	.word	0x08018258
 8006eec:	08018370 	.word	0x08018370
 8006ef0:	080182a8 	.word	0x080182a8

08006ef4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3308      	adds	r3, #8
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d00a      	beq.n	8006f24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <netif_do_set_netmask+0x26>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	e000      	b.n	8006f1c <netif_do_set_netmask+0x28>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	330c      	adds	r3, #12
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d00a      	beq.n	8006f62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <netif_do_set_gw+0x26>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	e000      	b.n	8006f5a <netif_do_set_gw+0x28>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <netif_set_addr+0x90>)
 8006f8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006f96:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <netif_set_addr+0x90>)
 8006f98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <netif_set_addr+0x90>)
 8006fa2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <netif_set_addr+0x42>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <netif_set_addr+0x46>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <netif_set_addr+0x48>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d006      	beq.n	8006fce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fc0:	f107 0310 	add.w	r3, r7, #16
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff ff49 	bl	8006e60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff ff8e 	bl	8006ef4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff ffa8 	bl	8006f32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	461a      	mov	r2, r3
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff ff35 	bl	8006e60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006ff6:	bf00      	nop
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	0801aa10 	.word	0x0801aa10

08007004 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800700c:	4a04      	ldr	r2, [pc, #16]	; (8007020 <netif_set_default+0x1c>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20006960 	.word	0x20006960

08007024 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <netif_set_up+0x1e>
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <netif_set_up+0x4c>)
 8007034:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007038:	490e      	ldr	r1, [pc, #56]	; (8007074 <netif_set_up+0x50>)
 800703a:	480f      	ldr	r0, [pc, #60]	; (8007078 <netif_set_up+0x54>)
 800703c:	f00f fea2 	bl	8016d84 <iprintf>
 8007040:	e013      	b.n	800706a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10c      	bne.n	800706a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007062:	2103      	movs	r1, #3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f809 	bl	800707c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08018258 	.word	0x08018258
 8007074:	080183e0 	.word	0x080183e0
 8007078:	080182a8 	.word	0x080182a8

0800707c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <netif_issue_reports+0x20>
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <netif_issue_reports+0x74>)
 8007090:	f240 326d 	movw	r2, #877	; 0x36d
 8007094:	4917      	ldr	r1, [pc, #92]	; (80070f4 <netif_issue_reports+0x78>)
 8007096:	4818      	ldr	r0, [pc, #96]	; (80070f8 <netif_issue_reports+0x7c>)
 8007098:	f00f fe74 	bl	8016d84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01e      	beq.n	80070e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d017      	beq.n	80070e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d013      	beq.n	80070ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3304      	adds	r3, #4
 80070c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3304      	adds	r3, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f008 f8e9 	bl	800f2b8 <etharp_request>
 80070e6:	e000      	b.n	80070ea <netif_issue_reports+0x6e>
    return;
 80070e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	08018258 	.word	0x08018258
 80070f4:	080183fc 	.word	0x080183fc
 80070f8:	080182a8 	.word	0x080182a8

080070fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <netif_set_down+0x1e>
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <netif_set_down+0x58>)
 800710c:	f240 329b 	movw	r2, #923	; 0x39b
 8007110:	4911      	ldr	r1, [pc, #68]	; (8007158 <netif_set_down+0x5c>)
 8007112:	4812      	ldr	r0, [pc, #72]	; (800715c <netif_set_down+0x60>)
 8007114:	f00f fe36 	bl	8016d84 <iprintf>
 8007118:	e019      	b.n	800714e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d012      	beq.n	800714e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f007 fc73 	bl	800ea34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	08018258 	.word	0x08018258
 8007158:	08018420 	.word	0x08018420
 800715c:	080182a8 	.word	0x080182a8

08007160 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	61da      	str	r2, [r3, #28]
  }
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800718e:	f06f 030b 	mvn.w	r3, #11
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d013      	beq.n	80071d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80071b0:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <netif_get_by_index+0x48>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e00c      	b.n	80071d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071be:	3301      	adds	r3, #1
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	79fa      	ldrb	r2, [r7, #7]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d101      	bne.n	80071cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	e006      	b.n	80071da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1ef      	bne.n	80071b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	2000695c 	.word	0x2000695c

080071ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <pbuf_free_ooseq+0x38>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <pbuf_free_ooseq+0x3c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	e00a      	b.n	8007216 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 fbed 	bl	80099e8 <tcp_free_ooseq>
      return;
 800720e:	e005      	b.n	800721c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	607b      	str	r3, [r7, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f1      	bne.n	8007200 <pbuf_free_ooseq+0x14>
    }
  }
}
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20006964 	.word	0x20006964
 8007228:	2000696c 	.word	0x2000696c

0800722c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <pbuf_pool_is_empty+0x14>)
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007236:	bf00      	nop
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20006964 	.word	0x20006964

08007244 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	460b      	mov	r3, r1
 8007254:	80fb      	strh	r3, [r7, #6]
 8007256:	4613      	mov	r3, r2
 8007258:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88ba      	ldrh	r2, [r7, #4]
 8007270:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007272:	8b3b      	ldrh	r3, [r7, #24]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	7f3a      	ldrb	r2, [r7, #28]
 800727e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	73da      	strb	r2, [r3, #15]
}
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	; 0x30
 800729c:	af02      	add	r7, sp, #8
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
 80072a2:	460b      	mov	r3, r1
 80072a4:	80bb      	strh	r3, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80072ae:	887b      	ldrh	r3, [r7, #2]
 80072b0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80072b4:	d07f      	beq.n	80073b6 <pbuf_alloc+0x11e>
 80072b6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80072ba:	f300 80c8 	bgt.w	800744e <pbuf_alloc+0x1b6>
 80072be:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072c2:	d010      	beq.n	80072e6 <pbuf_alloc+0x4e>
 80072c4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072c8:	f300 80c1 	bgt.w	800744e <pbuf_alloc+0x1b6>
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d002      	beq.n	80072d6 <pbuf_alloc+0x3e>
 80072d0:	2b41      	cmp	r3, #65	; 0x41
 80072d2:	f040 80bc 	bne.w	800744e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072d6:	887a      	ldrh	r2, [r7, #2]
 80072d8:	88bb      	ldrh	r3, [r7, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	2000      	movs	r0, #0
 80072de:	f000 f8d1 	bl	8007484 <pbuf_alloc_reference>
 80072e2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80072e4:	e0bd      	b.n	8007462 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072ee:	88bb      	ldrh	r3, [r7, #4]
 80072f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072f2:	2008      	movs	r0, #8
 80072f4:	f7ff fc56 	bl	8006ba4 <memp_malloc>
 80072f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007300:	f7ff ff94 	bl	800722c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <pbuf_alloc+0x78>
            pbuf_free(p);
 800730a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800730c:	f000 faa8 	bl	8007860 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007310:	2300      	movs	r3, #0
 8007312:	e0a7      	b.n	8007464 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007316:	3303      	adds	r3, #3
 8007318:	b29b      	uxth	r3, r3
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	b29b      	uxth	r3, r3
 8007320:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007324:	b29b      	uxth	r3, r3
 8007326:	8b7a      	ldrh	r2, [r7, #26]
 8007328:	4293      	cmp	r3, r2
 800732a:	bf28      	it	cs
 800732c:	4613      	movcs	r3, r2
 800732e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007332:	3310      	adds	r3, #16
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	3303      	adds	r3, #3
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	4618      	mov	r0, r3
 8007340:	89f9      	ldrh	r1, [r7, #14]
 8007342:	8b7a      	ldrh	r2, [r7, #26]
 8007344:	2300      	movs	r3, #0
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	460b      	mov	r3, r1
 800734e:	4601      	mov	r1, r0
 8007350:	6938      	ldr	r0, [r7, #16]
 8007352:	f7ff ff77 	bl	8007244 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d006      	beq.n	8007370 <pbuf_alloc+0xd8>
 8007362:	4b42      	ldr	r3, [pc, #264]	; (800746c <pbuf_alloc+0x1d4>)
 8007364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007368:	4941      	ldr	r1, [pc, #260]	; (8007470 <pbuf_alloc+0x1d8>)
 800736a:	4842      	ldr	r0, [pc, #264]	; (8007474 <pbuf_alloc+0x1dc>)
 800736c:	f00f fd0a 	bl	8016d84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007372:	3303      	adds	r3, #3
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800737c:	d106      	bne.n	800738c <pbuf_alloc+0xf4>
 800737e:	4b3b      	ldr	r3, [pc, #236]	; (800746c <pbuf_alloc+0x1d4>)
 8007380:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007384:	493c      	ldr	r1, [pc, #240]	; (8007478 <pbuf_alloc+0x1e0>)
 8007386:	483b      	ldr	r0, [pc, #236]	; (8007474 <pbuf_alloc+0x1dc>)
 8007388:	f00f fcfc 	bl	8016d84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
 8007396:	e002      	b.n	800739e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80073a2:	8b7a      	ldrh	r2, [r7, #26]
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80073ae:	8b7b      	ldrh	r3, [r7, #26]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d19e      	bne.n	80072f2 <pbuf_alloc+0x5a>
      break;
 80073b4:	e055      	b.n	8007462 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80073b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b8:	3303      	adds	r3, #3
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f023 0303 	bic.w	r3, r3, #3
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	88bb      	ldrh	r3, [r7, #4]
 80073c4:	3303      	adds	r3, #3
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f023 0303 	bic.w	r3, r3, #3
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073d2:	8b3b      	ldrh	r3, [r7, #24]
 80073d4:	3310      	adds	r3, #16
 80073d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073d8:	8b3a      	ldrh	r2, [r7, #24]
 80073da:	88bb      	ldrh	r3, [r7, #4]
 80073dc:	3303      	adds	r3, #3
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d306      	bcc.n	80073f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073e6:	8afa      	ldrh	r2, [r7, #22]
 80073e8:	88bb      	ldrh	r3, [r7, #4]
 80073ea:	3303      	adds	r3, #3
 80073ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d201      	bcs.n	80073f8 <pbuf_alloc+0x160>
        return NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e035      	b.n	8007464 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073f8:	8afb      	ldrh	r3, [r7, #22]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fa64 	bl	80068c8 <mem_malloc>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <pbuf_alloc+0x174>
        return NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	e02b      	b.n	8007464 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800740c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800740e:	3310      	adds	r3, #16
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	4413      	add	r3, r2
 8007414:	3303      	adds	r3, #3
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	4618      	mov	r0, r3
 800741c:	88b9      	ldrh	r1, [r7, #4]
 800741e:	88ba      	ldrh	r2, [r7, #4]
 8007420:	2300      	movs	r3, #0
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	887b      	ldrh	r3, [r7, #2]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	460b      	mov	r3, r1
 800742a:	4601      	mov	r1, r0
 800742c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800742e:	f7ff ff09 	bl	8007244 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d010      	beq.n	8007460 <pbuf_alloc+0x1c8>
 800743e:	4b0b      	ldr	r3, [pc, #44]	; (800746c <pbuf_alloc+0x1d4>)
 8007440:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007444:	490d      	ldr	r1, [pc, #52]	; (800747c <pbuf_alloc+0x1e4>)
 8007446:	480b      	ldr	r0, [pc, #44]	; (8007474 <pbuf_alloc+0x1dc>)
 8007448:	f00f fc9c 	bl	8016d84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800744c:	e008      	b.n	8007460 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <pbuf_alloc+0x1d4>)
 8007450:	f240 1227 	movw	r2, #295	; 0x127
 8007454:	490a      	ldr	r1, [pc, #40]	; (8007480 <pbuf_alloc+0x1e8>)
 8007456:	4807      	ldr	r0, [pc, #28]	; (8007474 <pbuf_alloc+0x1dc>)
 8007458:	f00f fc94 	bl	8016d84 <iprintf>
      return NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	e001      	b.n	8007464 <pbuf_alloc+0x1cc>
      break;
 8007460:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007464:	4618      	mov	r0, r3
 8007466:	3728      	adds	r7, #40	; 0x28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	08018488 	.word	0x08018488
 8007470:	080184b8 	.word	0x080184b8
 8007474:	080184e8 	.word	0x080184e8
 8007478:	08018510 	.word	0x08018510
 800747c:	08018544 	.word	0x08018544
 8007480:	08018570 	.word	0x08018570

08007484 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	807b      	strh	r3, [r7, #2]
 8007490:	4613      	mov	r3, r2
 8007492:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007494:	883b      	ldrh	r3, [r7, #0]
 8007496:	2b41      	cmp	r3, #65	; 0x41
 8007498:	d009      	beq.n	80074ae <pbuf_alloc_reference+0x2a>
 800749a:	883b      	ldrh	r3, [r7, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d006      	beq.n	80074ae <pbuf_alloc_reference+0x2a>
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <pbuf_alloc_reference+0x5c>)
 80074a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80074a6:	490f      	ldr	r1, [pc, #60]	; (80074e4 <pbuf_alloc_reference+0x60>)
 80074a8:	480f      	ldr	r0, [pc, #60]	; (80074e8 <pbuf_alloc_reference+0x64>)
 80074aa:	f00f fc6b 	bl	8016d84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80074ae:	2007      	movs	r0, #7
 80074b0:	f7ff fb78 	bl	8006ba4 <memp_malloc>
 80074b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	e00b      	b.n	80074d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80074c0:	8879      	ldrh	r1, [r7, #2]
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	2300      	movs	r3, #0
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	883b      	ldrh	r3, [r7, #0]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	460b      	mov	r3, r1
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7ff feb7 	bl	8007244 <pbuf_init_alloced_pbuf>
  return p;
 80074d6:	68fb      	ldr	r3, [r7, #12]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	08018488 	.word	0x08018488
 80074e4:	0801858c 	.word	0x0801858c
 80074e8:	080184e8 	.word	0x080184e8

080074ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
 80074f8:	460b      	mov	r3, r1
 80074fa:	81bb      	strh	r3, [r7, #12]
 80074fc:	4613      	mov	r3, r2
 80074fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007504:	8a7b      	ldrh	r3, [r7, #18]
 8007506:	3303      	adds	r3, #3
 8007508:	f023 0203 	bic.w	r2, r3, #3
 800750c:	89bb      	ldrh	r3, [r7, #12]
 800750e:	441a      	add	r2, r3
 8007510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007512:	429a      	cmp	r2, r3
 8007514:	d901      	bls.n	800751a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	e018      	b.n	800754c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007520:	8a7b      	ldrh	r3, [r7, #18]
 8007522:	3303      	adds	r3, #3
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	4413      	add	r3, r2
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e001      	b.n	8007534 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	89b9      	ldrh	r1, [r7, #12]
 8007538:	89ba      	ldrh	r2, [r7, #12]
 800753a:	2302      	movs	r3, #2
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	897b      	ldrh	r3, [r7, #10]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	460b      	mov	r3, r1
 8007544:	6979      	ldr	r1, [r7, #20]
 8007546:	f7ff fe7d 	bl	8007244 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800754a:	687b      	ldr	r3, [r7, #4]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <pbuf_realloc+0x20>
 8007566:	4b3a      	ldr	r3, [pc, #232]	; (8007650 <pbuf_realloc+0xfc>)
 8007568:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800756c:	4939      	ldr	r1, [pc, #228]	; (8007654 <pbuf_realloc+0x100>)
 800756e:	483a      	ldr	r0, [pc, #232]	; (8007658 <pbuf_realloc+0x104>)
 8007570:	f00f fc08 	bl	8016d84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	891b      	ldrh	r3, [r3, #8]
 8007578:	887a      	ldrh	r2, [r7, #2]
 800757a:	429a      	cmp	r2, r3
 800757c:	d263      	bcs.n	8007646 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	891a      	ldrh	r2, [r3, #8]
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	817b      	strh	r3, [r7, #10]
  q = p;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007590:	e018      	b.n	80075c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	895b      	ldrh	r3, [r3, #10]
 8007596:	897a      	ldrh	r2, [r7, #10]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	891a      	ldrh	r2, [r3, #8]
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <pbuf_realloc+0x70>
 80075b6:	4b26      	ldr	r3, [pc, #152]	; (8007650 <pbuf_realloc+0xfc>)
 80075b8:	f240 12af 	movw	r2, #431	; 0x1af
 80075bc:	4927      	ldr	r1, [pc, #156]	; (800765c <pbuf_realloc+0x108>)
 80075be:	4826      	ldr	r0, [pc, #152]	; (8007658 <pbuf_realloc+0x104>)
 80075c0:	f00f fbe0 	bl	8016d84 <iprintf>
  while (rem_len > q->len) {
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	895b      	ldrh	r3, [r3, #10]
 80075c8:	897a      	ldrh	r2, [r7, #10]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d8e1      	bhi.n	8007592 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	7b1b      	ldrb	r3, [r3, #12]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d121      	bne.n	800761e <pbuf_realloc+0xca>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	895b      	ldrh	r3, [r3, #10]
 80075de:	897a      	ldrh	r2, [r7, #10]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d01c      	beq.n	800761e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	7b5b      	ldrb	r3, [r3, #13]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d116      	bne.n	800761e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	897b      	ldrh	r3, [r7, #10]
 80075fc:	4413      	add	r3, r2
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff f864 	bl	80066d0 <mem_trim>
 8007608:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <pbuf_realloc+0xca>
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <pbuf_realloc+0xfc>)
 8007612:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007616:	4912      	ldr	r1, [pc, #72]	; (8007660 <pbuf_realloc+0x10c>)
 8007618:	480f      	ldr	r0, [pc, #60]	; (8007658 <pbuf_realloc+0x104>)
 800761a:	f00f fbb3 	bl	8016d84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	897a      	ldrh	r2, [r7, #10]
 8007622:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	895a      	ldrh	r2, [r3, #10]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f911 	bl	8007860 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e000      	b.n	8007648 <pbuf_realloc+0xf4>
    return;
 8007646:	bf00      	nop

}
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	08018488 	.word	0x08018488
 8007654:	080185a0 	.word	0x080185a0
 8007658:	080184e8 	.word	0x080184e8
 800765c:	080185b8 	.word	0x080185b8
 8007660:	080185d0 	.word	0x080185d0

08007664 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <pbuf_add_header_impl+0x22>
 8007678:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <pbuf_add_header_impl+0xc4>)
 800767a:	f240 12df 	movw	r2, #479	; 0x1df
 800767e:	492b      	ldr	r1, [pc, #172]	; (800772c <pbuf_add_header_impl+0xc8>)
 8007680:	482b      	ldr	r0, [pc, #172]	; (8007730 <pbuf_add_header_impl+0xcc>)
 8007682:	f00f fb7f 	bl	8016d84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <pbuf_add_header_impl+0x30>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007692:	d301      	bcc.n	8007698 <pbuf_add_header_impl+0x34>
    return 1;
 8007694:	2301      	movs	r3, #1
 8007696:	e043      	b.n	8007720 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	e03e      	b.n	8007720 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	891a      	ldrh	r2, [r3, #8]
 80076aa:	8a7b      	ldrh	r3, [r7, #18]
 80076ac:	4413      	add	r3, r2
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8a7a      	ldrh	r2, [r7, #18]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d901      	bls.n	80076ba <pbuf_add_header_impl+0x56>
    return 1;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e032      	b.n	8007720 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	7b1b      	ldrb	r3, [r3, #12]
 80076be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80076c0:	8a3b      	ldrh	r3, [r7, #16]
 80076c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00c      	beq.n	80076e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	425b      	negs	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3310      	adds	r3, #16
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d20d      	bcs.n	80076fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e01d      	b.n	8007720 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	425b      	negs	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e001      	b.n	80076fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e011      	b.n	8007720 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	895a      	ldrh	r2, [r3, #10]
 8007706:	8a7b      	ldrh	r3, [r7, #18]
 8007708:	4413      	add	r3, r2
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	891a      	ldrh	r2, [r3, #8]
 8007714:	8a7b      	ldrh	r3, [r7, #18]
 8007716:	4413      	add	r3, r2
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	811a      	strh	r2, [r3, #8]


  return 0;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	08018488 	.word	0x08018488
 800772c:	080185ec 	.word	0x080185ec
 8007730:	080184e8 	.word	0x080184e8

08007734 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800773e:	2200      	movs	r2, #0
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff ff8e 	bl	8007664 <pbuf_add_header_impl>
 8007748:	4603      	mov	r3, r0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <pbuf_remove_header+0x1e>
 8007764:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <pbuf_remove_header+0x94>)
 8007766:	f240 224b 	movw	r2, #587	; 0x24b
 800776a:	4920      	ldr	r1, [pc, #128]	; (80077ec <pbuf_remove_header+0x98>)
 800776c:	4820      	ldr	r0, [pc, #128]	; (80077f0 <pbuf_remove_header+0x9c>)
 800776e:	f00f fb09 	bl	8016d84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <pbuf_remove_header+0x2c>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777e:	d301      	bcc.n	8007784 <pbuf_remove_header+0x30>
    return 1;
 8007780:	2301      	movs	r3, #1
 8007782:	e02c      	b.n	80077de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <pbuf_remove_header+0x3a>
    return 0;
 800778a:	2300      	movs	r3, #0
 800778c:	e027      	b.n	80077de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	895b      	ldrh	r3, [r3, #10]
 8007796:	89fa      	ldrh	r2, [r7, #14]
 8007798:	429a      	cmp	r2, r3
 800779a:	d908      	bls.n	80077ae <pbuf_remove_header+0x5a>
 800779c:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <pbuf_remove_header+0x94>)
 800779e:	f240 2255 	movw	r2, #597	; 0x255
 80077a2:	4914      	ldr	r1, [pc, #80]	; (80077f4 <pbuf_remove_header+0xa0>)
 80077a4:	4812      	ldr	r0, [pc, #72]	; (80077f0 <pbuf_remove_header+0x9c>)
 80077a6:	f00f faed 	bl	8016d84 <iprintf>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e017      	b.n	80077de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	895a      	ldrh	r2, [r3, #10]
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	891a      	ldrh	r2, [r3, #8]
 80077d2:	89fb      	ldrh	r3, [r7, #14]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	08018488 	.word	0x08018488
 80077ec:	080185ec 	.word	0x080185ec
 80077f0:	080184e8 	.word	0x080184e8
 80077f4:	080185f8 	.word	0x080185f8

080077f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	807b      	strh	r3, [r7, #2]
 8007804:	4613      	mov	r3, r2
 8007806:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da08      	bge.n	8007822 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007814:	425b      	negs	r3, r3
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff ff9b 	bl	8007754 <pbuf_remove_header>
 800781e:	4603      	mov	r3, r0
 8007820:	e007      	b.n	8007832 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007826:	787a      	ldrb	r2, [r7, #1]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff ff1a 	bl	8007664 <pbuf_add_header_impl>
 8007830:	4603      	mov	r3, r0
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800784a:	2201      	movs	r2, #1
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff ffd2 	bl	80077f8 <pbuf_header_impl>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <pbuf_free+0x22>
 8007874:	4b38      	ldr	r3, [pc, #224]	; (8007958 <pbuf_free+0xf8>)
 8007876:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800787a:	4938      	ldr	r1, [pc, #224]	; (800795c <pbuf_free+0xfc>)
 800787c:	4838      	ldr	r0, [pc, #224]	; (8007960 <pbuf_free+0x100>)
 800787e:	f00f fa81 	bl	8016d84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007882:	2300      	movs	r3, #0
 8007884:	e063      	b.n	800794e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800788a:	e05c      	b.n	8007946 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7b9b      	ldrb	r3, [r3, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <pbuf_free+0x42>
 8007894:	4b30      	ldr	r3, [pc, #192]	; (8007958 <pbuf_free+0xf8>)
 8007896:	f240 22f1 	movw	r2, #753	; 0x2f1
 800789a:	4932      	ldr	r1, [pc, #200]	; (8007964 <pbuf_free+0x104>)
 800789c:	4830      	ldr	r0, [pc, #192]	; (8007960 <pbuf_free+0x100>)
 800789e:	f00f fa71 	bl	8016d84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7b9b      	ldrb	r3, [r3, #14]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	739a      	strb	r2, [r3, #14]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7b9b      	ldrb	r3, [r3, #14]
 80078b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80078b4:	7dbb      	ldrb	r3, [r7, #22]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d143      	bne.n	8007942 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7b5b      	ldrb	r3, [r3, #13]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d011      	beq.n	80078fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <pbuf_free+0x90>
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <pbuf_free+0xf8>)
 80078e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80078e8:	491f      	ldr	r1, [pc, #124]	; (8007968 <pbuf_free+0x108>)
 80078ea:	481d      	ldr	r0, [pc, #116]	; (8007960 <pbuf_free+0x100>)
 80078ec:	f00f fa4a 	bl	8016d84 <iprintf>
        pc->custom_free_function(p);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
 80078f8:	e01d      	b.n	8007936 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d104      	bne.n	800790a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	2008      	movs	r0, #8
 8007904:	f7ff f99a 	bl	8006c3c <memp_free>
 8007908:	e015      	b.n	8007936 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d104      	bne.n	800791a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	2007      	movs	r0, #7
 8007914:	f7ff f992 	bl	8006c3c <memp_free>
 8007918:	e00d      	b.n	8007936 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <pbuf_free+0xc8>
          mem_free(p);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe fe6b 	bl	80065fc <mem_free>
 8007926:	e006      	b.n	8007936 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <pbuf_free+0xf8>)
 800792a:	f240 320f 	movw	r2, #783	; 0x30f
 800792e:	490f      	ldr	r1, [pc, #60]	; (800796c <pbuf_free+0x10c>)
 8007930:	480b      	ldr	r0, [pc, #44]	; (8007960 <pbuf_free+0x100>)
 8007932:	f00f fa27 	bl	8016d84 <iprintf>
        }
      }
      count++;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	3301      	adds	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	e001      	b.n	8007946 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d19f      	bne.n	800788c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	08018488 	.word	0x08018488
 800795c:	080185ec 	.word	0x080185ec
 8007960:	080184e8 	.word	0x080184e8
 8007964:	08018618 	.word	0x08018618
 8007968:	08018630 	.word	0x08018630
 800796c:	08018654 	.word	0x08018654

08007970 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800797c:	e005      	b.n	800798a <pbuf_clen+0x1a>
    ++len;
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	3301      	adds	r3, #1
 8007982:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f6      	bne.n	800797e <pbuf_clen+0xe>
  }
  return len;
 8007990:	89fb      	ldrh	r3, [r7, #14]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7b9b      	ldrb	r3, [r3, #14]
 80079b2:	3301      	adds	r3, #1
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7b9b      	ldrb	r3, [r3, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <pbuf_ref+0x30>
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <pbuf_ref+0x38>)
 80079c4:	f240 3242 	movw	r2, #834	; 0x342
 80079c8:	4904      	ldr	r1, [pc, #16]	; (80079dc <pbuf_ref+0x3c>)
 80079ca:	4805      	ldr	r0, [pc, #20]	; (80079e0 <pbuf_ref+0x40>)
 80079cc:	f00f f9da 	bl	8016d84 <iprintf>
  }
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08018488 	.word	0x08018488
 80079dc:	08018668 	.word	0x08018668
 80079e0:	080184e8 	.word	0x080184e8

080079e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <pbuf_cat+0x16>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d107      	bne.n	8007a0a <pbuf_cat+0x26>
 80079fa:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <pbuf_cat+0x98>)
 80079fc:	f240 3259 	movw	r2, #857	; 0x359
 8007a00:	491f      	ldr	r1, [pc, #124]	; (8007a80 <pbuf_cat+0x9c>)
 8007a02:	4820      	ldr	r0, [pc, #128]	; (8007a84 <pbuf_cat+0xa0>)
 8007a04:	f00f f9be 	bl	8016d84 <iprintf>
 8007a08:	e034      	b.n	8007a74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	e00a      	b.n	8007a26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	891a      	ldrh	r2, [r3, #8]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	891b      	ldrh	r3, [r3, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f0      	bne.n	8007a10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	891a      	ldrh	r2, [r3, #8]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	895b      	ldrh	r3, [r3, #10]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d006      	beq.n	8007a48 <pbuf_cat+0x64>
 8007a3a:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <pbuf_cat+0x98>)
 8007a3c:	f240 3262 	movw	r2, #866	; 0x362
 8007a40:	4911      	ldr	r1, [pc, #68]	; (8007a88 <pbuf_cat+0xa4>)
 8007a42:	4810      	ldr	r0, [pc, #64]	; (8007a84 <pbuf_cat+0xa0>)
 8007a44:	f00f f99e 	bl	8016d84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <pbuf_cat+0x7a>
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <pbuf_cat+0x98>)
 8007a52:	f240 3263 	movw	r2, #867	; 0x363
 8007a56:	490d      	ldr	r1, [pc, #52]	; (8007a8c <pbuf_cat+0xa8>)
 8007a58:	480a      	ldr	r0, [pc, #40]	; (8007a84 <pbuf_cat+0xa0>)
 8007a5a:	f00f f993 	bl	8016d84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	891a      	ldrh	r2, [r3, #8]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	891b      	ldrh	r3, [r3, #8]
 8007a66:	4413      	add	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08018488 	.word	0x08018488
 8007a80:	0801867c 	.word	0x0801867c
 8007a84:	080184e8 	.word	0x080184e8
 8007a88:	080186b4 	.word	0x080186b4
 8007a8c:	080186e4 	.word	0x080186e4

08007a90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ffa1 	bl	80079e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007aa2:	6838      	ldr	r0, [r7, #0]
 8007aa4:	f7ff ff7c 	bl	80079a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <pbuf_copy+0x2a>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <pbuf_copy+0x2a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	891a      	ldrh	r2, [r3, #8]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	891b      	ldrh	r3, [r3, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d209      	bcs.n	8007aee <pbuf_copy+0x3e>
 8007ada:	4b57      	ldr	r3, [pc, #348]	; (8007c38 <pbuf_copy+0x188>)
 8007adc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ae0:	4956      	ldr	r1, [pc, #344]	; (8007c3c <pbuf_copy+0x18c>)
 8007ae2:	4857      	ldr	r0, [pc, #348]	; (8007c40 <pbuf_copy+0x190>)
 8007ae4:	f00f f94e 	bl	8016d84 <iprintf>
 8007ae8:	f06f 030f 	mvn.w	r3, #15
 8007aec:	e09f      	b.n	8007c2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	895b      	ldrh	r3, [r3, #10]
 8007af2:	461a      	mov	r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	895b      	ldrh	r3, [r3, #10]
 8007afc:	4619      	mov	r1, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1acb      	subs	r3, r1, r3
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d306      	bcc.n	8007b14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e005      	b.n	8007b20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	895b      	ldrh	r3, [r3, #10]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	18d0      	adds	r0, r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4619      	mov	r1, r3
 8007b34:	f00f f910 	bl	8016d58 <memcpy>
    offset_to += len;
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	895b      	ldrh	r3, [r3, #10]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d906      	bls.n	8007b62 <pbuf_copy+0xb2>
 8007b54:	4b38      	ldr	r3, [pc, #224]	; (8007c38 <pbuf_copy+0x188>)
 8007b56:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007b5a:	493a      	ldr	r1, [pc, #232]	; (8007c44 <pbuf_copy+0x194>)
 8007b5c:	4838      	ldr	r0, [pc, #224]	; (8007c40 <pbuf_copy+0x190>)
 8007b5e:	f00f f911 	bl	8016d84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	895b      	ldrh	r3, [r3, #10]
 8007b66:	461a      	mov	r2, r3
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d906      	bls.n	8007b7c <pbuf_copy+0xcc>
 8007b6e:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <pbuf_copy+0x188>)
 8007b70:	f240 32da 	movw	r2, #986	; 0x3da
 8007b74:	4934      	ldr	r1, [pc, #208]	; (8007c48 <pbuf_copy+0x198>)
 8007b76:	4832      	ldr	r0, [pc, #200]	; (8007c40 <pbuf_copy+0x190>)
 8007b78:	f00f f904 	bl	8016d84 <iprintf>
    if (offset_from >= p_from->len) {
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	895b      	ldrh	r3, [r3, #10]
 8007b80:	461a      	mov	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d304      	bcc.n	8007b92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	895b      	ldrh	r3, [r3, #10]
 8007b96:	461a      	mov	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d114      	bne.n	8007bc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10c      	bne.n	8007bc8 <pbuf_copy+0x118>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <pbuf_copy+0x118>
 8007bb4:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <pbuf_copy+0x188>)
 8007bb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007bba:	4924      	ldr	r1, [pc, #144]	; (8007c4c <pbuf_copy+0x19c>)
 8007bbc:	4820      	ldr	r0, [pc, #128]	; (8007c40 <pbuf_copy+0x190>)
 8007bbe:	f00f f8e1 	bl	8016d84 <iprintf>
 8007bc2:	f06f 030f 	mvn.w	r3, #15
 8007bc6:	e032      	b.n	8007c2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d013      	beq.n	8007bf6 <pbuf_copy+0x146>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	895a      	ldrh	r2, [r3, #10]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	891b      	ldrh	r3, [r3, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d10d      	bne.n	8007bf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <pbuf_copy+0x146>
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <pbuf_copy+0x188>)
 8007be4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007be8:	4919      	ldr	r1, [pc, #100]	; (8007c50 <pbuf_copy+0x1a0>)
 8007bea:	4815      	ldr	r0, [pc, #84]	; (8007c40 <pbuf_copy+0x190>)
 8007bec:	f00f f8ca 	bl	8016d84 <iprintf>
 8007bf0:	f06f 0305 	mvn.w	r3, #5
 8007bf4:	e01b      	b.n	8007c2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d013      	beq.n	8007c24 <pbuf_copy+0x174>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	895a      	ldrh	r2, [r3, #10]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	891b      	ldrh	r3, [r3, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d10d      	bne.n	8007c24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <pbuf_copy+0x174>
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <pbuf_copy+0x188>)
 8007c12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007c16:	490e      	ldr	r1, [pc, #56]	; (8007c50 <pbuf_copy+0x1a0>)
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <pbuf_copy+0x190>)
 8007c1a:	f00f f8b3 	bl	8016d84 <iprintf>
 8007c1e:	f06f 0305 	mvn.w	r3, #5
 8007c22:	e004      	b.n	8007c2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f47f af61 	bne.w	8007aee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	08018488 	.word	0x08018488
 8007c3c:	08018730 	.word	0x08018730
 8007c40:	080184e8 	.word	0x080184e8
 8007c44:	08018760 	.word	0x08018760
 8007c48:	08018778 	.word	0x08018778
 8007c4c:	08018794 	.word	0x08018794
 8007c50:	080187a4 	.word	0x080187a4

08007c54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	461a      	mov	r2, r3
 8007c62:	460b      	mov	r3, r1
 8007c64:	80fb      	strh	r3, [r7, #6]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d108      	bne.n	8007c8a <pbuf_copy_partial+0x36>
 8007c78:	4b2b      	ldr	r3, [pc, #172]	; (8007d28 <pbuf_copy_partial+0xd4>)
 8007c7a:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c7e:	492b      	ldr	r1, [pc, #172]	; (8007d2c <pbuf_copy_partial+0xd8>)
 8007c80:	482b      	ldr	r0, [pc, #172]	; (8007d30 <pbuf_copy_partial+0xdc>)
 8007c82:	f00f f87f 	bl	8016d84 <iprintf>
 8007c86:	2300      	movs	r3, #0
 8007c88:	e04a      	b.n	8007d20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d108      	bne.n	8007ca2 <pbuf_copy_partial+0x4e>
 8007c90:	4b25      	ldr	r3, [pc, #148]	; (8007d28 <pbuf_copy_partial+0xd4>)
 8007c92:	f240 420b 	movw	r2, #1035	; 0x40b
 8007c96:	4927      	ldr	r1, [pc, #156]	; (8007d34 <pbuf_copy_partial+0xe0>)
 8007c98:	4825      	ldr	r0, [pc, #148]	; (8007d30 <pbuf_copy_partial+0xdc>)
 8007c9a:	f00f f873 	bl	8016d84 <iprintf>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e03e      	b.n	8007d20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e034      	b.n	8007d12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007ca8:	88bb      	ldrh	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <pbuf_copy_partial+0x70>
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	895b      	ldrh	r3, [r3, #10]
 8007cb2:	88ba      	ldrh	r2, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d305      	bcc.n	8007cc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	895b      	ldrh	r3, [r3, #10]
 8007cbc:	88ba      	ldrh	r2, [r7, #4]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	80bb      	strh	r3, [r7, #4]
 8007cc2:	e023      	b.n	8007d0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	895a      	ldrh	r2, [r3, #10]
 8007cc8:	88bb      	ldrh	r3, [r7, #4]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007cce:	8b3a      	ldrh	r2, [r7, #24]
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d901      	bls.n	8007cda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cda:	8b7b      	ldrh	r3, [r7, #26]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	18d0      	adds	r0, r2, r3
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	88bb      	ldrh	r3, [r7, #4]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	8b3a      	ldrh	r2, [r7, #24]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f00f f834 	bl	8016d58 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007cf0:	8afa      	ldrh	r2, [r7, #22]
 8007cf2:	8b3b      	ldrh	r3, [r7, #24]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007cf8:	8b7a      	ldrh	r2, [r7, #26]
 8007cfa:	8b3b      	ldrh	r3, [r7, #24]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	8b3b      	ldrh	r3, [r7, #24]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <pbuf_copy_partial+0xca>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1c4      	bne.n	8007ca8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007d1e:	8afb      	ldrh	r3, [r7, #22]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3720      	adds	r7, #32
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	08018488 	.word	0x08018488
 8007d2c:	080187d0 	.word	0x080187d0
 8007d30:	080184e8 	.word	0x080184e8
 8007d34:	080187f0 	.word	0x080187f0

08007d38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	603a      	str	r2, [r7, #0]
 8007d42:	71fb      	strb	r3, [r7, #7]
 8007d44:	460b      	mov	r3, r1
 8007d46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	8919      	ldrh	r1, [r3, #8]
 8007d4c:	88ba      	ldrh	r2, [r7, #4]
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff faa1 	bl	8007298 <pbuf_alloc>
 8007d56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <pbuf_clone+0x2a>
    return NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e011      	b.n	8007d86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fea3 	bl	8007ab0 <pbuf_copy>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d006      	beq.n	8007d84 <pbuf_clone+0x4c>
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <pbuf_clone+0x58>)
 8007d78:	f240 5224 	movw	r2, #1316	; 0x524
 8007d7c:	4905      	ldr	r1, [pc, #20]	; (8007d94 <pbuf_clone+0x5c>)
 8007d7e:	4806      	ldr	r0, [pc, #24]	; (8007d98 <pbuf_clone+0x60>)
 8007d80:	f00f f800 	bl	8016d84 <iprintf>
  return q;
 8007d84:	68fb      	ldr	r3, [r7, #12]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	08018488 	.word	0x08018488
 8007d94:	080188fc 	.word	0x080188fc
 8007d98:	080184e8 	.word	0x080184e8

08007d9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007da0:	f00f f87e 	bl	8016ea0 <rand>
 8007da4:	4603      	mov	r3, r0
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4b01      	ldr	r3, [pc, #4]	; (8007dbc <tcp_init+0x20>)
 8007db6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000000a 	.word	0x2000000a

08007dc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7d1b      	ldrb	r3, [r3, #20]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d105      	bne.n	8007ddc <tcp_free+0x1c>
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <tcp_free+0x2c>)
 8007dd2:	22d4      	movs	r2, #212	; 0xd4
 8007dd4:	4906      	ldr	r1, [pc, #24]	; (8007df0 <tcp_free+0x30>)
 8007dd6:	4807      	ldr	r0, [pc, #28]	; (8007df4 <tcp_free+0x34>)
 8007dd8:	f00e ffd4 	bl	8016d84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	2001      	movs	r0, #1
 8007de0:	f7fe ff2c 	bl	8006c3c <memp_free>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	08018988 	.word	0x08018988
 8007df0:	080189b8 	.word	0x080189b8
 8007df4:	080189cc 	.word	0x080189cc

08007df8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7d1b      	ldrb	r3, [r3, #20]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <tcp_free_listen+0x1c>
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <tcp_free_listen+0x2c>)
 8007e0a:	22df      	movs	r2, #223	; 0xdf
 8007e0c:	4906      	ldr	r1, [pc, #24]	; (8007e28 <tcp_free_listen+0x30>)
 8007e0e:	4807      	ldr	r0, [pc, #28]	; (8007e2c <tcp_free_listen+0x34>)
 8007e10:	f00e ffb8 	bl	8016d84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	2002      	movs	r0, #2
 8007e18:	f7fe ff10 	bl	8006c3c <memp_free>
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08018988 	.word	0x08018988
 8007e28:	080189f4 	.word	0x080189f4
 8007e2c:	080189cc 	.word	0x080189cc

08007e30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007e34:	f001 f85c 	bl	8008ef0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <tcp_tmr+0x28>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <tcp_tmr+0x28>)
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <tcp_tmr+0x28>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007e50:	f000 fd0e 	bl	8008870 <tcp_slowtmr>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200000cd 	.word	0x200000cd

08007e5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d105      	bne.n	8007e78 <tcp_remove_listener+0x1c>
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <tcp_remove_listener+0x48>)
 8007e6e:	22ff      	movs	r2, #255	; 0xff
 8007e70:	490d      	ldr	r1, [pc, #52]	; (8007ea8 <tcp_remove_listener+0x4c>)
 8007e72:	480e      	ldr	r0, [pc, #56]	; (8007eac <tcp_remove_listener+0x50>)
 8007e74:	f00e ff86 	bl	8016d84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e00a      	b.n	8007e94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d102      	bne.n	8007e8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f1      	bne.n	8007e7e <tcp_remove_listener+0x22>
    }
  }
}
 8007e9a:	bf00      	nop
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	08018988 	.word	0x08018988
 8007ea8:	08018a10 	.word	0x08018a10
 8007eac:	080189cc 	.word	0x080189cc

08007eb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <tcp_listen_closed+0x1c>
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <tcp_listen_closed+0x60>)
 8007ec0:	f240 1211 	movw	r2, #273	; 0x111
 8007ec4:	4913      	ldr	r1, [pc, #76]	; (8007f14 <tcp_listen_closed+0x64>)
 8007ec6:	4814      	ldr	r0, [pc, #80]	; (8007f18 <tcp_listen_closed+0x68>)
 8007ec8:	f00e ff5c 	bl	8016d84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7d1b      	ldrb	r3, [r3, #20]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d006      	beq.n	8007ee2 <tcp_listen_closed+0x32>
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <tcp_listen_closed+0x60>)
 8007ed6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007eda:	4910      	ldr	r1, [pc, #64]	; (8007f1c <tcp_listen_closed+0x6c>)
 8007edc:	480e      	ldr	r0, [pc, #56]	; (8007f18 <tcp_listen_closed+0x68>)
 8007ede:	f00e ff51 	bl	8016d84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	e00b      	b.n	8007f00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007ee8:	4a0d      	ldr	r2, [pc, #52]	; (8007f20 <tcp_listen_closed+0x70>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff ffb1 	bl	8007e5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d9f0      	bls.n	8007ee8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	08018988 	.word	0x08018988
 8007f14:	08018a38 	.word	0x08018a38
 8007f18:	080189cc 	.word	0x080189cc
 8007f1c:	08018a44 	.word	0x08018a44
 8007f20:	0801a9e8 	.word	0x0801a9e8

08007f24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007f24:	b5b0      	push	{r4, r5, r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af04      	add	r7, sp, #16
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <tcp_close_shutdown+0x20>
 8007f36:	4b63      	ldr	r3, [pc, #396]	; (80080c4 <tcp_close_shutdown+0x1a0>)
 8007f38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007f3c:	4962      	ldr	r1, [pc, #392]	; (80080c8 <tcp_close_shutdown+0x1a4>)
 8007f3e:	4863      	ldr	r0, [pc, #396]	; (80080cc <tcp_close_shutdown+0x1a8>)
 8007f40:	f00e ff20 	bl	8016d84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d066      	beq.n	8008018 <tcp_close_shutdown+0xf4>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7d1b      	ldrb	r3, [r3, #20]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d003      	beq.n	8007f5a <tcp_close_shutdown+0x36>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7d1b      	ldrb	r3, [r3, #20]
 8007f56:	2b07      	cmp	r3, #7
 8007f58:	d15e      	bne.n	8008018 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <tcp_close_shutdown+0x48>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f6a:	d055      	beq.n	8008018 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8b5b      	ldrh	r3, [r3, #26]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <tcp_close_shutdown+0x62>
 8007f78:	4b52      	ldr	r3, [pc, #328]	; (80080c4 <tcp_close_shutdown+0x1a0>)
 8007f7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007f7e:	4954      	ldr	r1, [pc, #336]	; (80080d0 <tcp_close_shutdown+0x1ac>)
 8007f80:	4852      	ldr	r0, [pc, #328]	; (80080cc <tcp_close_shutdown+0x1a8>)
 8007f82:	f00e feff 	bl	8016d84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007f8e:	687d      	ldr	r5, [r7, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	8ad2      	ldrh	r2, [r2, #22]
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	8b09      	ldrh	r1, [r1, #24]
 8007f9c:	9102      	str	r1, [sp, #8]
 8007f9e:	9201      	str	r2, [sp, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	462b      	mov	r3, r5
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f005 fd85 	bl	800dab8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fb66 	bl	8009680 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007fb4:	4b47      	ldr	r3, [pc, #284]	; (80080d4 <tcp_close_shutdown+0x1b0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d105      	bne.n	8007fca <tcp_close_shutdown+0xa6>
 8007fbe:	4b45      	ldr	r3, [pc, #276]	; (80080d4 <tcp_close_shutdown+0x1b0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4a43      	ldr	r2, [pc, #268]	; (80080d4 <tcp_close_shutdown+0x1b0>)
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e013      	b.n	8007ff2 <tcp_close_shutdown+0xce>
 8007fca:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <tcp_close_shutdown+0x1b0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e00c      	b.n	8007fec <tcp_close_shutdown+0xc8>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d104      	bne.n	8007fe6 <tcp_close_shutdown+0xc2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	60da      	str	r2, [r3, #12]
 8007fe4:	e005      	b.n	8007ff2 <tcp_close_shutdown+0xce>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ef      	bne.n	8007fd2 <tcp_close_shutdown+0xae>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	60da      	str	r2, [r3, #12]
 8007ff8:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <tcp_close_shutdown+0x1b4>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <tcp_close_shutdown+0x1b8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d102      	bne.n	800800e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008008:	f003 fffa 	bl	800c000 <tcp_trigger_input_pcb_close>
 800800c:	e002      	b.n	8008014 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fed6 	bl	8007dc0 <tcp_free>
      }
      return ERR_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e050      	b.n	80080ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7d1b      	ldrb	r3, [r3, #20]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d03b      	beq.n	8008098 <tcp_close_shutdown+0x174>
 8008020:	2b02      	cmp	r3, #2
 8008022:	dc44      	bgt.n	80080ae <tcp_close_shutdown+0x18a>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <tcp_close_shutdown+0x10a>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d02a      	beq.n	8008082 <tcp_close_shutdown+0x15e>
 800802c:	e03f      	b.n	80080ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8adb      	ldrh	r3, [r3, #22]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d021      	beq.n	800807a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008036:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <tcp_close_shutdown+0x1bc>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d105      	bne.n	800804c <tcp_close_shutdown+0x128>
 8008040:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <tcp_close_shutdown+0x1bc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <tcp_close_shutdown+0x1bc>)
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	e013      	b.n	8008074 <tcp_close_shutdown+0x150>
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <tcp_close_shutdown+0x1bc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	e00c      	b.n	800806e <tcp_close_shutdown+0x14a>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <tcp_close_shutdown+0x144>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e005      	b.n	8008074 <tcp_close_shutdown+0x150>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1ef      	bne.n	8008054 <tcp_close_shutdown+0x130>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff fea0 	bl	8007dc0 <tcp_free>
      break;
 8008080:	e01a      	b.n	80080b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff ff14 	bl	8007eb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	4816      	ldr	r0, [pc, #88]	; (80080e4 <tcp_close_shutdown+0x1c0>)
 800808c:	f001 fb48 	bl	8009720 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff feb1 	bl	8007df8 <tcp_free_listen>
      break;
 8008096:	e00f      	b.n	80080b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	480e      	ldr	r0, [pc, #56]	; (80080d4 <tcp_close_shutdown+0x1b0>)
 800809c:	f001 fb40 	bl	8009720 <tcp_pcb_remove>
 80080a0:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <tcp_close_shutdown+0x1b4>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fe8a 	bl	8007dc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80080ac:	e004      	b.n	80080b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f81a 	bl	80080e8 <tcp_close_shutdown_fin>
 80080b4:	4603      	mov	r3, r0
 80080b6:	e000      	b.n	80080ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bdb0      	pop	{r4, r5, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	08018988 	.word	0x08018988
 80080c8:	08018a5c 	.word	0x08018a5c
 80080cc:	080189cc 	.word	0x080189cc
 80080d0:	08018a7c 	.word	0x08018a7c
 80080d4:	2000696c 	.word	0x2000696c
 80080d8:	20006968 	.word	0x20006968
 80080dc:	20006980 	.word	0x20006980
 80080e0:	20006978 	.word	0x20006978
 80080e4:	20006974 	.word	0x20006974

080080e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <tcp_close_shutdown_fin+0x1c>
 80080f6:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <tcp_close_shutdown_fin+0xc8>)
 80080f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80080fc:	492d      	ldr	r1, [pc, #180]	; (80081b4 <tcp_close_shutdown_fin+0xcc>)
 80080fe:	482e      	ldr	r0, [pc, #184]	; (80081b8 <tcp_close_shutdown_fin+0xd0>)
 8008100:	f00e fe40 	bl	8016d84 <iprintf>

  switch (pcb->state) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	2b07      	cmp	r3, #7
 800810a:	d020      	beq.n	800814e <tcp_close_shutdown_fin+0x66>
 800810c:	2b07      	cmp	r3, #7
 800810e:	dc2b      	bgt.n	8008168 <tcp_close_shutdown_fin+0x80>
 8008110:	2b03      	cmp	r3, #3
 8008112:	d002      	beq.n	800811a <tcp_close_shutdown_fin+0x32>
 8008114:	2b04      	cmp	r3, #4
 8008116:	d00d      	beq.n	8008134 <tcp_close_shutdown_fin+0x4c>
 8008118:	e026      	b.n	8008168 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f004 fdda 	bl	800ccd4 <tcp_send_fin>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11f      	bne.n	800816c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2205      	movs	r2, #5
 8008130:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008132:	e01b      	b.n	800816c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f004 fdcd 	bl	800ccd4 <tcp_send_fin>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d114      	bne.n	8008170 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2205      	movs	r2, #5
 800814a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800814c:	e010      	b.n	8008170 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f004 fdc0 	bl	800ccd4 <tcp_send_fin>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2209      	movs	r2, #9
 8008164:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008166:	e005      	b.n	8008174 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	e01c      	b.n	80081a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <tcp_close_shutdown_fin+0x8e>
      break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <tcp_close_shutdown_fin+0x8e>
      break;
 8008174:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f004 fee6 	bl	800cf50 <tcp_output>
 8008184:	e00d      	b.n	80081a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d108      	bne.n	80081a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8b5b      	ldrh	r3, [r3, #26]
 8008194:	f043 0308 	orr.w	r3, r3, #8
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e001      	b.n	80081a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	08018988 	.word	0x08018988
 80081b4:	08018a38 	.word	0x08018a38
 80081b8:	080189cc 	.word	0x080189cc

080081bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <tcp_close+0x22>
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <tcp_close+0x4c>)
 80081cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80081d0:	490e      	ldr	r1, [pc, #56]	; (800820c <tcp_close+0x50>)
 80081d2:	480f      	ldr	r0, [pc, #60]	; (8008210 <tcp_close+0x54>)
 80081d4:	f00e fdd6 	bl	8016d84 <iprintf>
 80081d8:	f06f 030f 	mvn.w	r3, #15
 80081dc:	e00f      	b.n	80081fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7d1b      	ldrb	r3, [r3, #20]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d006      	beq.n	80081f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8b5b      	ldrh	r3, [r3, #26]
 80081ea:	f043 0310 	orr.w	r3, r3, #16
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80081f4:	2101      	movs	r1, #1
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fe94 	bl	8007f24 <tcp_close_shutdown>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	08018988 	.word	0x08018988
 800820c:	08018a98 	.word	0x08018a98
 8008210:	080189cc 	.word	0x080189cc

08008214 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08e      	sub	sp, #56	; 0x38
 8008218:	af04      	add	r7, sp, #16
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d107      	bne.n	8008234 <tcp_abandon+0x20>
 8008224:	4b52      	ldr	r3, [pc, #328]	; (8008370 <tcp_abandon+0x15c>)
 8008226:	f240 223d 	movw	r2, #573	; 0x23d
 800822a:	4952      	ldr	r1, [pc, #328]	; (8008374 <tcp_abandon+0x160>)
 800822c:	4852      	ldr	r0, [pc, #328]	; (8008378 <tcp_abandon+0x164>)
 800822e:	f00e fda9 	bl	8016d84 <iprintf>
 8008232:	e099      	b.n	8008368 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d106      	bne.n	800824a <tcp_abandon+0x36>
 800823c:	4b4c      	ldr	r3, [pc, #304]	; (8008370 <tcp_abandon+0x15c>)
 800823e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008242:	494e      	ldr	r1, [pc, #312]	; (800837c <tcp_abandon+0x168>)
 8008244:	484c      	ldr	r0, [pc, #304]	; (8008378 <tcp_abandon+0x164>)
 8008246:	f00e fd9d 	bl	8016d84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7d1b      	ldrb	r3, [r3, #20]
 800824e:	2b0a      	cmp	r3, #10
 8008250:	d107      	bne.n	8008262 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	484a      	ldr	r0, [pc, #296]	; (8008380 <tcp_abandon+0x16c>)
 8008256:	f001 fa63 	bl	8009720 <tcp_pcb_remove>
    tcp_free(pcb);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff fdb0 	bl	8007dc0 <tcp_free>
 8008260:	e082      	b.n	8008368 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7d1b      	ldrb	r3, [r3, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d126      	bne.n	80082da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8adb      	ldrh	r3, [r3, #22]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02e      	beq.n	80082f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008294:	4b3b      	ldr	r3, [pc, #236]	; (8008384 <tcp_abandon+0x170>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	429a      	cmp	r2, r3
 800829c:	d105      	bne.n	80082aa <tcp_abandon+0x96>
 800829e:	4b39      	ldr	r3, [pc, #228]	; (8008384 <tcp_abandon+0x170>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4a37      	ldr	r2, [pc, #220]	; (8008384 <tcp_abandon+0x170>)
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e013      	b.n	80082d2 <tcp_abandon+0xbe>
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <tcp_abandon+0x170>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	61fb      	str	r3, [r7, #28]
 80082b0:	e00c      	b.n	80082cc <tcp_abandon+0xb8>
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d104      	bne.n	80082c6 <tcp_abandon+0xb2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	60da      	str	r2, [r3, #12]
 80082c4:	e005      	b.n	80082d2 <tcp_abandon+0xbe>
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1ef      	bne.n	80082b2 <tcp_abandon+0x9e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e00b      	b.n	80082f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8adb      	ldrh	r3, [r3, #22]
 80082e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4828      	ldr	r0, [pc, #160]	; (8008388 <tcp_abandon+0x174>)
 80082e8:	f001 fa1a 	bl	8009720 <tcp_pcb_remove>
 80082ec:	4b27      	ldr	r3, [pc, #156]	; (800838c <tcp_abandon+0x178>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fed6 	bl	80090b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fecd 	bl	80090b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fec4 	bl	80090b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00e      	beq.n	800834c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3304      	adds	r3, #4
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	8b12      	ldrh	r2, [r2, #24]
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800833c:	9201      	str	r2, [sp, #4]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	460b      	mov	r3, r1
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	69b9      	ldr	r1, [r7, #24]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f005 fbb6 	bl	800dab8 <tcp_rst>
    }
    last_state = pcb->state;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7d1b      	ldrb	r3, [r3, #20]
 8008350:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fd34 	bl	8007dc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <tcp_abandon+0x154>
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f06f 010c 	mvn.w	r1, #12
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	4798      	blx	r3
  }
}
 8008368:	3728      	adds	r7, #40	; 0x28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	08018988 	.word	0x08018988
 8008374:	08018acc 	.word	0x08018acc
 8008378:	080189cc 	.word	0x080189cc
 800837c:	08018ae8 	.word	0x08018ae8
 8008380:	2000697c 	.word	0x2000697c
 8008384:	20006978 	.word	0x20006978
 8008388:	2000696c 	.word	0x2000696c
 800838c:	20006968 	.word	0x20006968

08008390 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008398:	2101      	movs	r1, #1
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff ff3a 	bl	8008214 <tcp_abandon>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80083b6:	2304      	movs	r3, #4
 80083b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80083c0:	4b3e      	ldr	r3, [pc, #248]	; (80084bc <tcp_bind+0x114>)
 80083c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <tcp_bind+0x36>
 80083ca:	4b3d      	ldr	r3, [pc, #244]	; (80084c0 <tcp_bind+0x118>)
 80083cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80083d0:	493c      	ldr	r1, [pc, #240]	; (80084c4 <tcp_bind+0x11c>)
 80083d2:	483d      	ldr	r0, [pc, #244]	; (80084c8 <tcp_bind+0x120>)
 80083d4:	f00e fcd6 	bl	8016d84 <iprintf>
 80083d8:	f06f 030f 	mvn.w	r3, #15
 80083dc:	e06a      	b.n	80084b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <tcp_bind+0x52>
 80083e6:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <tcp_bind+0x118>)
 80083e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80083ec:	4937      	ldr	r1, [pc, #220]	; (80084cc <tcp_bind+0x124>)
 80083ee:	4836      	ldr	r0, [pc, #216]	; (80084c8 <tcp_bind+0x120>)
 80083f0:	f00e fcc8 	bl	8016d84 <iprintf>
 80083f4:	f06f 0305 	mvn.w	r3, #5
 80083f8:	e05c      	b.n	80084b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008400:	f000 f9f0 	bl	80087e4 <tcp_new_port>
 8008404:	4603      	mov	r3, r0
 8008406:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d135      	bne.n	800847a <tcp_bind+0xd2>
      return ERR_BUF;
 800840e:	f06f 0301 	mvn.w	r3, #1
 8008412:	e04f      	b.n	80084b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008414:	2300      	movs	r3, #0
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	e02b      	b.n	8008472 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800841a:	4a2d      	ldr	r2, [pc, #180]	; (80084d0 <tcp_bind+0x128>)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	e01e      	b.n	8008466 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	8adb      	ldrh	r3, [r3, #22]
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	429a      	cmp	r2, r3
 8008430:	d116      	bne.n	8008460 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008432:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <tcp_bind+0xb2>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008456:	429a      	cmp	r2, r3
 8008458:	d102      	bne.n	8008460 <tcp_bind+0xb8>
              return ERR_USE;
 800845a:	f06f 0307 	mvn.w	r3, #7
 800845e:	e029      	b.n	80084b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1dd      	bne.n	8008428 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	3301      	adds	r3, #1
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	429a      	cmp	r2, r3
 8008478:	dbcf      	blt.n	800841a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <tcp_bind+0xf2>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <tcp_bind+0xec>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	e000      	b.n	8008496 <tcp_bind+0xee>
 8008494:	2300      	movs	r3, #0
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <tcp_bind+0x12c>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <tcp_bind+0x12c>)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	f005 fcc5 	bl	800de3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	0801aa10 	.word	0x0801aa10
 80084c0:	08018988 	.word	0x08018988
 80084c4:	08018b1c 	.word	0x08018b1c
 80084c8:	080189cc 	.word	0x080189cc
 80084cc:	08018b34 	.word	0x08018b34
 80084d0:	0801a9e8 	.word	0x0801a9e8
 80084d4:	20006978 	.word	0x20006978

080084d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <tcp_accept_null+0x22>
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <tcp_accept_null+0x34>)
 80084ee:	f240 320f 	movw	r2, #783	; 0x30f
 80084f2:	4907      	ldr	r1, [pc, #28]	; (8008510 <tcp_accept_null+0x38>)
 80084f4:	4807      	ldr	r0, [pc, #28]	; (8008514 <tcp_accept_null+0x3c>)
 80084f6:	f00e fc45 	bl	8016d84 <iprintf>

  tcp_abort(pcb);
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f7ff ff48 	bl	8008390 <tcp_abort>

  return ERR_ABRT;
 8008500:	f06f 030c 	mvn.w	r3, #12
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	08018988 	.word	0x08018988
 8008510:	08018b5c 	.word	0x08018b5c
 8008514:	080189cc 	.word	0x080189cc

08008518 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2200      	movs	r2, #0
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f806 	bl	800853c <tcp_listen_with_backlog_and_err>
 8008530:	4603      	mov	r3, r0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b088      	sub	sp, #32
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	460b      	mov	r3, r1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <tcp_listen_with_backlog_and_err+0x2c>
 8008554:	4b47      	ldr	r3, [pc, #284]	; (8008674 <tcp_listen_with_backlog_and_err+0x138>)
 8008556:	f240 3259 	movw	r2, #857	; 0x359
 800855a:	4947      	ldr	r1, [pc, #284]	; (8008678 <tcp_listen_with_backlog_and_err+0x13c>)
 800855c:	4847      	ldr	r0, [pc, #284]	; (800867c <tcp_listen_with_backlog_and_err+0x140>)
 800855e:	f00e fc11 	bl	8016d84 <iprintf>
 8008562:	23f0      	movs	r3, #240	; 0xf0
 8008564:	76fb      	strb	r3, [r7, #27]
 8008566:	e079      	b.n	800865c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <tcp_listen_with_backlog_and_err+0x48>
 8008570:	4b40      	ldr	r3, [pc, #256]	; (8008674 <tcp_listen_with_backlog_and_err+0x138>)
 8008572:	f240 325a 	movw	r2, #858	; 0x35a
 8008576:	4942      	ldr	r1, [pc, #264]	; (8008680 <tcp_listen_with_backlog_and_err+0x144>)
 8008578:	4840      	ldr	r0, [pc, #256]	; (800867c <tcp_listen_with_backlog_and_err+0x140>)
 800857a:	f00e fc03 	bl	8016d84 <iprintf>
 800857e:	23f1      	movs	r3, #241	; 0xf1
 8008580:	76fb      	strb	r3, [r7, #27]
 8008582:	e06b      	b.n	800865c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	7d1b      	ldrb	r3, [r3, #20]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d104      	bne.n	8008596 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008590:	23f7      	movs	r3, #247	; 0xf7
 8008592:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008594:	e062      	b.n	800865c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008596:	2002      	movs	r0, #2
 8008598:	f7fe fb04 	bl	8006ba4 <memp_malloc>
 800859c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80085a4:	23ff      	movs	r3, #255	; 0xff
 80085a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80085a8:	e058      	b.n	800865c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8ada      	ldrh	r2, [r3, #22]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	2201      	movs	r2, #1
 80085be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	7d5a      	ldrb	r2, [r3, #21]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	7a5a      	ldrb	r2, [r3, #9]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2200      	movs	r2, #0
 80085d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7ada      	ldrb	r2, [r3, #11]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7a9a      	ldrb	r2, [r3, #10]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8adb      	ldrh	r3, [r3, #22]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d021      	beq.n	800863a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80085f6:	4b23      	ldr	r3, [pc, #140]	; (8008684 <tcp_listen_with_backlog_and_err+0x148>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d105      	bne.n	800860c <tcp_listen_with_backlog_and_err+0xd0>
 8008600:	4b20      	ldr	r3, [pc, #128]	; (8008684 <tcp_listen_with_backlog_and_err+0x148>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	4a1f      	ldr	r2, [pc, #124]	; (8008684 <tcp_listen_with_backlog_and_err+0x148>)
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e013      	b.n	8008634 <tcp_listen_with_backlog_and_err+0xf8>
 800860c:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <tcp_listen_with_backlog_and_err+0x148>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e00c      	b.n	800862e <tcp_listen_with_backlog_and_err+0xf2>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	429a      	cmp	r2, r3
 800861c:	d104      	bne.n	8008628 <tcp_listen_with_backlog_and_err+0xec>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	e005      	b.n	8008634 <tcp_listen_with_backlog_and_err+0xf8>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1ef      	bne.n	8008614 <tcp_listen_with_backlog_and_err+0xd8>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fbc0 	bl	8007dc0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4a11      	ldr	r2, [pc, #68]	; (8008688 <tcp_listen_with_backlog_and_err+0x14c>)
 8008644:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008646:	4b11      	ldr	r3, [pc, #68]	; (800868c <tcp_listen_with_backlog_and_err+0x150>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	4a0f      	ldr	r2, [pc, #60]	; (800868c <tcp_listen_with_backlog_and_err+0x150>)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	f005 fbf2 	bl	800de3c <tcp_timer_needed>
  res = ERR_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7efa      	ldrb	r2, [r7, #27]
 8008666:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008668:	69fb      	ldr	r3, [r7, #28]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3720      	adds	r7, #32
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	08018988 	.word	0x08018988
 8008678:	08018b7c 	.word	0x08018b7c
 800867c:	080189cc 	.word	0x080189cc
 8008680:	08018bac 	.word	0x08018bac
 8008684:	20006978 	.word	0x20006978
 8008688:	080084d9 	.word	0x080084d9
 800868c:	20006974 	.word	0x20006974

08008690 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <tcp_update_rcv_ann_wnd+0x1c>
 800869e:	4b25      	ldr	r3, [pc, #148]	; (8008734 <tcp_update_rcv_ann_wnd+0xa4>)
 80086a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086a4:	4924      	ldr	r1, [pc, #144]	; (8008738 <tcp_update_rcv_ann_wnd+0xa8>)
 80086a6:	4825      	ldr	r0, [pc, #148]	; (800873c <tcp_update_rcv_ann_wnd+0xac>)
 80086a8:	f00e fb6c 	bl	8016d84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80086b4:	4413      	add	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80086c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80086c4:	bf28      	it	cs
 80086c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80086ca:	b292      	uxth	r2, r2
 80086cc:	4413      	add	r3, r2
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	db08      	blt.n	80086e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	e020      	b.n	800872a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd03      	ble.n	80086fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086fc:	e014      	b.n	8008728 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008710:	d306      	bcc.n	8008720 <tcp_update_rcv_ann_wnd+0x90>
 8008712:	4b08      	ldr	r3, [pc, #32]	; (8008734 <tcp_update_rcv_ann_wnd+0xa4>)
 8008714:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008718:	4909      	ldr	r1, [pc, #36]	; (8008740 <tcp_update_rcv_ann_wnd+0xb0>)
 800871a:	4808      	ldr	r0, [pc, #32]	; (800873c <tcp_update_rcv_ann_wnd+0xac>)
 800871c:	f00e fb32 	bl	8016d84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008728:	2300      	movs	r3, #0
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	08018988 	.word	0x08018988
 8008738:	08018be4 	.word	0x08018be4
 800873c:	080189cc 	.word	0x080189cc
 8008740:	08018c08 	.word	0x08018c08

08008744 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d107      	bne.n	8008766 <tcp_recved+0x22>
 8008756:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <tcp_recved+0x90>)
 8008758:	f240 32cf 	movw	r2, #975	; 0x3cf
 800875c:	491e      	ldr	r1, [pc, #120]	; (80087d8 <tcp_recved+0x94>)
 800875e:	481f      	ldr	r0, [pc, #124]	; (80087dc <tcp_recved+0x98>)
 8008760:	f00e fb10 	bl	8016d84 <iprintf>
 8008764:	e032      	b.n	80087cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7d1b      	ldrb	r3, [r3, #20]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d106      	bne.n	800877c <tcp_recved+0x38>
 800876e:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <tcp_recved+0x90>)
 8008770:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008774:	491a      	ldr	r1, [pc, #104]	; (80087e0 <tcp_recved+0x9c>)
 8008776:	4819      	ldr	r0, [pc, #100]	; (80087dc <tcp_recved+0x98>)
 8008778:	f00e fb04 	bl	8016d84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008780:	887b      	ldrh	r3, [r7, #2]
 8008782:	4413      	add	r3, r2
 8008784:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800878c:	d804      	bhi.n	8008798 <tcp_recved+0x54>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008792:	89fa      	ldrh	r2, [r7, #14]
 8008794:	429a      	cmp	r2, r3
 8008796:	d204      	bcs.n	80087a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800879e:	851a      	strh	r2, [r3, #40]	; 0x28
 80087a0:	e002      	b.n	80087a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	89fa      	ldrh	r2, [r7, #14]
 80087a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ff71 	bl	8008690 <tcp_update_rcv_ann_wnd>
 80087ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80087b6:	d309      	bcc.n	80087cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8b5b      	ldrh	r3, [r3, #26]
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f004 fbc2 	bl	800cf50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	08018988 	.word	0x08018988
 80087d8:	08018c24 	.word	0x08018c24
 80087dc:	080189cc 	.word	0x080189cc
 80087e0:	08018c3c 	.word	0x08018c3c

080087e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80087ee:	4b1e      	ldr	r3, [pc, #120]	; (8008868 <tcp_new_port+0x84>)
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	4b1c      	ldr	r3, [pc, #112]	; (8008868 <tcp_new_port+0x84>)
 80087f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <tcp_new_port+0x84>)
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008802:	4293      	cmp	r3, r2
 8008804:	d103      	bne.n	800880e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008806:	4b18      	ldr	r3, [pc, #96]	; (8008868 <tcp_new_port+0x84>)
 8008808:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800880c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800880e:	2300      	movs	r3, #0
 8008810:	71fb      	strb	r3, [r7, #7]
 8008812:	e01e      	b.n	8008852 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	4a15      	ldr	r2, [pc, #84]	; (800886c <tcp_new_port+0x88>)
 8008818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	e011      	b.n	8008846 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	8ada      	ldrh	r2, [r3, #22]
 8008826:	4b10      	ldr	r3, [pc, #64]	; (8008868 <tcp_new_port+0x84>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d108      	bne.n	8008840 <tcp_new_port+0x5c>
        n++;
 800882e:	88bb      	ldrh	r3, [r7, #4]
 8008830:	3301      	adds	r3, #1
 8008832:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008834:	88bb      	ldrh	r3, [r7, #4]
 8008836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800883a:	d3d8      	bcc.n	80087ee <tcp_new_port+0xa>
          return 0;
 800883c:	2300      	movs	r3, #0
 800883e:	e00d      	b.n	800885c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1ea      	bne.n	8008822 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	3301      	adds	r3, #1
 8008850:	71fb      	strb	r3, [r7, #7]
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	2b03      	cmp	r3, #3
 8008856:	d9dd      	bls.n	8008814 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <tcp_new_port+0x84>)
 800885a:	881b      	ldrh	r3, [r3, #0]
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	2000000a 	.word	0x2000000a
 800886c:	0801a9e8 	.word	0x0801a9e8

08008870 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008870:	b5b0      	push	{r4, r5, r7, lr}
 8008872:	b090      	sub	sp, #64	; 0x40
 8008874:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800887c:	4b94      	ldr	r3, [pc, #592]	; (8008ad0 <tcp_slowtmr+0x260>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	4a93      	ldr	r2, [pc, #588]	; (8008ad0 <tcp_slowtmr+0x260>)
 8008884:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008886:	4b93      	ldr	r3, [pc, #588]	; (8008ad4 <tcp_slowtmr+0x264>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	3301      	adds	r3, #1
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b91      	ldr	r3, [pc, #580]	; (8008ad4 <tcp_slowtmr+0x264>)
 8008890:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008896:	4b90      	ldr	r3, [pc, #576]	; (8008ad8 <tcp_slowtmr+0x268>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800889c:	e29d      	b.n	8008dda <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <tcp_slowtmr+0x44>
 80088a6:	4b8d      	ldr	r3, [pc, #564]	; (8008adc <tcp_slowtmr+0x26c>)
 80088a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80088ac:	498c      	ldr	r1, [pc, #560]	; (8008ae0 <tcp_slowtmr+0x270>)
 80088ae:	488d      	ldr	r0, [pc, #564]	; (8008ae4 <tcp_slowtmr+0x274>)
 80088b0:	f00e fa68 	bl	8016d84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <tcp_slowtmr+0x5a>
 80088bc:	4b87      	ldr	r3, [pc, #540]	; (8008adc <tcp_slowtmr+0x26c>)
 80088be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80088c2:	4989      	ldr	r1, [pc, #548]	; (8008ae8 <tcp_slowtmr+0x278>)
 80088c4:	4887      	ldr	r0, [pc, #540]	; (8008ae4 <tcp_slowtmr+0x274>)
 80088c6:	f00e fa5d 	bl	8016d84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	7d1b      	ldrb	r3, [r3, #20]
 80088ce:	2b0a      	cmp	r3, #10
 80088d0:	d106      	bne.n	80088e0 <tcp_slowtmr+0x70>
 80088d2:	4b82      	ldr	r3, [pc, #520]	; (8008adc <tcp_slowtmr+0x26c>)
 80088d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80088d8:	4984      	ldr	r1, [pc, #528]	; (8008aec <tcp_slowtmr+0x27c>)
 80088da:	4882      	ldr	r0, [pc, #520]	; (8008ae4 <tcp_slowtmr+0x274>)
 80088dc:	f00e fa52 	bl	8016d84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	7f9a      	ldrb	r2, [r3, #30]
 80088e4:	4b7b      	ldr	r3, [pc, #492]	; (8008ad4 <tcp_slowtmr+0x264>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d105      	bne.n	80088f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80088f6:	e270      	b.n	8008dda <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80088f8:	4b76      	ldr	r3, [pc, #472]	; (8008ad4 <tcp_slowtmr+0x264>)
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	7d1b      	ldrb	r3, [r3, #20]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d10a      	bne.n	800892a <tcp_slowtmr+0xba>
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800891a:	2b05      	cmp	r3, #5
 800891c:	d905      	bls.n	800892a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800891e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008922:	3301      	adds	r3, #1
 8008924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008928:	e11e      	b.n	8008b68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008930:	2b0b      	cmp	r3, #11
 8008932:	d905      	bls.n	8008940 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008938:	3301      	adds	r3, #1
 800893a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800893e:	e113      	b.n	8008b68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008946:	2b00      	cmp	r3, #0
 8008948:	d075      	beq.n	8008a36 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <tcp_slowtmr+0xf0>
 8008952:	4b62      	ldr	r3, [pc, #392]	; (8008adc <tcp_slowtmr+0x26c>)
 8008954:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008958:	4965      	ldr	r1, [pc, #404]	; (8008af0 <tcp_slowtmr+0x280>)
 800895a:	4862      	ldr	r0, [pc, #392]	; (8008ae4 <tcp_slowtmr+0x274>)
 800895c:	f00e fa12 	bl	8016d84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <tcp_slowtmr+0x106>
 8008968:	4b5c      	ldr	r3, [pc, #368]	; (8008adc <tcp_slowtmr+0x26c>)
 800896a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800896e:	4961      	ldr	r1, [pc, #388]	; (8008af4 <tcp_slowtmr+0x284>)
 8008970:	485c      	ldr	r0, [pc, #368]	; (8008ae4 <tcp_slowtmr+0x274>)
 8008972:	f00e fa07 	bl	8016d84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800897c:	2b0b      	cmp	r3, #11
 800897e:	d905      	bls.n	800898c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008984:	3301      	adds	r3, #1
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800898a:	e0ed      	b.n	8008b68 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008992:	3b01      	subs	r3, #1
 8008994:	4a58      	ldr	r2, [pc, #352]	; (8008af8 <tcp_slowtmr+0x288>)
 8008996:	5cd3      	ldrb	r3, [r2, r3]
 8008998:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089a0:	7c7a      	ldrb	r2, [r7, #17]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d907      	bls.n	80089b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089ac:	3301      	adds	r3, #1
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089bc:	7c7a      	ldrb	r2, [r7, #17]
 80089be:	429a      	cmp	r2, r3
 80089c0:	f200 80d2 	bhi.w	8008b68 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80089c4:	2301      	movs	r3, #1
 80089c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80089d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089d4:	f005 f964 	bl	800dca0 <tcp_zero_window_probe>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d014      	beq.n	8008a08 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80089de:	2300      	movs	r3, #0
 80089e0:	623b      	str	r3, [r7, #32]
 80089e2:	e011      	b.n	8008a08 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ea:	4619      	mov	r1, r3
 80089ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ee:	f004 f829 	bl	800ca44 <tcp_split_unsent_seg>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80089f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089fa:	f004 faa9 	bl	800cf50 <tcp_output>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80ac 	beq.w	8008b68 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008a1e:	2b06      	cmp	r3, #6
 8008a20:	f200 80a2 	bhi.w	8008b68 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008a34:	e098      	b.n	8008b68 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	db0f      	blt.n	8008a60 <tcp_slowtmr+0x1f0>
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d008      	beq.n	8008a60 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3301      	adds	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	b21a      	sxth	r2, r3
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	db7b      	blt.n	8008b68 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a72:	f004 fd5f 	bl	800d534 <tcp_rexmit_rto_prepare>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <tcp_slowtmr+0x21c>
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d171      	bne.n	8008b68 <tcp_slowtmr+0x2f8>
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d06d      	beq.n	8008b68 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	7d1b      	ldrb	r3, [r3, #20]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d03a      	beq.n	8008b0a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a9a:	2b0c      	cmp	r3, #12
 8008a9c:	bf28      	it	cs
 8008a9e:	230c      	movcs	r3, #12
 8008aa0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008aa8:	10db      	asrs	r3, r3, #3
 8008aaa:	b21b      	sxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ab4:	4413      	add	r3, r2
 8008ab6:	7efa      	ldrb	r2, [r7, #27]
 8008ab8:	4910      	ldr	r1, [pc, #64]	; (8008afc <tcp_slowtmr+0x28c>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
 8008abc:	4093      	lsls	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	dc1a      	bgt.n	8008b00 <tcp_slowtmr+0x290>
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	b21a      	sxth	r2, r3
 8008ace:	e019      	b.n	8008b04 <tcp_slowtmr+0x294>
 8008ad0:	20006970 	.word	0x20006970
 8008ad4:	200000ce 	.word	0x200000ce
 8008ad8:	2000696c 	.word	0x2000696c
 8008adc:	08018988 	.word	0x08018988
 8008ae0:	08018ccc 	.word	0x08018ccc
 8008ae4:	080189cc 	.word	0x080189cc
 8008ae8:	08018cf8 	.word	0x08018cf8
 8008aec:	08018d24 	.word	0x08018d24
 8008af0:	08018d54 	.word	0x08018d54
 8008af4:	08018d88 	.word	0x08018d88
 8008af8:	0801a9e0 	.word	0x0801a9e0
 8008afc:	0801a9d0 	.word	0x0801a9d0
 8008b00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	bf28      	it	cs
 8008b20:	4613      	movcs	r3, r2
 8008b22:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008b24:	8a7b      	ldrh	r3, [r7, #18]
 8008b26:	085b      	lsrs	r3, r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d206      	bcs.n	8008b50 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b64:	f004 fd56 	bl	800d614 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	7d1b      	ldrb	r3, [r3, #20]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d111      	bne.n	8008b94 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	8b5b      	ldrh	r3, [r3, #26]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b7c:	4b9c      	ldr	r3, [pc, #624]	; (8008df0 <tcp_slowtmr+0x580>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b28      	cmp	r3, #40	; 0x28
 8008b88:	d904      	bls.n	8008b94 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	7a5b      	ldrb	r3, [r3, #9]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d04a      	beq.n	8008c36 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d003      	beq.n	8008bb0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	d142      	bne.n	8008c36 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bb0:	4b8f      	ldr	r3, [pc, #572]	; (8008df0 <tcp_slowtmr+0x580>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008bc0:	4b8c      	ldr	r3, [pc, #560]	; (8008df4 <tcp_slowtmr+0x584>)
 8008bc2:	440b      	add	r3, r1
 8008bc4:	498c      	ldr	r1, [pc, #560]	; (8008df8 <tcp_slowtmr+0x588>)
 8008bc6:	fba1 1303 	umull	r1, r3, r1, r3
 8008bca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d90a      	bls.n	8008be6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bde:	3301      	adds	r3, #1
 8008be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008be4:	e027      	b.n	8008c36 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008be6:	4b82      	ldr	r3, [pc, #520]	; (8008df0 <tcp_slowtmr+0x580>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4b7f      	ldr	r3, [pc, #508]	; (8008dfc <tcp_slowtmr+0x58c>)
 8008c00:	fb03 f300 	mul.w	r3, r3, r0
 8008c04:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008c06:	497c      	ldr	r1, [pc, #496]	; (8008df8 <tcp_slowtmr+0x588>)
 8008c08:	fba1 1303 	umull	r1, r3, r1, r3
 8008c0c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d911      	bls.n	8008c36 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c14:	f005 f804 	bl	800dc20 <tcp_keepalive>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008c1e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d107      	bne.n	8008c36 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d011      	beq.n	8008c62 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c3e:	4b6c      	ldr	r3, [pc, #432]	; (8008df0 <tcp_slowtmr+0x580>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c4e:	4619      	mov	r1, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	440b      	add	r3, r1
 8008c56:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c5e:	f000 fec3 	bl	80099e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	7d1b      	ldrb	r3, [r3, #20]
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d10b      	bne.n	8008c82 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c6a:	4b61      	ldr	r3, [pc, #388]	; (8008df0 <tcp_slowtmr+0x580>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b28      	cmp	r3, #40	; 0x28
 8008c76:	d904      	bls.n	8008c82 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	7d1b      	ldrb	r3, [r3, #20]
 8008c86:	2b09      	cmp	r3, #9
 8008c88:	d10b      	bne.n	8008ca2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c8a:	4b59      	ldr	r3, [pc, #356]	; (8008df0 <tcp_slowtmr+0x580>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2bf0      	cmp	r3, #240	; 0xf0
 8008c96:	d904      	bls.n	8008ca2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d060      	beq.n	8008d6c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cb4:	f000 fce4 	bl	8009680 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d010      	beq.n	8008ce0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008cbe:	4b50      	ldr	r3, [pc, #320]	; (8008e00 <tcp_slowtmr+0x590>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d106      	bne.n	8008cd6 <tcp_slowtmr+0x466>
 8008cc8:	4b4e      	ldr	r3, [pc, #312]	; (8008e04 <tcp_slowtmr+0x594>)
 8008cca:	f240 526d 	movw	r2, #1389	; 0x56d
 8008cce:	494e      	ldr	r1, [pc, #312]	; (8008e08 <tcp_slowtmr+0x598>)
 8008cd0:	484e      	ldr	r0, [pc, #312]	; (8008e0c <tcp_slowtmr+0x59c>)
 8008cd2:	f00e f857 	bl	8016d84 <iprintf>
        prev->next = pcb->next;
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	60da      	str	r2, [r3, #12]
 8008cde:	e00f      	b.n	8008d00 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008ce0:	4b47      	ldr	r3, [pc, #284]	; (8008e00 <tcp_slowtmr+0x590>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d006      	beq.n	8008cf8 <tcp_slowtmr+0x488>
 8008cea:	4b46      	ldr	r3, [pc, #280]	; (8008e04 <tcp_slowtmr+0x594>)
 8008cec:	f240 5271 	movw	r2, #1393	; 0x571
 8008cf0:	4947      	ldr	r1, [pc, #284]	; (8008e10 <tcp_slowtmr+0x5a0>)
 8008cf2:	4846      	ldr	r0, [pc, #280]	; (8008e0c <tcp_slowtmr+0x59c>)
 8008cf4:	f00e f846 	bl	8016d84 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	4a40      	ldr	r2, [pc, #256]	; (8008e00 <tcp_slowtmr+0x590>)
 8008cfe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d013      	beq.n	8008d30 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d10:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	3304      	adds	r3, #4
 8008d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d18:	8ad2      	ldrh	r2, [r2, #22]
 8008d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d1c:	8b09      	ldrh	r1, [r1, #24]
 8008d1e:	9102      	str	r1, [sp, #8]
 8008d20:	9201      	str	r2, [sp, #4]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462b      	mov	r3, r5
 8008d26:	4622      	mov	r2, r4
 8008d28:	4601      	mov	r1, r0
 8008d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d2c:	f004 fec4 	bl	800dab8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	7d1b      	ldrb	r3, [r3, #20]
 8008d3a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008d46:	6838      	ldr	r0, [r7, #0]
 8008d48:	f7ff f83a 	bl	8007dc0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008d4c:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <tcp_slowtmr+0x5a4>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <tcp_slowtmr+0x4f2>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f06f 010c 	mvn.w	r1, #12
 8008d5e:	68b8      	ldr	r0, [r7, #8]
 8008d60:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d62:	4b2c      	ldr	r3, [pc, #176]	; (8008e14 <tcp_slowtmr+0x5a4>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d037      	beq.n	8008dda <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008d6a:	e592      	b.n	8008892 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	7f1b      	ldrb	r3, [r3, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	7f1a      	ldrb	r2, [r3, #28]
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	7f5b      	ldrb	r3, [r3, #29]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d325      	bcc.n	8008dda <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2200      	movs	r2, #0
 8008d92:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <tcp_slowtmr+0x5a4>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <tcp_slowtmr+0x54c>
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dac:	6912      	ldr	r2, [r2, #16]
 8008dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008dba:	e002      	b.n	8008dc2 <tcp_slowtmr+0x552>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <tcp_slowtmr+0x5a4>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d000      	beq.n	8008dcc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008dca:	e562      	b.n	8008892 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008dcc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f004 f8bb 	bl	800cf50 <tcp_output>
  while (pcb != NULL) {
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f47f ad5e 	bne.w	800889e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008de6:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <tcp_slowtmr+0x5a8>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008dec:	e069      	b.n	8008ec2 <tcp_slowtmr+0x652>
 8008dee:	bf00      	nop
 8008df0:	20006970 	.word	0x20006970
 8008df4:	000a4cb8 	.word	0x000a4cb8
 8008df8:	10624dd3 	.word	0x10624dd3
 8008dfc:	000124f8 	.word	0x000124f8
 8008e00:	2000696c 	.word	0x2000696c
 8008e04:	08018988 	.word	0x08018988
 8008e08:	08018dc0 	.word	0x08018dc0
 8008e0c:	080189cc 	.word	0x080189cc
 8008e10:	08018dec 	.word	0x08018dec
 8008e14:	20006968 	.word	0x20006968
 8008e18:	2000697c 	.word	0x2000697c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	7d1b      	ldrb	r3, [r3, #20]
 8008e20:	2b0a      	cmp	r3, #10
 8008e22:	d006      	beq.n	8008e32 <tcp_slowtmr+0x5c2>
 8008e24:	4b2b      	ldr	r3, [pc, #172]	; (8008ed4 <tcp_slowtmr+0x664>)
 8008e26:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008e2a:	492b      	ldr	r1, [pc, #172]	; (8008ed8 <tcp_slowtmr+0x668>)
 8008e2c:	482b      	ldr	r0, [pc, #172]	; (8008edc <tcp_slowtmr+0x66c>)
 8008e2e:	f00d ffa9 	bl	8016d84 <iprintf>
    pcb_remove = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e38:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <tcp_slowtmr+0x670>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2bf0      	cmp	r3, #240	; 0xf0
 8008e44:	d904      	bls.n	8008e50 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d02f      	beq.n	8008eb8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5a:	f000 fc11 	bl	8009680 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d010      	beq.n	8008e86 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e64:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <tcp_slowtmr+0x674>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d106      	bne.n	8008e7c <tcp_slowtmr+0x60c>
 8008e6e:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <tcp_slowtmr+0x664>)
 8008e70:	f240 52af 	movw	r2, #1455	; 0x5af
 8008e74:	491c      	ldr	r1, [pc, #112]	; (8008ee8 <tcp_slowtmr+0x678>)
 8008e76:	4819      	ldr	r0, [pc, #100]	; (8008edc <tcp_slowtmr+0x66c>)
 8008e78:	f00d ff84 	bl	8016d84 <iprintf>
        prev->next = pcb->next;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	e00f      	b.n	8008ea6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <tcp_slowtmr+0x674>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d006      	beq.n	8008e9e <tcp_slowtmr+0x62e>
 8008e90:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <tcp_slowtmr+0x664>)
 8008e92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e96:	4915      	ldr	r1, [pc, #84]	; (8008eec <tcp_slowtmr+0x67c>)
 8008e98:	4810      	ldr	r0, [pc, #64]	; (8008edc <tcp_slowtmr+0x66c>)
 8008e9a:	f00d ff73 	bl	8016d84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <tcp_slowtmr+0x674>)
 8008ea4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008eb0:	69f8      	ldr	r0, [r7, #28]
 8008eb2:	f7fe ff85 	bl	8007dc0 <tcp_free>
 8008eb6:	e004      	b.n	8008ec2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1a9      	bne.n	8008e1c <tcp_slowtmr+0x5ac>
    }
  }
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	3730      	adds	r7, #48	; 0x30
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	08018988 	.word	0x08018988
 8008ed8:	08018e18 	.word	0x08018e18
 8008edc:	080189cc 	.word	0x080189cc
 8008ee0:	20006970 	.word	0x20006970
 8008ee4:	2000697c 	.word	0x2000697c
 8008ee8:	08018e48 	.word	0x08018e48
 8008eec:	08018e70 	.word	0x08018e70

08008ef0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <tcp_fasttmr+0xbc>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	4b2b      	ldr	r3, [pc, #172]	; (8008fac <tcp_fasttmr+0xbc>)
 8008f00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008f02:	4b2b      	ldr	r3, [pc, #172]	; (8008fb0 <tcp_fasttmr+0xc0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008f08:	e048      	b.n	8008f9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7f9a      	ldrb	r2, [r3, #30]
 8008f0e:	4b27      	ldr	r3, [pc, #156]	; (8008fac <tcp_fasttmr+0xbc>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d03f      	beq.n	8008f96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008f16:	4b25      	ldr	r3, [pc, #148]	; (8008fac <tcp_fasttmr+0xbc>)
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8b5b      	ldrh	r3, [r3, #26]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	8b5b      	ldrh	r3, [r3, #26]
 8008f2e:	f043 0302 	orr.w	r3, r3, #2
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f004 f809 	bl	800cf50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8b5b      	ldrh	r3, [r3, #26]
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8b5b      	ldrh	r3, [r3, #26]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8b5b      	ldrh	r3, [r3, #26]
 8008f5c:	f023 0308 	bic.w	r3, r3, #8
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff f8be 	bl	80080e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <tcp_fasttmr+0xc4>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f819 	bl	8008fb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <tcp_fasttmr+0xc4>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d000      	beq.n	8008f90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f8e:	e7b8      	b.n	8008f02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e002      	b.n	8008f9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1b3      	bne.n	8008f0a <tcp_fasttmr+0x1a>
    }
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200000ce 	.word	0x200000ce
 8008fb0:	2000696c 	.word	0x2000696c
 8008fb4:	20006968 	.word	0x20006968

08008fb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <tcp_process_refused_data+0x22>
 8008fc6:	4b37      	ldr	r3, [pc, #220]	; (80090a4 <tcp_process_refused_data+0xec>)
 8008fc8:	f240 6209 	movw	r2, #1545	; 0x609
 8008fcc:	4936      	ldr	r1, [pc, #216]	; (80090a8 <tcp_process_refused_data+0xf0>)
 8008fce:	4837      	ldr	r0, [pc, #220]	; (80090ac <tcp_process_refused_data+0xf4>)
 8008fd0:	f00d fed8 	bl	8016d84 <iprintf>
 8008fd4:	f06f 030f 	mvn.w	r3, #15
 8008fd8:	e060      	b.n	800909c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fde:	7b5b      	ldrb	r3, [r3, #13]
 8008fe0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <tcp_process_refused_data+0x58>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6918      	ldr	r0, [r3, #16]
 8009002:	2300      	movs	r3, #0
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	47a0      	blx	r4
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
 800900e:	e007      	b.n	8009020 <tcp_process_refused_data+0x68>
 8009010:	2300      	movs	r3, #0
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	2000      	movs	r0, #0
 8009018:	f000 f8c2 	bl	80091a0 <tcp_recv_null>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d12a      	bne.n	800907e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d033      	beq.n	800909a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009036:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800903a:	d005      	beq.n	8009048 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009040:	3301      	adds	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <tcp_process_refused_data+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6918      	ldr	r0, [r3, #16]
 800905c:	2300      	movs	r3, #0
 800905e:	2200      	movs	r2, #0
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	47a0      	blx	r4
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e001      	b.n	800906e <tcp_process_refused_data+0xb6>
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800906e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009072:	f113 0f0d 	cmn.w	r3, #13
 8009076:	d110      	bne.n	800909a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009078:	f06f 030c 	mvn.w	r3, #12
 800907c:	e00e      	b.n	800909c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800907e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009082:	f113 0f0d 	cmn.w	r3, #13
 8009086:	d102      	bne.n	800908e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009088:	f06f 030c 	mvn.w	r3, #12
 800908c:	e006      	b.n	800909c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009094:	f06f 0304 	mvn.w	r3, #4
 8009098:	e000      	b.n	800909c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd90      	pop	{r4, r7, pc}
 80090a4:	08018988 	.word	0x08018988
 80090a8:	08018e98 	.word	0x08018e98
 80090ac:	080189cc 	.word	0x080189cc

080090b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80090b8:	e007      	b.n	80090ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f80a 	bl	80090da <tcp_seg_free>
    seg = next;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f4      	bne.n	80090ba <tcp_segs_free+0xa>
  }
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00c      	beq.n	8009102 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d004      	beq.n	80090fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fbb3 	bl	8007860 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	2003      	movs	r0, #3
 80090fe:	f7fd fd9d 	bl	8006c3c <memp_free>
  }
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d107      	bne.n	800912e <tcp_setprio+0x22>
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <tcp_setprio+0x30>)
 8009120:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009124:	4906      	ldr	r1, [pc, #24]	; (8009140 <tcp_setprio+0x34>)
 8009126:	4807      	ldr	r0, [pc, #28]	; (8009144 <tcp_setprio+0x38>)
 8009128:	f00d fe2c 	bl	8016d84 <iprintf>
 800912c:	e002      	b.n	8009134 <tcp_setprio+0x28>

  pcb->prio = prio;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	755a      	strb	r2, [r3, #21]
}
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	08018988 	.word	0x08018988
 8009140:	08018ec0 	.word	0x08018ec0
 8009144:	080189cc 	.word	0x080189cc

08009148 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <tcp_seg_copy+0x1c>
 8009156:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <tcp_seg_copy+0x4c>)
 8009158:	f240 6282 	movw	r2, #1666	; 0x682
 800915c:	490e      	ldr	r1, [pc, #56]	; (8009198 <tcp_seg_copy+0x50>)
 800915e:	480f      	ldr	r0, [pc, #60]	; (800919c <tcp_seg_copy+0x54>)
 8009160:	f00d fe10 	bl	8016d84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009164:	2003      	movs	r0, #3
 8009166:	f7fd fd1d 	bl	8006ba4 <memp_malloc>
 800916a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <tcp_seg_copy+0x2e>
    return NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	e00a      	b.n	800918c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009176:	2210      	movs	r2, #16
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f00d fdec 	bl	8016d58 <memcpy>
  pbuf_ref(cseg->p);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fc0b 	bl	80079a0 <pbuf_ref>
  return cseg;
 800918a:	68fb      	ldr	r3, [r7, #12]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	08018988 	.word	0x08018988
 8009198:	08018edc 	.word	0x08018edc
 800919c:	080189cc 	.word	0x080189cc

080091a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d109      	bne.n	80091c8 <tcp_recv_null+0x28>
 80091b4:	4b12      	ldr	r3, [pc, #72]	; (8009200 <tcp_recv_null+0x60>)
 80091b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80091ba:	4912      	ldr	r1, [pc, #72]	; (8009204 <tcp_recv_null+0x64>)
 80091bc:	4812      	ldr	r0, [pc, #72]	; (8009208 <tcp_recv_null+0x68>)
 80091be:	f00d fde1 	bl	8016d84 <iprintf>
 80091c2:	f06f 030f 	mvn.w	r3, #15
 80091c6:	e016      	b.n	80091f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	891b      	ldrh	r3, [r3, #8]
 80091d2:	4619      	mov	r1, r3
 80091d4:	68b8      	ldr	r0, [r7, #8]
 80091d6:	f7ff fab5 	bl	8008744 <tcp_recved>
    pbuf_free(p);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7fe fb40 	bl	8007860 <pbuf_free>
 80091e0:	e008      	b.n	80091f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80091e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80091ea:	68b8      	ldr	r0, [r7, #8]
 80091ec:	f7fe ffe6 	bl	80081bc <tcp_close>
 80091f0:	4603      	mov	r3, r0
 80091f2:	e000      	b.n	80091f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	08018988 	.word	0x08018988
 8009204:	08018ef8 	.word	0x08018ef8
 8009208:	080189cc 	.word	0x080189cc

0800920c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db01      	blt.n	8009222 <tcp_kill_prio+0x16>
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	e000      	b.n	8009224 <tcp_kill_prio+0x18>
 8009222:	237f      	movs	r3, #127	; 0x7f
 8009224:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d034      	beq.n	8009296 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3b01      	subs	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800923a:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <tcp_kill_prio+0x94>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e01f      	b.n	8009282 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	7d5b      	ldrb	r3, [r3, #21]
 8009246:	7afa      	ldrb	r2, [r7, #11]
 8009248:	429a      	cmp	r2, r3
 800924a:	d80c      	bhi.n	8009266 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009250:	7afa      	ldrb	r2, [r7, #11]
 8009252:	429a      	cmp	r2, r3
 8009254:	d112      	bne.n	800927c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009256:	4b13      	ldr	r3, [pc, #76]	; (80092a4 <tcp_kill_prio+0x98>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	429a      	cmp	r2, r3
 8009264:	d80a      	bhi.n	800927c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <tcp_kill_prio+0x98>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	7d5b      	ldrb	r3, [r3, #21]
 800927a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1dc      	bne.n	8009242 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800928e:	6938      	ldr	r0, [r7, #16]
 8009290:	f7ff f87e 	bl	8008390 <tcp_abort>
 8009294:	e000      	b.n	8009298 <tcp_kill_prio+0x8c>
    return;
 8009296:	bf00      	nop
  }
}
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	2000696c 	.word	0x2000696c
 80092a4:	20006970 	.word	0x20006970

080092a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d009      	beq.n	80092cc <tcp_kill_state+0x24>
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b09      	cmp	r3, #9
 80092bc:	d006      	beq.n	80092cc <tcp_kill_state+0x24>
 80092be:	4b1a      	ldr	r3, [pc, #104]	; (8009328 <tcp_kill_state+0x80>)
 80092c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80092c4:	4919      	ldr	r1, [pc, #100]	; (800932c <tcp_kill_state+0x84>)
 80092c6:	481a      	ldr	r0, [pc, #104]	; (8009330 <tcp_kill_state+0x88>)
 80092c8:	f00d fd5c 	bl	8016d84 <iprintf>

  inactivity = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <tcp_kill_state+0x8c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e017      	b.n	800930c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	7d1b      	ldrb	r3, [r3, #20]
 80092e0:	79fa      	ldrb	r2, [r7, #7]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d10f      	bne.n	8009306 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <tcp_kill_state+0x90>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d807      	bhi.n	8009306 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <tcp_kill_state+0x90>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e4      	bne.n	80092dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009318:	2100      	movs	r1, #0
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f7fe ff7a 	bl	8008214 <tcp_abandon>
  }
}
 8009320:	bf00      	nop
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	08018988 	.word	0x08018988
 800932c:	08018f14 	.word	0x08018f14
 8009330:	080189cc 	.word	0x080189cc
 8009334:	2000696c 	.word	0x2000696c
 8009338:	20006970 	.word	0x20006970

0800933c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800934a:	4b12      	ldr	r3, [pc, #72]	; (8009394 <tcp_kill_timewait+0x58>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e012      	b.n	8009378 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009352:	4b11      	ldr	r3, [pc, #68]	; (8009398 <tcp_kill_timewait+0x5c>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d807      	bhi.n	8009372 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009362:	4b0d      	ldr	r3, [pc, #52]	; (8009398 <tcp_kill_timewait+0x5c>)
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e9      	bne.n	8009352 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009384:	68b8      	ldr	r0, [r7, #8]
 8009386:	f7ff f803 	bl	8008390 <tcp_abort>
  }
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000697c 	.word	0x2000697c
 8009398:	20006970 	.word	0x20006970

0800939c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <tcp_handle_closepend+0x48>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093a8:	e014      	b.n	80093d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8b5b      	ldrh	r3, [r3, #26]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8b5b      	ldrh	r3, [r3, #26]
 80093c0:	f023 0308 	bic.w	r3, r3, #8
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7fe fe8c 	bl	80080e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e7      	bne.n	80093aa <tcp_handle_closepend+0xe>
  }
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000696c 	.word	0x2000696c

080093e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093f2:	2001      	movs	r0, #1
 80093f4:	f7fd fbd6 	bl	8006ba4 <memp_malloc>
 80093f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d126      	bne.n	800944e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009400:	f7ff ffcc 	bl	800939c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009404:	f7ff ff9a 	bl	800933c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009408:	2001      	movs	r0, #1
 800940a:	f7fd fbcb 	bl	8006ba4 <memp_malloc>
 800940e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d11b      	bne.n	800944e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009416:	2009      	movs	r0, #9
 8009418:	f7ff ff46 	bl	80092a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800941c:	2001      	movs	r0, #1
 800941e:	f7fd fbc1 	bl	8006ba4 <memp_malloc>
 8009422:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d111      	bne.n	800944e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800942a:	2008      	movs	r0, #8
 800942c:	f7ff ff3c 	bl	80092a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009430:	2001      	movs	r0, #1
 8009432:	f7fd fbb7 	bl	8006ba4 <memp_malloc>
 8009436:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d107      	bne.n	800944e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff fee3 	bl	800920c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009446:	2001      	movs	r0, #1
 8009448:	f7fd fbac 	bl	8006ba4 <memp_malloc>
 800944c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d03f      	beq.n	80094d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009454:	229c      	movs	r2, #156	; 0x9c
 8009456:	2100      	movs	r1, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f00d fc8b 	bl	8016d74 <memset>
    pcb->prio = prio;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	79fa      	ldrb	r2, [r7, #7]
 8009462:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800946a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	22ff      	movs	r2, #255	; 0xff
 8009482:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f44f 7206 	mov.w	r2, #536	; 0x218
 800948a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2206      	movs	r2, #6
 8009490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2206      	movs	r2, #6
 8009498:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <tcp_alloc+0xf8>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80094b2:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <tcp_alloc+0xfc>)
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80094c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a08      	ldr	r2, [pc, #32]	; (80094e8 <tcp_alloc+0x100>)
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a07      	ldr	r2, [pc, #28]	; (80094ec <tcp_alloc+0x104>)
 80094d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20006970 	.word	0x20006970
 80094e4:	200000ce 	.word	0x200000ce
 80094e8:	080091a1 	.word	0x080091a1
 80094ec:	006ddd00 	.word	0x006ddd00

080094f0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80094f4:	2040      	movs	r0, #64	; 0x40
 80094f6:	f7ff ff77 	bl	80093e8 <tcp_alloc>
 80094fa:	4603      	mov	r3, r0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	bd80      	pop	{r7, pc}

08009500 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	611a      	str	r2, [r3, #16]
  }
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00e      	beq.n	8009552 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7d1b      	ldrb	r3, [r3, #20]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d106      	bne.n	800954a <tcp_recv+0x26>
 800953c:	4b07      	ldr	r3, [pc, #28]	; (800955c <tcp_recv+0x38>)
 800953e:	f240 72df 	movw	r2, #2015	; 0x7df
 8009542:	4907      	ldr	r1, [pc, #28]	; (8009560 <tcp_recv+0x3c>)
 8009544:	4807      	ldr	r0, [pc, #28]	; (8009564 <tcp_recv+0x40>)
 8009546:	f00d fc1d 	bl	8016d84 <iprintf>
    pcb->recv = recv;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	08018988 	.word	0x08018988
 8009560:	08018f24 	.word	0x08018f24
 8009564:	080189cc 	.word	0x080189cc

08009568 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00e      	beq.n	8009596 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7d1b      	ldrb	r3, [r3, #20]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d106      	bne.n	800958e <tcp_sent+0x26>
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <tcp_sent+0x38>)
 8009582:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009586:	4907      	ldr	r1, [pc, #28]	; (80095a4 <tcp_sent+0x3c>)
 8009588:	4807      	ldr	r0, [pc, #28]	; (80095a8 <tcp_sent+0x40>)
 800958a:	f00d fbfb 	bl	8016d84 <iprintf>
    pcb->sent = sent;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	08018988 	.word	0x08018988
 80095a4:	08018f4c 	.word	0x08018f4c
 80095a8:	080189cc 	.word	0x080189cc

080095ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00e      	beq.n	80095da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7d1b      	ldrb	r3, [r3, #20]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d106      	bne.n	80095d2 <tcp_err+0x26>
 80095c4:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <tcp_err+0x38>)
 80095c6:	f640 020d 	movw	r2, #2061	; 0x80d
 80095ca:	4907      	ldr	r1, [pc, #28]	; (80095e8 <tcp_err+0x3c>)
 80095cc:	4807      	ldr	r0, [pc, #28]	; (80095ec <tcp_err+0x40>)
 80095ce:	f00d fbd9 	bl	8016d84 <iprintf>
    pcb->errf = err;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	08018988 	.word	0x08018988
 80095e8:	08018f74 	.word	0x08018f74
 80095ec:	080189cc 	.word	0x080189cc

080095f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <tcp_accept+0x22>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	7d1b      	ldrb	r3, [r3, #20]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d104      	bne.n	8009612 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	619a      	str	r2, [r3, #24]
  }
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
	...

08009620 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d107      	bne.n	8009644 <tcp_poll+0x24>
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <tcp_poll+0x50>)
 8009636:	f640 023d 	movw	r2, #2109	; 0x83d
 800963a:	490e      	ldr	r1, [pc, #56]	; (8009674 <tcp_poll+0x54>)
 800963c:	480e      	ldr	r0, [pc, #56]	; (8009678 <tcp_poll+0x58>)
 800963e:	f00d fba1 	bl	8016d84 <iprintf>
 8009642:	e011      	b.n	8009668 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	7d1b      	ldrb	r3, [r3, #20]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d106      	bne.n	800965a <tcp_poll+0x3a>
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <tcp_poll+0x50>)
 800964e:	f640 023e 	movw	r2, #2110	; 0x83e
 8009652:	490a      	ldr	r1, [pc, #40]	; (800967c <tcp_poll+0x5c>)
 8009654:	4808      	ldr	r0, [pc, #32]	; (8009678 <tcp_poll+0x58>)
 8009656:	f00d fb95 	bl	8016d84 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	79fa      	ldrb	r2, [r7, #7]
 8009666:	775a      	strb	r2, [r3, #29]
}
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	08018988 	.word	0x08018988
 8009674:	08018f9c 	.word	0x08018f9c
 8009678:	080189cc 	.word	0x080189cc
 800967c:	08018fb4 	.word	0x08018fb4

08009680 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d107      	bne.n	800969e <tcp_pcb_purge+0x1e>
 800968e:	4b21      	ldr	r3, [pc, #132]	; (8009714 <tcp_pcb_purge+0x94>)
 8009690:	f640 0251 	movw	r2, #2129	; 0x851
 8009694:	4920      	ldr	r1, [pc, #128]	; (8009718 <tcp_pcb_purge+0x98>)
 8009696:	4821      	ldr	r0, [pc, #132]	; (800971c <tcp_pcb_purge+0x9c>)
 8009698:	f00d fb74 	bl	8016d84 <iprintf>
 800969c:	e037      	b.n	800970e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7d1b      	ldrb	r3, [r3, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d033      	beq.n	800970e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80096aa:	2b0a      	cmp	r3, #10
 80096ac:	d02f      	beq.n	800970e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d02b      	beq.n	800970e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d007      	beq.n	80096ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe f8cc 	bl	8007860 <pbuf_free>
      pcb->refused_data = NULL;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f986 	bl	80099e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fce1 	bl	80090b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fcdc 	bl	80090b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	08018988 	.word	0x08018988
 8009718:	08018fd4 	.word	0x08018fd4
 800971c:	080189cc 	.word	0x080189cc

08009720 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <tcp_pcb_remove+0x1e>
 8009730:	4b3e      	ldr	r3, [pc, #248]	; (800982c <tcp_pcb_remove+0x10c>)
 8009732:	f640 0283 	movw	r2, #2179	; 0x883
 8009736:	493e      	ldr	r1, [pc, #248]	; (8009830 <tcp_pcb_remove+0x110>)
 8009738:	483e      	ldr	r0, [pc, #248]	; (8009834 <tcp_pcb_remove+0x114>)
 800973a:	f00d fb23 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <tcp_pcb_remove+0x32>
 8009744:	4b39      	ldr	r3, [pc, #228]	; (800982c <tcp_pcb_remove+0x10c>)
 8009746:	f640 0284 	movw	r2, #2180	; 0x884
 800974a:	493b      	ldr	r1, [pc, #236]	; (8009838 <tcp_pcb_remove+0x118>)
 800974c:	4839      	ldr	r0, [pc, #228]	; (8009834 <tcp_pcb_remove+0x114>)
 800974e:	f00d fb19 	bl	8016d84 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d105      	bne.n	8009768 <tcp_pcb_remove+0x48>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e013      	b.n	8009790 <tcp_pcb_remove+0x70>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e00c      	b.n	800978a <tcp_pcb_remove+0x6a>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d104      	bne.n	8009784 <tcp_pcb_remove+0x64>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	60da      	str	r2, [r3, #12]
 8009782:	e005      	b.n	8009790 <tcp_pcb_remove+0x70>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1ef      	bne.n	8009770 <tcp_pcb_remove+0x50>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009796:	6838      	ldr	r0, [r7, #0]
 8009798:	f7ff ff72 	bl	8009680 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	7d1b      	ldrb	r3, [r3, #20]
 80097a0:	2b0a      	cmp	r3, #10
 80097a2:	d013      	beq.n	80097cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d00f      	beq.n	80097cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	8b5b      	ldrh	r3, [r3, #26]
 80097b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d009      	beq.n	80097cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	8b5b      	ldrh	r3, [r3, #26]
 80097bc:	f043 0302 	orr.w	r3, r3, #2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80097c6:	6838      	ldr	r0, [r7, #0]
 80097c8:	f003 fbc2 	bl	800cf50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	7d1b      	ldrb	r3, [r3, #20]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d020      	beq.n	8009816 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <tcp_pcb_remove+0xca>
 80097dc:	4b13      	ldr	r3, [pc, #76]	; (800982c <tcp_pcb_remove+0x10c>)
 80097de:	f640 0293 	movw	r2, #2195	; 0x893
 80097e2:	4916      	ldr	r1, [pc, #88]	; (800983c <tcp_pcb_remove+0x11c>)
 80097e4:	4813      	ldr	r0, [pc, #76]	; (8009834 <tcp_pcb_remove+0x114>)
 80097e6:	f00d facd 	bl	8016d84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d006      	beq.n	8009800 <tcp_pcb_remove+0xe0>
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <tcp_pcb_remove+0x10c>)
 80097f4:	f640 0294 	movw	r2, #2196	; 0x894
 80097f8:	4911      	ldr	r1, [pc, #68]	; (8009840 <tcp_pcb_remove+0x120>)
 80097fa:	480e      	ldr	r0, [pc, #56]	; (8009834 <tcp_pcb_remove+0x114>)
 80097fc:	f00d fac2 	bl	8016d84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009804:	2b00      	cmp	r3, #0
 8009806:	d006      	beq.n	8009816 <tcp_pcb_remove+0xf6>
 8009808:	4b08      	ldr	r3, [pc, #32]	; (800982c <tcp_pcb_remove+0x10c>)
 800980a:	f640 0296 	movw	r2, #2198	; 0x896
 800980e:	490d      	ldr	r1, [pc, #52]	; (8009844 <tcp_pcb_remove+0x124>)
 8009810:	4808      	ldr	r0, [pc, #32]	; (8009834 <tcp_pcb_remove+0x114>)
 8009812:	f00d fab7 	bl	8016d84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2200      	movs	r2, #0
 8009820:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	08018988 	.word	0x08018988
 8009830:	08018ff0 	.word	0x08018ff0
 8009834:	080189cc 	.word	0x080189cc
 8009838:	0801900c 	.word	0x0801900c
 800983c:	0801902c 	.word	0x0801902c
 8009840:	08019044 	.word	0x08019044
 8009844:	08019060 	.word	0x08019060

08009848 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <tcp_next_iss+0x1c>
 8009856:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <tcp_next_iss+0x38>)
 8009858:	f640 02af 	movw	r2, #2223	; 0x8af
 800985c:	4909      	ldr	r1, [pc, #36]	; (8009884 <tcp_next_iss+0x3c>)
 800985e:	480a      	ldr	r0, [pc, #40]	; (8009888 <tcp_next_iss+0x40>)
 8009860:	f00d fa90 	bl	8016d84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009864:	4b09      	ldr	r3, [pc, #36]	; (800988c <tcp_next_iss+0x44>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <tcp_next_iss+0x48>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4413      	add	r3, r2
 800986e:	4a07      	ldr	r2, [pc, #28]	; (800988c <tcp_next_iss+0x44>)
 8009870:	6013      	str	r3, [r2, #0]
  return iss;
 8009872:	4b06      	ldr	r3, [pc, #24]	; (800988c <tcp_next_iss+0x44>)
 8009874:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	08018988 	.word	0x08018988
 8009884:	08019078 	.word	0x08019078
 8009888:	080189cc 	.word	0x080189cc
 800988c:	2000000c 	.word	0x2000000c
 8009890:	20006970 	.word	0x20006970

08009894 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <tcp_eff_send_mss_netif+0x22>
 80098a8:	4b14      	ldr	r3, [pc, #80]	; (80098fc <tcp_eff_send_mss_netif+0x68>)
 80098aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80098ae:	4914      	ldr	r1, [pc, #80]	; (8009900 <tcp_eff_send_mss_netif+0x6c>)
 80098b0:	4814      	ldr	r0, [pc, #80]	; (8009904 <tcp_eff_send_mss_netif+0x70>)
 80098b2:	f00d fa67 	bl	8016d84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	e019      	b.n	80098f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80098c6:	8afb      	ldrh	r3, [r7, #22]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d012      	beq.n	80098f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80098cc:	2328      	movs	r3, #40	; 0x28
 80098ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80098d0:	8afa      	ldrh	r2, [r7, #22]
 80098d2:	8abb      	ldrh	r3, [r7, #20]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d904      	bls.n	80098e2 <tcp_eff_send_mss_netif+0x4e>
 80098d8:	8afa      	ldrh	r2, [r7, #22]
 80098da:	8abb      	ldrh	r3, [r7, #20]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	b29b      	uxth	r3, r3
 80098e0:	e000      	b.n	80098e4 <tcp_eff_send_mss_netif+0x50>
 80098e2:	2300      	movs	r3, #0
 80098e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80098e6:	8a7a      	ldrh	r2, [r7, #18]
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	4293      	cmp	r3, r2
 80098ec:	bf28      	it	cs
 80098ee:	4613      	movcs	r3, r2
 80098f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80098f2:	89fb      	ldrh	r3, [r7, #14]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	08018988 	.word	0x08018988
 8009900:	08019094 	.word	0x08019094
 8009904:	080189cc 	.word	0x080189cc

08009908 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d119      	bne.n	8009950 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800991c:	4b10      	ldr	r3, [pc, #64]	; (8009960 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800991e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009922:	4910      	ldr	r1, [pc, #64]	; (8009964 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009924:	4810      	ldr	r0, [pc, #64]	; (8009968 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009926:	f00d fa2d 	bl	8016d84 <iprintf>

  while (pcb != NULL) {
 800992a:	e011      	b.n	8009950 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	429a      	cmp	r2, r3
 8009936:	d108      	bne.n	800994a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7fe fd26 	bl	8008390 <tcp_abort>
      pcb = next;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	e002      	b.n	8009950 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1ea      	bne.n	800992c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009956:	bf00      	nop
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	08018988 	.word	0x08018988
 8009964:	080190bc 	.word	0x080190bc
 8009968:	080189cc 	.word	0x080189cc

0800996c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d02a      	beq.n	80099d2 <tcp_netif_ip_addr_changed+0x66>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d026      	beq.n	80099d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009984:	4b15      	ldr	r3, [pc, #84]	; (80099dc <tcp_netif_ip_addr_changed+0x70>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff ffbc 	bl	8009908 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009990:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <tcp_netif_ip_addr_changed+0x74>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff ffb6 	bl	8009908 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d017      	beq.n	80099d2 <tcp_netif_ip_addr_changed+0x66>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d013      	beq.n	80099d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <tcp_netif_ip_addr_changed+0x78>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e00c      	b.n	80099cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d103      	bne.n	80099c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1ef      	bne.n	80099b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2000696c 	.word	0x2000696c
 80099e0:	20006978 	.word	0x20006978
 80099e4:	20006974 	.word	0x20006974

080099e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fb57 	bl	80090b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b08d      	sub	sp, #52	; 0x34
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d105      	bne.n	8009a2c <tcp_input+0x1c>
 8009a20:	4b9b      	ldr	r3, [pc, #620]	; (8009c90 <tcp_input+0x280>)
 8009a22:	2283      	movs	r2, #131	; 0x83
 8009a24:	499b      	ldr	r1, [pc, #620]	; (8009c94 <tcp_input+0x284>)
 8009a26:	489c      	ldr	r0, [pc, #624]	; (8009c98 <tcp_input+0x288>)
 8009a28:	f00d f9ac 	bl	8016d84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a9a      	ldr	r2, [pc, #616]	; (8009c9c <tcp_input+0x28c>)
 8009a32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	895b      	ldrh	r3, [r3, #10]
 8009a38:	2b13      	cmp	r3, #19
 8009a3a:	f240 83c4 	bls.w	800a1c6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a3e:	4b98      	ldr	r3, [pc, #608]	; (8009ca0 <tcp_input+0x290>)
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	4a97      	ldr	r2, [pc, #604]	; (8009ca0 <tcp_input+0x290>)
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f006 f86b 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f040 83ba 	bne.w	800a1ca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009a56:	4b92      	ldr	r3, [pc, #584]	; (8009ca0 <tcp_input+0x290>)
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a5e:	2be0      	cmp	r3, #224	; 0xe0
 8009a60:	f000 83b3 	beq.w	800a1ca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009a64:	4b8d      	ldr	r3, [pc, #564]	; (8009c9c <tcp_input+0x28c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	899b      	ldrh	r3, [r3, #12]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fc fc43 	bl	80062f8 <lwip_htons>
 8009a72:	4603      	mov	r3, r0
 8009a74:	0b1b      	lsrs	r3, r3, #12
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009a7e:	7cbb      	ldrb	r3, [r7, #18]
 8009a80:	2b13      	cmp	r3, #19
 8009a82:	f240 83a4 	bls.w	800a1ce <tcp_input+0x7be>
 8009a86:	7cbb      	ldrb	r3, [r7, #18]
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	891b      	ldrh	r3, [r3, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	f200 839d 	bhi.w	800a1ce <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009a94:	7cbb      	ldrb	r3, [r7, #18]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b14      	subs	r3, #20
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	4b81      	ldr	r3, [pc, #516]	; (8009ca4 <tcp_input+0x294>)
 8009a9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009aa0:	4b81      	ldr	r3, [pc, #516]	; (8009ca8 <tcp_input+0x298>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	895a      	ldrh	r2, [r3, #10]
 8009aaa:	7cbb      	ldrb	r3, [r7, #18]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d309      	bcc.n	8009ac6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009ab2:	4b7c      	ldr	r3, [pc, #496]	; (8009ca4 <tcp_input+0x294>)
 8009ab4:	881a      	ldrh	r2, [r3, #0]
 8009ab6:	4b7d      	ldr	r3, [pc, #500]	; (8009cac <tcp_input+0x29c>)
 8009ab8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009aba:	7cbb      	ldrb	r3, [r7, #18]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fd fe48 	bl	8007754 <pbuf_remove_header>
 8009ac4:	e04e      	b.n	8009b64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <tcp_input+0xca>
 8009ace:	4b70      	ldr	r3, [pc, #448]	; (8009c90 <tcp_input+0x280>)
 8009ad0:	22c2      	movs	r2, #194	; 0xc2
 8009ad2:	4977      	ldr	r1, [pc, #476]	; (8009cb0 <tcp_input+0x2a0>)
 8009ad4:	4870      	ldr	r0, [pc, #448]	; (8009c98 <tcp_input+0x288>)
 8009ad6:	f00d f955 	bl	8016d84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009ada:	2114      	movs	r1, #20
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7fd fe39 	bl	8007754 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	895a      	ldrh	r2, [r3, #10]
 8009ae6:	4b71      	ldr	r3, [pc, #452]	; (8009cac <tcp_input+0x29c>)
 8009ae8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009aea:	4b6e      	ldr	r3, [pc, #440]	; (8009ca4 <tcp_input+0x294>)
 8009aec:	881a      	ldrh	r2, [r3, #0]
 8009aee:	4b6f      	ldr	r3, [pc, #444]	; (8009cac <tcp_input+0x29c>)
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009af6:	4b6d      	ldr	r3, [pc, #436]	; (8009cac <tcp_input+0x29c>)
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7fd fe29 	bl	8007754 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	895b      	ldrh	r3, [r3, #10]
 8009b08:	8a3a      	ldrh	r2, [r7, #16]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	f200 8361 	bhi.w	800a1d2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	4a64      	ldr	r2, [pc, #400]	; (8009ca8 <tcp_input+0x298>)
 8009b18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	8a3a      	ldrh	r2, [r7, #16]
 8009b20:	4611      	mov	r1, r2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd fe16 	bl	8007754 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	891a      	ldrh	r2, [r3, #8]
 8009b2c:	8a3b      	ldrh	r3, [r7, #16]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	895b      	ldrh	r3, [r3, #10]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <tcp_input+0x13a>
 8009b3e:	4b54      	ldr	r3, [pc, #336]	; (8009c90 <tcp_input+0x280>)
 8009b40:	22df      	movs	r2, #223	; 0xdf
 8009b42:	495c      	ldr	r1, [pc, #368]	; (8009cb4 <tcp_input+0x2a4>)
 8009b44:	4854      	ldr	r0, [pc, #336]	; (8009c98 <tcp_input+0x288>)
 8009b46:	f00d f91d 	bl	8016d84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	891a      	ldrh	r2, [r3, #8]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	891b      	ldrh	r3, [r3, #8]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d005      	beq.n	8009b64 <tcp_input+0x154>
 8009b58:	4b4d      	ldr	r3, [pc, #308]	; (8009c90 <tcp_input+0x280>)
 8009b5a:	22e0      	movs	r2, #224	; 0xe0
 8009b5c:	4956      	ldr	r1, [pc, #344]	; (8009cb8 <tcp_input+0x2a8>)
 8009b5e:	484e      	ldr	r0, [pc, #312]	; (8009c98 <tcp_input+0x288>)
 8009b60:	f00d f910 	bl	8016d84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009b64:	4b4d      	ldr	r3, [pc, #308]	; (8009c9c <tcp_input+0x28c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4a4b      	ldr	r2, [pc, #300]	; (8009c9c <tcp_input+0x28c>)
 8009b6e:	6814      	ldr	r4, [r2, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fc fbc1 	bl	80062f8 <lwip_htons>
 8009b76:	4603      	mov	r3, r0
 8009b78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009b7a:	4b48      	ldr	r3, [pc, #288]	; (8009c9c <tcp_input+0x28c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	885b      	ldrh	r3, [r3, #2]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	4a46      	ldr	r2, [pc, #280]	; (8009c9c <tcp_input+0x28c>)
 8009b84:	6814      	ldr	r4, [r2, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fc fbb6 	bl	80062f8 <lwip_htons>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009b90:	4b42      	ldr	r3, [pc, #264]	; (8009c9c <tcp_input+0x28c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	4a41      	ldr	r2, [pc, #260]	; (8009c9c <tcp_input+0x28c>)
 8009b98:	6814      	ldr	r4, [r2, #0]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fc fbc1 	bl	8006322 <lwip_htonl>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	6863      	ldr	r3, [r4, #4]
 8009ba6:	4a45      	ldr	r2, [pc, #276]	; (8009cbc <tcp_input+0x2ac>)
 8009ba8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009baa:	4b3c      	ldr	r3, [pc, #240]	; (8009c9c <tcp_input+0x28c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4a3a      	ldr	r2, [pc, #232]	; (8009c9c <tcp_input+0x28c>)
 8009bb2:	6814      	ldr	r4, [r2, #0]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fc fbb4 	bl	8006322 <lwip_htonl>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	4a3f      	ldr	r2, [pc, #252]	; (8009cc0 <tcp_input+0x2b0>)
 8009bc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009bc4:	4b35      	ldr	r3, [pc, #212]	; (8009c9c <tcp_input+0x28c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	89db      	ldrh	r3, [r3, #14]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	4a33      	ldr	r2, [pc, #204]	; (8009c9c <tcp_input+0x28c>)
 8009bce:	6814      	ldr	r4, [r2, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fc fb91 	bl	80062f8 <lwip_htons>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009bda:	4b30      	ldr	r3, [pc, #192]	; (8009c9c <tcp_input+0x28c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	899b      	ldrh	r3, [r3, #12]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fc fb88 	bl	80062f8 <lwip_htons>
 8009be8:	4603      	mov	r3, r0
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	4b34      	ldr	r3, [pc, #208]	; (8009cc4 <tcp_input+0x2b4>)
 8009bf4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	891a      	ldrh	r2, [r3, #8]
 8009bfa:	4b33      	ldr	r3, [pc, #204]	; (8009cc8 <tcp_input+0x2b8>)
 8009bfc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <tcp_input+0x2b4>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <tcp_input+0x214>
    tcplen++;
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	; (8009cc8 <tcp_input+0x2b8>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	4b2d      	ldr	r3, [pc, #180]	; (8009cc8 <tcp_input+0x2b8>)
 8009c14:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	891a      	ldrh	r2, [r3, #8]
 8009c1a:	4b2b      	ldr	r3, [pc, #172]	; (8009cc8 <tcp_input+0x2b8>)
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	f200 82d9 	bhi.w	800a1d6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c28:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <tcp_input+0x2bc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	e09d      	b.n	8009d6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	7d1b      	ldrb	r3, [r3, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <tcp_input+0x234>
 8009c38:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <tcp_input+0x280>)
 8009c3a:	22fb      	movs	r2, #251	; 0xfb
 8009c3c:	4924      	ldr	r1, [pc, #144]	; (8009cd0 <tcp_input+0x2c0>)
 8009c3e:	4816      	ldr	r0, [pc, #88]	; (8009c98 <tcp_input+0x288>)
 8009c40:	f00d f8a0 	bl	8016d84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	7d1b      	ldrb	r3, [r3, #20]
 8009c48:	2b0a      	cmp	r3, #10
 8009c4a:	d105      	bne.n	8009c58 <tcp_input+0x248>
 8009c4c:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <tcp_input+0x280>)
 8009c4e:	22fc      	movs	r2, #252	; 0xfc
 8009c50:	4920      	ldr	r1, [pc, #128]	; (8009cd4 <tcp_input+0x2c4>)
 8009c52:	4811      	ldr	r0, [pc, #68]	; (8009c98 <tcp_input+0x288>)
 8009c54:	f00d f896 	bl	8016d84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d105      	bne.n	8009c6c <tcp_input+0x25c>
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <tcp_input+0x280>)
 8009c62:	22fd      	movs	r2, #253	; 0xfd
 8009c64:	491c      	ldr	r1, [pc, #112]	; (8009cd8 <tcp_input+0x2c8>)
 8009c66:	480c      	ldr	r0, [pc, #48]	; (8009c98 <tcp_input+0x288>)
 8009c68:	f00d f88c 	bl	8016d84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	7a1b      	ldrb	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d033      	beq.n	8009cdc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	7a1a      	ldrb	r2, [r3, #8]
 8009c78:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <tcp_input+0x290>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c80:	3301      	adds	r3, #1
 8009c82:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d029      	beq.n	8009cdc <tcp_input+0x2cc>
      prev = pcb;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	61bb      	str	r3, [r7, #24]
      continue;
 8009c8c:	e06b      	b.n	8009d66 <tcp_input+0x356>
 8009c8e:	bf00      	nop
 8009c90:	080190f0 	.word	0x080190f0
 8009c94:	08019124 	.word	0x08019124
 8009c98:	0801913c 	.word	0x0801913c
 8009c9c:	200000e0 	.word	0x200000e0
 8009ca0:	20003428 	.word	0x20003428
 8009ca4:	200000e4 	.word	0x200000e4
 8009ca8:	200000e8 	.word	0x200000e8
 8009cac:	200000e6 	.word	0x200000e6
 8009cb0:	08019164 	.word	0x08019164
 8009cb4:	08019174 	.word	0x08019174
 8009cb8:	08019180 	.word	0x08019180
 8009cbc:	200000f0 	.word	0x200000f0
 8009cc0:	200000f4 	.word	0x200000f4
 8009cc4:	200000fc 	.word	0x200000fc
 8009cc8:	200000fa 	.word	0x200000fa
 8009ccc:	2000696c 	.word	0x2000696c
 8009cd0:	080191a0 	.word	0x080191a0
 8009cd4:	080191c8 	.word	0x080191c8
 8009cd8:	080191f4 	.word	0x080191f4
    }

    if (pcb->remote_port == tcphdr->src &&
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	8b1a      	ldrh	r2, [r3, #24]
 8009ce0:	4b94      	ldr	r3, [pc, #592]	; (8009f34 <tcp_input+0x524>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d13a      	bne.n	8009d62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	8ada      	ldrh	r2, [r3, #22]
 8009cf0:	4b90      	ldr	r3, [pc, #576]	; (8009f34 <tcp_input+0x524>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d132      	bne.n	8009d62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	4b8d      	ldr	r3, [pc, #564]	; (8009f38 <tcp_input+0x528>)
 8009d02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d12c      	bne.n	8009d62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	4b8a      	ldr	r3, [pc, #552]	; (8009f38 <tcp_input+0x528>)
 8009d0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d126      	bne.n	8009d62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d106      	bne.n	8009d2c <tcp_input+0x31c>
 8009d1e:	4b87      	ldr	r3, [pc, #540]	; (8009f3c <tcp_input+0x52c>)
 8009d20:	f240 120d 	movw	r2, #269	; 0x10d
 8009d24:	4986      	ldr	r1, [pc, #536]	; (8009f40 <tcp_input+0x530>)
 8009d26:	4887      	ldr	r0, [pc, #540]	; (8009f44 <tcp_input+0x534>)
 8009d28:	f00d f82c 	bl	8016d84 <iprintf>
      if (prev != NULL) {
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <tcp_input+0x338>
        prev->next = pcb->next;
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009d3a:	4b83      	ldr	r3, [pc, #524]	; (8009f48 <tcp_input+0x538>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009d42:	4a81      	ldr	r2, [pc, #516]	; (8009f48 <tcp_input+0x538>)
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	69fa      	ldr	r2, [r7, #28]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d111      	bne.n	8009d76 <tcp_input+0x366>
 8009d52:	4b7a      	ldr	r3, [pc, #488]	; (8009f3c <tcp_input+0x52c>)
 8009d54:	f240 1215 	movw	r2, #277	; 0x115
 8009d58:	497c      	ldr	r1, [pc, #496]	; (8009f4c <tcp_input+0x53c>)
 8009d5a:	487a      	ldr	r0, [pc, #488]	; (8009f44 <tcp_input+0x534>)
 8009d5c:	f00d f812 	bl	8016d84 <iprintf>
      break;
 8009d60:	e009      	b.n	8009d76 <tcp_input+0x366>
    }
    prev = pcb;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	61fb      	str	r3, [r7, #28]
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f47f af5e 	bne.w	8009c30 <tcp_input+0x220>
 8009d74:	e000      	b.n	8009d78 <tcp_input+0x368>
      break;
 8009d76:	bf00      	nop
  }

  if (pcb == NULL) {
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 8095 	bne.w	8009eaa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d80:	4b73      	ldr	r3, [pc, #460]	; (8009f50 <tcp_input+0x540>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	61fb      	str	r3, [r7, #28]
 8009d86:	e03f      	b.n	8009e08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	7d1b      	ldrb	r3, [r3, #20]
 8009d8c:	2b0a      	cmp	r3, #10
 8009d8e:	d006      	beq.n	8009d9e <tcp_input+0x38e>
 8009d90:	4b6a      	ldr	r3, [pc, #424]	; (8009f3c <tcp_input+0x52c>)
 8009d92:	f240 121f 	movw	r2, #287	; 0x11f
 8009d96:	496f      	ldr	r1, [pc, #444]	; (8009f54 <tcp_input+0x544>)
 8009d98:	486a      	ldr	r0, [pc, #424]	; (8009f44 <tcp_input+0x534>)
 8009d9a:	f00c fff3 	bl	8016d84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	7a1b      	ldrb	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d009      	beq.n	8009dba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	7a1a      	ldrb	r2, [r3, #8]
 8009daa:	4b63      	ldr	r3, [pc, #396]	; (8009f38 <tcp_input+0x528>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009db2:	3301      	adds	r3, #1
 8009db4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d122      	bne.n	8009e00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	8b1a      	ldrh	r2, [r3, #24]
 8009dbe:	4b5d      	ldr	r3, [pc, #372]	; (8009f34 <tcp_input+0x524>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d11b      	bne.n	8009e02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	8ada      	ldrh	r2, [r3, #22]
 8009dce:	4b59      	ldr	r3, [pc, #356]	; (8009f34 <tcp_input+0x524>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	885b      	ldrh	r3, [r3, #2]
 8009dd4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d113      	bne.n	8009e02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	4b56      	ldr	r3, [pc, #344]	; (8009f38 <tcp_input+0x528>)
 8009de0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d10d      	bne.n	8009e02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <tcp_input+0x528>)
 8009dec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d107      	bne.n	8009e02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009df2:	69f8      	ldr	r0, [r7, #28]
 8009df4:	f000 fb54 	bl	800a4a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7fd fd31 	bl	8007860 <pbuf_free>
        return;
 8009dfe:	e1f0      	b.n	800a1e2 <tcp_input+0x7d2>
        continue;
 8009e00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1bc      	bne.n	8009d88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e12:	4b51      	ldr	r3, [pc, #324]	; (8009f58 <tcp_input+0x548>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e02a      	b.n	8009e70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	7a1b      	ldrb	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00c      	beq.n	8009e3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	7a1a      	ldrb	r2, [r3, #8]
 8009e26:	4b44      	ldr	r3, [pc, #272]	; (8009f38 <tcp_input+0x528>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e2e:	3301      	adds	r3, #1
 8009e30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d002      	beq.n	8009e3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	61bb      	str	r3, [r7, #24]
        continue;
 8009e3a:	e016      	b.n	8009e6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	8ada      	ldrh	r2, [r3, #22]
 8009e40:	4b3c      	ldr	r3, [pc, #240]	; (8009f34 <tcp_input+0x524>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	885b      	ldrh	r3, [r3, #2]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d10c      	bne.n	8009e66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <tcp_input+0x528>)
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d00f      	beq.n	8009e78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <tcp_input+0x46a>
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d009      	beq.n	8009e7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1d1      	bne.n	8009e1a <tcp_input+0x40a>
 8009e76:	e000      	b.n	8009e7a <tcp_input+0x46a>
            break;
 8009e78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d014      	beq.n	8009eaa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009e8e:	4b32      	ldr	r3, [pc, #200]	; (8009f58 <tcp_input+0x548>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e96:	4a30      	ldr	r2, [pc, #192]	; (8009f58 <tcp_input+0x548>)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009e9c:	6978      	ldr	r0, [r7, #20]
 8009e9e:	f000 fa01 	bl	800a2a4 <tcp_listen_input>
      }
      pbuf_free(p);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fd fcdc 	bl	8007860 <pbuf_free>
      return;
 8009ea8:	e19b      	b.n	800a1e2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8160 	beq.w	800a172 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009eb2:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <tcp_input+0x54c>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	891a      	ldrh	r2, [r3, #8]
 8009ebc:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <tcp_input+0x54c>)
 8009ebe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009ec0:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <tcp_input+0x54c>)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009ec6:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <tcp_input+0x524>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a24      	ldr	r2, [pc, #144]	; (8009f5c <tcp_input+0x54c>)
 8009ecc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009ece:	4b24      	ldr	r3, [pc, #144]	; (8009f60 <tcp_input+0x550>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009ed4:	4b23      	ldr	r3, [pc, #140]	; (8009f64 <tcp_input+0x554>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009eda:	4b23      	ldr	r3, [pc, #140]	; (8009f68 <tcp_input+0x558>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009ee0:	4b22      	ldr	r3, [pc, #136]	; (8009f6c <tcp_input+0x55c>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	f003 0308 	and.w	r3, r3, #8
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d006      	beq.n	8009efa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7b5b      	ldrb	r3, [r3, #13]
 8009ef0:	f043 0301 	orr.w	r3, r3, #1
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d038      	beq.n	8009f74 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009f02:	69f8      	ldr	r0, [r7, #28]
 8009f04:	f7ff f858 	bl	8008fb8 <tcp_process_refused_data>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f113 0f0d 	cmn.w	r3, #13
 8009f0e:	d007      	beq.n	8009f20 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d02d      	beq.n	8009f74 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009f18:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <tcp_input+0x560>)
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d029      	beq.n	8009f74 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 8104 	bne.w	800a132 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009f2a:	69f8      	ldr	r0, [r7, #28]
 8009f2c:	f003 fe16 	bl	800db5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009f30:	e0ff      	b.n	800a132 <tcp_input+0x722>
 8009f32:	bf00      	nop
 8009f34:	200000e0 	.word	0x200000e0
 8009f38:	20003428 	.word	0x20003428
 8009f3c:	080190f0 	.word	0x080190f0
 8009f40:	0801921c 	.word	0x0801921c
 8009f44:	0801913c 	.word	0x0801913c
 8009f48:	2000696c 	.word	0x2000696c
 8009f4c:	08019248 	.word	0x08019248
 8009f50:	2000697c 	.word	0x2000697c
 8009f54:	08019274 	.word	0x08019274
 8009f58:	20006974 	.word	0x20006974
 8009f5c:	200000d0 	.word	0x200000d0
 8009f60:	20000100 	.word	0x20000100
 8009f64:	200000fd 	.word	0x200000fd
 8009f68:	200000f8 	.word	0x200000f8
 8009f6c:	200000fc 	.word	0x200000fc
 8009f70:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8009f74:	4a9c      	ldr	r2, [pc, #624]	; (800a1e8 <tcp_input+0x7d8>)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009f7a:	69f8      	ldr	r0, [r7, #28]
 8009f7c:	f000 fb0a 	bl	800a594 <tcp_process>
 8009f80:	4603      	mov	r3, r0
 8009f82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f88:	f113 0f0d 	cmn.w	r3, #13
 8009f8c:	f000 80d3 	beq.w	800a136 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009f90:	4b96      	ldr	r3, [pc, #600]	; (800a1ec <tcp_input+0x7dc>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d015      	beq.n	8009fc8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <tcp_input+0x5a8>
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	6912      	ldr	r2, [r2, #16]
 8009fb0:	f06f 010d 	mvn.w	r1, #13
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009fb8:	69f9      	ldr	r1, [r7, #28]
 8009fba:	488d      	ldr	r0, [pc, #564]	; (800a1f0 <tcp_input+0x7e0>)
 8009fbc:	f7ff fbb0 	bl	8009720 <tcp_pcb_remove>
        tcp_free(pcb);
 8009fc0:	69f8      	ldr	r0, [r7, #28]
 8009fc2:	f7fd fefd 	bl	8007dc0 <tcp_free>
 8009fc6:	e0c1      	b.n	800a14c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009fcc:	4b89      	ldr	r3, [pc, #548]	; (800a1f4 <tcp_input+0x7e4>)
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01d      	beq.n	800a010 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009fd4:	4b87      	ldr	r3, [pc, #540]	; (800a1f4 <tcp_input+0x7e4>)
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <tcp_input+0x5ea>
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	6910      	ldr	r0, [r2, #16]
 8009fee:	89fa      	ldrh	r2, [r7, #14]
 8009ff0:	69f9      	ldr	r1, [r7, #28]
 8009ff2:	4798      	blx	r3
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	74fb      	strb	r3, [r7, #19]
 8009ff8:	e001      	b.n	8009ffe <tcp_input+0x5ee>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a002:	f113 0f0d 	cmn.w	r3, #13
 800a006:	f000 8098 	beq.w	800a13a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a00a:	4b7a      	ldr	r3, [pc, #488]	; (800a1f4 <tcp_input+0x7e4>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a010:	69f8      	ldr	r0, [r7, #28]
 800a012:	f000 f907 	bl	800a224 <tcp_input_delayed_close>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f040 8090 	bne.w	800a13e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a01e:	4b76      	ldr	r3, [pc, #472]	; (800a1f8 <tcp_input+0x7e8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d041      	beq.n	800a0aa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d006      	beq.n	800a03c <tcp_input+0x62c>
 800a02e:	4b73      	ldr	r3, [pc, #460]	; (800a1fc <tcp_input+0x7ec>)
 800a030:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a034:	4972      	ldr	r1, [pc, #456]	; (800a200 <tcp_input+0x7f0>)
 800a036:	4873      	ldr	r0, [pc, #460]	; (800a204 <tcp_input+0x7f4>)
 800a038:	f00c fea4 	bl	8016d84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	8b5b      	ldrh	r3, [r3, #26]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b00      	cmp	r3, #0
 800a046:	d008      	beq.n	800a05a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a048:	4b6b      	ldr	r3, [pc, #428]	; (800a1f8 <tcp_input+0x7e8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fd fc07 	bl	8007860 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a052:	69f8      	ldr	r0, [r7, #28]
 800a054:	f7fe f99c 	bl	8008390 <tcp_abort>
            goto aborted;
 800a058:	e078      	b.n	800a14c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <tcp_input+0x66e>
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	6918      	ldr	r0, [r3, #16]
 800a06e:	4b62      	ldr	r3, [pc, #392]	; (800a1f8 <tcp_input+0x7e8>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	69f9      	ldr	r1, [r7, #28]
 800a076:	47a0      	blx	r4
 800a078:	4603      	mov	r3, r0
 800a07a:	74fb      	strb	r3, [r7, #19]
 800a07c:	e008      	b.n	800a090 <tcp_input+0x680>
 800a07e:	4b5e      	ldr	r3, [pc, #376]	; (800a1f8 <tcp_input+0x7e8>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	2300      	movs	r3, #0
 800a084:	69f9      	ldr	r1, [r7, #28]
 800a086:	2000      	movs	r0, #0
 800a088:	f7ff f88a 	bl	80091a0 <tcp_recv_null>
 800a08c:	4603      	mov	r3, r0
 800a08e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a094:	f113 0f0d 	cmn.w	r3, #13
 800a098:	d053      	beq.n	800a142 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a09a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a0a2:	4b55      	ldr	r3, [pc, #340]	; (800a1f8 <tcp_input+0x7e8>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a0aa:	4b50      	ldr	r3, [pc, #320]	; (800a1ec <tcp_input+0x7dc>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d030      	beq.n	800a118 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d009      	beq.n	800a0d2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c2:	7b5a      	ldrb	r2, [r3, #13]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c8:	f042 0220 	orr.w	r2, r2, #32
 800a0cc:	b2d2      	uxtb	r2, r2
 800a0ce:	735a      	strb	r2, [r3, #13]
 800a0d0:	e022      	b.n	800a118 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a0da:	d005      	beq.n	800a0e8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00b      	beq.n	800a10a <tcp_input+0x6fa>
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	6918      	ldr	r0, [r3, #16]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	47a0      	blx	r4
 800a104:	4603      	mov	r3, r0
 800a106:	74fb      	strb	r3, [r7, #19]
 800a108:	e001      	b.n	800a10e <tcp_input+0x6fe>
 800a10a:	2300      	movs	r3, #0
 800a10c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a10e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a112:	f113 0f0d 	cmn.w	r3, #13
 800a116:	d016      	beq.n	800a146 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a118:	4b33      	ldr	r3, [pc, #204]	; (800a1e8 <tcp_input+0x7d8>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a11e:	69f8      	ldr	r0, [r7, #28]
 800a120:	f000 f880 	bl	800a224 <tcp_input_delayed_close>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10f      	bne.n	800a14a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a12a:	69f8      	ldr	r0, [r7, #28]
 800a12c:	f002 ff10 	bl	800cf50 <tcp_output>
 800a130:	e00c      	b.n	800a14c <tcp_input+0x73c>
        goto aborted;
 800a132:	bf00      	nop
 800a134:	e00a      	b.n	800a14c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a136:	bf00      	nop
 800a138:	e008      	b.n	800a14c <tcp_input+0x73c>
              goto aborted;
 800a13a:	bf00      	nop
 800a13c:	e006      	b.n	800a14c <tcp_input+0x73c>
          goto aborted;
 800a13e:	bf00      	nop
 800a140:	e004      	b.n	800a14c <tcp_input+0x73c>
            goto aborted;
 800a142:	bf00      	nop
 800a144:	e002      	b.n	800a14c <tcp_input+0x73c>
              goto aborted;
 800a146:	bf00      	nop
 800a148:	e000      	b.n	800a14c <tcp_input+0x73c>
          goto aborted;
 800a14a:	bf00      	nop
    tcp_input_pcb = NULL;
 800a14c:	4b26      	ldr	r3, [pc, #152]	; (800a1e8 <tcp_input+0x7d8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a152:	4b29      	ldr	r3, [pc, #164]	; (800a1f8 <tcp_input+0x7e8>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a158:	4b2b      	ldr	r3, [pc, #172]	; (800a208 <tcp_input+0x7f8>)
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d03f      	beq.n	800a1e0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a160:	4b29      	ldr	r3, [pc, #164]	; (800a208 <tcp_input+0x7f8>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	f7fd fb7b 	bl	8007860 <pbuf_free>
      inseg.p = NULL;
 800a16a:	4b27      	ldr	r3, [pc, #156]	; (800a208 <tcp_input+0x7f8>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a170:	e036      	b.n	800a1e0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a172:	4b26      	ldr	r3, [pc, #152]	; (800a20c <tcp_input+0x7fc>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	899b      	ldrh	r3, [r3, #12]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fc f8bc 	bl	80062f8 <lwip_htons>
 800a180:	4603      	mov	r3, r0
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d118      	bne.n	800a1be <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a18c:	4b20      	ldr	r3, [pc, #128]	; (800a210 <tcp_input+0x800>)
 800a18e:	6819      	ldr	r1, [r3, #0]
 800a190:	4b20      	ldr	r3, [pc, #128]	; (800a214 <tcp_input+0x804>)
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	4b20      	ldr	r3, [pc, #128]	; (800a218 <tcp_input+0x808>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <tcp_input+0x7fc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1a0:	885b      	ldrh	r3, [r3, #2]
 800a1a2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1a4:	4a19      	ldr	r2, [pc, #100]	; (800a20c <tcp_input+0x7fc>)
 800a1a6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <tcp_input+0x80c>)
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <tcp_input+0x810>)
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f003 fc7d 	bl	800dab8 <tcp_rst>
    pbuf_free(p);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fd fb4e 	bl	8007860 <pbuf_free>
  return;
 800a1c4:	e00c      	b.n	800a1e0 <tcp_input+0x7d0>
    goto dropped;
 800a1c6:	bf00      	nop
 800a1c8:	e006      	b.n	800a1d8 <tcp_input+0x7c8>
    goto dropped;
 800a1ca:	bf00      	nop
 800a1cc:	e004      	b.n	800a1d8 <tcp_input+0x7c8>
    goto dropped;
 800a1ce:	bf00      	nop
 800a1d0:	e002      	b.n	800a1d8 <tcp_input+0x7c8>
      goto dropped;
 800a1d2:	bf00      	nop
 800a1d4:	e000      	b.n	800a1d8 <tcp_input+0x7c8>
      goto dropped;
 800a1d6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7fd fb41 	bl	8007860 <pbuf_free>
 800a1de:	e000      	b.n	800a1e2 <tcp_input+0x7d2>
  return;
 800a1e0:	bf00      	nop
}
 800a1e2:	3724      	adds	r7, #36	; 0x24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd90      	pop	{r4, r7, pc}
 800a1e8:	20006980 	.word	0x20006980
 800a1ec:	200000fd 	.word	0x200000fd
 800a1f0:	2000696c 	.word	0x2000696c
 800a1f4:	200000f8 	.word	0x200000f8
 800a1f8:	20000100 	.word	0x20000100
 800a1fc:	080190f0 	.word	0x080190f0
 800a200:	080192a4 	.word	0x080192a4
 800a204:	0801913c 	.word	0x0801913c
 800a208:	200000d0 	.word	0x200000d0
 800a20c:	200000e0 	.word	0x200000e0
 800a210:	200000f4 	.word	0x200000f4
 800a214:	200000fa 	.word	0x200000fa
 800a218:	200000f0 	.word	0x200000f0
 800a21c:	20003438 	.word	0x20003438
 800a220:	2000343c 	.word	0x2000343c

0800a224 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <tcp_input_delayed_close+0x1c>
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <tcp_input_delayed_close+0x6c>)
 800a234:	f240 225a 	movw	r2, #602	; 0x25a
 800a238:	4916      	ldr	r1, [pc, #88]	; (800a294 <tcp_input_delayed_close+0x70>)
 800a23a:	4817      	ldr	r0, [pc, #92]	; (800a298 <tcp_input_delayed_close+0x74>)
 800a23c:	f00c fda2 	bl	8016d84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a240:	4b16      	ldr	r3, [pc, #88]	; (800a29c <tcp_input_delayed_close+0x78>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 0310 	and.w	r3, r3, #16
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01c      	beq.n	800a286 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	8b5b      	ldrh	r3, [r3, #26]
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10d      	bne.n	800a274 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d008      	beq.n	800a274 <tcp_input_delayed_close+0x50>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6912      	ldr	r2, [r2, #16]
 800a26c:	f06f 010e 	mvn.w	r1, #14
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	480a      	ldr	r0, [pc, #40]	; (800a2a0 <tcp_input_delayed_close+0x7c>)
 800a278:	f7ff fa52 	bl	8009720 <tcp_pcb_remove>
    tcp_free(pcb);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7fd fd9f 	bl	8007dc0 <tcp_free>
    return 1;
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	080190f0 	.word	0x080190f0
 800a294:	080192c0 	.word	0x080192c0
 800a298:	0801913c 	.word	0x0801913c
 800a29c:	200000fd 	.word	0x200000fd
 800a2a0:	2000696c 	.word	0x2000696c

0800a2a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b08b      	sub	sp, #44	; 0x2c
 800a2a8:	af04      	add	r7, sp, #16
 800a2aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a2ac:	4b6f      	ldr	r3, [pc, #444]	; (800a46c <tcp_listen_input+0x1c8>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f040 80d2 	bne.w	800a45e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <tcp_listen_input+0x2a>
 800a2c0:	4b6b      	ldr	r3, [pc, #428]	; (800a470 <tcp_listen_input+0x1cc>)
 800a2c2:	f240 2281 	movw	r2, #641	; 0x281
 800a2c6:	496b      	ldr	r1, [pc, #428]	; (800a474 <tcp_listen_input+0x1d0>)
 800a2c8:	486b      	ldr	r0, [pc, #428]	; (800a478 <tcp_listen_input+0x1d4>)
 800a2ca:	f00c fd5b 	bl	8016d84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a2ce:	4b67      	ldr	r3, [pc, #412]	; (800a46c <tcp_listen_input+0x1c8>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d019      	beq.n	800a30e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2da:	4b68      	ldr	r3, [pc, #416]	; (800a47c <tcp_listen_input+0x1d8>)
 800a2dc:	6819      	ldr	r1, [r3, #0]
 800a2de:	4b68      	ldr	r3, [pc, #416]	; (800a480 <tcp_listen_input+0x1dc>)
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4b67      	ldr	r3, [pc, #412]	; (800a484 <tcp_listen_input+0x1e0>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2ea:	4b67      	ldr	r3, [pc, #412]	; (800a488 <tcp_listen_input+0x1e4>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ee:	885b      	ldrh	r3, [r3, #2]
 800a2f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2f2:	4a65      	ldr	r2, [pc, #404]	; (800a488 <tcp_listen_input+0x1e4>)
 800a2f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2f6:	8812      	ldrh	r2, [r2, #0]
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	9202      	str	r2, [sp, #8]
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	4b63      	ldr	r3, [pc, #396]	; (800a48c <tcp_listen_input+0x1e8>)
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	4b63      	ldr	r3, [pc, #396]	; (800a490 <tcp_listen_input+0x1ec>)
 800a304:	4602      	mov	r2, r0
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f003 fbd6 	bl	800dab8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a30c:	e0a9      	b.n	800a462 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a30e:	4b57      	ldr	r3, [pc, #348]	; (800a46c <tcp_listen_input+0x1c8>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 80a3 	beq.w	800a462 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7d5b      	ldrb	r3, [r3, #21]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff f861 	bl	80093e8 <tcp_alloc>
 800a326:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d111      	bne.n	800a352 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <tcp_listen_input+0xa8>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	6910      	ldr	r0, [r2, #16]
 800a33e:	f04f 32ff 	mov.w	r2, #4294967295
 800a342:	2100      	movs	r1, #0
 800a344:	4798      	blx	r3
 800a346:	4603      	mov	r3, r0
 800a348:	73bb      	strb	r3, [r7, #14]
      return;
 800a34a:	e08b      	b.n	800a464 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a34c:	23f0      	movs	r3, #240	; 0xf0
 800a34e:	73bb      	strb	r3, [r7, #14]
      return;
 800a350:	e088      	b.n	800a464 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a352:	4b50      	ldr	r3, [pc, #320]	; (800a494 <tcp_listen_input+0x1f0>)
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a35a:	4b4e      	ldr	r3, [pc, #312]	; (800a494 <tcp_listen_input+0x1f0>)
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	8ada      	ldrh	r2, [r3, #22]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a36a:	4b47      	ldr	r3, [pc, #284]	; (800a488 <tcp_listen_input+0x1e4>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29a      	uxth	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2203      	movs	r2, #3
 800a37a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a37c:	4b41      	ldr	r3, [pc, #260]	; (800a484 <tcp_listen_input+0x1e0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a38e:	6978      	ldr	r0, [r7, #20]
 800a390:	f7ff fa5a 	bl	8009848 <tcp_next_iss>
 800a394:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a3ae:	4b35      	ldr	r3, [pc, #212]	; (800a484 <tcp_listen_input+0x1e0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	1e5a      	subs	r2, r3, #1
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	691a      	ldr	r2, [r3, #16]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ca:	f003 030c 	and.w	r3, r3, #12
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7a1a      	ldrb	r2, [r3, #8]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a3dc:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <tcp_listen_input+0x1f4>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	60da      	str	r2, [r3, #12]
 800a3e4:	4a2c      	ldr	r2, [pc, #176]	; (800a498 <tcp_listen_input+0x1f4>)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	f003 fd27 	bl	800de3c <tcp_timer_needed>
 800a3ee:	4b2b      	ldr	r3, [pc, #172]	; (800a49c <tcp_listen_input+0x1f8>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a3f4:	6978      	ldr	r0, [r7, #20]
 800a3f6:	f001 fd8d 	bl	800bf14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a3fa:	4b23      	ldr	r3, [pc, #140]	; (800a488 <tcp_listen_input+0x1e4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	89db      	ldrh	r3, [r3, #14]
 800a400:	b29a      	uxth	r2, r3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f005 f8eb 	bl	800f5f8 <ip4_route>
 800a422:	4601      	mov	r1, r0
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	3304      	adds	r3, #4
 800a428:	461a      	mov	r2, r3
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff fa32 	bl	8009894 <tcp_eff_send_mss_netif>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a438:	2112      	movs	r1, #18
 800a43a:	6978      	ldr	r0, [r7, #20]
 800a43c:	f002 fc9a 	bl	800cd74 <tcp_enqueue_flags>
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a44c:	2100      	movs	r1, #0
 800a44e:	6978      	ldr	r0, [r7, #20]
 800a450:	f7fd fee0 	bl	8008214 <tcp_abandon>
      return;
 800a454:	e006      	b.n	800a464 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a456:	6978      	ldr	r0, [r7, #20]
 800a458:	f002 fd7a 	bl	800cf50 <tcp_output>
  return;
 800a45c:	e001      	b.n	800a462 <tcp_listen_input+0x1be>
    return;
 800a45e:	bf00      	nop
 800a460:	e000      	b.n	800a464 <tcp_listen_input+0x1c0>
  return;
 800a462:	bf00      	nop
}
 800a464:	371c      	adds	r7, #28
 800a466:	46bd      	mov	sp, r7
 800a468:	bd90      	pop	{r4, r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200000fc 	.word	0x200000fc
 800a470:	080190f0 	.word	0x080190f0
 800a474:	080192e8 	.word	0x080192e8
 800a478:	0801913c 	.word	0x0801913c
 800a47c:	200000f4 	.word	0x200000f4
 800a480:	200000fa 	.word	0x200000fa
 800a484:	200000f0 	.word	0x200000f0
 800a488:	200000e0 	.word	0x200000e0
 800a48c:	20003438 	.word	0x20003438
 800a490:	2000343c 	.word	0x2000343c
 800a494:	20003428 	.word	0x20003428
 800a498:	2000696c 	.word	0x2000696c
 800a49c:	20006968 	.word	0x20006968

0800a4a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af04      	add	r7, sp, #16
 800a4a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a4a8:	4b2f      	ldr	r3, [pc, #188]	; (800a568 <tcp_timewait_input+0xc8>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d153      	bne.n	800a55c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <tcp_timewait_input+0x28>
 800a4ba:	4b2c      	ldr	r3, [pc, #176]	; (800a56c <tcp_timewait_input+0xcc>)
 800a4bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a4c0:	492b      	ldr	r1, [pc, #172]	; (800a570 <tcp_timewait_input+0xd0>)
 800a4c2:	482c      	ldr	r0, [pc, #176]	; (800a574 <tcp_timewait_input+0xd4>)
 800a4c4:	f00c fc5e 	bl	8016d84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a4c8:	4b27      	ldr	r3, [pc, #156]	; (800a568 <tcp_timewait_input+0xc8>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d02a      	beq.n	800a52a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a4d4:	4b28      	ldr	r3, [pc, #160]	; (800a578 <tcp_timewait_input+0xd8>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	db2d      	blt.n	800a53e <tcp_timewait_input+0x9e>
 800a4e2:	4b25      	ldr	r3, [pc, #148]	; (800a578 <tcp_timewait_input+0xd8>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a4ee:	440b      	add	r3, r1
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	dc23      	bgt.n	800a53e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4f6:	4b21      	ldr	r3, [pc, #132]	; (800a57c <tcp_timewait_input+0xdc>)
 800a4f8:	6819      	ldr	r1, [r3, #0]
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <tcp_timewait_input+0xe0>)
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	4b1d      	ldr	r3, [pc, #116]	; (800a578 <tcp_timewait_input+0xd8>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <tcp_timewait_input+0xe4>)
 800a508:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a50a:	885b      	ldrh	r3, [r3, #2]
 800a50c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <tcp_timewait_input+0xe4>)
 800a510:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a512:	8812      	ldrh	r2, [r2, #0]
 800a514:	b292      	uxth	r2, r2
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <tcp_timewait_input+0xe8>)
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <tcp_timewait_input+0xec>)
 800a520:	4602      	mov	r2, r0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f003 fac8 	bl	800dab8 <tcp_rst>
      return;
 800a528:	e01b      	b.n	800a562 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <tcp_timewait_input+0xc8>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a536:	4b16      	ldr	r3, [pc, #88]	; (800a590 <tcp_timewait_input+0xf0>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a53e:	4b10      	ldr	r3, [pc, #64]	; (800a580 <tcp_timewait_input+0xe0>)
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00c      	beq.n	800a560 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	8b5b      	ldrh	r3, [r3, #26]
 800a54a:	f043 0302 	orr.w	r3, r3, #2
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f002 fcfb 	bl	800cf50 <tcp_output>
  }
  return;
 800a55a:	e001      	b.n	800a560 <tcp_timewait_input+0xc0>
    return;
 800a55c:	bf00      	nop
 800a55e:	e000      	b.n	800a562 <tcp_timewait_input+0xc2>
  return;
 800a560:	bf00      	nop
}
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200000fc 	.word	0x200000fc
 800a56c:	080190f0 	.word	0x080190f0
 800a570:	08019308 	.word	0x08019308
 800a574:	0801913c 	.word	0x0801913c
 800a578:	200000f0 	.word	0x200000f0
 800a57c:	200000f4 	.word	0x200000f4
 800a580:	200000fa 	.word	0x200000fa
 800a584:	200000e0 	.word	0x200000e0
 800a588:	20003438 	.word	0x20003438
 800a58c:	2000343c 	.word	0x2000343c
 800a590:	20006970 	.word	0x20006970

0800a594 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a594:	b590      	push	{r4, r7, lr}
 800a596:	b08d      	sub	sp, #52	; 0x34
 800a598:	af04      	add	r7, sp, #16
 800a59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <tcp_process+0x24>
 800a5aa:	4ba5      	ldr	r3, [pc, #660]	; (800a840 <tcp_process+0x2ac>)
 800a5ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a5b0:	49a4      	ldr	r1, [pc, #656]	; (800a844 <tcp_process+0x2b0>)
 800a5b2:	48a5      	ldr	r0, [pc, #660]	; (800a848 <tcp_process+0x2b4>)
 800a5b4:	f00c fbe6 	bl	8016d84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a5b8:	4ba4      	ldr	r3, [pc, #656]	; (800a84c <tcp_process+0x2b8>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d04e      	beq.n	800a662 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7d1b      	ldrb	r3, [r3, #20]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d108      	bne.n	800a5de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5d0:	4b9f      	ldr	r3, [pc, #636]	; (800a850 <tcp_process+0x2bc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d123      	bne.n	800a620 <tcp_process+0x8c>
        acceptable = 1;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	76fb      	strb	r3, [r7, #27]
 800a5dc:	e020      	b.n	800a620 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5e2:	4b9c      	ldr	r3, [pc, #624]	; (800a854 <tcp_process+0x2c0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d102      	bne.n	800a5f0 <tcp_process+0x5c>
        acceptable = 1;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	76fb      	strb	r3, [r7, #27]
 800a5ee:	e017      	b.n	800a620 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5f0:	4b98      	ldr	r3, [pc, #608]	; (800a854 <tcp_process+0x2c0>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db10      	blt.n	800a620 <tcp_process+0x8c>
 800a5fe:	4b95      	ldr	r3, [pc, #596]	; (800a854 <tcp_process+0x2c0>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a60a:	440b      	add	r3, r1
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	dc06      	bgt.n	800a620 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8b5b      	ldrh	r3, [r3, #26]
 800a616:	f043 0302 	orr.w	r3, r3, #2
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a620:	7efb      	ldrb	r3, [r7, #27]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01b      	beq.n	800a65e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <tcp_process+0xa8>
 800a62e:	4b84      	ldr	r3, [pc, #528]	; (800a840 <tcp_process+0x2ac>)
 800a630:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a634:	4988      	ldr	r1, [pc, #544]	; (800a858 <tcp_process+0x2c4>)
 800a636:	4884      	ldr	r0, [pc, #528]	; (800a848 <tcp_process+0x2b4>)
 800a638:	f00c fba4 	bl	8016d84 <iprintf>
      recv_flags |= TF_RESET;
 800a63c:	4b87      	ldr	r3, [pc, #540]	; (800a85c <tcp_process+0x2c8>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	f043 0308 	orr.w	r3, r3, #8
 800a644:	b2da      	uxtb	r2, r3
 800a646:	4b85      	ldr	r3, [pc, #532]	; (800a85c <tcp_process+0x2c8>)
 800a648:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	8b5b      	ldrh	r3, [r3, #26]
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a658:	f06f 030d 	mvn.w	r3, #13
 800a65c:	e37a      	b.n	800ad54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	e378      	b.n	800ad54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a662:	4b7a      	ldr	r3, [pc, #488]	; (800a84c <tcp_process+0x2b8>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d010      	beq.n	800a690 <tcp_process+0xfc>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7d1b      	ldrb	r3, [r3, #20]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d00c      	beq.n	800a690 <tcp_process+0xfc>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7d1b      	ldrb	r3, [r3, #20]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d008      	beq.n	800a690 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8b5b      	ldrh	r3, [r3, #26]
 800a682:	f043 0302 	orr.w	r3, r3, #2
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e361      	b.n	800ad54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	8b5b      	ldrh	r3, [r3, #26]
 800a694:	f003 0310 	and.w	r3, r3, #16
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a69c:	4b70      	ldr	r3, [pc, #448]	; (800a860 <tcp_process+0x2cc>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fc2d 	bl	800bf14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	7d1b      	ldrb	r3, [r3, #20]
 800a6be:	3b02      	subs	r3, #2
 800a6c0:	2b07      	cmp	r3, #7
 800a6c2:	f200 8337 	bhi.w	800ad34 <tcp_process+0x7a0>
 800a6c6:	a201      	add	r2, pc, #4	; (adr r2, 800a6cc <tcp_process+0x138>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6ed 	.word	0x0800a6ed
 800a6d0:	0800a91d 	.word	0x0800a91d
 800a6d4:	0800aa95 	.word	0x0800aa95
 800a6d8:	0800aabf 	.word	0x0800aabf
 800a6dc:	0800abe3 	.word	0x0800abe3
 800a6e0:	0800aa95 	.word	0x0800aa95
 800a6e4:	0800ac6f 	.word	0x0800ac6f
 800a6e8:	0800acff 	.word	0x0800acff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a6ec:	4b57      	ldr	r3, [pc, #348]	; (800a84c <tcp_process+0x2b8>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 80e4 	beq.w	800a8c2 <tcp_process+0x32e>
 800a6fa:	4b54      	ldr	r3, [pc, #336]	; (800a84c <tcp_process+0x2b8>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80dd 	beq.w	800a8c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	4b50      	ldr	r3, [pc, #320]	; (800a850 <tcp_process+0x2bc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	f040 80d5 	bne.w	800a8c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a718:	4b4e      	ldr	r3, [pc, #312]	; (800a854 <tcp_process+0x2c0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a72a:	4b49      	ldr	r3, [pc, #292]	; (800a850 <tcp_process+0x2bc>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a732:	4b4c      	ldr	r3, [pc, #304]	; (800a864 <tcp_process+0x2d0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	89db      	ldrh	r3, [r3, #14]
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a74c:	4b41      	ldr	r3, [pc, #260]	; (800a854 <tcp_process+0x2c0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	1e5a      	subs	r2, r3, #1
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2204      	movs	r2, #4
 800a75a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3304      	adds	r3, #4
 800a764:	4618      	mov	r0, r3
 800a766:	f004 ff47 	bl	800f5f8 <ip4_route>
 800a76a:	4601      	mov	r1, r0
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	461a      	mov	r2, r3
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff f88e 	bl	8009894 <tcp_eff_send_mss_netif>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a784:	009a      	lsls	r2, r3, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	f241 111c 	movw	r1, #4380	; 0x111c
 800a790:	428b      	cmp	r3, r1
 800a792:	bf38      	it	cc
 800a794:	460b      	movcc	r3, r1
 800a796:	429a      	cmp	r2, r3
 800a798:	d204      	bcs.n	800a7a4 <tcp_process+0x210>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	e00d      	b.n	800a7c0 <tcp_process+0x22c>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d904      	bls.n	800a7bc <tcp_process+0x228>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	e001      	b.n	800a7c0 <tcp_process+0x22c>
 800a7bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d106      	bne.n	800a7de <tcp_process+0x24a>
 800a7d0:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <tcp_process+0x2ac>)
 800a7d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a7d6:	4924      	ldr	r1, [pc, #144]	; (800a868 <tcp_process+0x2d4>)
 800a7d8:	481b      	ldr	r0, [pc, #108]	; (800a848 <tcp_process+0x2b4>)
 800a7da:	f00c fad3 	bl	8016d84 <iprintf>
        --pcb->snd_queuelen;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d111      	bne.n	800a81e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <tcp_process+0x280>
 800a806:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <tcp_process+0x2ac>)
 800a808:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a80c:	4917      	ldr	r1, [pc, #92]	; (800a86c <tcp_process+0x2d8>)
 800a80e:	480e      	ldr	r0, [pc, #56]	; (800a848 <tcp_process+0x2b4>)
 800a810:	f00c fab8 	bl	8016d84 <iprintf>
          pcb->unsent = rseg->next;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	66da      	str	r2, [r3, #108]	; 0x6c
 800a81c:	e003      	b.n	800a826 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a826:	69f8      	ldr	r0, [r7, #28]
 800a828:	f7fe fc57 	bl	80090da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11d      	bne.n	800a870 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83a:	861a      	strh	r2, [r3, #48]	; 0x30
 800a83c:	e01f      	b.n	800a87e <tcp_process+0x2ea>
 800a83e:	bf00      	nop
 800a840:	080190f0 	.word	0x080190f0
 800a844:	08019328 	.word	0x08019328
 800a848:	0801913c 	.word	0x0801913c
 800a84c:	200000fc 	.word	0x200000fc
 800a850:	200000f4 	.word	0x200000f4
 800a854:	200000f0 	.word	0x200000f0
 800a858:	08019344 	.word	0x08019344
 800a85c:	200000fd 	.word	0x200000fd
 800a860:	20006970 	.word	0x20006970
 800a864:	200000e0 	.word	0x200000e0
 800a868:	08019364 	.word	0x08019364
 800a86c:	0801937c 	.word	0x0801937c
        } else {
          pcb->rtime = 0;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <tcp_process+0x30a>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6910      	ldr	r0, [r2, #16]
 800a892:	2200      	movs	r2, #0
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	4798      	blx	r3
 800a898:	4603      	mov	r3, r0
 800a89a:	76bb      	strb	r3, [r7, #26]
 800a89c:	e001      	b.n	800a8a2 <tcp_process+0x30e>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a8a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a8a6:	f113 0f0d 	cmn.w	r3, #13
 800a8aa:	d102      	bne.n	800a8b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800a8ac:	f06f 030c 	mvn.w	r3, #12
 800a8b0:	e250      	b.n	800ad54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	8b5b      	ldrh	r3, [r3, #26]
 800a8b6:	f043 0302 	orr.w	r3, r3, #2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a8c0:	e23a      	b.n	800ad38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a8c2:	4b9d      	ldr	r3, [pc, #628]	; (800ab38 <tcp_process+0x5a4>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8234 	beq.w	800ad38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8d0:	4b9a      	ldr	r3, [pc, #616]	; (800ab3c <tcp_process+0x5a8>)
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	4b9a      	ldr	r3, [pc, #616]	; (800ab40 <tcp_process+0x5ac>)
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4b9a      	ldr	r3, [pc, #616]	; (800ab44 <tcp_process+0x5b0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8e0:	4b99      	ldr	r3, [pc, #612]	; (800ab48 <tcp_process+0x5b4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8e4:	885b      	ldrh	r3, [r3, #2]
 800a8e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8e8:	4a97      	ldr	r2, [pc, #604]	; (800ab48 <tcp_process+0x5b4>)
 800a8ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8ec:	8812      	ldrh	r2, [r2, #0]
 800a8ee:	b292      	uxth	r2, r2
 800a8f0:	9202      	str	r2, [sp, #8]
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	4b95      	ldr	r3, [pc, #596]	; (800ab4c <tcp_process+0x5b8>)
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	4b95      	ldr	r3, [pc, #596]	; (800ab50 <tcp_process+0x5bc>)
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f003 f8db 	bl	800dab8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a908:	2b05      	cmp	r3, #5
 800a90a:	f200 8215 	bhi.w	800ad38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f002 fea5 	bl	800d664 <tcp_rexmit_rto>
      break;
 800a91a:	e20d      	b.n	800ad38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a91c:	4b86      	ldr	r3, [pc, #536]	; (800ab38 <tcp_process+0x5a4>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 0310 	and.w	r3, r3, #16
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80a1 	beq.w	800aa6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a92a:	4b84      	ldr	r3, [pc, #528]	; (800ab3c <tcp_process+0x5a8>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	3b01      	subs	r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	db7e      	blt.n	800aa38 <tcp_process+0x4a4>
 800a93a:	4b80      	ldr	r3, [pc, #512]	; (800ab3c <tcp_process+0x5a8>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	dc77      	bgt.n	800aa38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2204      	movs	r2, #4
 800a94c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a956:	23fa      	movs	r3, #250	; 0xfa
 800a958:	76bb      	strb	r3, [r7, #26]
 800a95a:	e01d      	b.n	800a998 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <tcp_process+0x3e0>
 800a966:	4b7b      	ldr	r3, [pc, #492]	; (800ab54 <tcp_process+0x5c0>)
 800a968:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a96c:	497a      	ldr	r1, [pc, #488]	; (800ab58 <tcp_process+0x5c4>)
 800a96e:	487b      	ldr	r0, [pc, #492]	; (800ab5c <tcp_process+0x5c8>)
 800a970:	f00c fa08 	bl	8016d84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <tcp_process+0x400>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	6910      	ldr	r0, [r2, #16]
 800a988:	2200      	movs	r2, #0
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	4798      	blx	r3
 800a98e:	4603      	mov	r3, r0
 800a990:	76bb      	strb	r3, [r7, #26]
 800a992:	e001      	b.n	800a998 <tcp_process+0x404>
 800a994:	23f0      	movs	r3, #240	; 0xf0
 800a996:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a998:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a9a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a9a4:	f113 0f0d 	cmn.w	r3, #13
 800a9a8:	d002      	beq.n	800a9b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7fd fcf0 	bl	8008390 <tcp_abort>
            }
            return ERR_ABRT;
 800a9b0:	f06f 030c 	mvn.w	r3, #12
 800a9b4:	e1ce      	b.n	800ad54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fae0 	bl	800af7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a9bc:	4b68      	ldr	r3, [pc, #416]	; (800ab60 <tcp_process+0x5cc>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <tcp_process+0x43c>
            recv_acked--;
 800a9c4:	4b66      	ldr	r3, [pc, #408]	; (800ab60 <tcp_process+0x5cc>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b64      	ldr	r3, [pc, #400]	; (800ab60 <tcp_process+0x5cc>)
 800a9ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9d4:	009a      	lsls	r2, r3, #2
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800a9e0:	428b      	cmp	r3, r1
 800a9e2:	bf38      	it	cc
 800a9e4:	460b      	movcc	r3, r1
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d204      	bcs.n	800a9f4 <tcp_process+0x460>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	e00d      	b.n	800aa10 <tcp_process+0x47c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d904      	bls.n	800aa0c <tcp_process+0x478>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	e001      	b.n	800aa10 <tcp_process+0x47c>
 800aa0c:	f241 131c 	movw	r3, #4380	; 0x111c
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aa16:	4b53      	ldr	r3, [pc, #332]	; (800ab64 <tcp_process+0x5d0>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	f003 0320 	and.w	r3, r3, #32
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d037      	beq.n	800aa92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	8b5b      	ldrh	r3, [r3, #26]
 800aa26:	f043 0302 	orr.w	r3, r3, #2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2207      	movs	r2, #7
 800aa34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800aa36:	e02c      	b.n	800aa92 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa38:	4b40      	ldr	r3, [pc, #256]	; (800ab3c <tcp_process+0x5a8>)
 800aa3a:	6819      	ldr	r1, [r3, #0]
 800aa3c:	4b40      	ldr	r3, [pc, #256]	; (800ab40 <tcp_process+0x5ac>)
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	461a      	mov	r2, r3
 800aa42:	4b40      	ldr	r3, [pc, #256]	; (800ab44 <tcp_process+0x5b0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa48:	4b3f      	ldr	r3, [pc, #252]	; (800ab48 <tcp_process+0x5b4>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa4c:	885b      	ldrh	r3, [r3, #2]
 800aa4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa50:	4a3d      	ldr	r2, [pc, #244]	; (800ab48 <tcp_process+0x5b4>)
 800aa52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa54:	8812      	ldrh	r2, [r2, #0]
 800aa56:	b292      	uxth	r2, r2
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	4b3b      	ldr	r3, [pc, #236]	; (800ab4c <tcp_process+0x5b8>)
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4b3b      	ldr	r3, [pc, #236]	; (800ab50 <tcp_process+0x5bc>)
 800aa62:	4602      	mov	r2, r0
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f003 f827 	bl	800dab8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800aa6a:	e167      	b.n	800ad3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800aa6c:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <tcp_process+0x5a4>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8161 	beq.w	800ad3c <tcp_process+0x7a8>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	4b30      	ldr	r3, [pc, #192]	; (800ab44 <tcp_process+0x5b0>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	f040 8159 	bne.w	800ad3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f002 fe0c 	bl	800d6a8 <tcp_rexmit>
      break;
 800aa90:	e154      	b.n	800ad3c <tcp_process+0x7a8>
 800aa92:	e153      	b.n	800ad3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fa71 	bl	800af7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800aa9a:	4b32      	ldr	r3, [pc, #200]	; (800ab64 <tcp_process+0x5d0>)
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 0320 	and.w	r3, r3, #32
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 814c 	beq.w	800ad40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8b5b      	ldrh	r3, [r3, #26]
 800aaac:	f043 0302 	orr.w	r3, r3, #2
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2207      	movs	r2, #7
 800aaba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aabc:	e140      	b.n	800ad40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa5c 	bl	800af7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aac4:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <tcp_process+0x5d0>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d071      	beq.n	800abb4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aad0:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <tcp_process+0x5a4>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d060      	beq.n	800ab9e <tcp_process+0x60a>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aae0:	4b16      	ldr	r3, [pc, #88]	; (800ab3c <tcp_process+0x5a8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d15a      	bne.n	800ab9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d156      	bne.n	800ab9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	8b5b      	ldrh	r3, [r3, #26]
 800aaf4:	f043 0302 	orr.w	r3, r3, #2
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7fe fdbe 	bl	8009680 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ab04:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <tcp_process+0x5d4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d105      	bne.n	800ab1a <tcp_process+0x586>
 800ab0e:	4b16      	ldr	r3, [pc, #88]	; (800ab68 <tcp_process+0x5d4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	4a14      	ldr	r2, [pc, #80]	; (800ab68 <tcp_process+0x5d4>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	e02e      	b.n	800ab78 <tcp_process+0x5e4>
 800ab1a:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <tcp_process+0x5d4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e027      	b.n	800ab72 <tcp_process+0x5de>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d11f      	bne.n	800ab6c <tcp_process+0x5d8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	60da      	str	r2, [r3, #12]
 800ab34:	e020      	b.n	800ab78 <tcp_process+0x5e4>
 800ab36:	bf00      	nop
 800ab38:	200000fc 	.word	0x200000fc
 800ab3c:	200000f4 	.word	0x200000f4
 800ab40:	200000fa 	.word	0x200000fa
 800ab44:	200000f0 	.word	0x200000f0
 800ab48:	200000e0 	.word	0x200000e0
 800ab4c:	20003438 	.word	0x20003438
 800ab50:	2000343c 	.word	0x2000343c
 800ab54:	080190f0 	.word	0x080190f0
 800ab58:	08019390 	.word	0x08019390
 800ab5c:	0801913c 	.word	0x0801913c
 800ab60:	200000f8 	.word	0x200000f8
 800ab64:	200000fd 	.word	0x200000fd
 800ab68:	2000696c 	.word	0x2000696c
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1d4      	bne.n	800ab22 <tcp_process+0x58e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	60da      	str	r2, [r3, #12]
 800ab7e:	4b77      	ldr	r3, [pc, #476]	; (800ad5c <tcp_process+0x7c8>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	220a      	movs	r2, #10
 800ab88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ab8a:	4b75      	ldr	r3, [pc, #468]	; (800ad60 <tcp_process+0x7cc>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60da      	str	r2, [r3, #12]
 800ab92:	4a73      	ldr	r2, [pc, #460]	; (800ad60 <tcp_process+0x7cc>)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	f003 f950 	bl	800de3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ab9c:	e0d2      	b.n	800ad44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	8b5b      	ldrh	r3, [r3, #26]
 800aba2:	f043 0302 	orr.w	r3, r3, #2
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2208      	movs	r2, #8
 800abb0:	751a      	strb	r2, [r3, #20]
      break;
 800abb2:	e0c7      	b.n	800ad44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abb4:	4b6b      	ldr	r3, [pc, #428]	; (800ad64 <tcp_process+0x7d0>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 0310 	and.w	r3, r3, #16
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80c1 	beq.w	800ad44 <tcp_process+0x7b0>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abc6:	4b68      	ldr	r3, [pc, #416]	; (800ad68 <tcp_process+0x7d4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	f040 80ba 	bne.w	800ad44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f040 80b5 	bne.w	800ad44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2206      	movs	r2, #6
 800abde:	751a      	strb	r2, [r3, #20]
      break;
 800abe0:	e0b0      	b.n	800ad44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f9ca 	bl	800af7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800abe8:	4b60      	ldr	r3, [pc, #384]	; (800ad6c <tcp_process+0x7d8>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 0320 	and.w	r3, r3, #32
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 80a9 	beq.w	800ad48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	8b5b      	ldrh	r3, [r3, #26]
 800abfa:	f043 0302 	orr.w	r3, r3, #2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fe fd3b 	bl	8009680 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ac0a:	4b59      	ldr	r3, [pc, #356]	; (800ad70 <tcp_process+0x7dc>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d105      	bne.n	800ac20 <tcp_process+0x68c>
 800ac14:	4b56      	ldr	r3, [pc, #344]	; (800ad70 <tcp_process+0x7dc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4a55      	ldr	r2, [pc, #340]	; (800ad70 <tcp_process+0x7dc>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e013      	b.n	800ac48 <tcp_process+0x6b4>
 800ac20:	4b53      	ldr	r3, [pc, #332]	; (800ad70 <tcp_process+0x7dc>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	613b      	str	r3, [r7, #16]
 800ac26:	e00c      	b.n	800ac42 <tcp_process+0x6ae>
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d104      	bne.n	800ac3c <tcp_process+0x6a8>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	60da      	str	r2, [r3, #12]
 800ac3a:	e005      	b.n	800ac48 <tcp_process+0x6b4>
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	613b      	str	r3, [r7, #16]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1ef      	bne.n	800ac28 <tcp_process+0x694>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	60da      	str	r2, [r3, #12]
 800ac4e:	4b43      	ldr	r3, [pc, #268]	; (800ad5c <tcp_process+0x7c8>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	220a      	movs	r2, #10
 800ac58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ac5a:	4b41      	ldr	r3, [pc, #260]	; (800ad60 <tcp_process+0x7cc>)
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	4a3f      	ldr	r2, [pc, #252]	; (800ad60 <tcp_process+0x7cc>)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	f003 f8e8 	bl	800de3c <tcp_timer_needed>
      }
      break;
 800ac6c:	e06c      	b.n	800ad48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f984 	bl	800af7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ac74:	4b3b      	ldr	r3, [pc, #236]	; (800ad64 <tcp_process+0x7d0>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d065      	beq.n	800ad4c <tcp_process+0x7b8>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac84:	4b38      	ldr	r3, [pc, #224]	; (800ad68 <tcp_process+0x7d4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d15f      	bne.n	800ad4c <tcp_process+0x7b8>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d15b      	bne.n	800ad4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7fe fcf3 	bl	8009680 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ac9a:	4b35      	ldr	r3, [pc, #212]	; (800ad70 <tcp_process+0x7dc>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d105      	bne.n	800acb0 <tcp_process+0x71c>
 800aca4:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <tcp_process+0x7dc>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	4a31      	ldr	r2, [pc, #196]	; (800ad70 <tcp_process+0x7dc>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	e013      	b.n	800acd8 <tcp_process+0x744>
 800acb0:	4b2f      	ldr	r3, [pc, #188]	; (800ad70 <tcp_process+0x7dc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	e00c      	b.n	800acd2 <tcp_process+0x73e>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d104      	bne.n	800accc <tcp_process+0x738>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	60da      	str	r2, [r3, #12]
 800acca:	e005      	b.n	800acd8 <tcp_process+0x744>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1ef      	bne.n	800acb8 <tcp_process+0x724>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	60da      	str	r2, [r3, #12]
 800acde:	4b1f      	ldr	r3, [pc, #124]	; (800ad5c <tcp_process+0x7c8>)
 800ace0:	2201      	movs	r2, #1
 800ace2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	220a      	movs	r2, #10
 800ace8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800acea:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <tcp_process+0x7cc>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	4a1b      	ldr	r2, [pc, #108]	; (800ad60 <tcp_process+0x7cc>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	f003 f8a0 	bl	800de3c <tcp_timer_needed>
      }
      break;
 800acfc:	e026      	b.n	800ad4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f93c 	bl	800af7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <tcp_process+0x7d0>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01f      	beq.n	800ad50 <tcp_process+0x7bc>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad14:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <tcp_process+0x7d4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d119      	bne.n	800ad50 <tcp_process+0x7bc>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d115      	bne.n	800ad50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ad24:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <tcp_process+0x7d8>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f043 0310 	orr.w	r3, r3, #16
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <tcp_process+0x7d8>)
 800ad30:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ad32:	e00d      	b.n	800ad50 <tcp_process+0x7bc>
    default:
      break;
 800ad34:	bf00      	nop
 800ad36:	e00c      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad38:	bf00      	nop
 800ad3a:	e00a      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad3c:	bf00      	nop
 800ad3e:	e008      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad40:	bf00      	nop
 800ad42:	e006      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad44:	bf00      	nop
 800ad46:	e004      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad48:	bf00      	nop
 800ad4a:	e002      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad4c:	bf00      	nop
 800ad4e:	e000      	b.n	800ad52 <tcp_process+0x7be>
      break;
 800ad50:	bf00      	nop
  }
  return ERR_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3724      	adds	r7, #36	; 0x24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	20006968 	.word	0x20006968
 800ad60:	2000697c 	.word	0x2000697c
 800ad64:	200000fc 	.word	0x200000fc
 800ad68:	200000f4 	.word	0x200000f4
 800ad6c:	200000fd 	.word	0x200000fd
 800ad70:	2000696c 	.word	0x2000696c

0800ad74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <tcp_oos_insert_segment+0x1e>
 800ad84:	4b3b      	ldr	r3, [pc, #236]	; (800ae74 <tcp_oos_insert_segment+0x100>)
 800ad86:	f240 421f 	movw	r2, #1055	; 0x41f
 800ad8a:	493b      	ldr	r1, [pc, #236]	; (800ae78 <tcp_oos_insert_segment+0x104>)
 800ad8c:	483b      	ldr	r0, [pc, #236]	; (800ae7c <tcp_oos_insert_segment+0x108>)
 800ad8e:	f00b fff9 	bl	8016d84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fb faac 	bl	80062f8 <lwip_htons>
 800ada0:	4603      	mov	r3, r0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d028      	beq.n	800adfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800adac:	6838      	ldr	r0, [r7, #0]
 800adae:	f7fe f97f 	bl	80090b0 <tcp_segs_free>
    next = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	e056      	b.n	800ae66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	899b      	ldrh	r3, [r3, #12]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fb fa99 	bl	80062f8 <lwip_htons>
 800adc6:	4603      	mov	r3, r0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00d      	beq.n	800adee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	899b      	ldrh	r3, [r3, #12]
 800add8:	b29c      	uxth	r4, r3
 800adda:	2001      	movs	r0, #1
 800addc:	f7fb fa8c 	bl	80062f8 <lwip_htons>
 800ade0:	4603      	mov	r3, r0
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	4322      	orrs	r2, r4
 800adea:	b292      	uxth	r2, r2
 800adec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7fe f96e 	bl	80090da <tcp_seg_free>
    while (next &&
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00e      	beq.n	800ae22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	891b      	ldrh	r3, [r3, #8]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <tcp_oos_insert_segment+0x10c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	441a      	add	r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	8909      	ldrh	r1, [r1, #8]
 800ae1a:	440b      	add	r3, r1
 800ae1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	daca      	bge.n	800adb8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01e      	beq.n	800ae66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	891b      	ldrh	r3, [r3, #8]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <tcp_oos_insert_segment+0x10c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	441a      	add	r2, r3
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dd12      	ble.n	800ae66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <tcp_oos_insert_segment+0x10c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fc fb77 	bl	8007554 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	601a      	str	r2, [r3, #0]
}
 800ae6c:	bf00      	nop
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd90      	pop	{r4, r7, pc}
 800ae74:	080190f0 	.word	0x080190f0
 800ae78:	080193b0 	.word	0x080193b0
 800ae7c:	0801913c 	.word	0x0801913c
 800ae80:	200000f0 	.word	0x200000f0

0800ae84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ae84:	b5b0      	push	{r4, r5, r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ae92:	e03e      	b.n	800af12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fc fd64 	bl	8007970 <pbuf_clen>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aeb2:	8a7a      	ldrh	r2, [r7, #18]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d906      	bls.n	800aec6 <tcp_free_acked_segments+0x42>
 800aeb8:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <tcp_free_acked_segments+0xe0>)
 800aeba:	f240 4257 	movw	r2, #1111	; 0x457
 800aebe:	492a      	ldr	r1, [pc, #168]	; (800af68 <tcp_free_acked_segments+0xe4>)
 800aec0:	482a      	ldr	r0, [pc, #168]	; (800af6c <tcp_free_acked_segments+0xe8>)
 800aec2:	f00b ff5f 	bl	8016d84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800aecc:	8a7b      	ldrh	r3, [r7, #18]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	891a      	ldrh	r2, [r3, #8]
 800aedc:	4b24      	ldr	r3, [pc, #144]	; (800af70 <tcp_free_acked_segments+0xec>)
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	4413      	add	r3, r2
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	4b22      	ldr	r3, [pc, #136]	; (800af70 <tcp_free_acked_segments+0xec>)
 800aee6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800aee8:	6978      	ldr	r0, [r7, #20]
 800aeea:	f7fe f8f6 	bl	80090da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00c      	beq.n	800af12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <tcp_free_acked_segments+0x8e>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d106      	bne.n	800af12 <tcp_free_acked_segments+0x8e>
 800af04:	4b17      	ldr	r3, [pc, #92]	; (800af64 <tcp_free_acked_segments+0xe0>)
 800af06:	f240 4261 	movw	r2, #1121	; 0x461
 800af0a:	491a      	ldr	r1, [pc, #104]	; (800af74 <tcp_free_acked_segments+0xf0>)
 800af0c:	4817      	ldr	r0, [pc, #92]	; (800af6c <tcp_free_acked_segments+0xe8>)
 800af0e:	f00b ff39 	bl	8016d84 <iprintf>
  while (seg_list != NULL &&
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d020      	beq.n	800af5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fb f9ff 	bl	8006322 <lwip_htonl>
 800af24:	4604      	mov	r4, r0
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	891b      	ldrh	r3, [r3, #8]
 800af2a:	461d      	mov	r5, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	899b      	ldrh	r3, [r3, #12]
 800af32:	b29b      	uxth	r3, r3
 800af34:	4618      	mov	r0, r3
 800af36:	f7fb f9df 	bl	80062f8 <lwip_htons>
 800af3a:	4603      	mov	r3, r0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <tcp_free_acked_segments+0xc6>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <tcp_free_acked_segments+0xc8>
 800af4a:	2300      	movs	r3, #0
 800af4c:	442b      	add	r3, r5
 800af4e:	18e2      	adds	r2, r4, r3
 800af50:	4b09      	ldr	r3, [pc, #36]	; (800af78 <tcp_free_acked_segments+0xf4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800af56:	2b00      	cmp	r3, #0
 800af58:	dd9c      	ble.n	800ae94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800af5a:	68bb      	ldr	r3, [r7, #8]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bdb0      	pop	{r4, r5, r7, pc}
 800af64:	080190f0 	.word	0x080190f0
 800af68:	080193d8 	.word	0x080193d8
 800af6c:	0801913c 	.word	0x0801913c
 800af70:	200000f8 	.word	0x200000f8
 800af74:	08019400 	.word	0x08019400
 800af78:	200000f4 	.word	0x200000f4

0800af7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800af7c:	b5b0      	push	{r4, r5, r7, lr}
 800af7e:	b094      	sub	sp, #80	; 0x50
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d106      	bne.n	800af9c <tcp_receive+0x20>
 800af8e:	4ba6      	ldr	r3, [pc, #664]	; (800b228 <tcp_receive+0x2ac>)
 800af90:	f240 427b 	movw	r2, #1147	; 0x47b
 800af94:	49a5      	ldr	r1, [pc, #660]	; (800b22c <tcp_receive+0x2b0>)
 800af96:	48a6      	ldr	r0, [pc, #664]	; (800b230 <tcp_receive+0x2b4>)
 800af98:	f00b fef4 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	7d1b      	ldrb	r3, [r3, #20]
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d806      	bhi.n	800afb2 <tcp_receive+0x36>
 800afa4:	4ba0      	ldr	r3, [pc, #640]	; (800b228 <tcp_receive+0x2ac>)
 800afa6:	f240 427c 	movw	r2, #1148	; 0x47c
 800afaa:	49a2      	ldr	r1, [pc, #648]	; (800b234 <tcp_receive+0x2b8>)
 800afac:	48a0      	ldr	r0, [pc, #640]	; (800b230 <tcp_receive+0x2b4>)
 800afae:	f00b fee9 	bl	8016d84 <iprintf>

  if (flags & TCP_ACK) {
 800afb2:	4ba1      	ldr	r3, [pc, #644]	; (800b238 <tcp_receive+0x2bc>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8263 	beq.w	800b486 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afc6:	461a      	mov	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afcc:	4413      	add	r3, r2
 800afce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd4:	4b99      	ldr	r3, [pc, #612]	; (800b23c <tcp_receive+0x2c0>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	db1b      	blt.n	800b016 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afe2:	4b96      	ldr	r3, [pc, #600]	; (800b23c <tcp_receive+0x2c0>)
 800afe4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d106      	bne.n	800aff8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afee:	4b94      	ldr	r3, [pc, #592]	; (800b240 <tcp_receive+0x2c4>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	db0e      	blt.n	800b016 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800affc:	4b90      	ldr	r3, [pc, #576]	; (800b240 <tcp_receive+0x2c4>)
 800affe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b000:	429a      	cmp	r2, r3
 800b002:	d125      	bne.n	800b050 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b004:	4b8f      	ldr	r3, [pc, #572]	; (800b244 <tcp_receive+0x2c8>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	89db      	ldrh	r3, [r3, #14]
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b012:	429a      	cmp	r2, r3
 800b014:	d91c      	bls.n	800b050 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b016:	4b8b      	ldr	r3, [pc, #556]	; (800b244 <tcp_receive+0x2c8>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	89db      	ldrh	r3, [r3, #14]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b030:	429a      	cmp	r2, r3
 800b032:	d205      	bcs.n	800b040 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b040:	4b7e      	ldr	r3, [pc, #504]	; (800b23c <tcp_receive+0x2c0>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b048:	4b7d      	ldr	r3, [pc, #500]	; (800b240 <tcp_receive+0x2c4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b050:	4b7b      	ldr	r3, [pc, #492]	; (800b240 <tcp_receive+0x2c4>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc58      	bgt.n	800b110 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b05e:	4b7a      	ldr	r3, [pc, #488]	; (800b248 <tcp_receive+0x2cc>)
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d14b      	bne.n	800b0fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b070:	4413      	add	r3, r2
 800b072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b074:	429a      	cmp	r2, r3
 800b076:	d142      	bne.n	800b0fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	db3d      	blt.n	800b0fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b086:	4b6e      	ldr	r3, [pc, #440]	; (800b240 <tcp_receive+0x2c4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d137      	bne.n	800b0fe <tcp_receive+0x182>
              found_dupack = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b098:	2bff      	cmp	r3, #255	; 0xff
 800b09a:	d007      	beq.n	800b0ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d91b      	bls.n	800b0ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0c0:	4413      	add	r3, r2
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d30a      	bcc.n	800b0e4 <tcp_receive+0x168>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0d8:	4413      	add	r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b0e2:	e004      	b.n	800b0ee <tcp_receive+0x172>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d902      	bls.n	800b0fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f002 fb41 	bl	800d780 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b100:	2b00      	cmp	r3, #0
 800b102:	f040 8160 	bne.w	800b3c6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b10e:	e15a      	b.n	800b3c6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b110:	4b4b      	ldr	r3, [pc, #300]	; (800b240 <tcp_receive+0x2c4>)
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f2c0 814d 	blt.w	800b3bc <tcp_receive+0x440>
 800b122:	4b47      	ldr	r3, [pc, #284]	; (800b240 <tcp_receive+0x2c4>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f300 8145 	bgt.w	800b3bc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	8b5b      	ldrh	r3, [r3, #26]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	8b5b      	ldrh	r3, [r3, #26]
 800b142:	f023 0304 	bic.w	r3, r3, #4
 800b146:	b29a      	uxth	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b16e:	10db      	asrs	r3, r3, #3
 800b170:	b21b      	sxth	r3, r3
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	b29b      	uxth	r3, r3
 800b180:	b21a      	sxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b188:	4b2d      	ldr	r3, [pc, #180]	; (800b240 <tcp_receive+0x2c4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	b29b      	uxth	r3, r3
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b1a0:	4b27      	ldr	r3, [pc, #156]	; (800b240 <tcp_receive+0x2c4>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	7d1b      	ldrb	r3, [r3, #20]
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	f240 8096 	bls.w	800b2de <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d244      	bcs.n	800b24c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8b5b      	ldrh	r3, [r3, #26]
 800b1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <tcp_receive+0x256>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <tcp_receive+0x258>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b1d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1e2:	fb12 f303 	smulbb	r3, r2, r3
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	bf28      	it	cs
 800b1ee:	4613      	movcs	r3, r2
 800b1f0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1fa:	4413      	add	r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b204:	429a      	cmp	r2, r3
 800b206:	d309      	bcc.n	800b21c <tcp_receive+0x2a0>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b20e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b210:	4413      	add	r3, r2
 800b212:	b29a      	uxth	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b21a:	e060      	b.n	800b2de <tcp_receive+0x362>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b226:	e05a      	b.n	800b2de <tcp_receive+0x362>
 800b228:	080190f0 	.word	0x080190f0
 800b22c:	08019420 	.word	0x08019420
 800b230:	0801913c 	.word	0x0801913c
 800b234:	0801943c 	.word	0x0801943c
 800b238:	200000fc 	.word	0x200000fc
 800b23c:	200000f0 	.word	0x200000f0
 800b240:	200000f4 	.word	0x200000f4
 800b244:	200000e0 	.word	0x200000e0
 800b248:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b252:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b254:	4413      	add	r3, r2
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b25e:	429a      	cmp	r2, r3
 800b260:	d309      	bcc.n	800b276 <tcp_receive+0x2fa>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b26a:	4413      	add	r3, r2
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b274:	e004      	b.n	800b280 <tcp_receive+0x304>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d326      	bcc.n	800b2de <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b0:	4413      	add	r3, r2
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d30a      	bcc.n	800b2d4 <tcp_receive+0x358>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2c8:	4413      	add	r3, r2
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b2d2:	e004      	b.n	800b2de <tcp_receive+0x362>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e6:	4a98      	ldr	r2, [pc, #608]	; (800b548 <tcp_receive+0x5cc>)
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff fdcb 	bl	800ae84 <tcp_free_acked_segments>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fc:	4a93      	ldr	r2, [pc, #588]	; (800b54c <tcp_receive+0x5d0>)
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff fdc0 	bl	800ae84 <tcp_free_acked_segments>
 800b304:	4602      	mov	r2, r0
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d104      	bne.n	800b31c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b318:	861a      	strh	r2, [r3, #48]	; 0x30
 800b31a:	e002      	b.n	800b322 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b33e:	4b84      	ldr	r3, [pc, #528]	; (800b550 <tcp_receive+0x5d4>)
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	4413      	add	r3, r2
 800b344:	b29a      	uxth	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8b5b      	ldrh	r3, [r3, #26]
 800b350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b354:	2b00      	cmp	r3, #0
 800b356:	d035      	beq.n	800b3c4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d118      	bne.n	800b392 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00c      	beq.n	800b382 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	4618      	mov	r0, r3
 800b376:	f7fa ffd4 	bl	8006322 <lwip_htonl>
 800b37a:	4603      	mov	r3, r0
 800b37c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dc20      	bgt.n	800b3c4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8b5b      	ldrh	r3, [r3, #26]
 800b386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b390:	e018      	b.n	800b3c4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fa ffbf 	bl	8006322 <lwip_htonl>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	1ae3      	subs	r3, r4, r3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dc0b      	bgt.n	800b3c4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	8b5b      	ldrh	r3, [r3, #26]
 800b3b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b3ba:	e003      	b.n	800b3c4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f002 fbcd 	bl	800db5c <tcp_send_empty_ack>
 800b3c2:	e000      	b.n	800b3c6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b3c4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d05b      	beq.n	800b486 <tcp_receive+0x50a>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d2:	4b60      	ldr	r3, [pc, #384]	; (800b554 <tcp_receive+0x5d8>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	da54      	bge.n	800b486 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b3dc:	4b5e      	ldr	r3, [pc, #376]	; (800b558 <tcp_receive+0x5dc>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b3f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b3fa:	10db      	asrs	r3, r3, #3
 800b3fc:	b21b      	sxth	r3, r3
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	b29b      	uxth	r3, r3
 800b404:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b40e:	b29a      	uxth	r2, r3
 800b410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b414:	4413      	add	r3, r2
 800b416:	b29b      	uxth	r3, r3
 800b418:	b21a      	sxth	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b41e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b422:	2b00      	cmp	r3, #0
 800b424:	da05      	bge.n	800b432 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b42a:	425b      	negs	r3, r3
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b432:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b43c:	109b      	asrs	r3, r3, #2
 800b43e:	b21b      	sxth	r3, r3
 800b440:	b29b      	uxth	r3, r3
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	b29b      	uxth	r3, r3
 800b446:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b450:	b29a      	uxth	r2, r3
 800b452:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b456:	4413      	add	r3, r2
 800b458:	b29b      	uxth	r3, r3
 800b45a:	b21a      	sxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b466:	10db      	asrs	r3, r3, #3
 800b468:	b21b      	sxth	r3, r3
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b472:	b29b      	uxth	r3, r3
 800b474:	4413      	add	r3, r2
 800b476:	b29b      	uxth	r3, r3
 800b478:	b21a      	sxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b486:	4b35      	ldr	r3, [pc, #212]	; (800b55c <tcp_receive+0x5e0>)
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 84e1 	beq.w	800be52 <tcp_receive+0xed6>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7d1b      	ldrb	r3, [r3, #20]
 800b494:	2b06      	cmp	r3, #6
 800b496:	f200 84dc 	bhi.w	800be52 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b49e:	4b30      	ldr	r3, [pc, #192]	; (800b560 <tcp_receive+0x5e4>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f2c0 808e 	blt.w	800b5c8 <tcp_receive+0x64c>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4b0:	4b2a      	ldr	r3, [pc, #168]	; (800b55c <tcp_receive+0x5e0>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <tcp_receive+0x5e4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	440b      	add	r3, r1
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	3301      	adds	r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f300 8081 	bgt.w	800b5c8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b4c6:	4b27      	ldr	r3, [pc, #156]	; (800b564 <tcp_receive+0x5e8>)
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4d0:	4b23      	ldr	r3, [pc, #140]	; (800b560 <tcp_receive+0x5e4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b4d8:	4b22      	ldr	r3, [pc, #136]	; (800b564 <tcp_receive+0x5e8>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <tcp_receive+0x572>
 800b4e0:	4b21      	ldr	r3, [pc, #132]	; (800b568 <tcp_receive+0x5ec>)
 800b4e2:	f240 5294 	movw	r2, #1428	; 0x594
 800b4e6:	4921      	ldr	r1, [pc, #132]	; (800b56c <tcp_receive+0x5f0>)
 800b4e8:	4821      	ldr	r0, [pc, #132]	; (800b570 <tcp_receive+0x5f4>)
 800b4ea:	f00b fc4b 	bl	8016d84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d906      	bls.n	800b506 <tcp_receive+0x58a>
 800b4f8:	4b1b      	ldr	r3, [pc, #108]	; (800b568 <tcp_receive+0x5ec>)
 800b4fa:	f240 5295 	movw	r2, #1429	; 0x595
 800b4fe:	491d      	ldr	r1, [pc, #116]	; (800b574 <tcp_receive+0x5f8>)
 800b500:	481b      	ldr	r0, [pc, #108]	; (800b570 <tcp_receive+0x5f4>)
 800b502:	f00b fc3f 	bl	8016d84 <iprintf>
      off = (u16_t)off32;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b50c:	4b15      	ldr	r3, [pc, #84]	; (800b564 <tcp_receive+0x5e8>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	891b      	ldrh	r3, [r3, #8]
 800b512:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b516:	429a      	cmp	r2, r3
 800b518:	d906      	bls.n	800b528 <tcp_receive+0x5ac>
 800b51a:	4b13      	ldr	r3, [pc, #76]	; (800b568 <tcp_receive+0x5ec>)
 800b51c:	f240 5297 	movw	r2, #1431	; 0x597
 800b520:	4915      	ldr	r1, [pc, #84]	; (800b578 <tcp_receive+0x5fc>)
 800b522:	4813      	ldr	r0, [pc, #76]	; (800b570 <tcp_receive+0x5f4>)
 800b524:	f00b fc2e 	bl	8016d84 <iprintf>
      inseg.len -= off;
 800b528:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <tcp_receive+0x5e8>)
 800b52a:	891a      	ldrh	r2, [r3, #8]
 800b52c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	b29a      	uxth	r2, r3
 800b534:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <tcp_receive+0x5e8>)
 800b536:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <tcp_receive+0x5e8>)
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	891a      	ldrh	r2, [r3, #8]
 800b53e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b546:	e029      	b.n	800b59c <tcp_receive+0x620>
 800b548:	08019458 	.word	0x08019458
 800b54c:	08019460 	.word	0x08019460
 800b550:	200000f8 	.word	0x200000f8
 800b554:	200000f4 	.word	0x200000f4
 800b558:	20006970 	.word	0x20006970
 800b55c:	200000fa 	.word	0x200000fa
 800b560:	200000f0 	.word	0x200000f0
 800b564:	200000d0 	.word	0x200000d0
 800b568:	080190f0 	.word	0x080190f0
 800b56c:	08019468 	.word	0x08019468
 800b570:	0801913c 	.word	0x0801913c
 800b574:	08019478 	.word	0x08019478
 800b578:	08019488 	.word	0x08019488
        off -= p->len;
 800b57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b57e:	895b      	ldrh	r3, [r3, #10]
 800b580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b58c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b58e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b592:	2200      	movs	r2, #0
 800b594:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b59e:	895b      	ldrh	r3, [r3, #10]
 800b5a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d8e9      	bhi.n	800b57c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b5b0:	f7fc f8d0 	bl	8007754 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	4a91      	ldr	r2, [pc, #580]	; (800b800 <tcp_receive+0x884>)
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	4b91      	ldr	r3, [pc, #580]	; (800b804 <tcp_receive+0x888>)
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	4a8f      	ldr	r2, [pc, #572]	; (800b800 <tcp_receive+0x884>)
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b5c6:	e00d      	b.n	800b5e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b5c8:	4b8d      	ldr	r3, [pc, #564]	; (800b800 <tcp_receive+0x884>)
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	da06      	bge.n	800b5e4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	8b5b      	ldrh	r3, [r3, #26]
 800b5da:	f043 0302 	orr.w	r3, r3, #2
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b5e4:	4b86      	ldr	r3, [pc, #536]	; (800b800 <tcp_receive+0x884>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f2c0 842a 	blt.w	800be48 <tcp_receive+0xecc>
 800b5f4:	4b82      	ldr	r3, [pc, #520]	; (800b800 <tcp_receive+0x884>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b600:	440b      	add	r3, r1
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	3301      	adds	r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	f300 841e 	bgt.w	800be48 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b610:	4b7b      	ldr	r3, [pc, #492]	; (800b800 <tcp_receive+0x884>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	f040 829a 	bne.w	800bb4e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b61a:	4b7a      	ldr	r3, [pc, #488]	; (800b804 <tcp_receive+0x888>)
 800b61c:	891c      	ldrh	r4, [r3, #8]
 800b61e:	4b79      	ldr	r3, [pc, #484]	; (800b804 <tcp_receive+0x888>)
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	b29b      	uxth	r3, r3
 800b626:	4618      	mov	r0, r3
 800b628:	f7fa fe66 	bl	80062f8 <lwip_htons>
 800b62c:	4603      	mov	r3, r0
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <tcp_receive+0x6c0>
 800b638:	2301      	movs	r3, #1
 800b63a:	e000      	b.n	800b63e <tcp_receive+0x6c2>
 800b63c:	2300      	movs	r3, #0
 800b63e:	4423      	add	r3, r4
 800b640:	b29a      	uxth	r2, r3
 800b642:	4b71      	ldr	r3, [pc, #452]	; (800b808 <tcp_receive+0x88c>)
 800b644:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b64a:	4b6f      	ldr	r3, [pc, #444]	; (800b808 <tcp_receive+0x88c>)
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d275      	bcs.n	800b73e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b652:	4b6c      	ldr	r3, [pc, #432]	; (800b804 <tcp_receive+0x888>)
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	899b      	ldrh	r3, [r3, #12]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fa fe4c 	bl	80062f8 <lwip_htons>
 800b660:	4603      	mov	r3, r0
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01f      	beq.n	800b6ac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b66c:	4b65      	ldr	r3, [pc, #404]	; (800b804 <tcp_receive+0x888>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	899b      	ldrh	r3, [r3, #12]
 800b672:	b29b      	uxth	r3, r3
 800b674:	b21b      	sxth	r3, r3
 800b676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b67a:	b21c      	sxth	r4, r3
 800b67c:	4b61      	ldr	r3, [pc, #388]	; (800b804 <tcp_receive+0x888>)
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	899b      	ldrh	r3, [r3, #12]
 800b682:	b29b      	uxth	r3, r3
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa fe37 	bl	80062f8 <lwip_htons>
 800b68a:	4603      	mov	r3, r0
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b694:	b29b      	uxth	r3, r3
 800b696:	4618      	mov	r0, r3
 800b698:	f7fa fe2e 	bl	80062f8 <lwip_htons>
 800b69c:	4603      	mov	r3, r0
 800b69e:	b21b      	sxth	r3, r3
 800b6a0:	4323      	orrs	r3, r4
 800b6a2:	b21a      	sxth	r2, r3
 800b6a4:	4b57      	ldr	r3, [pc, #348]	; (800b804 <tcp_receive+0x888>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b6b0:	4b54      	ldr	r3, [pc, #336]	; (800b804 <tcp_receive+0x888>)
 800b6b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b6b4:	4b53      	ldr	r3, [pc, #332]	; (800b804 <tcp_receive+0x888>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	899b      	ldrh	r3, [r3, #12]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fa fe1b 	bl	80062f8 <lwip_htons>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <tcp_receive+0x75e>
            inseg.len -= 1;
 800b6ce:	4b4d      	ldr	r3, [pc, #308]	; (800b804 <tcp_receive+0x888>)
 800b6d0:	891b      	ldrh	r3, [r3, #8]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	4b4b      	ldr	r3, [pc, #300]	; (800b804 <tcp_receive+0x888>)
 800b6d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b6da:	4b4a      	ldr	r3, [pc, #296]	; (800b804 <tcp_receive+0x888>)
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	4a49      	ldr	r2, [pc, #292]	; (800b804 <tcp_receive+0x888>)
 800b6e0:	8912      	ldrh	r2, [r2, #8]
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fb ff35 	bl	8007554 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b6ea:	4b46      	ldr	r3, [pc, #280]	; (800b804 <tcp_receive+0x888>)
 800b6ec:	891c      	ldrh	r4, [r3, #8]
 800b6ee:	4b45      	ldr	r3, [pc, #276]	; (800b804 <tcp_receive+0x888>)
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	899b      	ldrh	r3, [r3, #12]
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fa fdfe 	bl	80062f8 <lwip_htons>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f003 0303 	and.w	r3, r3, #3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <tcp_receive+0x790>
 800b708:	2301      	movs	r3, #1
 800b70a:	e000      	b.n	800b70e <tcp_receive+0x792>
 800b70c:	2300      	movs	r3, #0
 800b70e:	4423      	add	r3, r4
 800b710:	b29a      	uxth	r2, r3
 800b712:	4b3d      	ldr	r3, [pc, #244]	; (800b808 <tcp_receive+0x88c>)
 800b714:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b716:	4b3c      	ldr	r3, [pc, #240]	; (800b808 <tcp_receive+0x88c>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	4b38      	ldr	r3, [pc, #224]	; (800b800 <tcp_receive+0x884>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	441a      	add	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b72a:	440b      	add	r3, r1
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d006      	beq.n	800b73e <tcp_receive+0x7c2>
 800b730:	4b36      	ldr	r3, [pc, #216]	; (800b80c <tcp_receive+0x890>)
 800b732:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b736:	4936      	ldr	r1, [pc, #216]	; (800b810 <tcp_receive+0x894>)
 800b738:	4836      	ldr	r0, [pc, #216]	; (800b814 <tcp_receive+0x898>)
 800b73a:	f00b fb23 	bl	8016d84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80e7 	beq.w	800b916 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b748:	4b2e      	ldr	r3, [pc, #184]	; (800b804 <tcp_receive+0x888>)
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	899b      	ldrh	r3, [r3, #12]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4618      	mov	r0, r3
 800b752:	f7fa fdd1 	bl	80062f8 <lwip_htons>
 800b756:	4603      	mov	r3, r0
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d010      	beq.n	800b784 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b762:	e00a      	b.n	800b77a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b768:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7fd fcb0 	bl	80090da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1f0      	bne.n	800b764 <tcp_receive+0x7e8>
 800b782:	e0c8      	b.n	800b916 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b788:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b78a:	e052      	b.n	800b832 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	899b      	ldrh	r3, [r3, #12]
 800b792:	b29b      	uxth	r3, r3
 800b794:	4618      	mov	r0, r3
 800b796:	f7fa fdaf 	bl	80062f8 <lwip_htons>
 800b79a:	4603      	mov	r3, r0
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d03d      	beq.n	800b822 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b7a6:	4b17      	ldr	r3, [pc, #92]	; (800b804 <tcp_receive+0x888>)
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	899b      	ldrh	r3, [r3, #12]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fa fda2 	bl	80062f8 <lwip_htons>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d130      	bne.n	800b822 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b7c0:	4b10      	ldr	r3, [pc, #64]	; (800b804 <tcp_receive+0x888>)
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	899b      	ldrh	r3, [r3, #12]
 800b7c6:	b29c      	uxth	r4, r3
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7fa fd95 	bl	80062f8 <lwip_htons>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <tcp_receive+0x888>)
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	4322      	orrs	r2, r4
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b7dc:	4b09      	ldr	r3, [pc, #36]	; (800b804 <tcp_receive+0x888>)
 800b7de:	891c      	ldrh	r4, [r3, #8]
 800b7e0:	4b08      	ldr	r3, [pc, #32]	; (800b804 <tcp_receive+0x888>)
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	899b      	ldrh	r3, [r3, #12]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fa fd85 	bl	80062f8 <lwip_htons>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 0303 	and.w	r3, r3, #3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00e      	beq.n	800b818 <tcp_receive+0x89c>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e00d      	b.n	800b81a <tcp_receive+0x89e>
 800b7fe:	bf00      	nop
 800b800:	200000f0 	.word	0x200000f0
 800b804:	200000d0 	.word	0x200000d0
 800b808:	200000fa 	.word	0x200000fa
 800b80c:	080190f0 	.word	0x080190f0
 800b810:	08019498 	.word	0x08019498
 800b814:	0801913c 	.word	0x0801913c
 800b818:	2300      	movs	r3, #0
 800b81a:	4423      	add	r3, r4
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	4b98      	ldr	r3, [pc, #608]	; (800ba80 <tcp_receive+0xb04>)
 800b820:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b824:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b82c:	6938      	ldr	r0, [r7, #16]
 800b82e:	f7fd fc54 	bl	80090da <tcp_seg_free>
            while (next &&
 800b832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00e      	beq.n	800b856 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b838:	4b91      	ldr	r3, [pc, #580]	; (800ba80 <tcp_receive+0xb04>)
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	4b91      	ldr	r3, [pc, #580]	; (800ba84 <tcp_receive+0xb08>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	441a      	add	r2, r3
 800b844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b84c:	8909      	ldrh	r1, [r1, #8]
 800b84e:	440b      	add	r3, r1
 800b850:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b852:	2b00      	cmp	r3, #0
 800b854:	da9a      	bge.n	800b78c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d059      	beq.n	800b910 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b85c:	4b88      	ldr	r3, [pc, #544]	; (800ba80 <tcp_receive+0xb04>)
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	4b88      	ldr	r3, [pc, #544]	; (800ba84 <tcp_receive+0xb08>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	441a      	add	r2, r3
 800b868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b870:	2b00      	cmp	r3, #0
 800b872:	dd4d      	ble.n	800b910 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	4b81      	ldr	r3, [pc, #516]	; (800ba84 <tcp_receive+0xb08>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	b29b      	uxth	r3, r3
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	b29a      	uxth	r2, r3
 800b886:	4b80      	ldr	r3, [pc, #512]	; (800ba88 <tcp_receive+0xb0c>)
 800b888:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b88a:	4b7f      	ldr	r3, [pc, #508]	; (800ba88 <tcp_receive+0xb0c>)
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	899b      	ldrh	r3, [r3, #12]
 800b890:	b29b      	uxth	r3, r3
 800b892:	4618      	mov	r0, r3
 800b894:	f7fa fd30 	bl	80062f8 <lwip_htons>
 800b898:	4603      	mov	r3, r0
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800b8a4:	4b78      	ldr	r3, [pc, #480]	; (800ba88 <tcp_receive+0xb0c>)
 800b8a6:	891b      	ldrh	r3, [r3, #8]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	4b76      	ldr	r3, [pc, #472]	; (800ba88 <tcp_receive+0xb0c>)
 800b8ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b8b0:	4b75      	ldr	r3, [pc, #468]	; (800ba88 <tcp_receive+0xb0c>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	4a74      	ldr	r2, [pc, #464]	; (800ba88 <tcp_receive+0xb0c>)
 800b8b6:	8912      	ldrh	r2, [r2, #8]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fb fe4a 	bl	8007554 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b8c0:	4b71      	ldr	r3, [pc, #452]	; (800ba88 <tcp_receive+0xb0c>)
 800b8c2:	891c      	ldrh	r4, [r3, #8]
 800b8c4:	4b70      	ldr	r3, [pc, #448]	; (800ba88 <tcp_receive+0xb0c>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	899b      	ldrh	r3, [r3, #12]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fa fd13 	bl	80062f8 <lwip_htons>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <tcp_receive+0x966>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <tcp_receive+0x968>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4423      	add	r3, r4
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	4b65      	ldr	r3, [pc, #404]	; (800ba80 <tcp_receive+0xb04>)
 800b8ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b8ec:	4b64      	ldr	r3, [pc, #400]	; (800ba80 <tcp_receive+0xb04>)
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b64      	ldr	r3, [pc, #400]	; (800ba84 <tcp_receive+0xb08>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d006      	beq.n	800b910 <tcp_receive+0x994>
 800b902:	4b62      	ldr	r3, [pc, #392]	; (800ba8c <tcp_receive+0xb10>)
 800b904:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b908:	4961      	ldr	r1, [pc, #388]	; (800ba90 <tcp_receive+0xb14>)
 800b90a:	4862      	ldr	r0, [pc, #392]	; (800ba94 <tcp_receive+0xb18>)
 800b90c:	f00b fa3a 	bl	8016d84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b914:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b916:	4b5a      	ldr	r3, [pc, #360]	; (800ba80 <tcp_receive+0xb04>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	4b59      	ldr	r3, [pc, #356]	; (800ba84 <tcp_receive+0xb08>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	441a      	add	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b92a:	4b55      	ldr	r3, [pc, #340]	; (800ba80 <tcp_receive+0xb04>)
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d206      	bcs.n	800b940 <tcp_receive+0x9c4>
 800b932:	4b56      	ldr	r3, [pc, #344]	; (800ba8c <tcp_receive+0xb10>)
 800b934:	f240 6207 	movw	r2, #1543	; 0x607
 800b938:	4957      	ldr	r1, [pc, #348]	; (800ba98 <tcp_receive+0xb1c>)
 800b93a:	4856      	ldr	r0, [pc, #344]	; (800ba94 <tcp_receive+0xb18>)
 800b93c:	f00b fa22 	bl	8016d84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b944:	4b4e      	ldr	r3, [pc, #312]	; (800ba80 <tcp_receive+0xb04>)
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7fc fe9d 	bl	8008690 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b956:	4b4c      	ldr	r3, [pc, #304]	; (800ba88 <tcp_receive+0xb0c>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	891b      	ldrh	r3, [r3, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b960:	4b49      	ldr	r3, [pc, #292]	; (800ba88 <tcp_receive+0xb0c>)
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	4a4d      	ldr	r2, [pc, #308]	; (800ba9c <tcp_receive+0xb20>)
 800b966:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b968:	4b47      	ldr	r3, [pc, #284]	; (800ba88 <tcp_receive+0xb0c>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b96e:	4b46      	ldr	r3, [pc, #280]	; (800ba88 <tcp_receive+0xb0c>)
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	899b      	ldrh	r3, [r3, #12]
 800b974:	b29b      	uxth	r3, r3
 800b976:	4618      	mov	r0, r3
 800b978:	f7fa fcbe 	bl	80062f8 <lwip_htons>
 800b97c:	4603      	mov	r3, r0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 80b8 	beq.w	800bafa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b98a:	4b45      	ldr	r3, [pc, #276]	; (800baa0 <tcp_receive+0xb24>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f043 0320 	orr.w	r3, r3, #32
 800b992:	b2da      	uxtb	r2, r3
 800b994:	4b42      	ldr	r3, [pc, #264]	; (800baa0 <tcp_receive+0xb24>)
 800b996:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b998:	e0af      	b.n	800bafa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b99e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	4a36      	ldr	r2, [pc, #216]	; (800ba84 <tcp_receive+0xb08>)
 800b9aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	891b      	ldrh	r3, [r3, #8]
 800b9b0:	461c      	mov	r4, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	899b      	ldrh	r3, [r3, #12]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fa fc9c 	bl	80062f8 <lwip_htons>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	f003 0303 	and.w	r3, r3, #3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <tcp_receive+0xa54>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e000      	b.n	800b9d2 <tcp_receive+0xa56>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	191a      	adds	r2, r3, r4
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	441a      	add	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e2:	461c      	mov	r4, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	891b      	ldrh	r3, [r3, #8]
 800b9e8:	461d      	mov	r5, r3
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fa fc80 	bl	80062f8 <lwip_htons>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	f003 0303 	and.w	r3, r3, #3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <tcp_receive+0xa8c>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <tcp_receive+0xa8e>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	442b      	add	r3, r5
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d206      	bcs.n	800ba1e <tcp_receive+0xaa2>
 800ba10:	4b1e      	ldr	r3, [pc, #120]	; (800ba8c <tcp_receive+0xb10>)
 800ba12:	f240 622b 	movw	r2, #1579	; 0x62b
 800ba16:	4923      	ldr	r1, [pc, #140]	; (800baa4 <tcp_receive+0xb28>)
 800ba18:	481e      	ldr	r0, [pc, #120]	; (800ba94 <tcp_receive+0xb18>)
 800ba1a:	f00b f9b3 	bl	8016d84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	891b      	ldrh	r3, [r3, #8]
 800ba22:	461c      	mov	r4, r3
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	899b      	ldrh	r3, [r3, #12]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fa fc63 	bl	80062f8 <lwip_htons>
 800ba32:	4603      	mov	r3, r0
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	f003 0303 	and.w	r3, r3, #3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <tcp_receive+0xac6>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <tcp_receive+0xac8>
 800ba42:	2300      	movs	r3, #0
 800ba44:	1919      	adds	r1, r3, r4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba4a:	b28b      	uxth	r3, r1
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7fc fe1b 	bl	8008690 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	891b      	ldrh	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d028      	beq.n	800bab6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ba64:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <tcp_receive+0xb20>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01d      	beq.n	800baa8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ba6c:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <tcp_receive+0xb20>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f7fb ffb4 	bl	80079e4 <pbuf_cat>
 800ba7c:	e018      	b.n	800bab0 <tcp_receive+0xb34>
 800ba7e:	bf00      	nop
 800ba80:	200000fa 	.word	0x200000fa
 800ba84:	200000f0 	.word	0x200000f0
 800ba88:	200000d0 	.word	0x200000d0
 800ba8c:	080190f0 	.word	0x080190f0
 800ba90:	080194d0 	.word	0x080194d0
 800ba94:	0801913c 	.word	0x0801913c
 800ba98:	0801950c 	.word	0x0801950c
 800ba9c:	20000100 	.word	0x20000100
 800baa0:	200000fd 	.word	0x200000fd
 800baa4:	0801952c 	.word	0x0801952c
            } else {
              recv_data = cseg->p;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	4a70      	ldr	r2, [pc, #448]	; (800bc70 <tcp_receive+0xcf4>)
 800baae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2200      	movs	r2, #0
 800bab4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	899b      	ldrh	r3, [r3, #12]
 800babc:	b29b      	uxth	r3, r3
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fa fc1a 	bl	80062f8 <lwip_htons>
 800bac4:	4603      	mov	r3, r0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00d      	beq.n	800baec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bad0:	4b68      	ldr	r3, [pc, #416]	; (800bc74 <tcp_receive+0xcf8>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f043 0320 	orr.w	r3, r3, #32
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	4b66      	ldr	r3, [pc, #408]	; (800bc74 <tcp_receive+0xcf8>)
 800badc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7d1b      	ldrb	r3, [r3, #20]
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d102      	bne.n	800baec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2207      	movs	r2, #7
 800baea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800baf4:	68b8      	ldr	r0, [r7, #8]
 800baf6:	f7fd faf0 	bl	80090da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d008      	beq.n	800bb14 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	f43f af43 	beq.w	800b99a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	8b5b      	ldrh	r3, [r3, #26]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00e      	beq.n	800bb3e <tcp_receive+0xbc2>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8b5b      	ldrh	r3, [r3, #26]
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	835a      	strh	r2, [r3, #26]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	8b5b      	ldrh	r3, [r3, #26]
 800bb32:	f043 0302 	orr.w	r3, r3, #2
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bb3c:	e188      	b.n	800be50 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	8b5b      	ldrh	r3, [r3, #26]
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bb4c:	e180      	b.n	800be50 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bb56:	4848      	ldr	r0, [pc, #288]	; (800bc78 <tcp_receive+0xcfc>)
 800bb58:	f7fd faf6 	bl	8009148 <tcp_seg_copy>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	675a      	str	r2, [r3, #116]	; 0x74
 800bb62:	e16d      	b.n	800be40 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bb64:	2300      	movs	r3, #0
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb6e:	e157      	b.n	800be20 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	4b41      	ldr	r3, [pc, #260]	; (800bc7c <tcp_receive+0xd00>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d11d      	bne.n	800bbba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bb7e:	4b3e      	ldr	r3, [pc, #248]	; (800bc78 <tcp_receive+0xcfc>)
 800bb80:	891a      	ldrh	r2, [r3, #8]
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	891b      	ldrh	r3, [r3, #8]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	f240 814f 	bls.w	800be2a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb8c:	483a      	ldr	r0, [pc, #232]	; (800bc78 <tcp_receive+0xcfc>)
 800bb8e:	f7fd fadb 	bl	8009148 <tcp_seg_copy>
 800bb92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 8149 	beq.w	800be2e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	e002      	b.n	800bbb0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bbb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbb2:	6978      	ldr	r0, [r7, #20]
 800bbb4:	f7ff f8de 	bl	800ad74 <tcp_oos_insert_segment>
                }
                break;
 800bbb8:	e139      	b.n	800be2e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d117      	bne.n	800bbf0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bbc0:	4b2e      	ldr	r3, [pc, #184]	; (800bc7c <tcp_receive+0xd00>)
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da57      	bge.n	800bc80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bbd0:	4829      	ldr	r0, [pc, #164]	; (800bc78 <tcp_receive+0xcfc>)
 800bbd2:	f7fd fab9 	bl	8009148 <tcp_seg_copy>
 800bbd6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 8129 	beq.w	800be32 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	69ba      	ldr	r2, [r7, #24]
 800bbe4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bbe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbe8:	69b8      	ldr	r0, [r7, #24]
 800bbea:	f7ff f8c3 	bl	800ad74 <tcp_oos_insert_segment>
                  }
                  break;
 800bbee:	e120      	b.n	800be32 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bbf0:	4b22      	ldr	r3, [pc, #136]	; (800bc7c <tcp_receive+0xd00>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	db3e      	blt.n	800bc80 <tcp_receive+0xd04>
 800bc02:	4b1e      	ldr	r3, [pc, #120]	; (800bc7c <tcp_receive+0xd00>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	3301      	adds	r3, #1
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dc35      	bgt.n	800bc80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bc14:	4818      	ldr	r0, [pc, #96]	; (800bc78 <tcp_receive+0xcfc>)
 800bc16:	f7fd fa97 	bl	8009148 <tcp_seg_copy>
 800bc1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 8109 	beq.w	800be36 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc2c:	8912      	ldrh	r2, [r2, #8]
 800bc2e:	441a      	add	r2, r3
 800bc30:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <tcp_receive+0xd00>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	dd12      	ble.n	800bc60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bc3a:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <tcp_receive+0xd00>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc56:	891b      	ldrh	r3, [r3, #8]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	f7fb fc7a 	bl	8007554 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bc66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc68:	69f8      	ldr	r0, [r7, #28]
 800bc6a:	f7ff f883 	bl	800ad74 <tcp_oos_insert_segment>
                  }
                  break;
 800bc6e:	e0e2      	b.n	800be36 <tcp_receive+0xeba>
 800bc70:	20000100 	.word	0x20000100
 800bc74:	200000fd 	.word	0x200000fd
 800bc78:	200000d0 	.word	0x200000d0
 800bc7c:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f040 80c6 	bne.w	800be1a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bc8e:	4b80      	ldr	r3, [pc, #512]	; (800be90 <tcp_receive+0xf14>)
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f340 80bd 	ble.w	800be1a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	899b      	ldrh	r3, [r3, #12]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fa fb25 	bl	80062f8 <lwip_htons>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f040 80bf 	bne.w	800be3a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bcbc:	4875      	ldr	r0, [pc, #468]	; (800be94 <tcp_receive+0xf18>)
 800bcbe:	f7fd fa43 	bl	8009148 <tcp_seg_copy>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 80b6 	beq.w	800be3e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcda:	8912      	ldrh	r2, [r2, #8]
 800bcdc:	441a      	add	r2, r3
 800bcde:	4b6c      	ldr	r3, [pc, #432]	; (800be90 <tcp_receive+0xf14>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd12      	ble.n	800bd0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bce8:	4b69      	ldr	r3, [pc, #420]	; (800be90 <tcp_receive+0xf14>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	891b      	ldrh	r3, [r3, #8]
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fb fc23 	bl	8007554 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bd0e:	4b62      	ldr	r3, [pc, #392]	; (800be98 <tcp_receive+0xf1c>)
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	4b5e      	ldr	r3, [pc, #376]	; (800be90 <tcp_receive+0xf14>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	441a      	add	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd22:	440b      	add	r3, r1
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f340 8089 	ble.w	800be3e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	899b      	ldrh	r3, [r3, #12]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fa fade 	bl	80062f8 <lwip_htons>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d022      	beq.n	800bd8e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	899b      	ldrh	r3, [r3, #12]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	b21b      	sxth	r3, r3
 800bd54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd58:	b21c      	sxth	r4, r3
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	899b      	ldrh	r3, [r3, #12]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fa fac7 	bl	80062f8 <lwip_htons>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fa fabe 	bl	80062f8 <lwip_htons>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	b21b      	sxth	r3, r3
 800bd80:	4323      	orrs	r3, r4
 800bd82:	b21a      	sxth	r2, r3
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	b292      	uxth	r2, r2
 800bd8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd98:	4413      	add	r3, r2
 800bd9a:	b299      	uxth	r1, r3
 800bd9c:	4b3c      	ldr	r3, [pc, #240]	; (800be90 <tcp_receive+0xf14>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	1a8a      	subs	r2, r1, r2
 800bda8:	b292      	uxth	r2, r2
 800bdaa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	891b      	ldrh	r3, [r3, #8]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4610      	mov	r0, r2
 800bdbc:	f7fb fbca 	bl	8007554 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	891c      	ldrh	r4, [r3, #8]
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	899b      	ldrh	r3, [r3, #12]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fa fa91 	bl	80062f8 <lwip_htons>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <tcp_receive+0xe6a>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <tcp_receive+0xe6c>
 800bde6:	2300      	movs	r3, #0
 800bde8:	4423      	add	r3, r4
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	4b2a      	ldr	r3, [pc, #168]	; (800be98 <tcp_receive+0xf1c>)
 800bdee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bdf0:	4b29      	ldr	r3, [pc, #164]	; (800be98 <tcp_receive+0xf1c>)
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	4b26      	ldr	r3, [pc, #152]	; (800be90 <tcp_receive+0xf14>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	441a      	add	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be04:	440b      	add	r3, r1
 800be06:	429a      	cmp	r2, r3
 800be08:	d019      	beq.n	800be3e <tcp_receive+0xec2>
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <tcp_receive+0xf20>)
 800be0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800be10:	4923      	ldr	r1, [pc, #140]	; (800bea0 <tcp_receive+0xf24>)
 800be12:	4824      	ldr	r0, [pc, #144]	; (800bea4 <tcp_receive+0xf28>)
 800be14:	f00a ffb6 	bl	8016d84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800be18:	e011      	b.n	800be3e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	2b00      	cmp	r3, #0
 800be24:	f47f aea4 	bne.w	800bb70 <tcp_receive+0xbf4>
 800be28:	e00a      	b.n	800be40 <tcp_receive+0xec4>
                break;
 800be2a:	bf00      	nop
 800be2c:	e008      	b.n	800be40 <tcp_receive+0xec4>
                break;
 800be2e:	bf00      	nop
 800be30:	e006      	b.n	800be40 <tcp_receive+0xec4>
                  break;
 800be32:	bf00      	nop
 800be34:	e004      	b.n	800be40 <tcp_receive+0xec4>
                  break;
 800be36:	bf00      	nop
 800be38:	e002      	b.n	800be40 <tcp_receive+0xec4>
                  break;
 800be3a:	bf00      	nop
 800be3c:	e000      	b.n	800be40 <tcp_receive+0xec4>
                break;
 800be3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 fe8b 	bl	800db5c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800be46:	e003      	b.n	800be50 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f001 fe87 	bl	800db5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be4e:	e01a      	b.n	800be86 <tcp_receive+0xf0a>
 800be50:	e019      	b.n	800be86 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <tcp_receive+0xf14>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	db0a      	blt.n	800be76 <tcp_receive+0xefa>
 800be60:	4b0b      	ldr	r3, [pc, #44]	; (800be90 <tcp_receive+0xf14>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be6c:	440b      	add	r3, r1
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	3301      	adds	r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	dd07      	ble.n	800be86 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	8b5b      	ldrh	r3, [r3, #26]
 800be7a:	f043 0302 	orr.w	r3, r3, #2
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800be84:	e7ff      	b.n	800be86 <tcp_receive+0xf0a>
 800be86:	bf00      	nop
 800be88:	3750      	adds	r7, #80	; 0x50
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bdb0      	pop	{r4, r5, r7, pc}
 800be8e:	bf00      	nop
 800be90:	200000f0 	.word	0x200000f0
 800be94:	200000d0 	.word	0x200000d0
 800be98:	200000fa 	.word	0x200000fa
 800be9c:	080190f0 	.word	0x080190f0
 800bea0:	08019498 	.word	0x08019498
 800bea4:	0801913c 	.word	0x0801913c

0800bea8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800beae:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <tcp_get_next_optbyte+0x5c>)
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	b291      	uxth	r1, r2
 800beb6:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <tcp_get_next_optbyte+0x5c>)
 800beb8:	8011      	strh	r1, [r2, #0]
 800beba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bebc:	4b12      	ldr	r3, [pc, #72]	; (800bf08 <tcp_get_next_optbyte+0x60>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <tcp_get_next_optbyte+0x26>
 800bec4:	4b11      	ldr	r3, [pc, #68]	; (800bf0c <tcp_get_next_optbyte+0x64>)
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	88fa      	ldrh	r2, [r7, #6]
 800beca:	429a      	cmp	r2, r3
 800becc:	d208      	bcs.n	800bee0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bece:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <tcp_get_next_optbyte+0x68>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3314      	adds	r3, #20
 800bed4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	4413      	add	r3, r2
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	e00b      	b.n	800bef8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bee0:	88fb      	ldrh	r3, [r7, #6]
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <tcp_get_next_optbyte+0x64>)
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <tcp_get_next_optbyte+0x60>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	797b      	ldrb	r3, [r7, #5]
 800bef4:	4413      	add	r3, r2
 800bef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	200000ec 	.word	0x200000ec
 800bf08:	200000e8 	.word	0x200000e8
 800bf0c:	200000e6 	.word	0x200000e6
 800bf10:	200000e0 	.word	0x200000e0

0800bf14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <tcp_parseopt+0x1c>
 800bf22:	4b32      	ldr	r3, [pc, #200]	; (800bfec <tcp_parseopt+0xd8>)
 800bf24:	f240 727d 	movw	r2, #1917	; 0x77d
 800bf28:	4931      	ldr	r1, [pc, #196]	; (800bff0 <tcp_parseopt+0xdc>)
 800bf2a:	4832      	ldr	r0, [pc, #200]	; (800bff4 <tcp_parseopt+0xe0>)
 800bf2c:	f00a ff2a 	bl	8016d84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bf30:	4b31      	ldr	r3, [pc, #196]	; (800bff8 <tcp_parseopt+0xe4>)
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d055      	beq.n	800bfe4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bf38:	4b30      	ldr	r3, [pc, #192]	; (800bffc <tcp_parseopt+0xe8>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	801a      	strh	r2, [r3, #0]
 800bf3e:	e045      	b.n	800bfcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bf40:	f7ff ffb2 	bl	800bea8 <tcp_get_next_optbyte>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d006      	beq.n	800bf5c <tcp_parseopt+0x48>
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	dc2b      	bgt.n	800bfaa <tcp_parseopt+0x96>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d041      	beq.n	800bfda <tcp_parseopt+0xc6>
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d127      	bne.n	800bfaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800bf5a:	e037      	b.n	800bfcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bf5c:	f7ff ffa4 	bl	800bea8 <tcp_get_next_optbyte>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d13b      	bne.n	800bfde <tcp_parseopt+0xca>
 800bf66:	4b25      	ldr	r3, [pc, #148]	; (800bffc <tcp_parseopt+0xe8>)
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	4a22      	ldr	r2, [pc, #136]	; (800bff8 <tcp_parseopt+0xe4>)
 800bf6e:	8812      	ldrh	r2, [r2, #0]
 800bf70:	4293      	cmp	r3, r2
 800bf72:	da34      	bge.n	800bfde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bf74:	f7ff ff98 	bl	800bea8 <tcp_get_next_optbyte>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bf80:	f7ff ff92 	bl	800bea8 <tcp_get_next_optbyte>
 800bf84:	4603      	mov	r3, r0
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	89bb      	ldrh	r3, [r7, #12]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bf8e:	89bb      	ldrh	r3, [r7, #12]
 800bf90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bf94:	d804      	bhi.n	800bfa0 <tcp_parseopt+0x8c>
 800bf96:	89bb      	ldrh	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <tcp_parseopt+0x8c>
 800bf9c:	89ba      	ldrh	r2, [r7, #12]
 800bf9e:	e001      	b.n	800bfa4 <tcp_parseopt+0x90>
 800bfa0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bfa8:	e010      	b.n	800bfcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bfaa:	f7ff ff7d 	bl	800bea8 <tcp_get_next_optbyte>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bfb2:	7afb      	ldrb	r3, [r7, #11]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d914      	bls.n	800bfe2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <tcp_parseopt+0xe8>)
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	3b02      	subs	r3, #2
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	4b0c      	ldr	r3, [pc, #48]	; (800bffc <tcp_parseopt+0xe8>)
 800bfca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bfcc:	4b0b      	ldr	r3, [pc, #44]	; (800bffc <tcp_parseopt+0xe8>)
 800bfce:	881a      	ldrh	r2, [r3, #0]
 800bfd0:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <tcp_parseopt+0xe4>)
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d3b3      	bcc.n	800bf40 <tcp_parseopt+0x2c>
 800bfd8:	e004      	b.n	800bfe4 <tcp_parseopt+0xd0>
          return;
 800bfda:	bf00      	nop
 800bfdc:	e002      	b.n	800bfe4 <tcp_parseopt+0xd0>
            return;
 800bfde:	bf00      	nop
 800bfe0:	e000      	b.n	800bfe4 <tcp_parseopt+0xd0>
            return;
 800bfe2:	bf00      	nop
      }
    }
  }
}
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	080190f0 	.word	0x080190f0
 800bff0:	08019554 	.word	0x08019554
 800bff4:	0801913c 	.word	0x0801913c
 800bff8:	200000e4 	.word	0x200000e4
 800bffc:	200000ec 	.word	0x200000ec

0800c000 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c000:	b480      	push	{r7}
 800c002:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <tcp_trigger_input_pcb_close+0x1c>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	f043 0310 	orr.w	r3, r3, #16
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	4b03      	ldr	r3, [pc, #12]	; (800c01c <tcp_trigger_input_pcb_close+0x1c>)
 800c010:	701a      	strb	r2, [r3, #0]
}
 800c012:	bf00      	nop
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200000fd 	.word	0x200000fd

0800c020 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <tcp_route+0x28>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	7a1b      	ldrb	r3, [r3, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	7a1b      	ldrb	r3, [r3, #8]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fb f8ae 	bl	80071a0 <netif_get_by_index>
 800c044:	4603      	mov	r3, r0
 800c046:	e003      	b.n	800c050 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f003 fad5 	bl	800f5f8 <ip4_route>
 800c04e:	4603      	mov	r3, r0
  }
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c058:	b590      	push	{r4, r7, lr}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	4613      	mov	r3, r2
 800c066:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d105      	bne.n	800c07a <tcp_create_segment+0x22>
 800c06e:	4b44      	ldr	r3, [pc, #272]	; (800c180 <tcp_create_segment+0x128>)
 800c070:	22a3      	movs	r2, #163	; 0xa3
 800c072:	4944      	ldr	r1, [pc, #272]	; (800c184 <tcp_create_segment+0x12c>)
 800c074:	4844      	ldr	r0, [pc, #272]	; (800c188 <tcp_create_segment+0x130>)
 800c076:	f00a fe85 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d105      	bne.n	800c08c <tcp_create_segment+0x34>
 800c080:	4b3f      	ldr	r3, [pc, #252]	; (800c180 <tcp_create_segment+0x128>)
 800c082:	22a4      	movs	r2, #164	; 0xa4
 800c084:	4941      	ldr	r1, [pc, #260]	; (800c18c <tcp_create_segment+0x134>)
 800c086:	4840      	ldr	r0, [pc, #256]	; (800c188 <tcp_create_segment+0x130>)
 800c088:	f00a fe7c 	bl	8016d84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c08c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c09a:	2003      	movs	r0, #3
 800c09c:	f7fa fd82 	bl	8006ba4 <memp_malloc>
 800c0a0:	6138      	str	r0, [r7, #16]
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d104      	bne.n	800c0b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c0a8:	68b8      	ldr	r0, [r7, #8]
 800c0aa:	f7fb fbd9 	bl	8007860 <pbuf_free>
    return NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e061      	b.n	800c176 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c0b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	891a      	ldrh	r2, [r3, #8]
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d205      	bcs.n	800c0de <tcp_create_segment+0x86>
 800c0d2:	4b2b      	ldr	r3, [pc, #172]	; (800c180 <tcp_create_segment+0x128>)
 800c0d4:	22b0      	movs	r2, #176	; 0xb0
 800c0d6:	492e      	ldr	r1, [pc, #184]	; (800c190 <tcp_create_segment+0x138>)
 800c0d8:	482b      	ldr	r0, [pc, #172]	; (800c188 <tcp_create_segment+0x130>)
 800c0da:	f00a fe53 	bl	8016d84 <iprintf>
  seg->len = p->tot_len - optlen;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	891a      	ldrh	r2, [r3, #8]
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c0ee:	2114      	movs	r1, #20
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f7fb fb1f 	bl	8007734 <pbuf_add_header>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d004      	beq.n	800c106 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c0fc:	6938      	ldr	r0, [r7, #16]
 800c0fe:	f7fc ffec 	bl	80090da <tcp_seg_free>
    return NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	e037      	b.n	800c176 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8ada      	ldrh	r2, [r3, #22]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	68dc      	ldr	r4, [r3, #12]
 800c118:	4610      	mov	r0, r2
 800c11a:	f7fa f8ed 	bl	80062f8 <lwip_htons>
 800c11e:	4603      	mov	r3, r0
 800c120:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8b1a      	ldrh	r2, [r3, #24]
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	68dc      	ldr	r4, [r3, #12]
 800c12a:	4610      	mov	r0, r2
 800c12c:	f7fa f8e4 	bl	80062f8 <lwip_htons>
 800c130:	4603      	mov	r3, r0
 800c132:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	68dc      	ldr	r4, [r3, #12]
 800c138:	6838      	ldr	r0, [r7, #0]
 800c13a:	f7fa f8f2 	bl	8006322 <lwip_htonl>
 800c13e:	4603      	mov	r3, r0
 800c140:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	089b      	lsrs	r3, r3, #2
 800c146:	b2db      	uxtb	r3, r3
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3305      	adds	r3, #5
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	031b      	lsls	r3, r3, #12
 800c150:	b29a      	uxth	r2, r3
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	b29b      	uxth	r3, r3
 800c156:	4313      	orrs	r3, r2
 800c158:	b29a      	uxth	r2, r3
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	68dc      	ldr	r4, [r3, #12]
 800c15e:	4610      	mov	r0, r2
 800c160:	f7fa f8ca 	bl	80062f8 <lwip_htons>
 800c164:	4603      	mov	r3, r0
 800c166:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	749a      	strb	r2, [r3, #18]
 800c170:	2200      	movs	r2, #0
 800c172:	74da      	strb	r2, [r3, #19]
  return seg;
 800c174:	693b      	ldr	r3, [r7, #16]
}
 800c176:	4618      	mov	r0, r3
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd90      	pop	{r4, r7, pc}
 800c17e:	bf00      	nop
 800c180:	08019570 	.word	0x08019570
 800c184:	080195a4 	.word	0x080195a4
 800c188:	080195c4 	.word	0x080195c4
 800c18c:	080195ec 	.word	0x080195ec
 800c190:	08019610 	.word	0x08019610

0800c194 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	607b      	str	r3, [r7, #4]
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	81bb      	strh	r3, [r7, #12]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c1a8:	89bb      	ldrh	r3, [r7, #12]
 800c1aa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d105      	bne.n	800c1be <tcp_pbuf_prealloc+0x2a>
 800c1b2:	4b30      	ldr	r3, [pc, #192]	; (800c274 <tcp_pbuf_prealloc+0xe0>)
 800c1b4:	22e8      	movs	r2, #232	; 0xe8
 800c1b6:	4930      	ldr	r1, [pc, #192]	; (800c278 <tcp_pbuf_prealloc+0xe4>)
 800c1b8:	4830      	ldr	r0, [pc, #192]	; (800c27c <tcp_pbuf_prealloc+0xe8>)
 800c1ba:	f00a fde3 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d105      	bne.n	800c1d0 <tcp_pbuf_prealloc+0x3c>
 800c1c4:	4b2b      	ldr	r3, [pc, #172]	; (800c274 <tcp_pbuf_prealloc+0xe0>)
 800c1c6:	22e9      	movs	r2, #233	; 0xe9
 800c1c8:	492d      	ldr	r1, [pc, #180]	; (800c280 <tcp_pbuf_prealloc+0xec>)
 800c1ca:	482c      	ldr	r0, [pc, #176]	; (800c27c <tcp_pbuf_prealloc+0xe8>)
 800c1cc:	f00a fdda 	bl	8016d84 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c1d0:	89ba      	ldrh	r2, [r7, #12]
 800c1d2:	897b      	ldrh	r3, [r7, #10]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d221      	bcs.n	800c21c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1dc:	f003 0302 	and.w	r3, r3, #2
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d111      	bne.n	800c208 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	8b5b      	ldrh	r3, [r3, #26]
 800c1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d115      	bne.n	800c21c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c1f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d007      	beq.n	800c208 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d103      	bne.n	800c208 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c208:	89bb      	ldrh	r3, [r7, #12]
 800c20a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c20e:	f023 0203 	bic.w	r2, r3, #3
 800c212:	897b      	ldrh	r3, [r7, #10]
 800c214:	4293      	cmp	r3, r2
 800c216:	bf28      	it	cs
 800c218:	4613      	movcs	r3, r2
 800c21a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c21c:	8af9      	ldrh	r1, [r7, #22]
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c224:	4618      	mov	r0, r3
 800c226:	f7fb f837 	bl	8007298 <pbuf_alloc>
 800c22a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	e019      	b.n	800c26a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d006      	beq.n	800c24c <tcp_pbuf_prealloc+0xb8>
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <tcp_pbuf_prealloc+0xe0>)
 800c240:	f240 120b 	movw	r2, #267	; 0x10b
 800c244:	490f      	ldr	r1, [pc, #60]	; (800c284 <tcp_pbuf_prealloc+0xf0>)
 800c246:	480d      	ldr	r0, [pc, #52]	; (800c27c <tcp_pbuf_prealloc+0xe8>)
 800c248:	f00a fd9c 	bl	8016d84 <iprintf>
  *oversize = p->len - length;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	895a      	ldrh	r2, [r3, #10]
 800c250:	89bb      	ldrh	r3, [r7, #12]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	b29a      	uxth	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	89ba      	ldrh	r2, [r7, #12]
 800c25e:	811a      	strh	r2, [r3, #8]
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	891a      	ldrh	r2, [r3, #8]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	815a      	strh	r2, [r3, #10]
  return p;
 800c268:	693b      	ldr	r3, [r7, #16]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	08019570 	.word	0x08019570
 800c278:	08019628 	.word	0x08019628
 800c27c:	080195c4 	.word	0x080195c4
 800c280:	0801964c 	.word	0x0801964c
 800c284:	0801966c 	.word	0x0801966c

0800c288 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <tcp_write_checks+0x20>
 800c29a:	4b33      	ldr	r3, [pc, #204]	; (800c368 <tcp_write_checks+0xe0>)
 800c29c:	f240 1233 	movw	r2, #307	; 0x133
 800c2a0:	4932      	ldr	r1, [pc, #200]	; (800c36c <tcp_write_checks+0xe4>)
 800c2a2:	4833      	ldr	r0, [pc, #204]	; (800c370 <tcp_write_checks+0xe8>)
 800c2a4:	f00a fd6e 	bl	8016d84 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7d1b      	ldrb	r3, [r3, #20]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d00e      	beq.n	800c2ce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c2b4:	2b07      	cmp	r3, #7
 800c2b6:	d00a      	beq.n	800c2ce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d006      	beq.n	800c2ce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d002      	beq.n	800c2ce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c2c8:	f06f 030a 	mvn.w	r3, #10
 800c2cc:	e048      	b.n	800c360 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c2ce:	887b      	ldrh	r3, [r7, #2]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <tcp_write_checks+0x50>
    return ERR_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e043      	b.n	800c360 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c2de:	887a      	ldrh	r2, [r7, #2]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d909      	bls.n	800c2f8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8b5b      	ldrh	r3, [r3, #26]
 800c2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	e033      	b.n	800c360 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	d909      	bls.n	800c316 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	8b5b      	ldrh	r3, [r3, #26]
 800c306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c310:	f04f 33ff 	mov.w	r3, #4294967295
 800c314:	e024      	b.n	800c360 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00f      	beq.n	800c340 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c324:	2b00      	cmp	r3, #0
 800c326:	d11a      	bne.n	800c35e <tcp_write_checks+0xd6>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d116      	bne.n	800c35e <tcp_write_checks+0xd6>
 800c330:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <tcp_write_checks+0xe0>)
 800c332:	f240 1255 	movw	r2, #341	; 0x155
 800c336:	490f      	ldr	r1, [pc, #60]	; (800c374 <tcp_write_checks+0xec>)
 800c338:	480d      	ldr	r0, [pc, #52]	; (800c370 <tcp_write_checks+0xe8>)
 800c33a:	f00a fd23 	bl	8016d84 <iprintf>
 800c33e:	e00e      	b.n	800c35e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <tcp_write_checks+0xc8>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d006      	beq.n	800c35e <tcp_write_checks+0xd6>
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <tcp_write_checks+0xe0>)
 800c352:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c356:	4908      	ldr	r1, [pc, #32]	; (800c378 <tcp_write_checks+0xf0>)
 800c358:	4805      	ldr	r0, [pc, #20]	; (800c370 <tcp_write_checks+0xe8>)
 800c35a:	f00a fd13 	bl	8016d84 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	08019570 	.word	0x08019570
 800c36c:	08019680 	.word	0x08019680
 800c370:	080195c4 	.word	0x080195c4
 800c374:	080196a0 	.word	0x080196a0
 800c378:	080196dc 	.word	0x080196dc

0800c37c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b09b      	sub	sp, #108	; 0x6c
 800c380:	af04      	add	r7, sp, #16
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4611      	mov	r1, r2
 800c388:	461a      	mov	r2, r3
 800c38a:	460b      	mov	r3, r1
 800c38c:	80fb      	strh	r3, [r7, #6]
 800c38e:	4613      	mov	r3, r2
 800c390:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c396:	2300      	movs	r3, #0
 800c398:	653b      	str	r3, [r7, #80]	; 0x50
 800c39a:	2300      	movs	r3, #0
 800c39c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c39e:	2300      	movs	r3, #0
 800c3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d109      	bne.n	800c3d8 <tcp_write+0x5c>
 800c3c4:	4ba4      	ldr	r3, [pc, #656]	; (800c658 <tcp_write+0x2dc>)
 800c3c6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c3ca:	49a4      	ldr	r1, [pc, #656]	; (800c65c <tcp_write+0x2e0>)
 800c3cc:	48a4      	ldr	r0, [pc, #656]	; (800c660 <tcp_write+0x2e4>)
 800c3ce:	f00a fcd9 	bl	8016d84 <iprintf>
 800c3d2:	f06f 030f 	mvn.w	r3, #15
 800c3d6:	e32a      	b.n	800ca2e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	bf28      	it	cs
 800c3ea:	4613      	movcs	r3, r2
 800c3ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <tcp_write+0x7e>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3f8:	e000      	b.n	800c3fc <tcp_write+0x80>
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d109      	bne.n	800c418 <tcp_write+0x9c>
 800c404:	4b94      	ldr	r3, [pc, #592]	; (800c658 <tcp_write+0x2dc>)
 800c406:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c40a:	4996      	ldr	r1, [pc, #600]	; (800c664 <tcp_write+0x2e8>)
 800c40c:	4894      	ldr	r0, [pc, #592]	; (800c660 <tcp_write+0x2e4>)
 800c40e:	f00a fcb9 	bl	8016d84 <iprintf>
 800c412:	f06f 030f 	mvn.w	r3, #15
 800c416:	e30a      	b.n	800ca2e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	4619      	mov	r1, r3
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff ff33 	bl	800c288 <tcp_write_checks>
 800c422:	4603      	mov	r3, r0
 800c424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c428:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <tcp_write+0xba>
    return err;
 800c430:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c434:	e2fb      	b.n	800ca2e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c43c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c440:	2300      	movs	r3, #0
 800c442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 80f6 	beq.w	800c63c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c454:	653b      	str	r3, [r7, #80]	; 0x50
 800c456:	e002      	b.n	800c45e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1f8      	bne.n	800c458 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c468:	7a9b      	ldrb	r3, [r3, #10]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	f003 0304 	and.w	r3, r3, #4
 800c472:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c478:	891b      	ldrh	r3, [r3, #8]
 800c47a:	4619      	mov	r1, r3
 800c47c:	8c3b      	ldrh	r3, [r7, #32]
 800c47e:	440b      	add	r3, r1
 800c480:	429a      	cmp	r2, r3
 800c482:	da06      	bge.n	800c492 <tcp_write+0x116>
 800c484:	4b74      	ldr	r3, [pc, #464]	; (800c658 <tcp_write+0x2dc>)
 800c486:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c48a:	4977      	ldr	r1, [pc, #476]	; (800c668 <tcp_write+0x2ec>)
 800c48c:	4874      	ldr	r0, [pc, #464]	; (800c660 <tcp_write+0x2e4>)
 800c48e:	f00a fc79 	bl	8016d84 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	8c3b      	ldrh	r3, [r7, #32]
 800c498:	4413      	add	r3, r2
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4a8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c4aa:	8a7b      	ldrh	r3, [r7, #18]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d026      	beq.n	800c4fe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c4b0:	8a7b      	ldrh	r3, [r7, #18]
 800c4b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d206      	bcs.n	800c4c6 <tcp_write+0x14a>
 800c4b8:	4b67      	ldr	r3, [pc, #412]	; (800c658 <tcp_write+0x2dc>)
 800c4ba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c4be:	496b      	ldr	r1, [pc, #428]	; (800c66c <tcp_write+0x2f0>)
 800c4c0:	4867      	ldr	r0, [pc, #412]	; (800c660 <tcp_write+0x2e4>)
 800c4c2:	f00a fc5f 	bl	8016d84 <iprintf>
      seg = last_unsent;
 800c4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c4ca:	8a7b      	ldrh	r3, [r7, #18]
 800c4cc:	88fa      	ldrh	r2, [r7, #6]
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	bf28      	it	cs
 800c4d2:	4613      	movcs	r3, r2
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bf28      	it	cs
 800c4dc:	4613      	movcs	r3, r2
 800c4de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c4e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c4ec:	8a7a      	ldrh	r2, [r7, #18]
 800c4ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c4f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c4f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c4fe:	8a7b      	ldrh	r3, [r7, #18]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <tcp_write+0x1a0>
 800c504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c508:	88fb      	ldrh	r3, [r7, #6]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d006      	beq.n	800c51c <tcp_write+0x1a0>
 800c50e:	4b52      	ldr	r3, [pc, #328]	; (800c658 <tcp_write+0x2dc>)
 800c510:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c514:	4956      	ldr	r1, [pc, #344]	; (800c670 <tcp_write+0x2f4>)
 800c516:	4852      	ldr	r0, [pc, #328]	; (800c660 <tcp_write+0x2e4>)
 800c518:	f00a fc34 	bl	8016d84 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c520:	88fb      	ldrh	r3, [r7, #6]
 800c522:	429a      	cmp	r2, r3
 800c524:	f080 8167 	bcs.w	800c7f6 <tcp_write+0x47a>
 800c528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 8163 	beq.w	800c7f6 <tcp_write+0x47a>
 800c530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c532:	891b      	ldrh	r3, [r3, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 815e 	beq.w	800c7f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c53a:	88fa      	ldrh	r2, [r7, #6]
 800c53c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c540:	1ad2      	subs	r2, r2, r3
 800c542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c544:	4293      	cmp	r3, r2
 800c546:	bfa8      	it	ge
 800c548:	4613      	movge	r3, r2
 800c54a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c54e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c550:	797b      	ldrb	r3, [r7, #5]
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	d027      	beq.n	800c5aa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c55a:	f107 0012 	add.w	r0, r7, #18
 800c55e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c560:	8bf9      	ldrh	r1, [r7, #30]
 800c562:	2301      	movs	r3, #1
 800c564:	9302      	str	r3, [sp, #8]
 800c566:	797b      	ldrb	r3, [r7, #5]
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	4603      	mov	r3, r0
 800c570:	2000      	movs	r0, #0
 800c572:	f7ff fe0f 	bl	800c194 <tcp_pbuf_prealloc>
 800c576:	6578      	str	r0, [r7, #84]	; 0x54
 800c578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 8225 	beq.w	800c9ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c582:	6858      	ldr	r0, [r3, #4]
 800c584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	4413      	add	r3, r2
 800c58c:	8bfa      	ldrh	r2, [r7, #30]
 800c58e:	4619      	mov	r1, r3
 800c590:	f00a fbe2 	bl	8016d58 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c594:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c596:	f7fb f9eb 	bl	8007970 <pbuf_clen>
 800c59a:	4603      	mov	r3, r0
 800c59c:	461a      	mov	r2, r3
 800c59e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c5a2:	4413      	add	r3, r2
 800c5a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c5a8:	e041      	b.n	800c62e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b0:	e002      	b.n	800c5b8 <tcp_write+0x23c>
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1f8      	bne.n	800c5b2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c2:	7b1b      	ldrb	r3, [r3, #12]
 800c5c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d115      	bne.n	800c5f8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d2:	8952      	ldrh	r2, [r2, #10]
 800c5d4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d10d      	bne.n	800c5f8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c5dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d006      	beq.n	800c5f2 <tcp_write+0x276>
 800c5e4:	4b1c      	ldr	r3, [pc, #112]	; (800c658 <tcp_write+0x2dc>)
 800c5e6:	f240 2231 	movw	r2, #561	; 0x231
 800c5ea:	4922      	ldr	r1, [pc, #136]	; (800c674 <tcp_write+0x2f8>)
 800c5ec:	481c      	ldr	r0, [pc, #112]	; (800c660 <tcp_write+0x2e4>)
 800c5ee:	f00a fbc9 	bl	8016d84 <iprintf>
          extendlen = seglen;
 800c5f2:	8bfb      	ldrh	r3, [r7, #30]
 800c5f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c5f6:	e01a      	b.n	800c62e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c5f8:	8bfb      	ldrh	r3, [r7, #30]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	2000      	movs	r0, #0
 800c600:	f7fa fe4a 	bl	8007298 <pbuf_alloc>
 800c604:	6578      	str	r0, [r7, #84]	; 0x54
 800c606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 81e0 	beq.w	800c9ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c60e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	441a      	add	r2, r3
 800c616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c618:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c61a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c61c:	f7fb f9a8 	bl	8007970 <pbuf_clen>
 800c620:	4603      	mov	r3, r0
 800c622:	461a      	mov	r2, r3
 800c624:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c628:	4413      	add	r3, r2
 800c62a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c62e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c632:	8bfb      	ldrh	r3, [r7, #30]
 800c634:	4413      	add	r3, r2
 800c636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c63a:	e0dc      	b.n	800c7f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80d7 	beq.w	800c7f6 <tcp_write+0x47a>
 800c648:	4b03      	ldr	r3, [pc, #12]	; (800c658 <tcp_write+0x2dc>)
 800c64a:	f240 224a 	movw	r2, #586	; 0x24a
 800c64e:	490a      	ldr	r1, [pc, #40]	; (800c678 <tcp_write+0x2fc>)
 800c650:	4803      	ldr	r0, [pc, #12]	; (800c660 <tcp_write+0x2e4>)
 800c652:	f00a fb97 	bl	8016d84 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c656:	e0ce      	b.n	800c7f6 <tcp_write+0x47a>
 800c658:	08019570 	.word	0x08019570
 800c65c:	08019710 	.word	0x08019710
 800c660:	080195c4 	.word	0x080195c4
 800c664:	08019728 	.word	0x08019728
 800c668:	0801975c 	.word	0x0801975c
 800c66c:	08019774 	.word	0x08019774
 800c670:	08019794 	.word	0x08019794
 800c674:	080197b4 	.word	0x080197b4
 800c678:	080197e0 	.word	0x080197e0
    struct pbuf *p;
    u16_t left = len - pos;
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c692:	8b7a      	ldrh	r2, [r7, #26]
 800c694:	8bbb      	ldrh	r3, [r7, #28]
 800c696:	4293      	cmp	r3, r2
 800c698:	bf28      	it	cs
 800c69a:	4613      	movcs	r3, r2
 800c69c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c69e:	797b      	ldrb	r3, [r7, #5]
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d036      	beq.n	800c716 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c6a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	8b3b      	ldrh	r3, [r7, #24]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	b299      	uxth	r1, r3
 800c6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bf0c      	ite	eq
 800c6ba:	2301      	moveq	r3, #1
 800c6bc:	2300      	movne	r3, #0
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	f107 0012 	add.w	r0, r7, #18
 800c6c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6c6:	9302      	str	r3, [sp, #8]
 800c6c8:	797b      	ldrb	r3, [r7, #5]
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2036      	movs	r0, #54	; 0x36
 800c6d4:	f7ff fd5e 	bl	800c194 <tcp_pbuf_prealloc>
 800c6d8:	6338      	str	r0, [r7, #48]	; 0x30
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8178 	beq.w	800c9d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	895b      	ldrh	r3, [r3, #10]
 800c6e6:	8b3a      	ldrh	r2, [r7, #24]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d906      	bls.n	800c6fa <tcp_write+0x37e>
 800c6ec:	4b8c      	ldr	r3, [pc, #560]	; (800c920 <tcp_write+0x5a4>)
 800c6ee:	f240 2266 	movw	r2, #614	; 0x266
 800c6f2:	498c      	ldr	r1, [pc, #560]	; (800c924 <tcp_write+0x5a8>)
 800c6f4:	488c      	ldr	r0, [pc, #560]	; (800c928 <tcp_write+0x5ac>)
 800c6f6:	f00a fb45 	bl	8016d84 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c702:	18d0      	adds	r0, r2, r3
 800c704:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	4413      	add	r3, r2
 800c70c:	8b3a      	ldrh	r2, [r7, #24]
 800c70e:	4619      	mov	r1, r3
 800c710:	f00a fb22 	bl	8016d58 <memcpy>
 800c714:	e02f      	b.n	800c776 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c716:	8a7b      	ldrh	r3, [r7, #18]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <tcp_write+0x3ae>
 800c71c:	4b80      	ldr	r3, [pc, #512]	; (800c920 <tcp_write+0x5a4>)
 800c71e:	f240 2271 	movw	r2, #625	; 0x271
 800c722:	4982      	ldr	r1, [pc, #520]	; (800c92c <tcp_write+0x5b0>)
 800c724:	4880      	ldr	r0, [pc, #512]	; (800c928 <tcp_write+0x5ac>)
 800c726:	f00a fb2d 	bl	8016d84 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c72a:	8b3b      	ldrh	r3, [r7, #24]
 800c72c:	2201      	movs	r2, #1
 800c72e:	4619      	mov	r1, r3
 800c730:	2036      	movs	r0, #54	; 0x36
 800c732:	f7fa fdb1 	bl	8007298 <pbuf_alloc>
 800c736:	6178      	str	r0, [r7, #20]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 814b 	beq.w	800c9d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	441a      	add	r2, r3
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c74c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c750:	b29b      	uxth	r3, r3
 800c752:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c756:	4619      	mov	r1, r3
 800c758:	2036      	movs	r0, #54	; 0x36
 800c75a:	f7fa fd9d 	bl	8007298 <pbuf_alloc>
 800c75e:	6338      	str	r0, [r7, #48]	; 0x30
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	2b00      	cmp	r3, #0
 800c764:	d103      	bne.n	800c76e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c766:	6978      	ldr	r0, [r7, #20]
 800c768:	f7fb f87a 	bl	8007860 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c76c:	e136      	b.n	800c9dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c76e:	6979      	ldr	r1, [r7, #20]
 800c770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c772:	f7fb f937 	bl	80079e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c778:	f7fb f8fa 	bl	8007970 <pbuf_clen>
 800c77c:	4603      	mov	r3, r0
 800c77e:	461a      	mov	r2, r3
 800c780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c784:	4413      	add	r3, r2
 800c786:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c78a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c78e:	2b09      	cmp	r3, #9
 800c790:	d903      	bls.n	800c79a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c794:	f7fb f864 	bl	8007860 <pbuf_free>
      goto memerr;
 800c798:	e120      	b.n	800c9dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c79e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7a2:	441a      	add	r2, r3
 800c7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff fc51 	bl	800c058 <tcp_create_segment>
 800c7b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 810d 	beq.w	800c9da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d102      	bne.n	800c7cc <tcp_write+0x450>
      queue = seg;
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ca:	e00c      	b.n	800c7e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <tcp_write+0x464>
 800c7d2:	4b53      	ldr	r3, [pc, #332]	; (800c920 <tcp_write+0x5a4>)
 800c7d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c7d8:	4955      	ldr	r1, [pc, #340]	; (800c930 <tcp_write+0x5b4>)
 800c7da:	4853      	ldr	r0, [pc, #332]	; (800c928 <tcp_write+0x5ac>)
 800c7dc:	f00a fad2 	bl	8016d84 <iprintf>
      prev_seg->next = seg;
 800c7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7e8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c7ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c7ee:	8b3b      	ldrh	r3, [r7, #24]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c7f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	f4ff af3d 	bcc.w	800c67c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c802:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c804:	2b00      	cmp	r3, #0
 800c806:	d02c      	beq.n	800c862 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c80e:	e01e      	b.n	800c84e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	891a      	ldrh	r2, [r3, #8]
 800c814:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c816:	4413      	add	r3, r2
 800c818:	b29a      	uxth	r2, r3
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d110      	bne.n	800c848 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82c:	8952      	ldrh	r2, [r2, #10]
 800c82e:	4413      	add	r3, r2
 800c830:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	4618      	mov	r0, r3
 800c836:	f00a fa8f 	bl	8016d58 <memcpy>
        p->len += oversize_used;
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	895a      	ldrh	r2, [r3, #10]
 800c83e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c840:	4413      	add	r3, r2
 800c842:	b29a      	uxth	r2, r3
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1dd      	bne.n	800c810 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c856:	891a      	ldrh	r2, [r3, #8]
 800c858:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c85a:	4413      	add	r3, r2
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c860:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c862:	8a7a      	ldrh	r2, [r7, #18]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d018      	beq.n	800c8a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <tcp_write+0x508>
 800c876:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <tcp_write+0x5a4>)
 800c878:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c87c:	492d      	ldr	r1, [pc, #180]	; (800c934 <tcp_write+0x5b8>)
 800c87e:	482a      	ldr	r0, [pc, #168]	; (800c928 <tcp_write+0x5ac>)
 800c880:	f00a fa80 	bl	8016d84 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fb f8aa 	bl	80079e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c892:	891a      	ldrh	r2, [r3, #8]
 800c894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c896:	891b      	ldrh	r3, [r3, #8]
 800c898:	4413      	add	r3, r2
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c89e:	811a      	strh	r2, [r3, #8]
 800c8a0:	e037      	b.n	800c912 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c8a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d034      	beq.n	800c912 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <tcp_write+0x53a>
 800c8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d106      	bne.n	800c8c4 <tcp_write+0x548>
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <tcp_write+0x5a4>)
 800c8b8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c8bc:	491e      	ldr	r1, [pc, #120]	; (800c938 <tcp_write+0x5bc>)
 800c8be:	481a      	ldr	r0, [pc, #104]	; (800c928 <tcp_write+0x5ac>)
 800c8c0:	f00a fa60 	bl	8016d84 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ca:	e009      	b.n	800c8e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	891a      	ldrh	r2, [r3, #8]
 800c8d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f1      	bne.n	800c8cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	891a      	ldrh	r2, [r3, #8]
 800c8ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	895a      	ldrh	r2, [r3, #10]
 800c8fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8fc:	4413      	add	r3, r2
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c906:	891a      	ldrh	r2, [r3, #8]
 800c908:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c90a:	4413      	add	r3, r2
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c910:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c914:	2b00      	cmp	r3, #0
 800c916:	d111      	bne.n	800c93c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c91c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c91e:	e010      	b.n	800c942 <tcp_write+0x5c6>
 800c920:	08019570 	.word	0x08019570
 800c924:	08019810 	.word	0x08019810
 800c928:	080195c4 	.word	0x080195c4
 800c92c:	08019850 	.word	0x08019850
 800c930:	08019860 	.word	0x08019860
 800c934:	08019874 	.word	0x08019874
 800c938:	080198ac 	.word	0x080198ac
  } else {
    last_unsent->next = queue;
 800c93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c940:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c946:	88fb      	ldrh	r3, [r7, #6]
 800c948:	441a      	add	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c954:	88fb      	ldrh	r3, [r7, #6]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	b29a      	uxth	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c966:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00e      	beq.n	800c992 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <tcp_write+0x616>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <tcp_write+0x616>
 800c984:	4b2c      	ldr	r3, [pc, #176]	; (800ca38 <tcp_write+0x6bc>)
 800c986:	f240 3212 	movw	r2, #786	; 0x312
 800c98a:	492c      	ldr	r1, [pc, #176]	; (800ca3c <tcp_write+0x6c0>)
 800c98c:	482c      	ldr	r0, [pc, #176]	; (800ca40 <tcp_write+0x6c4>)
 800c98e:	f00a f9f9 	bl	8016d84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c994:	2b00      	cmp	r3, #0
 800c996:	d016      	beq.n	800c9c6 <tcp_write+0x64a>
 800c998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d012      	beq.n	800c9c6 <tcp_write+0x64a>
 800c9a0:	797b      	ldrb	r3, [r7, #5]
 800c9a2:	f003 0302 	and.w	r3, r3, #2
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10d      	bne.n	800c9c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	899b      	ldrh	r3, [r3, #12]
 800c9b0:	b29c      	uxth	r4, r3
 800c9b2:	2008      	movs	r0, #8
 800c9b4:	f7f9 fca0 	bl	80062f8 <lwip_htons>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	4322      	orrs	r2, r4
 800c9c2:	b292      	uxth	r2, r2
 800c9c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e031      	b.n	800ca2e <tcp_write+0x6b2>
          goto memerr;
 800c9ca:	bf00      	nop
 800c9cc:	e006      	b.n	800c9dc <tcp_write+0x660>
            goto memerr;
 800c9ce:	bf00      	nop
 800c9d0:	e004      	b.n	800c9dc <tcp_write+0x660>
        goto memerr;
 800c9d2:	bf00      	nop
 800c9d4:	e002      	b.n	800c9dc <tcp_write+0x660>
        goto memerr;
 800c9d6:	bf00      	nop
 800c9d8:	e000      	b.n	800c9dc <tcp_write+0x660>
      goto memerr;
 800c9da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	8b5b      	ldrh	r3, [r3, #26]
 800c9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c9f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9f2:	f7fa ff35 	bl	8007860 <pbuf_free>
  }
  if (queue != NULL) {
 800c9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c9fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c9fe:	f7fc fb57 	bl	80090b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00e      	beq.n	800ca2a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10a      	bne.n	800ca2a <tcp_write+0x6ae>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d106      	bne.n	800ca2a <tcp_write+0x6ae>
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <tcp_write+0x6bc>)
 800ca1e:	f240 3227 	movw	r2, #807	; 0x327
 800ca22:	4906      	ldr	r1, [pc, #24]	; (800ca3c <tcp_write+0x6c0>)
 800ca24:	4806      	ldr	r0, [pc, #24]	; (800ca40 <tcp_write+0x6c4>)
 800ca26:	f00a f9ad 	bl	8016d84 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ca2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	375c      	adds	r7, #92	; 0x5c
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd90      	pop	{r4, r7, pc}
 800ca36:	bf00      	nop
 800ca38:	08019570 	.word	0x08019570
 800ca3c:	080198e4 	.word	0x080198e4
 800ca40:	080195c4 	.word	0x080195c4

0800ca44 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ca44:	b590      	push	{r4, r7, lr}
 800ca46:	b08b      	sub	sp, #44	; 0x2c
 800ca48:	af02      	add	r7, sp, #8
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	61fb      	str	r3, [r7, #28]
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <tcp_split_unsent_seg+0x2c>
 800ca62:	4b95      	ldr	r3, [pc, #596]	; (800ccb8 <tcp_split_unsent_seg+0x274>)
 800ca64:	f240 324b 	movw	r2, #843	; 0x34b
 800ca68:	4994      	ldr	r1, [pc, #592]	; (800ccbc <tcp_split_unsent_seg+0x278>)
 800ca6a:	4895      	ldr	r0, [pc, #596]	; (800ccc0 <tcp_split_unsent_seg+0x27c>)
 800ca6c:	f00a f98a 	bl	8016d84 <iprintf>

  useg = pcb->unsent;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca74:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca80:	e116      	b.n	800ccb0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ca82:	887b      	ldrh	r3, [r7, #2]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d109      	bne.n	800ca9c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca88:	4b8b      	ldr	r3, [pc, #556]	; (800ccb8 <tcp_split_unsent_seg+0x274>)
 800ca8a:	f240 3253 	movw	r2, #851	; 0x353
 800ca8e:	498d      	ldr	r1, [pc, #564]	; (800ccc4 <tcp_split_unsent_seg+0x280>)
 800ca90:	488b      	ldr	r0, [pc, #556]	; (800ccc0 <tcp_split_unsent_seg+0x27c>)
 800ca92:	f00a f977 	bl	8016d84 <iprintf>
    return ERR_VAL;
 800ca96:	f06f 0305 	mvn.w	r3, #5
 800ca9a:	e109      	b.n	800ccb0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	891b      	ldrh	r3, [r3, #8]
 800caa0:	887a      	ldrh	r2, [r7, #2]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d301      	bcc.n	800caaa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e102      	b.n	800ccb0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caae:	887a      	ldrh	r2, [r7, #2]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d906      	bls.n	800cac2 <tcp_split_unsent_seg+0x7e>
 800cab4:	4b80      	ldr	r3, [pc, #512]	; (800ccb8 <tcp_split_unsent_seg+0x274>)
 800cab6:	f240 325b 	movw	r2, #859	; 0x35b
 800caba:	4983      	ldr	r1, [pc, #524]	; (800ccc8 <tcp_split_unsent_seg+0x284>)
 800cabc:	4880      	ldr	r0, [pc, #512]	; (800ccc0 <tcp_split_unsent_seg+0x27c>)
 800cabe:	f00a f961 	bl	8016d84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	891b      	ldrh	r3, [r3, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <tcp_split_unsent_seg+0x94>
 800caca:	4b7b      	ldr	r3, [pc, #492]	; (800ccb8 <tcp_split_unsent_seg+0x274>)
 800cacc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cad0:	497e      	ldr	r1, [pc, #504]	; (800cccc <tcp_split_unsent_seg+0x288>)
 800cad2:	487b      	ldr	r0, [pc, #492]	; (800ccc0 <tcp_split_unsent_seg+0x27c>)
 800cad4:	f00a f956 	bl	8016d84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	7a9b      	ldrb	r3, [r3, #10]
 800cadc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cade:	7bfb      	ldrb	r3, [r7, #15]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	891a      	ldrh	r2, [r3, #8]
 800caee:	887b      	ldrh	r3, [r7, #2]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	89bb      	ldrh	r3, [r7, #12]
 800cafa:	4413      	add	r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb02:	4619      	mov	r1, r3
 800cb04:	2036      	movs	r0, #54	; 0x36
 800cb06:	f7fa fbc7 	bl	8007298 <pbuf_alloc>
 800cb0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 80b7 	beq.w	800cc82 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	891a      	ldrh	r2, [r3, #8]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	891b      	ldrh	r3, [r3, #8]
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	887b      	ldrh	r3, [r7, #2]
 800cb24:	4413      	add	r3, r2
 800cb26:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	6858      	ldr	r0, [r3, #4]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	18d1      	adds	r1, r2, r3
 800cb34:	897b      	ldrh	r3, [r7, #10]
 800cb36:	89ba      	ldrh	r2, [r7, #12]
 800cb38:	f7fb f88c 	bl	8007c54 <pbuf_copy_partial>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	89bb      	ldrh	r3, [r7, #12]
 800cb42:	4293      	cmp	r3, r2
 800cb44:	f040 809f 	bne.w	800cc86 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	899b      	ldrh	r3, [r3, #12]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f9 fbd1 	bl	80062f8 <lwip_htons>
 800cb56:	4603      	mov	r3, r0
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb5e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb60:	2300      	movs	r3, #0
 800cb62:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cb64:	7efb      	ldrb	r3, [r7, #27]
 800cb66:	f003 0308 	and.w	r3, r3, #8
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d007      	beq.n	800cb7e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb6e:	7efb      	ldrb	r3, [r7, #27]
 800cb70:	f023 0308 	bic.w	r3, r3, #8
 800cb74:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cb76:	7ebb      	ldrb	r3, [r7, #26]
 800cb78:	f043 0308 	orr.w	r3, r3, #8
 800cb7c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cb7e:	7efb      	ldrb	r3, [r7, #27]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d007      	beq.n	800cb98 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb88:	7efb      	ldrb	r3, [r7, #27]
 800cb8a:	f023 0301 	bic.w	r3, r3, #1
 800cb8e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cb90:	7ebb      	ldrb	r3, [r7, #26]
 800cb92:	f043 0301 	orr.w	r3, r3, #1
 800cb96:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7f9 fbbf 	bl	8006322 <lwip_htonl>
 800cba4:	4602      	mov	r2, r0
 800cba6:	887b      	ldrh	r3, [r7, #2]
 800cba8:	18d1      	adds	r1, r2, r3
 800cbaa:	7eba      	ldrb	r2, [r7, #26]
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	6939      	ldr	r1, [r7, #16]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff fa4f 	bl	800c058 <tcp_create_segment>
 800cbba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d063      	beq.n	800cc8a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fa fed2 	bl	8007970 <pbuf_clen>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	461a      	mov	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbd6:	1a9b      	subs	r3, r3, r2
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	6858      	ldr	r0, [r3, #4]
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	891a      	ldrh	r2, [r3, #8]
 800cbea:	89bb      	ldrh	r3, [r7, #12]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f7fa fcaf 	bl	8007554 <pbuf_realloc>
  useg->len -= remainder;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	891a      	ldrh	r2, [r3, #8]
 800cbfa:	89bb      	ldrh	r3, [r7, #12]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	899b      	ldrh	r3, [r3, #12]
 800cc0a:	b29c      	uxth	r4, r3
 800cc0c:	7efb      	ldrb	r3, [r7, #27]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f9 fb71 	bl	80062f8 <lwip_htons>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	4322      	orrs	r2, r4
 800cc20:	b292      	uxth	r2, r2
 800cc22:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fa fea1 	bl	8007970 <pbuf_clen>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc38:	4413      	add	r3, r2
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fa fe92 	bl	8007970 <pbuf_clen>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc56:	4413      	add	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	69fa      	ldr	r2, [r7, #28]
 800cc6c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e016      	b.n	800ccb0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cc82:	bf00      	nop
 800cc84:	e002      	b.n	800cc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc86:	bf00      	nop
 800cc88:	e000      	b.n	800cc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc8a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d006      	beq.n	800cca0 <tcp_split_unsent_seg+0x25c>
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <tcp_split_unsent_seg+0x274>)
 800cc94:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc98:	490d      	ldr	r1, [pc, #52]	; (800ccd0 <tcp_split_unsent_seg+0x28c>)
 800cc9a:	4809      	ldr	r0, [pc, #36]	; (800ccc0 <tcp_split_unsent_seg+0x27c>)
 800cc9c:	f00a f872 	bl	8016d84 <iprintf>
  if (p != NULL) {
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cca6:	6938      	ldr	r0, [r7, #16]
 800cca8:	f7fa fdda 	bl	8007860 <pbuf_free>
  }

  return ERR_MEM;
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3724      	adds	r7, #36	; 0x24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd90      	pop	{r4, r7, pc}
 800ccb8:	08019570 	.word	0x08019570
 800ccbc:	08019904 	.word	0x08019904
 800ccc0:	080195c4 	.word	0x080195c4
 800ccc4:	08019928 	.word	0x08019928
 800ccc8:	0801994c 	.word	0x0801994c
 800cccc:	0801995c 	.word	0x0801995c
 800ccd0:	0801996c 	.word	0x0801996c

0800ccd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ccd4:	b590      	push	{r4, r7, lr}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_send_fin+0x1c>
 800cce2:	4b21      	ldr	r3, [pc, #132]	; (800cd68 <tcp_send_fin+0x94>)
 800cce4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cce8:	4920      	ldr	r1, [pc, #128]	; (800cd6c <tcp_send_fin+0x98>)
 800ccea:	4821      	ldr	r0, [pc, #132]	; (800cd70 <tcp_send_fin+0x9c>)
 800ccec:	f00a f84a 	bl	8016d84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d02e      	beq.n	800cd56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	e002      	b.n	800cd06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1f8      	bne.n	800cd00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	899b      	ldrh	r3, [r3, #12]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f9 faee 	bl	80062f8 <lwip_htons>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	f003 0307 	and.w	r3, r3, #7
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d116      	bne.n	800cd56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	b29c      	uxth	r4, r3
 800cd30:	2001      	movs	r0, #1
 800cd32:	f7f9 fae1 	bl	80062f8 <lwip_htons>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	4322      	orrs	r2, r4
 800cd40:	b292      	uxth	r2, r2
 800cd42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	8b5b      	ldrh	r3, [r3, #26]
 800cd48:	f043 0320 	orr.w	r3, r3, #32
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e004      	b.n	800cd60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd56:	2101      	movs	r1, #1
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f80b 	bl	800cd74 <tcp_enqueue_flags>
 800cd5e:	4603      	mov	r3, r0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd90      	pop	{r4, r7, pc}
 800cd68:	08019570 	.word	0x08019570
 800cd6c:	08019978 	.word	0x08019978
 800cd70:	080195c4 	.word	0x080195c4

0800cd74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08a      	sub	sp, #40	; 0x28
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <tcp_enqueue_flags+0x2c>
 800cd92:	4b67      	ldr	r3, [pc, #412]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800cd94:	f240 4211 	movw	r2, #1041	; 0x411
 800cd98:	4966      	ldr	r1, [pc, #408]	; (800cf34 <tcp_enqueue_flags+0x1c0>)
 800cd9a:	4867      	ldr	r0, [pc, #412]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800cd9c:	f009 fff2 	bl	8016d84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d106      	bne.n	800cdb4 <tcp_enqueue_flags+0x40>
 800cda6:	4b62      	ldr	r3, [pc, #392]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800cda8:	f240 4213 	movw	r2, #1043	; 0x413
 800cdac:	4963      	ldr	r1, [pc, #396]	; (800cf3c <tcp_enqueue_flags+0x1c8>)
 800cdae:	4862      	ldr	r0, [pc, #392]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800cdb0:	f009 ffe8 	bl	8016d84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	f003 0302 	and.w	r3, r3, #2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d001      	beq.n	800cdc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cdc2:	7ffb      	ldrb	r3, [r7, #31]
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	2036      	movs	r0, #54	; 0x36
 800cdda:	f7fa fa5d 	bl	8007298 <pbuf_alloc>
 800cdde:	6138      	str	r0, [r7, #16]
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8b5b      	ldrh	r3, [r3, #26]
 800cdea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf8:	e095      	b.n	800cf26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	895a      	ldrh	r2, [r3, #10]
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d206      	bcs.n	800ce14 <tcp_enqueue_flags+0xa0>
 800ce06:	4b4a      	ldr	r3, [pc, #296]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800ce08:	f240 4239 	movw	r2, #1081	; 0x439
 800ce0c:	494c      	ldr	r1, [pc, #304]	; (800cf40 <tcp_enqueue_flags+0x1cc>)
 800ce0e:	484a      	ldr	r0, [pc, #296]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800ce10:	f009 ffb8 	bl	8016d84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ce18:	78fa      	ldrb	r2, [r7, #3]
 800ce1a:	7ffb      	ldrb	r3, [r7, #31]
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	460b      	mov	r3, r1
 800ce20:	6939      	ldr	r1, [r7, #16]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff f918 	bl	800c058 <tcp_create_segment>
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d109      	bne.n	800ce44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	8b5b      	ldrh	r3, [r3, #26]
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ce3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce42:	e070      	b.n	800cf26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f003 0303 	and.w	r3, r3, #3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d006      	beq.n	800ce5e <tcp_enqueue_flags+0xea>
 800ce50:	4b37      	ldr	r3, [pc, #220]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800ce52:	f240 4242 	movw	r2, #1090	; 0x442
 800ce56:	493b      	ldr	r1, [pc, #236]	; (800cf44 <tcp_enqueue_flags+0x1d0>)
 800ce58:	4837      	ldr	r0, [pc, #220]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800ce5a:	f009 ff93 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	891b      	ldrh	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d006      	beq.n	800ce74 <tcp_enqueue_flags+0x100>
 800ce66:	4b32      	ldr	r3, [pc, #200]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800ce68:	f240 4243 	movw	r2, #1091	; 0x443
 800ce6c:	4936      	ldr	r1, [pc, #216]	; (800cf48 <tcp_enqueue_flags+0x1d4>)
 800ce6e:	4832      	ldr	r0, [pc, #200]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800ce70:	f009 ff88 	bl	8016d84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d103      	bne.n	800ce84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce82:	e00d      	b.n	800cea0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	e002      	b.n	800ce92 <tcp_enqueue_flags+0x11e>
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1f8      	bne.n	800ce8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	f003 0302 	and.w	r3, r3, #2
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d104      	bne.n	800cebc <tcp_enqueue_flags+0x148>
 800ceb2:	78fb      	ldrb	r3, [r7, #3]
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cec6:	78fb      	ldrb	r3, [r7, #3]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d006      	beq.n	800cede <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	8b5b      	ldrh	r3, [r3, #26]
 800ced4:	f043 0320 	orr.w	r3, r3, #32
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fa fd44 	bl	8007970 <pbuf_clen>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461a      	mov	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cef2:	4413      	add	r3, r2
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00e      	beq.n	800cf24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <tcp_enqueue_flags+0x1b0>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <tcp_enqueue_flags+0x1b0>
 800cf16:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <tcp_enqueue_flags+0x1bc>)
 800cf18:	f240 4265 	movw	r2, #1125	; 0x465
 800cf1c:	490b      	ldr	r1, [pc, #44]	; (800cf4c <tcp_enqueue_flags+0x1d8>)
 800cf1e:	4806      	ldr	r0, [pc, #24]	; (800cf38 <tcp_enqueue_flags+0x1c4>)
 800cf20:	f009 ff30 	bl	8016d84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	08019570 	.word	0x08019570
 800cf34:	08019994 	.word	0x08019994
 800cf38:	080195c4 	.word	0x080195c4
 800cf3c:	080199ec 	.word	0x080199ec
 800cf40:	08019a0c 	.word	0x08019a0c
 800cf44:	08019a48 	.word	0x08019a48
 800cf48:	08019a60 	.word	0x08019a60
 800cf4c:	08019a8c 	.word	0x08019a8c

0800cf50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cf50:	b5b0      	push	{r4, r5, r7, lr}
 800cf52:	b08a      	sub	sp, #40	; 0x28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <tcp_output+0x1c>
 800cf5e:	4b9e      	ldr	r3, [pc, #632]	; (800d1d8 <tcp_output+0x288>)
 800cf60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cf64:	499d      	ldr	r1, [pc, #628]	; (800d1dc <tcp_output+0x28c>)
 800cf66:	489e      	ldr	r0, [pc, #632]	; (800d1e0 <tcp_output+0x290>)
 800cf68:	f009 ff0c 	bl	8016d84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d106      	bne.n	800cf82 <tcp_output+0x32>
 800cf74:	4b98      	ldr	r3, [pc, #608]	; (800d1d8 <tcp_output+0x288>)
 800cf76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cf7a:	499a      	ldr	r1, [pc, #616]	; (800d1e4 <tcp_output+0x294>)
 800cf7c:	4898      	ldr	r0, [pc, #608]	; (800d1e0 <tcp_output+0x290>)
 800cf7e:	f009 ff01 	bl	8016d84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf82:	4b99      	ldr	r3, [pc, #612]	; (800d1e8 <tcp_output+0x298>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d101      	bne.n	800cf90 <tcp_output+0x40>
    return ERR_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e1ce      	b.n	800d32e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	bf28      	it	cs
 800cfa0:	4613      	movcs	r3, r2
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10b      	bne.n	800cfca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	8b5b      	ldrh	r3, [r3, #26]
 800cfb6:	f003 0302 	and.w	r3, r3, #2
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 81aa 	beq.w	800d314 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fdcb 	bl	800db5c <tcp_send_empty_ack>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	e1b1      	b.n	800d32e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cfca:	6879      	ldr	r1, [r7, #4]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7ff f824 	bl	800c020 <tcp_route>
 800cfd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <tcp_output+0x96>
    return ERR_RTE;
 800cfe0:	f06f 0303 	mvn.w	r3, #3
 800cfe4:	e1a3      	b.n	800d32e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d003      	beq.n	800cff4 <tcp_output+0xa4>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d111      	bne.n	800d018 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <tcp_output+0xb0>
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	3304      	adds	r3, #4
 800cffe:	e000      	b.n	800d002 <tcp_output+0xb2>
 800d000:	2300      	movs	r3, #0
 800d002:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <tcp_output+0xc0>
      return ERR_RTE;
 800d00a:	f06f 0303 	mvn.w	r3, #3
 800d00e:	e18e      	b.n	800d32e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f9 f97f 	bl	8006322 <lwip_htonl>
 800d024:	4602      	mov	r2, r0
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02e:	8912      	ldrh	r2, [r2, #8]
 800d030:	4413      	add	r3, r2
 800d032:	69ba      	ldr	r2, [r7, #24]
 800d034:	429a      	cmp	r2, r3
 800d036:	d227      	bcs.n	800d088 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d03e:	461a      	mov	r2, r3
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	4293      	cmp	r3, r2
 800d044:	d114      	bne.n	800d070 <tcp_output+0x120>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d110      	bne.n	800d070 <tcp_output+0x120>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10b      	bne.n	800d070 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	8b5b      	ldrh	r3, [r3, #26]
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 814d 	beq.w	800d318 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fd6c 	bl	800db5c <tcp_send_empty_ack>
 800d084:	4603      	mov	r3, r0
 800d086:	e152      	b.n	800d32e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d094:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 811c 	beq.w	800d2d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d09e:	e002      	b.n	800d0a6 <tcp_output+0x156>
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	623b      	str	r3, [r7, #32]
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1f8      	bne.n	800d0a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d0ae:	e112      	b.n	800d2d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	899b      	ldrh	r3, [r3, #12]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f9 f91d 	bl	80062f8 <lwip_htons>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <tcp_output+0x188>
 800d0ca:	4b43      	ldr	r3, [pc, #268]	; (800d1d8 <tcp_output+0x288>)
 800d0cc:	f240 5236 	movw	r2, #1334	; 0x536
 800d0d0:	4946      	ldr	r1, [pc, #280]	; (800d1ec <tcp_output+0x29c>)
 800d0d2:	4843      	ldr	r0, [pc, #268]	; (800d1e0 <tcp_output+0x290>)
 800d0d4:	f009 fe56 	bl	8016d84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01f      	beq.n	800d120 <tcp_output+0x1d0>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	8b5b      	ldrh	r3, [r3, #26]
 800d0e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d119      	bne.n	800d120 <tcp_output+0x1d0>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00b      	beq.n	800d10c <tcp_output+0x1bc>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d110      	bne.n	800d120 <tcp_output+0x1d0>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d102:	891a      	ldrh	r2, [r3, #8]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d108:	429a      	cmp	r2, r3
 800d10a:	d209      	bcs.n	800d120 <tcp_output+0x1d0>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d112:	2b00      	cmp	r3, #0
 800d114:	d004      	beq.n	800d120 <tcp_output+0x1d0>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d901      	bls.n	800d124 <tcp_output+0x1d4>
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <tcp_output+0x1d6>
 800d124:	2300      	movs	r3, #0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d106      	bne.n	800d138 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	8b5b      	ldrh	r3, [r3, #26]
 800d12e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 80e4 	beq.w	800d300 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	7d1b      	ldrb	r3, [r3, #20]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d00d      	beq.n	800d15c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	899b      	ldrh	r3, [r3, #12]
 800d146:	b29c      	uxth	r4, r3
 800d148:	2010      	movs	r0, #16
 800d14a:	f7f9 f8d5 	bl	80062f8 <lwip_htons>
 800d14e:	4603      	mov	r3, r0
 800d150:	461a      	mov	r2, r3
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	4322      	orrs	r2, r4
 800d158:	b292      	uxth	r2, r2
 800d15a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d162:	f000 f909 	bl	800d378 <tcp_output_segment>
 800d166:	4603      	mov	r3, r0
 800d168:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	8b5b      	ldrh	r3, [r3, #26]
 800d176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	835a      	strh	r2, [r3, #26]
      return err;
 800d180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d184:	e0d3      	b.n	800d32e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7d1b      	ldrb	r3, [r3, #20]
 800d192:	2b02      	cmp	r3, #2
 800d194:	d006      	beq.n	800d1a4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	8b5b      	ldrh	r3, [r3, #26]
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7f9 f8b9 	bl	8006322 <lwip_htonl>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	891b      	ldrh	r3, [r3, #8]
 800d1b6:	461d      	mov	r5, r3
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	899b      	ldrh	r3, [r3, #12]
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7f9 f899 	bl	80062f8 <lwip_htons>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00e      	beq.n	800d1f0 <tcp_output+0x2a0>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e00d      	b.n	800d1f2 <tcp_output+0x2a2>
 800d1d6:	bf00      	nop
 800d1d8:	08019570 	.word	0x08019570
 800d1dc:	08019ab4 	.word	0x08019ab4
 800d1e0:	080195c4 	.word	0x080195c4
 800d1e4:	08019acc 	.word	0x08019acc
 800d1e8:	20006980 	.word	0x20006980
 800d1ec:	08019af4 	.word	0x08019af4
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	442b      	add	r3, r5
 800d1f4:	4423      	add	r3, r4
 800d1f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	da02      	bge.n	800d20a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	891b      	ldrh	r3, [r3, #8]
 800d20e:	461c      	mov	r4, r3
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	899b      	ldrh	r3, [r3, #12]
 800d216:	b29b      	uxth	r3, r3
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f9 f86d 	bl	80062f8 <lwip_htons>
 800d21e:	4603      	mov	r3, r0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <tcp_output+0x2de>
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <tcp_output+0x2e0>
 800d22e:	2300      	movs	r3, #0
 800d230:	4423      	add	r3, r4
 800d232:	2b00      	cmp	r3, #0
 800d234:	d049      	beq.n	800d2ca <tcp_output+0x37a>
      seg->next = NULL;
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d240:	2b00      	cmp	r3, #0
 800d242:	d105      	bne.n	800d250 <tcp_output+0x300>
        pcb->unacked = seg;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d248:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	623b      	str	r3, [r7, #32]
 800d24e:	e03f      	b.n	800d2d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	4618      	mov	r0, r3
 800d258:	f7f9 f863 	bl	8006322 <lwip_htonl>
 800d25c:	4604      	mov	r4, r0
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	4618      	mov	r0, r3
 800d266:	f7f9 f85c 	bl	8006322 <lwip_htonl>
 800d26a:	4603      	mov	r3, r0
 800d26c:	1ae3      	subs	r3, r4, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	da24      	bge.n	800d2bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3370      	adds	r3, #112	; 0x70
 800d276:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d278:	e002      	b.n	800d280 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d011      	beq.n	800d2ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	f7f9 f846 	bl	8006322 <lwip_htonl>
 800d296:	4604      	mov	r4, r0
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f9 f83f 	bl	8006322 <lwip_htonl>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	dbe6      	blt.n	800d27a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	e009      	b.n	800d2d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	623b      	str	r3, [r7, #32]
 800d2c8:	e002      	b.n	800d2d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d2ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2cc:	f7fb ff05 	bl	80090da <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d012      	beq.n	800d302 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7f9 f81d 	bl	8006322 <lwip_htonl>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f2:	8912      	ldrh	r2, [r2, #8]
 800d2f4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	f4bf aed9 	bcs.w	800d0b0 <tcp_output+0x160>
 800d2fe:	e000      	b.n	800d302 <tcp_output+0x3b2>
      break;
 800d300:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d306:	2b00      	cmp	r3, #0
 800d308:	d108      	bne.n	800d31c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d312:	e004      	b.n	800d31e <tcp_output+0x3ce>
    goto output_done;
 800d314:	bf00      	nop
 800d316:	e002      	b.n	800d31e <tcp_output+0x3ce>
    goto output_done;
 800d318:	bf00      	nop
 800d31a:	e000      	b.n	800d31e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d31c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	8b5b      	ldrh	r3, [r3, #26]
 800d322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d326:	b29a      	uxth	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3728      	adds	r7, #40	; 0x28
 800d332:	46bd      	mov	sp, r7
 800d334:	bdb0      	pop	{r4, r5, r7, pc}
 800d336:	bf00      	nop

0800d338 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <tcp_output_segment_busy+0x1c>
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <tcp_output_segment_busy+0x34>)
 800d348:	f240 529a 	movw	r2, #1434	; 0x59a
 800d34c:	4908      	ldr	r1, [pc, #32]	; (800d370 <tcp_output_segment_busy+0x38>)
 800d34e:	4809      	ldr	r0, [pc, #36]	; (800d374 <tcp_output_segment_busy+0x3c>)
 800d350:	f009 fd18 	bl	8016d84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	7b9b      	ldrb	r3, [r3, #14]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d001      	beq.n	800d362 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	08019570 	.word	0x08019570
 800d370:	08019b0c 	.word	0x08019b0c
 800d374:	080195c4 	.word	0x080195c4

0800d378 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d378:	b5b0      	push	{r4, r5, r7, lr}
 800d37a:	b08c      	sub	sp, #48	; 0x30
 800d37c:	af04      	add	r7, sp, #16
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <tcp_output_segment+0x20>
 800d38a:	4b63      	ldr	r3, [pc, #396]	; (800d518 <tcp_output_segment+0x1a0>)
 800d38c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d390:	4962      	ldr	r1, [pc, #392]	; (800d51c <tcp_output_segment+0x1a4>)
 800d392:	4863      	ldr	r0, [pc, #396]	; (800d520 <tcp_output_segment+0x1a8>)
 800d394:	f009 fcf6 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d106      	bne.n	800d3ac <tcp_output_segment+0x34>
 800d39e:	4b5e      	ldr	r3, [pc, #376]	; (800d518 <tcp_output_segment+0x1a0>)
 800d3a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d3a4:	495f      	ldr	r1, [pc, #380]	; (800d524 <tcp_output_segment+0x1ac>)
 800d3a6:	485e      	ldr	r0, [pc, #376]	; (800d520 <tcp_output_segment+0x1a8>)
 800d3a8:	f009 fcec 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <tcp_output_segment+0x48>
 800d3b2:	4b59      	ldr	r3, [pc, #356]	; (800d518 <tcp_output_segment+0x1a0>)
 800d3b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d3b8:	495b      	ldr	r1, [pc, #364]	; (800d528 <tcp_output_segment+0x1b0>)
 800d3ba:	4859      	ldr	r0, [pc, #356]	; (800d520 <tcp_output_segment+0x1a8>)
 800d3bc:	f009 fce2 	bl	8016d84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff ffb9 	bl	800d338 <tcp_output_segment_busy>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e09f      	b.n	800d510 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	68dc      	ldr	r4, [r3, #12]
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7f8 ffa2 	bl	8006322 <lwip_htonl>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	68dc      	ldr	r4, [r3, #12]
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	f7f8 ff84 	bl	80062f8 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d3fc:	441a      	add	r2, r3
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	3314      	adds	r3, #20
 800d408:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	7a9b      	ldrb	r3, [r3, #10]
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d015      	beq.n	800d442 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3304      	adds	r3, #4
 800d41a:	461a      	mov	r2, r3
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d422:	f7fc fa37 	bl	8009894 <tcp_eff_send_mss_netif>
 800d426:	4603      	mov	r3, r0
 800d428:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d42a:	8b7b      	ldrh	r3, [r7, #26]
 800d42c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d430:	4618      	mov	r0, r3
 800d432:	f7f8 ff76 	bl	8006322 <lwip_htonl>
 800d436:	4602      	mov	r2, r0
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	3304      	adds	r3, #4
 800d440:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d448:	2b00      	cmp	r3, #0
 800d44a:	da02      	bge.n	800d452 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2200      	movs	r2, #0
 800d450:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10c      	bne.n	800d474 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d45a:	4b34      	ldr	r3, [pc, #208]	; (800d52c <tcp_output_segment+0x1b4>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7f8 ff5a 	bl	8006322 <lwip_htonl>
 800d46e:	4602      	mov	r2, r0
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68da      	ldr	r2, [r3, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	8959      	ldrh	r1, [r3, #10]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	8b3a      	ldrh	r2, [r7, #24]
 800d48e:	1a8a      	subs	r2, r1, r2
 800d490:	b292      	uxth	r2, r2
 800d492:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	8919      	ldrh	r1, [r3, #8]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	8b3a      	ldrh	r2, [r7, #24]
 800d4a0:	1a8a      	subs	r2, r1, r2
 800d4a2:	b292      	uxth	r2, r2
 800d4a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	68d2      	ldr	r2, [r2, #12]
 800d4ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	741a      	strb	r2, [r3, #16]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	f103 0214 	add.w	r2, r3, #20
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	7a9b      	ldrb	r3, [r3, #10]
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	4413      	add	r3, r2
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d006      	beq.n	800d4e4 <tcp_output_segment+0x16c>
 800d4d6:	4b10      	ldr	r3, [pc, #64]	; (800d518 <tcp_output_segment+0x1a0>)
 800d4d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800d4dc:	4914      	ldr	r1, [pc, #80]	; (800d530 <tcp_output_segment+0x1b8>)
 800d4de:	4810      	ldr	r0, [pc, #64]	; (800d520 <tcp_output_segment+0x1a8>)
 800d4e0:	f009 fc50 	bl	8016d84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6858      	ldr	r0, [r3, #4]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	1d1c      	adds	r4, r3, #4
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	7add      	ldrb	r5, [r3, #11]
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	7a9b      	ldrb	r3, [r3, #10]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	9202      	str	r2, [sp, #8]
 800d4fa:	2206      	movs	r2, #6
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	462b      	mov	r3, r5
 800d502:	4622      	mov	r2, r4
 800d504:	f002 fa36 	bl	800f974 <ip4_output_if>
 800d508:	4603      	mov	r3, r0
 800d50a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bdb0      	pop	{r4, r5, r7, pc}
 800d518:	08019570 	.word	0x08019570
 800d51c:	08019b34 	.word	0x08019b34
 800d520:	080195c4 	.word	0x080195c4
 800d524:	08019b54 	.word	0x08019b54
 800d528:	08019b74 	.word	0x08019b74
 800d52c:	20006970 	.word	0x20006970
 800d530:	08019b98 	.word	0x08019b98

0800d534 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d534:	b5b0      	push	{r4, r5, r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <tcp_rexmit_rto_prepare+0x1c>
 800d542:	4b31      	ldr	r3, [pc, #196]	; (800d608 <tcp_rexmit_rto_prepare+0xd4>)
 800d544:	f240 6263 	movw	r2, #1635	; 0x663
 800d548:	4930      	ldr	r1, [pc, #192]	; (800d60c <tcp_rexmit_rto_prepare+0xd8>)
 800d54a:	4831      	ldr	r0, [pc, #196]	; (800d610 <tcp_rexmit_rto_prepare+0xdc>)
 800d54c:	f009 fc1a 	bl	8016d84 <iprintf>

  if (pcb->unacked == NULL) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d554:	2b00      	cmp	r3, #0
 800d556:	d102      	bne.n	800d55e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d558:	f06f 0305 	mvn.w	r3, #5
 800d55c:	e050      	b.n	800d600 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e00b      	b.n	800d57e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7ff fee6 	bl	800d338 <tcp_output_segment_busy>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d572:	f06f 0305 	mvn.w	r3, #5
 800d576:	e043      	b.n	800d600 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1ef      	bne.n	800d566 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7ff fed6 	bl	800d338 <tcp_output_segment_busy>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d002      	beq.n	800d598 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d592:	f06f 0305 	mvn.w	r3, #5
 800d596:	e033      	b.n	800d600 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8b5b      	ldrh	r3, [r3, #26]
 800d5b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f8 fead 	bl	8006322 <lwip_htonl>
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	891b      	ldrh	r3, [r3, #8]
 800d5ce:	461d      	mov	r5, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	899b      	ldrh	r3, [r3, #12]
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7f8 fe8d 	bl	80062f8 <lwip_htons>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0303 	and.w	r3, r3, #3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <tcp_rexmit_rto_prepare+0xba>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e000      	b.n	800d5f0 <tcp_rexmit_rto_prepare+0xbc>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	442b      	add	r3, r5
 800d5f2:	18e2      	adds	r2, r4, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bdb0      	pop	{r4, r5, r7, pc}
 800d608:	08019570 	.word	0x08019570
 800d60c:	08019bac 	.word	0x08019bac
 800d610:	080195c4 	.word	0x080195c4

0800d614 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d106      	bne.n	800d630 <tcp_rexmit_rto_commit+0x1c>
 800d622:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <tcp_rexmit_rto_commit+0x44>)
 800d624:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d628:	490c      	ldr	r1, [pc, #48]	; (800d65c <tcp_rexmit_rto_commit+0x48>)
 800d62a:	480d      	ldr	r0, [pc, #52]	; (800d660 <tcp_rexmit_rto_commit+0x4c>)
 800d62c:	f009 fbaa 	bl	8016d84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d636:	2bff      	cmp	r3, #255	; 0xff
 800d638:	d007      	beq.n	800d64a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d640:	3301      	adds	r3, #1
 800d642:	b2da      	uxtb	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff fc80 	bl	800cf50 <tcp_output>
}
 800d650:	bf00      	nop
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08019570 	.word	0x08019570
 800d65c:	08019bd0 	.word	0x08019bd0
 800d660:	080195c4 	.word	0x080195c4

0800d664 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <tcp_rexmit_rto+0x1c>
 800d672:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <tcp_rexmit_rto+0x38>)
 800d674:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d678:	4909      	ldr	r1, [pc, #36]	; (800d6a0 <tcp_rexmit_rto+0x3c>)
 800d67a:	480a      	ldr	r0, [pc, #40]	; (800d6a4 <tcp_rexmit_rto+0x40>)
 800d67c:	f009 fb82 	bl	8016d84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff ff57 	bl	800d534 <tcp_rexmit_rto_prepare>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff ffc1 	bl	800d614 <tcp_rexmit_rto_commit>
  }
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	08019570 	.word	0x08019570
 800d6a0:	08019bf4 	.word	0x08019bf4
 800d6a4:	080195c4 	.word	0x080195c4

0800d6a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <tcp_rexmit+0x1c>
 800d6b6:	4b2f      	ldr	r3, [pc, #188]	; (800d774 <tcp_rexmit+0xcc>)
 800d6b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d6bc:	492e      	ldr	r1, [pc, #184]	; (800d778 <tcp_rexmit+0xd0>)
 800d6be:	482f      	ldr	r0, [pc, #188]	; (800d77c <tcp_rexmit+0xd4>)
 800d6c0:	f009 fb60 	bl	8016d84 <iprintf>

  if (pcb->unacked == NULL) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d6cc:	f06f 0305 	mvn.w	r3, #5
 800d6d0:	e04c      	b.n	800d76c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d6d8:	68b8      	ldr	r0, [r7, #8]
 800d6da:	f7ff fe2d 	bl	800d338 <tcp_output_segment_busy>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d6e4:	f06f 0305 	mvn.w	r3, #5
 800d6e8:	e040      	b.n	800d76c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	336c      	adds	r3, #108	; 0x6c
 800d6f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6f8:	e002      	b.n	800d700 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d011      	beq.n	800d72c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	4618      	mov	r0, r3
 800d712:	f7f8 fe06 	bl	8006322 <lwip_htonl>
 800d716:	4604      	mov	r4, r0
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	f7f8 fdff 	bl	8006322 <lwip_htonl>
 800d724:	4603      	mov	r3, r0
 800d726:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dbe6      	blt.n	800d6fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d103      	bne.n	800d74a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d750:	2bff      	cmp	r3, #255	; 0xff
 800d752:	d007      	beq.n	800d764 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d75a:	3301      	adds	r3, #1
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	bd90      	pop	{r4, r7, pc}
 800d774:	08019570 	.word	0x08019570
 800d778:	08019c10 	.word	0x08019c10
 800d77c:	080195c4 	.word	0x080195c4

0800d780 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <tcp_rexmit_fast+0x1c>
 800d78e:	4b2a      	ldr	r3, [pc, #168]	; (800d838 <tcp_rexmit_fast+0xb8>)
 800d790:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d794:	4929      	ldr	r1, [pc, #164]	; (800d83c <tcp_rexmit_fast+0xbc>)
 800d796:	482a      	ldr	r0, [pc, #168]	; (800d840 <tcp_rexmit_fast+0xc0>)
 800d798:	f009 faf4 	bl	8016d84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d045      	beq.n	800d830 <tcp_rexmit_fast+0xb0>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	8b5b      	ldrh	r3, [r3, #26]
 800d7a8:	f003 0304 	and.w	r3, r3, #4
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d13f      	bne.n	800d830 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff ff79 	bl	800d6a8 <tcp_rexmit>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d139      	bne.n	800d830 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	bf28      	it	cs
 800d7cc:	4613      	movcs	r3, r2
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	da00      	bge.n	800d7d6 <tcp_rexmit_fast+0x56>
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	105b      	asrs	r3, r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d206      	bcs.n	800d800 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d80a:	4619      	mov	r1, r3
 800d80c:	0049      	lsls	r1, r1, #1
 800d80e:	440b      	add	r3, r1
 800d810:	b29b      	uxth	r3, r3
 800d812:	4413      	add	r3, r2
 800d814:	b29a      	uxth	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	8b5b      	ldrh	r3, [r3, #26]
 800d820:	f043 0304 	orr.w	r3, r3, #4
 800d824:	b29a      	uxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08019570 	.word	0x08019570
 800d83c:	08019c28 	.word	0x08019c28
 800d840:	080195c4 	.word	0x080195c4

0800d844 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	817b      	strh	r3, [r7, #10]
 800d852:	4613      	mov	r3, r2
 800d854:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d856:	897a      	ldrh	r2, [r7, #10]
 800d858:	893b      	ldrh	r3, [r7, #8]
 800d85a:	4413      	add	r3, r2
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	3314      	adds	r3, #20
 800d860:	b29b      	uxth	r3, r3
 800d862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d866:	4619      	mov	r1, r3
 800d868:	2022      	movs	r0, #34	; 0x22
 800d86a:	f7f9 fd15 	bl	8007298 <pbuf_alloc>
 800d86e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d04d      	beq.n	800d912 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d876:	897b      	ldrh	r3, [r7, #10]
 800d878:	3313      	adds	r3, #19
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	8952      	ldrh	r2, [r2, #10]
 800d87e:	4293      	cmp	r3, r2
 800d880:	db06      	blt.n	800d890 <tcp_output_alloc_header_common+0x4c>
 800d882:	4b26      	ldr	r3, [pc, #152]	; (800d91c <tcp_output_alloc_header_common+0xd8>)
 800d884:	f240 7223 	movw	r2, #1827	; 0x723
 800d888:	4925      	ldr	r1, [pc, #148]	; (800d920 <tcp_output_alloc_header_common+0xdc>)
 800d88a:	4826      	ldr	r0, [pc, #152]	; (800d924 <tcp_output_alloc_header_common+0xe0>)
 800d88c:	f009 fa7a 	bl	8016d84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d896:	8c3b      	ldrh	r3, [r7, #32]
 800d898:	4618      	mov	r0, r3
 800d89a:	f7f8 fd2d 	bl	80062f8 <lwip_htons>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7f8 fd25 	bl	80062f8 <lwip_htons>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7f8 fd30 	bl	8006322 <lwip_htonl>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d8c8:	897b      	ldrh	r3, [r7, #10]
 800d8ca:	089b      	lsrs	r3, r3, #2
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	3305      	adds	r3, #5
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	031b      	lsls	r3, r3, #12
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7f8 fd09 	bl	80062f8 <lwip_htons>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d8ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f8 fd01 	bl	80062f8 <lwip_htons>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2200      	movs	r2, #0
 800d902:	741a      	strb	r2, [r3, #16]
 800d904:	2200      	movs	r2, #0
 800d906:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	2200      	movs	r2, #0
 800d90c:	749a      	strb	r2, [r3, #18]
 800d90e:	2200      	movs	r2, #0
 800d910:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d912:	697b      	ldr	r3, [r7, #20]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	08019570 	.word	0x08019570
 800d920:	08019c48 	.word	0x08019c48
 800d924:	080195c4 	.word	0x080195c4

0800d928 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d928:	b5b0      	push	{r4, r5, r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af04      	add	r7, sp, #16
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	607b      	str	r3, [r7, #4]
 800d932:	460b      	mov	r3, r1
 800d934:	817b      	strh	r3, [r7, #10]
 800d936:	4613      	mov	r3, r2
 800d938:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <tcp_output_alloc_header+0x26>
 800d940:	4b15      	ldr	r3, [pc, #84]	; (800d998 <tcp_output_alloc_header+0x70>)
 800d942:	f240 7242 	movw	r2, #1858	; 0x742
 800d946:	4915      	ldr	r1, [pc, #84]	; (800d99c <tcp_output_alloc_header+0x74>)
 800d948:	4815      	ldr	r0, [pc, #84]	; (800d9a0 <tcp_output_alloc_header+0x78>)
 800d94a:	f009 fa1b 	bl	8016d84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	8adb      	ldrh	r3, [r3, #22]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	8b12      	ldrh	r2, [r2, #24]
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d95e:	893d      	ldrh	r5, [r7, #8]
 800d960:	897c      	ldrh	r4, [r7, #10]
 800d962:	9103      	str	r1, [sp, #12]
 800d964:	2110      	movs	r1, #16
 800d966:	9102      	str	r1, [sp, #8]
 800d968:	9201      	str	r2, [sp, #4]
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	462a      	mov	r2, r5
 800d970:	4621      	mov	r1, r4
 800d972:	f7ff ff67 	bl	800d844 <tcp_output_alloc_header_common>
 800d976:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d006      	beq.n	800d98c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d986:	441a      	add	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d98c:	697b      	ldr	r3, [r7, #20]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bdb0      	pop	{r4, r5, r7, pc}
 800d996:	bf00      	nop
 800d998:	08019570 	.word	0x08019570
 800d99c:	08019c78 	.word	0x08019c78
 800d9a0:	080195c4 	.word	0x080195c4

0800d9a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	71fb      	strb	r3, [r7, #7]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d106      	bne.n	800d9d2 <tcp_output_fill_options+0x2e>
 800d9c4:	4b13      	ldr	r3, [pc, #76]	; (800da14 <tcp_output_fill_options+0x70>)
 800d9c6:	f240 7256 	movw	r2, #1878	; 0x756
 800d9ca:	4913      	ldr	r1, [pc, #76]	; (800da18 <tcp_output_fill_options+0x74>)
 800d9cc:	4813      	ldr	r0, [pc, #76]	; (800da1c <tcp_output_fill_options+0x78>)
 800d9ce:	f009 f9d9 	bl	8016d84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	3314      	adds	r3, #20
 800d9dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	f103 0214 	add.w	r2, r3, #20
 800d9e4:	8bfb      	ldrh	r3, [r7, #30]
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	f003 0304 	and.w	r3, r3, #4
 800d9f2:	440b      	add	r3, r1
 800d9f4:	4413      	add	r3, r2
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d006      	beq.n	800da0a <tcp_output_fill_options+0x66>
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <tcp_output_fill_options+0x70>)
 800d9fe:	f240 7275 	movw	r2, #1909	; 0x775
 800da02:	4907      	ldr	r1, [pc, #28]	; (800da20 <tcp_output_fill_options+0x7c>)
 800da04:	4805      	ldr	r0, [pc, #20]	; (800da1c <tcp_output_fill_options+0x78>)
 800da06:	f009 f9bd 	bl	8016d84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800da0a:	bf00      	nop
 800da0c:	3720      	adds	r7, #32
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	08019570 	.word	0x08019570
 800da18:	08019ca0 	.word	0x08019ca0
 800da1c:	080195c4 	.word	0x080195c4
 800da20:	08019b98 	.word	0x08019b98

0800da24 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08a      	sub	sp, #40	; 0x28
 800da28:	af04      	add	r7, sp, #16
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d106      	bne.n	800da46 <tcp_output_control_segment+0x22>
 800da38:	4b1c      	ldr	r3, [pc, #112]	; (800daac <tcp_output_control_segment+0x88>)
 800da3a:	f240 7287 	movw	r2, #1927	; 0x787
 800da3e:	491c      	ldr	r1, [pc, #112]	; (800dab0 <tcp_output_control_segment+0x8c>)
 800da40:	481c      	ldr	r0, [pc, #112]	; (800dab4 <tcp_output_control_segment+0x90>)
 800da42:	f009 f99f 	bl	8016d84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7fe fae8 	bl	800c020 <tcp_route>
 800da50:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d102      	bne.n	800da5e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800da58:	23fc      	movs	r3, #252	; 0xfc
 800da5a:	75fb      	strb	r3, [r7, #23]
 800da5c:	e01c      	b.n	800da98 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d006      	beq.n	800da72 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	7adb      	ldrb	r3, [r3, #11]
 800da68:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	7a9b      	ldrb	r3, [r3, #10]
 800da6e:	757b      	strb	r3, [r7, #21]
 800da70:	e003      	b.n	800da7a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da72:	23ff      	movs	r3, #255	; 0xff
 800da74:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da7a:	7dba      	ldrb	r2, [r7, #22]
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	9302      	str	r3, [sp, #8]
 800da80:	2306      	movs	r3, #6
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	7d7b      	ldrb	r3, [r7, #21]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	68b8      	ldr	r0, [r7, #8]
 800da90:	f001 ff70 	bl	800f974 <ip4_output_if>
 800da94:	4603      	mov	r3, r0
 800da96:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da98:	68b8      	ldr	r0, [r7, #8]
 800da9a:	f7f9 fee1 	bl	8007860 <pbuf_free>
  return err;
 800da9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	08019570 	.word	0x08019570
 800dab0:	08019cc8 	.word	0x08019cc8
 800dab4:	080195c4 	.word	0x080195c4

0800dab8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dab8:	b590      	push	{r4, r7, lr}
 800daba:	b08b      	sub	sp, #44	; 0x2c
 800dabc:	af04      	add	r7, sp, #16
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <tcp_rst+0x22>
 800dacc:	4b1f      	ldr	r3, [pc, #124]	; (800db4c <tcp_rst+0x94>)
 800dace:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dad2:	491f      	ldr	r1, [pc, #124]	; (800db50 <tcp_rst+0x98>)
 800dad4:	481f      	ldr	r0, [pc, #124]	; (800db54 <tcp_rst+0x9c>)
 800dad6:	f009 f955 	bl	8016d84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d106      	bne.n	800daee <tcp_rst+0x36>
 800dae0:	4b1a      	ldr	r3, [pc, #104]	; (800db4c <tcp_rst+0x94>)
 800dae2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dae6:	491c      	ldr	r1, [pc, #112]	; (800db58 <tcp_rst+0xa0>)
 800dae8:	481a      	ldr	r0, [pc, #104]	; (800db54 <tcp_rst+0x9c>)
 800daea:	f009 f94b 	bl	8016d84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800daee:	2300      	movs	r3, #0
 800daf0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800daf2:	f246 0308 	movw	r3, #24584	; 0x6008
 800daf6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800daf8:	7dfb      	ldrb	r3, [r7, #23]
 800dafa:	b29c      	uxth	r4, r3
 800dafc:	68b8      	ldr	r0, [r7, #8]
 800dafe:	f7f8 fc10 	bl	8006322 <lwip_htonl>
 800db02:	4602      	mov	r2, r0
 800db04:	8abb      	ldrh	r3, [r7, #20]
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	2314      	movs	r3, #20
 800db0a:	9302      	str	r3, [sp, #8]
 800db0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	4613      	mov	r3, r2
 800db16:	2200      	movs	r2, #0
 800db18:	4621      	mov	r1, r4
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fe92 	bl	800d844 <tcp_output_alloc_header_common>
 800db20:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00c      	beq.n	800db42 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	2200      	movs	r2, #0
 800db2c:	6939      	ldr	r1, [r7, #16]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff ff38 	bl	800d9a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	683a      	ldr	r2, [r7, #0]
 800db38:	6939      	ldr	r1, [r7, #16]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff ff72 	bl	800da24 <tcp_output_control_segment>
 800db40:	e000      	b.n	800db44 <tcp_rst+0x8c>
    return;
 800db42:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800db44:	371c      	adds	r7, #28
 800db46:	46bd      	mov	sp, r7
 800db48:	bd90      	pop	{r4, r7, pc}
 800db4a:	bf00      	nop
 800db4c:	08019570 	.word	0x08019570
 800db50:	08019cf4 	.word	0x08019cf4
 800db54:	080195c4 	.word	0x080195c4
 800db58:	08019d10 	.word	0x08019d10

0800db5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800db5c:	b590      	push	{r4, r7, lr}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db64:	2300      	movs	r3, #0
 800db66:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <tcp_send_empty_ack+0x24>
 800db72:	4b28      	ldr	r3, [pc, #160]	; (800dc14 <tcp_send_empty_ack+0xb8>)
 800db74:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800db78:	4927      	ldr	r1, [pc, #156]	; (800dc18 <tcp_send_empty_ack+0xbc>)
 800db7a:	4828      	ldr	r0, [pc, #160]	; (800dc1c <tcp_send_empty_ack+0xc0>)
 800db7c:	f009 f902 	bl	8016d84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0304 	and.w	r3, r3, #4
 800db8a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db8c:	7d7b      	ldrb	r3, [r7, #21]
 800db8e:	b29c      	uxth	r4, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db94:	4618      	mov	r0, r3
 800db96:	f7f8 fbc4 	bl	8006322 <lwip_htonl>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2200      	movs	r2, #0
 800db9e:	4621      	mov	r1, r4
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff fec1 	bl	800d928 <tcp_output_alloc_header>
 800dba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d109      	bne.n	800dbc2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	8b5b      	ldrh	r3, [r3, #26]
 800dbb2:	f043 0303 	orr.w	r3, r3, #3
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dbbc:	f06f 0301 	mvn.w	r3, #1
 800dbc0:	e023      	b.n	800dc0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dbc2:	7dbb      	ldrb	r3, [r7, #22]
 800dbc4:	7dfa      	ldrb	r2, [r7, #23]
 800dbc6:	6939      	ldr	r1, [r7, #16]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7ff feeb 	bl	800d9a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	6939      	ldr	r1, [r7, #16]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff ff24 	bl	800da24 <tcp_output_control_segment>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dbe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d007      	beq.n	800dbf8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f043 0303 	orr.w	r3, r3, #3
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	835a      	strh	r2, [r3, #26]
 800dbf6:	e006      	b.n	800dc06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	8b5b      	ldrh	r3, [r3, #26]
 800dbfc:	f023 0303 	bic.w	r3, r3, #3
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dc06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	371c      	adds	r7, #28
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd90      	pop	{r4, r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08019570 	.word	0x08019570
 800dc18:	08019d2c 	.word	0x08019d2c
 800dc1c:	080195c4 	.word	0x080195c4

0800dc20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc28:	2300      	movs	r3, #0
 800dc2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <tcp_keepalive+0x20>
 800dc32:	4b18      	ldr	r3, [pc, #96]	; (800dc94 <tcp_keepalive+0x74>)
 800dc34:	f640 0224 	movw	r2, #2084	; 0x824
 800dc38:	4917      	ldr	r1, [pc, #92]	; (800dc98 <tcp_keepalive+0x78>)
 800dc3a:	4818      	ldr	r0, [pc, #96]	; (800dc9c <tcp_keepalive+0x7c>)
 800dc3c:	f009 f8a2 	bl	8016d84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	b29c      	uxth	r4, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7f8 fb69 	bl	8006322 <lwip_htonl>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2200      	movs	r2, #0
 800dc54:	4621      	mov	r1, r4
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff fe66 	bl	800d928 <tcp_output_alloc_header>
 800dc5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc64:	f04f 33ff 	mov.w	r3, #4294967295
 800dc68:	e010      	b.n	800dc8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	6939      	ldr	r1, [r7, #16]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff fe97 	bl	800d9a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	6939      	ldr	r1, [r7, #16]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff fed0 	bl	800da24 <tcp_output_control_segment>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	371c      	adds	r7, #28
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd90      	pop	{r4, r7, pc}
 800dc94:	08019570 	.word	0x08019570
 800dc98:	08019d4c 	.word	0x08019d4c
 800dc9c:	080195c4 	.word	0x080195c4

0800dca0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b08b      	sub	sp, #44	; 0x2c
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <tcp_zero_window_probe+0x22>
 800dcb4:	4b4c      	ldr	r3, [pc, #304]	; (800dde8 <tcp_zero_window_probe+0x148>)
 800dcb6:	f640 024f 	movw	r2, #2127	; 0x84f
 800dcba:	494c      	ldr	r1, [pc, #304]	; (800ddec <tcp_zero_window_probe+0x14c>)
 800dcbc:	484c      	ldr	r0, [pc, #304]	; (800ddf0 <tcp_zero_window_probe+0x150>)
 800dcbe:	f009 f861 	bl	8016d84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e086      	b.n	800dde0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dcd8:	2bff      	cmp	r3, #255	; 0xff
 800dcda:	d007      	beq.n	800dcec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dce2:	3301      	adds	r3, #1
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	899b      	ldrh	r3, [r3, #12]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7f8 faff 	bl	80062f8 <lwip_htons>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0301 	and.w	r3, r3, #1
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <tcp_zero_window_probe+0x72>
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	891b      	ldrh	r3, [r3, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <tcp_zero_window_probe+0x72>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e000      	b.n	800dd14 <tcp_zero_window_probe+0x74>
 800dd12:	2300      	movs	r3, #0
 800dd14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dd16:	7ffb      	ldrb	r3, [r7, #31]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bf0c      	ite	eq
 800dd1c:	2301      	moveq	r3, #1
 800dd1e:	2300      	movne	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd28:	b299      	uxth	r1, r3
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	8bba      	ldrh	r2, [r7, #28]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fdf8 	bl	800d928 <tcp_output_alloc_header>
 800dd38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d102      	bne.n	800dd46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dd40:	f04f 33ff 	mov.w	r3, #4294967295
 800dd44:	e04c      	b.n	800dde0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dd4c:	7ffb      	ldrb	r3, [r7, #31]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d011      	beq.n	800dd76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	b21b      	sxth	r3, r3
 800dd5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd5e:	b21c      	sxth	r4, r3
 800dd60:	2011      	movs	r0, #17
 800dd62:	f7f8 fac9 	bl	80062f8 <lwip_htons>
 800dd66:	4603      	mov	r3, r0
 800dd68:	b21b      	sxth	r3, r3
 800dd6a:	4323      	orrs	r3, r4
 800dd6c:	b21b      	sxth	r3, r3
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	819a      	strh	r2, [r3, #12]
 800dd74:	e010      	b.n	800dd98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	3314      	adds	r3, #20
 800dd7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	6858      	ldr	r0, [r3, #4]
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	891a      	ldrh	r2, [r3, #8]
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	891b      	ldrh	r3, [r3, #8]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	2201      	movs	r2, #1
 800dd92:	6939      	ldr	r1, [r7, #16]
 800dd94:	f7f9 ff5e 	bl	8007c54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd98:	6a3b      	ldr	r3, [r7, #32]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f8 fabf 	bl	8006322 <lwip_htonl>
 800dda4:	4603      	mov	r3, r0
 800dda6:	3301      	adds	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	da02      	bge.n	800ddbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	69b9      	ldr	r1, [r7, #24]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff fded 	bl	800d9a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3304      	adds	r3, #4
 800ddd0:	69b9      	ldr	r1, [r7, #24]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fe26 	bl	800da24 <tcp_output_control_segment>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	372c      	adds	r7, #44	; 0x2c
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd90      	pop	{r4, r7, pc}
 800dde8:	08019570 	.word	0x08019570
 800ddec:	08019d68 	.word	0x08019d68
 800ddf0:	080195c4 	.word	0x080195c4

0800ddf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ddfc:	f7fa f818 	bl	8007e30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800de00:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <tcpip_tcp_timer+0x38>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d103      	bne.n	800de10 <tcpip_tcp_timer+0x1c>
 800de08:	4b09      	ldr	r3, [pc, #36]	; (800de30 <tcpip_tcp_timer+0x3c>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d005      	beq.n	800de1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de10:	2200      	movs	r2, #0
 800de12:	4908      	ldr	r1, [pc, #32]	; (800de34 <tcpip_tcp_timer+0x40>)
 800de14:	20fa      	movs	r0, #250	; 0xfa
 800de16:	f000 f8f3 	bl	800e000 <sys_timeout>
 800de1a:	e003      	b.n	800de24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800de1c:	4b06      	ldr	r3, [pc, #24]	; (800de38 <tcpip_tcp_timer+0x44>)
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
  }
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	2000696c 	.word	0x2000696c
 800de30:	2000697c 	.word	0x2000697c
 800de34:	0800ddf5 	.word	0x0800ddf5
 800de38:	2000010c 	.word	0x2000010c

0800de3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <tcp_timer_needed+0x30>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10f      	bne.n	800de68 <tcp_timer_needed+0x2c>
 800de48:	4b09      	ldr	r3, [pc, #36]	; (800de70 <tcp_timer_needed+0x34>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d103      	bne.n	800de58 <tcp_timer_needed+0x1c>
 800de50:	4b08      	ldr	r3, [pc, #32]	; (800de74 <tcp_timer_needed+0x38>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800de58:	4b04      	ldr	r3, [pc, #16]	; (800de6c <tcp_timer_needed+0x30>)
 800de5a:	2201      	movs	r2, #1
 800de5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de5e:	2200      	movs	r2, #0
 800de60:	4905      	ldr	r1, [pc, #20]	; (800de78 <tcp_timer_needed+0x3c>)
 800de62:	20fa      	movs	r0, #250	; 0xfa
 800de64:	f000 f8cc 	bl	800e000 <sys_timeout>
  }
}
 800de68:	bf00      	nop
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	2000010c 	.word	0x2000010c
 800de70:	2000696c 	.word	0x2000696c
 800de74:	2000697c 	.word	0x2000697c
 800de78:	0800ddf5 	.word	0x0800ddf5

0800de7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de88:	2006      	movs	r0, #6
 800de8a:	f7f8 fe8b 	bl	8006ba4 <memp_malloc>
 800de8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d109      	bne.n	800deaa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d151      	bne.n	800df40 <sys_timeout_abs+0xc4>
 800de9c:	4b2a      	ldr	r3, [pc, #168]	; (800df48 <sys_timeout_abs+0xcc>)
 800de9e:	22be      	movs	r2, #190	; 0xbe
 800dea0:	492a      	ldr	r1, [pc, #168]	; (800df4c <sys_timeout_abs+0xd0>)
 800dea2:	482b      	ldr	r0, [pc, #172]	; (800df50 <sys_timeout_abs+0xd4>)
 800dea4:	f008 ff6e 	bl	8016d84 <iprintf>
    return;
 800dea8:	e04a      	b.n	800df40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	2200      	movs	r2, #0
 800deae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dec2:	4b24      	ldr	r3, [pc, #144]	; (800df54 <sys_timeout_abs+0xd8>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800deca:	4a22      	ldr	r2, [pc, #136]	; (800df54 <sys_timeout_abs+0xd8>)
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	6013      	str	r3, [r2, #0]
    return;
 800ded0:	e037      	b.n	800df42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	4b1f      	ldr	r3, [pc, #124]	; (800df54 <sys_timeout_abs+0xd8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	0fdb      	lsrs	r3, r3, #31
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d007      	beq.n	800defa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800deea:	4b1a      	ldr	r3, [pc, #104]	; (800df54 <sys_timeout_abs+0xd8>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800def2:	4a18      	ldr	r2, [pc, #96]	; (800df54 <sys_timeout_abs+0xd8>)
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	e023      	b.n	800df42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800defa:	4b16      	ldr	r3, [pc, #88]	; (800df54 <sys_timeout_abs+0xd8>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e01a      	b.n	800df38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00b      	beq.n	800df22 <sys_timeout_abs+0xa6>
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	0fdb      	lsrs	r3, r3, #31
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d007      	beq.n	800df32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	601a      	str	r2, [r3, #0]
        break;
 800df30:	e007      	b.n	800df42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1e1      	bne.n	800df02 <sys_timeout_abs+0x86>
 800df3e:	e000      	b.n	800df42 <sys_timeout_abs+0xc6>
    return;
 800df40:	bf00      	nop
      }
    }
  }
}
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	08019d8c 	.word	0x08019d8c
 800df4c:	08019dc0 	.word	0x08019dc0
 800df50:	08019e00 	.word	0x08019e00
 800df54:	20000104 	.word	0x20000104

0800df58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	4798      	blx	r3

  now = sys_now();
 800df6a:	f7f8 f937 	bl	80061dc <sys_now>
 800df6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <lwip_cyclic_timer+0x5c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4413      	add	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	0fdb      	lsrs	r3, r3, #31
 800df84:	f003 0301 	and.w	r3, r3, #1
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d009      	beq.n	800dfa2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	4413      	add	r3, r2
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	4907      	ldr	r1, [pc, #28]	; (800dfb8 <lwip_cyclic_timer+0x60>)
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff ff6e 	bl	800de7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dfa0:	e004      	b.n	800dfac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	4904      	ldr	r1, [pc, #16]	; (800dfb8 <lwip_cyclic_timer+0x60>)
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff ff68 	bl	800de7c <sys_timeout_abs>
}
 800dfac:	bf00      	nop
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	20000108 	.word	0x20000108
 800dfb8:	0800df59 	.word	0x0800df59

0800dfbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	e00e      	b.n	800dfe6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dfc8:	4a0b      	ldr	r2, [pc, #44]	; (800dff8 <sys_timeouts_init+0x3c>)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	4a08      	ldr	r2, [pc, #32]	; (800dff8 <sys_timeouts_init+0x3c>)
 800dfd6:	4413      	add	r3, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4908      	ldr	r1, [pc, #32]	; (800dffc <sys_timeouts_init+0x40>)
 800dfdc:	f000 f810 	bl	800e000 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	607b      	str	r3, [r7, #4]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d9ed      	bls.n	800dfc8 <sys_timeouts_init+0xc>
  }
}
 800dfec:	bf00      	nop
 800dfee:	bf00      	nop
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	0801a9f8 	.word	0x0801a9f8
 800dffc:	0800df59 	.word	0x0800df59

0800e000 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e012:	d306      	bcc.n	800e022 <sys_timeout+0x22>
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <sys_timeout+0x40>)
 800e016:	f240 1229 	movw	r2, #297	; 0x129
 800e01a:	490a      	ldr	r1, [pc, #40]	; (800e044 <sys_timeout+0x44>)
 800e01c:	480a      	ldr	r0, [pc, #40]	; (800e048 <sys_timeout+0x48>)
 800e01e:	f008 feb1 	bl	8016d84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e022:	f7f8 f8db 	bl	80061dc <sys_now>
 800e026:	4602      	mov	r2, r0
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	4413      	add	r3, r2
 800e02c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	68b9      	ldr	r1, [r7, #8]
 800e032:	6978      	ldr	r0, [r7, #20]
 800e034:	f7ff ff22 	bl	800de7c <sys_timeout_abs>
#endif
}
 800e038:	bf00      	nop
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	08019d8c 	.word	0x08019d8c
 800e044:	08019e28 	.word	0x08019e28
 800e048:	08019e00 	.word	0x08019e00

0800e04c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e052:	f7f8 f8c3 	bl	80061dc <sys_now>
 800e056:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e058:	4b1a      	ldr	r3, [pc, #104]	; (800e0c4 <sys_check_timeouts+0x78>)
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <sys_check_timeouts+0x1a>
 800e062:	f7f9 f8c3 	bl	80071ec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e066:	4b18      	ldr	r3, [pc, #96]	; (800e0c8 <sys_check_timeouts+0x7c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d022      	beq.n	800e0b8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	0fdb      	lsrs	r3, r3, #31
 800e07c:	f003 0301 	and.w	r3, r3, #1
 800e080:	b2db      	uxtb	r3, r3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d11a      	bne.n	800e0bc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a0f      	ldr	r2, [pc, #60]	; (800e0c8 <sys_check_timeouts+0x7c>)
 800e08c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	4a0b      	ldr	r2, [pc, #44]	; (800e0cc <sys_check_timeouts+0x80>)
 800e0a0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e0a2:	68b9      	ldr	r1, [r7, #8]
 800e0a4:	2006      	movs	r0, #6
 800e0a6:	f7f8 fdc9 	bl	8006c3c <memp_free>
    if (handler != NULL) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d0d3      	beq.n	800e058 <sys_check_timeouts+0xc>
      handler(arg);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6838      	ldr	r0, [r7, #0]
 800e0b4:	4798      	blx	r3
  do {
 800e0b6:	e7cf      	b.n	800e058 <sys_check_timeouts+0xc>
      return;
 800e0b8:	bf00      	nop
 800e0ba:	e000      	b.n	800e0be <sys_check_timeouts+0x72>
      return;
 800e0bc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20006964 	.word	0x20006964
 800e0c8:	20000104 	.word	0x20000104
 800e0cc:	20000108 	.word	0x20000108

0800e0d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e0d4:	f008 fee4 	bl	8016ea0 <rand>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	4b01      	ldr	r3, [pc, #4]	; (800e0f0 <udp_init+0x20>)
 800e0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0ec:	bf00      	nop
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20000010 	.word	0x20000010

0800e0f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <udp_input_local_match+0x20>
 800e108:	4b27      	ldr	r3, [pc, #156]	; (800e1a8 <udp_input_local_match+0xb4>)
 800e10a:	2287      	movs	r2, #135	; 0x87
 800e10c:	4927      	ldr	r1, [pc, #156]	; (800e1ac <udp_input_local_match+0xb8>)
 800e10e:	4828      	ldr	r0, [pc, #160]	; (800e1b0 <udp_input_local_match+0xbc>)
 800e110:	f008 fe38 	bl	8016d84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d105      	bne.n	800e126 <udp_input_local_match+0x32>
 800e11a:	4b23      	ldr	r3, [pc, #140]	; (800e1a8 <udp_input_local_match+0xb4>)
 800e11c:	2288      	movs	r2, #136	; 0x88
 800e11e:	4925      	ldr	r1, [pc, #148]	; (800e1b4 <udp_input_local_match+0xc0>)
 800e120:	4823      	ldr	r0, [pc, #140]	; (800e1b0 <udp_input_local_match+0xbc>)
 800e122:	f008 fe2f 	bl	8016d84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	7a1b      	ldrb	r3, [r3, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00b      	beq.n	800e146 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	7a1a      	ldrb	r2, [r3, #8]
 800e132:	4b21      	ldr	r3, [pc, #132]	; (800e1b8 <udp_input_local_match+0xc4>)
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e13a:	3301      	adds	r3, #1
 800e13c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e13e:	429a      	cmp	r2, r3
 800e140:	d001      	beq.n	800e146 <udp_input_local_match+0x52>
    return 0;
 800e142:	2300      	movs	r3, #0
 800e144:	e02b      	b.n	800e19e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d018      	beq.n	800e17e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d013      	beq.n	800e17a <udp_input_local_match+0x86>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00f      	beq.n	800e17a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e15a:	4b17      	ldr	r3, [pc, #92]	; (800e1b8 <udp_input_local_match+0xc4>)
 800e15c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e162:	d00a      	beq.n	800e17a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <udp_input_local_match+0xc4>)
 800e16a:	695b      	ldr	r3, [r3, #20]
 800e16c:	405a      	eors	r2, r3
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	3308      	adds	r3, #8
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e176:	2b00      	cmp	r3, #0
 800e178:	d110      	bne.n	800e19c <udp_input_local_match+0xa8>
          return 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e00f      	b.n	800e19e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <udp_input_local_match+0xa4>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <udp_input_local_match+0xa4>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	4b09      	ldr	r3, [pc, #36]	; (800e1b8 <udp_input_local_match+0xc4>)
 800e192:	695b      	ldr	r3, [r3, #20]
 800e194:	429a      	cmp	r2, r3
 800e196:	d101      	bne.n	800e19c <udp_input_local_match+0xa8>
        return 1;
 800e198:	2301      	movs	r3, #1
 800e19a:	e000      	b.n	800e19e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	08019e74 	.word	0x08019e74
 800e1ac:	08019ea4 	.word	0x08019ea4
 800e1b0:	08019ec8 	.word	0x08019ec8
 800e1b4:	08019ef0 	.word	0x08019ef0
 800e1b8:	20003428 	.word	0x20003428

0800e1bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b08d      	sub	sp, #52	; 0x34
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d105      	bne.n	800e1dc <udp_input+0x20>
 800e1d0:	4b7c      	ldr	r3, [pc, #496]	; (800e3c4 <udp_input+0x208>)
 800e1d2:	22cf      	movs	r2, #207	; 0xcf
 800e1d4:	497c      	ldr	r1, [pc, #496]	; (800e3c8 <udp_input+0x20c>)
 800e1d6:	487d      	ldr	r0, [pc, #500]	; (800e3cc <udp_input+0x210>)
 800e1d8:	f008 fdd4 	bl	8016d84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d105      	bne.n	800e1ee <udp_input+0x32>
 800e1e2:	4b78      	ldr	r3, [pc, #480]	; (800e3c4 <udp_input+0x208>)
 800e1e4:	22d0      	movs	r2, #208	; 0xd0
 800e1e6:	497a      	ldr	r1, [pc, #488]	; (800e3d0 <udp_input+0x214>)
 800e1e8:	4878      	ldr	r0, [pc, #480]	; (800e3cc <udp_input+0x210>)
 800e1ea:	f008 fdcb 	bl	8016d84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	895b      	ldrh	r3, [r3, #10]
 800e1f2:	2b07      	cmp	r3, #7
 800e1f4:	d803      	bhi.n	800e1fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7f9 fb32 	bl	8007860 <pbuf_free>
    goto end;
 800e1fc:	e0de      	b.n	800e3bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e204:	4b73      	ldr	r3, [pc, #460]	; (800e3d4 <udp_input+0x218>)
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	4a72      	ldr	r2, [pc, #456]	; (800e3d4 <udp_input+0x218>)
 800e20a:	6812      	ldr	r2, [r2, #0]
 800e20c:	4611      	mov	r1, r2
 800e20e:	4618      	mov	r0, r3
 800e210:	f001 fc88 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800e214:	4603      	mov	r3, r0
 800e216:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f8 f86a 	bl	80062f8 <lwip_htons>
 800e224:	4603      	mov	r3, r0
 800e226:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	885b      	ldrh	r3, [r3, #2]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	4618      	mov	r0, r3
 800e230:	f7f8 f862 	bl	80062f8 <lwip_htons>
 800e234:	4603      	mov	r3, r0
 800e236:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e238:	2300      	movs	r3, #0
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e23c:	2300      	movs	r3, #0
 800e23e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e240:	2300      	movs	r3, #0
 800e242:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e244:	4b64      	ldr	r3, [pc, #400]	; (800e3d8 <udp_input+0x21c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	627b      	str	r3, [r7, #36]	; 0x24
 800e24a:	e054      	b.n	800e2f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	8a5b      	ldrh	r3, [r3, #18]
 800e250:	89fa      	ldrh	r2, [r7, #14]
 800e252:	429a      	cmp	r2, r3
 800e254:	d14a      	bne.n	800e2ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e256:	7cfb      	ldrb	r3, [r7, #19]
 800e258:	461a      	mov	r2, r3
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e25e:	f7ff ff49 	bl	800e0f4 <udp_input_local_match>
 800e262:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e264:	2b00      	cmp	r3, #0
 800e266:	d041      	beq.n	800e2ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	7c1b      	ldrb	r3, [r3, #16]
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d11d      	bne.n	800e2b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d102      	bne.n	800e280 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	e017      	b.n	800e2b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e280:	7cfb      	ldrb	r3, [r7, #19]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d014      	beq.n	800e2b0 <udp_input+0xf4>
 800e286:	4b53      	ldr	r3, [pc, #332]	; (800e3d4 <udp_input+0x218>)
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28e:	d10f      	bne.n	800e2b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	3304      	adds	r3, #4
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d008      	beq.n	800e2b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d101      	bne.n	800e2b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	8a9b      	ldrh	r3, [r3, #20]
 800e2b4:	8a3a      	ldrh	r2, [r7, #16]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d118      	bne.n	800e2ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	4b43      	ldr	r3, [pc, #268]	; (800e3d4 <udp_input+0x218>)
 800e2c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d10e      	bne.n	800e2ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d014      	beq.n	800e2fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	68da      	ldr	r2, [r3, #12]
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e2dc:	4b3e      	ldr	r3, [pc, #248]	; (800e3d8 <udp_input+0x21c>)
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e2e4:	4a3c      	ldr	r2, [pc, #240]	; (800e3d8 <udp_input+0x21c>)
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e2ea:	e008      	b.n	800e2fe <udp_input+0x142>
      }
    }

    prev = pcb;
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1a7      	bne.n	800e24c <udp_input+0x90>
 800e2fc:	e000      	b.n	800e300 <udp_input+0x144>
        break;
 800e2fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <udp_input+0x14e>
    pcb = uncon_pcb;
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <udp_input+0x15a>
    for_us = 1;
 800e310:	2301      	movs	r3, #1
 800e312:	76fb      	strb	r3, [r7, #27]
 800e314:	e00a      	b.n	800e32c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	3304      	adds	r3, #4
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	4b2d      	ldr	r3, [pc, #180]	; (800e3d4 <udp_input+0x218>)
 800e31e:	695b      	ldr	r3, [r3, #20]
 800e320:	429a      	cmp	r2, r3
 800e322:	bf0c      	ite	eq
 800e324:	2301      	moveq	r3, #1
 800e326:	2300      	movne	r3, #0
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e32c:	7efb      	ldrb	r3, [r7, #27]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d041      	beq.n	800e3b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e332:	2108      	movs	r1, #8
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f9 fa0d 	bl	8007754 <pbuf_remove_header>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00a      	beq.n	800e356 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e340:	4b20      	ldr	r3, [pc, #128]	; (800e3c4 <udp_input+0x208>)
 800e342:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e346:	4925      	ldr	r1, [pc, #148]	; (800e3dc <udp_input+0x220>)
 800e348:	4820      	ldr	r0, [pc, #128]	; (800e3cc <udp_input+0x210>)
 800e34a:	f008 fd1b 	bl	8016d84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f9 fa86 	bl	8007860 <pbuf_free>
      goto end;
 800e354:	e032      	b.n	800e3bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d012      	beq.n	800e382 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e366:	699c      	ldr	r4, [r3, #24]
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	69d8      	ldr	r0, [r3, #28]
 800e36c:	8a3b      	ldrh	r3, [r7, #16]
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	4b1b      	ldr	r3, [pc, #108]	; (800e3e0 <udp_input+0x224>)
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e376:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e378:	e021      	b.n	800e3be <udp_input+0x202>
        pbuf_free(p);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7f9 fa70 	bl	8007860 <pbuf_free>
        goto end;
 800e380:	e01c      	b.n	800e3bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e382:	7cfb      	ldrb	r3, [r7, #19]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d112      	bne.n	800e3ae <udp_input+0x1f2>
 800e388:	4b12      	ldr	r3, [pc, #72]	; (800e3d4 <udp_input+0x218>)
 800e38a:	695b      	ldr	r3, [r3, #20]
 800e38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e390:	2be0      	cmp	r3, #224	; 0xe0
 800e392:	d00c      	beq.n	800e3ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e394:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <udp_input+0x218>)
 800e396:	899b      	ldrh	r3, [r3, #12]
 800e398:	3308      	adds	r3, #8
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	b21b      	sxth	r3, r3
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7f9 fa4a 	bl	800783a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e3a6:	2103      	movs	r1, #3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f001 f89b 	bl	800f4e4 <icmp_dest_unreach>
      pbuf_free(p);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7f9 fa56 	bl	8007860 <pbuf_free>
  return;
 800e3b4:	e003      	b.n	800e3be <udp_input+0x202>
    pbuf_free(p);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7f9 fa52 	bl	8007860 <pbuf_free>
  return;
 800e3bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e3be:	372c      	adds	r7, #44	; 0x2c
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd90      	pop	{r4, r7, pc}
 800e3c4:	08019e74 	.word	0x08019e74
 800e3c8:	08019f18 	.word	0x08019f18
 800e3cc:	08019ec8 	.word	0x08019ec8
 800e3d0:	08019f30 	.word	0x08019f30
 800e3d4:	20003428 	.word	0x20003428
 800e3d8:	20006984 	.word	0x20006984
 800e3dc:	08019f4c 	.word	0x08019f4c
 800e3e0:	20003438 	.word	0x20003438

0800e3e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d01e      	beq.n	800e432 <udp_netif_ip_addr_changed+0x4e>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d01a      	beq.n	800e432 <udp_netif_ip_addr_changed+0x4e>
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d017      	beq.n	800e432 <udp_netif_ip_addr_changed+0x4e>
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d013      	beq.n	800e432 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e40a:	4b0d      	ldr	r3, [pc, #52]	; (800e440 <udp_netif_ip_addr_changed+0x5c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	60fb      	str	r3, [r7, #12]
 800e410:	e00c      	b.n	800e42c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d103      	bne.n	800e426 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1ef      	bne.n	800e412 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e432:	bf00      	nop
 800e434:	3714      	adds	r7, #20
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	20006984 	.word	0x20006984

0800e444 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e44c:	4915      	ldr	r1, [pc, #84]	; (800e4a4 <etharp_free_entry+0x60>)
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	4613      	mov	r3, r2
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	4413      	add	r3, r2
 800e456:	00db      	lsls	r3, r3, #3
 800e458:	440b      	add	r3, r1
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d013      	beq.n	800e488 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e460:	4910      	ldr	r1, [pc, #64]	; (800e4a4 <etharp_free_entry+0x60>)
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4613      	mov	r3, r2
 800e466:	005b      	lsls	r3, r3, #1
 800e468:	4413      	add	r3, r2
 800e46a:	00db      	lsls	r3, r3, #3
 800e46c:	440b      	add	r3, r1
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4618      	mov	r0, r3
 800e472:	f7f9 f9f5 	bl	8007860 <pbuf_free>
    arp_table[i].q = NULL;
 800e476:	490b      	ldr	r1, [pc, #44]	; (800e4a4 <etharp_free_entry+0x60>)
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	4613      	mov	r3, r2
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	4413      	add	r3, r2
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	440b      	add	r3, r1
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e488:	4906      	ldr	r1, [pc, #24]	; (800e4a4 <etharp_free_entry+0x60>)
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	4413      	add	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	440b      	add	r3, r1
 800e496:	3314      	adds	r3, #20
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	20000110 	.word	0x20000110

0800e4a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	607b      	str	r3, [r7, #4]
 800e4b2:	e096      	b.n	800e5e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e4b4:	494f      	ldr	r1, [pc, #316]	; (800e5f4 <etharp_tmr+0x14c>)
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	440b      	add	r3, r1
 800e4c2:	3314      	adds	r3, #20
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e4c8:	78fb      	ldrb	r3, [r7, #3]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 8086 	beq.w	800e5dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e4d0:	4948      	ldr	r1, [pc, #288]	; (800e5f4 <etharp_tmr+0x14c>)
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4413      	add	r3, r2
 800e4da:	00db      	lsls	r3, r3, #3
 800e4dc:	440b      	add	r3, r1
 800e4de:	3312      	adds	r3, #18
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	b298      	uxth	r0, r3
 800e4e6:	4943      	ldr	r1, [pc, #268]	; (800e5f4 <etharp_tmr+0x14c>)
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	4413      	add	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	440b      	add	r3, r1
 800e4f4:	3312      	adds	r3, #18
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e4fa:	493e      	ldr	r1, [pc, #248]	; (800e5f4 <etharp_tmr+0x14c>)
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	4613      	mov	r3, r2
 800e500:	005b      	lsls	r3, r3, #1
 800e502:	4413      	add	r3, r2
 800e504:	00db      	lsls	r3, r3, #3
 800e506:	440b      	add	r3, r1
 800e508:	3312      	adds	r3, #18
 800e50a:	881b      	ldrh	r3, [r3, #0]
 800e50c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e510:	d215      	bcs.n	800e53e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e512:	4938      	ldr	r1, [pc, #224]	; (800e5f4 <etharp_tmr+0x14c>)
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	4613      	mov	r3, r2
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	00db      	lsls	r3, r3, #3
 800e51e:	440b      	add	r3, r1
 800e520:	3314      	adds	r3, #20
 800e522:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e524:	2b01      	cmp	r3, #1
 800e526:	d10e      	bne.n	800e546 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e528:	4932      	ldr	r1, [pc, #200]	; (800e5f4 <etharp_tmr+0x14c>)
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	4613      	mov	r3, r2
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	4413      	add	r3, r2
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	440b      	add	r3, r1
 800e536:	3312      	adds	r3, #18
 800e538:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	d903      	bls.n	800e546 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff ff80 	bl	800e444 <etharp_free_entry>
 800e544:	e04a      	b.n	800e5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e546:	492b      	ldr	r1, [pc, #172]	; (800e5f4 <etharp_tmr+0x14c>)
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	4613      	mov	r3, r2
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	4413      	add	r3, r2
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	440b      	add	r3, r1
 800e554:	3314      	adds	r3, #20
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2b03      	cmp	r3, #3
 800e55a:	d10a      	bne.n	800e572 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e55c:	4925      	ldr	r1, [pc, #148]	; (800e5f4 <etharp_tmr+0x14c>)
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	4613      	mov	r3, r2
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	4413      	add	r3, r2
 800e566:	00db      	lsls	r3, r3, #3
 800e568:	440b      	add	r3, r1
 800e56a:	3314      	adds	r3, #20
 800e56c:	2204      	movs	r2, #4
 800e56e:	701a      	strb	r2, [r3, #0]
 800e570:	e034      	b.n	800e5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e572:	4920      	ldr	r1, [pc, #128]	; (800e5f4 <etharp_tmr+0x14c>)
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	4613      	mov	r3, r2
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4413      	add	r3, r2
 800e57c:	00db      	lsls	r3, r3, #3
 800e57e:	440b      	add	r3, r1
 800e580:	3314      	adds	r3, #20
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b04      	cmp	r3, #4
 800e586:	d10a      	bne.n	800e59e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e588:	491a      	ldr	r1, [pc, #104]	; (800e5f4 <etharp_tmr+0x14c>)
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	4613      	mov	r3, r2
 800e58e:	005b      	lsls	r3, r3, #1
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	440b      	add	r3, r1
 800e596:	3314      	adds	r3, #20
 800e598:	2202      	movs	r2, #2
 800e59a:	701a      	strb	r2, [r3, #0]
 800e59c:	e01e      	b.n	800e5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e59e:	4915      	ldr	r1, [pc, #84]	; (800e5f4 <etharp_tmr+0x14c>)
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	4413      	add	r3, r2
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	440b      	add	r3, r1
 800e5ac:	3314      	adds	r3, #20
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d113      	bne.n	800e5dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e5b4:	490f      	ldr	r1, [pc, #60]	; (800e5f4 <etharp_tmr+0x14c>)
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	4413      	add	r3, r2
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	440b      	add	r3, r1
 800e5c2:	3308      	adds	r3, #8
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	4413      	add	r3, r2
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	4a08      	ldr	r2, [pc, #32]	; (800e5f4 <etharp_tmr+0x14c>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	f000 fe6e 	bl	800f2b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b09      	cmp	r3, #9
 800e5e6:	f77f af65 	ble.w	800e4b4 <etharp_tmr+0xc>
      }
    }
  }
}
 800e5ea:	bf00      	nop
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20000110 	.word	0x20000110

0800e5f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b08a      	sub	sp, #40	; 0x28
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	460b      	mov	r3, r1
 800e602:	607a      	str	r2, [r7, #4]
 800e604:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e606:	230a      	movs	r3, #10
 800e608:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e60a:	230a      	movs	r3, #10
 800e60c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e60e:	230a      	movs	r3, #10
 800e610:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e616:	230a      	movs	r3, #10
 800e618:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	83bb      	strh	r3, [r7, #28]
 800e61e:	2300      	movs	r3, #0
 800e620:	837b      	strh	r3, [r7, #26]
 800e622:	2300      	movs	r3, #0
 800e624:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e626:	2300      	movs	r3, #0
 800e628:	843b      	strh	r3, [r7, #32]
 800e62a:	e0ae      	b.n	800e78a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e62c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e630:	49a6      	ldr	r1, [pc, #664]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e632:	4613      	mov	r3, r2
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	4413      	add	r3, r2
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	440b      	add	r3, r1
 800e63c:	3314      	adds	r3, #20
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e642:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e646:	2b0a      	cmp	r3, #10
 800e648:	d105      	bne.n	800e656 <etharp_find_entry+0x5e>
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e650:	8c3b      	ldrh	r3, [r7, #32]
 800e652:	847b      	strh	r3, [r7, #34]	; 0x22
 800e654:	e095      	b.n	800e782 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 8092 	beq.w	800e782 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d009      	beq.n	800e678 <etharp_find_entry+0x80>
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d806      	bhi.n	800e678 <etharp_find_entry+0x80>
 800e66a:	4b99      	ldr	r3, [pc, #612]	; (800e8d0 <etharp_find_entry+0x2d8>)
 800e66c:	f240 1223 	movw	r2, #291	; 0x123
 800e670:	4998      	ldr	r1, [pc, #608]	; (800e8d4 <etharp_find_entry+0x2dc>)
 800e672:	4899      	ldr	r0, [pc, #612]	; (800e8d8 <etharp_find_entry+0x2e0>)
 800e674:	f008 fb86 	bl	8016d84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d020      	beq.n	800e6c0 <etharp_find_entry+0xc8>
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6819      	ldr	r1, [r3, #0]
 800e682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e686:	4891      	ldr	r0, [pc, #580]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e688:	4613      	mov	r3, r2
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	4413      	add	r3, r2
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	4403      	add	r3, r0
 800e692:	3304      	adds	r3, #4
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4299      	cmp	r1, r3
 800e698:	d112      	bne.n	800e6c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00c      	beq.n	800e6ba <etharp_find_entry+0xc2>
 800e6a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6a4:	4989      	ldr	r1, [pc, #548]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	4413      	add	r3, r2
 800e6ac:	00db      	lsls	r3, r3, #3
 800e6ae:	440b      	add	r3, r1
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d102      	bne.n	800e6c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e6ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6be:	e100      	b.n	800e8c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d140      	bne.n	800e748 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e6c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6ca:	4980      	ldr	r1, [pc, #512]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	005b      	lsls	r3, r3, #1
 800e6d0:	4413      	add	r3, r2
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	440b      	add	r3, r1
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01a      	beq.n	800e712 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e6dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6e0:	497a      	ldr	r1, [pc, #488]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	00db      	lsls	r3, r3, #3
 800e6ea:	440b      	add	r3, r1
 800e6ec:	3312      	adds	r3, #18
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	8bba      	ldrh	r2, [r7, #28]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d845      	bhi.n	800e782 <etharp_find_entry+0x18a>
            old_queue = i;
 800e6f6:	8c3b      	ldrh	r3, [r7, #32]
 800e6f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e6fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6fe:	4973      	ldr	r1, [pc, #460]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e700:	4613      	mov	r3, r2
 800e702:	005b      	lsls	r3, r3, #1
 800e704:	4413      	add	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	440b      	add	r3, r1
 800e70a:	3312      	adds	r3, #18
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	83bb      	strh	r3, [r7, #28]
 800e710:	e037      	b.n	800e782 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e716:	496d      	ldr	r1, [pc, #436]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e718:	4613      	mov	r3, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	440b      	add	r3, r1
 800e722:	3312      	adds	r3, #18
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	8b7a      	ldrh	r2, [r7, #26]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d82a      	bhi.n	800e782 <etharp_find_entry+0x18a>
            old_pending = i;
 800e72c:	8c3b      	ldrh	r3, [r7, #32]
 800e72e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e734:	4965      	ldr	r1, [pc, #404]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e736:	4613      	mov	r3, r2
 800e738:	005b      	lsls	r3, r3, #1
 800e73a:	4413      	add	r3, r2
 800e73c:	00db      	lsls	r3, r3, #3
 800e73e:	440b      	add	r3, r1
 800e740:	3312      	adds	r3, #18
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	837b      	strh	r3, [r7, #26]
 800e746:	e01c      	b.n	800e782 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d919      	bls.n	800e782 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e74e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e752:	495e      	ldr	r1, [pc, #376]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e754:	4613      	mov	r3, r2
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	4413      	add	r3, r2
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	440b      	add	r3, r1
 800e75e:	3312      	adds	r3, #18
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	8b3a      	ldrh	r2, [r7, #24]
 800e764:	429a      	cmp	r2, r3
 800e766:	d80c      	bhi.n	800e782 <etharp_find_entry+0x18a>
            old_stable = i;
 800e768:	8c3b      	ldrh	r3, [r7, #32]
 800e76a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e76c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e770:	4956      	ldr	r1, [pc, #344]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e772:	4613      	mov	r3, r2
 800e774:	005b      	lsls	r3, r3, #1
 800e776:	4413      	add	r3, r2
 800e778:	00db      	lsls	r3, r3, #3
 800e77a:	440b      	add	r3, r1
 800e77c:	3312      	adds	r3, #18
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e782:	8c3b      	ldrh	r3, [r7, #32]
 800e784:	3301      	adds	r3, #1
 800e786:	b29b      	uxth	r3, r3
 800e788:	843b      	strh	r3, [r7, #32]
 800e78a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e78e:	2b09      	cmp	r3, #9
 800e790:	f77f af4c 	ble.w	800e62c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e794:	7afb      	ldrb	r3, [r7, #11]
 800e796:	f003 0302 	and.w	r3, r3, #2
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d108      	bne.n	800e7b0 <etharp_find_entry+0x1b8>
 800e79e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e7a2:	2b0a      	cmp	r3, #10
 800e7a4:	d107      	bne.n	800e7b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e7a6:	7afb      	ldrb	r3, [r7, #11]
 800e7a8:	f003 0301 	and.w	r3, r3, #1
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d102      	bne.n	800e7b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b4:	e085      	b.n	800e8c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e7b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e7ba:	2b09      	cmp	r3, #9
 800e7bc:	dc02      	bgt.n	800e7c4 <etharp_find_entry+0x1cc>
    i = empty;
 800e7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7c0:	843b      	strh	r3, [r7, #32]
 800e7c2:	e039      	b.n	800e838 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e7c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e7c8:	2b09      	cmp	r3, #9
 800e7ca:	dc14      	bgt.n	800e7f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e7d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e7d4:	493d      	ldr	r1, [pc, #244]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	440b      	add	r3, r1
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d018      	beq.n	800e818 <etharp_find_entry+0x220>
 800e7e6:	4b3a      	ldr	r3, [pc, #232]	; (800e8d0 <etharp_find_entry+0x2d8>)
 800e7e8:	f240 126d 	movw	r2, #365	; 0x16d
 800e7ec:	493b      	ldr	r1, [pc, #236]	; (800e8dc <etharp_find_entry+0x2e4>)
 800e7ee:	483a      	ldr	r0, [pc, #232]	; (800e8d8 <etharp_find_entry+0x2e0>)
 800e7f0:	f008 fac8 	bl	8016d84 <iprintf>
 800e7f4:	e010      	b.n	800e818 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e7f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e7fa:	2b09      	cmp	r3, #9
 800e7fc:	dc02      	bgt.n	800e804 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e7fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e800:	843b      	strh	r3, [r7, #32]
 800e802:	e009      	b.n	800e818 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e804:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e808:	2b09      	cmp	r3, #9
 800e80a:	dc02      	bgt.n	800e812 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e80c:	8bfb      	ldrh	r3, [r7, #30]
 800e80e:	843b      	strh	r3, [r7, #32]
 800e810:	e002      	b.n	800e818 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e812:	f04f 33ff 	mov.w	r3, #4294967295
 800e816:	e054      	b.n	800e8c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e818:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e81c:	2b09      	cmp	r3, #9
 800e81e:	dd06      	ble.n	800e82e <etharp_find_entry+0x236>
 800e820:	4b2b      	ldr	r3, [pc, #172]	; (800e8d0 <etharp_find_entry+0x2d8>)
 800e822:	f240 127f 	movw	r2, #383	; 0x17f
 800e826:	492e      	ldr	r1, [pc, #184]	; (800e8e0 <etharp_find_entry+0x2e8>)
 800e828:	482b      	ldr	r0, [pc, #172]	; (800e8d8 <etharp_find_entry+0x2e0>)
 800e82a:	f008 faab 	bl	8016d84 <iprintf>
    etharp_free_entry(i);
 800e82e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fe06 	bl	800e444 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e838:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e83c:	2b09      	cmp	r3, #9
 800e83e:	dd06      	ble.n	800e84e <etharp_find_entry+0x256>
 800e840:	4b23      	ldr	r3, [pc, #140]	; (800e8d0 <etharp_find_entry+0x2d8>)
 800e842:	f240 1283 	movw	r2, #387	; 0x183
 800e846:	4926      	ldr	r1, [pc, #152]	; (800e8e0 <etharp_find_entry+0x2e8>)
 800e848:	4823      	ldr	r0, [pc, #140]	; (800e8d8 <etharp_find_entry+0x2e0>)
 800e84a:	f008 fa9b 	bl	8016d84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e84e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e852:	491e      	ldr	r1, [pc, #120]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e854:	4613      	mov	r3, r2
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	4413      	add	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	440b      	add	r3, r1
 800e85e:	3314      	adds	r3, #20
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <etharp_find_entry+0x27c>
 800e866:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <etharp_find_entry+0x2d8>)
 800e868:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e86c:	491d      	ldr	r1, [pc, #116]	; (800e8e4 <etharp_find_entry+0x2ec>)
 800e86e:	481a      	ldr	r0, [pc, #104]	; (800e8d8 <etharp_find_entry+0x2e0>)
 800e870:	f008 fa88 	bl	8016d84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00b      	beq.n	800e892 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e87a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6819      	ldr	r1, [r3, #0]
 800e882:	4812      	ldr	r0, [pc, #72]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e884:	4613      	mov	r3, r2
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	4403      	add	r3, r0
 800e88e:	3304      	adds	r3, #4
 800e890:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e896:	490d      	ldr	r1, [pc, #52]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e898:	4613      	mov	r3, r2
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	4413      	add	r3, r2
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	440b      	add	r3, r1
 800e8a2:	3312      	adds	r3, #18
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e8a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8ac:	4907      	ldr	r1, [pc, #28]	; (800e8cc <etharp_find_entry+0x2d4>)
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	440b      	add	r3, r1
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e8be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3728      	adds	r7, #40	; 0x28
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000110 	.word	0x20000110
 800e8d0:	0801a1d8 	.word	0x0801a1d8
 800e8d4:	0801a210 	.word	0x0801a210
 800e8d8:	0801a250 	.word	0x0801a250
 800e8dc:	0801a278 	.word	0x0801a278
 800e8e0:	0801a290 	.word	0x0801a290
 800e8e4:	0801a2a4 	.word	0x0801a2a4

0800e8e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8fc:	2b06      	cmp	r3, #6
 800e8fe:	d006      	beq.n	800e90e <etharp_update_arp_entry+0x26>
 800e900:	4b48      	ldr	r3, [pc, #288]	; (800ea24 <etharp_update_arp_entry+0x13c>)
 800e902:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e906:	4948      	ldr	r1, [pc, #288]	; (800ea28 <etharp_update_arp_entry+0x140>)
 800e908:	4848      	ldr	r0, [pc, #288]	; (800ea2c <etharp_update_arp_entry+0x144>)
 800e90a:	f008 fa3b 	bl	8016d84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d012      	beq.n	800e93a <etharp_update_arp_entry+0x52>
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00e      	beq.n	800e93a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68f9      	ldr	r1, [r7, #12]
 800e922:	4618      	mov	r0, r3
 800e924:	f001 f8fe 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800e928:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d105      	bne.n	800e93a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e936:	2be0      	cmp	r3, #224	; 0xe0
 800e938:	d102      	bne.n	800e940 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e93a:	f06f 030f 	mvn.w	r3, #15
 800e93e:	e06c      	b.n	800ea1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	4619      	mov	r1, r3
 800e946:	68b8      	ldr	r0, [r7, #8]
 800e948:	f7ff fe56 	bl	800e5f8 <etharp_find_entry>
 800e94c:	4603      	mov	r3, r0
 800e94e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e950:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e954:	2b00      	cmp	r3, #0
 800e956:	da02      	bge.n	800e95e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e958:	8afb      	ldrh	r3, [r7, #22]
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	e05d      	b.n	800ea1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e95e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e962:	4933      	ldr	r1, [pc, #204]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e964:	4613      	mov	r3, r2
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4413      	add	r3, r2
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	440b      	add	r3, r1
 800e96e:	3314      	adds	r3, #20
 800e970:	2202      	movs	r2, #2
 800e972:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e978:	492d      	ldr	r1, [pc, #180]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e97a:	4613      	mov	r3, r2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	4413      	add	r3, r2
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	440b      	add	r3, r1
 800e984:	3308      	adds	r3, #8
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e98a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e98e:	4613      	mov	r3, r2
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	4413      	add	r3, r2
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	3308      	adds	r3, #8
 800e998:	4a25      	ldr	r2, [pc, #148]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e99a:	4413      	add	r3, r2
 800e99c:	3304      	adds	r3, #4
 800e99e:	2206      	movs	r2, #6
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f008 f9d8 	bl	8016d58 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e9a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e9ac:	4920      	ldr	r1, [pc, #128]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3312      	adds	r3, #18
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e9be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e9c2:	491b      	ldr	r1, [pc, #108]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	4413      	add	r3, r2
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	440b      	add	r3, r1
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d021      	beq.n	800ea18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e9d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e9d8:	4915      	ldr	r1, [pc, #84]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e9da:	4613      	mov	r3, r2
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	4413      	add	r3, r2
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	440b      	add	r3, r1
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e9e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e9ec:	4910      	ldr	r1, [pc, #64]	; (800ea30 <etharp_update_arp_entry+0x148>)
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	005b      	lsls	r3, r3, #1
 800e9f2:	4413      	add	r3, r2
 800e9f4:	00db      	lsls	r3, r3, #3
 800e9f6:	440b      	add	r3, r1
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ea02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6939      	ldr	r1, [r7, #16]
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f001 ff91 	bl	8010934 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ea12:	6938      	ldr	r0, [r7, #16]
 800ea14:	f7f8 ff24 	bl	8007860 <pbuf_free>
  }
  return ERR_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3718      	adds	r7, #24
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	0801a1d8 	.word	0x0801a1d8
 800ea28:	0801a2d0 	.word	0x0801a2d0
 800ea2c:	0801a250 	.word	0x0801a250
 800ea30:	20000110 	.word	0x20000110

0800ea34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60fb      	str	r3, [r7, #12]
 800ea40:	e01e      	b.n	800ea80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ea42:	4913      	ldr	r1, [pc, #76]	; (800ea90 <etharp_cleanup_netif+0x5c>)
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	4613      	mov	r3, r2
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	4413      	add	r3, r2
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	440b      	add	r3, r1
 800ea50:	3314      	adds	r3, #20
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ea56:	7afb      	ldrb	r3, [r7, #11]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00e      	beq.n	800ea7a <etharp_cleanup_netif+0x46>
 800ea5c:	490c      	ldr	r1, [pc, #48]	; (800ea90 <etharp_cleanup_netif+0x5c>)
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	4613      	mov	r3, r2
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	440b      	add	r3, r1
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d102      	bne.n	800ea7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f7ff fce5 	bl	800e444 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2b09      	cmp	r3, #9
 800ea84:	dddd      	ble.n	800ea42 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20000110 	.word	0x20000110

0800ea94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ea94:	b5b0      	push	{r4, r5, r7, lr}
 800ea96:	b08a      	sub	sp, #40	; 0x28
 800ea98:	af04      	add	r7, sp, #16
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d107      	bne.n	800eab4 <etharp_input+0x20>
 800eaa4:	4b3d      	ldr	r3, [pc, #244]	; (800eb9c <etharp_input+0x108>)
 800eaa6:	f240 228a 	movw	r2, #650	; 0x28a
 800eaaa:	493d      	ldr	r1, [pc, #244]	; (800eba0 <etharp_input+0x10c>)
 800eaac:	483d      	ldr	r0, [pc, #244]	; (800eba4 <etharp_input+0x110>)
 800eaae:	f008 f969 	bl	8016d84 <iprintf>
 800eab2:	e06f      	b.n	800eb94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eac4:	d10c      	bne.n	800eae0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eaca:	2b06      	cmp	r3, #6
 800eacc:	d108      	bne.n	800eae0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	d104      	bne.n	800eae0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eadc:	2b08      	cmp	r3, #8
 800eade:	d003      	beq.n	800eae8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7f8 febd 	bl	8007860 <pbuf_free>
    return;
 800eae6:	e055      	b.n	800eb94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	330e      	adds	r3, #14
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	3318      	adds	r3, #24
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	3304      	adds	r3, #4
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <etharp_input+0x74>
    for_us = 0;
 800eb02:	2300      	movs	r3, #0
 800eb04:	75fb      	strb	r3, [r7, #23]
 800eb06:	e009      	b.n	800eb1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	bf0c      	ite	eq
 800eb14:	2301      	moveq	r3, #1
 800eb16:	2300      	movne	r3, #0
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	f103 0208 	add.w	r2, r3, #8
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <etharp_input+0x98>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e000      	b.n	800eb2e <etharp_input+0x9a>
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	f107 010c 	add.w	r1, r7, #12
 800eb32:	6838      	ldr	r0, [r7, #0]
 800eb34:	f7ff fed8 	bl	800e8e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	88db      	ldrh	r3, [r3, #6]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb42:	d003      	beq.n	800eb4c <etharp_input+0xb8>
 800eb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb48:	d01e      	beq.n	800eb88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800eb4a:	e020      	b.n	800eb8e <etharp_input+0xfa>
      if (for_us) {
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d01c      	beq.n	800eb8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800eb6c:	2102      	movs	r1, #2
 800eb6e:	9103      	str	r1, [sp, #12]
 800eb70:	f107 010c 	add.w	r1, r7, #12
 800eb74:	9102      	str	r1, [sp, #8]
 800eb76:	9201      	str	r2, [sp, #4]
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	462b      	mov	r3, r5
 800eb7c:	4622      	mov	r2, r4
 800eb7e:	4601      	mov	r1, r0
 800eb80:	6838      	ldr	r0, [r7, #0]
 800eb82:	f000 faeb 	bl	800f15c <etharp_raw>
      break;
 800eb86:	e001      	b.n	800eb8c <etharp_input+0xf8>
      break;
 800eb88:	bf00      	nop
 800eb8a:	e000      	b.n	800eb8e <etharp_input+0xfa>
      break;
 800eb8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f8 fe66 	bl	8007860 <pbuf_free>
}
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bdb0      	pop	{r4, r5, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	0801a1d8 	.word	0x0801a1d8
 800eba0:	0801a328 	.word	0x0801a328
 800eba4:	0801a250 	.word	0x0801a250

0800eba8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ebb6:	79fa      	ldrb	r2, [r7, #7]
 800ebb8:	4944      	ldr	r1, [pc, #272]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	440b      	add	r3, r1
 800ebc4:	3314      	adds	r3, #20
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d806      	bhi.n	800ebda <etharp_output_to_arp_index+0x32>
 800ebcc:	4b40      	ldr	r3, [pc, #256]	; (800ecd0 <etharp_output_to_arp_index+0x128>)
 800ebce:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ebd2:	4940      	ldr	r1, [pc, #256]	; (800ecd4 <etharp_output_to_arp_index+0x12c>)
 800ebd4:	4840      	ldr	r0, [pc, #256]	; (800ecd8 <etharp_output_to_arp_index+0x130>)
 800ebd6:	f008 f8d5 	bl	8016d84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ebda:	79fa      	ldrb	r2, [r7, #7]
 800ebdc:	493b      	ldr	r1, [pc, #236]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ebde:	4613      	mov	r3, r2
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	4413      	add	r3, r2
 800ebe4:	00db      	lsls	r3, r3, #3
 800ebe6:	440b      	add	r3, r1
 800ebe8:	3314      	adds	r3, #20
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d153      	bne.n	800ec98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ebf0:	79fa      	ldrb	r2, [r7, #7]
 800ebf2:	4936      	ldr	r1, [pc, #216]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	005b      	lsls	r3, r3, #1
 800ebf8:	4413      	add	r3, r2
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	440b      	add	r3, r1
 800ebfe:	3312      	adds	r3, #18
 800ec00:	881b      	ldrh	r3, [r3, #0]
 800ec02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ec06:	d919      	bls.n	800ec3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ec08:	79fa      	ldrb	r2, [r7, #7]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	4413      	add	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	4a2e      	ldr	r2, [pc, #184]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec14:	4413      	add	r3, r2
 800ec16:	3304      	adds	r3, #4
 800ec18:	4619      	mov	r1, r3
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 fb4c 	bl	800f2b8 <etharp_request>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d138      	bne.n	800ec98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ec26:	79fa      	ldrb	r2, [r7, #7]
 800ec28:	4928      	ldr	r1, [pc, #160]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	440b      	add	r3, r1
 800ec34:	3314      	adds	r3, #20
 800ec36:	2203      	movs	r2, #3
 800ec38:	701a      	strb	r2, [r3, #0]
 800ec3a:	e02d      	b.n	800ec98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ec3c:	79fa      	ldrb	r2, [r7, #7]
 800ec3e:	4923      	ldr	r1, [pc, #140]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec40:	4613      	mov	r3, r2
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	440b      	add	r3, r1
 800ec4a:	3312      	adds	r3, #18
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ec52:	d321      	bcc.n	800ec98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ec54:	79fa      	ldrb	r2, [r7, #7]
 800ec56:	4613      	mov	r3, r2
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	4413      	add	r3, r2
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	4a1b      	ldr	r2, [pc, #108]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec60:	4413      	add	r3, r2
 800ec62:	1d19      	adds	r1, r3, #4
 800ec64:	79fa      	ldrb	r2, [r7, #7]
 800ec66:	4613      	mov	r3, r2
 800ec68:	005b      	lsls	r3, r3, #1
 800ec6a:	4413      	add	r3, r2
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	3308      	adds	r3, #8
 800ec70:	4a16      	ldr	r2, [pc, #88]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec72:	4413      	add	r3, r2
 800ec74:	3304      	adds	r3, #4
 800ec76:	461a      	mov	r2, r3
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f000 fafb 	bl	800f274 <etharp_request_dst>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d109      	bne.n	800ec98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ec84:	79fa      	ldrb	r2, [r7, #7]
 800ec86:	4911      	ldr	r1, [pc, #68]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ec88:	4613      	mov	r3, r2
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	4413      	add	r3, r2
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	440b      	add	r3, r1
 800ec92:	3314      	adds	r3, #20
 800ec94:	2203      	movs	r2, #3
 800ec96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ec9e:	79fa      	ldrb	r2, [r7, #7]
 800eca0:	4613      	mov	r3, r2
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	4413      	add	r3, r2
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	3308      	adds	r3, #8
 800ecaa:	4a08      	ldr	r2, [pc, #32]	; (800eccc <etharp_output_to_arp_index+0x124>)
 800ecac:	4413      	add	r3, r2
 800ecae:	3304      	adds	r3, #4
 800ecb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecb4:	9200      	str	r2, [sp, #0]
 800ecb6:	460a      	mov	r2, r1
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f001 fe3a 	bl	8010934 <ethernet_output>
 800ecc0:	4603      	mov	r3, r0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20000110 	.word	0x20000110
 800ecd0:	0801a1d8 	.word	0x0801a1d8
 800ecd4:	0801a348 	.word	0x0801a348
 800ecd8:	0801a250 	.word	0x0801a250

0800ecdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <etharp_output+0x24>
 800ecf2:	4b73      	ldr	r3, [pc, #460]	; (800eec0 <etharp_output+0x1e4>)
 800ecf4:	f240 321e 	movw	r2, #798	; 0x31e
 800ecf8:	4972      	ldr	r1, [pc, #456]	; (800eec4 <etharp_output+0x1e8>)
 800ecfa:	4873      	ldr	r0, [pc, #460]	; (800eec8 <etharp_output+0x1ec>)
 800ecfc:	f008 f842 	bl	8016d84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d106      	bne.n	800ed14 <etharp_output+0x38>
 800ed06:	4b6e      	ldr	r3, [pc, #440]	; (800eec0 <etharp_output+0x1e4>)
 800ed08:	f240 321f 	movw	r2, #799	; 0x31f
 800ed0c:	496f      	ldr	r1, [pc, #444]	; (800eecc <etharp_output+0x1f0>)
 800ed0e:	486e      	ldr	r0, [pc, #440]	; (800eec8 <etharp_output+0x1ec>)
 800ed10:	f008 f838 	bl	8016d84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d106      	bne.n	800ed28 <etharp_output+0x4c>
 800ed1a:	4b69      	ldr	r3, [pc, #420]	; (800eec0 <etharp_output+0x1e4>)
 800ed1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ed20:	496b      	ldr	r1, [pc, #428]	; (800eed0 <etharp_output+0x1f4>)
 800ed22:	4869      	ldr	r0, [pc, #420]	; (800eec8 <etharp_output+0x1ec>)
 800ed24:	f008 f82e 	bl	8016d84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68f9      	ldr	r1, [r7, #12]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f000 fef8 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ed3a:	4b66      	ldr	r3, [pc, #408]	; (800eed4 <etharp_output+0x1f8>)
 800ed3c:	61fb      	str	r3, [r7, #28]
 800ed3e:	e0af      	b.n	800eea0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed48:	2be0      	cmp	r3, #224	; 0xe0
 800ed4a:	d118      	bne.n	800ed7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ed50:	2300      	movs	r3, #0
 800ed52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ed54:	235e      	movs	r3, #94	; 0x5e
 800ed56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3302      	adds	r3, #2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3303      	adds	r3, #3
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ed76:	f107 0310 	add.w	r3, r7, #16
 800ed7a:	61fb      	str	r3, [r7, #28]
 800ed7c:	e090      	b.n	800eea0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3304      	adds	r3, #4
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	405a      	eors	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4013      	ands	r3, r2
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d012      	beq.n	800edbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ed9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d00b      	beq.n	800edbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	330c      	adds	r3, #12
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	330c      	adds	r3, #12
 800edb2:	61bb      	str	r3, [r7, #24]
 800edb4:	e002      	b.n	800edbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800edb6:	f06f 0303 	mvn.w	r3, #3
 800edba:	e07d      	b.n	800eeb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800edbc:	4b46      	ldr	r3, [pc, #280]	; (800eed8 <etharp_output+0x1fc>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	4619      	mov	r1, r3
 800edc2:	4a46      	ldr	r2, [pc, #280]	; (800eedc <etharp_output+0x200>)
 800edc4:	460b      	mov	r3, r1
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	440b      	add	r3, r1
 800edca:	00db      	lsls	r3, r3, #3
 800edcc:	4413      	add	r3, r2
 800edce:	3314      	adds	r3, #20
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d925      	bls.n	800ee22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800edd6:	4b40      	ldr	r3, [pc, #256]	; (800eed8 <etharp_output+0x1fc>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	4619      	mov	r1, r3
 800eddc:	4a3f      	ldr	r2, [pc, #252]	; (800eedc <etharp_output+0x200>)
 800edde:	460b      	mov	r3, r1
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	440b      	add	r3, r1
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	4413      	add	r3, r2
 800ede8:	3308      	adds	r3, #8
 800edea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d117      	bne.n	800ee22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4b38      	ldr	r3, [pc, #224]	; (800eed8 <etharp_output+0x1fc>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	4618      	mov	r0, r3
 800edfc:	4937      	ldr	r1, [pc, #220]	; (800eedc <etharp_output+0x200>)
 800edfe:	4603      	mov	r3, r0
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	4403      	add	r3, r0
 800ee04:	00db      	lsls	r3, r3, #3
 800ee06:	440b      	add	r3, r1
 800ee08:	3304      	adds	r3, #4
 800ee0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d108      	bne.n	800ee22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ee10:	4b31      	ldr	r3, [pc, #196]	; (800eed8 <etharp_output+0x1fc>)
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	461a      	mov	r2, r3
 800ee16:	68b9      	ldr	r1, [r7, #8]
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fec5 	bl	800eba8 <etharp_output_to_arp_index>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	e04a      	b.n	800eeb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ee22:	2300      	movs	r3, #0
 800ee24:	75fb      	strb	r3, [r7, #23]
 800ee26:	e031      	b.n	800ee8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ee28:	7dfa      	ldrb	r2, [r7, #23]
 800ee2a:	492c      	ldr	r1, [pc, #176]	; (800eedc <etharp_output+0x200>)
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	440b      	add	r3, r1
 800ee36:	3314      	adds	r3, #20
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d923      	bls.n	800ee86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ee3e:	7dfa      	ldrb	r2, [r7, #23]
 800ee40:	4926      	ldr	r1, [pc, #152]	; (800eedc <etharp_output+0x200>)
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d117      	bne.n	800ee86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	6819      	ldr	r1, [r3, #0]
 800ee5a:	7dfa      	ldrb	r2, [r7, #23]
 800ee5c:	481f      	ldr	r0, [pc, #124]	; (800eedc <etharp_output+0x200>)
 800ee5e:	4613      	mov	r3, r2
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	4413      	add	r3, r2
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	4403      	add	r3, r0
 800ee68:	3304      	adds	r3, #4
 800ee6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ee6c:	4299      	cmp	r1, r3
 800ee6e:	d10a      	bne.n	800ee86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ee70:	4a19      	ldr	r2, [pc, #100]	; (800eed8 <etharp_output+0x1fc>)
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	68b9      	ldr	r1, [r7, #8]
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f7ff fe93 	bl	800eba8 <etharp_output_to_arp_index>
 800ee82:	4603      	mov	r3, r0
 800ee84:	e018      	b.n	800eeb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ee86:	7dfb      	ldrb	r3, [r7, #23]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	75fb      	strb	r3, [r7, #23]
 800ee8c:	7dfb      	ldrb	r3, [r7, #23]
 800ee8e:	2b09      	cmp	r3, #9
 800ee90:	d9ca      	bls.n	800ee28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	69b9      	ldr	r1, [r7, #24]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f822 	bl	800eee0 <etharp_query>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	e00b      	b.n	800eeb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	68b9      	ldr	r1, [r7, #8]
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f001 fd3f 	bl	8010934 <ethernet_output>
 800eeb6:	4603      	mov	r3, r0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3720      	adds	r7, #32
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	0801a1d8 	.word	0x0801a1d8
 800eec4:	0801a328 	.word	0x0801a328
 800eec8:	0801a250 	.word	0x0801a250
 800eecc:	0801a378 	.word	0x0801a378
 800eed0:	0801a318 	.word	0x0801a318
 800eed4:	0801aa14 	.word	0x0801aa14
 800eed8:	20000200 	.word	0x20000200
 800eedc:	20000110 	.word	0x20000110

0800eee0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b08c      	sub	sp, #48	; 0x30
 800eee4:	af02      	add	r7, sp, #8
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	3326      	adds	r3, #38	; 0x26
 800eef0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eef2:	23ff      	movs	r3, #255	; 0xff
 800eef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68f9      	ldr	r1, [r7, #12]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 fe0e 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10c      	bne.n	800ef28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ef16:	2be0      	cmp	r3, #224	; 0xe0
 800ef18:	d006      	beq.n	800ef28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d003      	beq.n	800ef28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d102      	bne.n	800ef2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ef28:	f06f 030f 	mvn.w	r3, #15
 800ef2c:	e101      	b.n	800f132 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	2101      	movs	r1, #1
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f7ff fb60 	bl	800e5f8 <etharp_find_entry>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ef3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	da02      	bge.n	800ef4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ef44:	8a7b      	ldrh	r3, [r7, #18]
 800ef46:	b25b      	sxtb	r3, r3
 800ef48:	e0f3      	b.n	800f132 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ef4a:	8a7b      	ldrh	r3, [r7, #18]
 800ef4c:	2b7e      	cmp	r3, #126	; 0x7e
 800ef4e:	d906      	bls.n	800ef5e <etharp_query+0x7e>
 800ef50:	4b7a      	ldr	r3, [pc, #488]	; (800f13c <etharp_query+0x25c>)
 800ef52:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ef56:	497a      	ldr	r1, [pc, #488]	; (800f140 <etharp_query+0x260>)
 800ef58:	487a      	ldr	r0, [pc, #488]	; (800f144 <etharp_query+0x264>)
 800ef5a:	f007 ff13 	bl	8016d84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ef5e:	8a7b      	ldrh	r3, [r7, #18]
 800ef60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ef62:	7c7a      	ldrb	r2, [r7, #17]
 800ef64:	4978      	ldr	r1, [pc, #480]	; (800f148 <etharp_query+0x268>)
 800ef66:	4613      	mov	r3, r2
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	4413      	add	r3, r2
 800ef6c:	00db      	lsls	r3, r3, #3
 800ef6e:	440b      	add	r3, r1
 800ef70:	3314      	adds	r3, #20
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d115      	bne.n	800efa4 <etharp_query+0xc4>
    is_new_entry = 1;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ef7c:	7c7a      	ldrb	r2, [r7, #17]
 800ef7e:	4972      	ldr	r1, [pc, #456]	; (800f148 <etharp_query+0x268>)
 800ef80:	4613      	mov	r3, r2
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	4413      	add	r3, r2
 800ef86:	00db      	lsls	r3, r3, #3
 800ef88:	440b      	add	r3, r1
 800ef8a:	3314      	adds	r3, #20
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ef90:	7c7a      	ldrb	r2, [r7, #17]
 800ef92:	496d      	ldr	r1, [pc, #436]	; (800f148 <etharp_query+0x268>)
 800ef94:	4613      	mov	r3, r2
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	4413      	add	r3, r2
 800ef9a:	00db      	lsls	r3, r3, #3
 800ef9c:	440b      	add	r3, r1
 800ef9e:	3308      	adds	r3, #8
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800efa4:	7c7a      	ldrb	r2, [r7, #17]
 800efa6:	4968      	ldr	r1, [pc, #416]	; (800f148 <etharp_query+0x268>)
 800efa8:	4613      	mov	r3, r2
 800efaa:	005b      	lsls	r3, r3, #1
 800efac:	4413      	add	r3, r2
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	440b      	add	r3, r1
 800efb2:	3314      	adds	r3, #20
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d011      	beq.n	800efde <etharp_query+0xfe>
 800efba:	7c7a      	ldrb	r2, [r7, #17]
 800efbc:	4962      	ldr	r1, [pc, #392]	; (800f148 <etharp_query+0x268>)
 800efbe:	4613      	mov	r3, r2
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4413      	add	r3, r2
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	440b      	add	r3, r1
 800efc8:	3314      	adds	r3, #20
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d806      	bhi.n	800efde <etharp_query+0xfe>
 800efd0:	4b5a      	ldr	r3, [pc, #360]	; (800f13c <etharp_query+0x25c>)
 800efd2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800efd6:	495d      	ldr	r1, [pc, #372]	; (800f14c <etharp_query+0x26c>)
 800efd8:	485a      	ldr	r0, [pc, #360]	; (800f144 <etharp_query+0x264>)
 800efda:	f007 fed3 	bl	8016d84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d102      	bne.n	800efea <etharp_query+0x10a>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d10c      	bne.n	800f004 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800efea:	68b9      	ldr	r1, [r7, #8]
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f000 f963 	bl	800f2b8 <etharp_request>
 800eff2:	4603      	mov	r3, r0
 800eff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d102      	bne.n	800f004 <etharp_query+0x124>
      return result;
 800effe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f002:	e096      	b.n	800f132 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <etharp_query+0x138>
 800f00a:	4b4c      	ldr	r3, [pc, #304]	; (800f13c <etharp_query+0x25c>)
 800f00c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f010:	494f      	ldr	r1, [pc, #316]	; (800f150 <etharp_query+0x270>)
 800f012:	484c      	ldr	r0, [pc, #304]	; (800f144 <etharp_query+0x264>)
 800f014:	f007 feb6 	bl	8016d84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f018:	7c7a      	ldrb	r2, [r7, #17]
 800f01a:	494b      	ldr	r1, [pc, #300]	; (800f148 <etharp_query+0x268>)
 800f01c:	4613      	mov	r3, r2
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	4413      	add	r3, r2
 800f022:	00db      	lsls	r3, r3, #3
 800f024:	440b      	add	r3, r1
 800f026:	3314      	adds	r3, #20
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d917      	bls.n	800f05e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f02e:	4a49      	ldr	r2, [pc, #292]	; (800f154 <etharp_query+0x274>)
 800f030:	7c7b      	ldrb	r3, [r7, #17]
 800f032:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f034:	7c7a      	ldrb	r2, [r7, #17]
 800f036:	4613      	mov	r3, r2
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	4413      	add	r3, r2
 800f03c:	00db      	lsls	r3, r3, #3
 800f03e:	3308      	adds	r3, #8
 800f040:	4a41      	ldr	r2, [pc, #260]	; (800f148 <etharp_query+0x268>)
 800f042:	4413      	add	r3, r2
 800f044:	3304      	adds	r3, #4
 800f046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f04a:	9200      	str	r2, [sp, #0]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	6879      	ldr	r1, [r7, #4]
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f001 fc6f 	bl	8010934 <ethernet_output>
 800f056:	4603      	mov	r3, r0
 800f058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f05c:	e067      	b.n	800f12e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f05e:	7c7a      	ldrb	r2, [r7, #17]
 800f060:	4939      	ldr	r1, [pc, #228]	; (800f148 <etharp_query+0x268>)
 800f062:	4613      	mov	r3, r2
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	4413      	add	r3, r2
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	440b      	add	r3, r1
 800f06c:	3314      	adds	r3, #20
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d15c      	bne.n	800f12e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f07c:	e01c      	b.n	800f0b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	895a      	ldrh	r2, [r3, #10]
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	891b      	ldrh	r3, [r3, #8]
 800f086:	429a      	cmp	r2, r3
 800f088:	d10a      	bne.n	800f0a0 <etharp_query+0x1c0>
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d006      	beq.n	800f0a0 <etharp_query+0x1c0>
 800f092:	4b2a      	ldr	r3, [pc, #168]	; (800f13c <etharp_query+0x25c>)
 800f094:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f098:	492f      	ldr	r1, [pc, #188]	; (800f158 <etharp_query+0x278>)
 800f09a:	482a      	ldr	r0, [pc, #168]	; (800f144 <etharp_query+0x264>)
 800f09c:	f007 fe72 	bl	8016d84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	7b1b      	ldrb	r3, [r3, #12]
 800f0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <etharp_query+0x1d2>
        copy_needed = 1;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	61bb      	str	r3, [r7, #24]
        break;
 800f0b0:	e005      	b.n	800f0be <etharp_query+0x1de>
      }
      p = p->next;
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1df      	bne.n	800f07e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d007      	beq.n	800f0d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f0ca:	200e      	movs	r0, #14
 800f0cc:	f7f8 fe34 	bl	8007d38 <pbuf_clone>
 800f0d0:	61f8      	str	r0, [r7, #28]
 800f0d2:	e004      	b.n	800f0de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f0d8:	69f8      	ldr	r0, [r7, #28]
 800f0da:	f7f8 fc61 	bl	80079a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d021      	beq.n	800f128 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f0e4:	7c7a      	ldrb	r2, [r7, #17]
 800f0e6:	4918      	ldr	r1, [pc, #96]	; (800f148 <etharp_query+0x268>)
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	005b      	lsls	r3, r3, #1
 800f0ec:	4413      	add	r3, r2
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	440b      	add	r3, r1
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00a      	beq.n	800f10e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f0f8:	7c7a      	ldrb	r2, [r7, #17]
 800f0fa:	4913      	ldr	r1, [pc, #76]	; (800f148 <etharp_query+0x268>)
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4413      	add	r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	440b      	add	r3, r1
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7f8 fba9 	bl	8007860 <pbuf_free>
      }
      arp_table[i].q = p;
 800f10e:	7c7a      	ldrb	r2, [r7, #17]
 800f110:	490d      	ldr	r1, [pc, #52]	; (800f148 <etharp_query+0x268>)
 800f112:	4613      	mov	r3, r2
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	4413      	add	r3, r2
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	440b      	add	r3, r1
 800f11c:	69fa      	ldr	r2, [r7, #28]
 800f11e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f126:	e002      	b.n	800f12e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f128:	23ff      	movs	r3, #255	; 0xff
 800f12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f12e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f132:	4618      	mov	r0, r3
 800f134:	3728      	adds	r7, #40	; 0x28
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	0801a1d8 	.word	0x0801a1d8
 800f140:	0801a384 	.word	0x0801a384
 800f144:	0801a250 	.word	0x0801a250
 800f148:	20000110 	.word	0x20000110
 800f14c:	0801a394 	.word	0x0801a394
 800f150:	0801a378 	.word	0x0801a378
 800f154:	20000200 	.word	0x20000200
 800f158:	0801a3bc 	.word	0x0801a3bc

0800f15c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b08a      	sub	sp, #40	; 0x28
 800f160:	af02      	add	r7, sp, #8
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <etharp_raw+0x26>
 800f174:	4b3a      	ldr	r3, [pc, #232]	; (800f260 <etharp_raw+0x104>)
 800f176:	f240 4257 	movw	r2, #1111	; 0x457
 800f17a:	493a      	ldr	r1, [pc, #232]	; (800f264 <etharp_raw+0x108>)
 800f17c:	483a      	ldr	r0, [pc, #232]	; (800f268 <etharp_raw+0x10c>)
 800f17e:	f007 fe01 	bl	8016d84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f182:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f186:	211c      	movs	r1, #28
 800f188:	200e      	movs	r0, #14
 800f18a:	f7f8 f885 	bl	8007298 <pbuf_alloc>
 800f18e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d102      	bne.n	800f19c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f196:	f04f 33ff 	mov.w	r3, #4294967295
 800f19a:	e05d      	b.n	800f258 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	895b      	ldrh	r3, [r3, #10]
 800f1a0:	2b1b      	cmp	r3, #27
 800f1a2:	d806      	bhi.n	800f1b2 <etharp_raw+0x56>
 800f1a4:	4b2e      	ldr	r3, [pc, #184]	; (800f260 <etharp_raw+0x104>)
 800f1a6:	f240 4262 	movw	r2, #1122	; 0x462
 800f1aa:	4930      	ldr	r1, [pc, #192]	; (800f26c <etharp_raw+0x110>)
 800f1ac:	482e      	ldr	r0, [pc, #184]	; (800f268 <etharp_raw+0x10c>)
 800f1ae:	f007 fde9 	bl	8016d84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f1b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f7 f89c 	bl	80062f8 <lwip_htons>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1ce:	2b06      	cmp	r3, #6
 800f1d0:	d006      	beq.n	800f1e0 <etharp_raw+0x84>
 800f1d2:	4b23      	ldr	r3, [pc, #140]	; (800f260 <etharp_raw+0x104>)
 800f1d4:	f240 4269 	movw	r2, #1129	; 0x469
 800f1d8:	4925      	ldr	r1, [pc, #148]	; (800f270 <etharp_raw+0x114>)
 800f1da:	4823      	ldr	r0, [pc, #140]	; (800f268 <etharp_raw+0x10c>)
 800f1dc:	f007 fdd2 	bl	8016d84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	2206      	movs	r2, #6
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f007 fdb5 	bl	8016d58 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	3312      	adds	r3, #18
 800f1f2:	2206      	movs	r2, #6
 800f1f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f007 fdae 	bl	8016d58 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	330e      	adds	r3, #14
 800f200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f202:	6812      	ldr	r2, [r2, #0]
 800f204:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	3318      	adds	r3, #24
 800f20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]
 800f216:	2200      	movs	r2, #0
 800f218:	f042 0201 	orr.w	r2, r2, #1
 800f21c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2200      	movs	r2, #0
 800f222:	f042 0208 	orr.w	r2, r2, #8
 800f226:	709a      	strb	r2, [r3, #2]
 800f228:	2200      	movs	r2, #0
 800f22a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2206      	movs	r2, #6
 800f230:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	2204      	movs	r2, #4
 800f236:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f238:	f640 0306 	movw	r3, #2054	; 0x806
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	69b9      	ldr	r1, [r7, #24]
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f001 fb75 	bl	8010934 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f24a:	69b8      	ldr	r0, [r7, #24]
 800f24c:	f7f8 fb08 	bl	8007860 <pbuf_free>
  p = NULL;
 800f250:	2300      	movs	r3, #0
 800f252:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f254:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3720      	adds	r7, #32
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	0801a1d8 	.word	0x0801a1d8
 800f264:	0801a328 	.word	0x0801a328
 800f268:	0801a250 	.word	0x0801a250
 800f26c:	0801a3d8 	.word	0x0801a3d8
 800f270:	0801a40c 	.word	0x0801a40c

0800f274 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af04      	add	r7, sp, #16
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f290:	2201      	movs	r2, #1
 800f292:	9203      	str	r2, [sp, #12]
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	9202      	str	r2, [sp, #8]
 800f298:	4a06      	ldr	r2, [pc, #24]	; (800f2b4 <etharp_request_dst+0x40>)
 800f29a:	9201      	str	r2, [sp, #4]
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	4603      	mov	r3, r0
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff ff5a 	bl	800f15c <etharp_raw>
 800f2a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0801aa1c 	.word	0x0801aa1c

0800f2b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f2c2:	4a05      	ldr	r2, [pc, #20]	; (800f2d8 <etharp_request+0x20>)
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7ff ffd4 	bl	800f274 <etharp_request_dst>
 800f2cc:	4603      	mov	r3, r0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	0801aa14 	.word	0x0801aa14

0800f2dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08e      	sub	sp, #56	; 0x38
 800f2e0:	af04      	add	r7, sp, #16
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f2e6:	4b79      	ldr	r3, [pc, #484]	; (800f4cc <icmp_input+0x1f0>)
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	f003 030f 	and.w	r3, r3, #15
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2fe:	2b13      	cmp	r3, #19
 800f300:	f240 80cd 	bls.w	800f49e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	895b      	ldrh	r3, [r3, #10]
 800f308:	2b03      	cmp	r3, #3
 800f30a:	f240 80ca 	bls.w	800f4a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f318:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 80b7 	beq.w	800f490 <icmp_input+0x1b4>
 800f322:	2b08      	cmp	r3, #8
 800f324:	f040 80b7 	bne.w	800f496 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f328:	4b69      	ldr	r3, [pc, #420]	; (800f4d0 <icmp_input+0x1f4>)
 800f32a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f32c:	4b67      	ldr	r3, [pc, #412]	; (800f4cc <icmp_input+0x1f0>)
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f334:	2be0      	cmp	r3, #224	; 0xe0
 800f336:	f000 80bb 	beq.w	800f4b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f33a:	4b64      	ldr	r3, [pc, #400]	; (800f4cc <icmp_input+0x1f0>)
 800f33c:	695b      	ldr	r3, [r3, #20]
 800f33e:	4a63      	ldr	r2, [pc, #396]	; (800f4cc <icmp_input+0x1f0>)
 800f340:	6812      	ldr	r2, [r2, #0]
 800f342:	4611      	mov	r1, r2
 800f344:	4618      	mov	r0, r3
 800f346:	f000 fbed 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f040 80b1 	bne.w	800f4b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	891b      	ldrh	r3, [r3, #8]
 800f356:	2b07      	cmp	r3, #7
 800f358:	f240 80a5 	bls.w	800f4a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f35c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f35e:	330e      	adds	r3, #14
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7f8 f9e6 	bl	8007734 <pbuf_add_header>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d04b      	beq.n	800f406 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	891a      	ldrh	r2, [r3, #8]
 800f372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f374:	4413      	add	r3, r2
 800f376:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	891b      	ldrh	r3, [r3, #8]
 800f37c:	8b7a      	ldrh	r2, [r7, #26]
 800f37e:	429a      	cmp	r2, r3
 800f380:	f0c0 809a 	bcc.w	800f4b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f384:	8b7b      	ldrh	r3, [r7, #26]
 800f386:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f38a:	4619      	mov	r1, r3
 800f38c:	200e      	movs	r0, #14
 800f38e:	f7f7 ff83 	bl	8007298 <pbuf_alloc>
 800f392:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 8090 	beq.w	800f4bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3a4:	3308      	adds	r3, #8
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d203      	bcs.n	800f3b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f3aa:	6978      	ldr	r0, [r7, #20]
 800f3ac:	f7f8 fa58 	bl	8007860 <pbuf_free>
          goto icmperr;
 800f3b0:	e085      	b.n	800f4be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f007 fccc 	bl	8016d58 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f3c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6978      	ldr	r0, [r7, #20]
 800f3c6:	f7f8 f9c5 	bl	8007754 <pbuf_remove_header>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d009      	beq.n	800f3e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f3d0:	4b40      	ldr	r3, [pc, #256]	; (800f4d4 <icmp_input+0x1f8>)
 800f3d2:	22b6      	movs	r2, #182	; 0xb6
 800f3d4:	4940      	ldr	r1, [pc, #256]	; (800f4d8 <icmp_input+0x1fc>)
 800f3d6:	4841      	ldr	r0, [pc, #260]	; (800f4dc <icmp_input+0x200>)
 800f3d8:	f007 fcd4 	bl	8016d84 <iprintf>
          pbuf_free(r);
 800f3dc:	6978      	ldr	r0, [r7, #20]
 800f3de:	f7f8 fa3f 	bl	8007860 <pbuf_free>
          goto icmperr;
 800f3e2:	e06c      	b.n	800f4be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f3e4:	6879      	ldr	r1, [r7, #4]
 800f3e6:	6978      	ldr	r0, [r7, #20]
 800f3e8:	f7f8 fb62 	bl	8007ab0 <pbuf_copy>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d003      	beq.n	800f3fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f3f2:	6978      	ldr	r0, [r7, #20]
 800f3f4:	f7f8 fa34 	bl	8007860 <pbuf_free>
          goto icmperr;
 800f3f8:	e061      	b.n	800f4be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7f8 fa30 	bl	8007860 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	607b      	str	r3, [r7, #4]
 800f404:	e00f      	b.n	800f426 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f408:	330e      	adds	r3, #14
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7f8 f9a1 	bl	8007754 <pbuf_remove_header>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d006      	beq.n	800f426 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f418:	4b2e      	ldr	r3, [pc, #184]	; (800f4d4 <icmp_input+0x1f8>)
 800f41a:	22c7      	movs	r2, #199	; 0xc7
 800f41c:	4930      	ldr	r1, [pc, #192]	; (800f4e0 <icmp_input+0x204>)
 800f41e:	482f      	ldr	r0, [pc, #188]	; (800f4dc <icmp_input+0x200>)
 800f420:	f007 fcb0 	bl	8016d84 <iprintf>
          goto icmperr;
 800f424:	e04b      	b.n	800f4be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f42e:	4619      	mov	r1, r3
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7f8 f97f 	bl	8007734 <pbuf_add_header>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d12b      	bne.n	800f494 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f44a:	4b20      	ldr	r3, [pc, #128]	; (800f4cc <icmp_input+0x1f0>)
 800f44c:	691a      	ldr	r2, [r3, #16]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	2200      	movs	r2, #0
 800f456:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2200      	movs	r2, #0
 800f45c:	709a      	strb	r2, [r3, #2]
 800f45e:	2200      	movs	r2, #0
 800f460:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	22ff      	movs	r2, #255	; 0xff
 800f466:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	729a      	strb	r2, [r3, #10]
 800f46e:	2200      	movs	r2, #0
 800f470:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	9302      	str	r3, [sp, #8]
 800f476:	2301      	movs	r3, #1
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	2300      	movs	r3, #0
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	23ff      	movs	r3, #255	; 0xff
 800f480:	2200      	movs	r2, #0
 800f482:	69f9      	ldr	r1, [r7, #28]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fa75 	bl	800f974 <ip4_output_if>
 800f48a:	4603      	mov	r3, r0
 800f48c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f48e:	e001      	b.n	800f494 <icmp_input+0x1b8>
      break;
 800f490:	bf00      	nop
 800f492:	e000      	b.n	800f496 <icmp_input+0x1ba>
      break;
 800f494:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7f8 f9e2 	bl	8007860 <pbuf_free>
  return;
 800f49c:	e013      	b.n	800f4c6 <icmp_input+0x1ea>
    goto lenerr;
 800f49e:	bf00      	nop
 800f4a0:	e002      	b.n	800f4a8 <icmp_input+0x1cc>
    goto lenerr;
 800f4a2:	bf00      	nop
 800f4a4:	e000      	b.n	800f4a8 <icmp_input+0x1cc>
        goto lenerr;
 800f4a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7f8 f9d9 	bl	8007860 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f4ae:	e00a      	b.n	800f4c6 <icmp_input+0x1ea>
        goto icmperr;
 800f4b0:	bf00      	nop
 800f4b2:	e004      	b.n	800f4be <icmp_input+0x1e2>
        goto icmperr;
 800f4b4:	bf00      	nop
 800f4b6:	e002      	b.n	800f4be <icmp_input+0x1e2>
          goto icmperr;
 800f4b8:	bf00      	nop
 800f4ba:	e000      	b.n	800f4be <icmp_input+0x1e2>
          goto icmperr;
 800f4bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7f8 f9ce 	bl	8007860 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f4c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f4c6:	3728      	adds	r7, #40	; 0x28
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20003428 	.word	0x20003428
 800f4d0:	2000343c 	.word	0x2000343c
 800f4d4:	0801a450 	.word	0x0801a450
 800f4d8:	0801a488 	.word	0x0801a488
 800f4dc:	0801a4c0 	.word	0x0801a4c0
 800f4e0:	0801a4e8 	.word	0x0801a4e8

0800f4e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	2103      	movs	r1, #3
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f814 	bl	800f524 <icmp_send_response>
}
 800f4fc:	bf00      	nop
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f510:	78fb      	ldrb	r3, [r7, #3]
 800f512:	461a      	mov	r2, r3
 800f514:	210b      	movs	r1, #11
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f804 	bl	800f524 <icmp_send_response>
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b08c      	sub	sp, #48	; 0x30
 800f528:	af04      	add	r7, sp, #16
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	460b      	mov	r3, r1
 800f52e:	70fb      	strb	r3, [r7, #3]
 800f530:	4613      	mov	r3, r2
 800f532:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f534:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f538:	2124      	movs	r1, #36	; 0x24
 800f53a:	2022      	movs	r0, #34	; 0x22
 800f53c:	f7f7 feac 	bl	8007298 <pbuf_alloc>
 800f540:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d04c      	beq.n	800f5e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	895b      	ldrh	r3, [r3, #10]
 800f54c:	2b23      	cmp	r3, #35	; 0x23
 800f54e:	d806      	bhi.n	800f55e <icmp_send_response+0x3a>
 800f550:	4b26      	ldr	r3, [pc, #152]	; (800f5ec <icmp_send_response+0xc8>)
 800f552:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f556:	4926      	ldr	r1, [pc, #152]	; (800f5f0 <icmp_send_response+0xcc>)
 800f558:	4826      	ldr	r0, [pc, #152]	; (800f5f4 <icmp_send_response+0xd0>)
 800f55a:	f007 fc13 	bl	8016d84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	78fa      	ldrb	r2, [r7, #3]
 800f56e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	78ba      	ldrb	r2, [r7, #2]
 800f574:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2200      	movs	r2, #0
 800f57a:	711a      	strb	r2, [r3, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2200      	movs	r2, #0
 800f584:	719a      	strb	r2, [r3, #6]
 800f586:	2200      	movs	r2, #0
 800f588:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	f103 0008 	add.w	r0, r3, #8
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	221c      	movs	r2, #28
 800f598:	4619      	mov	r1, r3
 800f59a:	f007 fbdd 	bl	8016d58 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f5a4:	f107 030c 	add.w	r3, r7, #12
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f000 f825 	bl	800f5f8 <ip4_route>
 800f5ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d011      	beq.n	800f5da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	709a      	strb	r2, [r3, #2]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f5c0:	f107 020c 	add.w	r2, r7, #12
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	9302      	str	r3, [sp, #8]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	23ff      	movs	r3, #255	; 0xff
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	69f8      	ldr	r0, [r7, #28]
 800f5d6:	f000 f9cd 	bl	800f974 <ip4_output_if>
  }
  pbuf_free(q);
 800f5da:	69f8      	ldr	r0, [r7, #28]
 800f5dc:	f7f8 f940 	bl	8007860 <pbuf_free>
 800f5e0:	e000      	b.n	800f5e4 <icmp_send_response+0xc0>
    return;
 800f5e2:	bf00      	nop
}
 800f5e4:	3720      	adds	r7, #32
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	0801a450 	.word	0x0801a450
 800f5f0:	0801a51c 	.word	0x0801a51c
 800f5f4:	0801a4c0 	.word	0x0801a4c0

0800f5f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f600:	4b33      	ldr	r3, [pc, #204]	; (800f6d0 <ip4_route+0xd8>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	e036      	b.n	800f676 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d02b      	beq.n	800f670 <ip4_route+0x78>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f61e:	089b      	lsrs	r3, r3, #2
 800f620:	f003 0301 	and.w	r3, r3, #1
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d022      	beq.n	800f670 <ip4_route+0x78>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3304      	adds	r3, #4
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d01d      	beq.n	800f670 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	3304      	adds	r3, #4
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	405a      	eors	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3308      	adds	r3, #8
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4013      	ands	r3, r2
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	e038      	b.n	800f6c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f656:	f003 0302 	and.w	r3, r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d108      	bne.n	800f670 <ip4_route+0x78>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	330c      	adds	r3, #12
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d101      	bne.n	800f670 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	e028      	b.n	800f6c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	60fb      	str	r3, [r7, #12]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1c5      	bne.n	800f608 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f67c:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <ip4_route+0xdc>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d01a      	beq.n	800f6ba <ip4_route+0xc2>
 800f684:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <ip4_route+0xdc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	d012      	beq.n	800f6ba <ip4_route+0xc2>
 800f694:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <ip4_route+0xdc>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f6a4:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <ip4_route+0xdc>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	3304      	adds	r3, #4
 800f6aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	2b7f      	cmp	r3, #127	; 0x7f
 800f6b8:	d101      	bne.n	800f6be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e001      	b.n	800f6c2 <ip4_route+0xca>
  }

  return netif_default;
 800f6be:	4b05      	ldr	r3, [pc, #20]	; (800f6d4 <ip4_route+0xdc>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	2000695c 	.word	0x2000695c
 800f6d4:	20006960 	.word	0x20006960

0800f6d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d016      	beq.n	800f71e <ip4_input_accept+0x46>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d011      	beq.n	800f71e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f6fa:	4b0b      	ldr	r3, [pc, #44]	; (800f728 <ip4_input_accept+0x50>)
 800f6fc:	695a      	ldr	r2, [r3, #20]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	3304      	adds	r3, #4
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	429a      	cmp	r2, r3
 800f706:	d008      	beq.n	800f71a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f708:	4b07      	ldr	r3, [pc, #28]	; (800f728 <ip4_input_accept+0x50>)
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	4618      	mov	r0, r3
 800f710:	f000 fa08 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800f714:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e000      	b.n	800f720 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	20003428 	.word	0x20003428

0800f72c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	091b      	lsrs	r3, r3, #4
 800f742:	b2db      	uxtb	r3, r3
 800f744:	2b04      	cmp	r3, #4
 800f746:	d004      	beq.n	800f752 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7f8 f889 	bl	8007860 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	e107      	b.n	800f962 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	f003 030f 	and.w	r3, r3, #15
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	885b      	ldrh	r3, [r3, #2]
 800f766:	b29b      	uxth	r3, r3
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f6 fdc5 	bl	80062f8 <lwip_htons>
 800f76e:	4603      	mov	r3, r0
 800f770:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	891b      	ldrh	r3, [r3, #8]
 800f776:	89ba      	ldrh	r2, [r7, #12]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d204      	bcs.n	800f786 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f77c:	89bb      	ldrh	r3, [r7, #12]
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7f7 fee7 	bl	8007554 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	895b      	ldrh	r3, [r3, #10]
 800f78a:	89fa      	ldrh	r2, [r7, #14]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d807      	bhi.n	800f7a0 <ip4_input+0x74>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	89ba      	ldrh	r2, [r7, #12]
 800f796:	429a      	cmp	r2, r3
 800f798:	d802      	bhi.n	800f7a0 <ip4_input+0x74>
 800f79a:	89fb      	ldrh	r3, [r7, #14]
 800f79c:	2b13      	cmp	r3, #19
 800f79e:	d804      	bhi.n	800f7aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7f8 f85d 	bl	8007860 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e0db      	b.n	800f962 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	4a6f      	ldr	r2, [pc, #444]	; (800f96c <ip4_input+0x240>)
 800f7b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	4a6d      	ldr	r2, [pc, #436]	; (800f96c <ip4_input+0x240>)
 800f7b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f7ba:	4b6c      	ldr	r3, [pc, #432]	; (800f96c <ip4_input+0x240>)
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7c2:	2be0      	cmp	r3, #224	; 0xe0
 800f7c4:	d112      	bne.n	800f7ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7cc:	f003 0301 	and.w	r3, r3, #1
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d007      	beq.n	800f7e6 <ip4_input+0xba>
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	3304      	adds	r3, #4
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <ip4_input+0xba>
      netif = inp;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	613b      	str	r3, [r7, #16]
 800f7e4:	e02a      	b.n	800f83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	613b      	str	r3, [r7, #16]
 800f7ea:	e027      	b.n	800f83c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f7ec:	6838      	ldr	r0, [r7, #0]
 800f7ee:	f7ff ff73 	bl	800f6d8 <ip4_input_accept>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <ip4_input+0xd2>
      netif = inp;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	613b      	str	r3, [r7, #16]
 800f7fc:	e01e      	b.n	800f83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f7fe:	2300      	movs	r3, #0
 800f800:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f802:	4b5a      	ldr	r3, [pc, #360]	; (800f96c <ip4_input+0x240>)
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b7f      	cmp	r3, #127	; 0x7f
 800f80a:	d017      	beq.n	800f83c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f80c:	4b58      	ldr	r3, [pc, #352]	; (800f970 <ip4_input+0x244>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	613b      	str	r3, [r7, #16]
 800f812:	e00e      	b.n	800f832 <ip4_input+0x106>
          if (netif == inp) {
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d006      	beq.n	800f82a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f81c:	6938      	ldr	r0, [r7, #16]
 800f81e:	f7ff ff5b 	bl	800f6d8 <ip4_input_accept>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d108      	bne.n	800f83a <ip4_input+0x10e>
 800f828:	e000      	b.n	800f82c <ip4_input+0x100>
            continue;
 800f82a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	613b      	str	r3, [r7, #16]
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1ed      	bne.n	800f814 <ip4_input+0xe8>
 800f838:	e000      	b.n	800f83c <ip4_input+0x110>
            break;
 800f83a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f83c:	4b4b      	ldr	r3, [pc, #300]	; (800f96c <ip4_input+0x240>)
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	6839      	ldr	r1, [r7, #0]
 800f842:	4618      	mov	r0, r3
 800f844:	f000 f96e 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d105      	bne.n	800f85a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f84e:	4b47      	ldr	r3, [pc, #284]	; (800f96c <ip4_input+0x240>)
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f856:	2be0      	cmp	r3, #224	; 0xe0
 800f858:	d104      	bne.n	800f864 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7f8 f800 	bl	8007860 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	e07e      	b.n	800f962 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d104      	bne.n	800f874 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7f7 fff8 	bl	8007860 <pbuf_free>
    return ERR_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	e076      	b.n	800f962 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	88db      	ldrh	r3, [r3, #6]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	461a      	mov	r2, r3
 800f87c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f880:	4013      	ands	r3, r2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00b      	beq.n	800f89e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fc92 	bl	80101b0 <ip4_reass>
 800f88c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <ip4_input+0x16c>
      return ERR_OK;
 800f894:	2300      	movs	r3, #0
 800f896:	e064      	b.n	800f962 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f89e:	4a33      	ldr	r2, [pc, #204]	; (800f96c <ip4_input+0x240>)
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f8a4:	4a31      	ldr	r2, [pc, #196]	; (800f96c <ip4_input+0x240>)
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f8aa:	4a30      	ldr	r2, [pc, #192]	; (800f96c <ip4_input+0x240>)
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	f003 030f 	and.w	r3, r3, #15
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	4b2a      	ldr	r3, [pc, #168]	; (800f96c <ip4_input+0x240>)
 800f8c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f8c4:	89fb      	ldrh	r3, [r7, #14]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7f7 ff43 	bl	8007754 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	7a5b      	ldrb	r3, [r3, #9]
 800f8d2:	2b11      	cmp	r3, #17
 800f8d4:	d006      	beq.n	800f8e4 <ip4_input+0x1b8>
 800f8d6:	2b11      	cmp	r3, #17
 800f8d8:	dc13      	bgt.n	800f902 <ip4_input+0x1d6>
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d00c      	beq.n	800f8f8 <ip4_input+0x1cc>
 800f8de:	2b06      	cmp	r3, #6
 800f8e0:	d005      	beq.n	800f8ee <ip4_input+0x1c2>
 800f8e2:	e00e      	b.n	800f902 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f8e4:	6839      	ldr	r1, [r7, #0]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7fe fc68 	bl	800e1bc <udp_input>
        break;
 800f8ec:	e026      	b.n	800f93c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7fa f88d 	bl	8009a10 <tcp_input>
        break;
 800f8f6:	e021      	b.n	800f93c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7ff fcee 	bl	800f2dc <icmp_input>
        break;
 800f900:	e01c      	b.n	800f93c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f902:	4b1a      	ldr	r3, [pc, #104]	; (800f96c <ip4_input+0x240>)
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	6939      	ldr	r1, [r7, #16]
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 f90b 	bl	800fb24 <ip4_addr_isbroadcast_u32>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10f      	bne.n	800f934 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f914:	4b15      	ldr	r3, [pc, #84]	; (800f96c <ip4_input+0x240>)
 800f916:	695b      	ldr	r3, [r3, #20]
 800f918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f91c:	2be0      	cmp	r3, #224	; 0xe0
 800f91e:	d009      	beq.n	800f934 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f924:	4619      	mov	r1, r3
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7f7 ff87 	bl	800783a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f92c:	2102      	movs	r1, #2
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff fdd8 	bl	800f4e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7f7 ff93 	bl	8007860 <pbuf_free>
        break;
 800f93a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f93c:	4b0b      	ldr	r3, [pc, #44]	; (800f96c <ip4_input+0x240>)
 800f93e:	2200      	movs	r2, #0
 800f940:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f942:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <ip4_input+0x240>)
 800f944:	2200      	movs	r2, #0
 800f946:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f948:	4b08      	ldr	r3, [pc, #32]	; (800f96c <ip4_input+0x240>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f94e:	4b07      	ldr	r3, [pc, #28]	; (800f96c <ip4_input+0x240>)
 800f950:	2200      	movs	r2, #0
 800f952:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f954:	4b05      	ldr	r3, [pc, #20]	; (800f96c <ip4_input+0x240>)
 800f956:	2200      	movs	r2, #0
 800f958:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f95a:	4b04      	ldr	r3, [pc, #16]	; (800f96c <ip4_input+0x240>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3718      	adds	r7, #24
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	20003428 	.word	0x20003428
 800f970:	2000695c 	.word	0x2000695c

0800f974 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08a      	sub	sp, #40	; 0x28
 800f978:	af04      	add	r7, sp, #16
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d009      	beq.n	800f9a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d003      	beq.n	800f99a <ip4_output_if+0x26>
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d102      	bne.n	800f9a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99c:	3304      	adds	r3, #4
 800f99e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f9a0:	78fa      	ldrb	r2, [r7, #3]
 800f9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a4:	9302      	str	r3, [sp, #8]
 800f9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f9aa:	9301      	str	r3, [sp, #4]
 800f9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6979      	ldr	r1, [r7, #20]
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f000 f805 	bl	800f9c8 <ip4_output_if_src>
 800f9be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3718      	adds	r7, #24
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b088      	sub	sp, #32
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	7b9b      	ldrb	r3, [r3, #14]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d006      	beq.n	800f9ec <ip4_output_if_src+0x24>
 800f9de:	4b4b      	ldr	r3, [pc, #300]	; (800fb0c <ip4_output_if_src+0x144>)
 800f9e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f9e4:	494a      	ldr	r1, [pc, #296]	; (800fb10 <ip4_output_if_src+0x148>)
 800f9e6:	484b      	ldr	r0, [pc, #300]	; (800fb14 <ip4_output_if_src+0x14c>)
 800f9e8:	f007 f9cc 	bl	8016d84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d060      	beq.n	800fab4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f9f2:	2314      	movs	r3, #20
 800f9f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f9f6:	2114      	movs	r1, #20
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f7f7 fe9b 	bl	8007734 <pbuf_add_header>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fa04:	f06f 0301 	mvn.w	r3, #1
 800fa08:	e07c      	b.n	800fb04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	895b      	ldrh	r3, [r3, #10]
 800fa14:	2b13      	cmp	r3, #19
 800fa16:	d806      	bhi.n	800fa26 <ip4_output_if_src+0x5e>
 800fa18:	4b3c      	ldr	r3, [pc, #240]	; (800fb0c <ip4_output_if_src+0x144>)
 800fa1a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fa1e:	493e      	ldr	r1, [pc, #248]	; (800fb18 <ip4_output_if_src+0x150>)
 800fa20:	483c      	ldr	r0, [pc, #240]	; (800fb14 <ip4_output_if_src+0x14c>)
 800fa22:	f007 f9af 	bl	8016d84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	78fa      	ldrb	r2, [r7, #3]
 800fa2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fa32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fa3c:	8b7b      	ldrh	r3, [r7, #26]
 800fa3e:	089b      	lsrs	r3, r3, #2
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fa54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	891b      	ldrh	r3, [r3, #8]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7f6 fc4c 	bl	80062f8 <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	719a      	strb	r2, [r3, #6]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fa72:	4b2a      	ldr	r3, [pc, #168]	; (800fb1c <ip4_output_if_src+0x154>)
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f6 fc3e 	bl	80062f8 <lwip_htons>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	461a      	mov	r2, r3
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fa84:	4b25      	ldr	r3, [pc, #148]	; (800fb1c <ip4_output_if_src+0x154>)
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	4b23      	ldr	r3, [pc, #140]	; (800fb1c <ip4_output_if_src+0x154>)
 800fa8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d104      	bne.n	800faa0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fa96:	4b22      	ldr	r3, [pc, #136]	; (800fb20 <ip4_output_if_src+0x158>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	60da      	str	r2, [r3, #12]
 800fa9e:	e003      	b.n	800faa8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	2200      	movs	r2, #0
 800faac:	729a      	strb	r2, [r3, #10]
 800faae:	2200      	movs	r2, #0
 800fab0:	72da      	strb	r2, [r3, #11]
 800fab2:	e00f      	b.n	800fad4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	895b      	ldrh	r3, [r3, #10]
 800fab8:	2b13      	cmp	r3, #19
 800faba:	d802      	bhi.n	800fac2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fabc:	f06f 0301 	mvn.w	r3, #1
 800fac0:	e020      	b.n	800fb04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800face:	f107 0314 	add.w	r3, r7, #20
 800fad2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00c      	beq.n	800faf6 <ip4_output_if_src+0x12e>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	891a      	ldrh	r2, [r3, #8]
 800fae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d906      	bls.n	800faf6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f000 fd4d 	bl	801058c <ip4_frag>
 800faf2:	4603      	mov	r3, r0
 800faf4:	e006      	b.n	800fb04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	68f9      	ldr	r1, [r7, #12]
 800fafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb00:	4798      	blx	r3
 800fb02:	4603      	mov	r3, r0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3720      	adds	r7, #32
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	0801a548 	.word	0x0801a548
 800fb10:	0801a57c 	.word	0x0801a57c
 800fb14:	0801a588 	.word	0x0801a588
 800fb18:	0801a5b0 	.word	0x0801a5b0
 800fb1c:	20000202 	.word	0x20000202
 800fb20:	0801aa10 	.word	0x0801aa10

0800fb24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb38:	d002      	beq.n	800fb40 <ip4_addr_isbroadcast_u32+0x1c>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fb40:	2301      	movs	r3, #1
 800fb42:	e02a      	b.n	800fb9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb4a:	f003 0302 	and.w	r3, r3, #2
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d101      	bne.n	800fb56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	e021      	b.n	800fb9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d101      	bne.n	800fb66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	e019      	b.n	800fb9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	405a      	eors	r2, r3
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	3308      	adds	r3, #8
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4013      	ands	r3, r2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d10d      	bne.n	800fb98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	3308      	adds	r3, #8
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	43da      	mvns	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d101      	bne.n	800fb98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fb94:	2301      	movs	r3, #1
 800fb96:	e000      	b.n	800fb9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fb98:	2300      	movs	r3, #0
  }
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3714      	adds	r7, #20
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
	...

0800fba8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fbb2:	4b12      	ldr	r3, [pc, #72]	; (800fbfc <ip_reass_tmr+0x54>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fbb8:	e018      	b.n	800fbec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	7fdb      	ldrb	r3, [r3, #31]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00b      	beq.n	800fbda <ip_reass_tmr+0x32>
      r->timer--;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	7fdb      	ldrb	r3, [r3, #31]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	e008      	b.n	800fbec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fbe4:	68b9      	ldr	r1, [r7, #8]
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f80a 	bl	800fc00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1e3      	bne.n	800fbba <ip_reass_tmr+0x12>
    }
  }
}
 800fbf2:	bf00      	nop
 800fbf4:	bf00      	nop
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	20000204 	.word	0x20000204

0800fc00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b088      	sub	sp, #32
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fc0e:	683a      	ldr	r2, [r7, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d105      	bne.n	800fc22 <ip_reass_free_complete_datagram+0x22>
 800fc16:	4b45      	ldr	r3, [pc, #276]	; (800fd2c <ip_reass_free_complete_datagram+0x12c>)
 800fc18:	22ab      	movs	r2, #171	; 0xab
 800fc1a:	4945      	ldr	r1, [pc, #276]	; (800fd30 <ip_reass_free_complete_datagram+0x130>)
 800fc1c:	4845      	ldr	r0, [pc, #276]	; (800fd34 <ip_reass_free_complete_datagram+0x134>)
 800fc1e:	f007 f8b1 	bl	8016d84 <iprintf>
  if (prev != NULL) {
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d00a      	beq.n	800fc3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d005      	beq.n	800fc3e <ip_reass_free_complete_datagram+0x3e>
 800fc32:	4b3e      	ldr	r3, [pc, #248]	; (800fd2c <ip_reass_free_complete_datagram+0x12c>)
 800fc34:	22ad      	movs	r2, #173	; 0xad
 800fc36:	4940      	ldr	r1, [pc, #256]	; (800fd38 <ip_reass_free_complete_datagram+0x138>)
 800fc38:	483e      	ldr	r0, [pc, #248]	; (800fd34 <ip_reass_free_complete_datagram+0x134>)
 800fc3a:	f007 f8a3 	bl	8016d84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	889b      	ldrh	r3, [r3, #4]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d12a      	bne.n	800fca6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	6858      	ldr	r0, [r3, #4]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	3308      	adds	r3, #8
 800fc66:	2214      	movs	r2, #20
 800fc68:	4619      	mov	r1, r3
 800fc6a:	f007 f875 	bl	8016d58 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fc6e:	2101      	movs	r1, #1
 800fc70:	69b8      	ldr	r0, [r7, #24]
 800fc72:	f7ff fc47 	bl	800f504 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fc76:	69b8      	ldr	r0, [r7, #24]
 800fc78:	f7f7 fe7a 	bl	8007970 <pbuf_clen>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fc80:	8bfa      	ldrh	r2, [r7, #30]
 800fc82:	8a7b      	ldrh	r3, [r7, #18]
 800fc84:	4413      	add	r3, r2
 800fc86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc8a:	db05      	blt.n	800fc98 <ip_reass_free_complete_datagram+0x98>
 800fc8c:	4b27      	ldr	r3, [pc, #156]	; (800fd2c <ip_reass_free_complete_datagram+0x12c>)
 800fc8e:	22bc      	movs	r2, #188	; 0xbc
 800fc90:	492a      	ldr	r1, [pc, #168]	; (800fd3c <ip_reass_free_complete_datagram+0x13c>)
 800fc92:	4828      	ldr	r0, [pc, #160]	; (800fd34 <ip_reass_free_complete_datagram+0x134>)
 800fc94:	f007 f876 	bl	8016d84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fc98:	8bfa      	ldrh	r2, [r7, #30]
 800fc9a:	8a7b      	ldrh	r3, [r7, #18]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fca0:	69b8      	ldr	r0, [r7, #24]
 800fca2:	f7f7 fddd 	bl	8007860 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fcac:	e01f      	b.n	800fcee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7f7 fe56 	bl	8007970 <pbuf_clen>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fcc8:	8bfa      	ldrh	r2, [r7, #30]
 800fcca:	8a7b      	ldrh	r3, [r7, #18]
 800fccc:	4413      	add	r3, r2
 800fcce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd2:	db05      	blt.n	800fce0 <ip_reass_free_complete_datagram+0xe0>
 800fcd4:	4b15      	ldr	r3, [pc, #84]	; (800fd2c <ip_reass_free_complete_datagram+0x12c>)
 800fcd6:	22cc      	movs	r2, #204	; 0xcc
 800fcd8:	4918      	ldr	r1, [pc, #96]	; (800fd3c <ip_reass_free_complete_datagram+0x13c>)
 800fcda:	4816      	ldr	r0, [pc, #88]	; (800fd34 <ip_reass_free_complete_datagram+0x134>)
 800fcdc:	f007 f852 	bl	8016d84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fce0:	8bfa      	ldrh	r2, [r7, #30]
 800fce2:	8a7b      	ldrh	r3, [r7, #18]
 800fce4:	4413      	add	r3, r2
 800fce6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7f7 fdb9 	bl	8007860 <pbuf_free>
  while (p != NULL) {
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1dc      	bne.n	800fcae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f8c2 	bl	800fe80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fcfc:	4b10      	ldr	r3, [pc, #64]	; (800fd40 <ip_reass_free_complete_datagram+0x140>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	8bfa      	ldrh	r2, [r7, #30]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d905      	bls.n	800fd12 <ip_reass_free_complete_datagram+0x112>
 800fd06:	4b09      	ldr	r3, [pc, #36]	; (800fd2c <ip_reass_free_complete_datagram+0x12c>)
 800fd08:	22d2      	movs	r2, #210	; 0xd2
 800fd0a:	490e      	ldr	r1, [pc, #56]	; (800fd44 <ip_reass_free_complete_datagram+0x144>)
 800fd0c:	4809      	ldr	r0, [pc, #36]	; (800fd34 <ip_reass_free_complete_datagram+0x134>)
 800fd0e:	f007 f839 	bl	8016d84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd12:	4b0b      	ldr	r3, [pc, #44]	; (800fd40 <ip_reass_free_complete_datagram+0x140>)
 800fd14:	881a      	ldrh	r2, [r3, #0]
 800fd16:	8bfb      	ldrh	r3, [r7, #30]
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	4b08      	ldr	r3, [pc, #32]	; (800fd40 <ip_reass_free_complete_datagram+0x140>)
 800fd1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fd20:	8bfb      	ldrh	r3, [r7, #30]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	0801a5e0 	.word	0x0801a5e0
 800fd30:	0801a61c 	.word	0x0801a61c
 800fd34:	0801a628 	.word	0x0801a628
 800fd38:	0801a650 	.word	0x0801a650
 800fd3c:	0801a664 	.word	0x0801a664
 800fd40:	20000208 	.word	0x20000208
 800fd44:	0801a684 	.word	0x0801a684

0800fd48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b08a      	sub	sp, #40	; 0x28
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fd52:	2300      	movs	r3, #0
 800fd54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fd66:	4b28      	ldr	r3, [pc, #160]	; (800fe08 <ip_reass_remove_oldest_datagram+0xc0>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fd6c:	e030      	b.n	800fdd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd70:	695a      	ldr	r2, [r3, #20]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d10c      	bne.n	800fd94 <ip_reass_remove_oldest_datagram+0x4c>
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	699a      	ldr	r2, [r3, #24]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d106      	bne.n	800fd94 <ip_reass_remove_oldest_datagram+0x4c>
 800fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd88:	899a      	ldrh	r2, [r3, #12]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	889b      	ldrh	r3, [r3, #4]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d014      	beq.n	800fdbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	3301      	adds	r3, #1
 800fd98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fd9a:	6a3b      	ldr	r3, [r7, #32]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d104      	bne.n	800fdaa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	61bb      	str	r3, [r7, #24]
 800fda8:	e009      	b.n	800fdbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	7fda      	ldrb	r2, [r3, #31]
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	7fdb      	ldrb	r3, [r3, #31]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d803      	bhi.n	800fdbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1cb      	bne.n	800fd6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fdd6:	6a3b      	ldr	r3, [r7, #32]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d008      	beq.n	800fdee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fddc:	69b9      	ldr	r1, [r7, #24]
 800fdde:	6a38      	ldr	r0, [r7, #32]
 800fde0:	f7ff ff0e 	bl	800fc00 <ip_reass_free_complete_datagram>
 800fde4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	4413      	add	r3, r2
 800fdec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	da02      	bge.n	800fdfc <ip_reass_remove_oldest_datagram+0xb4>
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	dcac      	bgt.n	800fd56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fdfc:	697b      	ldr	r3, [r7, #20]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3728      	adds	r7, #40	; 0x28
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	20000204 	.word	0x20000204

0800fe0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fe16:	2004      	movs	r0, #4
 800fe18:	f7f6 fec4 	bl	8006ba4 <memp_malloc>
 800fe1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d110      	bne.n	800fe46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff ff8e 	bl	800fd48 <ip_reass_remove_oldest_datagram>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	4293      	cmp	r3, r2
 800fe32:	dc03      	bgt.n	800fe3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fe34:	2004      	movs	r0, #4
 800fe36:	f7f6 feb5 	bl	8006ba4 <memp_malloc>
 800fe3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fe42:	2300      	movs	r3, #0
 800fe44:	e016      	b.n	800fe74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fe46:	2220      	movs	r2, #32
 800fe48:	2100      	movs	r1, #0
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f006 ff92 	bl	8016d74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	220f      	movs	r2, #15
 800fe54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fe56:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <ip_reass_enqueue_new_datagram+0x70>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fe5e:	4a07      	ldr	r2, [pc, #28]	; (800fe7c <ip_reass_enqueue_new_datagram+0x70>)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	3308      	adds	r3, #8
 800fe68:	2214      	movs	r2, #20
 800fe6a:	6879      	ldr	r1, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f006 ff73 	bl	8016d58 <memcpy>
  return ipr;
 800fe72:	68fb      	ldr	r3, [r7, #12]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20000204 	.word	0x20000204

0800fe80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fe8a:	4b10      	ldr	r3, [pc, #64]	; (800fecc <ip_reass_dequeue_datagram+0x4c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d104      	bne.n	800fe9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a0c      	ldr	r2, [pc, #48]	; (800fecc <ip_reass_dequeue_datagram+0x4c>)
 800fe9a:	6013      	str	r3, [r2, #0]
 800fe9c:	e00d      	b.n	800feba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d106      	bne.n	800feb2 <ip_reass_dequeue_datagram+0x32>
 800fea4:	4b0a      	ldr	r3, [pc, #40]	; (800fed0 <ip_reass_dequeue_datagram+0x50>)
 800fea6:	f240 1245 	movw	r2, #325	; 0x145
 800feaa:	490a      	ldr	r1, [pc, #40]	; (800fed4 <ip_reass_dequeue_datagram+0x54>)
 800feac:	480a      	ldr	r0, [pc, #40]	; (800fed8 <ip_reass_dequeue_datagram+0x58>)
 800feae:	f006 ff69 	bl	8016d84 <iprintf>
    prev->next = ipr->next;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	2004      	movs	r0, #4
 800febe:	f7f6 febd 	bl	8006c3c <memp_free>
}
 800fec2:	bf00      	nop
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	20000204 	.word	0x20000204
 800fed0:	0801a5e0 	.word	0x0801a5e0
 800fed4:	0801a6a8 	.word	0x0801a6a8
 800fed8:	0801a628 	.word	0x0801a628

0800fedc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08c      	sub	sp, #48	; 0x30
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fee8:	2300      	movs	r3, #0
 800feea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800feec:	2301      	movs	r3, #1
 800feee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	885b      	ldrh	r3, [r3, #2]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7f6 f9fb 	bl	80062f8 <lwip_htons>
 800ff02:	4603      	mov	r3, r0
 800ff04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	f003 030f 	and.w	r3, r3, #15
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ff14:	7e7b      	ldrb	r3, [r7, #25]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	8b7a      	ldrh	r2, [r7, #26]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d202      	bcs.n	800ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff22:	e135      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ff24:	7e7b      	ldrb	r3, [r7, #25]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	8b7a      	ldrh	r2, [r7, #26]
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	88db      	ldrh	r3, [r3, #6]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f6 f9df 	bl	80062f8 <lwip_htons>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	00db      	lsls	r3, r3, #3
 800ff44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	2200      	movs	r2, #0
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	2200      	movs	r2, #0
 800ff54:	705a      	strb	r2, [r3, #1]
 800ff56:	2200      	movs	r2, #0
 800ff58:	709a      	strb	r2, [r3, #2]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ff5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff60:	8afa      	ldrh	r2, [r7, #22]
 800ff62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ff64:	8afa      	ldrh	r2, [r7, #22]
 800ff66:	8b7b      	ldrh	r3, [r7, #26]
 800ff68:	4413      	add	r3, r2
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	88db      	ldrh	r3, [r3, #6]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	8afa      	ldrh	r2, [r7, #22]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d902      	bls.n	800ff82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff80:	e106      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	627b      	str	r3, [r7, #36]	; 0x24
 800ff88:	e068      	b.n	801005c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	889b      	ldrh	r3, [r3, #4]
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	889b      	ldrh	r3, [r3, #4]
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d235      	bcs.n	801000c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ffa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ffa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d020      	beq.n	800ffee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	889b      	ldrh	r3, [r3, #4]
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb4:	88db      	ldrh	r3, [r3, #6]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d307      	bcc.n	800ffcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ffbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbe:	88db      	ldrh	r3, [r3, #6]
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	889b      	ldrh	r3, [r3, #4]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d902      	bls.n	800ffd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ffcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd0:	e0de      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	88db      	ldrh	r3, [r3, #6]
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe0:	889b      	ldrh	r3, [r3, #4]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d03d      	beq.n	8010064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ffec:	e03a      	b.n	8010064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	889b      	ldrh	r3, [r3, #4]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d902      	bls.n	8010004 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fffe:	f04f 33ff 	mov.w	r3, #4294967295
 8010002:	e0c5      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	605a      	str	r2, [r3, #4]
      break;
 801000a:	e02b      	b.n	8010064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801000c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000e:	889b      	ldrh	r3, [r3, #4]
 8010010:	b29a      	uxth	r2, r3
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	889b      	ldrh	r3, [r3, #4]
 8010016:	b29b      	uxth	r3, r3
 8010018:	429a      	cmp	r2, r3
 801001a:	d102      	bne.n	8010022 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801001c:	f04f 33ff 	mov.w	r3, #4294967295
 8010020:	e0b6      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010024:	889b      	ldrh	r3, [r3, #4]
 8010026:	b29a      	uxth	r2, r3
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	88db      	ldrh	r3, [r3, #6]
 801002c:	b29b      	uxth	r3, r3
 801002e:	429a      	cmp	r2, r3
 8010030:	d202      	bcs.n	8010038 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	e0ab      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	2b00      	cmp	r3, #0
 801003c:	d009      	beq.n	8010052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801003e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010040:	88db      	ldrh	r3, [r3, #6]
 8010042:	b29a      	uxth	r2, r3
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	889b      	ldrh	r3, [r3, #4]
 8010048:	b29b      	uxth	r3, r3
 801004a:	429a      	cmp	r2, r3
 801004c:	d001      	beq.n	8010052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	2b00      	cmp	r3, #0
 8010060:	d193      	bne.n	800ff8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010062:	e000      	b.n	8010066 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010064:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	d12d      	bne.n	80100c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	2b00      	cmp	r3, #0
 8010070:	d01c      	beq.n	80100ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	88db      	ldrh	r3, [r3, #6]
 8010076:	b29a      	uxth	r2, r3
 8010078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007a:	889b      	ldrh	r3, [r3, #4]
 801007c:	b29b      	uxth	r3, r3
 801007e:	429a      	cmp	r2, r3
 8010080:	d906      	bls.n	8010090 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010082:	4b45      	ldr	r3, [pc, #276]	; (8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010084:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010088:	4944      	ldr	r1, [pc, #272]	; (801019c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801008a:	4845      	ldr	r0, [pc, #276]	; (80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801008c:	f006 fe7a 	bl	8016d84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	88db      	ldrh	r3, [r3, #6]
 801009a:	b29a      	uxth	r2, r3
 801009c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009e:	889b      	ldrh	r3, [r3, #4]
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d010      	beq.n	80100c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	623b      	str	r3, [r7, #32]
 80100aa:	e00d      	b.n	80100c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d006      	beq.n	80100c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80100b4:	4b38      	ldr	r3, [pc, #224]	; (8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80100b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80100ba:	493a      	ldr	r1, [pc, #232]	; (80101a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80100bc:	4838      	ldr	r0, [pc, #224]	; (80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80100be:	f006 fe61 	bl	8016d84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d105      	bne.n	80100da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	7f9b      	ldrb	r3, [r3, #30]
 80100d2:	f003 0301 	and.w	r3, r3, #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d059      	beq.n	801018e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d04f      	beq.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d006      	beq.n	80100f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	889b      	ldrh	r3, [r3, #4]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80100f6:	2300      	movs	r3, #0
 80100f8:	623b      	str	r3, [r7, #32]
 80100fa:	e041      	b.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010106:	e012      	b.n	801012e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801010e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010110:	88db      	ldrh	r3, [r3, #6]
 8010112:	b29a      	uxth	r2, r3
 8010114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010116:	889b      	ldrh	r3, [r3, #4]
 8010118:	b29b      	uxth	r3, r3
 801011a:	429a      	cmp	r2, r3
 801011c:	d002      	beq.n	8010124 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	623b      	str	r3, [r7, #32]
            break;
 8010122:	e007      	b.n	8010134 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1e9      	bne.n	8010108 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d022      	beq.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010142:	4b15      	ldr	r3, [pc, #84]	; (8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010144:	f240 12df 	movw	r2, #479	; 0x1df
 8010148:	4917      	ldr	r1, [pc, #92]	; (80101a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801014a:	4815      	ldr	r0, [pc, #84]	; (80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801014c:	f006 fe1a 	bl	8016d84 <iprintf>
          LWIP_ASSERT("sanity check",
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010158:	429a      	cmp	r2, r3
 801015a:	d106      	bne.n	801016a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801015c:	4b0e      	ldr	r3, [pc, #56]	; (8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801015e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010162:	4911      	ldr	r1, [pc, #68]	; (80101a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010164:	480e      	ldr	r0, [pc, #56]	; (80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010166:	f006 fe0d 	bl	8016d84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801016a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d006      	beq.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010172:	4b09      	ldr	r3, [pc, #36]	; (8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010174:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010178:	490c      	ldr	r1, [pc, #48]	; (80101ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801017a:	4809      	ldr	r0, [pc, #36]	; (80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801017c:	f006 fe02 	bl	8016d84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	2b00      	cmp	r3, #0
 8010184:	bf14      	ite	ne
 8010186:	2301      	movne	r3, #1
 8010188:	2300      	moveq	r3, #0
 801018a:	b2db      	uxtb	r3, r3
 801018c:	e000      	b.n	8010190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3730      	adds	r7, #48	; 0x30
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0801a5e0 	.word	0x0801a5e0
 801019c:	0801a6c4 	.word	0x0801a6c4
 80101a0:	0801a628 	.word	0x0801a628
 80101a4:	0801a6e4 	.word	0x0801a6e4
 80101a8:	0801a71c 	.word	0x0801a71c
 80101ac:	0801a72c 	.word	0x0801a72c

080101b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08e      	sub	sp, #56	; 0x38
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80101be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	f003 030f 	and.w	r3, r3, #15
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b14      	cmp	r3, #20
 80101ce:	f040 8167 	bne.w	80104a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	88db      	ldrh	r3, [r3, #6]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	4618      	mov	r0, r3
 80101da:	f7f6 f88d 	bl	80062f8 <lwip_htons>
 80101de:	4603      	mov	r3, r0
 80101e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	00db      	lsls	r3, r3, #3
 80101e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	885b      	ldrh	r3, [r3, #2]
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7f6 f881 	bl	80062f8 <lwip_htons>
 80101f6:	4603      	mov	r3, r0
 80101f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80101fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	f003 030f 	and.w	r3, r3, #15
 8010202:	b2db      	uxtb	r3, r3
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801020a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801020e:	b29b      	uxth	r3, r3
 8010210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010212:	429a      	cmp	r2, r3
 8010214:	f0c0 8146 	bcc.w	80104a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801021c:	b29b      	uxth	r3, r3
 801021e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7f7 fba3 	bl	8007970 <pbuf_clen>
 801022a:	4603      	mov	r3, r0
 801022c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801022e:	4b9f      	ldr	r3, [pc, #636]	; (80104ac <ip4_reass+0x2fc>)
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	461a      	mov	r2, r3
 8010234:	8c3b      	ldrh	r3, [r7, #32]
 8010236:	4413      	add	r3, r2
 8010238:	2b0a      	cmp	r3, #10
 801023a:	dd10      	ble.n	801025e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801023c:	8c3b      	ldrh	r3, [r7, #32]
 801023e:	4619      	mov	r1, r3
 8010240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010242:	f7ff fd81 	bl	800fd48 <ip_reass_remove_oldest_datagram>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 812d 	beq.w	80104a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801024e:	4b97      	ldr	r3, [pc, #604]	; (80104ac <ip4_reass+0x2fc>)
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	8c3b      	ldrh	r3, [r7, #32]
 8010256:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010258:	2b0a      	cmp	r3, #10
 801025a:	f300 8125 	bgt.w	80104a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801025e:	4b94      	ldr	r3, [pc, #592]	; (80104b0 <ip4_reass+0x300>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	633b      	str	r3, [r7, #48]	; 0x30
 8010264:	e015      	b.n	8010292 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	695a      	ldr	r2, [r3, #20]
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	429a      	cmp	r2, r3
 8010270:	d10c      	bne.n	801028c <ip4_reass+0xdc>
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	699a      	ldr	r2, [r3, #24]
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	429a      	cmp	r2, r3
 801027c:	d106      	bne.n	801028c <ip4_reass+0xdc>
 801027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010280:	899a      	ldrh	r2, [r3, #12]
 8010282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010284:	889b      	ldrh	r3, [r3, #4]
 8010286:	b29b      	uxth	r3, r3
 8010288:	429a      	cmp	r2, r3
 801028a:	d006      	beq.n	801029a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	633b      	str	r3, [r7, #48]	; 0x30
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	2b00      	cmp	r3, #0
 8010296:	d1e6      	bne.n	8010266 <ip4_reass+0xb6>
 8010298:	e000      	b.n	801029c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801029a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d109      	bne.n	80102b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80102a2:	8c3b      	ldrh	r3, [r7, #32]
 80102a4:	4619      	mov	r1, r3
 80102a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a8:	f7ff fdb0 	bl	800fe0c <ip_reass_enqueue_new_datagram>
 80102ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d11c      	bne.n	80102ee <ip4_reass+0x13e>
      goto nullreturn;
 80102b4:	e109      	b.n	80104ca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	88db      	ldrh	r3, [r3, #6]
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	4618      	mov	r0, r3
 80102be:	f7f6 f81b 	bl	80062f8 <lwip_htons>
 80102c2:	4603      	mov	r3, r0
 80102c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d110      	bne.n	80102ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	89db      	ldrh	r3, [r3, #14]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7f6 f811 	bl	80062f8 <lwip_htons>
 80102d6:	4603      	mov	r3, r0
 80102d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d006      	beq.n	80102ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80102e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e2:	3308      	adds	r3, #8
 80102e4:	2214      	movs	r2, #20
 80102e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102e8:	4618      	mov	r0, r3
 80102ea:	f006 fd35 	bl	8016d58 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80102ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f0:	88db      	ldrh	r3, [r3, #6]
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	f003 0320 	and.w	r3, r3, #32
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bf0c      	ite	eq
 80102fc:	2301      	moveq	r3, #1
 80102fe:	2300      	movne	r3, #0
 8010300:	b2db      	uxtb	r3, r3
 8010302:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d00e      	beq.n	8010328 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801030a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801030c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801030e:	4413      	add	r3, r2
 8010310:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010312:	8b7a      	ldrh	r2, [r7, #26]
 8010314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010316:	429a      	cmp	r2, r3
 8010318:	f0c0 80a0 	bcc.w	801045c <ip4_reass+0x2ac>
 801031c:	8b7b      	ldrh	r3, [r7, #26]
 801031e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010322:	4293      	cmp	r3, r2
 8010324:	f200 809a 	bhi.w	801045c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010328:	69fa      	ldr	r2, [r7, #28]
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801032e:	f7ff fdd5 	bl	800fedc <ip_reass_chain_frag_into_datagram_and_validate>
 8010332:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033a:	f000 8091 	beq.w	8010460 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801033e:	4b5b      	ldr	r3, [pc, #364]	; (80104ac <ip4_reass+0x2fc>)
 8010340:	881a      	ldrh	r2, [r3, #0]
 8010342:	8c3b      	ldrh	r3, [r7, #32]
 8010344:	4413      	add	r3, r2
 8010346:	b29a      	uxth	r2, r3
 8010348:	4b58      	ldr	r3, [pc, #352]	; (80104ac <ip4_reass+0x2fc>)
 801034a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00d      	beq.n	801036e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010352:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010356:	4413      	add	r3, r2
 8010358:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035c:	8a7a      	ldrh	r2, [r7, #18]
 801035e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010362:	7f9b      	ldrb	r3, [r3, #30]
 8010364:	f043 0301 	orr.w	r3, r3, #1
 8010368:	b2da      	uxtb	r2, r3
 801036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d171      	bne.n	8010458 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	8b9b      	ldrh	r3, [r3, #28]
 8010378:	3314      	adds	r3, #20
 801037a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010390:	3308      	adds	r3, #8
 8010392:	2214      	movs	r2, #20
 8010394:	4619      	mov	r1, r3
 8010396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010398:	f006 fcde 	bl	8016d58 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801039c:	8a3b      	ldrh	r3, [r7, #16]
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f5 ffaa 	bl	80062f8 <lwip_htons>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	2200      	movs	r2, #0
 80103b0:	719a      	strb	r2, [r3, #6]
 80103b2:	2200      	movs	r2, #0
 80103b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80103b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b8:	2200      	movs	r2, #0
 80103ba:	729a      	strb	r2, [r3, #10]
 80103bc:	2200      	movs	r2, #0
 80103be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80103c6:	e00d      	b.n	80103e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80103c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80103ce:	2114      	movs	r1, #20
 80103d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103d2:	f7f7 f9bf 	bl	8007754 <pbuf_remove_header>
      pbuf_cat(p, r);
 80103d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7f7 fb03 	bl	80079e4 <pbuf_cat>
      r = iprh->next_pbuf;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1ee      	bne.n	80103c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80103ea:	4b31      	ldr	r3, [pc, #196]	; (80104b0 <ip4_reass+0x300>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d102      	bne.n	80103fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80103f4:	2300      	movs	r3, #0
 80103f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103f8:	e010      	b.n	801041c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80103fa:	4b2d      	ldr	r3, [pc, #180]	; (80104b0 <ip4_reass+0x300>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010400:	e007      	b.n	8010412 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010408:	429a      	cmp	r2, r3
 801040a:	d006      	beq.n	801041a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1f4      	bne.n	8010402 <ip4_reass+0x252>
 8010418:	e000      	b.n	801041c <ip4_reass+0x26c>
          break;
 801041a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801041c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801041e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010420:	f7ff fd2e 	bl	800fe80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7f7 faa3 	bl	8007970 <pbuf_clen>
 801042a:	4603      	mov	r3, r0
 801042c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801042e:	4b1f      	ldr	r3, [pc, #124]	; (80104ac <ip4_reass+0x2fc>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	8c3a      	ldrh	r2, [r7, #32]
 8010434:	429a      	cmp	r2, r3
 8010436:	d906      	bls.n	8010446 <ip4_reass+0x296>
 8010438:	4b1e      	ldr	r3, [pc, #120]	; (80104b4 <ip4_reass+0x304>)
 801043a:	f240 229b 	movw	r2, #667	; 0x29b
 801043e:	491e      	ldr	r1, [pc, #120]	; (80104b8 <ip4_reass+0x308>)
 8010440:	481e      	ldr	r0, [pc, #120]	; (80104bc <ip4_reass+0x30c>)
 8010442:	f006 fc9f 	bl	8016d84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010446:	4b19      	ldr	r3, [pc, #100]	; (80104ac <ip4_reass+0x2fc>)
 8010448:	881a      	ldrh	r2, [r3, #0]
 801044a:	8c3b      	ldrh	r3, [r7, #32]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	b29a      	uxth	r2, r3
 8010450:	4b16      	ldr	r3, [pc, #88]	; (80104ac <ip4_reass+0x2fc>)
 8010452:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	e03c      	b.n	80104d2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010458:	2300      	movs	r3, #0
 801045a:	e03a      	b.n	80104d2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801045c:	bf00      	nop
 801045e:	e000      	b.n	8010462 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010460:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <ip4_reass+0x2c6>
 8010468:	4b12      	ldr	r3, [pc, #72]	; (80104b4 <ip4_reass+0x304>)
 801046a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801046e:	4914      	ldr	r1, [pc, #80]	; (80104c0 <ip4_reass+0x310>)
 8010470:	4812      	ldr	r0, [pc, #72]	; (80104bc <ip4_reass+0x30c>)
 8010472:	f006 fc87 	bl	8016d84 <iprintf>
  if (ipr->p == NULL) {
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d124      	bne.n	80104c8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801047e:	4b0c      	ldr	r3, [pc, #48]	; (80104b0 <ip4_reass+0x300>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010484:	429a      	cmp	r2, r3
 8010486:	d006      	beq.n	8010496 <ip4_reass+0x2e6>
 8010488:	4b0a      	ldr	r3, [pc, #40]	; (80104b4 <ip4_reass+0x304>)
 801048a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801048e:	490d      	ldr	r1, [pc, #52]	; (80104c4 <ip4_reass+0x314>)
 8010490:	480a      	ldr	r0, [pc, #40]	; (80104bc <ip4_reass+0x30c>)
 8010492:	f006 fc77 	bl	8016d84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010496:	2100      	movs	r1, #0
 8010498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801049a:	f7ff fcf1 	bl	800fe80 <ip_reass_dequeue_datagram>
 801049e:	e014      	b.n	80104ca <ip4_reass+0x31a>
    goto nullreturn;
 80104a0:	bf00      	nop
 80104a2:	e012      	b.n	80104ca <ip4_reass+0x31a>
    goto nullreturn;
 80104a4:	bf00      	nop
 80104a6:	e010      	b.n	80104ca <ip4_reass+0x31a>
      goto nullreturn;
 80104a8:	bf00      	nop
 80104aa:	e00e      	b.n	80104ca <ip4_reass+0x31a>
 80104ac:	20000208 	.word	0x20000208
 80104b0:	20000204 	.word	0x20000204
 80104b4:	0801a5e0 	.word	0x0801a5e0
 80104b8:	0801a750 	.word	0x0801a750
 80104bc:	0801a628 	.word	0x0801a628
 80104c0:	0801a76c 	.word	0x0801a76c
 80104c4:	0801a778 	.word	0x0801a778
  }

nullreturn:
 80104c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7f7 f9c8 	bl	8007860 <pbuf_free>
  return NULL;
 80104d0:	2300      	movs	r3, #0
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3738      	adds	r7, #56	; 0x38
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop

080104dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80104e0:	2005      	movs	r0, #5
 80104e2:	f7f6 fb5f 	bl	8006ba4 <memp_malloc>
 80104e6:	4603      	mov	r3, r0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	bd80      	pop	{r7, pc}

080104ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d106      	bne.n	8010508 <ip_frag_free_pbuf_custom_ref+0x1c>
 80104fa:	4b07      	ldr	r3, [pc, #28]	; (8010518 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80104fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010500:	4906      	ldr	r1, [pc, #24]	; (801051c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010502:	4807      	ldr	r0, [pc, #28]	; (8010520 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010504:	f006 fc3e 	bl	8016d84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	2005      	movs	r0, #5
 801050c:	f7f6 fb96 	bl	8006c3c <memp_free>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	0801a5e0 	.word	0x0801a5e0
 801051c:	0801a798 	.word	0x0801a798
 8010520:	0801a628 	.word	0x0801a628

08010524 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <ipfrag_free_pbuf_custom+0x20>
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <ipfrag_free_pbuf_custom+0x58>)
 8010538:	f240 22ce 	movw	r2, #718	; 0x2ce
 801053c:	4910      	ldr	r1, [pc, #64]	; (8010580 <ipfrag_free_pbuf_custom+0x5c>)
 801053e:	4811      	ldr	r0, [pc, #68]	; (8010584 <ipfrag_free_pbuf_custom+0x60>)
 8010540:	f006 fc20 	bl	8016d84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	429a      	cmp	r2, r3
 801054a:	d006      	beq.n	801055a <ipfrag_free_pbuf_custom+0x36>
 801054c:	4b0b      	ldr	r3, [pc, #44]	; (801057c <ipfrag_free_pbuf_custom+0x58>)
 801054e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010552:	490d      	ldr	r1, [pc, #52]	; (8010588 <ipfrag_free_pbuf_custom+0x64>)
 8010554:	480b      	ldr	r0, [pc, #44]	; (8010584 <ipfrag_free_pbuf_custom+0x60>)
 8010556:	f006 fc15 	bl	8016d84 <iprintf>
  if (pcr->original != NULL) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	695b      	ldr	r3, [r3, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d004      	beq.n	801056c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	695b      	ldr	r3, [r3, #20]
 8010566:	4618      	mov	r0, r3
 8010568:	f7f7 f97a 	bl	8007860 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f7ff ffbd 	bl	80104ec <ip_frag_free_pbuf_custom_ref>
}
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	0801a5e0 	.word	0x0801a5e0
 8010580:	0801a7a4 	.word	0x0801a7a4
 8010584:	0801a628 	.word	0x0801a628
 8010588:	0801a7b0 	.word	0x0801a7b0

0801058c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b094      	sub	sp, #80	; 0x50
 8010590:	af02      	add	r7, sp, #8
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80105a2:	3b14      	subs	r3, #20
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	da00      	bge.n	80105aa <ip4_frag+0x1e>
 80105a8:	3307      	adds	r3, #7
 80105aa:	10db      	asrs	r3, r3, #3
 80105ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80105ae:	2314      	movs	r3, #20
 80105b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80105b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	f003 030f 	and.w	r3, r3, #15
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b14      	cmp	r3, #20
 80105cc:	d002      	beq.n	80105d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80105ce:	f06f 0305 	mvn.w	r3, #5
 80105d2:	e110      	b.n	80107f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	895b      	ldrh	r3, [r3, #10]
 80105d8:	2b13      	cmp	r3, #19
 80105da:	d809      	bhi.n	80105f0 <ip4_frag+0x64>
 80105dc:	4b88      	ldr	r3, [pc, #544]	; (8010800 <ip4_frag+0x274>)
 80105de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80105e2:	4988      	ldr	r1, [pc, #544]	; (8010804 <ip4_frag+0x278>)
 80105e4:	4888      	ldr	r0, [pc, #544]	; (8010808 <ip4_frag+0x27c>)
 80105e6:	f006 fbcd 	bl	8016d84 <iprintf>
 80105ea:	f06f 0305 	mvn.w	r3, #5
 80105ee:	e102      	b.n	80107f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80105f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f2:	88db      	ldrh	r3, [r3, #6]
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7f5 fe7e 	bl	80062f8 <lwip_htons>
 80105fc:	4603      	mov	r3, r0
 80105fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010606:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801060a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801060c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	891b      	ldrh	r3, [r3, #8]
 8010616:	3b14      	subs	r3, #20
 8010618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801061c:	e0e1      	b.n	80107e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801061e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010620:	00db      	lsls	r3, r3, #3
 8010622:	b29b      	uxth	r3, r3
 8010624:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010628:	4293      	cmp	r3, r2
 801062a:	bf28      	it	cs
 801062c:	4613      	movcs	r3, r2
 801062e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010630:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010634:	2114      	movs	r1, #20
 8010636:	200e      	movs	r0, #14
 8010638:	f7f6 fe2e 	bl	8007298 <pbuf_alloc>
 801063c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 80d5 	beq.w	80107f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010648:	895b      	ldrh	r3, [r3, #10]
 801064a:	2b13      	cmp	r3, #19
 801064c:	d806      	bhi.n	801065c <ip4_frag+0xd0>
 801064e:	4b6c      	ldr	r3, [pc, #432]	; (8010800 <ip4_frag+0x274>)
 8010650:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010654:	496d      	ldr	r1, [pc, #436]	; (801080c <ip4_frag+0x280>)
 8010656:	486c      	ldr	r0, [pc, #432]	; (8010808 <ip4_frag+0x27c>)
 8010658:	f006 fb94 	bl	8016d84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	2214      	movs	r2, #20
 8010662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010664:	4618      	mov	r0, r3
 8010666:	f006 fb77 	bl	8016d58 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010672:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010676:	e064      	b.n	8010742 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	895a      	ldrh	r2, [r3, #10]
 801067c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	895b      	ldrh	r3, [r3, #10]
 8010686:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010688:	429a      	cmp	r2, r3
 801068a:	d906      	bls.n	801069a <ip4_frag+0x10e>
 801068c:	4b5c      	ldr	r3, [pc, #368]	; (8010800 <ip4_frag+0x274>)
 801068e:	f240 322d 	movw	r2, #813	; 0x32d
 8010692:	495f      	ldr	r1, [pc, #380]	; (8010810 <ip4_frag+0x284>)
 8010694:	485c      	ldr	r0, [pc, #368]	; (8010808 <ip4_frag+0x27c>)
 8010696:	f006 fb75 	bl	8016d84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801069a:	8bfa      	ldrh	r2, [r7, #30]
 801069c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80106a0:	4293      	cmp	r3, r2
 80106a2:	bf28      	it	cs
 80106a4:	4613      	movcs	r3, r2
 80106a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80106aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d105      	bne.n	80106be <ip4_frag+0x132>
        poff = 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	60fb      	str	r3, [r7, #12]
        continue;
 80106bc:	e041      	b.n	8010742 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80106be:	f7ff ff0d 	bl	80104dc <ip_frag_alloc_pbuf_custom_ref>
 80106c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80106ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106cc:	f7f7 f8c8 	bl	8007860 <pbuf_free>
        goto memerr;
 80106d0:	e08f      	b.n	80107f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80106d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80106d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106da:	4413      	add	r3, r2
 80106dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80106e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80106e4:	9201      	str	r2, [sp, #4]
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	4603      	mov	r3, r0
 80106ea:	2241      	movs	r2, #65	; 0x41
 80106ec:	2000      	movs	r0, #0
 80106ee:	f7f6 fefd 	bl	80074ec <pbuf_alloced_custom>
 80106f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d106      	bne.n	8010708 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80106fa:	69b8      	ldr	r0, [r7, #24]
 80106fc:	f7ff fef6 	bl	80104ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010702:	f7f7 f8ad 	bl	8007860 <pbuf_free>
        goto memerr;
 8010706:	e074      	b.n	80107f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f7f7 f949 	bl	80079a0 <pbuf_ref>
      pcr->original = p;
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	4a3f      	ldr	r2, [pc, #252]	; (8010814 <ip4_frag+0x288>)
 8010718:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801071a:	6979      	ldr	r1, [r7, #20]
 801071c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801071e:	f7f7 f961 	bl	80079e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010722:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010730:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010734:	2b00      	cmp	r3, #0
 8010736:	d004      	beq.n	8010742 <ip4_frag+0x1b6>
        poff = 0;
 8010738:	2300      	movs	r3, #0
 801073a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010742:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010746:	2b00      	cmp	r3, #0
 8010748:	d196      	bne.n	8010678 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801074a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801074c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010750:	4413      	add	r3, r2
 8010752:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010758:	f1a3 0213 	sub.w	r2, r3, #19
 801075c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010760:	429a      	cmp	r2, r3
 8010762:	bfcc      	ite	gt
 8010764:	2301      	movgt	r3, #1
 8010766:	2300      	movle	r3, #0
 8010768:	b2db      	uxtb	r3, r3
 801076a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801076c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010774:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <ip4_frag+0x1f6>
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d003      	beq.n	801078a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010782:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010788:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801078a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801078c:	4618      	mov	r0, r3
 801078e:	f7f5 fdb3 	bl	80062f8 <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	461a      	mov	r2, r3
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801079a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801079c:	3314      	adds	r3, #20
 801079e:	b29b      	uxth	r3, r3
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7f5 fda9 	bl	80062f8 <lwip_htons>
 80107a6:	4603      	mov	r3, r0
 80107a8:	461a      	mov	r2, r3
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	2200      	movs	r2, #0
 80107b2:	729a      	strb	r2, [r3, #10]
 80107b4:	2200      	movs	r2, #0
 80107b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	695b      	ldr	r3, [r3, #20]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107c0:	68b8      	ldr	r0, [r7, #8]
 80107c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80107c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107c6:	f7f7 f84b 	bl	8007860 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80107ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80107d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80107da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107dc:	4413      	add	r3, r2
 80107de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80107e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f47f af19 	bne.w	801061e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	e002      	b.n	80107f6 <ip4_frag+0x26a>
      goto memerr;
 80107f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80107f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3748      	adds	r7, #72	; 0x48
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	0801a5e0 	.word	0x0801a5e0
 8010804:	0801a7bc 	.word	0x0801a7bc
 8010808:	0801a628 	.word	0x0801a628
 801080c:	0801a7d8 	.word	0x0801a7d8
 8010810:	0801a7f8 	.word	0x0801a7f8
 8010814:	08010525 	.word	0x08010525

08010818 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b086      	sub	sp, #24
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010822:	230e      	movs	r3, #14
 8010824:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	895b      	ldrh	r3, [r3, #10]
 801082a:	2b0e      	cmp	r3, #14
 801082c:	d96e      	bls.n	801090c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7bdb      	ldrb	r3, [r3, #15]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801083c:	3301      	adds	r3, #1
 801083e:	b2da      	uxtb	r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	7b1a      	ldrb	r2, [r3, #12]
 801084e:	7b5b      	ldrb	r3, [r3, #13]
 8010850:	021b      	lsls	r3, r3, #8
 8010852:	4313      	orrs	r3, r2
 8010854:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d023      	beq.n	80108aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d10f      	bne.n	801088a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	785b      	ldrb	r3, [r3, #1]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d11b      	bne.n	80108aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010876:	2b5e      	cmp	r3, #94	; 0x5e
 8010878:	d117      	bne.n	80108aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	7b5b      	ldrb	r3, [r3, #13]
 801087e:	f043 0310 	orr.w	r3, r3, #16
 8010882:	b2da      	uxtb	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	735a      	strb	r2, [r3, #13]
 8010888:	e00f      	b.n	80108aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2206      	movs	r2, #6
 801088e:	4928      	ldr	r1, [pc, #160]	; (8010930 <ethernet_input+0x118>)
 8010890:	4618      	mov	r0, r3
 8010892:	f006 fa53 	bl	8016d3c <memcmp>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	7b5b      	ldrb	r3, [r3, #13]
 80108a0:	f043 0308 	orr.w	r3, r3, #8
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80108aa:	89fb      	ldrh	r3, [r7, #14]
 80108ac:	2b08      	cmp	r3, #8
 80108ae:	d003      	beq.n	80108b8 <ethernet_input+0xa0>
 80108b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80108b4:	d014      	beq.n	80108e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80108b6:	e032      	b.n	801091e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108be:	f003 0308 	and.w	r3, r3, #8
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d024      	beq.n	8010910 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80108c6:	8afb      	ldrh	r3, [r7, #22]
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7f6 ff42 	bl	8007754 <pbuf_remove_header>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d11e      	bne.n	8010914 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80108d6:	6839      	ldr	r1, [r7, #0]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f7fe ff27 	bl	800f72c <ip4_input>
      break;
 80108de:	e013      	b.n	8010908 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108e6:	f003 0308 	and.w	r3, r3, #8
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d014      	beq.n	8010918 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80108ee:	8afb      	ldrh	r3, [r7, #22]
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7f6 ff2e 	bl	8007754 <pbuf_remove_header>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10e      	bne.n	801091c <ethernet_input+0x104>
        etharp_input(p, netif);
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f7fe f8c7 	bl	800ea94 <etharp_input>
      break;
 8010906:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010908:	2300      	movs	r3, #0
 801090a:	e00c      	b.n	8010926 <ethernet_input+0x10e>
    goto free_and_return;
 801090c:	bf00      	nop
 801090e:	e006      	b.n	801091e <ethernet_input+0x106>
        goto free_and_return;
 8010910:	bf00      	nop
 8010912:	e004      	b.n	801091e <ethernet_input+0x106>
        goto free_and_return;
 8010914:	bf00      	nop
 8010916:	e002      	b.n	801091e <ethernet_input+0x106>
        goto free_and_return;
 8010918:	bf00      	nop
 801091a:	e000      	b.n	801091e <ethernet_input+0x106>
        goto free_and_return;
 801091c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f7f6 ff9e 	bl	8007860 <pbuf_free>
  return ERR_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3718      	adds	r7, #24
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	0801aa14 	.word	0x0801aa14

08010934 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010942:	8c3b      	ldrh	r3, [r7, #32]
 8010944:	4618      	mov	r0, r3
 8010946:	f7f5 fcd7 	bl	80062f8 <lwip_htons>
 801094a:	4603      	mov	r3, r0
 801094c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801094e:	210e      	movs	r1, #14
 8010950:	68b8      	ldr	r0, [r7, #8]
 8010952:	f7f6 feef 	bl	8007734 <pbuf_add_header>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d125      	bne.n	80109a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	8afa      	ldrh	r2, [r7, #22]
 8010966:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	2206      	movs	r2, #6
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	4618      	mov	r0, r3
 8010970:	f006 f9f2 	bl	8016d58 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	3306      	adds	r3, #6
 8010978:	2206      	movs	r2, #6
 801097a:	6879      	ldr	r1, [r7, #4]
 801097c:	4618      	mov	r0, r3
 801097e:	f006 f9eb 	bl	8016d58 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010988:	2b06      	cmp	r3, #6
 801098a:	d006      	beq.n	801099a <ethernet_output+0x66>
 801098c:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <ethernet_output+0x84>)
 801098e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010992:	490a      	ldr	r1, [pc, #40]	; (80109bc <ethernet_output+0x88>)
 8010994:	480a      	ldr	r0, [pc, #40]	; (80109c0 <ethernet_output+0x8c>)
 8010996:	f006 f9f5 	bl	8016d84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	68b9      	ldr	r1, [r7, #8]
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	4798      	blx	r3
 80109a4:	4603      	mov	r3, r0
 80109a6:	e002      	b.n	80109ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80109a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80109aa:	f06f 0301 	mvn.w	r3, #1
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3718      	adds	r7, #24
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	0801a808 	.word	0x0801a808
 80109bc:	0801a840 	.word	0x0801a840
 80109c0:	0801a874 	.word	0x0801a874

080109c4 <tcp_server_init>:
  * @brief  Initializes the tcp  server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_server_pcb = tcp_new();
 80109ca:	f7f8 fd91 	bl	80094f0 <tcp_new>
 80109ce:	4603      	mov	r3, r0
 80109d0:	4a19      	ldr	r2, [pc, #100]	; (8010a38 <tcp_server_init+0x74>)
 80109d2:	6013      	str	r3, [r2, #0]

  if (tcp_server_pcb != NULL)
 80109d4:	4b18      	ldr	r3, [pc, #96]	; (8010a38 <tcp_server_init+0x74>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d025      	beq.n	8010a28 <tcp_server_init+0x64>
  {
    err_t err;
    ip4_addr_t ipAddress;
    IP4_ADDR(&ipAddress, 192, 168, 100, 1);
 80109dc:	4b17      	ldr	r3, [pc, #92]	; (8010a3c <tcp_server_init+0x78>)
 80109de:	603b      	str	r3, [r7, #0]
    uint16_t port = 8000;
 80109e0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80109e4:	80fb      	strh	r3, [r7, #6]

    /* bind _pcb to port 7 ( protocol) */
    //err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 7);

    err = tcp_bind(tcp_server_pcb, &ipAddress, port);
 80109e6:	4b14      	ldr	r3, [pc, #80]	; (8010a38 <tcp_server_init+0x74>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	88fa      	ldrh	r2, [r7, #6]
 80109ec:	4639      	mov	r1, r7
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7f7 fcda 	bl	80083a8 <tcp_bind>
 80109f4:	4603      	mov	r3, r0
 80109f6:	717b      	strb	r3, [r7, #5]

    if (err == ERR_OK)
 80109f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10f      	bne.n	8010a20 <tcp_server_init+0x5c>
    {
      /* start tcp listening for _pcb */
      tcp_server_pcb = tcp_listen(tcp_server_pcb);
 8010a00:	4b0d      	ldr	r3, [pc, #52]	; (8010a38 <tcp_server_init+0x74>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	21ff      	movs	r1, #255	; 0xff
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7f7 fd86 	bl	8008518 <tcp_listen_with_backlog>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	4a0a      	ldr	r2, [pc, #40]	; (8010a38 <tcp_server_init+0x74>)
 8010a10:	6013      	str	r3, [r2, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_server_pcb, tcp_server_accept);
 8010a12:	4b09      	ldr	r3, [pc, #36]	; (8010a38 <tcp_server_init+0x74>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	490a      	ldr	r1, [pc, #40]	; (8010a40 <tcp_server_init+0x7c>)
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7f8 fde9 	bl	80095f0 <tcp_accept>
  }
  else
  {
    printf("Can not create new pcb\n");
  }
}
 8010a1e:	e006      	b.n	8010a2e <tcp_server_init+0x6a>
      printf("Can not bind pcb\n");
 8010a20:	4808      	ldr	r0, [pc, #32]	; (8010a44 <tcp_server_init+0x80>)
 8010a22:	f006 fa35 	bl	8016e90 <puts>
}
 8010a26:	e002      	b.n	8010a2e <tcp_server_init+0x6a>
    printf("Can not create new pcb\n");
 8010a28:	4807      	ldr	r0, [pc, #28]	; (8010a48 <tcp_server_init+0x84>)
 8010a2a:	f006 fa31 	bl	8016e90 <puts>
}
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	2000020c 	.word	0x2000020c
 8010a3c:	0164a8c0 	.word	0x0164a8c0
 8010a40:	08010a4d 	.word	0x08010a4d
 8010a44:	0801a89c 	.word	0x0801a89c
 8010a48:	0801a8b0 	.word	0x0801a8b0

08010a4c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	4613      	mov	r3, r2
 8010a58:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8010a5a:	2101      	movs	r1, #1
 8010a5c:	68b8      	ldr	r0, [r7, #8]
 8010a5e:	f7f8 fb55 	bl	800910c <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8010a62:	200c      	movs	r0, #12
 8010a64:	f7f5 ff30 	bl	80068c8 <mem_malloc>
 8010a68:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d01c      	beq.n	8010aaa <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	2201      	movs	r2, #1
 8010a74:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8010a82:	6939      	ldr	r1, [r7, #16]
 8010a84:	68b8      	ldr	r0, [r7, #8]
 8010a86:	f7f8 fd3b 	bl	8009500 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8010a8a:	490c      	ldr	r1, [pc, #48]	; (8010abc <tcp_server_accept+0x70>)
 8010a8c:	68b8      	ldr	r0, [r7, #8]
 8010a8e:	f7f8 fd49 	bl	8009524 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8010a92:	490b      	ldr	r1, [pc, #44]	; (8010ac0 <tcp_server_accept+0x74>)
 8010a94:	68b8      	ldr	r0, [r7, #8]
 8010a96:	f7f8 fd89 	bl	80095ac <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	4909      	ldr	r1, [pc, #36]	; (8010ac4 <tcp_server_accept+0x78>)
 8010a9e:	68b8      	ldr	r0, [r7, #8]
 8010aa0:	f7f8 fdbe 	bl	8009620 <tcp_poll>

    ret_err = ERR_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	75fb      	strb	r3, [r7, #23]
 8010aa8:	e001      	b.n	8010aae <tcp_server_accept+0x62>
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
 8010aaa:	23ff      	movs	r3, #255	; 0xff
 8010aac:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8010aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	08010ac9 	.word	0x08010ac9
 8010ac0:	08010bd9 	.word	0x08010bd9
 8010ac4:	08010bfd 	.word	0x08010bfd

08010ac8 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d105      	bne.n	8010ae8 <tcp_server_recv+0x20>
 8010adc:	4b3a      	ldr	r3, [pc, #232]	; (8010bc8 <tcp_server_recv+0x100>)
 8010ade:	227b      	movs	r2, #123	; 0x7b
 8010ae0:	493a      	ldr	r1, [pc, #232]	; (8010bcc <tcp_server_recv+0x104>)
 8010ae2:	483b      	ldr	r0, [pc, #236]	; (8010bd0 <tcp_server_recv+0x108>)
 8010ae4:	f006 f94e 	bl	8016d84 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d116      	bne.n	8010b20 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	2203      	movs	r2, #3
 8010af6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d104      	bne.n	8010b0a <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8010b00:	69b9      	ldr	r1, [r7, #24]
 8010b02:	68b8      	ldr	r0, [r7, #8]
 8010b04:	f000 f932 	bl	8010d6c <tcp_server_connection_close>
 8010b08:	e007      	b.n	8010b1a <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8010b0a:	4932      	ldr	r1, [pc, #200]	; (8010bd4 <tcp_server_recv+0x10c>)
 8010b0c:	68b8      	ldr	r0, [r7, #8]
 8010b0e:	f7f8 fd2b 	bl	8009568 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8010b12:	69b9      	ldr	r1, [r7, #24]
 8010b14:	68b8      	ldr	r0, [r7, #8]
 8010b16:	f000 f8b9 	bl	8010c8c <tcp_server_send>
    }
    ret_err = ERR_OK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	77fb      	strb	r3, [r7, #31]
 8010b1e:	e04c      	b.n	8010bba <tcp_server_recv+0xf2>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8010b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00b      	beq.n	8010b40 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d005      	beq.n	8010b3a <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	2200      	movs	r2, #0
 8010b32:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7f6 fe93 	bl	8007860 <pbuf_free>
    }
    ret_err = err;
 8010b3a:	78fb      	ldrb	r3, [r7, #3]
 8010b3c:	77fb      	strb	r3, [r7, #31]
 8010b3e:	e03c      	b.n	8010bba <tcp_server_recv+0xf2>
  }
  else if(es->state == ES_ACCEPTED)
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d110      	bne.n	8010b6a <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	2202      	movs	r2, #2
 8010b4c:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8010b54:	491f      	ldr	r1, [pc, #124]	; (8010bd4 <tcp_server_recv+0x10c>)
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f7f8 fd06 	bl	8009568 <tcp_sent>

    /* send back the received data () */
    tcp_server_send(tpcb, es);
 8010b5c:	69b9      	ldr	r1, [r7, #24]
 8010b5e:	68b8      	ldr	r0, [r7, #8]
 8010b60:	f000 f894 	bl	8010c8c <tcp_server_send>

    ret_err = ERR_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	77fb      	strb	r3, [r7, #31]
 8010b68:	e027      	b.n	8010bba <tcp_server_recv+0xf2>
  }
  else if (es->state == ES_RECEIVED)
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d115      	bne.n	8010b9e <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d107      	bne.n	8010b8a <tcp_server_recv+0xc2>
    {
      es->p = p;
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 8010b80:	69b9      	ldr	r1, [r7, #24]
 8010b82:	68b8      	ldr	r0, [r7, #8]
 8010b84:	f000 f882 	bl	8010c8c <tcp_server_send>
 8010b88:	e006      	b.n	8010b98 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8010b90:	6879      	ldr	r1, [r7, #4]
 8010b92:	6978      	ldr	r0, [r7, #20]
 8010b94:	f7f6 ff7c 	bl	8007a90 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	77fb      	strb	r3, [r7, #31]
 8010b9c:	e00d      	b.n	8010bba <tcp_server_recv+0xf2>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	891b      	ldrh	r3, [r3, #8]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f7f7 fdcd 	bl	8008744 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	2200      	movs	r2, #0
 8010bae:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7f6 fe55 	bl	8007860 <pbuf_free>
    ret_err = ERR_OK;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8010bba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3720      	adds	r7, #32
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	0801a8c8 	.word	0x0801a8c8
 8010bcc:	0801a8e4 	.word	0x0801a8e4
 8010bd0:	0801a8f0 	.word	0x0801a8f0
 8010bd4:	08010c4f 	.word	0x08010c4f

08010bd8 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d002      	beq.n	8010bf4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7f5 fd04 	bl	80065fc <mem_free>
  }
}
 8010bf4:	bf00      	nop
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d013      	beq.n	8010c38 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d004      	beq.n	8010c22 <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8010c18:	68b9      	ldr	r1, [r7, #8]
 8010c1a:	6838      	ldr	r0, [r7, #0]
 8010c1c:	f000 f836 	bl	8010c8c <tcp_server_send>
 8010c20:	e007      	b.n	8010c32 <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	2b03      	cmp	r3, #3
 8010c28:	d103      	bne.n	8010c32 <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8010c2a:	68b9      	ldr	r1, [r7, #8]
 8010c2c:	6838      	ldr	r0, [r7, #0]
 8010c2e:	f000 f89d 	bl	8010d6c <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	73fb      	strb	r3, [r7, #15]
 8010c36:	e004      	b.n	8010c42 <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8010c38:	6838      	ldr	r0, [r7, #0]
 8010c3a:	f7f7 fba9 	bl	8008390 <tcp_abort>
    ret_err = ERR_ABRT;
 8010c3e:	23f3      	movs	r3, #243	; 0xf3
 8010c40:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8010c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b086      	sub	sp, #24
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	60f8      	str	r0, [r7, #12]
 8010c56:	60b9      	str	r1, [r7, #8]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d004      	beq.n	8010c72 <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8010c68:	6979      	ldr	r1, [r7, #20]
 8010c6a:	68b8      	ldr	r0, [r7, #8]
 8010c6c:	f000 f80e 	bl	8010c8c <tcp_server_send>
 8010c70:	e007      	b.n	8010c82 <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b03      	cmp	r3, #3
 8010c78:	d103      	bne.n	8010c82 <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 8010c7a:	6979      	ldr	r1, [r7, #20]
 8010c7c:	68b8      	ldr	r0, [r7, #8]
 8010c7e:	f000 f875 	bl	8010d6c <tcp_server_connection_close>
  }
  return ERR_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8010c9a:	e051      	b.n	8010d40 <tcp_server_send+0xb4>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	6859      	ldr	r1, [r3, #4]
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	895a      	ldrh	r2, [r3, #10]
 8010caa:	2301      	movs	r3, #1
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7fb fb65 	bl	800c37c <tcp_write>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8010cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d138      	bne.n	8010d30 <tcp_server_send+0xa4>
    {
      u16_t plen;

      plen = ptr->len;
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	895b      	ldrh	r3, [r3, #10]
 8010cc2:	81fb      	strh	r3, [r7, #14]

      char *pReceived = (char*)mem_malloc((size_t)(plen + 1));
 8010cc4:	89fb      	ldrh	r3, [r7, #14]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7f5 fdfc 	bl	80068c8 <mem_malloc>
 8010cd0:	60b8      	str	r0, [r7, #8]
      memcpy(pReceived, ptr->payload, plen);
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	89fa      	ldrh	r2, [r7, #14]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	68b8      	ldr	r0, [r7, #8]
 8010cdc:	f006 f83c 	bl	8016d58 <memcpy>
      memset(pReceived + plen, 0, 1);
 8010ce0:	89fb      	ldrh	r3, [r7, #14]
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	2100      	movs	r1, #0
 8010cea:	4618      	mov	r0, r3
 8010cec:	f006 f842 	bl	8016d74 <memset>

      printf("%s\n", pReceived);
 8010cf0:	68b8      	ldr	r0, [r7, #8]
 8010cf2:	f006 f8cd 	bl	8016e90 <puts>
      extKeyBoardButton = pReceived[0];
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	781a      	ldrb	r2, [r3, #0]
 8010cfa:	4b1b      	ldr	r3, [pc, #108]	; (8010d68 <tcp_server_send+0xdc>)
 8010cfc:	701a      	strb	r2, [r3, #0]

      mem_free(pReceived);
 8010cfe:	68b8      	ldr	r0, [r7, #8]
 8010d00:	f7f5 fc7c 	bl	80065fc <mem_free>

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d004      	beq.n	8010d1e <tcp_server_send+0x92>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7f6 fe41 	bl	80079a0 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8010d1e:	6938      	ldr	r0, [r7, #16]
 8010d20:	f7f6 fd9e 	bl	8007860 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8010d24:	89fb      	ldrh	r3, [r7, #14]
 8010d26:	4619      	mov	r1, r3
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7f7 fd0b 	bl	8008744 <tcp_recved>
 8010d2e:	e007      	b.n	8010d40 <tcp_server_send+0xb4>
   }
   else if(wr_err == ERR_MEM)
 8010d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d102      	bne.n	8010d40 <tcp_server_send+0xb4>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	693a      	ldr	r2, [r7, #16]
 8010d3e:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8010d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10b      	bne.n	8010d60 <tcp_server_send+0xd4>
         (es->p != NULL) &&
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d007      	beq.n	8010d60 <tcp_server_send+0xd4>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	895a      	ldrh	r2, [r3, #10]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d99d      	bls.n	8010c9c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8010d60:	bf00      	nop
 8010d62:	3718      	adds	r7, #24
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20006988 	.word	0x20006988

08010d6c <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8010d76:	2100      	movs	r1, #0
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7f8 fbc1 	bl	8009500 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8010d7e:	2100      	movs	r1, #0
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7f8 fbf1 	bl	8009568 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8010d86:	2100      	movs	r1, #0
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f7f8 fbcb 	bl	8009524 <tcp_recv>
  tcp_err(tpcb, NULL);
 8010d8e:	2100      	movs	r1, #0
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7f8 fc0b 	bl	80095ac <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8010d96:	2200      	movs	r2, #0
 8010d98:	2100      	movs	r1, #0
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7f8 fc40 	bl	8009620 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8010da6:	6838      	ldr	r0, [r7, #0]
 8010da8:	f7f5 fc28 	bl	80065fc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7f7 fa05 	bl	80081bc <tcp_close>
}
 8010db2:	bf00      	nop
 8010db4:	3708      	adds	r7, #8
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}

08010dba <snake_control>:
/* Needed for getch - no*/

static uint32_t gPrgCycle = 0;

void snake_control(snake_t* snake)
{
 8010dba:	b580      	push	{r7, lr}
 8010dbc:	b082      	sub	sp, #8
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	6078      	str	r0, [r7, #4]
	platform_get_control(snake);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fc82 	bl	80116cc <platform_get_control>
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <snake_hw_init>:


void snake_hw_init(void)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	af00      	add	r7, sp, #0
	platform_init();
 8010dd4:	f000 fc36 	bl	8011644 <platform_init>
}
 8010dd8:	bf00      	nop
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <snake_init>:

void snake_init(snake_t* snake)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
	snake->length = SNAKE_INIT_LNG;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2203      	movs	r2, #3
 8010de8:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	snake->direction = PAUSE;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2250      	movs	r2, #80	; 0x50
 8010df0:	701a      	strb	r2, [r3, #0]
	snake->state = PLAYING;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2200      	movs	r2, #0
 8010df6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	snake->ghost.x = INVALID_COORDS;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e00:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	snake->ghost.y = INVALID_COORDS;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e0a:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

	memset(&snake->body[0], 0, SNAKE_MAX_LNG*sizeof(coord_t));
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	3302      	adds	r3, #2
 8010e12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010e16:	2100      	movs	r1, #0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f005 ffab 	bl	8016d74 <memset>

	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8010e1e:	2300      	movs	r3, #0
 8010e20:	60fb      	str	r3, [r7, #12]
 8010e22:	e012      	b.n	8010e4a <snake_init+0x6e>
	{
		snake->body[idx].x = SNAKE_INIT_X_CORD + idx;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	3301      	adds	r3, #1
 8010e2a:	b299      	uxth	r1, r3
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	4413      	add	r3, r2
 8010e34:	460a      	mov	r2, r1
 8010e36:	805a      	strh	r2, [r3, #2]
		snake->body[idx].y = SNAKE_INIT_Y_CORD;
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	4413      	add	r3, r2
 8010e40:	220a      	movs	r2, #10
 8010e42:	809a      	strh	r2, [r3, #4]
	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	3301      	adds	r3, #1
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	dde9      	ble.n	8010e24 <snake_init+0x48>
	}

	platform_refresh_hw();
 8010e50:	f000 fb5c 	bl	801150c <platform_refresh_hw>

}
 8010e54:	bf00      	nop
 8010e56:	3710      	adds	r7, #16
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <snake_display>:

void snake_display(snake_t* snake)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
	if (INVALID_COORDS != snake->ghost.x && INVALID_COORDS != snake->ghost.y)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8010e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d010      	beq.n	8010e94 <snake_display+0x38>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d009      	beq.n	8010e94 <snake_display+0x38>
	{
		platform_eraseCell(snake->ghost.x, snake->ghost.y);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	4610      	mov	r0, r2
 8010e90:	f000 fb89 	bl	80115a6 <platform_eraseCell>
	}
	for (int idx = 0; idx < snake->length; idx++)
 8010e94:	2300      	movs	r3, #0
 8010e96:	60fb      	str	r3, [r7, #12]
 8010e98:	e00f      	b.n	8010eba <snake_display+0x5e>
	{
		platform_drawCell(snake->body[idx].x, snake->body[idx].y);
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	8858      	ldrh	r0, [r3, #2]
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4413      	add	r3, r2
 8010eac:	889b      	ldrh	r3, [r3, #4]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	f000 fb33 	bl	801151a <platform_drawCell>
	for (int idx = 0; idx < snake->length; idx++)
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	60fb      	str	r3, [r7, #12]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	dbe8      	blt.n	8010e9a <snake_display+0x3e>
	}
}
 8010ec8:	bf00      	nop
 8010eca:	bf00      	nop
 8010ecc:	3710      	adds	r7, #16
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
	...

08010ed4 <snake_move>:
void snake_diplay_borders(void)
{
}

void snake_move(snake_t* snake)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
	if (NULL == snake || PAUSE == snake->direction)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f000 8196 	beq.w	8011210 <snake_move+0x33c>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	2b50      	cmp	r3, #80	; 0x50
 8010eea:	f000 8191 	beq.w	8011210 <snake_move+0x33c>
	{
		return;
	}
	snake->ghost = snake->body[0];
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8010ef6:	3202      	adds	r2, #2
 8010ef8:	6812      	ldr	r2, [r2, #0]
 8010efa:	601a      	str	r2, [r3, #0]
	memcpy(&snake->body[0], &snake->body[1], sizeof(coord_t) * (snake->length - 1));
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	1c98      	adds	r0, r3, #2
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	1d99      	adds	r1, r3, #6
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	461a      	mov	r2, r3
 8010f10:	f005 ff22 	bl	8016d58 <memcpy>

	switch (snake->direction)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	3b41      	subs	r3, #65	; 0x41
 8010f1a:	2b16      	cmp	r3, #22
 8010f1c:	f200 816e 	bhi.w	80111fc <snake_move+0x328>
 8010f20:	a201      	add	r2, pc, #4	; (adr r2, 8010f28 <snake_move+0x54>)
 8010f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f26:	bf00      	nop
 8010f28:	0801115f 	.word	0x0801115f
 8010f2c:	080111fd 	.word	0x080111fd
 8010f30:	080111fd 	.word	0x080111fd
 8010f34:	080110c1 	.word	0x080110c1
 8010f38:	080111fd 	.word	0x080111fd
 8010f3c:	080111fd 	.word	0x080111fd
 8010f40:	080111fd 	.word	0x080111fd
 8010f44:	080111fd 	.word	0x080111fd
 8010f48:	080111fd 	.word	0x080111fd
 8010f4c:	080111fd 	.word	0x080111fd
 8010f50:	080111fd 	.word	0x080111fd
 8010f54:	080111fd 	.word	0x080111fd
 8010f58:	080111fd 	.word	0x080111fd
 8010f5c:	080111fd 	.word	0x080111fd
 8010f60:	080111fd 	.word	0x080111fd
 8010f64:	080111fd 	.word	0x080111fd
 8010f68:	080111fd 	.word	0x080111fd
 8010f6c:	080111fd 	.word	0x080111fd
 8010f70:	08011023 	.word	0x08011023
 8010f74:	080111fd 	.word	0x080111fd
 8010f78:	080111fd 	.word	0x080111fd
 8010f7c:	080111fd 	.word	0x080111fd
 8010f80:	08010f85 	.word	0x08010f85
	{
	case UP:
	{
		if ((snake->body[snake->length - 1].y - 1) == ARENA_MIN_Y)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	4413      	add	r3, r2
 8010f92:	889b      	ldrh	r3, [r3, #4]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d104      	bne.n	8010fa2 <snake_move+0xce>
		{
			snake->state = CRASHED;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010fa0:	e12c      	b.n	80111fc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	617b      	str	r3, [r7, #20]
 8010fa6:	e025      	b.n	8010ff4 <snake_move+0x120>
		{
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	4413      	add	r3, r2
 8010fb6:	889b      	ldrh	r3, [r3, #4]
 8010fb8:	1e5a      	subs	r2, r3, #1
 8010fba:	6879      	ldr	r1, [r7, #4]
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	440b      	add	r3, r1
 8010fc2:	889b      	ldrh	r3, [r3, #4]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d112      	bne.n	8010fee <snake_move+0x11a>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	885a      	ldrh	r2, [r3, #2]
 8010fd8:	6879      	ldr	r1, [r7, #4]
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	440b      	add	r3, r1
 8010fe0:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d103      	bne.n	8010fee <snake_move+0x11a>
			{
				snake->state = CRASHED;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2201      	movs	r2, #1
 8010fea:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	617b      	str	r3, [r7, #20]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	4293      	cmp	r3, r2
 8011000:	dbd2      	blt.n	8010fa8 <snake_move+0xd4>
			}
		}
		snake->body[snake->length - 1].y--;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011008:	1e5a      	subs	r2, r3, #1
 801100a:	6879      	ldr	r1, [r7, #4]
 801100c:	0093      	lsls	r3, r2, #2
 801100e:	440b      	add	r3, r1
 8011010:	889b      	ldrh	r3, [r3, #4]
 8011012:	3b01      	subs	r3, #1
 8011014:	b298      	uxth	r0, r3
 8011016:	6879      	ldr	r1, [r7, #4]
 8011018:	0093      	lsls	r3, r2, #2
 801101a:	440b      	add	r3, r1
 801101c:	4602      	mov	r2, r0
 801101e:	809a      	strh	r2, [r3, #4]
	}
	break;
 8011020:	e0ec      	b.n	80111fc <snake_move+0x328>
	case DOWN:
	{
		if ((snake->body[snake->length - 1].y + 1) == ARENA_MAX_Y)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011028:	3b01      	subs	r3, #1
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	4413      	add	r3, r2
 8011030:	889b      	ldrh	r3, [r3, #4]
 8011032:	2b14      	cmp	r3, #20
 8011034:	d104      	bne.n	8011040 <snake_move+0x16c>
		{
			snake->state = CRASHED;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2201      	movs	r2, #1
 801103a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 801103e:	e0dd      	b.n	80111fc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8011040:	2300      	movs	r3, #0
 8011042:	613b      	str	r3, [r7, #16]
 8011044:	e025      	b.n	8011092 <snake_move+0x1be>
		{
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801104c:	3b01      	subs	r3, #1
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	4413      	add	r3, r2
 8011054:	889b      	ldrh	r3, [r3, #4]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	6879      	ldr	r1, [r7, #4]
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	440b      	add	r3, r1
 8011060:	889b      	ldrh	r3, [r3, #4]
 8011062:	429a      	cmp	r2, r3
 8011064:	d112      	bne.n	801108c <snake_move+0x1b8>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801106c:	3b01      	subs	r3, #1
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	885a      	ldrh	r2, [r3, #2]
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	440b      	add	r3, r1
 801107e:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8011080:	429a      	cmp	r2, r3
 8011082:	d103      	bne.n	801108c <snake_move+0x1b8>
			{
				snake->state = CRASHED;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	3301      	adds	r3, #1
 8011090:	613b      	str	r3, [r7, #16]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011098:	461a      	mov	r2, r3
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	4293      	cmp	r3, r2
 801109e:	dbd2      	blt.n	8011046 <snake_move+0x172>
			}
		}

		snake->body[snake->length - 1].y++;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110a6:	1e5a      	subs	r2, r3, #1
 80110a8:	6879      	ldr	r1, [r7, #4]
 80110aa:	0093      	lsls	r3, r2, #2
 80110ac:	440b      	add	r3, r1
 80110ae:	889b      	ldrh	r3, [r3, #4]
 80110b0:	3301      	adds	r3, #1
 80110b2:	b298      	uxth	r0, r3
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	0093      	lsls	r3, r2, #2
 80110b8:	440b      	add	r3, r1
 80110ba:	4602      	mov	r2, r0
 80110bc:	809a      	strh	r2, [r3, #4]
	}
	break;
 80110be:	e09d      	b.n	80111fc <snake_move+0x328>
	case RIGHT:
	{
		if ((snake->body[snake->length - 1].x + 1) == ARENA_MAX_X)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110c6:	3b01      	subs	r3, #1
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	4413      	add	r3, r2
 80110ce:	885b      	ldrh	r3, [r3, #2]
 80110d0:	2b0d      	cmp	r3, #13
 80110d2:	d104      	bne.n	80110de <snake_move+0x20a>
		{
			snake->state = CRASHED;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2201      	movs	r2, #1
 80110d8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 80110dc:	e08e      	b.n	80111fc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 80110de:	2300      	movs	r3, #0
 80110e0:	60fb      	str	r3, [r7, #12]
 80110e2:	e025      	b.n	8011130 <snake_move+0x25c>
		{
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110ea:	3b01      	subs	r3, #1
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4413      	add	r3, r2
 80110f2:	885b      	ldrh	r3, [r3, #2]
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	440b      	add	r3, r1
 80110fe:	885b      	ldrh	r3, [r3, #2]
 8011100:	429a      	cmp	r2, r3
 8011102:	d112      	bne.n	801112a <snake_move+0x256>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801110a:	3b01      	subs	r3, #1
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	4413      	add	r3, r2
 8011112:	889a      	ldrh	r2, [r3, #4]
 8011114:	6879      	ldr	r1, [r7, #4]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	440b      	add	r3, r1
 801111c:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 801111e:	429a      	cmp	r2, r3
 8011120:	d103      	bne.n	801112a <snake_move+0x256>
			{
				snake->state = CRASHED;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2201      	movs	r2, #1
 8011126:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	3301      	adds	r3, #1
 801112e:	60fb      	str	r3, [r7, #12]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011136:	461a      	mov	r2, r3
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	4293      	cmp	r3, r2
 801113c:	dbd2      	blt.n	80110e4 <snake_move+0x210>
			}
		}
		snake->body[snake->length - 1].x++;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011144:	1e5a      	subs	r2, r3, #1
 8011146:	6879      	ldr	r1, [r7, #4]
 8011148:	0093      	lsls	r3, r2, #2
 801114a:	440b      	add	r3, r1
 801114c:	885b      	ldrh	r3, [r3, #2]
 801114e:	3301      	adds	r3, #1
 8011150:	b298      	uxth	r0, r3
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	0093      	lsls	r3, r2, #2
 8011156:	440b      	add	r3, r1
 8011158:	4602      	mov	r2, r0
 801115a:	805a      	strh	r2, [r3, #2]
	}
	break;
 801115c:	e04e      	b.n	80111fc <snake_move+0x328>
	case LEFT:
	{
		if ((snake->body[snake->length - 1].x - 1) == ARENA_MIN_X)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011164:	3b01      	subs	r3, #1
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	885b      	ldrh	r3, [r3, #2]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d104      	bne.n	801117c <snake_move+0x2a8>
		{
			snake->state = CRASHED;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2201      	movs	r2, #1
 8011176:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 801117a:	e03f      	b.n	80111fc <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 801117c:	2300      	movs	r3, #0
 801117e:	60bb      	str	r3, [r7, #8]
 8011180:	e025      	b.n	80111ce <snake_move+0x2fa>
		{
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011188:	3b01      	subs	r3, #1
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	4413      	add	r3, r2
 8011190:	885b      	ldrh	r3, [r3, #2]
 8011192:	1e5a      	subs	r2, r3, #1
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	440b      	add	r3, r1
 801119c:	885b      	ldrh	r3, [r3, #2]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d112      	bne.n	80111c8 <snake_move+0x2f4>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80111a8:	3b01      	subs	r3, #1
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	889a      	ldrh	r2, [r3, #4]
 80111b2:	6879      	ldr	r1, [r7, #4]
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	440b      	add	r3, r1
 80111ba:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 80111bc:	429a      	cmp	r2, r3
 80111be:	d103      	bne.n	80111c8 <snake_move+0x2f4>
			{
				snake->state = CRASHED;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	3301      	adds	r3, #1
 80111cc:	60bb      	str	r3, [r7, #8]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80111d4:	461a      	mov	r2, r3
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	4293      	cmp	r3, r2
 80111da:	dbd2      	blt.n	8011182 <snake_move+0x2ae>
			}
		}
		snake->body[snake->length - 1].x--;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80111e2:	1e5a      	subs	r2, r3, #1
 80111e4:	6879      	ldr	r1, [r7, #4]
 80111e6:	0093      	lsls	r3, r2, #2
 80111e8:	440b      	add	r3, r1
 80111ea:	885b      	ldrh	r3, [r3, #2]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	b298      	uxth	r0, r3
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	0093      	lsls	r3, r2, #2
 80111f4:	440b      	add	r3, r1
 80111f6:	4602      	mov	r2, r0
 80111f8:	805a      	strh	r2, [r3, #2]
	}
	break;
 80111fa:	bf00      	nop
	default:
	{
	}
	}

	if (snake->length == SNAKE_WON_LIMIT)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011202:	2b63      	cmp	r3, #99	; 0x63
 8011204:	d105      	bne.n	8011212 <snake_move+0x33e>
	{
		snake->state = WON;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2202      	movs	r2, #2
 801120a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 801120e:	e000      	b.n	8011212 <snake_move+0x33e>
		return;
 8011210:	bf00      	nop
	}
}
 8011212:	3718      	adds	r7, #24
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <generate_food>:

uint16_t generate_food(snake_t* snake, food_t *food)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
	uint16_t isInvalid = 0;
 8011222:	2300      	movs	r3, #0
 8011224:	82fb      	strh	r3, [r7, #22]
	uint16_t iter = 0;
 8011226:	2300      	movs	r3, #0
 8011228:	81fb      	strh	r3, [r7, #14]

	do
	{
		food->coord.x = (uint16_t)((platform_randomize() % (FOOD_MAX_X - FOOD_MIN_X + 1)) + FOOD_MIN_X);
 801122a:	f000 fa21 	bl	8011670 <platform_randomize>
 801122e:	4603      	mov	r3, r0
 8011230:	4619      	mov	r1, r3
 8011232:	4b2e      	ldr	r3, [pc, #184]	; (80112ec <generate_food+0xd4>)
 8011234:	fba3 2301 	umull	r2, r3, r3, r1
 8011238:	089a      	lsrs	r2, r3, #2
 801123a:	4613      	mov	r3, r2
 801123c:	005b      	lsls	r3, r3, #1
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	4413      	add	r3, r2
 8011244:	1acb      	subs	r3, r1, r3
 8011246:	b29b      	uxth	r3, r3
 8011248:	3301      	adds	r3, #1
 801124a:	b29a      	uxth	r2, r3
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	801a      	strh	r2, [r3, #0]
		food->coord.y = (uint16_t)((platform_randomize() % (FOOD_MAX_Y - FOOD_MIN_Y + 1)) + FOOD_MIN_Y);
 8011250:	f000 fa0e 	bl	8011670 <platform_randomize>
 8011254:	4603      	mov	r3, r0
 8011256:	461a      	mov	r2, r3
 8011258:	4b25      	ldr	r3, [pc, #148]	; (80112f0 <generate_food+0xd8>)
 801125a:	fba3 1302 	umull	r1, r3, r3, r2
 801125e:	0919      	lsrs	r1, r3, #4
 8011260:	460b      	mov	r3, r1
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	440b      	add	r3, r1
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	b29b      	uxth	r3, r3
 801126c:	3301      	adds	r3, #1
 801126e:	b29a      	uxth	r2, r3
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	805a      	strh	r2, [r3, #2]

		for (int idx = 0; idx < snake->length; idx++)
 8011274:	2300      	movs	r3, #0
 8011276:	613b      	str	r3, [r7, #16]
 8011278:	e018      	b.n	80112ac <generate_food+0x94>
		{
			if ((snake->body[idx].x == food->coord.x) &&
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4413      	add	r3, r2
 8011282:	885a      	ldrh	r2, [r3, #2]
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	881b      	ldrh	r3, [r3, #0]
 8011288:	429a      	cmp	r2, r3
 801128a:	d10c      	bne.n	80112a6 <generate_food+0x8e>
				(snake->body[idx].y == food->coord.y))
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4413      	add	r3, r2
 8011294:	889a      	ldrh	r2, [r3, #4]
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	885b      	ldrh	r3, [r3, #2]
			if ((snake->body[idx].x == food->coord.x) &&
 801129a:	429a      	cmp	r2, r3
 801129c:	d103      	bne.n	80112a6 <generate_food+0x8e>
			{
				isInvalid = GENERAL_ERROR;
 801129e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112a2:	82fb      	strh	r3, [r7, #22]
				break;
 80112a4:	e009      	b.n	80112ba <generate_food+0xa2>
		for (int idx = 0; idx < snake->length; idx++)
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	3301      	adds	r3, #1
 80112aa:	613b      	str	r3, [r7, #16]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80112b2:	461a      	mov	r2, r3
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	4293      	cmp	r3, r2
 80112b8:	dbdf      	blt.n	801127a <generate_food+0x62>
			}
		}
		if (iter > FOOD_MAX_ITER)
 80112ba:	89fb      	ldrh	r3, [r7, #14]
 80112bc:	2b64      	cmp	r3, #100	; 0x64
 80112be:	d803      	bhi.n	80112c8 <generate_food+0xb0>
		{
			break;
		}

	} while (isInvalid);
 80112c0:	8afb      	ldrh	r3, [r7, #22]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1b1      	bne.n	801122a <generate_food+0x12>
 80112c6:	e000      	b.n	80112ca <generate_food+0xb2>
			break;
 80112c8:	bf00      	nop

	if (!isInvalid)
 80112ca:	8afb      	ldrh	r3, [r7, #22]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d107      	bne.n	80112e0 <generate_food+0xc8>
	{
		platform_drawFood(food->coord.x, food->coord.y);
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	881a      	ldrh	r2, [r3, #0]
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	885b      	ldrh	r3, [r3, #2]
 80112d8:	4619      	mov	r1, r3
 80112da:	4610      	mov	r0, r2
 80112dc:	f000 f98b 	bl	80115f6 <platform_drawFood>
	}

	return isInvalid;
 80112e0:	8afb      	ldrh	r3, [r7, #22]

}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3718      	adds	r7, #24
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	4ec4ec4f 	.word	0x4ec4ec4f
 80112f0:	cccccccd 	.word	0xcccccccd

080112f4 <snake_place_food>:


void snake_place_food(snake_t* snake, food_t* food, uint32_t tick)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
	if (0 == gPrgCycle % 10 || food->time_elapsed)
 8011300:	4b17      	ldr	r3, [pc, #92]	; (8011360 <snake_place_food+0x6c>)
 8011302:	6819      	ldr	r1, [r3, #0]
 8011304:	4b17      	ldr	r3, [pc, #92]	; (8011364 <snake_place_food+0x70>)
 8011306:	fba3 2301 	umull	r2, r3, r3, r1
 801130a:	08da      	lsrs	r2, r3, #3
 801130c:	4613      	mov	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	1aca      	subs	r2, r1, r3
 8011316:	2a00      	cmp	r2, #0
 8011318:	d003      	beq.n	8011322 <snake_place_food+0x2e>
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	88db      	ldrh	r3, [r3, #6]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d01a      	beq.n	8011358 <snake_place_food+0x64>
	{
		if (food->state != PLACED)
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	791b      	ldrb	r3, [r3, #4]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d013      	beq.n	8011352 <snake_place_food+0x5e>
		{
			if (GENERAL_ERROR == generate_food(snake, food))
 801132a:	68b9      	ldr	r1, [r7, #8]
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f7ff ff73 	bl	8011218 <generate_food>
 8011332:	4603      	mov	r3, r0
 8011334:	461a      	mov	r2, r3
 8011336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801133a:	429a      	cmp	r2, r3
 801133c:	d102      	bne.n	8011344 <snake_place_food+0x50>
			{
				platform_fatal();
 801133e:	f000 f9bb 	bl	80116b8 <platform_fatal>
			food->time_elapsed = 1;
		}

	}

}
 8011342:	e009      	b.n	8011358 <snake_place_food+0x64>
				food->time_elapsed = 0;
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2200      	movs	r2, #0
 8011348:	80da      	strh	r2, [r3, #6]
				food->state = PLACED;
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	2201      	movs	r2, #1
 801134e:	711a      	strb	r2, [r3, #4]
}
 8011350:	e002      	b.n	8011358 <snake_place_food+0x64>
			food->time_elapsed = 1;
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2201      	movs	r2, #1
 8011356:	80da      	strh	r2, [r3, #6]
}
 8011358:	bf00      	nop
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	20000210 	.word	0x20000210
 8011364:	cccccccd 	.word	0xcccccccd

08011368 <snake_haseaten>:
void snake_haseaten(snake_t* snake, food_t* food)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b0e6      	sub	sp, #408	; 0x198
 801136c:	af00      	add	r7, sp, #0
 801136e:	1d3b      	adds	r3, r7, #4
 8011370:	6018      	str	r0, [r3, #0]
 8011372:	463b      	mov	r3, r7
 8011374:	6019      	str	r1, [r3, #0]


	if ((snake->body[snake->length - 1].x == food->coord.x)
 8011376:	1d3b      	adds	r3, r7, #4
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801137e:	3b01      	subs	r3, #1
 8011380:	1d3a      	adds	r2, r7, #4
 8011382:	6812      	ldr	r2, [r2, #0]
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	885a      	ldrh	r2, [r3, #2]
 801138a:	463b      	mov	r3, r7
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	429a      	cmp	r2, r3
 8011392:	d154      	bne.n	801143e <snake_haseaten+0xd6>
		&& (snake->body[snake->length - 1].y == food->coord.y))
 8011394:	1d3b      	adds	r3, r7, #4
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801139c:	3b01      	subs	r3, #1
 801139e:	1d3a      	adds	r2, r7, #4
 80113a0:	6812      	ldr	r2, [r2, #0]
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	889a      	ldrh	r2, [r3, #4]
 80113a8:	463b      	mov	r3, r7
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	885b      	ldrh	r3, [r3, #2]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d145      	bne.n	801143e <snake_haseaten+0xd6>
	{
		/* Needed temporary copy for shifting the whole array right - for embedded*/
		coord_t tempSnake[SNAKE_MAX_LNG] = {0};
 80113b2:	f107 0308 	add.w	r3, r7, #8
 80113b6:	4618      	mov	r0, r3
 80113b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80113bc:	461a      	mov	r2, r3
 80113be:	2100      	movs	r1, #0
 80113c0:	f005 fcd8 	bl	8016d74 <memset>
		memcpy(tempSnake, &(snake->body[0]), (size_t)snake->length*sizeof(coord_t));
 80113c4:	1d3b      	adds	r3, r7, #4
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	1c99      	adds	r1, r3, #2
 80113ca:	1d3b      	adds	r3, r7, #4
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80113d2:	009a      	lsls	r2, r3, #2
 80113d4:	f107 0308 	add.w	r3, r7, #8
 80113d8:	4618      	mov	r0, r3
 80113da:	f005 fcbd 	bl	8016d58 <memcpy>

		/* Just append the ghost to the end, increment length and disable ghost*/
		memcpy(&(snake->body[1]), tempSnake, (size_t)snake->length*sizeof(coord_t));
 80113de:	1d3b      	adds	r3, r7, #4
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	1d98      	adds	r0, r3, #6
 80113e4:	1d3b      	adds	r3, r7, #4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80113ec:	009a      	lsls	r2, r3, #2
 80113ee:	f107 0308 	add.w	r3, r7, #8
 80113f2:	4619      	mov	r1, r3
 80113f4:	f005 fcb0 	bl	8016d58 <memcpy>
		snake->body[0] = snake->ghost;
 80113f8:	1d3b      	adds	r3, r7, #4
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	1d3a      	adds	r2, r7, #4
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	3302      	adds	r3, #2
 8011402:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8011406:	6812      	ldr	r2, [r2, #0]
 8011408:	601a      	str	r2, [r3, #0]
		snake->ghost.x = INVALID_COORDS;
 801140a:	1d3b      	adds	r3, r7, #4
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011412:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		snake->ghost.y = INVALID_COORDS;
 8011416:	1d3b      	adds	r3, r7, #4
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801141e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		snake->length++;
 8011422:	1d3b      	adds	r3, r7, #4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801142a:	3301      	adds	r3, #1
 801142c:	b29a      	uxth	r2, r3
 801142e:	1d3b      	adds	r3, r7, #4
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

		food->state = EATEN;
 8011436:	463b      	mov	r3, r7
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2202      	movs	r2, #2
 801143c:	711a      	strb	r2, [r3, #4]
	}
}
 801143e:	bf00      	nop
 8011440:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <HAL_UART_RxCpltCallback>:
char extKeyBoardButton;
UART_HandleTypeDef huart3;
char sUartChar = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a09      	ldr	r2, [pc, #36]	; (801147c <HAL_UART_RxCpltCallback+0x34>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d10b      	bne.n	8011472 <HAL_UART_RxCpltCallback+0x2a>
	{
		extKeyBoardButton = sUartChar;
 801145a:	4b09      	ldr	r3, [pc, #36]	; (8011480 <HAL_UART_RxCpltCallback+0x38>)
 801145c:	781a      	ldrb	r2, [r3, #0]
 801145e:	4b09      	ldr	r3, [pc, #36]	; (8011484 <HAL_UART_RxCpltCallback+0x3c>)
 8011460:	701a      	strb	r2, [r3, #0]
		sUartChar = 0;
 8011462:	4b07      	ldr	r3, [pc, #28]	; (8011480 <HAL_UART_RxCpltCallback+0x38>)
 8011464:	2200      	movs	r2, #0
 8011466:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&sUartChar, 1);
 8011468:	2201      	movs	r2, #1
 801146a:	4905      	ldr	r1, [pc, #20]	; (8011480 <HAL_UART_RxCpltCallback+0x38>)
 801146c:	4806      	ldr	r0, [pc, #24]	; (8011488 <HAL_UART_RxCpltCallback+0x40>)
 801146e:	f7f3 f83c 	bl	80044ea <HAL_UART_Receive_IT>
	}
}
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	40004800 	.word	0x40004800
 8011480:	20000216 	.word	0x20000216
 8011484:	20006988 	.word	0x20006988
 8011488:	2000026c 	.word	0x2000026c

0801148c <platform_control_init>:

static void platform_control_init(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&sUartChar, 1);
 8011490:	2201      	movs	r2, #1
 8011492:	4903      	ldr	r1, [pc, #12]	; (80114a0 <platform_control_init+0x14>)
 8011494:	4803      	ldr	r0, [pc, #12]	; (80114a4 <platform_control_init+0x18>)
 8011496:	f7f3 f828 	bl	80044ea <HAL_UART_Receive_IT>
}
 801149a:	bf00      	nop
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	20000216 	.word	0x20000216
 80114a4:	2000026c 	.word	0x2000026c

080114a8 <platform_init_randomizer>:
static void platform_init_randomizer(void)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	af00      	add	r7, sp, #0
	/* This randomizer is based on ADC noise
	 * as a LFSR seed number */
	HAL_ADC_Start(&hadc1);
 80114ac:	4810      	ldr	r0, [pc, #64]	; (80114f0 <platform_init_randomizer+0x48>)
 80114ae:	f7ef fdab 	bl	8001008 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80114b2:	f04f 31ff 	mov.w	r1, #4294967295
 80114b6:	480e      	ldr	r0, [pc, #56]	; (80114f0 <platform_init_randomizer+0x48>)
 80114b8:	f7ef fea8 	bl	800120c <HAL_ADC_PollForConversion>
	gRandSeed = HAL_ADC_GetValue(&hadc1);
 80114bc:	480c      	ldr	r0, [pc, #48]	; (80114f0 <platform_init_randomizer+0x48>)
 80114be:	f7ef ff30 	bl	8001322 <HAL_ADC_GetValue>
 80114c2:	4603      	mov	r3, r0
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	4b0b      	ldr	r3, [pc, #44]	; (80114f4 <platform_init_randomizer+0x4c>)
 80114c8:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80114ca:	4809      	ldr	r0, [pc, #36]	; (80114f0 <platform_init_randomizer+0x48>)
 80114cc:	f7ef fe6a 	bl	80011a4 <HAL_ADC_Stop>
	while(gRandSeed < 0x8000) gRandSeed += gRandSeed;
 80114d0:	e005      	b.n	80114de <platform_init_randomizer+0x36>
 80114d2:	4b08      	ldr	r3, [pc, #32]	; (80114f4 <platform_init_randomizer+0x4c>)
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	005b      	lsls	r3, r3, #1
 80114d8:	b29a      	uxth	r2, r3
 80114da:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <platform_init_randomizer+0x4c>)
 80114dc:	801a      	strh	r2, [r3, #0]
 80114de:	4b05      	ldr	r3, [pc, #20]	; (80114f4 <platform_init_randomizer+0x4c>)
 80114e0:	881b      	ldrh	r3, [r3, #0]
 80114e2:	b21b      	sxth	r3, r3
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	daf4      	bge.n	80114d2 <platform_init_randomizer+0x2a>
}
 80114e8:	bf00      	nop
 80114ea:	bf00      	nop
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	20000224 	.word	0x20000224
 80114f4:	20000214 	.word	0x20000214

080114f8 <platform_display_init>:

static void platform_display_init(void)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	af00      	add	r7, sp, #0
    tft_init(readID());
 80114fc:	f002 fa66 	bl	80139cc <readID>
 8011500:	4603      	mov	r3, r0
 8011502:	4618      	mov	r0, r3
 8011504:	f001 fedc 	bl	80132c0 <tft_init>
}
 8011508:	bf00      	nop
 801150a:	bd80      	pop	{r7, pc}

0801150c <platform_refresh_hw>:


void platform_refresh_hw(void)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8011510:	2000      	movs	r0, #0
 8011512:	f004 fea7 	bl	8016264 <fillScreen>
}
 8011516:	bf00      	nop
 8011518:	bd80      	pop	{r7, pc}

0801151a <platform_drawCell>:

void platform_drawCell(uint16_t x, uint16_t y)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af02      	add	r7, sp, #8
 8011520:	4603      	mov	r3, r0
 8011522:	460a      	mov	r2, r1
 8011524:	80fb      	strh	r3, [r7, #6]
 8011526:	4613      	mov	r3, r2
 8011528:	80bb      	strh	r3, [r7, #4]

	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 801152a:	88fb      	ldrh	r3, [r7, #6]
 801152c:	461a      	mov	r2, r3
 801152e:	0092      	lsls	r2, r2, #2
 8011530:	441a      	add	r2, r3
 8011532:	0052      	lsls	r2, r2, #1
 8011534:	4413      	add	r3, r2
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	b29b      	uxth	r3, r3
 801153a:	3306      	adds	r3, #6
 801153c:	b29b      	uxth	r3, r3
 801153e:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 8011540:	88bb      	ldrh	r3, [r7, #4]
 8011542:	461a      	mov	r2, r3
 8011544:	0092      	lsls	r2, r2, #2
 8011546:	441a      	add	r2, r3
 8011548:	0052      	lsls	r2, r2, #1
 801154a:	4413      	add	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	b29b      	uxth	r3, r3
 8011550:	3309      	adds	r3, #9
 8011552:	b29b      	uxth	r3, r3
	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8011554:	b219      	sxth	r1, r3
 8011556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	2316      	movs	r3, #22
 801155e:	2216      	movs	r2, #22
 8011560:	f005 f87b 	bl	801665a <drawRect>
			CELL_SIZE,
			CELL_SIZE,
			WHITE);

	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 8011564:	88fb      	ldrh	r3, [r7, #6]
 8011566:	461a      	mov	r2, r3
 8011568:	0092      	lsls	r2, r2, #2
 801156a:	441a      	add	r2, r3
 801156c:	0052      	lsls	r2, r2, #1
 801156e:	4413      	add	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	b29b      	uxth	r3, r3
 8011574:	3307      	adds	r3, #7
 8011576:	b29b      	uxth	r3, r3
 8011578:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y + 1,
 801157a:	88bb      	ldrh	r3, [r7, #4]
 801157c:	461a      	mov	r2, r3
 801157e:	0092      	lsls	r2, r2, #2
 8011580:	441a      	add	r2, r3
 8011582:	0052      	lsls	r2, r2, #1
 8011584:	4413      	add	r3, r2
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	b29b      	uxth	r3, r3
 801158a:	330a      	adds	r3, #10
 801158c:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 801158e:	b219      	sxth	r1, r3
 8011590:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8011594:	9300      	str	r3, [sp, #0]
 8011596:	2314      	movs	r3, #20
 8011598:	2214      	movs	r2, #20
 801159a:	f005 f89f 	bl	80166dc <fillRect>
			CELL_SIZE - 2,
			CELL_SIZE - 2,
			MAGENTA);
}
 801159e:	bf00      	nop
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <platform_eraseCell>:

void platform_eraseCell(uint16_t x, uint16_t y)
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b084      	sub	sp, #16
 80115aa:	af02      	add	r7, sp, #8
 80115ac:	4603      	mov	r3, r0
 80115ae:	460a      	mov	r2, r1
 80115b0:	80fb      	strh	r3, [r7, #6]
 80115b2:	4613      	mov	r3, r2
 80115b4:	80bb      	strh	r3, [r7, #4]
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 80115b6:	88fb      	ldrh	r3, [r7, #6]
 80115b8:	461a      	mov	r2, r3
 80115ba:	0092      	lsls	r2, r2, #2
 80115bc:	441a      	add	r2, r3
 80115be:	0052      	lsls	r2, r2, #1
 80115c0:	4413      	add	r3, r2
 80115c2:	005b      	lsls	r3, r3, #1
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	3306      	adds	r3, #6
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 80115cc:	88bb      	ldrh	r3, [r7, #4]
 80115ce:	461a      	mov	r2, r3
 80115d0:	0092      	lsls	r2, r2, #2
 80115d2:	441a      	add	r2, r3
 80115d4:	0052      	lsls	r2, r2, #1
 80115d6:	4413      	add	r3, r2
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	b29b      	uxth	r3, r3
 80115dc:	3309      	adds	r3, #9
 80115de:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 80115e0:	b219      	sxth	r1, r3
 80115e2:	2300      	movs	r3, #0
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	2316      	movs	r3, #22
 80115e8:	2216      	movs	r2, #22
 80115ea:	f005 f877 	bl	80166dc <fillRect>
			CELL_SIZE,
			CELL_SIZE,
			BLACK);
}
 80115ee:	bf00      	nop
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <platform_drawFood>:

void platform_drawFood(uint16_t x, uint16_t y)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b082      	sub	sp, #8
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	4603      	mov	r3, r0
 80115fe:	460a      	mov	r2, r1
 8011600:	80fb      	strh	r3, [r7, #6]
 8011602:	4613      	mov	r3, r2
 8011604:	80bb      	strh	r3, [r7, #4]
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 8011606:	88fb      	ldrh	r3, [r7, #6]
 8011608:	461a      	mov	r2, r3
 801160a:	0092      	lsls	r2, r2, #2
 801160c:	441a      	add	r2, r3
 801160e:	0052      	lsls	r2, r2, #1
 8011610:	4413      	add	r3, r2
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	b29b      	uxth	r3, r3
 8011616:	3311      	adds	r3, #17
 8011618:	b29b      	uxth	r3, r3
 801161a:	b218      	sxth	r0, r3
			   ARENA_OFFSET_Y + CELL_SIZE*y + CELL_SIZE/2,
 801161c:	88bb      	ldrh	r3, [r7, #4]
 801161e:	461a      	mov	r2, r3
 8011620:	0092      	lsls	r2, r2, #2
 8011622:	441a      	add	r2, r3
 8011624:	0052      	lsls	r2, r2, #1
 8011626:	4413      	add	r3, r2
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	b29b      	uxth	r3, r3
 801162c:	3314      	adds	r3, #20
 801162e:	b29b      	uxth	r3, r3
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 8011630:	b219      	sxth	r1, r3
 8011632:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8011636:	2207      	movs	r2, #7
 8011638:	f004 ff11 	bl	801645e <fillCircle>
			   CELL_SIZE/3,
			   GREEN);
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <platform_init>:
			   CELL_SIZE/3,
			   BLACK);
}

void platform_init(void)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	af00      	add	r7, sp, #0
	platform_init_randomizer();
 8011648:	f7ff ff2e 	bl	80114a8 <platform_init_randomizer>
	platform_control_init();
 801164c:	f7ff ff1e 	bl	801148c <platform_control_init>
	platform_display_init();
 8011650:	f7ff ff52 	bl	80114f8 <platform_display_init>
}
 8011654:	bf00      	nop
 8011656:	bd80      	pop	{r7, pc}

08011658 <platform_showInformal>:

void platform_showInformal(char* str, uint16_t length)
{
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	807b      	strh	r3, [r7, #2]
}
 8011664:	bf00      	nop
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <platform_randomize>:

uint16_t platform_randomize(void)
{
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
  uint16_t lsb;

  lsb = gRandSeed & 1;
 8011676:	4b0e      	ldr	r3, [pc, #56]	; (80116b0 <platform_randomize+0x40>)
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	f003 0301 	and.w	r3, r3, #1
 801167e:	80fb      	strh	r3, [r7, #6]
  gRandSeed >>= 1;
 8011680:	4b0b      	ldr	r3, [pc, #44]	; (80116b0 <platform_randomize+0x40>)
 8011682:	881b      	ldrh	r3, [r3, #0]
 8011684:	085b      	lsrs	r3, r3, #1
 8011686:	b29a      	uxth	r2, r3
 8011688:	4b09      	ldr	r3, [pc, #36]	; (80116b0 <platform_randomize+0x40>)
 801168a:	801a      	strh	r2, [r3, #0]
  if (lsb == 1)
 801168c:	88fb      	ldrh	r3, [r7, #6]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d106      	bne.n	80116a0 <platform_randomize+0x30>
  {
	  gRandSeed ^= 0xB400u;
 8011692:	4b07      	ldr	r3, [pc, #28]	; (80116b0 <platform_randomize+0x40>)
 8011694:	881a      	ldrh	r2, [r3, #0]
 8011696:	4b07      	ldr	r3, [pc, #28]	; (80116b4 <platform_randomize+0x44>)
 8011698:	4053      	eors	r3, r2
 801169a:	b29a      	uxth	r2, r3
 801169c:	4b04      	ldr	r3, [pc, #16]	; (80116b0 <platform_randomize+0x40>)
 801169e:	801a      	strh	r2, [r3, #0]
  }

  return gRandSeed;
 80116a0:	4b03      	ldr	r3, [pc, #12]	; (80116b0 <platform_randomize+0x40>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	20000214 	.word	0x20000214
 80116b4:	ffffb400 	.word	0xffffb400

080116b8 <platform_fatal>:
{
	return;
}

void platform_fatal(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	af00      	add	r7, sp, #0

	platform_showInformal("FatalError\n", strlen("FatalError\n"));
 80116bc:	210b      	movs	r1, #11
 80116be:	4802      	ldr	r0, [pc, #8]	; (80116c8 <platform_fatal+0x10>)
 80116c0:	f7ff ffca 	bl	8011658 <platform_showInformal>
	while (1);
 80116c4:	e7fe      	b.n	80116c4 <platform_fatal+0xc>
 80116c6:	bf00      	nop
 80116c8:	0801a918 	.word	0x0801a918

080116cc <platform_get_control>:
}

void platform_get_control(snake_t * snake)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
	snake_dir_e direction = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	73fb      	strb	r3, [r7, #15]
	static snake_dir_e prev_direction = RIGHT;

	direction = (snake_dir_e)extKeyBoardButton;
 80116d8:	4b30      	ldr	r3, [pc, #192]	; (801179c <platform_get_control+0xd0>)
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	73fb      	strb	r3, [r7, #15]

	if (direction == 0)
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d054      	beq.n	801178e <platform_get_control+0xc2>
	{
		return;
	}

	extKeyBoardButton = 0;
 80116e4:	4b2d      	ldr	r3, [pc, #180]	; (801179c <platform_get_control+0xd0>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	701a      	strb	r2, [r3, #0]

	if ((direction != LEFT) && (direction != RIGHT) && (direction != UP) &&
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	2b41      	cmp	r3, #65	; 0x41
 80116ee:	d016      	beq.n	801171e <platform_get_control+0x52>
 80116f0:	7bfb      	ldrb	r3, [r7, #15]
 80116f2:	2b44      	cmp	r3, #68	; 0x44
 80116f4:	d013      	beq.n	801171e <platform_get_control+0x52>
 80116f6:	7bfb      	ldrb	r3, [r7, #15]
 80116f8:	2b57      	cmp	r3, #87	; 0x57
 80116fa:	d010      	beq.n	801171e <platform_get_control+0x52>
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
 80116fe:	2b53      	cmp	r3, #83	; 0x53
 8011700:	d00d      	beq.n	801171e <platform_get_control+0x52>
		(direction != DOWN) && (direction != PAUSE) && (direction != QUIT))
 8011702:	7bfb      	ldrb	r3, [r7, #15]
 8011704:	2b50      	cmp	r3, #80	; 0x50
 8011706:	d00a      	beq.n	801171e <platform_get_control+0x52>
 8011708:	7bfb      	ldrb	r3, [r7, #15]
 801170a:	2b51      	cmp	r3, #81	; 0x51
 801170c:	d007      	beq.n	801171e <platform_get_control+0x52>
	{
		prev_direction = snake->direction;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	781a      	ldrb	r2, [r3, #0]
 8011712:	4b23      	ldr	r3, [pc, #140]	; (80117a0 <platform_get_control+0xd4>)
 8011714:	701a      	strb	r2, [r3, #0]
		snake->direction = PAUSE;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2250      	movs	r2, #80	; 0x50
 801171a:	701a      	strb	r2, [r3, #0]
 801171c:	e038      	b.n	8011790 <platform_get_control+0xc4>
	}
	else
	{
		if (direction == PAUSE)
 801171e:	7bfb      	ldrb	r3, [r7, #15]
 8011720:	2b50      	cmp	r3, #80	; 0x50
 8011722:	d110      	bne.n	8011746 <platform_get_control+0x7a>
		{
			if (snake->direction != PAUSE)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b50      	cmp	r3, #80	; 0x50
 801172a:	d007      	beq.n	801173c <platform_get_control+0x70>
			{
				prev_direction = snake->direction;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	781a      	ldrb	r2, [r3, #0]
 8011730:	4b1b      	ldr	r3, [pc, #108]	; (80117a0 <platform_get_control+0xd4>)
 8011732:	701a      	strb	r2, [r3, #0]
				snake->direction = PAUSE;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2250      	movs	r2, #80	; 0x50
 8011738:	701a      	strb	r2, [r3, #0]
 801173a:	e029      	b.n	8011790 <platform_get_control+0xc4>
			}
			else
			{
				snake->direction = prev_direction;
 801173c:	4b18      	ldr	r3, [pc, #96]	; (80117a0 <platform_get_control+0xd4>)
 801173e:	781a      	ldrb	r2, [r3, #0]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	701a      	strb	r2, [r3, #0]
 8011744:	e024      	b.n	8011790 <platform_get_control+0xc4>
			}
		}

		else
		{
			if ((snake->direction != PAUSE) &&
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b50      	cmp	r3, #80	; 0x50
 801174c:	d020      	beq.n	8011790 <platform_get_control+0xc4>
				!(snake->direction == LEFT && direction == RIGHT) &&
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	781b      	ldrb	r3, [r3, #0]
			if ((snake->direction != PAUSE) &&
 8011752:	2b41      	cmp	r3, #65	; 0x41
 8011754:	d102      	bne.n	801175c <platform_get_control+0x90>
				!(snake->direction == LEFT && direction == RIGHT) &&
 8011756:	7bfb      	ldrb	r3, [r7, #15]
 8011758:	2b44      	cmp	r3, #68	; 0x44
 801175a:	d019      	beq.n	8011790 <platform_get_control+0xc4>
				!(snake->direction == RIGHT && direction == LEFT) &&
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == LEFT && direction == RIGHT) &&
 8011760:	2b44      	cmp	r3, #68	; 0x44
 8011762:	d102      	bne.n	801176a <platform_get_control+0x9e>
				!(snake->direction == RIGHT && direction == LEFT) &&
 8011764:	7bfb      	ldrb	r3, [r7, #15]
 8011766:	2b41      	cmp	r3, #65	; 0x41
 8011768:	d012      	beq.n	8011790 <platform_get_control+0xc4>
				!(snake->direction == UP && direction == DOWN) &&
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == RIGHT && direction == LEFT) &&
 801176e:	2b57      	cmp	r3, #87	; 0x57
 8011770:	d102      	bne.n	8011778 <platform_get_control+0xac>
				!(snake->direction == UP && direction == DOWN) &&
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	2b53      	cmp	r3, #83	; 0x53
 8011776:	d00b      	beq.n	8011790 <platform_get_control+0xc4>
				!(snake->direction == DOWN && direction == UP))
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == UP && direction == DOWN) &&
 801177c:	2b53      	cmp	r3, #83	; 0x53
 801177e:	d102      	bne.n	8011786 <platform_get_control+0xba>
				!(snake->direction == DOWN && direction == UP))
 8011780:	7bfb      	ldrb	r3, [r7, #15]
 8011782:	2b57      	cmp	r3, #87	; 0x57
 8011784:	d004      	beq.n	8011790 <platform_get_control+0xc4>
			{
				snake->direction = direction;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	7bfa      	ldrb	r2, [r7, #15]
 801178a:	701a      	strb	r2, [r3, #0]
 801178c:	e000      	b.n	8011790 <platform_get_control+0xc4>
		return;
 801178e:	bf00      	nop
			}
		}
	}
}
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	20006988 	.word	0x20006988
 80117a0:	20000012 	.word	0x20000012

080117a4 <delay>:


/********************************************** NO CHNAGES AFTER THIS ************************************************/

void delay (uint32_t time)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b085      	sub	sp, #20
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
	for(uint32_t a = 0; a < time; a++)
 80117ac:	2300      	movs	r3, #0
 80117ae:	60fb      	str	r3, [r7, #12]
 80117b0:	e00c      	b.n	80117cc <delay+0x28>
	{
		for(uint32_t b = 0; b < 108; b++)
 80117b2:	2300      	movs	r3, #0
 80117b4:	60bb      	str	r3, [r7, #8]
 80117b6:	e003      	b.n	80117c0 <delay+0x1c>
		{
			__NOP();
 80117b8:	bf00      	nop
		for(uint32_t b = 0; b < 108; b++)
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	3301      	adds	r3, #1
 80117be:	60bb      	str	r3, [r7, #8]
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	2b6b      	cmp	r3, #107	; 0x6b
 80117c4:	d9f8      	bls.n	80117b8 <delay+0x14>
	for(uint32_t a = 0; a < time; a++)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d3ee      	bcc.n	80117b2 <delay+0xe>
		}
	}

}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop
 80117d8:	3714      	adds	r7, #20
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <PIN_LOW>:

void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b082      	sub	sp, #8
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	460b      	mov	r3, r1
 80117ec:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80117ee:	887b      	ldrh	r3, [r7, #2]
 80117f0:	2200      	movs	r2, #0
 80117f2:	4619      	mov	r1, r3
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7f1 fc45 	bl	8003084 <HAL_GPIO_WritePin>
}
 80117fa:	bf00      	nop
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b082      	sub	sp, #8
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	460b      	mov	r3, r1
 801180c:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 801180e:	887b      	ldrh	r3, [r7, #2]
 8011810:	2201      	movs	r2, #1
 8011812:	4619      	mov	r1, r3
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7f1 fc35 	bl	8003084 <HAL_GPIO_WritePin>
}
 801181a:	bf00      	nop
 801181c:	3708      	adds	r7, #8
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011822:	b580      	push	{r7, lr}
 8011824:	b088      	sub	sp, #32
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 801182e:	887b      	ldrh	r3, [r7, #2]
 8011830:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011832:	2300      	movs	r3, #0
 8011834:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011836:	2301      	movs	r3, #1
 8011838:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 801183a:	f107 030c 	add.w	r3, r7, #12
 801183e:	4619      	mov	r1, r3
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7f1 fa73 	bl	8002d2c <HAL_GPIO_Init>
}
 8011846:	bf00      	nop
 8011848:	3720      	adds	r7, #32
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b088      	sub	sp, #32
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	460b      	mov	r3, r1
 8011858:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 801185a:	887b      	ldrh	r3, [r7, #2]
 801185c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801185e:	2301      	movs	r3, #1
 8011860:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011862:	2300      	movs	r3, #0
 8011864:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011866:	2302      	movs	r3, #2
 8011868:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 801186a:	f107 030c 	add.w	r3, r7, #12
 801186e:	4619      	mov	r1, r3
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7f1 fa5b 	bl	8002d2c <HAL_GPIO_Init>
}
 8011876:	bf00      	nop
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
	...

08011880 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8011880:	b480      	push	{r7}
 8011882:	af00      	add	r7, sp, #0
 8011884:	4b03      	ldr	r3, [pc, #12]	; (8011894 <width+0x14>)
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	4618      	mov	r0, r3
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	20000014 	.word	0x20000014

08011898 <height>:

uint16_t height(void)
{ return _height; }
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
 801189c:	4b03      	ldr	r3, [pc, #12]	; (80118ac <height+0x14>)
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	4618      	mov	r0, r3
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	20000016 	.word	0x20000016

080118b0 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80118ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80118c2:	b21a      	sxth	r2, r3
 80118c4:	88fb      	ldrh	r3, [r7, #6]
 80118c6:	005b      	lsls	r3, r3, #1
 80118c8:	b21b      	sxth	r3, r3
 80118ca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80118ce:	b21b      	sxth	r3, r3
 80118d0:	4313      	orrs	r3, r2
 80118d2:	b21a      	sxth	r2, r3
 80118d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d8:	f003 0301 	and.w	r3, r3, #1
 80118dc:	b21b      	sxth	r3, r3
 80118de:	4313      	orrs	r3, r2
 80118e0:	b21b      	sxth	r3, r3
 80118e2:	b29b      	uxth	r3, r3
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	4603      	mov	r3, r0
 80118f8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80118fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011902:	b21a      	sxth	r2, r3
 8011904:	88fb      	ldrh	r3, [r7, #6]
 8011906:	115b      	asrs	r3, r3, #5
 8011908:	b21b      	sxth	r3, r3
 801190a:	f003 0320 	and.w	r3, r3, #32
 801190e:	b21b      	sxth	r3, r3
 8011910:	4313      	orrs	r3, r2
 8011912:	b21a      	sxth	r2, r3
 8011914:	88fb      	ldrh	r3, [r7, #6]
 8011916:	105b      	asrs	r3, r3, #1
 8011918:	b21b      	sxth	r3, r3
 801191a:	f003 031f 	and.w	r3, r3, #31
 801191e:	b21b      	sxth	r3, r3
 8011920:	4313      	orrs	r3, r2
 8011922:	b21b      	sxth	r3, r3
 8011924:	b29b      	uxth	r3, r3
}
 8011926:	4618      	mov	r0, r3
 8011928:	370c      	adds	r7, #12
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr

08011932 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8011932:	b480      	push	{r7}
 8011934:	b083      	sub	sp, #12
 8011936:	af00      	add	r7, sp, #0
 8011938:	4603      	mov	r3, r0
 801193a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 801193c:	88fb      	ldrh	r3, [r7, #6]
 801193e:	121b      	asrs	r3, r3, #8
 8011940:	b2db      	uxtb	r3, r3
 8011942:	f023 0307 	bic.w	r3, r3, #7
 8011946:	b2db      	uxtb	r3, r3
}
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	4603      	mov	r3, r0
 801195c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 801195e:	88fb      	ldrh	r3, [r7, #6]
 8011960:	10db      	asrs	r3, r3, #3
 8011962:	b2db      	uxtb	r3, r3
 8011964:	f023 0303 	bic.w	r3, r3, #3
 8011968:	b2db      	uxtb	r3, r3
}
 801196a:	4618      	mov	r0, r3
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8011976:	b480      	push	{r7}
 8011978:	b083      	sub	sp, #12
 801197a:	af00      	add	r7, sp, #0
 801197c:	4603      	mov	r3, r0
 801197e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8011980:	88fb      	ldrh	r3, [r7, #6]
 8011982:	00db      	lsls	r3, r3, #3
 8011984:	b2db      	uxtb	r3, r3
}
 8011986:	4618      	mov	r0, r3
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
	...

08011994 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	4603      	mov	r3, r0
 801199c:	71fb      	strb	r3, [r7, #7]
 801199e:	460b      	mov	r3, r1
 80119a0:	71bb      	strb	r3, [r7, #6]
 80119a2:	4613      	mov	r3, r2
 80119a4:	717b      	strb	r3, [r7, #5]
 80119a6:	79fb      	ldrb	r3, [r7, #7]
 80119a8:	021b      	lsls	r3, r3, #8
 80119aa:	b21a      	sxth	r2, r3
 80119ac:	4b0b      	ldr	r3, [pc, #44]	; (80119dc <color565+0x48>)
 80119ae:	4013      	ands	r3, r2
 80119b0:	b21a      	sxth	r2, r3
 80119b2:	79bb      	ldrb	r3, [r7, #6]
 80119b4:	00db      	lsls	r3, r3, #3
 80119b6:	b21b      	sxth	r3, r3
 80119b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80119bc:	b21b      	sxth	r3, r3
 80119be:	4313      	orrs	r3, r2
 80119c0:	b21a      	sxth	r2, r3
 80119c2:	797b      	ldrb	r3, [r7, #5]
 80119c4:	08db      	lsrs	r3, r3, #3
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	b21b      	sxth	r3, r3
 80119ca:	4313      	orrs	r3, r2
 80119cc:	b21b      	sxth	r3, r3
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	fffff800 	.word	0xfffff800

080119e0 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b086      	sub	sp, #24
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	4603      	mov	r3, r0
 80119e8:	460a      	mov	r2, r1
 80119ea:	80fb      	strh	r3, [r7, #6]
 80119ec:	4613      	mov	r3, r2
 80119ee:	80bb      	strh	r3, [r7, #4]
 80119f0:	f107 020e 	add.w	r2, r7, #14
 80119f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80119f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80119fc:	2301      	movs	r3, #1
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	2301      	movs	r3, #1
 8011a02:	f002 f923 	bl	8013c4c <readGRAM>
 8011a06:	89fb      	ldrh	r3, [r7, #14]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3710      	adds	r7, #16
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	4603      	mov	r3, r0
 8011a18:	460a      	mov	r2, r1
 8011a1a:	80fb      	strh	r3, [r7, #6]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	80bb      	strh	r3, [r7, #4]
 8011a20:	88ba      	ldrh	r2, [r7, #4]
 8011a22:	88fb      	ldrh	r3, [r7, #6]
 8011a24:	4611      	mov	r1, r2
 8011a26:	4618      	mov	r0, r3
 8011a28:	f000 fa2c 	bl	8011e84 <writecmddata>
 8011a2c:	bf00      	nop
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	6039      	str	r1, [r7, #0]
 8011a3e:	80fb      	strh	r3, [r7, #6]
 8011a40:	4613      	mov	r3, r2
 8011a42:	717b      	strb	r3, [r7, #5]
 8011a44:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011a48:	88fb      	ldrh	r3, [r7, #6]
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 fc5f 	bl	8012310 <WriteCmdParamN>
 8011a52:	bf00      	nop
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
	...

08011a5c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8011a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a64:	4813      	ldr	r0, [pc, #76]	; (8011ab4 <setReadDir+0x58>)
 8011a66:	f7ff fedc 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8011a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a6e:	4812      	ldr	r0, [pc, #72]	; (8011ab8 <setReadDir+0x5c>)
 8011a70:	f7ff fed7 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8011a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a78:	480e      	ldr	r0, [pc, #56]	; (8011ab4 <setReadDir+0x58>)
 8011a7a:	f7ff fed2 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8011a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a82:	480e      	ldr	r0, [pc, #56]	; (8011abc <setReadDir+0x60>)
 8011a84:	f7ff fecd 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8011a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011a8c:	4809      	ldr	r0, [pc, #36]	; (8011ab4 <setReadDir+0x58>)
 8011a8e:	f7ff fec8 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8011a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a96:	4809      	ldr	r0, [pc, #36]	; (8011abc <setReadDir+0x60>)
 8011a98:	f7ff fec3 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8011a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011aa0:	4806      	ldr	r0, [pc, #24]	; (8011abc <setReadDir+0x60>)
 8011aa2:	f7ff febe 	bl	8011822 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8011aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011aaa:	4802      	ldr	r0, [pc, #8]	; (8011ab4 <setReadDir+0x58>)
 8011aac:	f7ff feb9 	bl	8011822 <PIN_INPUT>
}
 8011ab0:	bf00      	nop
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	40021400 	.word	0x40021400
 8011ab8:	40020c00 	.word	0x40020c00
 8011abc:	40021000 	.word	0x40021000

08011ac0 <setWriteDir>:

void setWriteDir (void)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8011ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011ac8:	4813      	ldr	r0, [pc, #76]	; (8011b18 <setWriteDir+0x58>)
 8011aca:	f7ff fec0 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8011ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011ad2:	4812      	ldr	r0, [pc, #72]	; (8011b1c <setWriteDir+0x5c>)
 8011ad4:	f7ff febb 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8011ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011adc:	480e      	ldr	r0, [pc, #56]	; (8011b18 <setWriteDir+0x58>)
 8011ade:	f7ff feb6 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8011ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011ae6:	480e      	ldr	r0, [pc, #56]	; (8011b20 <setWriteDir+0x60>)
 8011ae8:	f7ff feb1 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8011aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011af0:	4809      	ldr	r0, [pc, #36]	; (8011b18 <setWriteDir+0x58>)
 8011af2:	f7ff feac 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8011af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011afa:	4809      	ldr	r0, [pc, #36]	; (8011b20 <setWriteDir+0x60>)
 8011afc:	f7ff fea7 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8011b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b04:	4806      	ldr	r0, [pc, #24]	; (8011b20 <setWriteDir+0x60>)
 8011b06:	f7ff fea2 	bl	801184e <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8011b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011b0e:	4802      	ldr	r0, [pc, #8]	; (8011b18 <setWriteDir+0x58>)
 8011b10:	f7ff fe9d 	bl	801184e <PIN_OUTPUT>
}
 8011b14:	bf00      	nop
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	40021400 	.word	0x40021400
 8011b1c:	40020c00 	.word	0x40020c00
 8011b20:	40021000 	.word	0x40021000

08011b24 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8011b2e:	88fb      	ldrh	r3, [r7, #6]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fefe 	bl	8011932 <color565_to_r>
 8011b36:	4603      	mov	r3, r0
 8011b38:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8011b3a:	88fb      	ldrh	r3, [r7, #6]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7ff ff09 	bl	8011954 <color565_to_g>
 8011b42:	4603      	mov	r3, r0
 8011b44:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8011b46:	88fb      	ldrh	r3, [r7, #6]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff ff14 	bl	8011976 <color565_to_b>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	737b      	strb	r3, [r7, #13]
    write8(r);
 8011b52:	4bc3      	ldr	r3, [pc, #780]	; (8011e60 <write24+0x33c>)
 8011b54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011b58:	619a      	str	r2, [r3, #24]
 8011b5a:	4bc2      	ldr	r3, [pc, #776]	; (8011e64 <write24+0x340>)
 8011b5c:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011b60:	619a      	str	r2, [r3, #24]
 8011b62:	4bc1      	ldr	r3, [pc, #772]	; (8011e68 <write24+0x344>)
 8011b64:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011b68:	619a      	str	r2, [r3, #24]
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	039b      	lsls	r3, r3, #14
 8011b6e:	4abc      	ldr	r2, [pc, #752]	; (8011e60 <write24+0x33c>)
 8011b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b74:	6193      	str	r3, [r2, #24]
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	029b      	lsls	r3, r3, #10
 8011b7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011b7e:	7bfb      	ldrb	r3, [r7, #15]
 8011b80:	019b      	lsls	r3, r3, #6
 8011b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b86:	431a      	orrs	r2, r3
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b90:	431a      	orrs	r2, r3
 8011b92:	4bb4      	ldr	r3, [pc, #720]	; (8011e64 <write24+0x340>)
 8011b94:	619a      	str	r2, [r3, #24]
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
 8011b98:	031b      	lsls	r3, r3, #12
 8011b9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	035b      	lsls	r3, r3, #13
 8011ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
 8011baa:	029b      	lsls	r3, r3, #10
 8011bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011bb0:	431a      	orrs	r2, r3
 8011bb2:	7bfb      	ldrb	r3, [r7, #15]
 8011bb4:	019b      	lsls	r3, r3, #6
 8011bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011bba:	431a      	orrs	r2, r3
 8011bbc:	4baa      	ldr	r3, [pc, #680]	; (8011e68 <write24+0x344>)
 8011bbe:	619a      	str	r2, [r3, #24]
 8011bc0:	2101      	movs	r1, #1
 8011bc2:	48aa      	ldr	r0, [pc, #680]	; (8011e6c <write24+0x348>)
 8011bc4:	f7ff fe0d 	bl	80117e2 <PIN_LOW>
 8011bc8:	2101      	movs	r1, #1
 8011bca:	48a8      	ldr	r0, [pc, #672]	; (8011e6c <write24+0x348>)
 8011bcc:	f7ff fe09 	bl	80117e2 <PIN_LOW>
 8011bd0:	2101      	movs	r1, #1
 8011bd2:	48a6      	ldr	r0, [pc, #664]	; (8011e6c <write24+0x348>)
 8011bd4:	f7ff fe05 	bl	80117e2 <PIN_LOW>
 8011bd8:	2101      	movs	r1, #1
 8011bda:	48a4      	ldr	r0, [pc, #656]	; (8011e6c <write24+0x348>)
 8011bdc:	f7ff fe01 	bl	80117e2 <PIN_LOW>
 8011be0:	2101      	movs	r1, #1
 8011be2:	48a2      	ldr	r0, [pc, #648]	; (8011e6c <write24+0x348>)
 8011be4:	f7ff fdfd 	bl	80117e2 <PIN_LOW>
 8011be8:	2101      	movs	r1, #1
 8011bea:	48a0      	ldr	r0, [pc, #640]	; (8011e6c <write24+0x348>)
 8011bec:	f7ff fdf9 	bl	80117e2 <PIN_LOW>
 8011bf0:	2101      	movs	r1, #1
 8011bf2:	489e      	ldr	r0, [pc, #632]	; (8011e6c <write24+0x348>)
 8011bf4:	f7ff fdf5 	bl	80117e2 <PIN_LOW>
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	489c      	ldr	r0, [pc, #624]	; (8011e6c <write24+0x348>)
 8011bfc:	f7ff fdf1 	bl	80117e2 <PIN_LOW>
 8011c00:	2101      	movs	r1, #1
 8011c02:	489a      	ldr	r0, [pc, #616]	; (8011e6c <write24+0x348>)
 8011c04:	f7ff fded 	bl	80117e2 <PIN_LOW>
 8011c08:	2101      	movs	r1, #1
 8011c0a:	4898      	ldr	r0, [pc, #608]	; (8011e6c <write24+0x348>)
 8011c0c:	f7ff fde9 	bl	80117e2 <PIN_LOW>
 8011c10:	2101      	movs	r1, #1
 8011c12:	4896      	ldr	r0, [pc, #600]	; (8011e6c <write24+0x348>)
 8011c14:	f7ff fde5 	bl	80117e2 <PIN_LOW>
 8011c18:	2101      	movs	r1, #1
 8011c1a:	4894      	ldr	r0, [pc, #592]	; (8011e6c <write24+0x348>)
 8011c1c:	f7ff fde1 	bl	80117e2 <PIN_LOW>
 8011c20:	2101      	movs	r1, #1
 8011c22:	4892      	ldr	r0, [pc, #584]	; (8011e6c <write24+0x348>)
 8011c24:	f7ff fddd 	bl	80117e2 <PIN_LOW>
 8011c28:	2101      	movs	r1, #1
 8011c2a:	4890      	ldr	r0, [pc, #576]	; (8011e6c <write24+0x348>)
 8011c2c:	f7ff fdd9 	bl	80117e2 <PIN_LOW>
 8011c30:	2101      	movs	r1, #1
 8011c32:	488e      	ldr	r0, [pc, #568]	; (8011e6c <write24+0x348>)
 8011c34:	f7ff fdd5 	bl	80117e2 <PIN_LOW>
 8011c38:	2101      	movs	r1, #1
 8011c3a:	488c      	ldr	r0, [pc, #560]	; (8011e6c <write24+0x348>)
 8011c3c:	f7ff fdd1 	bl	80117e2 <PIN_LOW>
 8011c40:	2101      	movs	r1, #1
 8011c42:	488a      	ldr	r0, [pc, #552]	; (8011e6c <write24+0x348>)
 8011c44:	f7ff fdcd 	bl	80117e2 <PIN_LOW>
 8011c48:	2101      	movs	r1, #1
 8011c4a:	4888      	ldr	r0, [pc, #544]	; (8011e6c <write24+0x348>)
 8011c4c:	f7ff fdd9 	bl	8011802 <PIN_HIGH>
 8011c50:	2101      	movs	r1, #1
 8011c52:	4886      	ldr	r0, [pc, #536]	; (8011e6c <write24+0x348>)
 8011c54:	f7ff fdd5 	bl	8011802 <PIN_HIGH>
    write8(g);
 8011c58:	4b81      	ldr	r3, [pc, #516]	; (8011e60 <write24+0x33c>)
 8011c5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c5e:	619a      	str	r2, [r3, #24]
 8011c60:	4b80      	ldr	r3, [pc, #512]	; (8011e64 <write24+0x340>)
 8011c62:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011c66:	619a      	str	r2, [r3, #24]
 8011c68:	4b7f      	ldr	r3, [pc, #508]	; (8011e68 <write24+0x344>)
 8011c6a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011c6e:	619a      	str	r2, [r3, #24]
 8011c70:	7bbb      	ldrb	r3, [r7, #14]
 8011c72:	039b      	lsls	r3, r3, #14
 8011c74:	4a7a      	ldr	r2, [pc, #488]	; (8011e60 <write24+0x33c>)
 8011c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c7a:	6193      	str	r3, [r2, #24]
 8011c7c:	7bbb      	ldrb	r3, [r7, #14]
 8011c7e:	029b      	lsls	r3, r3, #10
 8011c80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011c84:	7bbb      	ldrb	r3, [r7, #14]
 8011c86:	019b      	lsls	r3, r3, #6
 8011c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c8c:	431a      	orrs	r2, r3
 8011c8e:	7bbb      	ldrb	r3, [r7, #14]
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c96:	431a      	orrs	r2, r3
 8011c98:	4b72      	ldr	r3, [pc, #456]	; (8011e64 <write24+0x340>)
 8011c9a:	619a      	str	r2, [r3, #24]
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	031b      	lsls	r3, r3, #12
 8011ca0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011ca4:	7bbb      	ldrb	r3, [r7, #14]
 8011ca6:	035b      	lsls	r3, r3, #13
 8011ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cac:	431a      	orrs	r2, r3
 8011cae:	7bbb      	ldrb	r3, [r7, #14]
 8011cb0:	029b      	lsls	r3, r3, #10
 8011cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cb6:	431a      	orrs	r2, r3
 8011cb8:	7bbb      	ldrb	r3, [r7, #14]
 8011cba:	019b      	lsls	r3, r3, #6
 8011cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011cc0:	431a      	orrs	r2, r3
 8011cc2:	4b69      	ldr	r3, [pc, #420]	; (8011e68 <write24+0x344>)
 8011cc4:	619a      	str	r2, [r3, #24]
 8011cc6:	2101      	movs	r1, #1
 8011cc8:	4868      	ldr	r0, [pc, #416]	; (8011e6c <write24+0x348>)
 8011cca:	f7ff fd8a 	bl	80117e2 <PIN_LOW>
 8011cce:	2101      	movs	r1, #1
 8011cd0:	4866      	ldr	r0, [pc, #408]	; (8011e6c <write24+0x348>)
 8011cd2:	f7ff fd86 	bl	80117e2 <PIN_LOW>
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	4864      	ldr	r0, [pc, #400]	; (8011e6c <write24+0x348>)
 8011cda:	f7ff fd82 	bl	80117e2 <PIN_LOW>
 8011cde:	2101      	movs	r1, #1
 8011ce0:	4862      	ldr	r0, [pc, #392]	; (8011e6c <write24+0x348>)
 8011ce2:	f7ff fd7e 	bl	80117e2 <PIN_LOW>
 8011ce6:	2101      	movs	r1, #1
 8011ce8:	4860      	ldr	r0, [pc, #384]	; (8011e6c <write24+0x348>)
 8011cea:	f7ff fd7a 	bl	80117e2 <PIN_LOW>
 8011cee:	2101      	movs	r1, #1
 8011cf0:	485e      	ldr	r0, [pc, #376]	; (8011e6c <write24+0x348>)
 8011cf2:	f7ff fd76 	bl	80117e2 <PIN_LOW>
 8011cf6:	2101      	movs	r1, #1
 8011cf8:	485c      	ldr	r0, [pc, #368]	; (8011e6c <write24+0x348>)
 8011cfa:	f7ff fd72 	bl	80117e2 <PIN_LOW>
 8011cfe:	2101      	movs	r1, #1
 8011d00:	485a      	ldr	r0, [pc, #360]	; (8011e6c <write24+0x348>)
 8011d02:	f7ff fd6e 	bl	80117e2 <PIN_LOW>
 8011d06:	2101      	movs	r1, #1
 8011d08:	4858      	ldr	r0, [pc, #352]	; (8011e6c <write24+0x348>)
 8011d0a:	f7ff fd6a 	bl	80117e2 <PIN_LOW>
 8011d0e:	2101      	movs	r1, #1
 8011d10:	4856      	ldr	r0, [pc, #344]	; (8011e6c <write24+0x348>)
 8011d12:	f7ff fd66 	bl	80117e2 <PIN_LOW>
 8011d16:	2101      	movs	r1, #1
 8011d18:	4854      	ldr	r0, [pc, #336]	; (8011e6c <write24+0x348>)
 8011d1a:	f7ff fd62 	bl	80117e2 <PIN_LOW>
 8011d1e:	2101      	movs	r1, #1
 8011d20:	4852      	ldr	r0, [pc, #328]	; (8011e6c <write24+0x348>)
 8011d22:	f7ff fd5e 	bl	80117e2 <PIN_LOW>
 8011d26:	2101      	movs	r1, #1
 8011d28:	4850      	ldr	r0, [pc, #320]	; (8011e6c <write24+0x348>)
 8011d2a:	f7ff fd5a 	bl	80117e2 <PIN_LOW>
 8011d2e:	2101      	movs	r1, #1
 8011d30:	484e      	ldr	r0, [pc, #312]	; (8011e6c <write24+0x348>)
 8011d32:	f7ff fd56 	bl	80117e2 <PIN_LOW>
 8011d36:	2101      	movs	r1, #1
 8011d38:	484c      	ldr	r0, [pc, #304]	; (8011e6c <write24+0x348>)
 8011d3a:	f7ff fd52 	bl	80117e2 <PIN_LOW>
 8011d3e:	2101      	movs	r1, #1
 8011d40:	484a      	ldr	r0, [pc, #296]	; (8011e6c <write24+0x348>)
 8011d42:	f7ff fd4e 	bl	80117e2 <PIN_LOW>
 8011d46:	2101      	movs	r1, #1
 8011d48:	4848      	ldr	r0, [pc, #288]	; (8011e6c <write24+0x348>)
 8011d4a:	f7ff fd4a 	bl	80117e2 <PIN_LOW>
 8011d4e:	2101      	movs	r1, #1
 8011d50:	4846      	ldr	r0, [pc, #280]	; (8011e6c <write24+0x348>)
 8011d52:	f7ff fd56 	bl	8011802 <PIN_HIGH>
 8011d56:	2101      	movs	r1, #1
 8011d58:	4844      	ldr	r0, [pc, #272]	; (8011e6c <write24+0x348>)
 8011d5a:	f7ff fd52 	bl	8011802 <PIN_HIGH>
    write8(b);
 8011d5e:	4b40      	ldr	r3, [pc, #256]	; (8011e60 <write24+0x33c>)
 8011d60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d64:	619a      	str	r2, [r3, #24]
 8011d66:	4b3f      	ldr	r3, [pc, #252]	; (8011e64 <write24+0x340>)
 8011d68:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011d6c:	619a      	str	r2, [r3, #24]
 8011d6e:	4b3e      	ldr	r3, [pc, #248]	; (8011e68 <write24+0x344>)
 8011d70:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011d74:	619a      	str	r2, [r3, #24]
 8011d76:	7b7b      	ldrb	r3, [r7, #13]
 8011d78:	039b      	lsls	r3, r3, #14
 8011d7a:	4a39      	ldr	r2, [pc, #228]	; (8011e60 <write24+0x33c>)
 8011d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d80:	6193      	str	r3, [r2, #24]
 8011d82:	7b7b      	ldrb	r3, [r7, #13]
 8011d84:	029b      	lsls	r3, r3, #10
 8011d86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011d8a:	7b7b      	ldrb	r3, [r7, #13]
 8011d8c:	019b      	lsls	r3, r3, #6
 8011d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d92:	431a      	orrs	r2, r3
 8011d94:	7b7b      	ldrb	r3, [r7, #13]
 8011d96:	00db      	lsls	r3, r3, #3
 8011d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011d9c:	431a      	orrs	r2, r3
 8011d9e:	4b31      	ldr	r3, [pc, #196]	; (8011e64 <write24+0x340>)
 8011da0:	619a      	str	r2, [r3, #24]
 8011da2:	7b7b      	ldrb	r3, [r7, #13]
 8011da4:	031b      	lsls	r3, r3, #12
 8011da6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011daa:	7b7b      	ldrb	r3, [r7, #13]
 8011dac:	035b      	lsls	r3, r3, #13
 8011dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011db2:	431a      	orrs	r2, r3
 8011db4:	7b7b      	ldrb	r3, [r7, #13]
 8011db6:	029b      	lsls	r3, r3, #10
 8011db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011dbc:	431a      	orrs	r2, r3
 8011dbe:	7b7b      	ldrb	r3, [r7, #13]
 8011dc0:	019b      	lsls	r3, r3, #6
 8011dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011dc6:	431a      	orrs	r2, r3
 8011dc8:	4b27      	ldr	r3, [pc, #156]	; (8011e68 <write24+0x344>)
 8011dca:	619a      	str	r2, [r3, #24]
 8011dcc:	2101      	movs	r1, #1
 8011dce:	4827      	ldr	r0, [pc, #156]	; (8011e6c <write24+0x348>)
 8011dd0:	f7ff fd07 	bl	80117e2 <PIN_LOW>
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	4825      	ldr	r0, [pc, #148]	; (8011e6c <write24+0x348>)
 8011dd8:	f7ff fd03 	bl	80117e2 <PIN_LOW>
 8011ddc:	2101      	movs	r1, #1
 8011dde:	4823      	ldr	r0, [pc, #140]	; (8011e6c <write24+0x348>)
 8011de0:	f7ff fcff 	bl	80117e2 <PIN_LOW>
 8011de4:	2101      	movs	r1, #1
 8011de6:	4821      	ldr	r0, [pc, #132]	; (8011e6c <write24+0x348>)
 8011de8:	f7ff fcfb 	bl	80117e2 <PIN_LOW>
 8011dec:	2101      	movs	r1, #1
 8011dee:	481f      	ldr	r0, [pc, #124]	; (8011e6c <write24+0x348>)
 8011df0:	f7ff fcf7 	bl	80117e2 <PIN_LOW>
 8011df4:	2101      	movs	r1, #1
 8011df6:	481d      	ldr	r0, [pc, #116]	; (8011e6c <write24+0x348>)
 8011df8:	f7ff fcf3 	bl	80117e2 <PIN_LOW>
 8011dfc:	2101      	movs	r1, #1
 8011dfe:	481b      	ldr	r0, [pc, #108]	; (8011e6c <write24+0x348>)
 8011e00:	f7ff fcef 	bl	80117e2 <PIN_LOW>
 8011e04:	2101      	movs	r1, #1
 8011e06:	4819      	ldr	r0, [pc, #100]	; (8011e6c <write24+0x348>)
 8011e08:	f7ff fceb 	bl	80117e2 <PIN_LOW>
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	4817      	ldr	r0, [pc, #92]	; (8011e6c <write24+0x348>)
 8011e10:	f7ff fce7 	bl	80117e2 <PIN_LOW>
 8011e14:	2101      	movs	r1, #1
 8011e16:	4815      	ldr	r0, [pc, #84]	; (8011e6c <write24+0x348>)
 8011e18:	f7ff fce3 	bl	80117e2 <PIN_LOW>
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	4813      	ldr	r0, [pc, #76]	; (8011e6c <write24+0x348>)
 8011e20:	f7ff fcdf 	bl	80117e2 <PIN_LOW>
 8011e24:	2101      	movs	r1, #1
 8011e26:	4811      	ldr	r0, [pc, #68]	; (8011e6c <write24+0x348>)
 8011e28:	f7ff fcdb 	bl	80117e2 <PIN_LOW>
 8011e2c:	2101      	movs	r1, #1
 8011e2e:	480f      	ldr	r0, [pc, #60]	; (8011e6c <write24+0x348>)
 8011e30:	f7ff fcd7 	bl	80117e2 <PIN_LOW>
 8011e34:	2101      	movs	r1, #1
 8011e36:	480d      	ldr	r0, [pc, #52]	; (8011e6c <write24+0x348>)
 8011e38:	f7ff fcd3 	bl	80117e2 <PIN_LOW>
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	480b      	ldr	r0, [pc, #44]	; (8011e6c <write24+0x348>)
 8011e40:	f7ff fccf 	bl	80117e2 <PIN_LOW>
 8011e44:	2101      	movs	r1, #1
 8011e46:	4809      	ldr	r0, [pc, #36]	; (8011e6c <write24+0x348>)
 8011e48:	f7ff fccb 	bl	80117e2 <PIN_LOW>
 8011e4c:	2101      	movs	r1, #1
 8011e4e:	4807      	ldr	r0, [pc, #28]	; (8011e6c <write24+0x348>)
 8011e50:	f7ff fcc7 	bl	80117e2 <PIN_LOW>
 8011e54:	2101      	movs	r1, #1
 8011e56:	4805      	ldr	r0, [pc, #20]	; (8011e6c <write24+0x348>)
 8011e58:	f7ff fcd3 	bl	8011802 <PIN_HIGH>
 8011e5c:	2101      	movs	r1, #1
 8011e5e:	e007      	b.n	8011e70 <write24+0x34c>
 8011e60:	40020c00 	.word	0x40020c00
 8011e64:	40021000 	.word	0x40021000
 8011e68:	40021400 	.word	0x40021400
 8011e6c:	40020800 	.word	0x40020800
 8011e70:	4803      	ldr	r0, [pc, #12]	; (8011e80 <write24+0x35c>)
 8011e72:	f7ff fcc6 	bl	8011802 <PIN_HIGH>
}
 8011e76:	bf00      	nop
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	40020800 	.word	0x40020800

08011e84 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	460a      	mov	r2, r1
 8011e8e:	80fb      	strh	r3, [r7, #6]
 8011e90:	4613      	mov	r3, r2
 8011e92:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8011e94:	2108      	movs	r1, #8
 8011e96:	48c3      	ldr	r0, [pc, #780]	; (80121a4 <writecmddata+0x320>)
 8011e98:	f7ff fca3 	bl	80117e2 <PIN_LOW>
    WriteCmd(cmd);
 8011e9c:	2120      	movs	r1, #32
 8011e9e:	48c2      	ldr	r0, [pc, #776]	; (80121a8 <writecmddata+0x324>)
 8011ea0:	f7ff fc9f 	bl	80117e2 <PIN_LOW>
 8011ea4:	88fb      	ldrh	r3, [r7, #6]
 8011ea6:	0a1b      	lsrs	r3, r3, #8
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	73fb      	strb	r3, [r7, #15]
 8011eac:	88fb      	ldrh	r3, [r7, #6]
 8011eae:	73bb      	strb	r3, [r7, #14]
 8011eb0:	4bbd      	ldr	r3, [pc, #756]	; (80121a8 <writecmddata+0x324>)
 8011eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011eb6:	619a      	str	r2, [r3, #24]
 8011eb8:	4bbc      	ldr	r3, [pc, #752]	; (80121ac <writecmddata+0x328>)
 8011eba:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011ebe:	619a      	str	r2, [r3, #24]
 8011ec0:	4bb8      	ldr	r3, [pc, #736]	; (80121a4 <writecmddata+0x320>)
 8011ec2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011ec6:	619a      	str	r2, [r3, #24]
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	039b      	lsls	r3, r3, #14
 8011ecc:	4ab6      	ldr	r2, [pc, #728]	; (80121a8 <writecmddata+0x324>)
 8011ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ed2:	6193      	str	r3, [r2, #24]
 8011ed4:	7bfb      	ldrb	r3, [r7, #15]
 8011ed6:	029b      	lsls	r3, r3, #10
 8011ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011edc:	7bfb      	ldrb	r3, [r7, #15]
 8011ede:	019b      	lsls	r3, r3, #6
 8011ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ee4:	431a      	orrs	r2, r3
 8011ee6:	7bfb      	ldrb	r3, [r7, #15]
 8011ee8:	00db      	lsls	r3, r3, #3
 8011eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011eee:	431a      	orrs	r2, r3
 8011ef0:	4bae      	ldr	r3, [pc, #696]	; (80121ac <writecmddata+0x328>)
 8011ef2:	619a      	str	r2, [r3, #24]
 8011ef4:	7bfb      	ldrb	r3, [r7, #15]
 8011ef6:	031b      	lsls	r3, r3, #12
 8011ef8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011efc:	7bfb      	ldrb	r3, [r7, #15]
 8011efe:	035b      	lsls	r3, r3, #13
 8011f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f04:	431a      	orrs	r2, r3
 8011f06:	7bfb      	ldrb	r3, [r7, #15]
 8011f08:	029b      	lsls	r3, r3, #10
 8011f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f0e:	431a      	orrs	r2, r3
 8011f10:	7bfb      	ldrb	r3, [r7, #15]
 8011f12:	019b      	lsls	r3, r3, #6
 8011f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f18:	431a      	orrs	r2, r3
 8011f1a:	4ba2      	ldr	r3, [pc, #648]	; (80121a4 <writecmddata+0x320>)
 8011f1c:	619a      	str	r2, [r3, #24]
 8011f1e:	2101      	movs	r1, #1
 8011f20:	48a3      	ldr	r0, [pc, #652]	; (80121b0 <writecmddata+0x32c>)
 8011f22:	f7ff fc5e 	bl	80117e2 <PIN_LOW>
 8011f26:	2101      	movs	r1, #1
 8011f28:	48a1      	ldr	r0, [pc, #644]	; (80121b0 <writecmddata+0x32c>)
 8011f2a:	f7ff fc5a 	bl	80117e2 <PIN_LOW>
 8011f2e:	2101      	movs	r1, #1
 8011f30:	489f      	ldr	r0, [pc, #636]	; (80121b0 <writecmddata+0x32c>)
 8011f32:	f7ff fc56 	bl	80117e2 <PIN_LOW>
 8011f36:	2101      	movs	r1, #1
 8011f38:	489d      	ldr	r0, [pc, #628]	; (80121b0 <writecmddata+0x32c>)
 8011f3a:	f7ff fc52 	bl	80117e2 <PIN_LOW>
 8011f3e:	2101      	movs	r1, #1
 8011f40:	489b      	ldr	r0, [pc, #620]	; (80121b0 <writecmddata+0x32c>)
 8011f42:	f7ff fc4e 	bl	80117e2 <PIN_LOW>
 8011f46:	2101      	movs	r1, #1
 8011f48:	4899      	ldr	r0, [pc, #612]	; (80121b0 <writecmddata+0x32c>)
 8011f4a:	f7ff fc4a 	bl	80117e2 <PIN_LOW>
 8011f4e:	2101      	movs	r1, #1
 8011f50:	4897      	ldr	r0, [pc, #604]	; (80121b0 <writecmddata+0x32c>)
 8011f52:	f7ff fc46 	bl	80117e2 <PIN_LOW>
 8011f56:	2101      	movs	r1, #1
 8011f58:	4895      	ldr	r0, [pc, #596]	; (80121b0 <writecmddata+0x32c>)
 8011f5a:	f7ff fc42 	bl	80117e2 <PIN_LOW>
 8011f5e:	2101      	movs	r1, #1
 8011f60:	4893      	ldr	r0, [pc, #588]	; (80121b0 <writecmddata+0x32c>)
 8011f62:	f7ff fc3e 	bl	80117e2 <PIN_LOW>
 8011f66:	2101      	movs	r1, #1
 8011f68:	4891      	ldr	r0, [pc, #580]	; (80121b0 <writecmddata+0x32c>)
 8011f6a:	f7ff fc3a 	bl	80117e2 <PIN_LOW>
 8011f6e:	2101      	movs	r1, #1
 8011f70:	488f      	ldr	r0, [pc, #572]	; (80121b0 <writecmddata+0x32c>)
 8011f72:	f7ff fc36 	bl	80117e2 <PIN_LOW>
 8011f76:	2101      	movs	r1, #1
 8011f78:	488d      	ldr	r0, [pc, #564]	; (80121b0 <writecmddata+0x32c>)
 8011f7a:	f7ff fc32 	bl	80117e2 <PIN_LOW>
 8011f7e:	2101      	movs	r1, #1
 8011f80:	488b      	ldr	r0, [pc, #556]	; (80121b0 <writecmddata+0x32c>)
 8011f82:	f7ff fc2e 	bl	80117e2 <PIN_LOW>
 8011f86:	2101      	movs	r1, #1
 8011f88:	4889      	ldr	r0, [pc, #548]	; (80121b0 <writecmddata+0x32c>)
 8011f8a:	f7ff fc2a 	bl	80117e2 <PIN_LOW>
 8011f8e:	2101      	movs	r1, #1
 8011f90:	4887      	ldr	r0, [pc, #540]	; (80121b0 <writecmddata+0x32c>)
 8011f92:	f7ff fc26 	bl	80117e2 <PIN_LOW>
 8011f96:	2101      	movs	r1, #1
 8011f98:	4885      	ldr	r0, [pc, #532]	; (80121b0 <writecmddata+0x32c>)
 8011f9a:	f7ff fc22 	bl	80117e2 <PIN_LOW>
 8011f9e:	2101      	movs	r1, #1
 8011fa0:	4883      	ldr	r0, [pc, #524]	; (80121b0 <writecmddata+0x32c>)
 8011fa2:	f7ff fc1e 	bl	80117e2 <PIN_LOW>
 8011fa6:	2101      	movs	r1, #1
 8011fa8:	4881      	ldr	r0, [pc, #516]	; (80121b0 <writecmddata+0x32c>)
 8011faa:	f7ff fc2a 	bl	8011802 <PIN_HIGH>
 8011fae:	2101      	movs	r1, #1
 8011fb0:	487f      	ldr	r0, [pc, #508]	; (80121b0 <writecmddata+0x32c>)
 8011fb2:	f7ff fc26 	bl	8011802 <PIN_HIGH>
 8011fb6:	4b7c      	ldr	r3, [pc, #496]	; (80121a8 <writecmddata+0x324>)
 8011fb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011fbc:	619a      	str	r2, [r3, #24]
 8011fbe:	4b7b      	ldr	r3, [pc, #492]	; (80121ac <writecmddata+0x328>)
 8011fc0:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011fc4:	619a      	str	r2, [r3, #24]
 8011fc6:	4b77      	ldr	r3, [pc, #476]	; (80121a4 <writecmddata+0x320>)
 8011fc8:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011fcc:	619a      	str	r2, [r3, #24]
 8011fce:	7bbb      	ldrb	r3, [r7, #14]
 8011fd0:	039b      	lsls	r3, r3, #14
 8011fd2:	4a75      	ldr	r2, [pc, #468]	; (80121a8 <writecmddata+0x324>)
 8011fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011fd8:	6193      	str	r3, [r2, #24]
 8011fda:	7bbb      	ldrb	r3, [r7, #14]
 8011fdc:	029b      	lsls	r3, r3, #10
 8011fde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011fe2:	7bbb      	ldrb	r3, [r7, #14]
 8011fe4:	019b      	lsls	r3, r3, #6
 8011fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fea:	431a      	orrs	r2, r3
 8011fec:	7bbb      	ldrb	r3, [r7, #14]
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ff4:	431a      	orrs	r2, r3
 8011ff6:	4b6d      	ldr	r3, [pc, #436]	; (80121ac <writecmddata+0x328>)
 8011ff8:	619a      	str	r2, [r3, #24]
 8011ffa:	7bbb      	ldrb	r3, [r7, #14]
 8011ffc:	031b      	lsls	r3, r3, #12
 8011ffe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012002:	7bbb      	ldrb	r3, [r7, #14]
 8012004:	035b      	lsls	r3, r3, #13
 8012006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801200a:	431a      	orrs	r2, r3
 801200c:	7bbb      	ldrb	r3, [r7, #14]
 801200e:	029b      	lsls	r3, r3, #10
 8012010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012014:	431a      	orrs	r2, r3
 8012016:	7bbb      	ldrb	r3, [r7, #14]
 8012018:	019b      	lsls	r3, r3, #6
 801201a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801201e:	431a      	orrs	r2, r3
 8012020:	4b60      	ldr	r3, [pc, #384]	; (80121a4 <writecmddata+0x320>)
 8012022:	619a      	str	r2, [r3, #24]
 8012024:	2101      	movs	r1, #1
 8012026:	4862      	ldr	r0, [pc, #392]	; (80121b0 <writecmddata+0x32c>)
 8012028:	f7ff fbdb 	bl	80117e2 <PIN_LOW>
 801202c:	2101      	movs	r1, #1
 801202e:	4860      	ldr	r0, [pc, #384]	; (80121b0 <writecmddata+0x32c>)
 8012030:	f7ff fbd7 	bl	80117e2 <PIN_LOW>
 8012034:	2101      	movs	r1, #1
 8012036:	485e      	ldr	r0, [pc, #376]	; (80121b0 <writecmddata+0x32c>)
 8012038:	f7ff fbd3 	bl	80117e2 <PIN_LOW>
 801203c:	2101      	movs	r1, #1
 801203e:	485c      	ldr	r0, [pc, #368]	; (80121b0 <writecmddata+0x32c>)
 8012040:	f7ff fbcf 	bl	80117e2 <PIN_LOW>
 8012044:	2101      	movs	r1, #1
 8012046:	485a      	ldr	r0, [pc, #360]	; (80121b0 <writecmddata+0x32c>)
 8012048:	f7ff fbcb 	bl	80117e2 <PIN_LOW>
 801204c:	2101      	movs	r1, #1
 801204e:	4858      	ldr	r0, [pc, #352]	; (80121b0 <writecmddata+0x32c>)
 8012050:	f7ff fbc7 	bl	80117e2 <PIN_LOW>
 8012054:	2101      	movs	r1, #1
 8012056:	4856      	ldr	r0, [pc, #344]	; (80121b0 <writecmddata+0x32c>)
 8012058:	f7ff fbc3 	bl	80117e2 <PIN_LOW>
 801205c:	2101      	movs	r1, #1
 801205e:	4854      	ldr	r0, [pc, #336]	; (80121b0 <writecmddata+0x32c>)
 8012060:	f7ff fbbf 	bl	80117e2 <PIN_LOW>
 8012064:	2101      	movs	r1, #1
 8012066:	4852      	ldr	r0, [pc, #328]	; (80121b0 <writecmddata+0x32c>)
 8012068:	f7ff fbbb 	bl	80117e2 <PIN_LOW>
 801206c:	2101      	movs	r1, #1
 801206e:	4850      	ldr	r0, [pc, #320]	; (80121b0 <writecmddata+0x32c>)
 8012070:	f7ff fbb7 	bl	80117e2 <PIN_LOW>
 8012074:	2101      	movs	r1, #1
 8012076:	484e      	ldr	r0, [pc, #312]	; (80121b0 <writecmddata+0x32c>)
 8012078:	f7ff fbb3 	bl	80117e2 <PIN_LOW>
 801207c:	2101      	movs	r1, #1
 801207e:	484c      	ldr	r0, [pc, #304]	; (80121b0 <writecmddata+0x32c>)
 8012080:	f7ff fbaf 	bl	80117e2 <PIN_LOW>
 8012084:	2101      	movs	r1, #1
 8012086:	484a      	ldr	r0, [pc, #296]	; (80121b0 <writecmddata+0x32c>)
 8012088:	f7ff fbab 	bl	80117e2 <PIN_LOW>
 801208c:	2101      	movs	r1, #1
 801208e:	4848      	ldr	r0, [pc, #288]	; (80121b0 <writecmddata+0x32c>)
 8012090:	f7ff fba7 	bl	80117e2 <PIN_LOW>
 8012094:	2101      	movs	r1, #1
 8012096:	4846      	ldr	r0, [pc, #280]	; (80121b0 <writecmddata+0x32c>)
 8012098:	f7ff fba3 	bl	80117e2 <PIN_LOW>
 801209c:	2101      	movs	r1, #1
 801209e:	4844      	ldr	r0, [pc, #272]	; (80121b0 <writecmddata+0x32c>)
 80120a0:	f7ff fb9f 	bl	80117e2 <PIN_LOW>
 80120a4:	2101      	movs	r1, #1
 80120a6:	4842      	ldr	r0, [pc, #264]	; (80121b0 <writecmddata+0x32c>)
 80120a8:	f7ff fb9b 	bl	80117e2 <PIN_LOW>
 80120ac:	2101      	movs	r1, #1
 80120ae:	4840      	ldr	r0, [pc, #256]	; (80121b0 <writecmddata+0x32c>)
 80120b0:	f7ff fba7 	bl	8011802 <PIN_HIGH>
 80120b4:	2101      	movs	r1, #1
 80120b6:	483e      	ldr	r0, [pc, #248]	; (80121b0 <writecmddata+0x32c>)
 80120b8:	f7ff fba3 	bl	8011802 <PIN_HIGH>
 80120bc:	2120      	movs	r1, #32
 80120be:	483a      	ldr	r0, [pc, #232]	; (80121a8 <writecmddata+0x324>)
 80120c0:	f7ff fb9f 	bl	8011802 <PIN_HIGH>
    WriteData(dat);
 80120c4:	88bb      	ldrh	r3, [r7, #4]
 80120c6:	0a1b      	lsrs	r3, r3, #8
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	737b      	strb	r3, [r7, #13]
 80120cc:	88bb      	ldrh	r3, [r7, #4]
 80120ce:	733b      	strb	r3, [r7, #12]
 80120d0:	4b35      	ldr	r3, [pc, #212]	; (80121a8 <writecmddata+0x324>)
 80120d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80120d6:	619a      	str	r2, [r3, #24]
 80120d8:	4b34      	ldr	r3, [pc, #208]	; (80121ac <writecmddata+0x328>)
 80120da:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80120de:	619a      	str	r2, [r3, #24]
 80120e0:	4b30      	ldr	r3, [pc, #192]	; (80121a4 <writecmddata+0x320>)
 80120e2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80120e6:	619a      	str	r2, [r3, #24]
 80120e8:	7b7b      	ldrb	r3, [r7, #13]
 80120ea:	039b      	lsls	r3, r3, #14
 80120ec:	4a2e      	ldr	r2, [pc, #184]	; (80121a8 <writecmddata+0x324>)
 80120ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120f2:	6193      	str	r3, [r2, #24]
 80120f4:	7b7b      	ldrb	r3, [r7, #13]
 80120f6:	029b      	lsls	r3, r3, #10
 80120f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80120fc:	7b7b      	ldrb	r3, [r7, #13]
 80120fe:	019b      	lsls	r3, r3, #6
 8012100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012104:	431a      	orrs	r2, r3
 8012106:	7b7b      	ldrb	r3, [r7, #13]
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801210e:	431a      	orrs	r2, r3
 8012110:	4b26      	ldr	r3, [pc, #152]	; (80121ac <writecmddata+0x328>)
 8012112:	619a      	str	r2, [r3, #24]
 8012114:	7b7b      	ldrb	r3, [r7, #13]
 8012116:	031b      	lsls	r3, r3, #12
 8012118:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801211c:	7b7b      	ldrb	r3, [r7, #13]
 801211e:	035b      	lsls	r3, r3, #13
 8012120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012124:	431a      	orrs	r2, r3
 8012126:	7b7b      	ldrb	r3, [r7, #13]
 8012128:	029b      	lsls	r3, r3, #10
 801212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801212e:	431a      	orrs	r2, r3
 8012130:	7b7b      	ldrb	r3, [r7, #13]
 8012132:	019b      	lsls	r3, r3, #6
 8012134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012138:	431a      	orrs	r2, r3
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <writecmddata+0x320>)
 801213c:	619a      	str	r2, [r3, #24]
 801213e:	2101      	movs	r1, #1
 8012140:	481b      	ldr	r0, [pc, #108]	; (80121b0 <writecmddata+0x32c>)
 8012142:	f7ff fb4e 	bl	80117e2 <PIN_LOW>
 8012146:	2101      	movs	r1, #1
 8012148:	4819      	ldr	r0, [pc, #100]	; (80121b0 <writecmddata+0x32c>)
 801214a:	f7ff fb4a 	bl	80117e2 <PIN_LOW>
 801214e:	2101      	movs	r1, #1
 8012150:	4817      	ldr	r0, [pc, #92]	; (80121b0 <writecmddata+0x32c>)
 8012152:	f7ff fb46 	bl	80117e2 <PIN_LOW>
 8012156:	2101      	movs	r1, #1
 8012158:	4815      	ldr	r0, [pc, #84]	; (80121b0 <writecmddata+0x32c>)
 801215a:	f7ff fb42 	bl	80117e2 <PIN_LOW>
 801215e:	2101      	movs	r1, #1
 8012160:	4813      	ldr	r0, [pc, #76]	; (80121b0 <writecmddata+0x32c>)
 8012162:	f7ff fb3e 	bl	80117e2 <PIN_LOW>
 8012166:	2101      	movs	r1, #1
 8012168:	4811      	ldr	r0, [pc, #68]	; (80121b0 <writecmddata+0x32c>)
 801216a:	f7ff fb3a 	bl	80117e2 <PIN_LOW>
 801216e:	2101      	movs	r1, #1
 8012170:	480f      	ldr	r0, [pc, #60]	; (80121b0 <writecmddata+0x32c>)
 8012172:	f7ff fb36 	bl	80117e2 <PIN_LOW>
 8012176:	2101      	movs	r1, #1
 8012178:	480d      	ldr	r0, [pc, #52]	; (80121b0 <writecmddata+0x32c>)
 801217a:	f7ff fb32 	bl	80117e2 <PIN_LOW>
 801217e:	2101      	movs	r1, #1
 8012180:	480b      	ldr	r0, [pc, #44]	; (80121b0 <writecmddata+0x32c>)
 8012182:	f7ff fb2e 	bl	80117e2 <PIN_LOW>
 8012186:	2101      	movs	r1, #1
 8012188:	4809      	ldr	r0, [pc, #36]	; (80121b0 <writecmddata+0x32c>)
 801218a:	f7ff fb2a 	bl	80117e2 <PIN_LOW>
 801218e:	2101      	movs	r1, #1
 8012190:	4807      	ldr	r0, [pc, #28]	; (80121b0 <writecmddata+0x32c>)
 8012192:	f7ff fb26 	bl	80117e2 <PIN_LOW>
 8012196:	2101      	movs	r1, #1
 8012198:	4805      	ldr	r0, [pc, #20]	; (80121b0 <writecmddata+0x32c>)
 801219a:	f7ff fb22 	bl	80117e2 <PIN_LOW>
 801219e:	2101      	movs	r1, #1
 80121a0:	e008      	b.n	80121b4 <writecmddata+0x330>
 80121a2:	bf00      	nop
 80121a4:	40021400 	.word	0x40021400
 80121a8:	40020c00 	.word	0x40020c00
 80121ac:	40021000 	.word	0x40021000
 80121b0:	40020800 	.word	0x40020800
 80121b4:	4852      	ldr	r0, [pc, #328]	; (8012300 <writecmddata+0x47c>)
 80121b6:	f7ff fb14 	bl	80117e2 <PIN_LOW>
 80121ba:	2101      	movs	r1, #1
 80121bc:	4850      	ldr	r0, [pc, #320]	; (8012300 <writecmddata+0x47c>)
 80121be:	f7ff fb10 	bl	80117e2 <PIN_LOW>
 80121c2:	2101      	movs	r1, #1
 80121c4:	484e      	ldr	r0, [pc, #312]	; (8012300 <writecmddata+0x47c>)
 80121c6:	f7ff fb0c 	bl	80117e2 <PIN_LOW>
 80121ca:	2101      	movs	r1, #1
 80121cc:	484c      	ldr	r0, [pc, #304]	; (8012300 <writecmddata+0x47c>)
 80121ce:	f7ff fb08 	bl	80117e2 <PIN_LOW>
 80121d2:	2101      	movs	r1, #1
 80121d4:	484a      	ldr	r0, [pc, #296]	; (8012300 <writecmddata+0x47c>)
 80121d6:	f7ff fb04 	bl	80117e2 <PIN_LOW>
 80121da:	2101      	movs	r1, #1
 80121dc:	4848      	ldr	r0, [pc, #288]	; (8012300 <writecmddata+0x47c>)
 80121de:	f7ff fb10 	bl	8011802 <PIN_HIGH>
 80121e2:	2101      	movs	r1, #1
 80121e4:	4846      	ldr	r0, [pc, #280]	; (8012300 <writecmddata+0x47c>)
 80121e6:	f7ff fb0c 	bl	8011802 <PIN_HIGH>
 80121ea:	4b46      	ldr	r3, [pc, #280]	; (8012304 <writecmddata+0x480>)
 80121ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80121f0:	619a      	str	r2, [r3, #24]
 80121f2:	4b45      	ldr	r3, [pc, #276]	; (8012308 <writecmddata+0x484>)
 80121f4:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80121f8:	619a      	str	r2, [r3, #24]
 80121fa:	4b44      	ldr	r3, [pc, #272]	; (801230c <writecmddata+0x488>)
 80121fc:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012200:	619a      	str	r2, [r3, #24]
 8012202:	7b3b      	ldrb	r3, [r7, #12]
 8012204:	039b      	lsls	r3, r3, #14
 8012206:	4a3f      	ldr	r2, [pc, #252]	; (8012304 <writecmddata+0x480>)
 8012208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801220c:	6193      	str	r3, [r2, #24]
 801220e:	7b3b      	ldrb	r3, [r7, #12]
 8012210:	029b      	lsls	r3, r3, #10
 8012212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012216:	7b3b      	ldrb	r3, [r7, #12]
 8012218:	019b      	lsls	r3, r3, #6
 801221a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801221e:	431a      	orrs	r2, r3
 8012220:	7b3b      	ldrb	r3, [r7, #12]
 8012222:	00db      	lsls	r3, r3, #3
 8012224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012228:	431a      	orrs	r2, r3
 801222a:	4b37      	ldr	r3, [pc, #220]	; (8012308 <writecmddata+0x484>)
 801222c:	619a      	str	r2, [r3, #24]
 801222e:	7b3b      	ldrb	r3, [r7, #12]
 8012230:	031b      	lsls	r3, r3, #12
 8012232:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012236:	7b3b      	ldrb	r3, [r7, #12]
 8012238:	035b      	lsls	r3, r3, #13
 801223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801223e:	431a      	orrs	r2, r3
 8012240:	7b3b      	ldrb	r3, [r7, #12]
 8012242:	029b      	lsls	r3, r3, #10
 8012244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012248:	431a      	orrs	r2, r3
 801224a:	7b3b      	ldrb	r3, [r7, #12]
 801224c:	019b      	lsls	r3, r3, #6
 801224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012252:	431a      	orrs	r2, r3
 8012254:	4b2d      	ldr	r3, [pc, #180]	; (801230c <writecmddata+0x488>)
 8012256:	619a      	str	r2, [r3, #24]
 8012258:	2101      	movs	r1, #1
 801225a:	4829      	ldr	r0, [pc, #164]	; (8012300 <writecmddata+0x47c>)
 801225c:	f7ff fac1 	bl	80117e2 <PIN_LOW>
 8012260:	2101      	movs	r1, #1
 8012262:	4827      	ldr	r0, [pc, #156]	; (8012300 <writecmddata+0x47c>)
 8012264:	f7ff fabd 	bl	80117e2 <PIN_LOW>
 8012268:	2101      	movs	r1, #1
 801226a:	4825      	ldr	r0, [pc, #148]	; (8012300 <writecmddata+0x47c>)
 801226c:	f7ff fab9 	bl	80117e2 <PIN_LOW>
 8012270:	2101      	movs	r1, #1
 8012272:	4823      	ldr	r0, [pc, #140]	; (8012300 <writecmddata+0x47c>)
 8012274:	f7ff fab5 	bl	80117e2 <PIN_LOW>
 8012278:	2101      	movs	r1, #1
 801227a:	4821      	ldr	r0, [pc, #132]	; (8012300 <writecmddata+0x47c>)
 801227c:	f7ff fab1 	bl	80117e2 <PIN_LOW>
 8012280:	2101      	movs	r1, #1
 8012282:	481f      	ldr	r0, [pc, #124]	; (8012300 <writecmddata+0x47c>)
 8012284:	f7ff faad 	bl	80117e2 <PIN_LOW>
 8012288:	2101      	movs	r1, #1
 801228a:	481d      	ldr	r0, [pc, #116]	; (8012300 <writecmddata+0x47c>)
 801228c:	f7ff faa9 	bl	80117e2 <PIN_LOW>
 8012290:	2101      	movs	r1, #1
 8012292:	481b      	ldr	r0, [pc, #108]	; (8012300 <writecmddata+0x47c>)
 8012294:	f7ff faa5 	bl	80117e2 <PIN_LOW>
 8012298:	2101      	movs	r1, #1
 801229a:	4819      	ldr	r0, [pc, #100]	; (8012300 <writecmddata+0x47c>)
 801229c:	f7ff faa1 	bl	80117e2 <PIN_LOW>
 80122a0:	2101      	movs	r1, #1
 80122a2:	4817      	ldr	r0, [pc, #92]	; (8012300 <writecmddata+0x47c>)
 80122a4:	f7ff fa9d 	bl	80117e2 <PIN_LOW>
 80122a8:	2101      	movs	r1, #1
 80122aa:	4815      	ldr	r0, [pc, #84]	; (8012300 <writecmddata+0x47c>)
 80122ac:	f7ff fa99 	bl	80117e2 <PIN_LOW>
 80122b0:	2101      	movs	r1, #1
 80122b2:	4813      	ldr	r0, [pc, #76]	; (8012300 <writecmddata+0x47c>)
 80122b4:	f7ff fa95 	bl	80117e2 <PIN_LOW>
 80122b8:	2101      	movs	r1, #1
 80122ba:	4811      	ldr	r0, [pc, #68]	; (8012300 <writecmddata+0x47c>)
 80122bc:	f7ff fa91 	bl	80117e2 <PIN_LOW>
 80122c0:	2101      	movs	r1, #1
 80122c2:	480f      	ldr	r0, [pc, #60]	; (8012300 <writecmddata+0x47c>)
 80122c4:	f7ff fa8d 	bl	80117e2 <PIN_LOW>
 80122c8:	2101      	movs	r1, #1
 80122ca:	480d      	ldr	r0, [pc, #52]	; (8012300 <writecmddata+0x47c>)
 80122cc:	f7ff fa89 	bl	80117e2 <PIN_LOW>
 80122d0:	2101      	movs	r1, #1
 80122d2:	480b      	ldr	r0, [pc, #44]	; (8012300 <writecmddata+0x47c>)
 80122d4:	f7ff fa85 	bl	80117e2 <PIN_LOW>
 80122d8:	2101      	movs	r1, #1
 80122da:	4809      	ldr	r0, [pc, #36]	; (8012300 <writecmddata+0x47c>)
 80122dc:	f7ff fa81 	bl	80117e2 <PIN_LOW>
 80122e0:	2101      	movs	r1, #1
 80122e2:	4807      	ldr	r0, [pc, #28]	; (8012300 <writecmddata+0x47c>)
 80122e4:	f7ff fa8d 	bl	8011802 <PIN_HIGH>
 80122e8:	2101      	movs	r1, #1
 80122ea:	4805      	ldr	r0, [pc, #20]	; (8012300 <writecmddata+0x47c>)
 80122ec:	f7ff fa89 	bl	8011802 <PIN_HIGH>
    CS_IDLE;
 80122f0:	2108      	movs	r1, #8
 80122f2:	4806      	ldr	r0, [pc, #24]	; (801230c <writecmddata+0x488>)
 80122f4:	f7ff fa85 	bl	8011802 <PIN_HIGH>
}
 80122f8:	bf00      	nop
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	40020800 	.word	0x40020800
 8012304:	40020c00 	.word	0x40020c00
 8012308:	40021000 	.word	0x40021000
 801230c:	40021400 	.word	0x40021400

08012310 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	4603      	mov	r3, r0
 8012318:	603a      	str	r2, [r7, #0]
 801231a:	80fb      	strh	r3, [r7, #6]
 801231c:	460b      	mov	r3, r1
 801231e:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8012320:	2108      	movs	r1, #8
 8012322:	488c      	ldr	r0, [pc, #560]	; (8012554 <WriteCmdParamN+0x244>)
 8012324:	f7ff fa5d 	bl	80117e2 <PIN_LOW>
    WriteCmd(cmd);
 8012328:	2120      	movs	r1, #32
 801232a:	488b      	ldr	r0, [pc, #556]	; (8012558 <WriteCmdParamN+0x248>)
 801232c:	f7ff fa59 	bl	80117e2 <PIN_LOW>
 8012330:	88fb      	ldrh	r3, [r7, #6]
 8012332:	0a1b      	lsrs	r3, r3, #8
 8012334:	b29b      	uxth	r3, r3
 8012336:	73fb      	strb	r3, [r7, #15]
 8012338:	88fb      	ldrh	r3, [r7, #6]
 801233a:	73bb      	strb	r3, [r7, #14]
 801233c:	4b86      	ldr	r3, [pc, #536]	; (8012558 <WriteCmdParamN+0x248>)
 801233e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012342:	619a      	str	r2, [r3, #24]
 8012344:	4b85      	ldr	r3, [pc, #532]	; (801255c <WriteCmdParamN+0x24c>)
 8012346:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801234a:	619a      	str	r2, [r3, #24]
 801234c:	4b81      	ldr	r3, [pc, #516]	; (8012554 <WriteCmdParamN+0x244>)
 801234e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012352:	619a      	str	r2, [r3, #24]
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	039b      	lsls	r3, r3, #14
 8012358:	4a7f      	ldr	r2, [pc, #508]	; (8012558 <WriteCmdParamN+0x248>)
 801235a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801235e:	6193      	str	r3, [r2, #24]
 8012360:	7bfb      	ldrb	r3, [r7, #15]
 8012362:	029b      	lsls	r3, r3, #10
 8012364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	019b      	lsls	r3, r3, #6
 801236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012370:	431a      	orrs	r2, r3
 8012372:	7bfb      	ldrb	r3, [r7, #15]
 8012374:	00db      	lsls	r3, r3, #3
 8012376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801237a:	431a      	orrs	r2, r3
 801237c:	4b77      	ldr	r3, [pc, #476]	; (801255c <WriteCmdParamN+0x24c>)
 801237e:	619a      	str	r2, [r3, #24]
 8012380:	7bfb      	ldrb	r3, [r7, #15]
 8012382:	031b      	lsls	r3, r3, #12
 8012384:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	035b      	lsls	r3, r3, #13
 801238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012390:	431a      	orrs	r2, r3
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	029b      	lsls	r3, r3, #10
 8012396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801239a:	431a      	orrs	r2, r3
 801239c:	7bfb      	ldrb	r3, [r7, #15]
 801239e:	019b      	lsls	r3, r3, #6
 80123a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123a4:	431a      	orrs	r2, r3
 80123a6:	4b6b      	ldr	r3, [pc, #428]	; (8012554 <WriteCmdParamN+0x244>)
 80123a8:	619a      	str	r2, [r3, #24]
 80123aa:	2101      	movs	r1, #1
 80123ac:	486c      	ldr	r0, [pc, #432]	; (8012560 <WriteCmdParamN+0x250>)
 80123ae:	f7ff fa18 	bl	80117e2 <PIN_LOW>
 80123b2:	2101      	movs	r1, #1
 80123b4:	486a      	ldr	r0, [pc, #424]	; (8012560 <WriteCmdParamN+0x250>)
 80123b6:	f7ff fa14 	bl	80117e2 <PIN_LOW>
 80123ba:	2101      	movs	r1, #1
 80123bc:	4868      	ldr	r0, [pc, #416]	; (8012560 <WriteCmdParamN+0x250>)
 80123be:	f7ff fa10 	bl	80117e2 <PIN_LOW>
 80123c2:	2101      	movs	r1, #1
 80123c4:	4866      	ldr	r0, [pc, #408]	; (8012560 <WriteCmdParamN+0x250>)
 80123c6:	f7ff fa0c 	bl	80117e2 <PIN_LOW>
 80123ca:	2101      	movs	r1, #1
 80123cc:	4864      	ldr	r0, [pc, #400]	; (8012560 <WriteCmdParamN+0x250>)
 80123ce:	f7ff fa08 	bl	80117e2 <PIN_LOW>
 80123d2:	2101      	movs	r1, #1
 80123d4:	4862      	ldr	r0, [pc, #392]	; (8012560 <WriteCmdParamN+0x250>)
 80123d6:	f7ff fa04 	bl	80117e2 <PIN_LOW>
 80123da:	2101      	movs	r1, #1
 80123dc:	4860      	ldr	r0, [pc, #384]	; (8012560 <WriteCmdParamN+0x250>)
 80123de:	f7ff fa00 	bl	80117e2 <PIN_LOW>
 80123e2:	2101      	movs	r1, #1
 80123e4:	485e      	ldr	r0, [pc, #376]	; (8012560 <WriteCmdParamN+0x250>)
 80123e6:	f7ff f9fc 	bl	80117e2 <PIN_LOW>
 80123ea:	2101      	movs	r1, #1
 80123ec:	485c      	ldr	r0, [pc, #368]	; (8012560 <WriteCmdParamN+0x250>)
 80123ee:	f7ff f9f8 	bl	80117e2 <PIN_LOW>
 80123f2:	2101      	movs	r1, #1
 80123f4:	485a      	ldr	r0, [pc, #360]	; (8012560 <WriteCmdParamN+0x250>)
 80123f6:	f7ff f9f4 	bl	80117e2 <PIN_LOW>
 80123fa:	2101      	movs	r1, #1
 80123fc:	4858      	ldr	r0, [pc, #352]	; (8012560 <WriteCmdParamN+0x250>)
 80123fe:	f7ff f9f0 	bl	80117e2 <PIN_LOW>
 8012402:	2101      	movs	r1, #1
 8012404:	4856      	ldr	r0, [pc, #344]	; (8012560 <WriteCmdParamN+0x250>)
 8012406:	f7ff f9ec 	bl	80117e2 <PIN_LOW>
 801240a:	2101      	movs	r1, #1
 801240c:	4854      	ldr	r0, [pc, #336]	; (8012560 <WriteCmdParamN+0x250>)
 801240e:	f7ff f9e8 	bl	80117e2 <PIN_LOW>
 8012412:	2101      	movs	r1, #1
 8012414:	4852      	ldr	r0, [pc, #328]	; (8012560 <WriteCmdParamN+0x250>)
 8012416:	f7ff f9e4 	bl	80117e2 <PIN_LOW>
 801241a:	2101      	movs	r1, #1
 801241c:	4850      	ldr	r0, [pc, #320]	; (8012560 <WriteCmdParamN+0x250>)
 801241e:	f7ff f9e0 	bl	80117e2 <PIN_LOW>
 8012422:	2101      	movs	r1, #1
 8012424:	484e      	ldr	r0, [pc, #312]	; (8012560 <WriteCmdParamN+0x250>)
 8012426:	f7ff f9dc 	bl	80117e2 <PIN_LOW>
 801242a:	2101      	movs	r1, #1
 801242c:	484c      	ldr	r0, [pc, #304]	; (8012560 <WriteCmdParamN+0x250>)
 801242e:	f7ff f9d8 	bl	80117e2 <PIN_LOW>
 8012432:	2101      	movs	r1, #1
 8012434:	484a      	ldr	r0, [pc, #296]	; (8012560 <WriteCmdParamN+0x250>)
 8012436:	f7ff f9e4 	bl	8011802 <PIN_HIGH>
 801243a:	2101      	movs	r1, #1
 801243c:	4848      	ldr	r0, [pc, #288]	; (8012560 <WriteCmdParamN+0x250>)
 801243e:	f7ff f9e0 	bl	8011802 <PIN_HIGH>
 8012442:	4b45      	ldr	r3, [pc, #276]	; (8012558 <WriteCmdParamN+0x248>)
 8012444:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012448:	619a      	str	r2, [r3, #24]
 801244a:	4b44      	ldr	r3, [pc, #272]	; (801255c <WriteCmdParamN+0x24c>)
 801244c:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012450:	619a      	str	r2, [r3, #24]
 8012452:	4b40      	ldr	r3, [pc, #256]	; (8012554 <WriteCmdParamN+0x244>)
 8012454:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012458:	619a      	str	r2, [r3, #24]
 801245a:	7bbb      	ldrb	r3, [r7, #14]
 801245c:	039b      	lsls	r3, r3, #14
 801245e:	4a3e      	ldr	r2, [pc, #248]	; (8012558 <WriteCmdParamN+0x248>)
 8012460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012464:	6193      	str	r3, [r2, #24]
 8012466:	7bbb      	ldrb	r3, [r7, #14]
 8012468:	029b      	lsls	r3, r3, #10
 801246a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801246e:	7bbb      	ldrb	r3, [r7, #14]
 8012470:	019b      	lsls	r3, r3, #6
 8012472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012476:	431a      	orrs	r2, r3
 8012478:	7bbb      	ldrb	r3, [r7, #14]
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012480:	431a      	orrs	r2, r3
 8012482:	4b36      	ldr	r3, [pc, #216]	; (801255c <WriteCmdParamN+0x24c>)
 8012484:	619a      	str	r2, [r3, #24]
 8012486:	7bbb      	ldrb	r3, [r7, #14]
 8012488:	031b      	lsls	r3, r3, #12
 801248a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801248e:	7bbb      	ldrb	r3, [r7, #14]
 8012490:	035b      	lsls	r3, r3, #13
 8012492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012496:	431a      	orrs	r2, r3
 8012498:	7bbb      	ldrb	r3, [r7, #14]
 801249a:	029b      	lsls	r3, r3, #10
 801249c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124a0:	431a      	orrs	r2, r3
 80124a2:	7bbb      	ldrb	r3, [r7, #14]
 80124a4:	019b      	lsls	r3, r3, #6
 80124a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80124aa:	431a      	orrs	r2, r3
 80124ac:	4b29      	ldr	r3, [pc, #164]	; (8012554 <WriteCmdParamN+0x244>)
 80124ae:	619a      	str	r2, [r3, #24]
 80124b0:	2101      	movs	r1, #1
 80124b2:	482b      	ldr	r0, [pc, #172]	; (8012560 <WriteCmdParamN+0x250>)
 80124b4:	f7ff f995 	bl	80117e2 <PIN_LOW>
 80124b8:	2101      	movs	r1, #1
 80124ba:	4829      	ldr	r0, [pc, #164]	; (8012560 <WriteCmdParamN+0x250>)
 80124bc:	f7ff f991 	bl	80117e2 <PIN_LOW>
 80124c0:	2101      	movs	r1, #1
 80124c2:	4827      	ldr	r0, [pc, #156]	; (8012560 <WriteCmdParamN+0x250>)
 80124c4:	f7ff f98d 	bl	80117e2 <PIN_LOW>
 80124c8:	2101      	movs	r1, #1
 80124ca:	4825      	ldr	r0, [pc, #148]	; (8012560 <WriteCmdParamN+0x250>)
 80124cc:	f7ff f989 	bl	80117e2 <PIN_LOW>
 80124d0:	2101      	movs	r1, #1
 80124d2:	4823      	ldr	r0, [pc, #140]	; (8012560 <WriteCmdParamN+0x250>)
 80124d4:	f7ff f985 	bl	80117e2 <PIN_LOW>
 80124d8:	2101      	movs	r1, #1
 80124da:	4821      	ldr	r0, [pc, #132]	; (8012560 <WriteCmdParamN+0x250>)
 80124dc:	f7ff f981 	bl	80117e2 <PIN_LOW>
 80124e0:	2101      	movs	r1, #1
 80124e2:	481f      	ldr	r0, [pc, #124]	; (8012560 <WriteCmdParamN+0x250>)
 80124e4:	f7ff f97d 	bl	80117e2 <PIN_LOW>
 80124e8:	2101      	movs	r1, #1
 80124ea:	481d      	ldr	r0, [pc, #116]	; (8012560 <WriteCmdParamN+0x250>)
 80124ec:	f7ff f979 	bl	80117e2 <PIN_LOW>
 80124f0:	2101      	movs	r1, #1
 80124f2:	481b      	ldr	r0, [pc, #108]	; (8012560 <WriteCmdParamN+0x250>)
 80124f4:	f7ff f975 	bl	80117e2 <PIN_LOW>
 80124f8:	2101      	movs	r1, #1
 80124fa:	4819      	ldr	r0, [pc, #100]	; (8012560 <WriteCmdParamN+0x250>)
 80124fc:	f7ff f971 	bl	80117e2 <PIN_LOW>
 8012500:	2101      	movs	r1, #1
 8012502:	4817      	ldr	r0, [pc, #92]	; (8012560 <WriteCmdParamN+0x250>)
 8012504:	f7ff f96d 	bl	80117e2 <PIN_LOW>
 8012508:	2101      	movs	r1, #1
 801250a:	4815      	ldr	r0, [pc, #84]	; (8012560 <WriteCmdParamN+0x250>)
 801250c:	f7ff f969 	bl	80117e2 <PIN_LOW>
 8012510:	2101      	movs	r1, #1
 8012512:	4813      	ldr	r0, [pc, #76]	; (8012560 <WriteCmdParamN+0x250>)
 8012514:	f7ff f965 	bl	80117e2 <PIN_LOW>
 8012518:	2101      	movs	r1, #1
 801251a:	4811      	ldr	r0, [pc, #68]	; (8012560 <WriteCmdParamN+0x250>)
 801251c:	f7ff f961 	bl	80117e2 <PIN_LOW>
 8012520:	2101      	movs	r1, #1
 8012522:	480f      	ldr	r0, [pc, #60]	; (8012560 <WriteCmdParamN+0x250>)
 8012524:	f7ff f95d 	bl	80117e2 <PIN_LOW>
 8012528:	2101      	movs	r1, #1
 801252a:	480d      	ldr	r0, [pc, #52]	; (8012560 <WriteCmdParamN+0x250>)
 801252c:	f7ff f959 	bl	80117e2 <PIN_LOW>
 8012530:	2101      	movs	r1, #1
 8012532:	480b      	ldr	r0, [pc, #44]	; (8012560 <WriteCmdParamN+0x250>)
 8012534:	f7ff f955 	bl	80117e2 <PIN_LOW>
 8012538:	2101      	movs	r1, #1
 801253a:	4809      	ldr	r0, [pc, #36]	; (8012560 <WriteCmdParamN+0x250>)
 801253c:	f7ff f961 	bl	8011802 <PIN_HIGH>
 8012540:	2101      	movs	r1, #1
 8012542:	4807      	ldr	r0, [pc, #28]	; (8012560 <WriteCmdParamN+0x250>)
 8012544:	f7ff f95d 	bl	8011802 <PIN_HIGH>
 8012548:	2120      	movs	r1, #32
 801254a:	4803      	ldr	r0, [pc, #12]	; (8012558 <WriteCmdParamN+0x248>)
 801254c:	f7ff f959 	bl	8011802 <PIN_HIGH>
    while (N-- > 0) {
 8012550:	e1bd      	b.n	80128ce <WriteCmdParamN+0x5be>
 8012552:	bf00      	nop
 8012554:	40021400 	.word	0x40021400
 8012558:	40020c00 	.word	0x40020c00
 801255c:	40021000 	.word	0x40021000
 8012560:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	1c5a      	adds	r2, r3, #1
 8012568:	603a      	str	r2, [r7, #0]
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	737b      	strb	r3, [r7, #13]
        write8(u8);
 801256e:	4bc3      	ldr	r3, [pc, #780]	; (801287c <WriteCmdParamN+0x56c>)
 8012570:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012574:	619a      	str	r2, [r3, #24]
 8012576:	4bc2      	ldr	r3, [pc, #776]	; (8012880 <WriteCmdParamN+0x570>)
 8012578:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801257c:	619a      	str	r2, [r3, #24]
 801257e:	4bc1      	ldr	r3, [pc, #772]	; (8012884 <WriteCmdParamN+0x574>)
 8012580:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012584:	619a      	str	r2, [r3, #24]
 8012586:	7b7b      	ldrb	r3, [r7, #13]
 8012588:	039b      	lsls	r3, r3, #14
 801258a:	4abc      	ldr	r2, [pc, #752]	; (801287c <WriteCmdParamN+0x56c>)
 801258c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012590:	6193      	str	r3, [r2, #24]
 8012592:	7b7b      	ldrb	r3, [r7, #13]
 8012594:	029b      	lsls	r3, r3, #10
 8012596:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801259a:	7b7b      	ldrb	r3, [r7, #13]
 801259c:	019b      	lsls	r3, r3, #6
 801259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125a2:	431a      	orrs	r2, r3
 80125a4:	7b7b      	ldrb	r3, [r7, #13]
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125ac:	431a      	orrs	r2, r3
 80125ae:	4bb4      	ldr	r3, [pc, #720]	; (8012880 <WriteCmdParamN+0x570>)
 80125b0:	619a      	str	r2, [r3, #24]
 80125b2:	7b7b      	ldrb	r3, [r7, #13]
 80125b4:	031b      	lsls	r3, r3, #12
 80125b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80125ba:	7b7b      	ldrb	r3, [r7, #13]
 80125bc:	035b      	lsls	r3, r3, #13
 80125be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125c2:	431a      	orrs	r2, r3
 80125c4:	7b7b      	ldrb	r3, [r7, #13]
 80125c6:	029b      	lsls	r3, r3, #10
 80125c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125cc:	431a      	orrs	r2, r3
 80125ce:	7b7b      	ldrb	r3, [r7, #13]
 80125d0:	019b      	lsls	r3, r3, #6
 80125d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125d6:	431a      	orrs	r2, r3
 80125d8:	4baa      	ldr	r3, [pc, #680]	; (8012884 <WriteCmdParamN+0x574>)
 80125da:	619a      	str	r2, [r3, #24]
 80125dc:	2101      	movs	r1, #1
 80125de:	48aa      	ldr	r0, [pc, #680]	; (8012888 <WriteCmdParamN+0x578>)
 80125e0:	f7ff f8ff 	bl	80117e2 <PIN_LOW>
 80125e4:	2101      	movs	r1, #1
 80125e6:	48a8      	ldr	r0, [pc, #672]	; (8012888 <WriteCmdParamN+0x578>)
 80125e8:	f7ff f8fb 	bl	80117e2 <PIN_LOW>
 80125ec:	2101      	movs	r1, #1
 80125ee:	48a6      	ldr	r0, [pc, #664]	; (8012888 <WriteCmdParamN+0x578>)
 80125f0:	f7ff f8f7 	bl	80117e2 <PIN_LOW>
 80125f4:	2101      	movs	r1, #1
 80125f6:	48a4      	ldr	r0, [pc, #656]	; (8012888 <WriteCmdParamN+0x578>)
 80125f8:	f7ff f8f3 	bl	80117e2 <PIN_LOW>
 80125fc:	2101      	movs	r1, #1
 80125fe:	48a2      	ldr	r0, [pc, #648]	; (8012888 <WriteCmdParamN+0x578>)
 8012600:	f7ff f8ef 	bl	80117e2 <PIN_LOW>
 8012604:	2101      	movs	r1, #1
 8012606:	48a0      	ldr	r0, [pc, #640]	; (8012888 <WriteCmdParamN+0x578>)
 8012608:	f7ff f8eb 	bl	80117e2 <PIN_LOW>
 801260c:	2101      	movs	r1, #1
 801260e:	489e      	ldr	r0, [pc, #632]	; (8012888 <WriteCmdParamN+0x578>)
 8012610:	f7ff f8e7 	bl	80117e2 <PIN_LOW>
 8012614:	2101      	movs	r1, #1
 8012616:	489c      	ldr	r0, [pc, #624]	; (8012888 <WriteCmdParamN+0x578>)
 8012618:	f7ff f8e3 	bl	80117e2 <PIN_LOW>
 801261c:	2101      	movs	r1, #1
 801261e:	489a      	ldr	r0, [pc, #616]	; (8012888 <WriteCmdParamN+0x578>)
 8012620:	f7ff f8df 	bl	80117e2 <PIN_LOW>
 8012624:	2101      	movs	r1, #1
 8012626:	4898      	ldr	r0, [pc, #608]	; (8012888 <WriteCmdParamN+0x578>)
 8012628:	f7ff f8db 	bl	80117e2 <PIN_LOW>
 801262c:	2101      	movs	r1, #1
 801262e:	4896      	ldr	r0, [pc, #600]	; (8012888 <WriteCmdParamN+0x578>)
 8012630:	f7ff f8d7 	bl	80117e2 <PIN_LOW>
 8012634:	2101      	movs	r1, #1
 8012636:	4894      	ldr	r0, [pc, #592]	; (8012888 <WriteCmdParamN+0x578>)
 8012638:	f7ff f8d3 	bl	80117e2 <PIN_LOW>
 801263c:	2101      	movs	r1, #1
 801263e:	4892      	ldr	r0, [pc, #584]	; (8012888 <WriteCmdParamN+0x578>)
 8012640:	f7ff f8cf 	bl	80117e2 <PIN_LOW>
 8012644:	2101      	movs	r1, #1
 8012646:	4890      	ldr	r0, [pc, #576]	; (8012888 <WriteCmdParamN+0x578>)
 8012648:	f7ff f8cb 	bl	80117e2 <PIN_LOW>
 801264c:	2101      	movs	r1, #1
 801264e:	488e      	ldr	r0, [pc, #568]	; (8012888 <WriteCmdParamN+0x578>)
 8012650:	f7ff f8c7 	bl	80117e2 <PIN_LOW>
 8012654:	2101      	movs	r1, #1
 8012656:	488c      	ldr	r0, [pc, #560]	; (8012888 <WriteCmdParamN+0x578>)
 8012658:	f7ff f8c3 	bl	80117e2 <PIN_LOW>
 801265c:	2101      	movs	r1, #1
 801265e:	488a      	ldr	r0, [pc, #552]	; (8012888 <WriteCmdParamN+0x578>)
 8012660:	f7ff f8bf 	bl	80117e2 <PIN_LOW>
 8012664:	2101      	movs	r1, #1
 8012666:	4888      	ldr	r0, [pc, #544]	; (8012888 <WriteCmdParamN+0x578>)
 8012668:	f7ff f8cb 	bl	8011802 <PIN_HIGH>
 801266c:	2101      	movs	r1, #1
 801266e:	4886      	ldr	r0, [pc, #536]	; (8012888 <WriteCmdParamN+0x578>)
 8012670:	f7ff f8c7 	bl	8011802 <PIN_HIGH>
        if (N && is8347) {
 8012674:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012678:	2b00      	cmp	r3, #0
 801267a:	f000 8128 	beq.w	80128ce <WriteCmdParamN+0x5be>
 801267e:	4b83      	ldr	r3, [pc, #524]	; (801288c <WriteCmdParamN+0x57c>)
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	f000 8123 	beq.w	80128ce <WriteCmdParamN+0x5be>
            cmd++;
 8012688:	88fb      	ldrh	r3, [r7, #6]
 801268a:	3301      	adds	r3, #1
 801268c:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 801268e:	2120      	movs	r1, #32
 8012690:	487a      	ldr	r0, [pc, #488]	; (801287c <WriteCmdParamN+0x56c>)
 8012692:	f7ff f8a6 	bl	80117e2 <PIN_LOW>
 8012696:	88fb      	ldrh	r3, [r7, #6]
 8012698:	0a1b      	lsrs	r3, r3, #8
 801269a:	b29b      	uxth	r3, r3
 801269c:	733b      	strb	r3, [r7, #12]
 801269e:	88fb      	ldrh	r3, [r7, #6]
 80126a0:	72fb      	strb	r3, [r7, #11]
 80126a2:	4b76      	ldr	r3, [pc, #472]	; (801287c <WriteCmdParamN+0x56c>)
 80126a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80126a8:	619a      	str	r2, [r3, #24]
 80126aa:	4b75      	ldr	r3, [pc, #468]	; (8012880 <WriteCmdParamN+0x570>)
 80126ac:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80126b0:	619a      	str	r2, [r3, #24]
 80126b2:	4b74      	ldr	r3, [pc, #464]	; (8012884 <WriteCmdParamN+0x574>)
 80126b4:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80126b8:	619a      	str	r2, [r3, #24]
 80126ba:	7b3b      	ldrb	r3, [r7, #12]
 80126bc:	039b      	lsls	r3, r3, #14
 80126be:	4a6f      	ldr	r2, [pc, #444]	; (801287c <WriteCmdParamN+0x56c>)
 80126c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126c4:	6193      	str	r3, [r2, #24]
 80126c6:	7b3b      	ldrb	r3, [r7, #12]
 80126c8:	029b      	lsls	r3, r3, #10
 80126ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80126ce:	7b3b      	ldrb	r3, [r7, #12]
 80126d0:	019b      	lsls	r3, r3, #6
 80126d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126d6:	431a      	orrs	r2, r3
 80126d8:	7b3b      	ldrb	r3, [r7, #12]
 80126da:	00db      	lsls	r3, r3, #3
 80126dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80126e0:	431a      	orrs	r2, r3
 80126e2:	4b67      	ldr	r3, [pc, #412]	; (8012880 <WriteCmdParamN+0x570>)
 80126e4:	619a      	str	r2, [r3, #24]
 80126e6:	7b3b      	ldrb	r3, [r7, #12]
 80126e8:	031b      	lsls	r3, r3, #12
 80126ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80126ee:	7b3b      	ldrb	r3, [r7, #12]
 80126f0:	035b      	lsls	r3, r3, #13
 80126f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126f6:	431a      	orrs	r2, r3
 80126f8:	7b3b      	ldrb	r3, [r7, #12]
 80126fa:	029b      	lsls	r3, r3, #10
 80126fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012700:	431a      	orrs	r2, r3
 8012702:	7b3b      	ldrb	r3, [r7, #12]
 8012704:	019b      	lsls	r3, r3, #6
 8012706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801270a:	431a      	orrs	r2, r3
 801270c:	4b5d      	ldr	r3, [pc, #372]	; (8012884 <WriteCmdParamN+0x574>)
 801270e:	619a      	str	r2, [r3, #24]
 8012710:	2101      	movs	r1, #1
 8012712:	485d      	ldr	r0, [pc, #372]	; (8012888 <WriteCmdParamN+0x578>)
 8012714:	f7ff f865 	bl	80117e2 <PIN_LOW>
 8012718:	2101      	movs	r1, #1
 801271a:	485b      	ldr	r0, [pc, #364]	; (8012888 <WriteCmdParamN+0x578>)
 801271c:	f7ff f861 	bl	80117e2 <PIN_LOW>
 8012720:	2101      	movs	r1, #1
 8012722:	4859      	ldr	r0, [pc, #356]	; (8012888 <WriteCmdParamN+0x578>)
 8012724:	f7ff f85d 	bl	80117e2 <PIN_LOW>
 8012728:	2101      	movs	r1, #1
 801272a:	4857      	ldr	r0, [pc, #348]	; (8012888 <WriteCmdParamN+0x578>)
 801272c:	f7ff f859 	bl	80117e2 <PIN_LOW>
 8012730:	2101      	movs	r1, #1
 8012732:	4855      	ldr	r0, [pc, #340]	; (8012888 <WriteCmdParamN+0x578>)
 8012734:	f7ff f855 	bl	80117e2 <PIN_LOW>
 8012738:	2101      	movs	r1, #1
 801273a:	4853      	ldr	r0, [pc, #332]	; (8012888 <WriteCmdParamN+0x578>)
 801273c:	f7ff f851 	bl	80117e2 <PIN_LOW>
 8012740:	2101      	movs	r1, #1
 8012742:	4851      	ldr	r0, [pc, #324]	; (8012888 <WriteCmdParamN+0x578>)
 8012744:	f7ff f84d 	bl	80117e2 <PIN_LOW>
 8012748:	2101      	movs	r1, #1
 801274a:	484f      	ldr	r0, [pc, #316]	; (8012888 <WriteCmdParamN+0x578>)
 801274c:	f7ff f849 	bl	80117e2 <PIN_LOW>
 8012750:	2101      	movs	r1, #1
 8012752:	484d      	ldr	r0, [pc, #308]	; (8012888 <WriteCmdParamN+0x578>)
 8012754:	f7ff f845 	bl	80117e2 <PIN_LOW>
 8012758:	2101      	movs	r1, #1
 801275a:	484b      	ldr	r0, [pc, #300]	; (8012888 <WriteCmdParamN+0x578>)
 801275c:	f7ff f841 	bl	80117e2 <PIN_LOW>
 8012760:	2101      	movs	r1, #1
 8012762:	4849      	ldr	r0, [pc, #292]	; (8012888 <WriteCmdParamN+0x578>)
 8012764:	f7ff f83d 	bl	80117e2 <PIN_LOW>
 8012768:	2101      	movs	r1, #1
 801276a:	4847      	ldr	r0, [pc, #284]	; (8012888 <WriteCmdParamN+0x578>)
 801276c:	f7ff f839 	bl	80117e2 <PIN_LOW>
 8012770:	2101      	movs	r1, #1
 8012772:	4845      	ldr	r0, [pc, #276]	; (8012888 <WriteCmdParamN+0x578>)
 8012774:	f7ff f835 	bl	80117e2 <PIN_LOW>
 8012778:	2101      	movs	r1, #1
 801277a:	4843      	ldr	r0, [pc, #268]	; (8012888 <WriteCmdParamN+0x578>)
 801277c:	f7ff f831 	bl	80117e2 <PIN_LOW>
 8012780:	2101      	movs	r1, #1
 8012782:	4841      	ldr	r0, [pc, #260]	; (8012888 <WriteCmdParamN+0x578>)
 8012784:	f7ff f82d 	bl	80117e2 <PIN_LOW>
 8012788:	2101      	movs	r1, #1
 801278a:	483f      	ldr	r0, [pc, #252]	; (8012888 <WriteCmdParamN+0x578>)
 801278c:	f7ff f829 	bl	80117e2 <PIN_LOW>
 8012790:	2101      	movs	r1, #1
 8012792:	483d      	ldr	r0, [pc, #244]	; (8012888 <WriteCmdParamN+0x578>)
 8012794:	f7ff f825 	bl	80117e2 <PIN_LOW>
 8012798:	2101      	movs	r1, #1
 801279a:	483b      	ldr	r0, [pc, #236]	; (8012888 <WriteCmdParamN+0x578>)
 801279c:	f7ff f831 	bl	8011802 <PIN_HIGH>
 80127a0:	2101      	movs	r1, #1
 80127a2:	4839      	ldr	r0, [pc, #228]	; (8012888 <WriteCmdParamN+0x578>)
 80127a4:	f7ff f82d 	bl	8011802 <PIN_HIGH>
 80127a8:	4b34      	ldr	r3, [pc, #208]	; (801287c <WriteCmdParamN+0x56c>)
 80127aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80127ae:	619a      	str	r2, [r3, #24]
 80127b0:	4b33      	ldr	r3, [pc, #204]	; (8012880 <WriteCmdParamN+0x570>)
 80127b2:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80127b6:	619a      	str	r2, [r3, #24]
 80127b8:	4b32      	ldr	r3, [pc, #200]	; (8012884 <WriteCmdParamN+0x574>)
 80127ba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80127be:	619a      	str	r2, [r3, #24]
 80127c0:	7afb      	ldrb	r3, [r7, #11]
 80127c2:	039b      	lsls	r3, r3, #14
 80127c4:	4a2d      	ldr	r2, [pc, #180]	; (801287c <WriteCmdParamN+0x56c>)
 80127c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127ca:	6193      	str	r3, [r2, #24]
 80127cc:	7afb      	ldrb	r3, [r7, #11]
 80127ce:	029b      	lsls	r3, r3, #10
 80127d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80127d4:	7afb      	ldrb	r3, [r7, #11]
 80127d6:	019b      	lsls	r3, r3, #6
 80127d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80127dc:	431a      	orrs	r2, r3
 80127de:	7afb      	ldrb	r3, [r7, #11]
 80127e0:	00db      	lsls	r3, r3, #3
 80127e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127e6:	431a      	orrs	r2, r3
 80127e8:	4b25      	ldr	r3, [pc, #148]	; (8012880 <WriteCmdParamN+0x570>)
 80127ea:	619a      	str	r2, [r3, #24]
 80127ec:	7afb      	ldrb	r3, [r7, #11]
 80127ee:	031b      	lsls	r3, r3, #12
 80127f0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80127f4:	7afb      	ldrb	r3, [r7, #11]
 80127f6:	035b      	lsls	r3, r3, #13
 80127f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127fc:	431a      	orrs	r2, r3
 80127fe:	7afb      	ldrb	r3, [r7, #11]
 8012800:	029b      	lsls	r3, r3, #10
 8012802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012806:	431a      	orrs	r2, r3
 8012808:	7afb      	ldrb	r3, [r7, #11]
 801280a:	019b      	lsls	r3, r3, #6
 801280c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012810:	431a      	orrs	r2, r3
 8012812:	4b1c      	ldr	r3, [pc, #112]	; (8012884 <WriteCmdParamN+0x574>)
 8012814:	619a      	str	r2, [r3, #24]
 8012816:	2101      	movs	r1, #1
 8012818:	481b      	ldr	r0, [pc, #108]	; (8012888 <WriteCmdParamN+0x578>)
 801281a:	f7fe ffe2 	bl	80117e2 <PIN_LOW>
 801281e:	2101      	movs	r1, #1
 8012820:	4819      	ldr	r0, [pc, #100]	; (8012888 <WriteCmdParamN+0x578>)
 8012822:	f7fe ffde 	bl	80117e2 <PIN_LOW>
 8012826:	2101      	movs	r1, #1
 8012828:	4817      	ldr	r0, [pc, #92]	; (8012888 <WriteCmdParamN+0x578>)
 801282a:	f7fe ffda 	bl	80117e2 <PIN_LOW>
 801282e:	2101      	movs	r1, #1
 8012830:	4815      	ldr	r0, [pc, #84]	; (8012888 <WriteCmdParamN+0x578>)
 8012832:	f7fe ffd6 	bl	80117e2 <PIN_LOW>
 8012836:	2101      	movs	r1, #1
 8012838:	4813      	ldr	r0, [pc, #76]	; (8012888 <WriteCmdParamN+0x578>)
 801283a:	f7fe ffd2 	bl	80117e2 <PIN_LOW>
 801283e:	2101      	movs	r1, #1
 8012840:	4811      	ldr	r0, [pc, #68]	; (8012888 <WriteCmdParamN+0x578>)
 8012842:	f7fe ffce 	bl	80117e2 <PIN_LOW>
 8012846:	2101      	movs	r1, #1
 8012848:	480f      	ldr	r0, [pc, #60]	; (8012888 <WriteCmdParamN+0x578>)
 801284a:	f7fe ffca 	bl	80117e2 <PIN_LOW>
 801284e:	2101      	movs	r1, #1
 8012850:	480d      	ldr	r0, [pc, #52]	; (8012888 <WriteCmdParamN+0x578>)
 8012852:	f7fe ffc6 	bl	80117e2 <PIN_LOW>
 8012856:	2101      	movs	r1, #1
 8012858:	480b      	ldr	r0, [pc, #44]	; (8012888 <WriteCmdParamN+0x578>)
 801285a:	f7fe ffc2 	bl	80117e2 <PIN_LOW>
 801285e:	2101      	movs	r1, #1
 8012860:	4809      	ldr	r0, [pc, #36]	; (8012888 <WriteCmdParamN+0x578>)
 8012862:	f7fe ffbe 	bl	80117e2 <PIN_LOW>
 8012866:	2101      	movs	r1, #1
 8012868:	4807      	ldr	r0, [pc, #28]	; (8012888 <WriteCmdParamN+0x578>)
 801286a:	f7fe ffba 	bl	80117e2 <PIN_LOW>
 801286e:	2101      	movs	r1, #1
 8012870:	4805      	ldr	r0, [pc, #20]	; (8012888 <WriteCmdParamN+0x578>)
 8012872:	f7fe ffb6 	bl	80117e2 <PIN_LOW>
 8012876:	2101      	movs	r1, #1
 8012878:	e00a      	b.n	8012890 <WriteCmdParamN+0x580>
 801287a:	bf00      	nop
 801287c:	40020c00 	.word	0x40020c00
 8012880:	40021000 	.word	0x40021000
 8012884:	40021400 	.word	0x40021400
 8012888:	40020800 	.word	0x40020800
 801288c:	20000218 	.word	0x20000218
 8012890:	4817      	ldr	r0, [pc, #92]	; (80128f0 <WriteCmdParamN+0x5e0>)
 8012892:	f7fe ffa6 	bl	80117e2 <PIN_LOW>
 8012896:	2101      	movs	r1, #1
 8012898:	4815      	ldr	r0, [pc, #84]	; (80128f0 <WriteCmdParamN+0x5e0>)
 801289a:	f7fe ffa2 	bl	80117e2 <PIN_LOW>
 801289e:	2101      	movs	r1, #1
 80128a0:	4813      	ldr	r0, [pc, #76]	; (80128f0 <WriteCmdParamN+0x5e0>)
 80128a2:	f7fe ff9e 	bl	80117e2 <PIN_LOW>
 80128a6:	2101      	movs	r1, #1
 80128a8:	4811      	ldr	r0, [pc, #68]	; (80128f0 <WriteCmdParamN+0x5e0>)
 80128aa:	f7fe ff9a 	bl	80117e2 <PIN_LOW>
 80128ae:	2101      	movs	r1, #1
 80128b0:	480f      	ldr	r0, [pc, #60]	; (80128f0 <WriteCmdParamN+0x5e0>)
 80128b2:	f7fe ff96 	bl	80117e2 <PIN_LOW>
 80128b6:	2101      	movs	r1, #1
 80128b8:	480d      	ldr	r0, [pc, #52]	; (80128f0 <WriteCmdParamN+0x5e0>)
 80128ba:	f7fe ffa2 	bl	8011802 <PIN_HIGH>
 80128be:	2101      	movs	r1, #1
 80128c0:	480b      	ldr	r0, [pc, #44]	; (80128f0 <WriteCmdParamN+0x5e0>)
 80128c2:	f7fe ff9e 	bl	8011802 <PIN_HIGH>
 80128c6:	2120      	movs	r1, #32
 80128c8:	480a      	ldr	r0, [pc, #40]	; (80128f4 <WriteCmdParamN+0x5e4>)
 80128ca:	f7fe ff9a 	bl	8011802 <PIN_HIGH>
    while (N-- > 0) {
 80128ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80128d2:	b2da      	uxtb	r2, r3
 80128d4:	3a01      	subs	r2, #1
 80128d6:	b2d2      	uxtb	r2, r2
 80128d8:	717a      	strb	r2, [r7, #5]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	f73f ae42 	bgt.w	8012564 <WriteCmdParamN+0x254>
        }
    }
    CS_IDLE;
 80128e0:	2108      	movs	r1, #8
 80128e2:	4805      	ldr	r0, [pc, #20]	; (80128f8 <WriteCmdParamN+0x5e8>)
 80128e4:	f7fe ff8d 	bl	8011802 <PIN_HIGH>
}
 80128e8:	bf00      	nop
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	40020800 	.word	0x40020800
 80128f4:	40020c00 	.word	0x40020c00
 80128f8:	40021400 	.word	0x40021400

080128fc <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80128fc:	b590      	push	{r4, r7, lr}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	4604      	mov	r4, r0
 8012904:	4608      	mov	r0, r1
 8012906:	4611      	mov	r1, r2
 8012908:	461a      	mov	r2, r3
 801290a:	4623      	mov	r3, r4
 801290c:	71fb      	strb	r3, [r7, #7]
 801290e:	4603      	mov	r3, r0
 8012910:	71bb      	strb	r3, [r7, #6]
 8012912:	460b      	mov	r3, r1
 8012914:	717b      	strb	r3, [r7, #5]
 8012916:	4613      	mov	r3, r2
 8012918:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 801291a:	79bb      	ldrb	r3, [r7, #6]
 801291c:	733b      	strb	r3, [r7, #12]
 801291e:	797b      	ldrb	r3, [r7, #5]
 8012920:	737b      	strb	r3, [r7, #13]
 8012922:	793b      	ldrb	r3, [r7, #4]
 8012924:	73bb      	strb	r3, [r7, #14]
 8012926:	f897 3020 	ldrb.w	r3, [r7, #32]
 801292a:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 801292c:	79fb      	ldrb	r3, [r7, #7]
 801292e:	b29b      	uxth	r3, r3
 8012930:	f107 020c 	add.w	r2, r7, #12
 8012934:	2104      	movs	r1, #4
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff fcea 	bl	8012310 <WriteCmdParamN>
}
 801293c:	bf00      	nop
 801293e:	3714      	adds	r7, #20
 8012940:	46bd      	mov	sp, r7
 8012942:	bd90      	pop	{r4, r7, pc}

08012944 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b08a      	sub	sp, #40	; 0x28
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8012954:	e046      	b.n	80129e4 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	627a      	str	r2, [r7, #36]	; 0x24
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8012962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	627a      	str	r2, [r7, #36]	; 0x24
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 801296e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012972:	2b7f      	cmp	r3, #127	; 0x7f
 8012974:	d108      	bne.n	8012988 <init_table+0x44>
        {
            delay(len);
 8012976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801297a:	4618      	mov	r0, r3
 801297c:	f7fe ff12 	bl	80117a4 <delay>
            len = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012986:	e024      	b.n	80129d2 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8012988:	2300      	movs	r3, #0
 801298a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801298e:	e010      	b.n	80129b2 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	1c5a      	adds	r2, r3, #1
 8012994:	627a      	str	r2, [r7, #36]	; 0x24
 8012996:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801299a:	7819      	ldrb	r1, [r3, #0]
 801299c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80129a0:	4413      	add	r3, r2
 80129a2:	460a      	mov	r2, r1
 80129a4:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80129a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129ac:	3301      	adds	r3, #1
 80129ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80129b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80129b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d3e8      	bcc.n	8012990 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80129be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80129c8:	f107 0208 	add.w	r2, r7, #8
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7ff fc9f 	bl	8012310 <WriteCmdParamN>
        }
        size -= len + 2;
 80129d2:	887a      	ldrh	r2, [r7, #2]
 80129d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80129d8:	b29b      	uxth	r3, r3
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	b29b      	uxth	r3, r3
 80129de:	3b02      	subs	r3, #2
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80129e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	dcb4      	bgt.n	8012956 <init_table+0x12>
    }
}
 80129ec:	bf00      	nop
 80129ee:	bf00      	nop
 80129f0:	3728      	adds	r7, #40	; 0x28
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b084      	sub	sp, #16
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
 80129fe:	460b      	mov	r3, r1
 8012a00:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8012a06:	e01d      	b.n	8012a44 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	1c9a      	adds	r2, r3, #2
 8012a0c:	60fa      	str	r2, [r7, #12]
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	1c9a      	adds	r2, r3, #2
 8012a16:	60fa      	str	r2, [r7, #12]
 8012a18:	881b      	ldrh	r3, [r3, #0]
 8012a1a:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8012a1c:	897b      	ldrh	r3, [r7, #10]
 8012a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d104      	bne.n	8012a30 <init_table16+0x3a>
            delay(d);
 8012a26:	893b      	ldrh	r3, [r7, #8]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fe febb 	bl	80117a4 <delay>
 8012a2e:	e005      	b.n	8012a3c <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8012a30:	893a      	ldrh	r2, [r7, #8]
 8012a32:	897b      	ldrh	r3, [r7, #10]
 8012a34:	4611      	mov	r1, r2
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7ff fa24 	bl	8011e84 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8012a3c:	887b      	ldrh	r3, [r7, #2]
 8012a3e:	3b04      	subs	r3, #4
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8012a44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dcdd      	bgt.n	8012a08 <init_table16+0x12>
    }
}
 8012a4c:	bf00      	nop
 8012a4e:	bf00      	nop
 8012a50:	3710      	adds	r7, #16
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
	...

08012a58 <reset>:



void reset(void)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	af00      	add	r7, sp, #0
    done_reset = 1;
 8012a5c:	4b1f      	ldr	r3, [pc, #124]	; (8012adc <reset+0x84>)
 8012a5e:	2201      	movs	r2, #1
 8012a60:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8012a62:	f7ff f82d 	bl	8011ac0 <setWriteDir>
    CTL_INIT();
 8012a66:	2180      	movs	r1, #128	; 0x80
 8012a68:	481d      	ldr	r0, [pc, #116]	; (8012ae0 <reset+0x88>)
 8012a6a:	f7fe fef0 	bl	801184e <PIN_OUTPUT>
 8012a6e:	2101      	movs	r1, #1
 8012a70:	481c      	ldr	r0, [pc, #112]	; (8012ae4 <reset+0x8c>)
 8012a72:	f7fe feec 	bl	801184e <PIN_OUTPUT>
 8012a76:	2120      	movs	r1, #32
 8012a78:	4819      	ldr	r0, [pc, #100]	; (8012ae0 <reset+0x88>)
 8012a7a:	f7fe fee8 	bl	801184e <PIN_OUTPUT>
 8012a7e:	2108      	movs	r1, #8
 8012a80:	4819      	ldr	r0, [pc, #100]	; (8012ae8 <reset+0x90>)
 8012a82:	f7fe fee4 	bl	801184e <PIN_OUTPUT>
 8012a86:	2120      	movs	r1, #32
 8012a88:	4817      	ldr	r0, [pc, #92]	; (8012ae8 <reset+0x90>)
 8012a8a:	f7fe fee0 	bl	801184e <PIN_OUTPUT>
    CS_IDLE;
 8012a8e:	2108      	movs	r1, #8
 8012a90:	4815      	ldr	r0, [pc, #84]	; (8012ae8 <reset+0x90>)
 8012a92:	f7fe feb6 	bl	8011802 <PIN_HIGH>
    RD_IDLE;
 8012a96:	2180      	movs	r1, #128	; 0x80
 8012a98:	4811      	ldr	r0, [pc, #68]	; (8012ae0 <reset+0x88>)
 8012a9a:	f7fe feb2 	bl	8011802 <PIN_HIGH>
    WR_IDLE;
 8012a9e:	2101      	movs	r1, #1
 8012aa0:	4810      	ldr	r0, [pc, #64]	; (8012ae4 <reset+0x8c>)
 8012aa2:	f7fe feae 	bl	8011802 <PIN_HIGH>
    RESET_IDLE;
 8012aa6:	2120      	movs	r1, #32
 8012aa8:	480f      	ldr	r0, [pc, #60]	; (8012ae8 <reset+0x90>)
 8012aaa:	f7fe feaa 	bl	8011802 <PIN_HIGH>
    delay(50);
 8012aae:	2032      	movs	r0, #50	; 0x32
 8012ab0:	f7fe fe78 	bl	80117a4 <delay>
    RESET_ACTIVE;
 8012ab4:	2120      	movs	r1, #32
 8012ab6:	480c      	ldr	r0, [pc, #48]	; (8012ae8 <reset+0x90>)
 8012ab8:	f7fe fe93 	bl	80117e2 <PIN_LOW>
    delay(100);
 8012abc:	2064      	movs	r0, #100	; 0x64
 8012abe:	f7fe fe71 	bl	80117a4 <delay>
    RESET_IDLE;
 8012ac2:	2120      	movs	r1, #32
 8012ac4:	4808      	ldr	r0, [pc, #32]	; (8012ae8 <reset+0x90>)
 8012ac6:	f7fe fe9c 	bl	8011802 <PIN_HIGH>
    delay(100);
 8012aca:	2064      	movs	r0, #100	; 0x64
 8012acc:	f7fe fe6a 	bl	80117a4 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	20b0      	movs	r0, #176	; 0xb0
 8012ad4:	f7fe ff9c 	bl	8011a10 <WriteCmdData>
}
 8012ad8:	bf00      	nop
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	20000217 	.word	0x20000217
 8012ae0:	40020c00 	.word	0x40020c00
 8012ae4:	40020800 	.word	0x40020800
 8012ae8:	40021400 	.word	0x40021400

08012aec <read16bits>:

static uint16_t read16bits(void)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8012af2:	2180      	movs	r1, #128	; 0x80
 8012af4:	48c2      	ldr	r0, [pc, #776]	; (8012e00 <read16bits+0x314>)
 8012af6:	f7fe fe84 	bl	8011802 <PIN_HIGH>
 8012afa:	2180      	movs	r1, #128	; 0x80
 8012afc:	48c0      	ldr	r0, [pc, #768]	; (8012e00 <read16bits+0x314>)
 8012afe:	f7fe fe70 	bl	80117e2 <PIN_LOW>
 8012b02:	2180      	movs	r1, #128	; 0x80
 8012b04:	48be      	ldr	r0, [pc, #760]	; (8012e00 <read16bits+0x314>)
 8012b06:	f7fe fe6c 	bl	80117e2 <PIN_LOW>
 8012b0a:	2180      	movs	r1, #128	; 0x80
 8012b0c:	48bc      	ldr	r0, [pc, #752]	; (8012e00 <read16bits+0x314>)
 8012b0e:	f7fe fe68 	bl	80117e2 <PIN_LOW>
 8012b12:	2180      	movs	r1, #128	; 0x80
 8012b14:	48ba      	ldr	r0, [pc, #744]	; (8012e00 <read16bits+0x314>)
 8012b16:	f7fe fe64 	bl	80117e2 <PIN_LOW>
 8012b1a:	2180      	movs	r1, #128	; 0x80
 8012b1c:	48b8      	ldr	r0, [pc, #736]	; (8012e00 <read16bits+0x314>)
 8012b1e:	f7fe fe60 	bl	80117e2 <PIN_LOW>
 8012b22:	2180      	movs	r1, #128	; 0x80
 8012b24:	48b6      	ldr	r0, [pc, #728]	; (8012e00 <read16bits+0x314>)
 8012b26:	f7fe fe5c 	bl	80117e2 <PIN_LOW>
 8012b2a:	2180      	movs	r1, #128	; 0x80
 8012b2c:	48b4      	ldr	r0, [pc, #720]	; (8012e00 <read16bits+0x314>)
 8012b2e:	f7fe fe58 	bl	80117e2 <PIN_LOW>
 8012b32:	2180      	movs	r1, #128	; 0x80
 8012b34:	48b2      	ldr	r0, [pc, #712]	; (8012e00 <read16bits+0x314>)
 8012b36:	f7fe fe54 	bl	80117e2 <PIN_LOW>
 8012b3a:	2180      	movs	r1, #128	; 0x80
 8012b3c:	48b0      	ldr	r0, [pc, #704]	; (8012e00 <read16bits+0x314>)
 8012b3e:	f7fe fe50 	bl	80117e2 <PIN_LOW>
 8012b42:	2180      	movs	r1, #128	; 0x80
 8012b44:	48ae      	ldr	r0, [pc, #696]	; (8012e00 <read16bits+0x314>)
 8012b46:	f7fe fe4c 	bl	80117e2 <PIN_LOW>
 8012b4a:	2180      	movs	r1, #128	; 0x80
 8012b4c:	48ac      	ldr	r0, [pc, #688]	; (8012e00 <read16bits+0x314>)
 8012b4e:	f7fe fe48 	bl	80117e2 <PIN_LOW>
 8012b52:	2180      	movs	r1, #128	; 0x80
 8012b54:	48aa      	ldr	r0, [pc, #680]	; (8012e00 <read16bits+0x314>)
 8012b56:	f7fe fe44 	bl	80117e2 <PIN_LOW>
 8012b5a:	2180      	movs	r1, #128	; 0x80
 8012b5c:	48a8      	ldr	r0, [pc, #672]	; (8012e00 <read16bits+0x314>)
 8012b5e:	f7fe fe40 	bl	80117e2 <PIN_LOW>
 8012b62:	2180      	movs	r1, #128	; 0x80
 8012b64:	48a6      	ldr	r0, [pc, #664]	; (8012e00 <read16bits+0x314>)
 8012b66:	f7fe fe3c 	bl	80117e2 <PIN_LOW>
 8012b6a:	2180      	movs	r1, #128	; 0x80
 8012b6c:	48a4      	ldr	r0, [pc, #656]	; (8012e00 <read16bits+0x314>)
 8012b6e:	f7fe fe38 	bl	80117e2 <PIN_LOW>
 8012b72:	2180      	movs	r1, #128	; 0x80
 8012b74:	48a2      	ldr	r0, [pc, #648]	; (8012e00 <read16bits+0x314>)
 8012b76:	f7fe fe34 	bl	80117e2 <PIN_LOW>
 8012b7a:	2180      	movs	r1, #128	; 0x80
 8012b7c:	48a0      	ldr	r0, [pc, #640]	; (8012e00 <read16bits+0x314>)
 8012b7e:	f7fe fe30 	bl	80117e2 <PIN_LOW>
 8012b82:	2180      	movs	r1, #128	; 0x80
 8012b84:	489e      	ldr	r0, [pc, #632]	; (8012e00 <read16bits+0x314>)
 8012b86:	f7fe fe2c 	bl	80117e2 <PIN_LOW>
 8012b8a:	2180      	movs	r1, #128	; 0x80
 8012b8c:	489c      	ldr	r0, [pc, #624]	; (8012e00 <read16bits+0x314>)
 8012b8e:	f7fe fe28 	bl	80117e2 <PIN_LOW>
 8012b92:	2180      	movs	r1, #128	; 0x80
 8012b94:	489a      	ldr	r0, [pc, #616]	; (8012e00 <read16bits+0x314>)
 8012b96:	f7fe fe24 	bl	80117e2 <PIN_LOW>
 8012b9a:	2180      	movs	r1, #128	; 0x80
 8012b9c:	4898      	ldr	r0, [pc, #608]	; (8012e00 <read16bits+0x314>)
 8012b9e:	f7fe fe20 	bl	80117e2 <PIN_LOW>
 8012ba2:	2180      	movs	r1, #128	; 0x80
 8012ba4:	4896      	ldr	r0, [pc, #600]	; (8012e00 <read16bits+0x314>)
 8012ba6:	f7fe fe1c 	bl	80117e2 <PIN_LOW>
 8012baa:	2180      	movs	r1, #128	; 0x80
 8012bac:	4894      	ldr	r0, [pc, #592]	; (8012e00 <read16bits+0x314>)
 8012bae:	f7fe fe18 	bl	80117e2 <PIN_LOW>
 8012bb2:	2180      	movs	r1, #128	; 0x80
 8012bb4:	4892      	ldr	r0, [pc, #584]	; (8012e00 <read16bits+0x314>)
 8012bb6:	f7fe fe14 	bl	80117e2 <PIN_LOW>
 8012bba:	2180      	movs	r1, #128	; 0x80
 8012bbc:	4890      	ldr	r0, [pc, #576]	; (8012e00 <read16bits+0x314>)
 8012bbe:	f7fe fe10 	bl	80117e2 <PIN_LOW>
 8012bc2:	2180      	movs	r1, #128	; 0x80
 8012bc4:	488e      	ldr	r0, [pc, #568]	; (8012e00 <read16bits+0x314>)
 8012bc6:	f7fe fe0c 	bl	80117e2 <PIN_LOW>
 8012bca:	2180      	movs	r1, #128	; 0x80
 8012bcc:	488c      	ldr	r0, [pc, #560]	; (8012e00 <read16bits+0x314>)
 8012bce:	f7fe fe08 	bl	80117e2 <PIN_LOW>
 8012bd2:	2180      	movs	r1, #128	; 0x80
 8012bd4:	488a      	ldr	r0, [pc, #552]	; (8012e00 <read16bits+0x314>)
 8012bd6:	f7fe fe04 	bl	80117e2 <PIN_LOW>
 8012bda:	2180      	movs	r1, #128	; 0x80
 8012bdc:	4888      	ldr	r0, [pc, #544]	; (8012e00 <read16bits+0x314>)
 8012bde:	f7fe fe00 	bl	80117e2 <PIN_LOW>
 8012be2:	2180      	movs	r1, #128	; 0x80
 8012be4:	4886      	ldr	r0, [pc, #536]	; (8012e00 <read16bits+0x314>)
 8012be6:	f7fe fdfc 	bl	80117e2 <PIN_LOW>
 8012bea:	2180      	movs	r1, #128	; 0x80
 8012bec:	4884      	ldr	r0, [pc, #528]	; (8012e00 <read16bits+0x314>)
 8012bee:	f7fe fdf8 	bl	80117e2 <PIN_LOW>
 8012bf2:	2180      	movs	r1, #128	; 0x80
 8012bf4:	4882      	ldr	r0, [pc, #520]	; (8012e00 <read16bits+0x314>)
 8012bf6:	f7fe fdf4 	bl	80117e2 <PIN_LOW>
 8012bfa:	2180      	movs	r1, #128	; 0x80
 8012bfc:	4880      	ldr	r0, [pc, #512]	; (8012e00 <read16bits+0x314>)
 8012bfe:	f7fe fdf0 	bl	80117e2 <PIN_LOW>
 8012c02:	2180      	movs	r1, #128	; 0x80
 8012c04:	487e      	ldr	r0, [pc, #504]	; (8012e00 <read16bits+0x314>)
 8012c06:	f7fe fdec 	bl	80117e2 <PIN_LOW>
 8012c0a:	2180      	movs	r1, #128	; 0x80
 8012c0c:	487c      	ldr	r0, [pc, #496]	; (8012e00 <read16bits+0x314>)
 8012c0e:	f7fe fde8 	bl	80117e2 <PIN_LOW>
 8012c12:	2180      	movs	r1, #128	; 0x80
 8012c14:	487a      	ldr	r0, [pc, #488]	; (8012e00 <read16bits+0x314>)
 8012c16:	f7fe fde4 	bl	80117e2 <PIN_LOW>
 8012c1a:	2180      	movs	r1, #128	; 0x80
 8012c1c:	4878      	ldr	r0, [pc, #480]	; (8012e00 <read16bits+0x314>)
 8012c1e:	f7fe fde0 	bl	80117e2 <PIN_LOW>
 8012c22:	2180      	movs	r1, #128	; 0x80
 8012c24:	4876      	ldr	r0, [pc, #472]	; (8012e00 <read16bits+0x314>)
 8012c26:	f7fe fddc 	bl	80117e2 <PIN_LOW>
 8012c2a:	2180      	movs	r1, #128	; 0x80
 8012c2c:	4874      	ldr	r0, [pc, #464]	; (8012e00 <read16bits+0x314>)
 8012c2e:	f7fe fdd8 	bl	80117e2 <PIN_LOW>
 8012c32:	2180      	movs	r1, #128	; 0x80
 8012c34:	4872      	ldr	r0, [pc, #456]	; (8012e00 <read16bits+0x314>)
 8012c36:	f7fe fdd4 	bl	80117e2 <PIN_LOW>
 8012c3a:	2180      	movs	r1, #128	; 0x80
 8012c3c:	4870      	ldr	r0, [pc, #448]	; (8012e00 <read16bits+0x314>)
 8012c3e:	f7fe fdd0 	bl	80117e2 <PIN_LOW>
 8012c42:	2180      	movs	r1, #128	; 0x80
 8012c44:	486e      	ldr	r0, [pc, #440]	; (8012e00 <read16bits+0x314>)
 8012c46:	f7fe fdcc 	bl	80117e2 <PIN_LOW>
 8012c4a:	2180      	movs	r1, #128	; 0x80
 8012c4c:	486c      	ldr	r0, [pc, #432]	; (8012e00 <read16bits+0x314>)
 8012c4e:	f7fe fdc8 	bl	80117e2 <PIN_LOW>
 8012c52:	2180      	movs	r1, #128	; 0x80
 8012c54:	486a      	ldr	r0, [pc, #424]	; (8012e00 <read16bits+0x314>)
 8012c56:	f7fe fdc4 	bl	80117e2 <PIN_LOW>
 8012c5a:	2180      	movs	r1, #128	; 0x80
 8012c5c:	4868      	ldr	r0, [pc, #416]	; (8012e00 <read16bits+0x314>)
 8012c5e:	f7fe fdc0 	bl	80117e2 <PIN_LOW>
 8012c62:	2180      	movs	r1, #128	; 0x80
 8012c64:	4866      	ldr	r0, [pc, #408]	; (8012e00 <read16bits+0x314>)
 8012c66:	f7fe fdbc 	bl	80117e2 <PIN_LOW>
 8012c6a:	2180      	movs	r1, #128	; 0x80
 8012c6c:	4864      	ldr	r0, [pc, #400]	; (8012e00 <read16bits+0x314>)
 8012c6e:	f7fe fdb8 	bl	80117e2 <PIN_LOW>
 8012c72:	2180      	movs	r1, #128	; 0x80
 8012c74:	4862      	ldr	r0, [pc, #392]	; (8012e00 <read16bits+0x314>)
 8012c76:	f7fe fdb4 	bl	80117e2 <PIN_LOW>
 8012c7a:	2180      	movs	r1, #128	; 0x80
 8012c7c:	4860      	ldr	r0, [pc, #384]	; (8012e00 <read16bits+0x314>)
 8012c7e:	f7fe fdb0 	bl	80117e2 <PIN_LOW>
 8012c82:	2180      	movs	r1, #128	; 0x80
 8012c84:	485e      	ldr	r0, [pc, #376]	; (8012e00 <read16bits+0x314>)
 8012c86:	f7fe fdac 	bl	80117e2 <PIN_LOW>
 8012c8a:	2180      	movs	r1, #128	; 0x80
 8012c8c:	485c      	ldr	r0, [pc, #368]	; (8012e00 <read16bits+0x314>)
 8012c8e:	f7fe fda8 	bl	80117e2 <PIN_LOW>
 8012c92:	4b5c      	ldr	r3, [pc, #368]	; (8012e04 <read16bits+0x318>)
 8012c94:	691b      	ldr	r3, [r3, #16]
 8012c96:	0b1b      	lsrs	r3, r3, #12
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	f003 0301 	and.w	r3, r3, #1
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	4b57      	ldr	r3, [pc, #348]	; (8012e00 <read16bits+0x314>)
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	0b9b      	lsrs	r3, r3, #14
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	f003 0302 	and.w	r3, r3, #2
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	b29a      	uxth	r2, r3
 8012cb2:	4b54      	ldr	r3, [pc, #336]	; (8012e04 <read16bits+0x318>)
 8012cb4:	691b      	ldr	r3, [r3, #16]
 8012cb6:	0b5b      	lsrs	r3, r3, #13
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	f003 0304 	and.w	r3, r3, #4
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	4b50      	ldr	r3, [pc, #320]	; (8012e08 <read16bits+0x31c>)
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	0a9b      	lsrs	r3, r3, #10
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	f003 0308 	and.w	r3, r3, #8
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	4b4b      	ldr	r3, [pc, #300]	; (8012e04 <read16bits+0x318>)
 8012cd8:	691b      	ldr	r3, [r3, #16]
 8012cda:	0a9b      	lsrs	r3, r3, #10
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	f003 0310 	and.w	r3, r3, #16
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	4b47      	ldr	r3, [pc, #284]	; (8012e08 <read16bits+0x31c>)
 8012cea:	691b      	ldr	r3, [r3, #16]
 8012cec:	099b      	lsrs	r3, r3, #6
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	f003 0320 	and.w	r3, r3, #32
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	4b43      	ldr	r3, [pc, #268]	; (8012e08 <read16bits+0x31c>)
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	08db      	lsrs	r3, r3, #3
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	4b3d      	ldr	r3, [pc, #244]	; (8012e04 <read16bits+0x318>)
 8012d0e:	691b      	ldr	r3, [r3, #16]
 8012d10:	099b      	lsrs	r3, r3, #6
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	80fb      	strh	r3, [r7, #6]
 8012d1e:	2180      	movs	r1, #128	; 0x80
 8012d20:	4837      	ldr	r0, [pc, #220]	; (8012e00 <read16bits+0x314>)
 8012d22:	f7fe fd6e 	bl	8011802 <PIN_HIGH>
 8012d26:	2180      	movs	r1, #128	; 0x80
 8012d28:	4835      	ldr	r0, [pc, #212]	; (8012e00 <read16bits+0x314>)
 8012d2a:	f7fe fd6a 	bl	8011802 <PIN_HIGH>
    READ_8(lo);
 8012d2e:	2180      	movs	r1, #128	; 0x80
 8012d30:	4833      	ldr	r0, [pc, #204]	; (8012e00 <read16bits+0x314>)
 8012d32:	f7fe fd66 	bl	8011802 <PIN_HIGH>
 8012d36:	2180      	movs	r1, #128	; 0x80
 8012d38:	4831      	ldr	r0, [pc, #196]	; (8012e00 <read16bits+0x314>)
 8012d3a:	f7fe fd52 	bl	80117e2 <PIN_LOW>
 8012d3e:	2180      	movs	r1, #128	; 0x80
 8012d40:	482f      	ldr	r0, [pc, #188]	; (8012e00 <read16bits+0x314>)
 8012d42:	f7fe fd4e 	bl	80117e2 <PIN_LOW>
 8012d46:	2180      	movs	r1, #128	; 0x80
 8012d48:	482d      	ldr	r0, [pc, #180]	; (8012e00 <read16bits+0x314>)
 8012d4a:	f7fe fd4a 	bl	80117e2 <PIN_LOW>
 8012d4e:	2180      	movs	r1, #128	; 0x80
 8012d50:	482b      	ldr	r0, [pc, #172]	; (8012e00 <read16bits+0x314>)
 8012d52:	f7fe fd46 	bl	80117e2 <PIN_LOW>
 8012d56:	2180      	movs	r1, #128	; 0x80
 8012d58:	4829      	ldr	r0, [pc, #164]	; (8012e00 <read16bits+0x314>)
 8012d5a:	f7fe fd42 	bl	80117e2 <PIN_LOW>
 8012d5e:	2180      	movs	r1, #128	; 0x80
 8012d60:	4827      	ldr	r0, [pc, #156]	; (8012e00 <read16bits+0x314>)
 8012d62:	f7fe fd3e 	bl	80117e2 <PIN_LOW>
 8012d66:	2180      	movs	r1, #128	; 0x80
 8012d68:	4825      	ldr	r0, [pc, #148]	; (8012e00 <read16bits+0x314>)
 8012d6a:	f7fe fd3a 	bl	80117e2 <PIN_LOW>
 8012d6e:	2180      	movs	r1, #128	; 0x80
 8012d70:	4823      	ldr	r0, [pc, #140]	; (8012e00 <read16bits+0x314>)
 8012d72:	f7fe fd36 	bl	80117e2 <PIN_LOW>
 8012d76:	2180      	movs	r1, #128	; 0x80
 8012d78:	4821      	ldr	r0, [pc, #132]	; (8012e00 <read16bits+0x314>)
 8012d7a:	f7fe fd32 	bl	80117e2 <PIN_LOW>
 8012d7e:	2180      	movs	r1, #128	; 0x80
 8012d80:	481f      	ldr	r0, [pc, #124]	; (8012e00 <read16bits+0x314>)
 8012d82:	f7fe fd2e 	bl	80117e2 <PIN_LOW>
 8012d86:	2180      	movs	r1, #128	; 0x80
 8012d88:	481d      	ldr	r0, [pc, #116]	; (8012e00 <read16bits+0x314>)
 8012d8a:	f7fe fd2a 	bl	80117e2 <PIN_LOW>
 8012d8e:	2180      	movs	r1, #128	; 0x80
 8012d90:	481b      	ldr	r0, [pc, #108]	; (8012e00 <read16bits+0x314>)
 8012d92:	f7fe fd26 	bl	80117e2 <PIN_LOW>
 8012d96:	2180      	movs	r1, #128	; 0x80
 8012d98:	4819      	ldr	r0, [pc, #100]	; (8012e00 <read16bits+0x314>)
 8012d9a:	f7fe fd22 	bl	80117e2 <PIN_LOW>
 8012d9e:	2180      	movs	r1, #128	; 0x80
 8012da0:	4817      	ldr	r0, [pc, #92]	; (8012e00 <read16bits+0x314>)
 8012da2:	f7fe fd1e 	bl	80117e2 <PIN_LOW>
 8012da6:	2180      	movs	r1, #128	; 0x80
 8012da8:	4815      	ldr	r0, [pc, #84]	; (8012e00 <read16bits+0x314>)
 8012daa:	f7fe fd1a 	bl	80117e2 <PIN_LOW>
 8012dae:	2180      	movs	r1, #128	; 0x80
 8012db0:	4813      	ldr	r0, [pc, #76]	; (8012e00 <read16bits+0x314>)
 8012db2:	f7fe fd16 	bl	80117e2 <PIN_LOW>
 8012db6:	2180      	movs	r1, #128	; 0x80
 8012db8:	4811      	ldr	r0, [pc, #68]	; (8012e00 <read16bits+0x314>)
 8012dba:	f7fe fd12 	bl	80117e2 <PIN_LOW>
 8012dbe:	2180      	movs	r1, #128	; 0x80
 8012dc0:	480f      	ldr	r0, [pc, #60]	; (8012e00 <read16bits+0x314>)
 8012dc2:	f7fe fd0e 	bl	80117e2 <PIN_LOW>
 8012dc6:	2180      	movs	r1, #128	; 0x80
 8012dc8:	480d      	ldr	r0, [pc, #52]	; (8012e00 <read16bits+0x314>)
 8012dca:	f7fe fd0a 	bl	80117e2 <PIN_LOW>
 8012dce:	2180      	movs	r1, #128	; 0x80
 8012dd0:	480b      	ldr	r0, [pc, #44]	; (8012e00 <read16bits+0x314>)
 8012dd2:	f7fe fd06 	bl	80117e2 <PIN_LOW>
 8012dd6:	2180      	movs	r1, #128	; 0x80
 8012dd8:	4809      	ldr	r0, [pc, #36]	; (8012e00 <read16bits+0x314>)
 8012dda:	f7fe fd02 	bl	80117e2 <PIN_LOW>
 8012dde:	2180      	movs	r1, #128	; 0x80
 8012de0:	4807      	ldr	r0, [pc, #28]	; (8012e00 <read16bits+0x314>)
 8012de2:	f7fe fcfe 	bl	80117e2 <PIN_LOW>
 8012de6:	2180      	movs	r1, #128	; 0x80
 8012de8:	4805      	ldr	r0, [pc, #20]	; (8012e00 <read16bits+0x314>)
 8012dea:	f7fe fcfa 	bl	80117e2 <PIN_LOW>
 8012dee:	2180      	movs	r1, #128	; 0x80
 8012df0:	4803      	ldr	r0, [pc, #12]	; (8012e00 <read16bits+0x314>)
 8012df2:	f7fe fcf6 	bl	80117e2 <PIN_LOW>
 8012df6:	2180      	movs	r1, #128	; 0x80
 8012df8:	4801      	ldr	r0, [pc, #4]	; (8012e00 <read16bits+0x314>)
 8012dfa:	f7fe fcf2 	bl	80117e2 <PIN_LOW>
 8012dfe:	e005      	b.n	8012e0c <read16bits+0x320>
 8012e00:	40020c00 	.word	0x40020c00
 8012e04:	40021400 	.word	0x40021400
 8012e08:	40021000 	.word	0x40021000
 8012e0c:	2180      	movs	r1, #128	; 0x80
 8012e0e:	4860      	ldr	r0, [pc, #384]	; (8012f90 <read16bits+0x4a4>)
 8012e10:	f7fe fce7 	bl	80117e2 <PIN_LOW>
 8012e14:	2180      	movs	r1, #128	; 0x80
 8012e16:	485e      	ldr	r0, [pc, #376]	; (8012f90 <read16bits+0x4a4>)
 8012e18:	f7fe fce3 	bl	80117e2 <PIN_LOW>
 8012e1c:	2180      	movs	r1, #128	; 0x80
 8012e1e:	485c      	ldr	r0, [pc, #368]	; (8012f90 <read16bits+0x4a4>)
 8012e20:	f7fe fcdf 	bl	80117e2 <PIN_LOW>
 8012e24:	2180      	movs	r1, #128	; 0x80
 8012e26:	485a      	ldr	r0, [pc, #360]	; (8012f90 <read16bits+0x4a4>)
 8012e28:	f7fe fcdb 	bl	80117e2 <PIN_LOW>
 8012e2c:	2180      	movs	r1, #128	; 0x80
 8012e2e:	4858      	ldr	r0, [pc, #352]	; (8012f90 <read16bits+0x4a4>)
 8012e30:	f7fe fcd7 	bl	80117e2 <PIN_LOW>
 8012e34:	2180      	movs	r1, #128	; 0x80
 8012e36:	4856      	ldr	r0, [pc, #344]	; (8012f90 <read16bits+0x4a4>)
 8012e38:	f7fe fcd3 	bl	80117e2 <PIN_LOW>
 8012e3c:	2180      	movs	r1, #128	; 0x80
 8012e3e:	4854      	ldr	r0, [pc, #336]	; (8012f90 <read16bits+0x4a4>)
 8012e40:	f7fe fccf 	bl	80117e2 <PIN_LOW>
 8012e44:	2180      	movs	r1, #128	; 0x80
 8012e46:	4852      	ldr	r0, [pc, #328]	; (8012f90 <read16bits+0x4a4>)
 8012e48:	f7fe fccb 	bl	80117e2 <PIN_LOW>
 8012e4c:	2180      	movs	r1, #128	; 0x80
 8012e4e:	4850      	ldr	r0, [pc, #320]	; (8012f90 <read16bits+0x4a4>)
 8012e50:	f7fe fcc7 	bl	80117e2 <PIN_LOW>
 8012e54:	2180      	movs	r1, #128	; 0x80
 8012e56:	484e      	ldr	r0, [pc, #312]	; (8012f90 <read16bits+0x4a4>)
 8012e58:	f7fe fcc3 	bl	80117e2 <PIN_LOW>
 8012e5c:	2180      	movs	r1, #128	; 0x80
 8012e5e:	484c      	ldr	r0, [pc, #304]	; (8012f90 <read16bits+0x4a4>)
 8012e60:	f7fe fcbf 	bl	80117e2 <PIN_LOW>
 8012e64:	2180      	movs	r1, #128	; 0x80
 8012e66:	484a      	ldr	r0, [pc, #296]	; (8012f90 <read16bits+0x4a4>)
 8012e68:	f7fe fcbb 	bl	80117e2 <PIN_LOW>
 8012e6c:	2180      	movs	r1, #128	; 0x80
 8012e6e:	4848      	ldr	r0, [pc, #288]	; (8012f90 <read16bits+0x4a4>)
 8012e70:	f7fe fcb7 	bl	80117e2 <PIN_LOW>
 8012e74:	2180      	movs	r1, #128	; 0x80
 8012e76:	4846      	ldr	r0, [pc, #280]	; (8012f90 <read16bits+0x4a4>)
 8012e78:	f7fe fcb3 	bl	80117e2 <PIN_LOW>
 8012e7c:	2180      	movs	r1, #128	; 0x80
 8012e7e:	4844      	ldr	r0, [pc, #272]	; (8012f90 <read16bits+0x4a4>)
 8012e80:	f7fe fcaf 	bl	80117e2 <PIN_LOW>
 8012e84:	2180      	movs	r1, #128	; 0x80
 8012e86:	4842      	ldr	r0, [pc, #264]	; (8012f90 <read16bits+0x4a4>)
 8012e88:	f7fe fcab 	bl	80117e2 <PIN_LOW>
 8012e8c:	2180      	movs	r1, #128	; 0x80
 8012e8e:	4840      	ldr	r0, [pc, #256]	; (8012f90 <read16bits+0x4a4>)
 8012e90:	f7fe fca7 	bl	80117e2 <PIN_LOW>
 8012e94:	2180      	movs	r1, #128	; 0x80
 8012e96:	483e      	ldr	r0, [pc, #248]	; (8012f90 <read16bits+0x4a4>)
 8012e98:	f7fe fca3 	bl	80117e2 <PIN_LOW>
 8012e9c:	2180      	movs	r1, #128	; 0x80
 8012e9e:	483c      	ldr	r0, [pc, #240]	; (8012f90 <read16bits+0x4a4>)
 8012ea0:	f7fe fc9f 	bl	80117e2 <PIN_LOW>
 8012ea4:	2180      	movs	r1, #128	; 0x80
 8012ea6:	483a      	ldr	r0, [pc, #232]	; (8012f90 <read16bits+0x4a4>)
 8012ea8:	f7fe fc9b 	bl	80117e2 <PIN_LOW>
 8012eac:	2180      	movs	r1, #128	; 0x80
 8012eae:	4838      	ldr	r0, [pc, #224]	; (8012f90 <read16bits+0x4a4>)
 8012eb0:	f7fe fc97 	bl	80117e2 <PIN_LOW>
 8012eb4:	2180      	movs	r1, #128	; 0x80
 8012eb6:	4836      	ldr	r0, [pc, #216]	; (8012f90 <read16bits+0x4a4>)
 8012eb8:	f7fe fc93 	bl	80117e2 <PIN_LOW>
 8012ebc:	2180      	movs	r1, #128	; 0x80
 8012ebe:	4834      	ldr	r0, [pc, #208]	; (8012f90 <read16bits+0x4a4>)
 8012ec0:	f7fe fc8f 	bl	80117e2 <PIN_LOW>
 8012ec4:	2180      	movs	r1, #128	; 0x80
 8012ec6:	4832      	ldr	r0, [pc, #200]	; (8012f90 <read16bits+0x4a4>)
 8012ec8:	f7fe fc8b 	bl	80117e2 <PIN_LOW>
 8012ecc:	2180      	movs	r1, #128	; 0x80
 8012ece:	4830      	ldr	r0, [pc, #192]	; (8012f90 <read16bits+0x4a4>)
 8012ed0:	f7fe fc87 	bl	80117e2 <PIN_LOW>
 8012ed4:	2180      	movs	r1, #128	; 0x80
 8012ed6:	482e      	ldr	r0, [pc, #184]	; (8012f90 <read16bits+0x4a4>)
 8012ed8:	f7fe fc83 	bl	80117e2 <PIN_LOW>
 8012edc:	4b2d      	ldr	r3, [pc, #180]	; (8012f94 <read16bits+0x4a8>)
 8012ede:	691b      	ldr	r3, [r3, #16]
 8012ee0:	0b1b      	lsrs	r3, r3, #12
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	f003 0301 	and.w	r3, r3, #1
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	4b29      	ldr	r3, [pc, #164]	; (8012f90 <read16bits+0x4a4>)
 8012eec:	691b      	ldr	r3, [r3, #16]
 8012eee:	0b9b      	lsrs	r3, r3, #14
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	f003 0302 	and.w	r3, r3, #2
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	4313      	orrs	r3, r2
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	4b25      	ldr	r3, [pc, #148]	; (8012f94 <read16bits+0x4a8>)
 8012efe:	691b      	ldr	r3, [r3, #16]
 8012f00:	0b5b      	lsrs	r3, r3, #13
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	b2db      	uxtb	r3, r3
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	4b22      	ldr	r3, [pc, #136]	; (8012f98 <read16bits+0x4ac>)
 8012f10:	691b      	ldr	r3, [r3, #16]
 8012f12:	0a9b      	lsrs	r3, r3, #10
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	f003 0308 	and.w	r3, r3, #8
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	4b1c      	ldr	r3, [pc, #112]	; (8012f94 <read16bits+0x4a8>)
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	0a9b      	lsrs	r3, r3, #10
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	f003 0310 	and.w	r3, r3, #16
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	b2da      	uxtb	r2, r3
 8012f32:	4b19      	ldr	r3, [pc, #100]	; (8012f98 <read16bits+0x4ac>)
 8012f34:	691b      	ldr	r3, [r3, #16]
 8012f36:	099b      	lsrs	r3, r3, #6
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	f003 0320 	and.w	r3, r3, #32
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	4313      	orrs	r3, r2
 8012f42:	b2da      	uxtb	r2, r3
 8012f44:	4b14      	ldr	r3, [pc, #80]	; (8012f98 <read16bits+0x4ac>)
 8012f46:	691b      	ldr	r3, [r3, #16]
 8012f48:	08db      	lsrs	r3, r3, #3
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	4313      	orrs	r3, r2
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	4b0f      	ldr	r3, [pc, #60]	; (8012f94 <read16bits+0x4a8>)
 8012f58:	691b      	ldr	r3, [r3, #16]
 8012f5a:	099b      	lsrs	r3, r3, #6
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	4313      	orrs	r3, r2
 8012f66:	717b      	strb	r3, [r7, #5]
 8012f68:	2180      	movs	r1, #128	; 0x80
 8012f6a:	4809      	ldr	r0, [pc, #36]	; (8012f90 <read16bits+0x4a4>)
 8012f6c:	f7fe fc49 	bl	8011802 <PIN_HIGH>
 8012f70:	2180      	movs	r1, #128	; 0x80
 8012f72:	4807      	ldr	r0, [pc, #28]	; (8012f90 <read16bits+0x4a4>)
 8012f74:	f7fe fc45 	bl	8011802 <PIN_HIGH>
    return (ret << 8) | lo;
 8012f78:	88fb      	ldrh	r3, [r7, #6]
 8012f7a:	021b      	lsls	r3, r3, #8
 8012f7c:	b21a      	sxth	r2, r3
 8012f7e:	797b      	ldrb	r3, [r7, #5]
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	4313      	orrs	r3, r2
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	b29b      	uxth	r3, r3
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	40020c00 	.word	0x40020c00
 8012f94:	40021400 	.word	0x40021400
 8012f98:	40021000 	.word	0x40021000

08012f9c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	460a      	mov	r2, r1
 8012fa6:	80fb      	strh	r3, [r7, #6]
 8012fa8:	4613      	mov	r3, r2
 8012faa:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8012fac:	4b9e      	ldr	r3, [pc, #632]	; (8013228 <readReg+0x28c>)
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d101      	bne.n	8012fb8 <readReg+0x1c>
        reset();
 8012fb4:	f7ff fd50 	bl	8012a58 <reset>
    CS_ACTIVE;
 8012fb8:	2108      	movs	r1, #8
 8012fba:	489c      	ldr	r0, [pc, #624]	; (801322c <readReg+0x290>)
 8012fbc:	f7fe fc11 	bl	80117e2 <PIN_LOW>
    WriteCmd(reg);
 8012fc0:	2120      	movs	r1, #32
 8012fc2:	489b      	ldr	r0, [pc, #620]	; (8013230 <readReg+0x294>)
 8012fc4:	f7fe fc0d 	bl	80117e2 <PIN_LOW>
 8012fc8:	88fb      	ldrh	r3, [r7, #6]
 8012fca:	0a1b      	lsrs	r3, r3, #8
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	73fb      	strb	r3, [r7, #15]
 8012fd0:	88fb      	ldrh	r3, [r7, #6]
 8012fd2:	73bb      	strb	r3, [r7, #14]
 8012fd4:	4b96      	ldr	r3, [pc, #600]	; (8013230 <readReg+0x294>)
 8012fd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012fda:	619a      	str	r2, [r3, #24]
 8012fdc:	4b95      	ldr	r3, [pc, #596]	; (8013234 <readReg+0x298>)
 8012fde:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012fe2:	619a      	str	r2, [r3, #24]
 8012fe4:	4b91      	ldr	r3, [pc, #580]	; (801322c <readReg+0x290>)
 8012fe6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012fea:	619a      	str	r2, [r3, #24]
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
 8012fee:	039b      	lsls	r3, r3, #14
 8012ff0:	4a8f      	ldr	r2, [pc, #572]	; (8013230 <readReg+0x294>)
 8012ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ff6:	6193      	str	r3, [r2, #24]
 8012ff8:	7bfb      	ldrb	r3, [r7, #15]
 8012ffa:	029b      	lsls	r3, r3, #10
 8012ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013000:	7bfb      	ldrb	r3, [r7, #15]
 8013002:	019b      	lsls	r3, r3, #6
 8013004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013008:	431a      	orrs	r2, r3
 801300a:	7bfb      	ldrb	r3, [r7, #15]
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013012:	431a      	orrs	r2, r3
 8013014:	4b87      	ldr	r3, [pc, #540]	; (8013234 <readReg+0x298>)
 8013016:	619a      	str	r2, [r3, #24]
 8013018:	7bfb      	ldrb	r3, [r7, #15]
 801301a:	031b      	lsls	r3, r3, #12
 801301c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013020:	7bfb      	ldrb	r3, [r7, #15]
 8013022:	035b      	lsls	r3, r3, #13
 8013024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013028:	431a      	orrs	r2, r3
 801302a:	7bfb      	ldrb	r3, [r7, #15]
 801302c:	029b      	lsls	r3, r3, #10
 801302e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013032:	431a      	orrs	r2, r3
 8013034:	7bfb      	ldrb	r3, [r7, #15]
 8013036:	019b      	lsls	r3, r3, #6
 8013038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801303c:	431a      	orrs	r2, r3
 801303e:	4b7b      	ldr	r3, [pc, #492]	; (801322c <readReg+0x290>)
 8013040:	619a      	str	r2, [r3, #24]
 8013042:	2101      	movs	r1, #1
 8013044:	487c      	ldr	r0, [pc, #496]	; (8013238 <readReg+0x29c>)
 8013046:	f7fe fbcc 	bl	80117e2 <PIN_LOW>
 801304a:	2101      	movs	r1, #1
 801304c:	487a      	ldr	r0, [pc, #488]	; (8013238 <readReg+0x29c>)
 801304e:	f7fe fbc8 	bl	80117e2 <PIN_LOW>
 8013052:	2101      	movs	r1, #1
 8013054:	4878      	ldr	r0, [pc, #480]	; (8013238 <readReg+0x29c>)
 8013056:	f7fe fbc4 	bl	80117e2 <PIN_LOW>
 801305a:	2101      	movs	r1, #1
 801305c:	4876      	ldr	r0, [pc, #472]	; (8013238 <readReg+0x29c>)
 801305e:	f7fe fbc0 	bl	80117e2 <PIN_LOW>
 8013062:	2101      	movs	r1, #1
 8013064:	4874      	ldr	r0, [pc, #464]	; (8013238 <readReg+0x29c>)
 8013066:	f7fe fbbc 	bl	80117e2 <PIN_LOW>
 801306a:	2101      	movs	r1, #1
 801306c:	4872      	ldr	r0, [pc, #456]	; (8013238 <readReg+0x29c>)
 801306e:	f7fe fbb8 	bl	80117e2 <PIN_LOW>
 8013072:	2101      	movs	r1, #1
 8013074:	4870      	ldr	r0, [pc, #448]	; (8013238 <readReg+0x29c>)
 8013076:	f7fe fbb4 	bl	80117e2 <PIN_LOW>
 801307a:	2101      	movs	r1, #1
 801307c:	486e      	ldr	r0, [pc, #440]	; (8013238 <readReg+0x29c>)
 801307e:	f7fe fbb0 	bl	80117e2 <PIN_LOW>
 8013082:	2101      	movs	r1, #1
 8013084:	486c      	ldr	r0, [pc, #432]	; (8013238 <readReg+0x29c>)
 8013086:	f7fe fbac 	bl	80117e2 <PIN_LOW>
 801308a:	2101      	movs	r1, #1
 801308c:	486a      	ldr	r0, [pc, #424]	; (8013238 <readReg+0x29c>)
 801308e:	f7fe fba8 	bl	80117e2 <PIN_LOW>
 8013092:	2101      	movs	r1, #1
 8013094:	4868      	ldr	r0, [pc, #416]	; (8013238 <readReg+0x29c>)
 8013096:	f7fe fba4 	bl	80117e2 <PIN_LOW>
 801309a:	2101      	movs	r1, #1
 801309c:	4866      	ldr	r0, [pc, #408]	; (8013238 <readReg+0x29c>)
 801309e:	f7fe fba0 	bl	80117e2 <PIN_LOW>
 80130a2:	2101      	movs	r1, #1
 80130a4:	4864      	ldr	r0, [pc, #400]	; (8013238 <readReg+0x29c>)
 80130a6:	f7fe fb9c 	bl	80117e2 <PIN_LOW>
 80130aa:	2101      	movs	r1, #1
 80130ac:	4862      	ldr	r0, [pc, #392]	; (8013238 <readReg+0x29c>)
 80130ae:	f7fe fb98 	bl	80117e2 <PIN_LOW>
 80130b2:	2101      	movs	r1, #1
 80130b4:	4860      	ldr	r0, [pc, #384]	; (8013238 <readReg+0x29c>)
 80130b6:	f7fe fb94 	bl	80117e2 <PIN_LOW>
 80130ba:	2101      	movs	r1, #1
 80130bc:	485e      	ldr	r0, [pc, #376]	; (8013238 <readReg+0x29c>)
 80130be:	f7fe fb90 	bl	80117e2 <PIN_LOW>
 80130c2:	2101      	movs	r1, #1
 80130c4:	485c      	ldr	r0, [pc, #368]	; (8013238 <readReg+0x29c>)
 80130c6:	f7fe fb8c 	bl	80117e2 <PIN_LOW>
 80130ca:	2101      	movs	r1, #1
 80130cc:	485a      	ldr	r0, [pc, #360]	; (8013238 <readReg+0x29c>)
 80130ce:	f7fe fb98 	bl	8011802 <PIN_HIGH>
 80130d2:	2101      	movs	r1, #1
 80130d4:	4858      	ldr	r0, [pc, #352]	; (8013238 <readReg+0x29c>)
 80130d6:	f7fe fb94 	bl	8011802 <PIN_HIGH>
 80130da:	4b55      	ldr	r3, [pc, #340]	; (8013230 <readReg+0x294>)
 80130dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80130e0:	619a      	str	r2, [r3, #24]
 80130e2:	4b54      	ldr	r3, [pc, #336]	; (8013234 <readReg+0x298>)
 80130e4:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80130e8:	619a      	str	r2, [r3, #24]
 80130ea:	4b50      	ldr	r3, [pc, #320]	; (801322c <readReg+0x290>)
 80130ec:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80130f0:	619a      	str	r2, [r3, #24]
 80130f2:	7bbb      	ldrb	r3, [r7, #14]
 80130f4:	039b      	lsls	r3, r3, #14
 80130f6:	4a4e      	ldr	r2, [pc, #312]	; (8013230 <readReg+0x294>)
 80130f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80130fc:	6193      	str	r3, [r2, #24]
 80130fe:	7bbb      	ldrb	r3, [r7, #14]
 8013100:	029b      	lsls	r3, r3, #10
 8013102:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013106:	7bbb      	ldrb	r3, [r7, #14]
 8013108:	019b      	lsls	r3, r3, #6
 801310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801310e:	431a      	orrs	r2, r3
 8013110:	7bbb      	ldrb	r3, [r7, #14]
 8013112:	00db      	lsls	r3, r3, #3
 8013114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013118:	431a      	orrs	r2, r3
 801311a:	4b46      	ldr	r3, [pc, #280]	; (8013234 <readReg+0x298>)
 801311c:	619a      	str	r2, [r3, #24]
 801311e:	7bbb      	ldrb	r3, [r7, #14]
 8013120:	031b      	lsls	r3, r3, #12
 8013122:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013126:	7bbb      	ldrb	r3, [r7, #14]
 8013128:	035b      	lsls	r3, r3, #13
 801312a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801312e:	431a      	orrs	r2, r3
 8013130:	7bbb      	ldrb	r3, [r7, #14]
 8013132:	029b      	lsls	r3, r3, #10
 8013134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013138:	431a      	orrs	r2, r3
 801313a:	7bbb      	ldrb	r3, [r7, #14]
 801313c:	019b      	lsls	r3, r3, #6
 801313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013142:	431a      	orrs	r2, r3
 8013144:	4b39      	ldr	r3, [pc, #228]	; (801322c <readReg+0x290>)
 8013146:	619a      	str	r2, [r3, #24]
 8013148:	2101      	movs	r1, #1
 801314a:	483b      	ldr	r0, [pc, #236]	; (8013238 <readReg+0x29c>)
 801314c:	f7fe fb49 	bl	80117e2 <PIN_LOW>
 8013150:	2101      	movs	r1, #1
 8013152:	4839      	ldr	r0, [pc, #228]	; (8013238 <readReg+0x29c>)
 8013154:	f7fe fb45 	bl	80117e2 <PIN_LOW>
 8013158:	2101      	movs	r1, #1
 801315a:	4837      	ldr	r0, [pc, #220]	; (8013238 <readReg+0x29c>)
 801315c:	f7fe fb41 	bl	80117e2 <PIN_LOW>
 8013160:	2101      	movs	r1, #1
 8013162:	4835      	ldr	r0, [pc, #212]	; (8013238 <readReg+0x29c>)
 8013164:	f7fe fb3d 	bl	80117e2 <PIN_LOW>
 8013168:	2101      	movs	r1, #1
 801316a:	4833      	ldr	r0, [pc, #204]	; (8013238 <readReg+0x29c>)
 801316c:	f7fe fb39 	bl	80117e2 <PIN_LOW>
 8013170:	2101      	movs	r1, #1
 8013172:	4831      	ldr	r0, [pc, #196]	; (8013238 <readReg+0x29c>)
 8013174:	f7fe fb35 	bl	80117e2 <PIN_LOW>
 8013178:	2101      	movs	r1, #1
 801317a:	482f      	ldr	r0, [pc, #188]	; (8013238 <readReg+0x29c>)
 801317c:	f7fe fb31 	bl	80117e2 <PIN_LOW>
 8013180:	2101      	movs	r1, #1
 8013182:	482d      	ldr	r0, [pc, #180]	; (8013238 <readReg+0x29c>)
 8013184:	f7fe fb2d 	bl	80117e2 <PIN_LOW>
 8013188:	2101      	movs	r1, #1
 801318a:	482b      	ldr	r0, [pc, #172]	; (8013238 <readReg+0x29c>)
 801318c:	f7fe fb29 	bl	80117e2 <PIN_LOW>
 8013190:	2101      	movs	r1, #1
 8013192:	4829      	ldr	r0, [pc, #164]	; (8013238 <readReg+0x29c>)
 8013194:	f7fe fb25 	bl	80117e2 <PIN_LOW>
 8013198:	2101      	movs	r1, #1
 801319a:	4827      	ldr	r0, [pc, #156]	; (8013238 <readReg+0x29c>)
 801319c:	f7fe fb21 	bl	80117e2 <PIN_LOW>
 80131a0:	2101      	movs	r1, #1
 80131a2:	4825      	ldr	r0, [pc, #148]	; (8013238 <readReg+0x29c>)
 80131a4:	f7fe fb1d 	bl	80117e2 <PIN_LOW>
 80131a8:	2101      	movs	r1, #1
 80131aa:	4823      	ldr	r0, [pc, #140]	; (8013238 <readReg+0x29c>)
 80131ac:	f7fe fb19 	bl	80117e2 <PIN_LOW>
 80131b0:	2101      	movs	r1, #1
 80131b2:	4821      	ldr	r0, [pc, #132]	; (8013238 <readReg+0x29c>)
 80131b4:	f7fe fb15 	bl	80117e2 <PIN_LOW>
 80131b8:	2101      	movs	r1, #1
 80131ba:	481f      	ldr	r0, [pc, #124]	; (8013238 <readReg+0x29c>)
 80131bc:	f7fe fb11 	bl	80117e2 <PIN_LOW>
 80131c0:	2101      	movs	r1, #1
 80131c2:	481d      	ldr	r0, [pc, #116]	; (8013238 <readReg+0x29c>)
 80131c4:	f7fe fb0d 	bl	80117e2 <PIN_LOW>
 80131c8:	2101      	movs	r1, #1
 80131ca:	481b      	ldr	r0, [pc, #108]	; (8013238 <readReg+0x29c>)
 80131cc:	f7fe fb09 	bl	80117e2 <PIN_LOW>
 80131d0:	2101      	movs	r1, #1
 80131d2:	4819      	ldr	r0, [pc, #100]	; (8013238 <readReg+0x29c>)
 80131d4:	f7fe fb15 	bl	8011802 <PIN_HIGH>
 80131d8:	2101      	movs	r1, #1
 80131da:	4817      	ldr	r0, [pc, #92]	; (8013238 <readReg+0x29c>)
 80131dc:	f7fe fb11 	bl	8011802 <PIN_HIGH>
 80131e0:	2120      	movs	r1, #32
 80131e2:	4813      	ldr	r0, [pc, #76]	; (8013230 <readReg+0x294>)
 80131e4:	f7fe fb0d 	bl	8011802 <PIN_HIGH>
    setReadDir();
 80131e8:	f7fe fc38 	bl	8011a5c <setReadDir>
    delay(1);    //1us should be adequate
 80131ec:	2001      	movs	r0, #1
 80131ee:	f7fe fad9 	bl	80117a4 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 80131f2:	f7ff fc7b 	bl	8012aec <read16bits>
 80131f6:	4603      	mov	r3, r0
 80131f8:	81bb      	strh	r3, [r7, #12]
 80131fa:	797b      	ldrb	r3, [r7, #5]
 80131fc:	3b01      	subs	r3, #1
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	717b      	strb	r3, [r7, #5]
 8013202:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8013206:	2b00      	cmp	r3, #0
 8013208:	daf3      	bge.n	80131f2 <readReg+0x256>
    RD_IDLE;
 801320a:	2180      	movs	r1, #128	; 0x80
 801320c:	4808      	ldr	r0, [pc, #32]	; (8013230 <readReg+0x294>)
 801320e:	f7fe faf8 	bl	8011802 <PIN_HIGH>
    CS_IDLE;
 8013212:	2108      	movs	r1, #8
 8013214:	4805      	ldr	r0, [pc, #20]	; (801322c <readReg+0x290>)
 8013216:	f7fe faf4 	bl	8011802 <PIN_HIGH>
    setWriteDir();
 801321a:	f7fe fc51 	bl	8011ac0 <setWriteDir>
    return ret;
 801321e:	89bb      	ldrh	r3, [r7, #12]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	20000217 	.word	0x20000217
 801322c:	40021400 	.word	0x40021400
 8013230:	40020c00 	.word	0x40020c00
 8013234:	40021000 	.word	0x40021000
 8013238:	40020800 	.word	0x40020800

0801323c <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	4603      	mov	r3, r0
 8013244:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8013246:	88fb      	ldrh	r3, [r7, #6]
 8013248:	2100      	movs	r1, #0
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff fea6 	bl	8012f9c <readReg>
 8013250:	4603      	mov	r3, r0
 8013252:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8013254:	88fb      	ldrh	r3, [r7, #6]
 8013256:	2101      	movs	r1, #1
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff fe9f 	bl	8012f9c <readReg>
 801325e:	4603      	mov	r3, r0
 8013260:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8013262:	89fb      	ldrh	r3, [r7, #14]
 8013264:	041a      	lsls	r2, r3, #16
 8013266:	89bb      	ldrh	r3, [r7, #12]
 8013268:	4313      	orrs	r3, r2
}
 801326a:	4618      	mov	r0, r3
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b084      	sub	sp, #16
 8013276:	af00      	add	r7, sp, #0
 8013278:	4603      	mov	r3, r0
 801327a:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 801327c:	88fb      	ldrh	r3, [r7, #6]
 801327e:	2100      	movs	r1, #0
 8013280:	4618      	mov	r0, r3
 8013282:	f7ff fe8b 	bl	8012f9c <readReg>
 8013286:	4603      	mov	r3, r0
 8013288:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 801328a:	88fb      	ldrh	r3, [r7, #6]
 801328c:	2101      	movs	r1, #1
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff fe84 	bl	8012f9c <readReg>
 8013294:	4603      	mov	r3, r0
 8013296:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8013298:	88fb      	ldrh	r3, [r7, #6]
 801329a:	2102      	movs	r1, #2
 801329c:	4618      	mov	r0, r3
 801329e:	f7ff fe7d 	bl	8012f9c <readReg>
 80132a2:	4603      	mov	r3, r0
 80132a4:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80132a6:	89fb      	ldrh	r3, [r7, #14]
 80132a8:	061b      	lsls	r3, r3, #24
 80132aa:	89ba      	ldrh	r2, [r7, #12]
 80132ac:	0212      	lsls	r2, r2, #8
 80132ae:	4313      	orrs	r3, r2
 80132b0:	897a      	ldrh	r2, [r7, #10]
 80132b2:	0a12      	lsrs	r2, r2, #8
 80132b4:	b292      	uxth	r2, r2
 80132b6:	4313      	orrs	r3, r2
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <tft_init>:


void tft_init(uint16_t ID)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b088      	sub	sp, #32
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	4603      	mov	r3, r0
 80132c8:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 80132ca:	2300      	movs	r3, #0
 80132cc:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 80132d2:	4be0      	ldr	r3, [pc, #896]	; (8013654 <tft_init+0x394>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80132d8:	4adf      	ldr	r2, [pc, #892]	; (8013658 <tft_init+0x398>)
 80132da:	88fb      	ldrh	r3, [r7, #6]
 80132dc:	8013      	strh	r3, [r2, #0]
 80132de:	4bde      	ldr	r3, [pc, #888]	; (8013658 <tft_init+0x398>)
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	f24c 5205 	movw	r2, #50437	; 0xc505
 80132e6:	4293      	cmp	r3, r2
 80132e8:	f000 82cc 	beq.w	8013884 <tft_init+0x5c4>
 80132ec:	f24c 5205 	movw	r2, #50437	; 0xc505
 80132f0:	4293      	cmp	r3, r2
 80132f2:	f300 8303 	bgt.w	80138fc <tft_init+0x63c>
 80132f6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80132fa:	4293      	cmp	r3, r2
 80132fc:	f000 82cb 	beq.w	8013896 <tft_init+0x5d6>
 8013300:	f24b 5209 	movw	r2, #46345	; 0xb509
 8013304:	4293      	cmp	r3, r2
 8013306:	f300 82f9 	bgt.w	80138fc <tft_init+0x63c>
 801330a:	f24b 5205 	movw	r2, #46341	; 0xb505
 801330e:	4293      	cmp	r3, r2
 8013310:	f000 82b8 	beq.w	8013884 <tft_init+0x5c4>
 8013314:	f24b 5205 	movw	r2, #46341	; 0xb505
 8013318:	4293      	cmp	r3, r2
 801331a:	f300 82ef 	bgt.w	80138fc <tft_init+0x63c>
 801331e:	f64a 4211 	movw	r2, #44049	; 0xac11
 8013322:	4293      	cmp	r3, r2
 8013324:	f000 8239 	beq.w	801379a <tft_init+0x4da>
 8013328:	f64a 4211 	movw	r2, #44049	; 0xac11
 801332c:	4293      	cmp	r3, r2
 801332e:	f300 82e5 	bgt.w	80138fc <tft_init+0x63c>
 8013332:	f249 4288 	movw	r2, #38024	; 0x9488
 8013336:	4293      	cmp	r3, r2
 8013338:	f300 82e0 	bgt.w	80138fc <tft_init+0x63c>
 801333c:	f249 4287 	movw	r2, #38023	; 0x9487
 8013340:	4293      	cmp	r3, r2
 8013342:	f280 8288 	bge.w	8013856 <tft_init+0x596>
 8013346:	f249 4286 	movw	r2, #38022	; 0x9486
 801334a:	4293      	cmp	r3, r2
 801334c:	f000 8269 	beq.w	8013822 <tft_init+0x562>
 8013350:	f249 4286 	movw	r2, #38022	; 0x9486
 8013354:	4293      	cmp	r3, r2
 8013356:	f300 82d1 	bgt.w	80138fc <tft_init+0x63c>
 801335a:	f249 4281 	movw	r2, #38017	; 0x9481
 801335e:	4293      	cmp	r3, r2
 8013360:	f000 8248 	beq.w	80137f4 <tft_init+0x534>
 8013364:	f249 4281 	movw	r2, #38017	; 0x9481
 8013368:	4293      	cmp	r3, r2
 801336a:	f300 82c7 	bgt.w	80138fc <tft_init+0x63c>
 801336e:	f249 3241 	movw	r2, #37697	; 0x9341
 8013372:	4293      	cmp	r3, r2
 8013374:	f300 82c2 	bgt.w	80138fc <tft_init+0x63c>
 8013378:	f249 3202 	movw	r2, #37634	; 0x9302
 801337c:	4293      	cmp	r3, r2
 801337e:	f280 80a5 	bge.w	80134cc <tft_init+0x20c>
 8013382:	f249 0290 	movw	r2, #37008	; 0x9090
 8013386:	4293      	cmp	r3, r2
 8013388:	f000 818f 	beq.w	80136aa <tft_init+0x3ea>
 801338c:	f249 0290 	movw	r2, #37008	; 0x9090
 8013390:	4293      	cmp	r3, r2
 8013392:	f300 82b3 	bgt.w	80138fc <tft_init+0x63c>
 8013396:	f248 3257 	movw	r2, #33623	; 0x8357
 801339a:	4293      	cmp	r3, r2
 801339c:	f000 8180 	beq.w	80136a0 <tft_init+0x3e0>
 80133a0:	f248 3257 	movw	r2, #33623	; 0x8357
 80133a4:	4293      	cmp	r3, r2
 80133a6:	f300 82a9 	bgt.w	80138fc <tft_init+0x63c>
 80133aa:	f248 0231 	movw	r2, #32817	; 0x8031
 80133ae:	4293      	cmp	r3, r2
 80133b0:	f000 816d 	beq.w	801368e <tft_init+0x3ce>
 80133b4:	f248 0231 	movw	r2, #32817	; 0x8031
 80133b8:	4293      	cmp	r3, r2
 80133ba:	f300 829f 	bgt.w	80138fc <tft_init+0x63c>
 80133be:	f247 7296 	movw	r2, #30614	; 0x7796
 80133c2:	4293      	cmp	r3, r2
 80133c4:	f000 8242 	beq.w	801384c <tft_init+0x58c>
 80133c8:	f247 7296 	movw	r2, #30614	; 0x7796
 80133cc:	4293      	cmp	r3, r2
 80133ce:	f300 8295 	bgt.w	80138fc <tft_init+0x63c>
 80133d2:	f247 7293 	movw	r2, #30611	; 0x7793
 80133d6:	4293      	cmp	r3, r2
 80133d8:	f000 825d 	beq.w	8013896 <tft_init+0x5d6>
 80133dc:	f247 7293 	movw	r2, #30611	; 0x7793
 80133e0:	4293      	cmp	r3, r2
 80133e2:	f300 828b 	bgt.w	80138fc <tft_init+0x63c>
 80133e6:	f247 7289 	movw	r2, #30601	; 0x7789
 80133ea:	4293      	cmp	r3, r2
 80133ec:	f000 8146 	beq.w	801367c <tft_init+0x3bc>
 80133f0:	f247 7289 	movw	r2, #30601	; 0x7789
 80133f4:	4293      	cmp	r3, r2
 80133f6:	f300 8281 	bgt.w	80138fc <tft_init+0x63c>
 80133fa:	f646 0209 	movw	r2, #26633	; 0x6809
 80133fe:	4293      	cmp	r3, r2
 8013400:	f000 8194 	beq.w	801372c <tft_init+0x46c>
 8013404:	f646 0209 	movw	r2, #26633	; 0x6809
 8013408:	4293      	cmp	r3, r2
 801340a:	f300 8277 	bgt.w	80138fc <tft_init+0x63c>
 801340e:	f245 4208 	movw	r2, #21512	; 0x5408
 8013412:	4293      	cmp	r3, r2
 8013414:	f000 817a 	beq.w	801370c <tft_init+0x44c>
 8013418:	f245 4208 	movw	r2, #21512	; 0x5408
 801341c:	4293      	cmp	r3, r2
 801341e:	f300 826d 	bgt.w	80138fc <tft_init+0x63c>
 8013422:	f245 3210 	movw	r2, #21264	; 0x5310
 8013426:	4293      	cmp	r3, r2
 8013428:	f000 80fe 	beq.w	8013628 <tft_init+0x368>
 801342c:	f245 3210 	movw	r2, #21264	; 0x5310
 8013430:	4293      	cmp	r3, r2
 8013432:	f300 8263 	bgt.w	80138fc <tft_init+0x63c>
 8013436:	f242 0253 	movw	r2, #8275	; 0x2053
 801343a:	4293      	cmp	r3, r2
 801343c:	f000 81a8 	beq.w	8013790 <tft_init+0x4d0>
 8013440:	f242 0253 	movw	r2, #8275	; 0x2053
 8013444:	4293      	cmp	r3, r2
 8013446:	f300 8259 	bgt.w	80138fc <tft_init+0x63c>
 801344a:	f241 6202 	movw	r2, #5634	; 0x1602
 801344e:	4293      	cmp	r3, r2
 8013450:	f000 8195 	beq.w	801377e <tft_init+0x4be>
 8013454:	f241 6202 	movw	r2, #5634	; 0x1602
 8013458:	4293      	cmp	r3, r2
 801345a:	f300 824f 	bgt.w	80138fc <tft_init+0x63c>
 801345e:	f241 5281 	movw	r2, #5505	; 0x1581
 8013462:	4293      	cmp	r3, r2
 8013464:	f000 81c1 	beq.w	80137ea <tft_init+0x52a>
 8013468:	f241 5281 	movw	r2, #5505	; 0x1581
 801346c:	4293      	cmp	r3, r2
 801346e:	f300 8245 	bgt.w	80138fc <tft_init+0x63c>
 8013472:	f241 5226 	movw	r2, #5414	; 0x1526
 8013476:	4293      	cmp	r3, r2
 8013478:	f000 80cd 	beq.w	8013616 <tft_init+0x356>
 801347c:	f241 5226 	movw	r2, #5414	; 0x1526
 8013480:	4293      	cmp	r3, r2
 8013482:	f300 823b 	bgt.w	80138fc <tft_init+0x63c>
 8013486:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 801348a:	f000 80bb 	beq.w	8013604 <tft_init+0x344>
 801348e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8013492:	f300 8233 	bgt.w	80138fc <tft_init+0x63c>
 8013496:	f241 5211 	movw	r2, #5393	; 0x1511
 801349a:	4293      	cmp	r3, r2
 801349c:	f000 809e 	beq.w	80135dc <tft_init+0x31c>
 80134a0:	f241 5211 	movw	r2, #5393	; 0x1511
 80134a4:	4293      	cmp	r3, r2
 80134a6:	f300 8229 	bgt.w	80138fc <tft_init+0x63c>
 80134aa:	f241 5205 	movw	r2, #5381	; 0x1505
 80134ae:	4293      	cmp	r3, r2
 80134b0:	f000 8131 	beq.w	8013716 <tft_init+0x456>
 80134b4:	f241 5205 	movw	r2, #5381	; 0x1505
 80134b8:	4293      	cmp	r3, r2
 80134ba:	f300 821f 	bgt.w	80138fc <tft_init+0x63c>
 80134be:	2b01      	cmp	r3, #1
 80134c0:	f000 811f 	beq.w	8013702 <tft_init+0x442>
 80134c4:	2b99      	cmp	r3, #153	; 0x99
 80134c6:	f000 8107 	beq.w	80136d8 <tft_init+0x418>
 80134ca:	e217      	b.n	80138fc <tft_init+0x63c>
 80134cc:	4a63      	ldr	r2, [pc, #396]	; (801365c <tft_init+0x39c>)
 80134ce:	441a      	add	r2, r3
 80134d0:	2a3f      	cmp	r2, #63	; 0x3f
 80134d2:	f200 8213 	bhi.w	80138fc <tft_init+0x63c>
 80134d6:	a301      	add	r3, pc, #4	; (adr r3, 80134dc <tft_init+0x21c>)
 80134d8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80134dc:	080137a5 	.word	0x080137a5
 80134e0:	080138fd 	.word	0x080138fd
 80134e4:	080138fd 	.word	0x080138fd
 80134e8:	080138fd 	.word	0x080138fd
 80134ec:	080138fd 	.word	0x080138fd
 80134f0:	080138fd 	.word	0x080138fd
 80134f4:	080138fd 	.word	0x080138fd
 80134f8:	080138fd 	.word	0x080138fd
 80134fc:	080138fd 	.word	0x080138fd
 8013500:	080138fd 	.word	0x080138fd
 8013504:	080138fd 	.word	0x080138fd
 8013508:	080138fd 	.word	0x080138fd
 801350c:	080138fd 	.word	0x080138fd
 8013510:	080138fd 	.word	0x080138fd
 8013514:	080138fd 	.word	0x080138fd
 8013518:	080138fd 	.word	0x080138fd
 801351c:	080138fd 	.word	0x080138fd
 8013520:	080138fd 	.word	0x080138fd
 8013524:	080138fd 	.word	0x080138fd
 8013528:	080138fd 	.word	0x080138fd
 801352c:	080138fd 	.word	0x080138fd
 8013530:	080138fd 	.word	0x080138fd
 8013534:	080138fd 	.word	0x080138fd
 8013538:	080138fd 	.word	0x080138fd
 801353c:	080138fd 	.word	0x080138fd
 8013540:	080138fd 	.word	0x080138fd
 8013544:	080138fd 	.word	0x080138fd
 8013548:	080138fd 	.word	0x080138fd
 801354c:	080138fd 	.word	0x080138fd
 8013550:	080138fd 	.word	0x080138fd
 8013554:	08013717 	.word	0x08013717
 8013558:	080138fd 	.word	0x080138fd
 801355c:	080138fd 	.word	0x080138fd
 8013560:	080138fd 	.word	0x080138fd
 8013564:	080138fd 	.word	0x080138fd
 8013568:	08013737 	.word	0x08013737
 801356c:	080138fd 	.word	0x080138fd
 8013570:	08013757 	.word	0x08013757
 8013574:	08013737 	.word	0x08013737
 8013578:	080137b9 	.word	0x080137b9
 801357c:	080138fd 	.word	0x080138fd
 8013580:	080138fd 	.word	0x080138fd
 8013584:	080138fd 	.word	0x080138fd
 8013588:	080138fd 	.word	0x080138fd
 801358c:	080138fd 	.word	0x080138fd
 8013590:	080138fd 	.word	0x080138fd
 8013594:	080138fd 	.word	0x080138fd
 8013598:	08013741 	.word	0x08013741
 801359c:	080138fd 	.word	0x080138fd
 80135a0:	080138fd 	.word	0x080138fd
 80135a4:	080138fd 	.word	0x080138fd
 80135a8:	08013741 	.word	0x08013741
 80135ac:	080138fd 	.word	0x080138fd
 80135b0:	080138fd 	.word	0x080138fd
 80135b4:	080137af 	.word	0x080137af
 80135b8:	080138fd 	.word	0x080138fd
 80135bc:	080138fd 	.word	0x080138fd
 80135c0:	080138fd 	.word	0x080138fd
 80135c4:	080138fd 	.word	0x080138fd
 80135c8:	080138fd 	.word	0x080138fd
 80135cc:	080138fd 	.word	0x080138fd
 80135d0:	080138fd 	.word	0x080138fd
 80135d4:	080137cf 	.word	0x080137cf
 80135d8:	080137d9 	.word	0x080137d9
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 80135dc:	4b20      	ldr	r3, [pc, #128]	; (8013660 <tft_init+0x3a0>)
 80135de:	2203      	movs	r2, #3
 80135e0:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 80135e2:	4b20      	ldr	r3, [pc, #128]	; (8013664 <tft_init+0x3a4>)
 80135e4:	61fb      	str	r3, [r7, #28]
 80135e6:	2303      	movs	r3, #3
 80135e8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80135ea:	4b1f      	ldr	r3, [pc, #124]	; (8013668 <tft_init+0x3a8>)
 80135ec:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80135f4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80135f6:	4b1d      	ldr	r3, [pc, #116]	; (801366c <tft_init+0x3ac>)
 80135f8:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013600:	801a      	strh	r2, [r3, #0]
        break;
 8013602:	e181      	b.n	8013908 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013604:	4b16      	ldr	r3, [pc, #88]	; (8013660 <tft_init+0x3a0>)
 8013606:	f240 4213 	movw	r2, #1043	; 0x413
 801360a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 801360c:	4b18      	ldr	r3, [pc, #96]	; (8013670 <tft_init+0x3b0>)
 801360e:	61fb      	str	r3, [r7, #28]
 8013610:	2306      	movs	r3, #6
 8013612:	837b      	strh	r3, [r7, #26]
        break;
 8013614:	e178      	b.n	8013908 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013616:	4b12      	ldr	r3, [pc, #72]	; (8013660 <tft_init+0x3a0>)
 8013618:	f240 4213 	movw	r2, #1043	; 0x413
 801361c:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 801361e:	4b15      	ldr	r3, [pc, #84]	; (8013674 <tft_init+0x3b4>)
 8013620:	61fb      	str	r3, [r7, #28]
 8013622:	230c      	movs	r3, #12
 8013624:	837b      	strh	r3, [r7, #26]
        break;
 8013626:	e16f      	b.n	8013908 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8013628:	4b0d      	ldr	r3, [pc, #52]	; (8013660 <tft_init+0x3a0>)
 801362a:	f640 6213 	movw	r2, #3603	; 0xe13
 801362e:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8013630:	4b11      	ldr	r3, [pc, #68]	; (8013678 <tft_init+0x3b8>)
 8013632:	61fb      	str	r3, [r7, #28]
 8013634:	2302      	movs	r3, #2
 8013636:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8013638:	4b0b      	ldr	r3, [pc, #44]	; (8013668 <tft_init+0x3a8>)
 801363a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013642:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013644:	4b09      	ldr	r3, [pc, #36]	; (801366c <tft_init+0x3ac>)
 8013646:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801364e:	801a      	strh	r2, [r3, #0]
        break;
 8013650:	e15a      	b.n	8013908 <tft_init+0x648>
 8013652:	bf00      	nop
 8013654:	2000699e 	.word	0x2000699e
 8013658:	2000699c 	.word	0x2000699c
 801365c:	ffff6cfe 	.word	0xffff6cfe
 8013660:	2000698e 	.word	0x2000698e
 8013664:	0801aa24 	.word	0x0801aa24
 8013668:	08011899 	.word	0x08011899
 801366c:	08011881 	.word	0x08011881
 8013670:	0801aa28 	.word	0x0801aa28
 8013674:	0801aa30 	.word	0x0801aa30
 8013678:	0801aa3c 	.word	0x0801aa3c
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 801367c:	4b8d      	ldr	r3, [pc, #564]	; (80138b4 <tft_init+0x5f4>)
 801367e:	f240 4213 	movw	r2, #1043	; 0x413
 8013682:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8013684:	4b8c      	ldr	r3, [pc, #560]	; (80138b8 <tft_init+0x5f8>)
 8013686:	61fb      	str	r3, [r7, #28]
 8013688:	2341      	movs	r3, #65	; 0x41
 801368a:	837b      	strh	r3, [r7, #26]
        break;
 801368c:	e13c      	b.n	8013908 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 801368e:	4b89      	ldr	r3, [pc, #548]	; (80138b4 <tft_init+0x5f4>)
 8013690:	f241 4213 	movw	r2, #5139	; 0x1413
 8013694:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8013696:	4b89      	ldr	r3, [pc, #548]	; (80138bc <tft_init+0x5fc>)
 8013698:	61fb      	str	r3, [r7, #28]
 801369a:	2312      	movs	r3, #18
 801369c:	837b      	strh	r3, [r7, #26]
        break;
 801369e:	e133      	b.n	8013908 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80136a0:	4b84      	ldr	r3, [pc, #528]	; (80138b4 <tft_init+0x5f4>)
 80136a2:	f241 4203 	movw	r2, #5123	; 0x1403
 80136a6:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80136a8:	e003      	b.n	80136b2 <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80136aa:	4b82      	ldr	r3, [pc, #520]	; (80138b4 <tft_init+0x5f4>)
 80136ac:	f241 4213 	movw	r2, #5139	; 0x1413
 80136b0:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80136b2:	2301      	movs	r3, #1
 80136b4:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80136b6:	4b82      	ldr	r3, [pc, #520]	; (80138c0 <tft_init+0x600>)
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	2302      	movs	r3, #2
 80136bc:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80136be:	4b81      	ldr	r3, [pc, #516]	; (80138c4 <tft_init+0x604>)
 80136c0:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80136c8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80136ca:	4b7f      	ldr	r3, [pc, #508]	; (80138c8 <tft_init+0x608>)
 80136cc:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80136d4:	801a      	strh	r2, [r3, #0]
        break;
 80136d6:	e117      	b.n	8013908 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80136d8:	4b76      	ldr	r3, [pc, #472]	; (80138b4 <tft_init+0x5f4>)
 80136da:	f241 4213 	movw	r2, #5139	; 0x1413
 80136de:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80136e0:	4b7a      	ldr	r3, [pc, #488]	; (80138cc <tft_init+0x60c>)
 80136e2:	61fb      	str	r3, [r7, #28]
 80136e4:	231d      	movs	r3, #29
 80136e6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80136e8:	4b76      	ldr	r3, [pc, #472]	; (80138c4 <tft_init+0x604>)
 80136ea:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80136f2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80136f4:	4b74      	ldr	r3, [pc, #464]	; (80138c8 <tft_init+0x608>)
 80136f6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80136fe:	801a      	strh	r2, [r3, #0]
        break;
 8013700:	e102      	b.n	8013908 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8013702:	4b6c      	ldr	r3, [pc, #432]	; (80138b4 <tft_init+0x5f4>)
 8013704:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8013708:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 801370a:	e008      	b.n	801371e <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 801370c:	4b69      	ldr	r3, [pc, #420]	; (80138b4 <tft_init+0x5f4>)
 801370e:	f241 0204 	movw	r2, #4100	; 0x1004
 8013712:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8013714:	e003      	b.n	801371e <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8013716:	4b67      	ldr	r3, [pc, #412]	; (80138b4 <tft_init+0x5f4>)
 8013718:	f241 0204 	movw	r2, #4100	; 0x1004
 801371c:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 801371e:	2301      	movs	r3, #1
 8013720:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8013722:	21d8      	movs	r1, #216	; 0xd8
 8013724:	486a      	ldr	r0, [pc, #424]	; (80138d0 <tft_init+0x610>)
 8013726:	f7ff f966 	bl	80129f6 <init_table16>
        break;
 801372a:	e0ed      	b.n	8013908 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 801372c:	4b61      	ldr	r3, [pc, #388]	; (80138b4 <tft_init+0x5f4>)
 801372e:	f241 1202 	movw	r2, #4354	; 0x1102
 8013732:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8013734:	e008      	b.n	8013748 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8013736:	4b5f      	ldr	r3, [pc, #380]	; (80138b4 <tft_init+0x5f4>)
 8013738:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801373c:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 801373e:	e003      	b.n	8013748 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8013740:	4b5c      	ldr	r3, [pc, #368]	; (80138b4 <tft_init+0x5f4>)
 8013742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013746:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8013748:	2301      	movs	r3, #1
 801374a:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 801374c:	21cc      	movs	r1, #204	; 0xcc
 801374e:	4861      	ldr	r0, [pc, #388]	; (80138d4 <tft_init+0x614>)
 8013750:	f7ff f951 	bl	80129f6 <init_table16>
        break;
 8013754:	e0d8      	b.n	8013908 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8013756:	4b57      	ldr	r3, [pc, #348]	; (80138b4 <tft_init+0x5f4>)
 8013758:	f240 4203 	movw	r2, #1027	; 0x403
 801375c:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 801375e:	4b5e      	ldr	r3, [pc, #376]	; (80138d8 <tft_init+0x618>)
 8013760:	61fb      	str	r3, [r7, #28]
 8013762:	231e      	movs	r3, #30
 8013764:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8013766:	4b57      	ldr	r3, [pc, #348]	; (80138c4 <tft_init+0x604>)
 8013768:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013770:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013772:	4b55      	ldr	r3, [pc, #340]	; (80138c8 <tft_init+0x608>)
 8013774:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	22f0      	movs	r2, #240	; 0xf0
 801377a:	801a      	strh	r2, [r3, #0]
        break;
 801377c:	e0c4      	b.n	8013908 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 801377e:	4b4d      	ldr	r3, [pc, #308]	; (80138b4 <tft_init+0x5f4>)
 8013780:	f240 4203 	movw	r2, #1027	; 0x403
 8013784:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8013786:	4b55      	ldr	r3, [pc, #340]	; (80138dc <tft_init+0x61c>)
 8013788:	61fb      	str	r3, [r7, #28]
 801378a:	2306      	movs	r3, #6
 801378c:	837b      	strh	r3, [r7, #26]
        break;
 801378e:	e0bb      	b.n	8013908 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8013790:	4b48      	ldr	r3, [pc, #288]	; (80138b4 <tft_init+0x5f4>)
 8013792:	f241 4217 	movw	r2, #5143	; 0x1417
 8013796:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8013798:	e012      	b.n	80137c0 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 801379a:	4b46      	ldr	r3, [pc, #280]	; (80138b4 <tft_init+0x5f4>)
 801379c:	f241 4213 	movw	r2, #5139	; 0x1413
 80137a0:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80137a2:	e00d      	b.n	80137c0 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80137a4:	4b43      	ldr	r3, [pc, #268]	; (80138b4 <tft_init+0x5f4>)
 80137a6:	f240 4203 	movw	r2, #1027	; 0x403
 80137aa:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80137ac:	e008      	b.n	80137c0 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80137ae:	4b41      	ldr	r3, [pc, #260]	; (80138b4 <tft_init+0x5f4>)
 80137b0:	f240 4213 	movw	r2, #1043	; 0x413
 80137b4:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80137b6:	e003      	b.n	80137c0 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 80137b8:	4b3e      	ldr	r3, [pc, #248]	; (80138b4 <tft_init+0x5f4>)
 80137ba:	f241 6203 	movw	r2, #5635	; 0x1603
 80137be:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 80137c0:	2301      	movs	r3, #1
 80137c2:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80137c4:	4b46      	ldr	r3, [pc, #280]	; (80138e0 <tft_init+0x620>)
 80137c6:	61fb      	str	r3, [r7, #28]
 80137c8:	2303      	movs	r3, #3
 80137ca:	837b      	strh	r3, [r7, #26]
        break;
 80137cc:	e09c      	b.n	8013908 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80137ce:	4b39      	ldr	r3, [pc, #228]	; (80138b4 <tft_init+0x5f4>)
 80137d0:	f241 4213 	movw	r2, #5139	; 0x1413
 80137d4:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80137d6:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80137d8:	4b36      	ldr	r3, [pc, #216]	; (80138b4 <tft_init+0x5f4>)
 80137da:	f240 4213 	movw	r2, #1043	; 0x413
 80137de:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80137e0:	4b40      	ldr	r3, [pc, #256]	; (80138e4 <tft_init+0x624>)
 80137e2:	61fb      	str	r3, [r7, #28]
 80137e4:	2365      	movs	r3, #101	; 0x65
 80137e6:	837b      	strh	r3, [r7, #26]
        break;
 80137e8:	e08e      	b.n	8013908 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80137ea:	4b32      	ldr	r3, [pc, #200]	; (80138b4 <tft_init+0x5f4>)
 80137ec:	f240 4213 	movw	r2, #1043	; 0x413
 80137f0:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80137f2:	e003      	b.n	80137fc <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80137f4:	4b2f      	ldr	r3, [pc, #188]	; (80138b4 <tft_init+0x5f4>)
 80137f6:	f240 4207 	movw	r2, #1031	; 0x407
 80137fa:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80137fc:	2301      	movs	r3, #1
 80137fe:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8013800:	4b39      	ldr	r3, [pc, #228]	; (80138e8 <tft_init+0x628>)
 8013802:	61fb      	str	r3, [r7, #28]
 8013804:	2345      	movs	r3, #69	; 0x45
 8013806:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8013808:	4b2e      	ldr	r3, [pc, #184]	; (80138c4 <tft_init+0x604>)
 801380a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013812:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013814:	4b2c      	ldr	r3, [pc, #176]	; (80138c8 <tft_init+0x608>)
 8013816:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801381e:	801a      	strh	r2, [r3, #0]
        break;
 8013820:	e072      	b.n	8013908 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8013822:	4b24      	ldr	r3, [pc, #144]	; (80138b4 <tft_init+0x5f4>)
 8013824:	f240 4203 	movw	r2, #1027	; 0x403
 8013828:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 801382a:	4b30      	ldr	r3, [pc, #192]	; (80138ec <tft_init+0x62c>)
 801382c:	61fb      	str	r3, [r7, #28]
 801382e:	233b      	movs	r3, #59	; 0x3b
 8013830:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8013832:	4b24      	ldr	r3, [pc, #144]	; (80138c4 <tft_init+0x604>)
 8013834:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801383c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 801383e:	4b22      	ldr	r3, [pc, #136]	; (80138c8 <tft_init+0x608>)
 8013840:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013848:	801a      	strh	r2, [r3, #0]
        break;
 801384a:	e05d      	b.n	8013908 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 801384c:	4b19      	ldr	r3, [pc, #100]	; (80138b4 <tft_init+0x5f4>)
 801384e:	f240 4203 	movw	r2, #1027	; 0x403
 8013852:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8013854:	e003      	b.n	801385e <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013856:	4b17      	ldr	r3, [pc, #92]	; (80138b4 <tft_init+0x5f4>)
 8013858:	f240 4213 	movw	r2, #1043	; 0x413
 801385c:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 801385e:	2301      	movs	r3, #1
 8013860:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8013862:	4b23      	ldr	r3, [pc, #140]	; (80138f0 <tft_init+0x630>)
 8013864:	61fb      	str	r3, [r7, #28]
 8013866:	232b      	movs	r3, #43	; 0x2b
 8013868:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 801386a:	4b16      	ldr	r3, [pc, #88]	; (80138c4 <tft_init+0x604>)
 801386c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013874:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013876:	4b14      	ldr	r3, [pc, #80]	; (80138c8 <tft_init+0x608>)
 8013878:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013880:	801a      	strh	r2, [r3, #0]
        break;
 8013882:	e041      	b.n	8013908 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8013884:	4b0b      	ldr	r3, [pc, #44]	; (80138b4 <tft_init+0x5f4>)
 8013886:	f241 0208 	movw	r2, #4104	; 0x1008
 801388a:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 801388c:	21b0      	movs	r1, #176	; 0xb0
 801388e:	4819      	ldr	r0, [pc, #100]	; (80138f4 <tft_init+0x634>)
 8013890:	f7ff f8b1 	bl	80129f6 <init_table16>
        break;
 8013894:	e038      	b.n	8013908 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8013896:	4b07      	ldr	r3, [pc, #28]	; (80138b4 <tft_init+0x5f4>)
 8013898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801389c:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 801389e:	21c0      	movs	r1, #192	; 0xc0
 80138a0:	4815      	ldr	r0, [pc, #84]	; (80138f8 <tft_init+0x638>)
 80138a2:	f7ff f8a8 	bl	80129f6 <init_table16>
        p16 = (int16_t *) & height;
 80138a6:	4b07      	ldr	r3, [pc, #28]	; (80138c4 <tft_init+0x604>)
 80138a8:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80138b0:	801a      	strh	r2, [r3, #0]
        break;
 80138b2:	e029      	b.n	8013908 <tft_init+0x648>
 80138b4:	2000698e 	.word	0x2000698e
 80138b8:	0801aa40 	.word	0x0801aa40
 80138bc:	0801aa84 	.word	0x0801aa84
 80138c0:	0801aa98 	.word	0x0801aa98
 80138c4:	08011899 	.word	0x08011899
 80138c8:	08011881 	.word	0x08011881
 80138cc:	0801aa9c 	.word	0x0801aa9c
 80138d0:	0801aabc 	.word	0x0801aabc
 80138d4:	0801ab94 	.word	0x0801ab94
 80138d8:	0801ac60 	.word	0x0801ac60
 80138dc:	0801ac80 	.word	0x0801ac80
 80138e0:	0801ac88 	.word	0x0801ac88
 80138e4:	0801ac8c 	.word	0x0801ac8c
 80138e8:	0801acf4 	.word	0x0801acf4
 80138ec:	0801ad3c 	.word	0x0801ad3c
 80138f0:	0801ad78 	.word	0x0801ad78
 80138f4:	0801ada4 	.word	0x0801ada4
 80138f8:	0801ae54 	.word	0x0801ae54
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80138fc:	4b2c      	ldr	r3, [pc, #176]	; (80139b0 <tft_init+0x6f0>)
 80138fe:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	2200      	movs	r2, #0
 8013904:	801a      	strh	r2, [r3, #0]
        break;
 8013906:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8013908:	4b2a      	ldr	r3, [pc, #168]	; (80139b4 <tft_init+0x6f4>)
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013910:	2b00      	cmp	r3, #0
 8013912:	bf14      	ite	ne
 8013914:	2301      	movne	r3, #1
 8013916:	2300      	moveq	r3, #0
 8013918:	b2db      	uxtb	r3, r3
 801391a:	b29a      	uxth	r2, r3
 801391c:	4b26      	ldr	r3, [pc, #152]	; (80139b8 <tft_init+0x6f8>)
 801391e:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00d      	beq.n	8013942 <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8013926:	2109      	movs	r1, #9
 8013928:	4824      	ldr	r0, [pc, #144]	; (80139bc <tft_init+0x6fc>)
 801392a:	f7ff f80b 	bl	8012944 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 801392e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013932:	4619      	mov	r1, r3
 8013934:	69f8      	ldr	r0, [r7, #28]
 8013936:	f7ff f805 	bl	8012944 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 801393a:	2106      	movs	r1, #6
 801393c:	4820      	ldr	r0, [pc, #128]	; (80139c0 <tft_init+0x700>)
 801393e:	f7ff f801 	bl	8012944 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8013942:	2000      	movs	r0, #0
 8013944:	f001 fe42 	bl	80155cc <setRotation>
    invertDisplay(false);
 8013948:	2000      	movs	r0, #0
 801394a:	f002 fca5 	bl	8016298 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 801394e:	4b1d      	ldr	r3, [pc, #116]	; (80139c4 <tft_init+0x704>)
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	f249 4288 	movw	r2, #38024	; 0x9488
 8013956:	4293      	cmp	r3, r2
 8013958:	d125      	bne.n	80139a6 <tft_init+0x6e6>
		is555 = 0;
 801395a:	4b1b      	ldr	r3, [pc, #108]	; (80139c8 <tft_init+0x708>)
 801395c:	2200      	movs	r2, #0
 801395e:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8013960:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8013964:	2100      	movs	r1, #0
 8013966:	2000      	movs	r0, #0
 8013968:	f002 f8b8 	bl	8015adc <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 801396c:	2100      	movs	r1, #0
 801396e:	2000      	movs	r0, #0
 8013970:	f7fe f836 	bl	80119e0 <readPixel>
 8013974:	4603      	mov	r3, r0
 8013976:	461a      	mov	r2, r3
 8013978:	f64f 731f 	movw	r3, #65311	; 0xff1f
 801397c:	429a      	cmp	r2, r3
 801397e:	d112      	bne.n	80139a6 <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8013980:	2306      	movs	r3, #6
 8013982:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8013984:	f107 030f 	add.w	r3, r7, #15
 8013988:	2201      	movs	r2, #1
 801398a:	4619      	mov	r1, r3
 801398c:	203a      	movs	r0, #58	; 0x3a
 801398e:	f7fe f851 	bl	8011a34 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8013992:	4b08      	ldr	r3, [pc, #32]	; (80139b4 <tft_init+0x6f4>)
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	f023 0310 	bic.w	r3, r3, #16
 801399a:	b29a      	uxth	r2, r3
 801399c:	4b05      	ldr	r3, [pc, #20]	; (80139b4 <tft_init+0x6f4>)
 801399e:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80139a0:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <tft_init+0x708>)
 80139a2:	2201      	movs	r2, #1
 80139a4:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80139a6:	bf00      	nop
 80139a8:	3720      	adds	r7, #32
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	08011881 	.word	0x08011881
 80139b4:	2000698e 	.word	0x2000698e
 80139b8:	20006992 	.word	0x20006992
 80139bc:	0801af14 	.word	0x0801af14
 80139c0:	0801af20 	.word	0x0801af20
 80139c4:	2000699c 	.word	0x2000699c
 80139c8:	20000219 	.word	0x20000219

080139cc <readID>:




uint16_t readID(void)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 80139d2:	2100      	movs	r1, #0
 80139d4:	2000      	movs	r0, #0
 80139d6:	f7ff fae1 	bl	8012f9c <readReg>
 80139da:	4603      	mov	r3, r0
 80139dc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80139de:	89fb      	ldrh	r3, [r7, #14]
 80139e0:	f245 4208 	movw	r2, #21512	; 0x5408
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d102      	bne.n	80139ee <readID+0x22>
        return 0x5408;
 80139e8:	f245 4308 	movw	r3, #21512	; 0x5408
 80139ec:	e128      	b.n	8013c40 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80139ee:	89fb      	ldrh	r3, [r7, #14]
 80139f0:	f245 4220 	movw	r2, #21536	; 0x5420
 80139f4:	4293      	cmp	r3, r2
 80139f6:	d102      	bne.n	80139fe <readID+0x32>
        return 0x5420;
 80139f8:	f245 4320 	movw	r3, #21536	; 0x5420
 80139fc:	e120      	b.n	8013c40 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80139fe:	89fb      	ldrh	r3, [r7, #14]
 8013a00:	f648 1289 	movw	r2, #35209	; 0x8989
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d102      	bne.n	8013a0e <readID+0x42>
        return 0x1289;
 8013a08:	f241 2389 	movw	r3, #4745	; 0x1289
 8013a0c:	e118      	b.n	8013c40 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8013a0e:	2100      	movs	r1, #0
 8013a10:	2067      	movs	r0, #103	; 0x67
 8013a12:	f7ff fac3 	bl	8012f9c <readReg>
 8013a16:	4603      	mov	r3, r0
 8013a18:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8013a1a:	89fb      	ldrh	r3, [r7, #14]
 8013a1c:	f244 7247 	movw	r2, #18247	; 0x4747
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d102      	bne.n	8013a2a <readID+0x5e>
        return 0x8347;
 8013a24:	f248 3347 	movw	r3, #33607	; 0x8347
 8013a28:	e10a      	b.n	8013c40 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8013a2a:	20a1      	movs	r0, #161	; 0xa1
 8013a2c:	f7ff fc06 	bl	801323c <readReg32>
 8013a30:	4603      	mov	r3, r0
 8013a32:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8013a34:	89fb      	ldrh	r3, [r7, #14]
 8013a36:	f246 1201 	movw	r2, #24833	; 0x6101
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d102      	bne.n	8013a44 <readID+0x78>
        return 0x1963;
 8013a3e:	f641 1363 	movw	r3, #6499	; 0x1963
 8013a42:	e0fd      	b.n	8013c40 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8013a44:	89fb      	ldrh	r3, [r7, #14]
 8013a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d102      	bne.n	8013a54 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8013a4e:	f241 5326 	movw	r3, #5414	; 0x1526
 8013a52:	e0f5      	b.n	8013c40 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8013a54:	20bf      	movs	r0, #191	; 0xbf
 8013a56:	f7ff fc0c 	bl	8013272 <readReg40>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8013a5e:	89fb      	ldrh	r3, [r7, #14]
 8013a60:	f248 3257 	movw	r2, #33623	; 0x8357
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d102      	bne.n	8013a6e <readID+0xa2>
        return 0x8357;
 8013a68:	f248 3357 	movw	r3, #33623	; 0x8357
 8013a6c:	e0e8      	b.n	8013c40 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8013a6e:	89fb      	ldrh	r3, [r7, #14]
 8013a70:	f249 4281 	movw	r2, #38017	; 0x9481
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d102      	bne.n	8013a7e <readID+0xb2>
        return 0x9481;
 8013a78:	f249 4381 	movw	r3, #38017	; 0x9481
 8013a7c:	e0e0      	b.n	8013c40 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8013a7e:	89fb      	ldrh	r3, [r7, #14]
 8013a80:	f241 5211 	movw	r2, #5393	; 0x1511
 8013a84:	4293      	cmp	r3, r2
 8013a86:	d102      	bne.n	8013a8e <readID+0xc2>
        return 0x1511;
 8013a88:	f241 5311 	movw	r3, #5393	; 0x1511
 8013a8c:	e0d8      	b.n	8013c40 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8013a8e:	89fb      	ldrh	r3, [r7, #14]
 8013a90:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8013a94:	d102      	bne.n	8013a9c <readID+0xd0>
        return 0x1520;
 8013a96:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8013a9a:	e0d1      	b.n	8013c40 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	f241 5226 	movw	r2, #5414	; 0x1526
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d102      	bne.n	8013aac <readID+0xe0>
        return 0x1526;
 8013aa6:	f241 5326 	movw	r3, #5414	; 0x1526
 8013aaa:	e0c9      	b.n	8013c40 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8013aac:	89fb      	ldrh	r3, [r7, #14]
 8013aae:	f241 5281 	movw	r2, #5505	; 0x1581
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d102      	bne.n	8013abc <readID+0xf0>
        return 0x1581;
 8013ab6:	f241 5381 	movw	r3, #5505	; 0x1581
 8013aba:	e0c1      	b.n	8013c40 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8013abc:	89fb      	ldrh	r3, [r7, #14]
 8013abe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013ac2:	d102      	bne.n	8013aca <readID+0xfe>
        return 0x6814;
 8013ac4:	f646 0314 	movw	r3, #26644	; 0x6814
 8013ac8:	e0ba      	b.n	8013c40 <readID+0x274>
    ret = readReg32(0xD4);
 8013aca:	20d4      	movs	r0, #212	; 0xd4
 8013acc:	f7ff fbb6 	bl	801323c <readReg32>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8013ad4:	89fb      	ldrh	r3, [r7, #14]
 8013ad6:	f245 3210 	movw	r2, #21264	; 0x5310
 8013ada:	4293      	cmp	r3, r2
 8013adc:	d102      	bne.n	8013ae4 <readID+0x118>
        return 0x5310;
 8013ade:	f245 3310 	movw	r3, #21264	; 0x5310
 8013ae2:	e0ad      	b.n	8013c40 <readID+0x274>
    ret = readReg32(0xD7);
 8013ae4:	20d7      	movs	r0, #215	; 0xd7
 8013ae6:	f7ff fba9 	bl	801323c <readReg32>
 8013aea:	4603      	mov	r3, r0
 8013aec:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8013aee:	89fb      	ldrh	r3, [r7, #14]
 8013af0:	f248 0231 	movw	r2, #32817	; 0x8031
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d102      	bne.n	8013afe <readID+0x132>
        return 0x8031;
 8013af8:	f248 0331 	movw	r3, #32817	; 0x8031
 8013afc:	e0a0      	b.n	8013c40 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8013afe:	20ef      	movs	r0, #239	; 0xef
 8013b00:	f7ff fbb7 	bl	8013272 <readReg40>
 8013b04:	4603      	mov	r3, r0
 8013b06:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8013b08:	89fb      	ldrh	r3, [r7, #14]
 8013b0a:	f249 3227 	movw	r2, #37671	; 0x9327
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d102      	bne.n	8013b18 <readID+0x14c>
        return 0x9327;
 8013b12:	f249 3327 	movw	r3, #37671	; 0x9327
 8013b16:	e093      	b.n	8013c40 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8013b18:	20fe      	movs	r0, #254	; 0xfe
 8013b1a:	f7ff fb8f 	bl	801323c <readReg32>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	0a1b      	lsrs	r3, r3, #8
 8013b22:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8013b24:	89fb      	ldrh	r3, [r7, #14]
 8013b26:	f242 0253 	movw	r2, #8275	; 0x2053
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d102      	bne.n	8013b34 <readID+0x168>
        return 0x2053;
 8013b2e:	f242 0353 	movw	r3, #8275	; 0x2053
 8013b32:	e085      	b.n	8013c40 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8013b34:	2004      	movs	r0, #4
 8013b36:	f7ff fb81 	bl	801323c <readReg32>
 8013b3a:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	0c1b      	lsrs	r3, r3, #16
 8013b40:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8013b46:	79fb      	ldrb	r3, [r7, #7]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d122      	bne.n	8013b92 <readID+0x1c6>
 8013b4c:	89fb      	ldrh	r3, [r7, #14]
 8013b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b52:	d11e      	bne.n	8013b92 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8013b54:	4a3c      	ldr	r2, [pc, #240]	; (8013c48 <readID+0x27c>)
 8013b56:	1d3b      	adds	r3, r7, #4
 8013b58:	6812      	ldr	r2, [r2, #0]
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	8019      	strh	r1, [r3, #0]
 8013b5e:	3302      	adds	r3, #2
 8013b60:	0c12      	lsrs	r2, r2, #16
 8013b62:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8013b64:	1d3b      	adds	r3, r7, #4
 8013b66:	2203      	movs	r2, #3
 8013b68:	4619      	mov	r1, r3
 8013b6a:	20b9      	movs	r0, #185	; 0xb9
 8013b6c:	f7fd ff62 	bl	8011a34 <pushCommand>
        msb = readReg(0xD0,0);
 8013b70:	2100      	movs	r1, #0
 8013b72:	20d0      	movs	r0, #208	; 0xd0
 8013b74:	f7ff fa12 	bl	8012f9c <readReg>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	2b99      	cmp	r3, #153	; 0x99
 8013b80:	d101      	bne.n	8013b86 <readID+0x1ba>
 8013b82:	2399      	movs	r3, #153	; 0x99
 8013b84:	e05c      	b.n	8013c40 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8013b86:	79fb      	ldrb	r3, [r7, #7]
 8013b88:	2b90      	cmp	r3, #144	; 0x90
 8013b8a:	d102      	bne.n	8013b92 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8013b8c:	f249 0390 	movw	r3, #37008	; 0x9090
 8013b90:	e056      	b.n	8013c40 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8013b92:	89fb      	ldrh	r3, [r7, #14]
 8013b94:	f241 5226 	movw	r2, #5414	; 0x1526
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d102      	bne.n	8013ba2 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8013b9c:	f241 5326 	movw	r3, #5414	; 0x1526
 8013ba0:	e04e      	b.n	8013c40 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8013ba2:	89fb      	ldrh	r3, [r7, #14]
 8013ba4:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d102      	bne.n	8013bb2 <readID+0x1e6>
        return 0x7735;
 8013bac:	f247 7335 	movw	r3, #30517	; 0x7735
 8013bb0:	e046      	b.n	8013c40 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
 8013bb4:	f248 5252 	movw	r2, #34130	; 0x8552
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d102      	bne.n	8013bc2 <readID+0x1f6>
        return 0x7789;
 8013bbc:	f247 7389 	movw	r3, #30601	; 0x7789
 8013bc0:	e03e      	b.n	8013c40 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8013bc2:	89fb      	ldrh	r3, [r7, #14]
 8013bc4:	f64a 4211 	movw	r2, #44049	; 0xac11
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d102      	bne.n	8013bd2 <readID+0x206>
        return 0xAC11;
 8013bcc:	f64a 4311 	movw	r3, #44049	; 0xac11
 8013bd0:	e036      	b.n	8013c40 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8013bd2:	20d3      	movs	r0, #211	; 0xd3
 8013bd4:	f7ff fb32 	bl	801323c <readReg32>
 8013bd8:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	0a1b      	lsrs	r3, r3, #8
 8013bde:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8013be0:	89fb      	ldrh	r3, [r7, #14]
 8013be2:	f249 1263 	movw	r2, #37219	; 0x9163
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d101      	bne.n	8013bee <readID+0x222>
 8013bea:	89fb      	ldrh	r3, [r7, #14]
 8013bec:	e028      	b.n	8013c40 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8013bee:	20d3      	movs	r0, #211	; 0xd3
 8013bf0:	f7ff fb24 	bl	801323c <readReg32>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8013bf8:	89fb      	ldrh	r3, [r7, #14]
 8013bfa:	0a1b      	lsrs	r3, r3, #8
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8013c00:	79fb      	ldrb	r3, [r7, #7]
 8013c02:	2b93      	cmp	r3, #147	; 0x93
 8013c04:	d00b      	beq.n	8013c1e <readID+0x252>
 8013c06:	79fb      	ldrb	r3, [r7, #7]
 8013c08:	2b94      	cmp	r3, #148	; 0x94
 8013c0a:	d008      	beq.n	8013c1e <readID+0x252>
 8013c0c:	79fb      	ldrb	r3, [r7, #7]
 8013c0e:	2b98      	cmp	r3, #152	; 0x98
 8013c10:	d005      	beq.n	8013c1e <readID+0x252>
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b77      	cmp	r3, #119	; 0x77
 8013c16:	d002      	beq.n	8013c1e <readID+0x252>
 8013c18:	79fb      	ldrb	r3, [r7, #7]
 8013c1a:	2b16      	cmp	r3, #22
 8013c1c:	d101      	bne.n	8013c22 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8013c1e:	89fb      	ldrh	r3, [r7, #14]
 8013c20:	e00e      	b.n	8013c40 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8013c22:	89fb      	ldrh	r3, [r7, #14]
 8013c24:	2bd3      	cmp	r3, #211	; 0xd3
 8013c26:	d004      	beq.n	8013c32 <readID+0x266>
 8013c28:	89fb      	ldrh	r3, [r7, #14]
 8013c2a:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d101      	bne.n	8013c36 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8013c32:	89fb      	ldrh	r3, [r7, #14]
 8013c34:	e004      	b.n	8013c40 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8013c36:	2100      	movs	r1, #0
 8013c38:	2000      	movs	r0, #0
 8013c3a:	f7ff f9af 	bl	8012f9c <readReg>
 8013c3e:	4603      	mov	r3, r0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3710      	adds	r7, #16
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	0801a924 	.word	0x0801a924

08013c4c <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8013c4c:	b590      	push	{r4, r7, lr}
 8013c4e:	b08b      	sub	sp, #44	; 0x2c
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60ba      	str	r2, [r7, #8]
 8013c54:	461a      	mov	r2, r3
 8013c56:	4603      	mov	r3, r0
 8013c58:	81fb      	strh	r3, [r7, #14]
 8013c5a:	460b      	mov	r3, r1
 8013c5c:	81bb      	strh	r3, [r7, #12]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8013c62:	4b1c      	ldr	r3, [pc, #112]	; (8013cd4 <readGRAM+0x88>)
 8013c64:	881b      	ldrh	r3, [r3, #0]
 8013c66:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8013c68:	88fa      	ldrh	r2, [r7, #6]
 8013c6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013c6c:	fb12 f303 	smulbb	r3, r2, r3
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	847b      	strh	r3, [r7, #34]	; 0x22
 8013c74:	2300      	movs	r3, #0
 8013c76:	843b      	strh	r3, [r7, #32]
 8013c78:	2300      	movs	r3, #0
 8013c7a:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8013c7c:	4b16      	ldr	r3, [pc, #88]	; (8013cd8 <readGRAM+0x8c>)
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d107      	bne.n	8013c94 <readGRAM+0x48>
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <readGRAM+0x90>)
 8013c86:	881b      	ldrh	r3, [r3, #0]
 8013c88:	f003 0301 	and.w	r3, r3, #1
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <readGRAM+0x48>
        _MR = 0x2E;
 8013c90:	232e      	movs	r3, #46	; 0x2e
 8013c92:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8013c94:	4b12      	ldr	r3, [pc, #72]	; (8013ce0 <readGRAM+0x94>)
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	f241 6202 	movw	r2, #5634	; 0x1602
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d101      	bne.n	8013ca4 <readGRAM+0x58>
 8013ca0:	232e      	movs	r3, #46	; 0x2e
 8013ca2:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8013ca4:	89fa      	ldrh	r2, [r7, #14]
 8013ca6:	88fb      	ldrh	r3, [r7, #6]
 8013ca8:	4413      	add	r3, r2
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	3b01      	subs	r3, #1
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	b21c      	sxth	r4, r3
 8013cb2:	89ba      	ldrh	r2, [r7, #12]
 8013cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013cb6:	4413      	add	r3, r2
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	3b01      	subs	r3, #1
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	b21b      	sxth	r3, r3
 8013cc0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8013cc4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8013cc8:	4622      	mov	r2, r4
 8013cca:	f002 f881 	bl	8015dd0 <setAddrWindow>
    while (n > 0) {
 8013cce:	f001 bc51 	b.w	8015574 <readGRAM+0x1928>
 8013cd2:	bf00      	nop
 8013cd4:	2000698c 	.word	0x2000698c
 8013cd8:	20000218 	.word	0x20000218
 8013cdc:	2000698e 	.word	0x2000698e
 8013ce0:	2000699c 	.word	0x2000699c
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8013ce4:	4bc1      	ldr	r3, [pc, #772]	; (8013fec <readGRAM+0x3a0>)
 8013ce6:	881b      	ldrh	r3, [r3, #0]
 8013ce8:	f003 0301 	and.w	r3, r3, #1
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d111      	bne.n	8013d14 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8013cf0:	4bbf      	ldr	r3, [pc, #764]	; (8013ff0 <readGRAM+0x3a4>)
 8013cf2:	8818      	ldrh	r0, [r3, #0]
 8013cf4:	89fa      	ldrh	r2, [r7, #14]
 8013cf6:	8bfb      	ldrh	r3, [r7, #30]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	4619      	mov	r1, r3
 8013cfe:	f7fd fe87 	bl	8011a10 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8013d02:	4bbc      	ldr	r3, [pc, #752]	; (8013ff4 <readGRAM+0x3a8>)
 8013d04:	8818      	ldrh	r0, [r3, #0]
 8013d06:	89ba      	ldrh	r2, [r7, #12]
 8013d08:	8c3b      	ldrh	r3, [r7, #32]
 8013d0a:	4413      	add	r3, r2
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	4619      	mov	r1, r3
 8013d10:	f7fd fe7e 	bl	8011a10 <WriteCmdData>
        }
        CS_ACTIVE;
 8013d14:	2108      	movs	r1, #8
 8013d16:	48b8      	ldr	r0, [pc, #736]	; (8013ff8 <readGRAM+0x3ac>)
 8013d18:	f7fd fd63 	bl	80117e2 <PIN_LOW>
        WriteCmd(_MR);
 8013d1c:	2120      	movs	r1, #32
 8013d1e:	48b7      	ldr	r0, [pc, #732]	; (8013ffc <readGRAM+0x3b0>)
 8013d20:	f7fd fd5f 	bl	80117e2 <PIN_LOW>
 8013d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d26:	0a1b      	lsrs	r3, r3, #8
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	777b      	strb	r3, [r7, #29]
 8013d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d2e:	773b      	strb	r3, [r7, #28]
 8013d30:	4bb2      	ldr	r3, [pc, #712]	; (8013ffc <readGRAM+0x3b0>)
 8013d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d36:	619a      	str	r2, [r3, #24]
 8013d38:	4bb1      	ldr	r3, [pc, #708]	; (8014000 <readGRAM+0x3b4>)
 8013d3a:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8013d3e:	619a      	str	r2, [r3, #24]
 8013d40:	4bad      	ldr	r3, [pc, #692]	; (8013ff8 <readGRAM+0x3ac>)
 8013d42:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013d46:	619a      	str	r2, [r3, #24]
 8013d48:	7f7b      	ldrb	r3, [r7, #29]
 8013d4a:	039b      	lsls	r3, r3, #14
 8013d4c:	4aab      	ldr	r2, [pc, #684]	; (8013ffc <readGRAM+0x3b0>)
 8013d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d52:	6193      	str	r3, [r2, #24]
 8013d54:	7f7b      	ldrb	r3, [r7, #29]
 8013d56:	029b      	lsls	r3, r3, #10
 8013d58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013d5c:	7f7b      	ldrb	r3, [r7, #29]
 8013d5e:	019b      	lsls	r3, r3, #6
 8013d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d64:	431a      	orrs	r2, r3
 8013d66:	7f7b      	ldrb	r3, [r7, #29]
 8013d68:	00db      	lsls	r3, r3, #3
 8013d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d6e:	431a      	orrs	r2, r3
 8013d70:	4ba3      	ldr	r3, [pc, #652]	; (8014000 <readGRAM+0x3b4>)
 8013d72:	619a      	str	r2, [r3, #24]
 8013d74:	7f7b      	ldrb	r3, [r7, #29]
 8013d76:	031b      	lsls	r3, r3, #12
 8013d78:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013d7c:	7f7b      	ldrb	r3, [r7, #29]
 8013d7e:	035b      	lsls	r3, r3, #13
 8013d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d84:	431a      	orrs	r2, r3
 8013d86:	7f7b      	ldrb	r3, [r7, #29]
 8013d88:	029b      	lsls	r3, r3, #10
 8013d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013d8e:	431a      	orrs	r2, r3
 8013d90:	7f7b      	ldrb	r3, [r7, #29]
 8013d92:	019b      	lsls	r3, r3, #6
 8013d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d98:	431a      	orrs	r2, r3
 8013d9a:	4b97      	ldr	r3, [pc, #604]	; (8013ff8 <readGRAM+0x3ac>)
 8013d9c:	619a      	str	r2, [r3, #24]
 8013d9e:	2101      	movs	r1, #1
 8013da0:	4898      	ldr	r0, [pc, #608]	; (8014004 <readGRAM+0x3b8>)
 8013da2:	f7fd fd1e 	bl	80117e2 <PIN_LOW>
 8013da6:	2101      	movs	r1, #1
 8013da8:	4896      	ldr	r0, [pc, #600]	; (8014004 <readGRAM+0x3b8>)
 8013daa:	f7fd fd1a 	bl	80117e2 <PIN_LOW>
 8013dae:	2101      	movs	r1, #1
 8013db0:	4894      	ldr	r0, [pc, #592]	; (8014004 <readGRAM+0x3b8>)
 8013db2:	f7fd fd16 	bl	80117e2 <PIN_LOW>
 8013db6:	2101      	movs	r1, #1
 8013db8:	4892      	ldr	r0, [pc, #584]	; (8014004 <readGRAM+0x3b8>)
 8013dba:	f7fd fd12 	bl	80117e2 <PIN_LOW>
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	4890      	ldr	r0, [pc, #576]	; (8014004 <readGRAM+0x3b8>)
 8013dc2:	f7fd fd0e 	bl	80117e2 <PIN_LOW>
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	488e      	ldr	r0, [pc, #568]	; (8014004 <readGRAM+0x3b8>)
 8013dca:	f7fd fd0a 	bl	80117e2 <PIN_LOW>
 8013dce:	2101      	movs	r1, #1
 8013dd0:	488c      	ldr	r0, [pc, #560]	; (8014004 <readGRAM+0x3b8>)
 8013dd2:	f7fd fd06 	bl	80117e2 <PIN_LOW>
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	488a      	ldr	r0, [pc, #552]	; (8014004 <readGRAM+0x3b8>)
 8013dda:	f7fd fd02 	bl	80117e2 <PIN_LOW>
 8013dde:	2101      	movs	r1, #1
 8013de0:	4888      	ldr	r0, [pc, #544]	; (8014004 <readGRAM+0x3b8>)
 8013de2:	f7fd fcfe 	bl	80117e2 <PIN_LOW>
 8013de6:	2101      	movs	r1, #1
 8013de8:	4886      	ldr	r0, [pc, #536]	; (8014004 <readGRAM+0x3b8>)
 8013dea:	f7fd fcfa 	bl	80117e2 <PIN_LOW>
 8013dee:	2101      	movs	r1, #1
 8013df0:	4884      	ldr	r0, [pc, #528]	; (8014004 <readGRAM+0x3b8>)
 8013df2:	f7fd fcf6 	bl	80117e2 <PIN_LOW>
 8013df6:	2101      	movs	r1, #1
 8013df8:	4882      	ldr	r0, [pc, #520]	; (8014004 <readGRAM+0x3b8>)
 8013dfa:	f7fd fcf2 	bl	80117e2 <PIN_LOW>
 8013dfe:	2101      	movs	r1, #1
 8013e00:	4880      	ldr	r0, [pc, #512]	; (8014004 <readGRAM+0x3b8>)
 8013e02:	f7fd fcee 	bl	80117e2 <PIN_LOW>
 8013e06:	2101      	movs	r1, #1
 8013e08:	487e      	ldr	r0, [pc, #504]	; (8014004 <readGRAM+0x3b8>)
 8013e0a:	f7fd fcea 	bl	80117e2 <PIN_LOW>
 8013e0e:	2101      	movs	r1, #1
 8013e10:	487c      	ldr	r0, [pc, #496]	; (8014004 <readGRAM+0x3b8>)
 8013e12:	f7fd fce6 	bl	80117e2 <PIN_LOW>
 8013e16:	2101      	movs	r1, #1
 8013e18:	487a      	ldr	r0, [pc, #488]	; (8014004 <readGRAM+0x3b8>)
 8013e1a:	f7fd fce2 	bl	80117e2 <PIN_LOW>
 8013e1e:	2101      	movs	r1, #1
 8013e20:	4878      	ldr	r0, [pc, #480]	; (8014004 <readGRAM+0x3b8>)
 8013e22:	f7fd fcde 	bl	80117e2 <PIN_LOW>
 8013e26:	2101      	movs	r1, #1
 8013e28:	4876      	ldr	r0, [pc, #472]	; (8014004 <readGRAM+0x3b8>)
 8013e2a:	f7fd fcea 	bl	8011802 <PIN_HIGH>
 8013e2e:	2101      	movs	r1, #1
 8013e30:	4874      	ldr	r0, [pc, #464]	; (8014004 <readGRAM+0x3b8>)
 8013e32:	f7fd fce6 	bl	8011802 <PIN_HIGH>
 8013e36:	4b71      	ldr	r3, [pc, #452]	; (8013ffc <readGRAM+0x3b0>)
 8013e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013e3c:	619a      	str	r2, [r3, #24]
 8013e3e:	4b70      	ldr	r3, [pc, #448]	; (8014000 <readGRAM+0x3b4>)
 8013e40:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8013e44:	619a      	str	r2, [r3, #24]
 8013e46:	4b6c      	ldr	r3, [pc, #432]	; (8013ff8 <readGRAM+0x3ac>)
 8013e48:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013e4c:	619a      	str	r2, [r3, #24]
 8013e4e:	7f3b      	ldrb	r3, [r7, #28]
 8013e50:	039b      	lsls	r3, r3, #14
 8013e52:	4a6a      	ldr	r2, [pc, #424]	; (8013ffc <readGRAM+0x3b0>)
 8013e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e58:	6193      	str	r3, [r2, #24]
 8013e5a:	7f3b      	ldrb	r3, [r7, #28]
 8013e5c:	029b      	lsls	r3, r3, #10
 8013e5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013e62:	7f3b      	ldrb	r3, [r7, #28]
 8013e64:	019b      	lsls	r3, r3, #6
 8013e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e6a:	431a      	orrs	r2, r3
 8013e6c:	7f3b      	ldrb	r3, [r7, #28]
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013e74:	431a      	orrs	r2, r3
 8013e76:	4b62      	ldr	r3, [pc, #392]	; (8014000 <readGRAM+0x3b4>)
 8013e78:	619a      	str	r2, [r3, #24]
 8013e7a:	7f3b      	ldrb	r3, [r7, #28]
 8013e7c:	031b      	lsls	r3, r3, #12
 8013e7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013e82:	7f3b      	ldrb	r3, [r7, #28]
 8013e84:	035b      	lsls	r3, r3, #13
 8013e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e8a:	431a      	orrs	r2, r3
 8013e8c:	7f3b      	ldrb	r3, [r7, #28]
 8013e8e:	029b      	lsls	r3, r3, #10
 8013e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e94:	431a      	orrs	r2, r3
 8013e96:	7f3b      	ldrb	r3, [r7, #28]
 8013e98:	019b      	lsls	r3, r3, #6
 8013e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e9e:	431a      	orrs	r2, r3
 8013ea0:	4b55      	ldr	r3, [pc, #340]	; (8013ff8 <readGRAM+0x3ac>)
 8013ea2:	619a      	str	r2, [r3, #24]
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	4857      	ldr	r0, [pc, #348]	; (8014004 <readGRAM+0x3b8>)
 8013ea8:	f7fd fc9b 	bl	80117e2 <PIN_LOW>
 8013eac:	2101      	movs	r1, #1
 8013eae:	4855      	ldr	r0, [pc, #340]	; (8014004 <readGRAM+0x3b8>)
 8013eb0:	f7fd fc97 	bl	80117e2 <PIN_LOW>
 8013eb4:	2101      	movs	r1, #1
 8013eb6:	4853      	ldr	r0, [pc, #332]	; (8014004 <readGRAM+0x3b8>)
 8013eb8:	f7fd fc93 	bl	80117e2 <PIN_LOW>
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	4851      	ldr	r0, [pc, #324]	; (8014004 <readGRAM+0x3b8>)
 8013ec0:	f7fd fc8f 	bl	80117e2 <PIN_LOW>
 8013ec4:	2101      	movs	r1, #1
 8013ec6:	484f      	ldr	r0, [pc, #316]	; (8014004 <readGRAM+0x3b8>)
 8013ec8:	f7fd fc8b 	bl	80117e2 <PIN_LOW>
 8013ecc:	2101      	movs	r1, #1
 8013ece:	484d      	ldr	r0, [pc, #308]	; (8014004 <readGRAM+0x3b8>)
 8013ed0:	f7fd fc87 	bl	80117e2 <PIN_LOW>
 8013ed4:	2101      	movs	r1, #1
 8013ed6:	484b      	ldr	r0, [pc, #300]	; (8014004 <readGRAM+0x3b8>)
 8013ed8:	f7fd fc83 	bl	80117e2 <PIN_LOW>
 8013edc:	2101      	movs	r1, #1
 8013ede:	4849      	ldr	r0, [pc, #292]	; (8014004 <readGRAM+0x3b8>)
 8013ee0:	f7fd fc7f 	bl	80117e2 <PIN_LOW>
 8013ee4:	2101      	movs	r1, #1
 8013ee6:	4847      	ldr	r0, [pc, #284]	; (8014004 <readGRAM+0x3b8>)
 8013ee8:	f7fd fc7b 	bl	80117e2 <PIN_LOW>
 8013eec:	2101      	movs	r1, #1
 8013eee:	4845      	ldr	r0, [pc, #276]	; (8014004 <readGRAM+0x3b8>)
 8013ef0:	f7fd fc77 	bl	80117e2 <PIN_LOW>
 8013ef4:	2101      	movs	r1, #1
 8013ef6:	4843      	ldr	r0, [pc, #268]	; (8014004 <readGRAM+0x3b8>)
 8013ef8:	f7fd fc73 	bl	80117e2 <PIN_LOW>
 8013efc:	2101      	movs	r1, #1
 8013efe:	4841      	ldr	r0, [pc, #260]	; (8014004 <readGRAM+0x3b8>)
 8013f00:	f7fd fc6f 	bl	80117e2 <PIN_LOW>
 8013f04:	2101      	movs	r1, #1
 8013f06:	483f      	ldr	r0, [pc, #252]	; (8014004 <readGRAM+0x3b8>)
 8013f08:	f7fd fc6b 	bl	80117e2 <PIN_LOW>
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	483d      	ldr	r0, [pc, #244]	; (8014004 <readGRAM+0x3b8>)
 8013f10:	f7fd fc67 	bl	80117e2 <PIN_LOW>
 8013f14:	2101      	movs	r1, #1
 8013f16:	483b      	ldr	r0, [pc, #236]	; (8014004 <readGRAM+0x3b8>)
 8013f18:	f7fd fc63 	bl	80117e2 <PIN_LOW>
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	4839      	ldr	r0, [pc, #228]	; (8014004 <readGRAM+0x3b8>)
 8013f20:	f7fd fc5f 	bl	80117e2 <PIN_LOW>
 8013f24:	2101      	movs	r1, #1
 8013f26:	4837      	ldr	r0, [pc, #220]	; (8014004 <readGRAM+0x3b8>)
 8013f28:	f7fd fc5b 	bl	80117e2 <PIN_LOW>
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	4835      	ldr	r0, [pc, #212]	; (8014004 <readGRAM+0x3b8>)
 8013f30:	f7fd fc67 	bl	8011802 <PIN_HIGH>
 8013f34:	2101      	movs	r1, #1
 8013f36:	4833      	ldr	r0, [pc, #204]	; (8014004 <readGRAM+0x3b8>)
 8013f38:	f7fd fc63 	bl	8011802 <PIN_HIGH>
 8013f3c:	2120      	movs	r1, #32
 8013f3e:	482f      	ldr	r0, [pc, #188]	; (8013ffc <readGRAM+0x3b0>)
 8013f40:	f7fd fc5f 	bl	8011802 <PIN_HIGH>
        setReadDir();
 8013f44:	f7fd fd8a 	bl	8011a5c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8013f48:	4b28      	ldr	r3, [pc, #160]	; (8013fec <readGRAM+0x3a0>)
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f040 838e 	bne.w	8014672 <readGRAM+0xa26>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8013f56:	4b25      	ldr	r3, [pc, #148]	; (8013fec <readGRAM+0x3a0>)
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d106      	bne.n	8013f70 <readGRAM+0x324>
 8013f62:	4b29      	ldr	r3, [pc, #164]	; (8014008 <readGRAM+0x3bc>)
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	f241 2289 	movw	r2, #4745	; 0x1289
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	f040 8136 	bne.w	80141dc <readGRAM+0x590>
            READ_8(r);
 8013f70:	2180      	movs	r1, #128	; 0x80
 8013f72:	4822      	ldr	r0, [pc, #136]	; (8013ffc <readGRAM+0x3b0>)
 8013f74:	f7fd fc45 	bl	8011802 <PIN_HIGH>
 8013f78:	2180      	movs	r1, #128	; 0x80
 8013f7a:	4820      	ldr	r0, [pc, #128]	; (8013ffc <readGRAM+0x3b0>)
 8013f7c:	f7fd fc31 	bl	80117e2 <PIN_LOW>
 8013f80:	2180      	movs	r1, #128	; 0x80
 8013f82:	481e      	ldr	r0, [pc, #120]	; (8013ffc <readGRAM+0x3b0>)
 8013f84:	f7fd fc2d 	bl	80117e2 <PIN_LOW>
 8013f88:	2180      	movs	r1, #128	; 0x80
 8013f8a:	481c      	ldr	r0, [pc, #112]	; (8013ffc <readGRAM+0x3b0>)
 8013f8c:	f7fd fc29 	bl	80117e2 <PIN_LOW>
 8013f90:	2180      	movs	r1, #128	; 0x80
 8013f92:	481a      	ldr	r0, [pc, #104]	; (8013ffc <readGRAM+0x3b0>)
 8013f94:	f7fd fc25 	bl	80117e2 <PIN_LOW>
 8013f98:	2180      	movs	r1, #128	; 0x80
 8013f9a:	4818      	ldr	r0, [pc, #96]	; (8013ffc <readGRAM+0x3b0>)
 8013f9c:	f7fd fc21 	bl	80117e2 <PIN_LOW>
 8013fa0:	2180      	movs	r1, #128	; 0x80
 8013fa2:	4816      	ldr	r0, [pc, #88]	; (8013ffc <readGRAM+0x3b0>)
 8013fa4:	f7fd fc1d 	bl	80117e2 <PIN_LOW>
 8013fa8:	2180      	movs	r1, #128	; 0x80
 8013faa:	4814      	ldr	r0, [pc, #80]	; (8013ffc <readGRAM+0x3b0>)
 8013fac:	f7fd fc19 	bl	80117e2 <PIN_LOW>
 8013fb0:	2180      	movs	r1, #128	; 0x80
 8013fb2:	4812      	ldr	r0, [pc, #72]	; (8013ffc <readGRAM+0x3b0>)
 8013fb4:	f7fd fc15 	bl	80117e2 <PIN_LOW>
 8013fb8:	2180      	movs	r1, #128	; 0x80
 8013fba:	4810      	ldr	r0, [pc, #64]	; (8013ffc <readGRAM+0x3b0>)
 8013fbc:	f7fd fc11 	bl	80117e2 <PIN_LOW>
 8013fc0:	2180      	movs	r1, #128	; 0x80
 8013fc2:	480e      	ldr	r0, [pc, #56]	; (8013ffc <readGRAM+0x3b0>)
 8013fc4:	f7fd fc0d 	bl	80117e2 <PIN_LOW>
 8013fc8:	2180      	movs	r1, #128	; 0x80
 8013fca:	480c      	ldr	r0, [pc, #48]	; (8013ffc <readGRAM+0x3b0>)
 8013fcc:	f7fd fc09 	bl	80117e2 <PIN_LOW>
 8013fd0:	2180      	movs	r1, #128	; 0x80
 8013fd2:	480a      	ldr	r0, [pc, #40]	; (8013ffc <readGRAM+0x3b0>)
 8013fd4:	f7fd fc05 	bl	80117e2 <PIN_LOW>
 8013fd8:	2180      	movs	r1, #128	; 0x80
 8013fda:	4808      	ldr	r0, [pc, #32]	; (8013ffc <readGRAM+0x3b0>)
 8013fdc:	f7fd fc01 	bl	80117e2 <PIN_LOW>
 8013fe0:	2180      	movs	r1, #128	; 0x80
 8013fe2:	4806      	ldr	r0, [pc, #24]	; (8013ffc <readGRAM+0x3b0>)
 8013fe4:	f7fd fbfd 	bl	80117e2 <PIN_LOW>
 8013fe8:	2180      	movs	r1, #128	; 0x80
 8013fea:	e00f      	b.n	801400c <readGRAM+0x3c0>
 8013fec:	2000698e 	.word	0x2000698e
 8013ff0:	20006996 	.word	0x20006996
 8013ff4:	20006994 	.word	0x20006994
 8013ff8:	40021400 	.word	0x40021400
 8013ffc:	40020c00 	.word	0x40020c00
 8014000:	40021000 	.word	0x40021000
 8014004:	40020800 	.word	0x40020800
 8014008:	2000699c 	.word	0x2000699c
 801400c:	4870      	ldr	r0, [pc, #448]	; (80141d0 <readGRAM+0x584>)
 801400e:	f7fd fbe8 	bl	80117e2 <PIN_LOW>
 8014012:	2180      	movs	r1, #128	; 0x80
 8014014:	486e      	ldr	r0, [pc, #440]	; (80141d0 <readGRAM+0x584>)
 8014016:	f7fd fbe4 	bl	80117e2 <PIN_LOW>
 801401a:	2180      	movs	r1, #128	; 0x80
 801401c:	486c      	ldr	r0, [pc, #432]	; (80141d0 <readGRAM+0x584>)
 801401e:	f7fd fbe0 	bl	80117e2 <PIN_LOW>
 8014022:	2180      	movs	r1, #128	; 0x80
 8014024:	486a      	ldr	r0, [pc, #424]	; (80141d0 <readGRAM+0x584>)
 8014026:	f7fd fbdc 	bl	80117e2 <PIN_LOW>
 801402a:	2180      	movs	r1, #128	; 0x80
 801402c:	4868      	ldr	r0, [pc, #416]	; (80141d0 <readGRAM+0x584>)
 801402e:	f7fd fbd8 	bl	80117e2 <PIN_LOW>
 8014032:	2180      	movs	r1, #128	; 0x80
 8014034:	4866      	ldr	r0, [pc, #408]	; (80141d0 <readGRAM+0x584>)
 8014036:	f7fd fbd4 	bl	80117e2 <PIN_LOW>
 801403a:	2180      	movs	r1, #128	; 0x80
 801403c:	4864      	ldr	r0, [pc, #400]	; (80141d0 <readGRAM+0x584>)
 801403e:	f7fd fbd0 	bl	80117e2 <PIN_LOW>
 8014042:	2180      	movs	r1, #128	; 0x80
 8014044:	4862      	ldr	r0, [pc, #392]	; (80141d0 <readGRAM+0x584>)
 8014046:	f7fd fbcc 	bl	80117e2 <PIN_LOW>
 801404a:	2180      	movs	r1, #128	; 0x80
 801404c:	4860      	ldr	r0, [pc, #384]	; (80141d0 <readGRAM+0x584>)
 801404e:	f7fd fbc8 	bl	80117e2 <PIN_LOW>
 8014052:	2180      	movs	r1, #128	; 0x80
 8014054:	485e      	ldr	r0, [pc, #376]	; (80141d0 <readGRAM+0x584>)
 8014056:	f7fd fbc4 	bl	80117e2 <PIN_LOW>
 801405a:	2180      	movs	r1, #128	; 0x80
 801405c:	485c      	ldr	r0, [pc, #368]	; (80141d0 <readGRAM+0x584>)
 801405e:	f7fd fbc0 	bl	80117e2 <PIN_LOW>
 8014062:	2180      	movs	r1, #128	; 0x80
 8014064:	485a      	ldr	r0, [pc, #360]	; (80141d0 <readGRAM+0x584>)
 8014066:	f7fd fbbc 	bl	80117e2 <PIN_LOW>
 801406a:	2180      	movs	r1, #128	; 0x80
 801406c:	4858      	ldr	r0, [pc, #352]	; (80141d0 <readGRAM+0x584>)
 801406e:	f7fd fbb8 	bl	80117e2 <PIN_LOW>
 8014072:	2180      	movs	r1, #128	; 0x80
 8014074:	4856      	ldr	r0, [pc, #344]	; (80141d0 <readGRAM+0x584>)
 8014076:	f7fd fbb4 	bl	80117e2 <PIN_LOW>
 801407a:	2180      	movs	r1, #128	; 0x80
 801407c:	4854      	ldr	r0, [pc, #336]	; (80141d0 <readGRAM+0x584>)
 801407e:	f7fd fbb0 	bl	80117e2 <PIN_LOW>
 8014082:	2180      	movs	r1, #128	; 0x80
 8014084:	4852      	ldr	r0, [pc, #328]	; (80141d0 <readGRAM+0x584>)
 8014086:	f7fd fbac 	bl	80117e2 <PIN_LOW>
 801408a:	2180      	movs	r1, #128	; 0x80
 801408c:	4850      	ldr	r0, [pc, #320]	; (80141d0 <readGRAM+0x584>)
 801408e:	f7fd fba8 	bl	80117e2 <PIN_LOW>
 8014092:	2180      	movs	r1, #128	; 0x80
 8014094:	484e      	ldr	r0, [pc, #312]	; (80141d0 <readGRAM+0x584>)
 8014096:	f7fd fba4 	bl	80117e2 <PIN_LOW>
 801409a:	2180      	movs	r1, #128	; 0x80
 801409c:	484c      	ldr	r0, [pc, #304]	; (80141d0 <readGRAM+0x584>)
 801409e:	f7fd fba0 	bl	80117e2 <PIN_LOW>
 80140a2:	2180      	movs	r1, #128	; 0x80
 80140a4:	484a      	ldr	r0, [pc, #296]	; (80141d0 <readGRAM+0x584>)
 80140a6:	f7fd fb9c 	bl	80117e2 <PIN_LOW>
 80140aa:	2180      	movs	r1, #128	; 0x80
 80140ac:	4848      	ldr	r0, [pc, #288]	; (80141d0 <readGRAM+0x584>)
 80140ae:	f7fd fb98 	bl	80117e2 <PIN_LOW>
 80140b2:	2180      	movs	r1, #128	; 0x80
 80140b4:	4846      	ldr	r0, [pc, #280]	; (80141d0 <readGRAM+0x584>)
 80140b6:	f7fd fb94 	bl	80117e2 <PIN_LOW>
 80140ba:	2180      	movs	r1, #128	; 0x80
 80140bc:	4844      	ldr	r0, [pc, #272]	; (80141d0 <readGRAM+0x584>)
 80140be:	f7fd fb90 	bl	80117e2 <PIN_LOW>
 80140c2:	2180      	movs	r1, #128	; 0x80
 80140c4:	4842      	ldr	r0, [pc, #264]	; (80141d0 <readGRAM+0x584>)
 80140c6:	f7fd fb8c 	bl	80117e2 <PIN_LOW>
 80140ca:	2180      	movs	r1, #128	; 0x80
 80140cc:	4840      	ldr	r0, [pc, #256]	; (80141d0 <readGRAM+0x584>)
 80140ce:	f7fd fb88 	bl	80117e2 <PIN_LOW>
 80140d2:	2180      	movs	r1, #128	; 0x80
 80140d4:	483e      	ldr	r0, [pc, #248]	; (80141d0 <readGRAM+0x584>)
 80140d6:	f7fd fb84 	bl	80117e2 <PIN_LOW>
 80140da:	2180      	movs	r1, #128	; 0x80
 80140dc:	483c      	ldr	r0, [pc, #240]	; (80141d0 <readGRAM+0x584>)
 80140de:	f7fd fb80 	bl	80117e2 <PIN_LOW>
 80140e2:	2180      	movs	r1, #128	; 0x80
 80140e4:	483a      	ldr	r0, [pc, #232]	; (80141d0 <readGRAM+0x584>)
 80140e6:	f7fd fb7c 	bl	80117e2 <PIN_LOW>
 80140ea:	2180      	movs	r1, #128	; 0x80
 80140ec:	4838      	ldr	r0, [pc, #224]	; (80141d0 <readGRAM+0x584>)
 80140ee:	f7fd fb78 	bl	80117e2 <PIN_LOW>
 80140f2:	2180      	movs	r1, #128	; 0x80
 80140f4:	4836      	ldr	r0, [pc, #216]	; (80141d0 <readGRAM+0x584>)
 80140f6:	f7fd fb74 	bl	80117e2 <PIN_LOW>
 80140fa:	2180      	movs	r1, #128	; 0x80
 80140fc:	4834      	ldr	r0, [pc, #208]	; (80141d0 <readGRAM+0x584>)
 80140fe:	f7fd fb70 	bl	80117e2 <PIN_LOW>
 8014102:	2180      	movs	r1, #128	; 0x80
 8014104:	4832      	ldr	r0, [pc, #200]	; (80141d0 <readGRAM+0x584>)
 8014106:	f7fd fb6c 	bl	80117e2 <PIN_LOW>
 801410a:	2180      	movs	r1, #128	; 0x80
 801410c:	4830      	ldr	r0, [pc, #192]	; (80141d0 <readGRAM+0x584>)
 801410e:	f7fd fb68 	bl	80117e2 <PIN_LOW>
 8014112:	2180      	movs	r1, #128	; 0x80
 8014114:	482e      	ldr	r0, [pc, #184]	; (80141d0 <readGRAM+0x584>)
 8014116:	f7fd fb64 	bl	80117e2 <PIN_LOW>
 801411a:	2180      	movs	r1, #128	; 0x80
 801411c:	482c      	ldr	r0, [pc, #176]	; (80141d0 <readGRAM+0x584>)
 801411e:	f7fd fb60 	bl	80117e2 <PIN_LOW>
 8014122:	2180      	movs	r1, #128	; 0x80
 8014124:	482a      	ldr	r0, [pc, #168]	; (80141d0 <readGRAM+0x584>)
 8014126:	f7fd fb5c 	bl	80117e2 <PIN_LOW>
 801412a:	2180      	movs	r1, #128	; 0x80
 801412c:	4828      	ldr	r0, [pc, #160]	; (80141d0 <readGRAM+0x584>)
 801412e:	f7fd fb58 	bl	80117e2 <PIN_LOW>
 8014132:	4b28      	ldr	r3, [pc, #160]	; (80141d4 <readGRAM+0x588>)
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	0b1b      	lsrs	r3, r3, #12
 8014138:	b2db      	uxtb	r3, r3
 801413a:	f003 0301 	and.w	r3, r3, #1
 801413e:	b2da      	uxtb	r2, r3
 8014140:	4b23      	ldr	r3, [pc, #140]	; (80141d0 <readGRAM+0x584>)
 8014142:	691b      	ldr	r3, [r3, #16]
 8014144:	0b9b      	lsrs	r3, r3, #14
 8014146:	b2db      	uxtb	r3, r3
 8014148:	f003 0302 	and.w	r3, r3, #2
 801414c:	b2db      	uxtb	r3, r3
 801414e:	4313      	orrs	r3, r2
 8014150:	b2da      	uxtb	r2, r3
 8014152:	4b20      	ldr	r3, [pc, #128]	; (80141d4 <readGRAM+0x588>)
 8014154:	691b      	ldr	r3, [r3, #16]
 8014156:	0b5b      	lsrs	r3, r3, #13
 8014158:	b2db      	uxtb	r3, r3
 801415a:	f003 0304 	and.w	r3, r3, #4
 801415e:	b2db      	uxtb	r3, r3
 8014160:	4313      	orrs	r3, r2
 8014162:	b2da      	uxtb	r2, r3
 8014164:	4b1c      	ldr	r3, [pc, #112]	; (80141d8 <readGRAM+0x58c>)
 8014166:	691b      	ldr	r3, [r3, #16]
 8014168:	0a9b      	lsrs	r3, r3, #10
 801416a:	b2db      	uxtb	r3, r3
 801416c:	f003 0308 	and.w	r3, r3, #8
 8014170:	b2db      	uxtb	r3, r3
 8014172:	4313      	orrs	r3, r2
 8014174:	b2da      	uxtb	r2, r3
 8014176:	4b17      	ldr	r3, [pc, #92]	; (80141d4 <readGRAM+0x588>)
 8014178:	691b      	ldr	r3, [r3, #16]
 801417a:	0a9b      	lsrs	r3, r3, #10
 801417c:	b2db      	uxtb	r3, r3
 801417e:	f003 0310 	and.w	r3, r3, #16
 8014182:	b2db      	uxtb	r3, r3
 8014184:	4313      	orrs	r3, r2
 8014186:	b2da      	uxtb	r2, r3
 8014188:	4b13      	ldr	r3, [pc, #76]	; (80141d8 <readGRAM+0x58c>)
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	099b      	lsrs	r3, r3, #6
 801418e:	b2db      	uxtb	r3, r3
 8014190:	f003 0320 	and.w	r3, r3, #32
 8014194:	b2db      	uxtb	r3, r3
 8014196:	4313      	orrs	r3, r2
 8014198:	b2da      	uxtb	r2, r3
 801419a:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <readGRAM+0x58c>)
 801419c:	691b      	ldr	r3, [r3, #16]
 801419e:	08db      	lsrs	r3, r3, #3
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	4313      	orrs	r3, r2
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	4b09      	ldr	r3, [pc, #36]	; (80141d4 <readGRAM+0x588>)
 80141ae:	691b      	ldr	r3, [r3, #16]
 80141b0:	099b      	lsrs	r3, r3, #6
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	4313      	orrs	r3, r2
 80141bc:	75fb      	strb	r3, [r7, #23]
 80141be:	2180      	movs	r1, #128	; 0x80
 80141c0:	4803      	ldr	r0, [pc, #12]	; (80141d0 <readGRAM+0x584>)
 80141c2:	f7fd fb1e 	bl	8011802 <PIN_HIGH>
 80141c6:	2180      	movs	r1, #128	; 0x80
 80141c8:	4801      	ldr	r0, [pc, #4]	; (80141d0 <readGRAM+0x584>)
 80141ca:	f7fd fb1a 	bl	8011802 <PIN_HIGH>
 80141ce:	e250      	b.n	8014672 <readGRAM+0xa26>
 80141d0:	40020c00 	.word	0x40020c00
 80141d4:	40021400 	.word	0x40021400
 80141d8:	40021000 	.word	0x40021000
        } else {
            READ_16(dummy);
 80141dc:	2180      	movs	r1, #128	; 0x80
 80141de:	48c3      	ldr	r0, [pc, #780]	; (80144ec <readGRAM+0x8a0>)
 80141e0:	f7fd fb0f 	bl	8011802 <PIN_HIGH>
 80141e4:	2180      	movs	r1, #128	; 0x80
 80141e6:	48c1      	ldr	r0, [pc, #772]	; (80144ec <readGRAM+0x8a0>)
 80141e8:	f7fd fafb 	bl	80117e2 <PIN_LOW>
 80141ec:	2180      	movs	r1, #128	; 0x80
 80141ee:	48bf      	ldr	r0, [pc, #764]	; (80144ec <readGRAM+0x8a0>)
 80141f0:	f7fd faf7 	bl	80117e2 <PIN_LOW>
 80141f4:	2180      	movs	r1, #128	; 0x80
 80141f6:	48bd      	ldr	r0, [pc, #756]	; (80144ec <readGRAM+0x8a0>)
 80141f8:	f7fd faf3 	bl	80117e2 <PIN_LOW>
 80141fc:	2180      	movs	r1, #128	; 0x80
 80141fe:	48bb      	ldr	r0, [pc, #748]	; (80144ec <readGRAM+0x8a0>)
 8014200:	f7fd faef 	bl	80117e2 <PIN_LOW>
 8014204:	2180      	movs	r1, #128	; 0x80
 8014206:	48b9      	ldr	r0, [pc, #740]	; (80144ec <readGRAM+0x8a0>)
 8014208:	f7fd faeb 	bl	80117e2 <PIN_LOW>
 801420c:	2180      	movs	r1, #128	; 0x80
 801420e:	48b7      	ldr	r0, [pc, #732]	; (80144ec <readGRAM+0x8a0>)
 8014210:	f7fd fae7 	bl	80117e2 <PIN_LOW>
 8014214:	2180      	movs	r1, #128	; 0x80
 8014216:	48b5      	ldr	r0, [pc, #724]	; (80144ec <readGRAM+0x8a0>)
 8014218:	f7fd fae3 	bl	80117e2 <PIN_LOW>
 801421c:	2180      	movs	r1, #128	; 0x80
 801421e:	48b3      	ldr	r0, [pc, #716]	; (80144ec <readGRAM+0x8a0>)
 8014220:	f7fd fadf 	bl	80117e2 <PIN_LOW>
 8014224:	2180      	movs	r1, #128	; 0x80
 8014226:	48b1      	ldr	r0, [pc, #708]	; (80144ec <readGRAM+0x8a0>)
 8014228:	f7fd fadb 	bl	80117e2 <PIN_LOW>
 801422c:	2180      	movs	r1, #128	; 0x80
 801422e:	48af      	ldr	r0, [pc, #700]	; (80144ec <readGRAM+0x8a0>)
 8014230:	f7fd fad7 	bl	80117e2 <PIN_LOW>
 8014234:	2180      	movs	r1, #128	; 0x80
 8014236:	48ad      	ldr	r0, [pc, #692]	; (80144ec <readGRAM+0x8a0>)
 8014238:	f7fd fad3 	bl	80117e2 <PIN_LOW>
 801423c:	2180      	movs	r1, #128	; 0x80
 801423e:	48ab      	ldr	r0, [pc, #684]	; (80144ec <readGRAM+0x8a0>)
 8014240:	f7fd facf 	bl	80117e2 <PIN_LOW>
 8014244:	2180      	movs	r1, #128	; 0x80
 8014246:	48a9      	ldr	r0, [pc, #676]	; (80144ec <readGRAM+0x8a0>)
 8014248:	f7fd facb 	bl	80117e2 <PIN_LOW>
 801424c:	2180      	movs	r1, #128	; 0x80
 801424e:	48a7      	ldr	r0, [pc, #668]	; (80144ec <readGRAM+0x8a0>)
 8014250:	f7fd fac7 	bl	80117e2 <PIN_LOW>
 8014254:	2180      	movs	r1, #128	; 0x80
 8014256:	48a5      	ldr	r0, [pc, #660]	; (80144ec <readGRAM+0x8a0>)
 8014258:	f7fd fac3 	bl	80117e2 <PIN_LOW>
 801425c:	2180      	movs	r1, #128	; 0x80
 801425e:	48a3      	ldr	r0, [pc, #652]	; (80144ec <readGRAM+0x8a0>)
 8014260:	f7fd fabf 	bl	80117e2 <PIN_LOW>
 8014264:	2180      	movs	r1, #128	; 0x80
 8014266:	48a1      	ldr	r0, [pc, #644]	; (80144ec <readGRAM+0x8a0>)
 8014268:	f7fd fabb 	bl	80117e2 <PIN_LOW>
 801426c:	2180      	movs	r1, #128	; 0x80
 801426e:	489f      	ldr	r0, [pc, #636]	; (80144ec <readGRAM+0x8a0>)
 8014270:	f7fd fab7 	bl	80117e2 <PIN_LOW>
 8014274:	2180      	movs	r1, #128	; 0x80
 8014276:	489d      	ldr	r0, [pc, #628]	; (80144ec <readGRAM+0x8a0>)
 8014278:	f7fd fab3 	bl	80117e2 <PIN_LOW>
 801427c:	2180      	movs	r1, #128	; 0x80
 801427e:	489b      	ldr	r0, [pc, #620]	; (80144ec <readGRAM+0x8a0>)
 8014280:	f7fd faaf 	bl	80117e2 <PIN_LOW>
 8014284:	2180      	movs	r1, #128	; 0x80
 8014286:	4899      	ldr	r0, [pc, #612]	; (80144ec <readGRAM+0x8a0>)
 8014288:	f7fd faab 	bl	80117e2 <PIN_LOW>
 801428c:	2180      	movs	r1, #128	; 0x80
 801428e:	4897      	ldr	r0, [pc, #604]	; (80144ec <readGRAM+0x8a0>)
 8014290:	f7fd faa7 	bl	80117e2 <PIN_LOW>
 8014294:	2180      	movs	r1, #128	; 0x80
 8014296:	4895      	ldr	r0, [pc, #596]	; (80144ec <readGRAM+0x8a0>)
 8014298:	f7fd faa3 	bl	80117e2 <PIN_LOW>
 801429c:	2180      	movs	r1, #128	; 0x80
 801429e:	4893      	ldr	r0, [pc, #588]	; (80144ec <readGRAM+0x8a0>)
 80142a0:	f7fd fa9f 	bl	80117e2 <PIN_LOW>
 80142a4:	2180      	movs	r1, #128	; 0x80
 80142a6:	4891      	ldr	r0, [pc, #580]	; (80144ec <readGRAM+0x8a0>)
 80142a8:	f7fd fa9b 	bl	80117e2 <PIN_LOW>
 80142ac:	2180      	movs	r1, #128	; 0x80
 80142ae:	488f      	ldr	r0, [pc, #572]	; (80144ec <readGRAM+0x8a0>)
 80142b0:	f7fd fa97 	bl	80117e2 <PIN_LOW>
 80142b4:	2180      	movs	r1, #128	; 0x80
 80142b6:	488d      	ldr	r0, [pc, #564]	; (80144ec <readGRAM+0x8a0>)
 80142b8:	f7fd fa93 	bl	80117e2 <PIN_LOW>
 80142bc:	2180      	movs	r1, #128	; 0x80
 80142be:	488b      	ldr	r0, [pc, #556]	; (80144ec <readGRAM+0x8a0>)
 80142c0:	f7fd fa8f 	bl	80117e2 <PIN_LOW>
 80142c4:	2180      	movs	r1, #128	; 0x80
 80142c6:	4889      	ldr	r0, [pc, #548]	; (80144ec <readGRAM+0x8a0>)
 80142c8:	f7fd fa8b 	bl	80117e2 <PIN_LOW>
 80142cc:	2180      	movs	r1, #128	; 0x80
 80142ce:	4887      	ldr	r0, [pc, #540]	; (80144ec <readGRAM+0x8a0>)
 80142d0:	f7fd fa87 	bl	80117e2 <PIN_LOW>
 80142d4:	2180      	movs	r1, #128	; 0x80
 80142d6:	4885      	ldr	r0, [pc, #532]	; (80144ec <readGRAM+0x8a0>)
 80142d8:	f7fd fa83 	bl	80117e2 <PIN_LOW>
 80142dc:	2180      	movs	r1, #128	; 0x80
 80142de:	4883      	ldr	r0, [pc, #524]	; (80144ec <readGRAM+0x8a0>)
 80142e0:	f7fd fa7f 	bl	80117e2 <PIN_LOW>
 80142e4:	2180      	movs	r1, #128	; 0x80
 80142e6:	4881      	ldr	r0, [pc, #516]	; (80144ec <readGRAM+0x8a0>)
 80142e8:	f7fd fa7b 	bl	80117e2 <PIN_LOW>
 80142ec:	2180      	movs	r1, #128	; 0x80
 80142ee:	487f      	ldr	r0, [pc, #508]	; (80144ec <readGRAM+0x8a0>)
 80142f0:	f7fd fa77 	bl	80117e2 <PIN_LOW>
 80142f4:	2180      	movs	r1, #128	; 0x80
 80142f6:	487d      	ldr	r0, [pc, #500]	; (80144ec <readGRAM+0x8a0>)
 80142f8:	f7fd fa73 	bl	80117e2 <PIN_LOW>
 80142fc:	2180      	movs	r1, #128	; 0x80
 80142fe:	487b      	ldr	r0, [pc, #492]	; (80144ec <readGRAM+0x8a0>)
 8014300:	f7fd fa6f 	bl	80117e2 <PIN_LOW>
 8014304:	2180      	movs	r1, #128	; 0x80
 8014306:	4879      	ldr	r0, [pc, #484]	; (80144ec <readGRAM+0x8a0>)
 8014308:	f7fd fa6b 	bl	80117e2 <PIN_LOW>
 801430c:	2180      	movs	r1, #128	; 0x80
 801430e:	4877      	ldr	r0, [pc, #476]	; (80144ec <readGRAM+0x8a0>)
 8014310:	f7fd fa67 	bl	80117e2 <PIN_LOW>
 8014314:	2180      	movs	r1, #128	; 0x80
 8014316:	4875      	ldr	r0, [pc, #468]	; (80144ec <readGRAM+0x8a0>)
 8014318:	f7fd fa63 	bl	80117e2 <PIN_LOW>
 801431c:	2180      	movs	r1, #128	; 0x80
 801431e:	4873      	ldr	r0, [pc, #460]	; (80144ec <readGRAM+0x8a0>)
 8014320:	f7fd fa5f 	bl	80117e2 <PIN_LOW>
 8014324:	2180      	movs	r1, #128	; 0x80
 8014326:	4871      	ldr	r0, [pc, #452]	; (80144ec <readGRAM+0x8a0>)
 8014328:	f7fd fa5b 	bl	80117e2 <PIN_LOW>
 801432c:	2180      	movs	r1, #128	; 0x80
 801432e:	486f      	ldr	r0, [pc, #444]	; (80144ec <readGRAM+0x8a0>)
 8014330:	f7fd fa57 	bl	80117e2 <PIN_LOW>
 8014334:	2180      	movs	r1, #128	; 0x80
 8014336:	486d      	ldr	r0, [pc, #436]	; (80144ec <readGRAM+0x8a0>)
 8014338:	f7fd fa53 	bl	80117e2 <PIN_LOW>
 801433c:	2180      	movs	r1, #128	; 0x80
 801433e:	486b      	ldr	r0, [pc, #428]	; (80144ec <readGRAM+0x8a0>)
 8014340:	f7fd fa4f 	bl	80117e2 <PIN_LOW>
 8014344:	2180      	movs	r1, #128	; 0x80
 8014346:	4869      	ldr	r0, [pc, #420]	; (80144ec <readGRAM+0x8a0>)
 8014348:	f7fd fa4b 	bl	80117e2 <PIN_LOW>
 801434c:	2180      	movs	r1, #128	; 0x80
 801434e:	4867      	ldr	r0, [pc, #412]	; (80144ec <readGRAM+0x8a0>)
 8014350:	f7fd fa47 	bl	80117e2 <PIN_LOW>
 8014354:	2180      	movs	r1, #128	; 0x80
 8014356:	4865      	ldr	r0, [pc, #404]	; (80144ec <readGRAM+0x8a0>)
 8014358:	f7fd fa43 	bl	80117e2 <PIN_LOW>
 801435c:	2180      	movs	r1, #128	; 0x80
 801435e:	4863      	ldr	r0, [pc, #396]	; (80144ec <readGRAM+0x8a0>)
 8014360:	f7fd fa3f 	bl	80117e2 <PIN_LOW>
 8014364:	2180      	movs	r1, #128	; 0x80
 8014366:	4861      	ldr	r0, [pc, #388]	; (80144ec <readGRAM+0x8a0>)
 8014368:	f7fd fa3b 	bl	80117e2 <PIN_LOW>
 801436c:	2180      	movs	r1, #128	; 0x80
 801436e:	485f      	ldr	r0, [pc, #380]	; (80144ec <readGRAM+0x8a0>)
 8014370:	f7fd fa37 	bl	80117e2 <PIN_LOW>
 8014374:	2180      	movs	r1, #128	; 0x80
 8014376:	485d      	ldr	r0, [pc, #372]	; (80144ec <readGRAM+0x8a0>)
 8014378:	f7fd fa33 	bl	80117e2 <PIN_LOW>
 801437c:	4b5c      	ldr	r3, [pc, #368]	; (80144f0 <readGRAM+0x8a4>)
 801437e:	691b      	ldr	r3, [r3, #16]
 8014380:	0b1b      	lsrs	r3, r3, #12
 8014382:	b2db      	uxtb	r3, r3
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	b2da      	uxtb	r2, r3
 801438a:	4b58      	ldr	r3, [pc, #352]	; (80144ec <readGRAM+0x8a0>)
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	0b9b      	lsrs	r3, r3, #14
 8014390:	b2db      	uxtb	r3, r3
 8014392:	f003 0302 	and.w	r3, r3, #2
 8014396:	b2db      	uxtb	r3, r3
 8014398:	4313      	orrs	r3, r2
 801439a:	b2da      	uxtb	r2, r3
 801439c:	4b54      	ldr	r3, [pc, #336]	; (80144f0 <readGRAM+0x8a4>)
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	0b5b      	lsrs	r3, r3, #13
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	f003 0304 	and.w	r3, r3, #4
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	4313      	orrs	r3, r2
 80143ac:	b2da      	uxtb	r2, r3
 80143ae:	4b51      	ldr	r3, [pc, #324]	; (80144f4 <readGRAM+0x8a8>)
 80143b0:	691b      	ldr	r3, [r3, #16]
 80143b2:	0a9b      	lsrs	r3, r3, #10
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	f003 0308 	and.w	r3, r3, #8
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	4313      	orrs	r3, r2
 80143be:	b2da      	uxtb	r2, r3
 80143c0:	4b4b      	ldr	r3, [pc, #300]	; (80144f0 <readGRAM+0x8a4>)
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	0a9b      	lsrs	r3, r3, #10
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	f003 0310 	and.w	r3, r3, #16
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	4313      	orrs	r3, r2
 80143d0:	b2da      	uxtb	r2, r3
 80143d2:	4b48      	ldr	r3, [pc, #288]	; (80144f4 <readGRAM+0x8a8>)
 80143d4:	691b      	ldr	r3, [r3, #16]
 80143d6:	099b      	lsrs	r3, r3, #6
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	f003 0320 	and.w	r3, r3, #32
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	4313      	orrs	r3, r2
 80143e2:	b2da      	uxtb	r2, r3
 80143e4:	4b43      	ldr	r3, [pc, #268]	; (80144f4 <readGRAM+0x8a8>)
 80143e6:	691b      	ldr	r3, [r3, #16]
 80143e8:	08db      	lsrs	r3, r3, #3
 80143ea:	b2db      	uxtb	r3, r3
 80143ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	4313      	orrs	r3, r2
 80143f4:	b2da      	uxtb	r2, r3
 80143f6:	4b3e      	ldr	r3, [pc, #248]	; (80144f0 <readGRAM+0x8a4>)
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	099b      	lsrs	r3, r3, #6
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014402:	b2db      	uxtb	r3, r3
 8014404:	4313      	orrs	r3, r2
 8014406:	76fb      	strb	r3, [r7, #27]
 8014408:	2180      	movs	r1, #128	; 0x80
 801440a:	4838      	ldr	r0, [pc, #224]	; (80144ec <readGRAM+0x8a0>)
 801440c:	f7fd f9f9 	bl	8011802 <PIN_HIGH>
 8014410:	2180      	movs	r1, #128	; 0x80
 8014412:	4836      	ldr	r0, [pc, #216]	; (80144ec <readGRAM+0x8a0>)
 8014414:	f7fd f9f5 	bl	8011802 <PIN_HIGH>
 8014418:	2180      	movs	r1, #128	; 0x80
 801441a:	4834      	ldr	r0, [pc, #208]	; (80144ec <readGRAM+0x8a0>)
 801441c:	f7fd f9f1 	bl	8011802 <PIN_HIGH>
 8014420:	2180      	movs	r1, #128	; 0x80
 8014422:	4832      	ldr	r0, [pc, #200]	; (80144ec <readGRAM+0x8a0>)
 8014424:	f7fd f9dd 	bl	80117e2 <PIN_LOW>
 8014428:	2180      	movs	r1, #128	; 0x80
 801442a:	4830      	ldr	r0, [pc, #192]	; (80144ec <readGRAM+0x8a0>)
 801442c:	f7fd f9d9 	bl	80117e2 <PIN_LOW>
 8014430:	2180      	movs	r1, #128	; 0x80
 8014432:	482e      	ldr	r0, [pc, #184]	; (80144ec <readGRAM+0x8a0>)
 8014434:	f7fd f9d5 	bl	80117e2 <PIN_LOW>
 8014438:	2180      	movs	r1, #128	; 0x80
 801443a:	482c      	ldr	r0, [pc, #176]	; (80144ec <readGRAM+0x8a0>)
 801443c:	f7fd f9d1 	bl	80117e2 <PIN_LOW>
 8014440:	2180      	movs	r1, #128	; 0x80
 8014442:	482a      	ldr	r0, [pc, #168]	; (80144ec <readGRAM+0x8a0>)
 8014444:	f7fd f9cd 	bl	80117e2 <PIN_LOW>
 8014448:	2180      	movs	r1, #128	; 0x80
 801444a:	4828      	ldr	r0, [pc, #160]	; (80144ec <readGRAM+0x8a0>)
 801444c:	f7fd f9c9 	bl	80117e2 <PIN_LOW>
 8014450:	2180      	movs	r1, #128	; 0x80
 8014452:	4826      	ldr	r0, [pc, #152]	; (80144ec <readGRAM+0x8a0>)
 8014454:	f7fd f9c5 	bl	80117e2 <PIN_LOW>
 8014458:	2180      	movs	r1, #128	; 0x80
 801445a:	4824      	ldr	r0, [pc, #144]	; (80144ec <readGRAM+0x8a0>)
 801445c:	f7fd f9c1 	bl	80117e2 <PIN_LOW>
 8014460:	2180      	movs	r1, #128	; 0x80
 8014462:	4822      	ldr	r0, [pc, #136]	; (80144ec <readGRAM+0x8a0>)
 8014464:	f7fd f9bd 	bl	80117e2 <PIN_LOW>
 8014468:	2180      	movs	r1, #128	; 0x80
 801446a:	4820      	ldr	r0, [pc, #128]	; (80144ec <readGRAM+0x8a0>)
 801446c:	f7fd f9b9 	bl	80117e2 <PIN_LOW>
 8014470:	2180      	movs	r1, #128	; 0x80
 8014472:	481e      	ldr	r0, [pc, #120]	; (80144ec <readGRAM+0x8a0>)
 8014474:	f7fd f9b5 	bl	80117e2 <PIN_LOW>
 8014478:	2180      	movs	r1, #128	; 0x80
 801447a:	481c      	ldr	r0, [pc, #112]	; (80144ec <readGRAM+0x8a0>)
 801447c:	f7fd f9b1 	bl	80117e2 <PIN_LOW>
 8014480:	2180      	movs	r1, #128	; 0x80
 8014482:	481a      	ldr	r0, [pc, #104]	; (80144ec <readGRAM+0x8a0>)
 8014484:	f7fd f9ad 	bl	80117e2 <PIN_LOW>
 8014488:	2180      	movs	r1, #128	; 0x80
 801448a:	4818      	ldr	r0, [pc, #96]	; (80144ec <readGRAM+0x8a0>)
 801448c:	f7fd f9a9 	bl	80117e2 <PIN_LOW>
 8014490:	2180      	movs	r1, #128	; 0x80
 8014492:	4816      	ldr	r0, [pc, #88]	; (80144ec <readGRAM+0x8a0>)
 8014494:	f7fd f9a5 	bl	80117e2 <PIN_LOW>
 8014498:	2180      	movs	r1, #128	; 0x80
 801449a:	4814      	ldr	r0, [pc, #80]	; (80144ec <readGRAM+0x8a0>)
 801449c:	f7fd f9a1 	bl	80117e2 <PIN_LOW>
 80144a0:	2180      	movs	r1, #128	; 0x80
 80144a2:	4812      	ldr	r0, [pc, #72]	; (80144ec <readGRAM+0x8a0>)
 80144a4:	f7fd f99d 	bl	80117e2 <PIN_LOW>
 80144a8:	2180      	movs	r1, #128	; 0x80
 80144aa:	4810      	ldr	r0, [pc, #64]	; (80144ec <readGRAM+0x8a0>)
 80144ac:	f7fd f999 	bl	80117e2 <PIN_LOW>
 80144b0:	2180      	movs	r1, #128	; 0x80
 80144b2:	480e      	ldr	r0, [pc, #56]	; (80144ec <readGRAM+0x8a0>)
 80144b4:	f7fd f995 	bl	80117e2 <PIN_LOW>
 80144b8:	2180      	movs	r1, #128	; 0x80
 80144ba:	480c      	ldr	r0, [pc, #48]	; (80144ec <readGRAM+0x8a0>)
 80144bc:	f7fd f991 	bl	80117e2 <PIN_LOW>
 80144c0:	2180      	movs	r1, #128	; 0x80
 80144c2:	480a      	ldr	r0, [pc, #40]	; (80144ec <readGRAM+0x8a0>)
 80144c4:	f7fd f98d 	bl	80117e2 <PIN_LOW>
 80144c8:	2180      	movs	r1, #128	; 0x80
 80144ca:	4808      	ldr	r0, [pc, #32]	; (80144ec <readGRAM+0x8a0>)
 80144cc:	f7fd f989 	bl	80117e2 <PIN_LOW>
 80144d0:	2180      	movs	r1, #128	; 0x80
 80144d2:	4806      	ldr	r0, [pc, #24]	; (80144ec <readGRAM+0x8a0>)
 80144d4:	f7fd f985 	bl	80117e2 <PIN_LOW>
 80144d8:	2180      	movs	r1, #128	; 0x80
 80144da:	4804      	ldr	r0, [pc, #16]	; (80144ec <readGRAM+0x8a0>)
 80144dc:	f7fd f981 	bl	80117e2 <PIN_LOW>
 80144e0:	2180      	movs	r1, #128	; 0x80
 80144e2:	4802      	ldr	r0, [pc, #8]	; (80144ec <readGRAM+0x8a0>)
 80144e4:	f7fd f97d 	bl	80117e2 <PIN_LOW>
 80144e8:	2180      	movs	r1, #128	; 0x80
 80144ea:	e005      	b.n	80144f8 <readGRAM+0x8ac>
 80144ec:	40020c00 	.word	0x40020c00
 80144f0:	40021400 	.word	0x40021400
 80144f4:	40021000 	.word	0x40021000
 80144f8:	48c0      	ldr	r0, [pc, #768]	; (80147fc <readGRAM+0xbb0>)
 80144fa:	f7fd f972 	bl	80117e2 <PIN_LOW>
 80144fe:	2180      	movs	r1, #128	; 0x80
 8014500:	48be      	ldr	r0, [pc, #760]	; (80147fc <readGRAM+0xbb0>)
 8014502:	f7fd f96e 	bl	80117e2 <PIN_LOW>
 8014506:	2180      	movs	r1, #128	; 0x80
 8014508:	48bc      	ldr	r0, [pc, #752]	; (80147fc <readGRAM+0xbb0>)
 801450a:	f7fd f96a 	bl	80117e2 <PIN_LOW>
 801450e:	2180      	movs	r1, #128	; 0x80
 8014510:	48ba      	ldr	r0, [pc, #744]	; (80147fc <readGRAM+0xbb0>)
 8014512:	f7fd f966 	bl	80117e2 <PIN_LOW>
 8014516:	2180      	movs	r1, #128	; 0x80
 8014518:	48b8      	ldr	r0, [pc, #736]	; (80147fc <readGRAM+0xbb0>)
 801451a:	f7fd f962 	bl	80117e2 <PIN_LOW>
 801451e:	2180      	movs	r1, #128	; 0x80
 8014520:	48b6      	ldr	r0, [pc, #728]	; (80147fc <readGRAM+0xbb0>)
 8014522:	f7fd f95e 	bl	80117e2 <PIN_LOW>
 8014526:	2180      	movs	r1, #128	; 0x80
 8014528:	48b4      	ldr	r0, [pc, #720]	; (80147fc <readGRAM+0xbb0>)
 801452a:	f7fd f95a 	bl	80117e2 <PIN_LOW>
 801452e:	2180      	movs	r1, #128	; 0x80
 8014530:	48b2      	ldr	r0, [pc, #712]	; (80147fc <readGRAM+0xbb0>)
 8014532:	f7fd f956 	bl	80117e2 <PIN_LOW>
 8014536:	2180      	movs	r1, #128	; 0x80
 8014538:	48b0      	ldr	r0, [pc, #704]	; (80147fc <readGRAM+0xbb0>)
 801453a:	f7fd f952 	bl	80117e2 <PIN_LOW>
 801453e:	2180      	movs	r1, #128	; 0x80
 8014540:	48ae      	ldr	r0, [pc, #696]	; (80147fc <readGRAM+0xbb0>)
 8014542:	f7fd f94e 	bl	80117e2 <PIN_LOW>
 8014546:	2180      	movs	r1, #128	; 0x80
 8014548:	48ac      	ldr	r0, [pc, #688]	; (80147fc <readGRAM+0xbb0>)
 801454a:	f7fd f94a 	bl	80117e2 <PIN_LOW>
 801454e:	2180      	movs	r1, #128	; 0x80
 8014550:	48aa      	ldr	r0, [pc, #680]	; (80147fc <readGRAM+0xbb0>)
 8014552:	f7fd f946 	bl	80117e2 <PIN_LOW>
 8014556:	2180      	movs	r1, #128	; 0x80
 8014558:	48a8      	ldr	r0, [pc, #672]	; (80147fc <readGRAM+0xbb0>)
 801455a:	f7fd f942 	bl	80117e2 <PIN_LOW>
 801455e:	2180      	movs	r1, #128	; 0x80
 8014560:	48a6      	ldr	r0, [pc, #664]	; (80147fc <readGRAM+0xbb0>)
 8014562:	f7fd f93e 	bl	80117e2 <PIN_LOW>
 8014566:	2180      	movs	r1, #128	; 0x80
 8014568:	48a4      	ldr	r0, [pc, #656]	; (80147fc <readGRAM+0xbb0>)
 801456a:	f7fd f93a 	bl	80117e2 <PIN_LOW>
 801456e:	2180      	movs	r1, #128	; 0x80
 8014570:	48a2      	ldr	r0, [pc, #648]	; (80147fc <readGRAM+0xbb0>)
 8014572:	f7fd f936 	bl	80117e2 <PIN_LOW>
 8014576:	2180      	movs	r1, #128	; 0x80
 8014578:	48a0      	ldr	r0, [pc, #640]	; (80147fc <readGRAM+0xbb0>)
 801457a:	f7fd f932 	bl	80117e2 <PIN_LOW>
 801457e:	2180      	movs	r1, #128	; 0x80
 8014580:	489e      	ldr	r0, [pc, #632]	; (80147fc <readGRAM+0xbb0>)
 8014582:	f7fd f92e 	bl	80117e2 <PIN_LOW>
 8014586:	2180      	movs	r1, #128	; 0x80
 8014588:	489c      	ldr	r0, [pc, #624]	; (80147fc <readGRAM+0xbb0>)
 801458a:	f7fd f92a 	bl	80117e2 <PIN_LOW>
 801458e:	2180      	movs	r1, #128	; 0x80
 8014590:	489a      	ldr	r0, [pc, #616]	; (80147fc <readGRAM+0xbb0>)
 8014592:	f7fd f926 	bl	80117e2 <PIN_LOW>
 8014596:	2180      	movs	r1, #128	; 0x80
 8014598:	4898      	ldr	r0, [pc, #608]	; (80147fc <readGRAM+0xbb0>)
 801459a:	f7fd f922 	bl	80117e2 <PIN_LOW>
 801459e:	2180      	movs	r1, #128	; 0x80
 80145a0:	4896      	ldr	r0, [pc, #600]	; (80147fc <readGRAM+0xbb0>)
 80145a2:	f7fd f91e 	bl	80117e2 <PIN_LOW>
 80145a6:	2180      	movs	r1, #128	; 0x80
 80145a8:	4894      	ldr	r0, [pc, #592]	; (80147fc <readGRAM+0xbb0>)
 80145aa:	f7fd f91a 	bl	80117e2 <PIN_LOW>
 80145ae:	2180      	movs	r1, #128	; 0x80
 80145b0:	4892      	ldr	r0, [pc, #584]	; (80147fc <readGRAM+0xbb0>)
 80145b2:	f7fd f916 	bl	80117e2 <PIN_LOW>
 80145b6:	2180      	movs	r1, #128	; 0x80
 80145b8:	4890      	ldr	r0, [pc, #576]	; (80147fc <readGRAM+0xbb0>)
 80145ba:	f7fd f912 	bl	80117e2 <PIN_LOW>
 80145be:	2180      	movs	r1, #128	; 0x80
 80145c0:	488e      	ldr	r0, [pc, #568]	; (80147fc <readGRAM+0xbb0>)
 80145c2:	f7fd f90e 	bl	80117e2 <PIN_LOW>
 80145c6:	4b8e      	ldr	r3, [pc, #568]	; (8014800 <readGRAM+0xbb4>)
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	0b1b      	lsrs	r3, r3, #12
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	f003 0301 	and.w	r3, r3, #1
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	4b89      	ldr	r3, [pc, #548]	; (80147fc <readGRAM+0xbb0>)
 80145d6:	691b      	ldr	r3, [r3, #16]
 80145d8:	0b9b      	lsrs	r3, r3, #14
 80145da:	b29b      	uxth	r3, r3
 80145dc:	f003 0302 	and.w	r3, r3, #2
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4313      	orrs	r3, r2
 80145e4:	b29a      	uxth	r2, r3
 80145e6:	4b86      	ldr	r3, [pc, #536]	; (8014800 <readGRAM+0xbb4>)
 80145e8:	691b      	ldr	r3, [r3, #16]
 80145ea:	0b5b      	lsrs	r3, r3, #13
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	f003 0304 	and.w	r3, r3, #4
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	4313      	orrs	r3, r2
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	4b82      	ldr	r3, [pc, #520]	; (8014804 <readGRAM+0xbb8>)
 80145fa:	691b      	ldr	r3, [r3, #16]
 80145fc:	0a9b      	lsrs	r3, r3, #10
 80145fe:	b29b      	uxth	r3, r3
 8014600:	f003 0308 	and.w	r3, r3, #8
 8014604:	b29b      	uxth	r3, r3
 8014606:	4313      	orrs	r3, r2
 8014608:	b29a      	uxth	r2, r3
 801460a:	4b7d      	ldr	r3, [pc, #500]	; (8014800 <readGRAM+0xbb4>)
 801460c:	691b      	ldr	r3, [r3, #16]
 801460e:	0a9b      	lsrs	r3, r3, #10
 8014610:	b29b      	uxth	r3, r3
 8014612:	f003 0310 	and.w	r3, r3, #16
 8014616:	b29b      	uxth	r3, r3
 8014618:	4313      	orrs	r3, r2
 801461a:	b29a      	uxth	r2, r3
 801461c:	4b79      	ldr	r3, [pc, #484]	; (8014804 <readGRAM+0xbb8>)
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	099b      	lsrs	r3, r3, #6
 8014622:	b29b      	uxth	r3, r3
 8014624:	f003 0320 	and.w	r3, r3, #32
 8014628:	b29b      	uxth	r3, r3
 801462a:	4313      	orrs	r3, r2
 801462c:	b29a      	uxth	r2, r3
 801462e:	4b75      	ldr	r3, [pc, #468]	; (8014804 <readGRAM+0xbb8>)
 8014630:	691b      	ldr	r3, [r3, #16]
 8014632:	08db      	lsrs	r3, r3, #3
 8014634:	b29b      	uxth	r3, r3
 8014636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801463a:	b29b      	uxth	r3, r3
 801463c:	4313      	orrs	r3, r2
 801463e:	b29a      	uxth	r2, r3
 8014640:	4b6f      	ldr	r3, [pc, #444]	; (8014800 <readGRAM+0xbb4>)
 8014642:	691b      	ldr	r3, [r3, #16]
 8014644:	099b      	lsrs	r3, r3, #6
 8014646:	b29b      	uxth	r3, r3
 8014648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801464c:	b29b      	uxth	r3, r3
 801464e:	4313      	orrs	r3, r2
 8014650:	833b      	strh	r3, [r7, #24]
 8014652:	2180      	movs	r1, #128	; 0x80
 8014654:	4869      	ldr	r0, [pc, #420]	; (80147fc <readGRAM+0xbb0>)
 8014656:	f7fd f8d4 	bl	8011802 <PIN_HIGH>
 801465a:	2180      	movs	r1, #128	; 0x80
 801465c:	4867      	ldr	r0, [pc, #412]	; (80147fc <readGRAM+0xbb0>)
 801465e:	f7fd f8d0 	bl	8011802 <PIN_HIGH>
 8014662:	7efb      	ldrb	r3, [r7, #27]
 8014664:	021b      	lsls	r3, r3, #8
 8014666:	b21a      	sxth	r2, r3
 8014668:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801466c:	4313      	orrs	r3, r2
 801466e:	b21b      	sxth	r3, r3
 8014670:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8014672:	4b65      	ldr	r3, [pc, #404]	; (8014808 <readGRAM+0xbbc>)
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	f241 5211 	movw	r2, #5393	; 0x1511
 801467a:	4293      	cmp	r3, r2
 801467c:	f040 8751 	bne.w	8015522 <readGRAM+0x18d6>
 8014680:	2180      	movs	r1, #128	; 0x80
 8014682:	485e      	ldr	r0, [pc, #376]	; (80147fc <readGRAM+0xbb0>)
 8014684:	f7fd f8bd 	bl	8011802 <PIN_HIGH>
 8014688:	2180      	movs	r1, #128	; 0x80
 801468a:	485c      	ldr	r0, [pc, #368]	; (80147fc <readGRAM+0xbb0>)
 801468c:	f7fd f8a9 	bl	80117e2 <PIN_LOW>
 8014690:	2180      	movs	r1, #128	; 0x80
 8014692:	485a      	ldr	r0, [pc, #360]	; (80147fc <readGRAM+0xbb0>)
 8014694:	f7fd f8a5 	bl	80117e2 <PIN_LOW>
 8014698:	2180      	movs	r1, #128	; 0x80
 801469a:	4858      	ldr	r0, [pc, #352]	; (80147fc <readGRAM+0xbb0>)
 801469c:	f7fd f8a1 	bl	80117e2 <PIN_LOW>
 80146a0:	2180      	movs	r1, #128	; 0x80
 80146a2:	4856      	ldr	r0, [pc, #344]	; (80147fc <readGRAM+0xbb0>)
 80146a4:	f7fd f89d 	bl	80117e2 <PIN_LOW>
 80146a8:	2180      	movs	r1, #128	; 0x80
 80146aa:	4854      	ldr	r0, [pc, #336]	; (80147fc <readGRAM+0xbb0>)
 80146ac:	f7fd f899 	bl	80117e2 <PIN_LOW>
 80146b0:	2180      	movs	r1, #128	; 0x80
 80146b2:	4852      	ldr	r0, [pc, #328]	; (80147fc <readGRAM+0xbb0>)
 80146b4:	f7fd f895 	bl	80117e2 <PIN_LOW>
 80146b8:	2180      	movs	r1, #128	; 0x80
 80146ba:	4850      	ldr	r0, [pc, #320]	; (80147fc <readGRAM+0xbb0>)
 80146bc:	f7fd f891 	bl	80117e2 <PIN_LOW>
 80146c0:	2180      	movs	r1, #128	; 0x80
 80146c2:	484e      	ldr	r0, [pc, #312]	; (80147fc <readGRAM+0xbb0>)
 80146c4:	f7fd f88d 	bl	80117e2 <PIN_LOW>
 80146c8:	2180      	movs	r1, #128	; 0x80
 80146ca:	484c      	ldr	r0, [pc, #304]	; (80147fc <readGRAM+0xbb0>)
 80146cc:	f7fd f889 	bl	80117e2 <PIN_LOW>
 80146d0:	2180      	movs	r1, #128	; 0x80
 80146d2:	484a      	ldr	r0, [pc, #296]	; (80147fc <readGRAM+0xbb0>)
 80146d4:	f7fd f885 	bl	80117e2 <PIN_LOW>
 80146d8:	2180      	movs	r1, #128	; 0x80
 80146da:	4848      	ldr	r0, [pc, #288]	; (80147fc <readGRAM+0xbb0>)
 80146dc:	f7fd f881 	bl	80117e2 <PIN_LOW>
 80146e0:	2180      	movs	r1, #128	; 0x80
 80146e2:	4846      	ldr	r0, [pc, #280]	; (80147fc <readGRAM+0xbb0>)
 80146e4:	f7fd f87d 	bl	80117e2 <PIN_LOW>
 80146e8:	2180      	movs	r1, #128	; 0x80
 80146ea:	4844      	ldr	r0, [pc, #272]	; (80147fc <readGRAM+0xbb0>)
 80146ec:	f7fd f879 	bl	80117e2 <PIN_LOW>
 80146f0:	2180      	movs	r1, #128	; 0x80
 80146f2:	4842      	ldr	r0, [pc, #264]	; (80147fc <readGRAM+0xbb0>)
 80146f4:	f7fd f875 	bl	80117e2 <PIN_LOW>
 80146f8:	2180      	movs	r1, #128	; 0x80
 80146fa:	4840      	ldr	r0, [pc, #256]	; (80147fc <readGRAM+0xbb0>)
 80146fc:	f7fd f871 	bl	80117e2 <PIN_LOW>
 8014700:	2180      	movs	r1, #128	; 0x80
 8014702:	483e      	ldr	r0, [pc, #248]	; (80147fc <readGRAM+0xbb0>)
 8014704:	f7fd f86d 	bl	80117e2 <PIN_LOW>
 8014708:	2180      	movs	r1, #128	; 0x80
 801470a:	483c      	ldr	r0, [pc, #240]	; (80147fc <readGRAM+0xbb0>)
 801470c:	f7fd f869 	bl	80117e2 <PIN_LOW>
 8014710:	2180      	movs	r1, #128	; 0x80
 8014712:	483a      	ldr	r0, [pc, #232]	; (80147fc <readGRAM+0xbb0>)
 8014714:	f7fd f865 	bl	80117e2 <PIN_LOW>
 8014718:	2180      	movs	r1, #128	; 0x80
 801471a:	4838      	ldr	r0, [pc, #224]	; (80147fc <readGRAM+0xbb0>)
 801471c:	f7fd f861 	bl	80117e2 <PIN_LOW>
 8014720:	2180      	movs	r1, #128	; 0x80
 8014722:	4836      	ldr	r0, [pc, #216]	; (80147fc <readGRAM+0xbb0>)
 8014724:	f7fd f85d 	bl	80117e2 <PIN_LOW>
 8014728:	2180      	movs	r1, #128	; 0x80
 801472a:	4834      	ldr	r0, [pc, #208]	; (80147fc <readGRAM+0xbb0>)
 801472c:	f7fd f859 	bl	80117e2 <PIN_LOW>
 8014730:	2180      	movs	r1, #128	; 0x80
 8014732:	4832      	ldr	r0, [pc, #200]	; (80147fc <readGRAM+0xbb0>)
 8014734:	f7fd f855 	bl	80117e2 <PIN_LOW>
 8014738:	2180      	movs	r1, #128	; 0x80
 801473a:	4830      	ldr	r0, [pc, #192]	; (80147fc <readGRAM+0xbb0>)
 801473c:	f7fd f851 	bl	80117e2 <PIN_LOW>
 8014740:	2180      	movs	r1, #128	; 0x80
 8014742:	482e      	ldr	r0, [pc, #184]	; (80147fc <readGRAM+0xbb0>)
 8014744:	f7fd f84d 	bl	80117e2 <PIN_LOW>
 8014748:	2180      	movs	r1, #128	; 0x80
 801474a:	482c      	ldr	r0, [pc, #176]	; (80147fc <readGRAM+0xbb0>)
 801474c:	f7fd f849 	bl	80117e2 <PIN_LOW>
 8014750:	2180      	movs	r1, #128	; 0x80
 8014752:	482a      	ldr	r0, [pc, #168]	; (80147fc <readGRAM+0xbb0>)
 8014754:	f7fd f845 	bl	80117e2 <PIN_LOW>
 8014758:	2180      	movs	r1, #128	; 0x80
 801475a:	4828      	ldr	r0, [pc, #160]	; (80147fc <readGRAM+0xbb0>)
 801475c:	f7fd f841 	bl	80117e2 <PIN_LOW>
 8014760:	2180      	movs	r1, #128	; 0x80
 8014762:	4826      	ldr	r0, [pc, #152]	; (80147fc <readGRAM+0xbb0>)
 8014764:	f7fd f83d 	bl	80117e2 <PIN_LOW>
 8014768:	2180      	movs	r1, #128	; 0x80
 801476a:	4824      	ldr	r0, [pc, #144]	; (80147fc <readGRAM+0xbb0>)
 801476c:	f7fd f839 	bl	80117e2 <PIN_LOW>
 8014770:	2180      	movs	r1, #128	; 0x80
 8014772:	4822      	ldr	r0, [pc, #136]	; (80147fc <readGRAM+0xbb0>)
 8014774:	f7fd f835 	bl	80117e2 <PIN_LOW>
 8014778:	2180      	movs	r1, #128	; 0x80
 801477a:	4820      	ldr	r0, [pc, #128]	; (80147fc <readGRAM+0xbb0>)
 801477c:	f7fd f831 	bl	80117e2 <PIN_LOW>
 8014780:	2180      	movs	r1, #128	; 0x80
 8014782:	481e      	ldr	r0, [pc, #120]	; (80147fc <readGRAM+0xbb0>)
 8014784:	f7fd f82d 	bl	80117e2 <PIN_LOW>
 8014788:	2180      	movs	r1, #128	; 0x80
 801478a:	481c      	ldr	r0, [pc, #112]	; (80147fc <readGRAM+0xbb0>)
 801478c:	f7fd f829 	bl	80117e2 <PIN_LOW>
 8014790:	2180      	movs	r1, #128	; 0x80
 8014792:	481a      	ldr	r0, [pc, #104]	; (80147fc <readGRAM+0xbb0>)
 8014794:	f7fd f825 	bl	80117e2 <PIN_LOW>
 8014798:	2180      	movs	r1, #128	; 0x80
 801479a:	4818      	ldr	r0, [pc, #96]	; (80147fc <readGRAM+0xbb0>)
 801479c:	f7fd f821 	bl	80117e2 <PIN_LOW>
 80147a0:	2180      	movs	r1, #128	; 0x80
 80147a2:	4816      	ldr	r0, [pc, #88]	; (80147fc <readGRAM+0xbb0>)
 80147a4:	f7fd f81d 	bl	80117e2 <PIN_LOW>
 80147a8:	2180      	movs	r1, #128	; 0x80
 80147aa:	4814      	ldr	r0, [pc, #80]	; (80147fc <readGRAM+0xbb0>)
 80147ac:	f7fd f819 	bl	80117e2 <PIN_LOW>
 80147b0:	2180      	movs	r1, #128	; 0x80
 80147b2:	4812      	ldr	r0, [pc, #72]	; (80147fc <readGRAM+0xbb0>)
 80147b4:	f7fd f815 	bl	80117e2 <PIN_LOW>
 80147b8:	2180      	movs	r1, #128	; 0x80
 80147ba:	4810      	ldr	r0, [pc, #64]	; (80147fc <readGRAM+0xbb0>)
 80147bc:	f7fd f811 	bl	80117e2 <PIN_LOW>
 80147c0:	2180      	movs	r1, #128	; 0x80
 80147c2:	480e      	ldr	r0, [pc, #56]	; (80147fc <readGRAM+0xbb0>)
 80147c4:	f7fd f80d 	bl	80117e2 <PIN_LOW>
 80147c8:	2180      	movs	r1, #128	; 0x80
 80147ca:	480c      	ldr	r0, [pc, #48]	; (80147fc <readGRAM+0xbb0>)
 80147cc:	f7fd f809 	bl	80117e2 <PIN_LOW>
 80147d0:	2180      	movs	r1, #128	; 0x80
 80147d2:	480a      	ldr	r0, [pc, #40]	; (80147fc <readGRAM+0xbb0>)
 80147d4:	f7fd f805 	bl	80117e2 <PIN_LOW>
 80147d8:	2180      	movs	r1, #128	; 0x80
 80147da:	4808      	ldr	r0, [pc, #32]	; (80147fc <readGRAM+0xbb0>)
 80147dc:	f7fd f801 	bl	80117e2 <PIN_LOW>
 80147e0:	2180      	movs	r1, #128	; 0x80
 80147e2:	4806      	ldr	r0, [pc, #24]	; (80147fc <readGRAM+0xbb0>)
 80147e4:	f7fc fffd 	bl	80117e2 <PIN_LOW>
 80147e8:	2180      	movs	r1, #128	; 0x80
 80147ea:	4804      	ldr	r0, [pc, #16]	; (80147fc <readGRAM+0xbb0>)
 80147ec:	f7fc fff9 	bl	80117e2 <PIN_LOW>
 80147f0:	2180      	movs	r1, #128	; 0x80
 80147f2:	4802      	ldr	r0, [pc, #8]	; (80147fc <readGRAM+0xbb0>)
 80147f4:	f7fc fff5 	bl	80117e2 <PIN_LOW>
 80147f8:	2180      	movs	r1, #128	; 0x80
 80147fa:	e007      	b.n	801480c <readGRAM+0xbc0>
 80147fc:	40020c00 	.word	0x40020c00
 8014800:	40021400 	.word	0x40021400
 8014804:	40021000 	.word	0x40021000
 8014808:	2000699c 	.word	0x2000699c
 801480c:	4831      	ldr	r0, [pc, #196]	; (80148d4 <readGRAM+0xc88>)
 801480e:	f7fc ffe8 	bl	80117e2 <PIN_LOW>
 8014812:	2180      	movs	r1, #128	; 0x80
 8014814:	482f      	ldr	r0, [pc, #188]	; (80148d4 <readGRAM+0xc88>)
 8014816:	f7fc ffe4 	bl	80117e2 <PIN_LOW>
 801481a:	2180      	movs	r1, #128	; 0x80
 801481c:	482d      	ldr	r0, [pc, #180]	; (80148d4 <readGRAM+0xc88>)
 801481e:	f7fc ffe0 	bl	80117e2 <PIN_LOW>
 8014822:	2180      	movs	r1, #128	; 0x80
 8014824:	482b      	ldr	r0, [pc, #172]	; (80148d4 <readGRAM+0xc88>)
 8014826:	f7fc ffdc 	bl	80117e2 <PIN_LOW>
 801482a:	2180      	movs	r1, #128	; 0x80
 801482c:	4829      	ldr	r0, [pc, #164]	; (80148d4 <readGRAM+0xc88>)
 801482e:	f7fc ffd8 	bl	80117e2 <PIN_LOW>
 8014832:	4b29      	ldr	r3, [pc, #164]	; (80148d8 <readGRAM+0xc8c>)
 8014834:	691b      	ldr	r3, [r3, #16]
 8014836:	0b1b      	lsrs	r3, r3, #12
 8014838:	b2db      	uxtb	r3, r3
 801483a:	f003 0301 	and.w	r3, r3, #1
 801483e:	b2da      	uxtb	r2, r3
 8014840:	4b24      	ldr	r3, [pc, #144]	; (80148d4 <readGRAM+0xc88>)
 8014842:	691b      	ldr	r3, [r3, #16]
 8014844:	0b9b      	lsrs	r3, r3, #14
 8014846:	b2db      	uxtb	r3, r3
 8014848:	f003 0302 	and.w	r3, r3, #2
 801484c:	b2db      	uxtb	r3, r3
 801484e:	4313      	orrs	r3, r2
 8014850:	b2da      	uxtb	r2, r3
 8014852:	4b21      	ldr	r3, [pc, #132]	; (80148d8 <readGRAM+0xc8c>)
 8014854:	691b      	ldr	r3, [r3, #16]
 8014856:	0b5b      	lsrs	r3, r3, #13
 8014858:	b2db      	uxtb	r3, r3
 801485a:	f003 0304 	and.w	r3, r3, #4
 801485e:	b2db      	uxtb	r3, r3
 8014860:	4313      	orrs	r3, r2
 8014862:	b2da      	uxtb	r2, r3
 8014864:	4b1d      	ldr	r3, [pc, #116]	; (80148dc <readGRAM+0xc90>)
 8014866:	691b      	ldr	r3, [r3, #16]
 8014868:	0a9b      	lsrs	r3, r3, #10
 801486a:	b2db      	uxtb	r3, r3
 801486c:	f003 0308 	and.w	r3, r3, #8
 8014870:	b2db      	uxtb	r3, r3
 8014872:	4313      	orrs	r3, r2
 8014874:	b2da      	uxtb	r2, r3
 8014876:	4b18      	ldr	r3, [pc, #96]	; (80148d8 <readGRAM+0xc8c>)
 8014878:	691b      	ldr	r3, [r3, #16]
 801487a:	0a9b      	lsrs	r3, r3, #10
 801487c:	b2db      	uxtb	r3, r3
 801487e:	f003 0310 	and.w	r3, r3, #16
 8014882:	b2db      	uxtb	r3, r3
 8014884:	4313      	orrs	r3, r2
 8014886:	b2da      	uxtb	r2, r3
 8014888:	4b14      	ldr	r3, [pc, #80]	; (80148dc <readGRAM+0xc90>)
 801488a:	691b      	ldr	r3, [r3, #16]
 801488c:	099b      	lsrs	r3, r3, #6
 801488e:	b2db      	uxtb	r3, r3
 8014890:	f003 0320 	and.w	r3, r3, #32
 8014894:	b2db      	uxtb	r3, r3
 8014896:	4313      	orrs	r3, r2
 8014898:	b2da      	uxtb	r2, r3
 801489a:	4b10      	ldr	r3, [pc, #64]	; (80148dc <readGRAM+0xc90>)
 801489c:	691b      	ldr	r3, [r3, #16]
 801489e:	08db      	lsrs	r3, r3, #3
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	4313      	orrs	r3, r2
 80148aa:	b2da      	uxtb	r2, r3
 80148ac:	4b0a      	ldr	r3, [pc, #40]	; (80148d8 <readGRAM+0xc8c>)
 80148ae:	691b      	ldr	r3, [r3, #16]
 80148b0:	099b      	lsrs	r3, r3, #6
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	4313      	orrs	r3, r2
 80148bc:	75fb      	strb	r3, [r7, #23]
 80148be:	2180      	movs	r1, #128	; 0x80
 80148c0:	4804      	ldr	r0, [pc, #16]	; (80148d4 <readGRAM+0xc88>)
 80148c2:	f7fc ff9e 	bl	8011802 <PIN_HIGH>
 80148c6:	2180      	movs	r1, #128	; 0x80
 80148c8:	4802      	ldr	r0, [pc, #8]	; (80148d4 <readGRAM+0xc88>)
 80148ca:	f7fc ff9a 	bl	8011802 <PIN_HIGH>
        while (n)
 80148ce:	f000 be28 	b.w	8015522 <readGRAM+0x18d6>
 80148d2:	bf00      	nop
 80148d4:	40020c00 	.word	0x40020c00
 80148d8:	40021400 	.word	0x40021400
 80148dc:	40021000 	.word	0x40021000
        {
            if (_lcd_capable & READ_24BITS)
 80148e0:	4bc3      	ldr	r3, [pc, #780]	; (8014bf0 <readGRAM+0xfa4>)
 80148e2:	881b      	ldrh	r3, [r3, #0]
 80148e4:	f003 0310 	and.w	r3, r3, #16
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 838d 	beq.w	8015008 <readGRAM+0x13bc>
            {
                READ_8(r);
 80148ee:	2180      	movs	r1, #128	; 0x80
 80148f0:	48c0      	ldr	r0, [pc, #768]	; (8014bf4 <readGRAM+0xfa8>)
 80148f2:	f7fc ff86 	bl	8011802 <PIN_HIGH>
 80148f6:	2180      	movs	r1, #128	; 0x80
 80148f8:	48be      	ldr	r0, [pc, #760]	; (8014bf4 <readGRAM+0xfa8>)
 80148fa:	f7fc ff72 	bl	80117e2 <PIN_LOW>
 80148fe:	2180      	movs	r1, #128	; 0x80
 8014900:	48bc      	ldr	r0, [pc, #752]	; (8014bf4 <readGRAM+0xfa8>)
 8014902:	f7fc ff6e 	bl	80117e2 <PIN_LOW>
 8014906:	2180      	movs	r1, #128	; 0x80
 8014908:	48ba      	ldr	r0, [pc, #744]	; (8014bf4 <readGRAM+0xfa8>)
 801490a:	f7fc ff6a 	bl	80117e2 <PIN_LOW>
 801490e:	2180      	movs	r1, #128	; 0x80
 8014910:	48b8      	ldr	r0, [pc, #736]	; (8014bf4 <readGRAM+0xfa8>)
 8014912:	f7fc ff66 	bl	80117e2 <PIN_LOW>
 8014916:	2180      	movs	r1, #128	; 0x80
 8014918:	48b6      	ldr	r0, [pc, #728]	; (8014bf4 <readGRAM+0xfa8>)
 801491a:	f7fc ff62 	bl	80117e2 <PIN_LOW>
 801491e:	2180      	movs	r1, #128	; 0x80
 8014920:	48b4      	ldr	r0, [pc, #720]	; (8014bf4 <readGRAM+0xfa8>)
 8014922:	f7fc ff5e 	bl	80117e2 <PIN_LOW>
 8014926:	2180      	movs	r1, #128	; 0x80
 8014928:	48b2      	ldr	r0, [pc, #712]	; (8014bf4 <readGRAM+0xfa8>)
 801492a:	f7fc ff5a 	bl	80117e2 <PIN_LOW>
 801492e:	2180      	movs	r1, #128	; 0x80
 8014930:	48b0      	ldr	r0, [pc, #704]	; (8014bf4 <readGRAM+0xfa8>)
 8014932:	f7fc ff56 	bl	80117e2 <PIN_LOW>
 8014936:	2180      	movs	r1, #128	; 0x80
 8014938:	48ae      	ldr	r0, [pc, #696]	; (8014bf4 <readGRAM+0xfa8>)
 801493a:	f7fc ff52 	bl	80117e2 <PIN_LOW>
 801493e:	2180      	movs	r1, #128	; 0x80
 8014940:	48ac      	ldr	r0, [pc, #688]	; (8014bf4 <readGRAM+0xfa8>)
 8014942:	f7fc ff4e 	bl	80117e2 <PIN_LOW>
 8014946:	2180      	movs	r1, #128	; 0x80
 8014948:	48aa      	ldr	r0, [pc, #680]	; (8014bf4 <readGRAM+0xfa8>)
 801494a:	f7fc ff4a 	bl	80117e2 <PIN_LOW>
 801494e:	2180      	movs	r1, #128	; 0x80
 8014950:	48a8      	ldr	r0, [pc, #672]	; (8014bf4 <readGRAM+0xfa8>)
 8014952:	f7fc ff46 	bl	80117e2 <PIN_LOW>
 8014956:	2180      	movs	r1, #128	; 0x80
 8014958:	48a6      	ldr	r0, [pc, #664]	; (8014bf4 <readGRAM+0xfa8>)
 801495a:	f7fc ff42 	bl	80117e2 <PIN_LOW>
 801495e:	2180      	movs	r1, #128	; 0x80
 8014960:	48a4      	ldr	r0, [pc, #656]	; (8014bf4 <readGRAM+0xfa8>)
 8014962:	f7fc ff3e 	bl	80117e2 <PIN_LOW>
 8014966:	2180      	movs	r1, #128	; 0x80
 8014968:	48a2      	ldr	r0, [pc, #648]	; (8014bf4 <readGRAM+0xfa8>)
 801496a:	f7fc ff3a 	bl	80117e2 <PIN_LOW>
 801496e:	2180      	movs	r1, #128	; 0x80
 8014970:	48a0      	ldr	r0, [pc, #640]	; (8014bf4 <readGRAM+0xfa8>)
 8014972:	f7fc ff36 	bl	80117e2 <PIN_LOW>
 8014976:	2180      	movs	r1, #128	; 0x80
 8014978:	489e      	ldr	r0, [pc, #632]	; (8014bf4 <readGRAM+0xfa8>)
 801497a:	f7fc ff32 	bl	80117e2 <PIN_LOW>
 801497e:	2180      	movs	r1, #128	; 0x80
 8014980:	489c      	ldr	r0, [pc, #624]	; (8014bf4 <readGRAM+0xfa8>)
 8014982:	f7fc ff2e 	bl	80117e2 <PIN_LOW>
 8014986:	2180      	movs	r1, #128	; 0x80
 8014988:	489a      	ldr	r0, [pc, #616]	; (8014bf4 <readGRAM+0xfa8>)
 801498a:	f7fc ff2a 	bl	80117e2 <PIN_LOW>
 801498e:	2180      	movs	r1, #128	; 0x80
 8014990:	4898      	ldr	r0, [pc, #608]	; (8014bf4 <readGRAM+0xfa8>)
 8014992:	f7fc ff26 	bl	80117e2 <PIN_LOW>
 8014996:	2180      	movs	r1, #128	; 0x80
 8014998:	4896      	ldr	r0, [pc, #600]	; (8014bf4 <readGRAM+0xfa8>)
 801499a:	f7fc ff22 	bl	80117e2 <PIN_LOW>
 801499e:	2180      	movs	r1, #128	; 0x80
 80149a0:	4894      	ldr	r0, [pc, #592]	; (8014bf4 <readGRAM+0xfa8>)
 80149a2:	f7fc ff1e 	bl	80117e2 <PIN_LOW>
 80149a6:	2180      	movs	r1, #128	; 0x80
 80149a8:	4892      	ldr	r0, [pc, #584]	; (8014bf4 <readGRAM+0xfa8>)
 80149aa:	f7fc ff1a 	bl	80117e2 <PIN_LOW>
 80149ae:	2180      	movs	r1, #128	; 0x80
 80149b0:	4890      	ldr	r0, [pc, #576]	; (8014bf4 <readGRAM+0xfa8>)
 80149b2:	f7fc ff16 	bl	80117e2 <PIN_LOW>
 80149b6:	2180      	movs	r1, #128	; 0x80
 80149b8:	488e      	ldr	r0, [pc, #568]	; (8014bf4 <readGRAM+0xfa8>)
 80149ba:	f7fc ff12 	bl	80117e2 <PIN_LOW>
 80149be:	2180      	movs	r1, #128	; 0x80
 80149c0:	488c      	ldr	r0, [pc, #560]	; (8014bf4 <readGRAM+0xfa8>)
 80149c2:	f7fc ff0e 	bl	80117e2 <PIN_LOW>
 80149c6:	2180      	movs	r1, #128	; 0x80
 80149c8:	488a      	ldr	r0, [pc, #552]	; (8014bf4 <readGRAM+0xfa8>)
 80149ca:	f7fc ff0a 	bl	80117e2 <PIN_LOW>
 80149ce:	2180      	movs	r1, #128	; 0x80
 80149d0:	4888      	ldr	r0, [pc, #544]	; (8014bf4 <readGRAM+0xfa8>)
 80149d2:	f7fc ff06 	bl	80117e2 <PIN_LOW>
 80149d6:	2180      	movs	r1, #128	; 0x80
 80149d8:	4886      	ldr	r0, [pc, #536]	; (8014bf4 <readGRAM+0xfa8>)
 80149da:	f7fc ff02 	bl	80117e2 <PIN_LOW>
 80149de:	2180      	movs	r1, #128	; 0x80
 80149e0:	4884      	ldr	r0, [pc, #528]	; (8014bf4 <readGRAM+0xfa8>)
 80149e2:	f7fc fefe 	bl	80117e2 <PIN_LOW>
 80149e6:	2180      	movs	r1, #128	; 0x80
 80149e8:	4882      	ldr	r0, [pc, #520]	; (8014bf4 <readGRAM+0xfa8>)
 80149ea:	f7fc fefa 	bl	80117e2 <PIN_LOW>
 80149ee:	2180      	movs	r1, #128	; 0x80
 80149f0:	4880      	ldr	r0, [pc, #512]	; (8014bf4 <readGRAM+0xfa8>)
 80149f2:	f7fc fef6 	bl	80117e2 <PIN_LOW>
 80149f6:	2180      	movs	r1, #128	; 0x80
 80149f8:	487e      	ldr	r0, [pc, #504]	; (8014bf4 <readGRAM+0xfa8>)
 80149fa:	f7fc fef2 	bl	80117e2 <PIN_LOW>
 80149fe:	2180      	movs	r1, #128	; 0x80
 8014a00:	487c      	ldr	r0, [pc, #496]	; (8014bf4 <readGRAM+0xfa8>)
 8014a02:	f7fc feee 	bl	80117e2 <PIN_LOW>
 8014a06:	2180      	movs	r1, #128	; 0x80
 8014a08:	487a      	ldr	r0, [pc, #488]	; (8014bf4 <readGRAM+0xfa8>)
 8014a0a:	f7fc feea 	bl	80117e2 <PIN_LOW>
 8014a0e:	2180      	movs	r1, #128	; 0x80
 8014a10:	4878      	ldr	r0, [pc, #480]	; (8014bf4 <readGRAM+0xfa8>)
 8014a12:	f7fc fee6 	bl	80117e2 <PIN_LOW>
 8014a16:	2180      	movs	r1, #128	; 0x80
 8014a18:	4876      	ldr	r0, [pc, #472]	; (8014bf4 <readGRAM+0xfa8>)
 8014a1a:	f7fc fee2 	bl	80117e2 <PIN_LOW>
 8014a1e:	2180      	movs	r1, #128	; 0x80
 8014a20:	4874      	ldr	r0, [pc, #464]	; (8014bf4 <readGRAM+0xfa8>)
 8014a22:	f7fc fede 	bl	80117e2 <PIN_LOW>
 8014a26:	2180      	movs	r1, #128	; 0x80
 8014a28:	4872      	ldr	r0, [pc, #456]	; (8014bf4 <readGRAM+0xfa8>)
 8014a2a:	f7fc feda 	bl	80117e2 <PIN_LOW>
 8014a2e:	2180      	movs	r1, #128	; 0x80
 8014a30:	4870      	ldr	r0, [pc, #448]	; (8014bf4 <readGRAM+0xfa8>)
 8014a32:	f7fc fed6 	bl	80117e2 <PIN_LOW>
 8014a36:	2180      	movs	r1, #128	; 0x80
 8014a38:	486e      	ldr	r0, [pc, #440]	; (8014bf4 <readGRAM+0xfa8>)
 8014a3a:	f7fc fed2 	bl	80117e2 <PIN_LOW>
 8014a3e:	2180      	movs	r1, #128	; 0x80
 8014a40:	486c      	ldr	r0, [pc, #432]	; (8014bf4 <readGRAM+0xfa8>)
 8014a42:	f7fc fece 	bl	80117e2 <PIN_LOW>
 8014a46:	2180      	movs	r1, #128	; 0x80
 8014a48:	486a      	ldr	r0, [pc, #424]	; (8014bf4 <readGRAM+0xfa8>)
 8014a4a:	f7fc feca 	bl	80117e2 <PIN_LOW>
 8014a4e:	2180      	movs	r1, #128	; 0x80
 8014a50:	4868      	ldr	r0, [pc, #416]	; (8014bf4 <readGRAM+0xfa8>)
 8014a52:	f7fc fec6 	bl	80117e2 <PIN_LOW>
 8014a56:	2180      	movs	r1, #128	; 0x80
 8014a58:	4866      	ldr	r0, [pc, #408]	; (8014bf4 <readGRAM+0xfa8>)
 8014a5a:	f7fc fec2 	bl	80117e2 <PIN_LOW>
 8014a5e:	2180      	movs	r1, #128	; 0x80
 8014a60:	4864      	ldr	r0, [pc, #400]	; (8014bf4 <readGRAM+0xfa8>)
 8014a62:	f7fc febe 	bl	80117e2 <PIN_LOW>
 8014a66:	2180      	movs	r1, #128	; 0x80
 8014a68:	4862      	ldr	r0, [pc, #392]	; (8014bf4 <readGRAM+0xfa8>)
 8014a6a:	f7fc feba 	bl	80117e2 <PIN_LOW>
 8014a6e:	2180      	movs	r1, #128	; 0x80
 8014a70:	4860      	ldr	r0, [pc, #384]	; (8014bf4 <readGRAM+0xfa8>)
 8014a72:	f7fc feb6 	bl	80117e2 <PIN_LOW>
 8014a76:	2180      	movs	r1, #128	; 0x80
 8014a78:	485e      	ldr	r0, [pc, #376]	; (8014bf4 <readGRAM+0xfa8>)
 8014a7a:	f7fc feb2 	bl	80117e2 <PIN_LOW>
 8014a7e:	2180      	movs	r1, #128	; 0x80
 8014a80:	485c      	ldr	r0, [pc, #368]	; (8014bf4 <readGRAM+0xfa8>)
 8014a82:	f7fc feae 	bl	80117e2 <PIN_LOW>
 8014a86:	2180      	movs	r1, #128	; 0x80
 8014a88:	485a      	ldr	r0, [pc, #360]	; (8014bf4 <readGRAM+0xfa8>)
 8014a8a:	f7fc feaa 	bl	80117e2 <PIN_LOW>
 8014a8e:	4b5a      	ldr	r3, [pc, #360]	; (8014bf8 <readGRAM+0xfac>)
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	0b1b      	lsrs	r3, r3, #12
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	f003 0301 	and.w	r3, r3, #1
 8014a9a:	b2da      	uxtb	r2, r3
 8014a9c:	4b55      	ldr	r3, [pc, #340]	; (8014bf4 <readGRAM+0xfa8>)
 8014a9e:	691b      	ldr	r3, [r3, #16]
 8014aa0:	0b9b      	lsrs	r3, r3, #14
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f003 0302 	and.w	r3, r3, #2
 8014aa8:	b2db      	uxtb	r3, r3
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	b2da      	uxtb	r2, r3
 8014aae:	4b52      	ldr	r3, [pc, #328]	; (8014bf8 <readGRAM+0xfac>)
 8014ab0:	691b      	ldr	r3, [r3, #16]
 8014ab2:	0b5b      	lsrs	r3, r3, #13
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	f003 0304 	and.w	r3, r3, #4
 8014aba:	b2db      	uxtb	r3, r3
 8014abc:	4313      	orrs	r3, r2
 8014abe:	b2da      	uxtb	r2, r3
 8014ac0:	4b4e      	ldr	r3, [pc, #312]	; (8014bfc <readGRAM+0xfb0>)
 8014ac2:	691b      	ldr	r3, [r3, #16]
 8014ac4:	0a9b      	lsrs	r3, r3, #10
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	f003 0308 	and.w	r3, r3, #8
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	b2da      	uxtb	r2, r3
 8014ad2:	4b49      	ldr	r3, [pc, #292]	; (8014bf8 <readGRAM+0xfac>)
 8014ad4:	691b      	ldr	r3, [r3, #16]
 8014ad6:	0a9b      	lsrs	r3, r3, #10
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	f003 0310 	and.w	r3, r3, #16
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	b2da      	uxtb	r2, r3
 8014ae4:	4b45      	ldr	r3, [pc, #276]	; (8014bfc <readGRAM+0xfb0>)
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	099b      	lsrs	r3, r3, #6
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	f003 0320 	and.w	r3, r3, #32
 8014af0:	b2db      	uxtb	r3, r3
 8014af2:	4313      	orrs	r3, r2
 8014af4:	b2da      	uxtb	r2, r3
 8014af6:	4b41      	ldr	r3, [pc, #260]	; (8014bfc <readGRAM+0xfb0>)
 8014af8:	691b      	ldr	r3, [r3, #16]
 8014afa:	08db      	lsrs	r3, r3, #3
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	4313      	orrs	r3, r2
 8014b06:	b2da      	uxtb	r2, r3
 8014b08:	4b3b      	ldr	r3, [pc, #236]	; (8014bf8 <readGRAM+0xfac>)
 8014b0a:	691b      	ldr	r3, [r3, #16]
 8014b0c:	099b      	lsrs	r3, r3, #6
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	4313      	orrs	r3, r2
 8014b18:	75fb      	strb	r3, [r7, #23]
 8014b1a:	2180      	movs	r1, #128	; 0x80
 8014b1c:	4835      	ldr	r0, [pc, #212]	; (8014bf4 <readGRAM+0xfa8>)
 8014b1e:	f7fc fe70 	bl	8011802 <PIN_HIGH>
 8014b22:	2180      	movs	r1, #128	; 0x80
 8014b24:	4833      	ldr	r0, [pc, #204]	; (8014bf4 <readGRAM+0xfa8>)
 8014b26:	f7fc fe6c 	bl	8011802 <PIN_HIGH>
                READ_8(g);
 8014b2a:	2180      	movs	r1, #128	; 0x80
 8014b2c:	4831      	ldr	r0, [pc, #196]	; (8014bf4 <readGRAM+0xfa8>)
 8014b2e:	f7fc fe68 	bl	8011802 <PIN_HIGH>
 8014b32:	2180      	movs	r1, #128	; 0x80
 8014b34:	482f      	ldr	r0, [pc, #188]	; (8014bf4 <readGRAM+0xfa8>)
 8014b36:	f7fc fe54 	bl	80117e2 <PIN_LOW>
 8014b3a:	2180      	movs	r1, #128	; 0x80
 8014b3c:	482d      	ldr	r0, [pc, #180]	; (8014bf4 <readGRAM+0xfa8>)
 8014b3e:	f7fc fe50 	bl	80117e2 <PIN_LOW>
 8014b42:	2180      	movs	r1, #128	; 0x80
 8014b44:	482b      	ldr	r0, [pc, #172]	; (8014bf4 <readGRAM+0xfa8>)
 8014b46:	f7fc fe4c 	bl	80117e2 <PIN_LOW>
 8014b4a:	2180      	movs	r1, #128	; 0x80
 8014b4c:	4829      	ldr	r0, [pc, #164]	; (8014bf4 <readGRAM+0xfa8>)
 8014b4e:	f7fc fe48 	bl	80117e2 <PIN_LOW>
 8014b52:	2180      	movs	r1, #128	; 0x80
 8014b54:	4827      	ldr	r0, [pc, #156]	; (8014bf4 <readGRAM+0xfa8>)
 8014b56:	f7fc fe44 	bl	80117e2 <PIN_LOW>
 8014b5a:	2180      	movs	r1, #128	; 0x80
 8014b5c:	4825      	ldr	r0, [pc, #148]	; (8014bf4 <readGRAM+0xfa8>)
 8014b5e:	f7fc fe40 	bl	80117e2 <PIN_LOW>
 8014b62:	2180      	movs	r1, #128	; 0x80
 8014b64:	4823      	ldr	r0, [pc, #140]	; (8014bf4 <readGRAM+0xfa8>)
 8014b66:	f7fc fe3c 	bl	80117e2 <PIN_LOW>
 8014b6a:	2180      	movs	r1, #128	; 0x80
 8014b6c:	4821      	ldr	r0, [pc, #132]	; (8014bf4 <readGRAM+0xfa8>)
 8014b6e:	f7fc fe38 	bl	80117e2 <PIN_LOW>
 8014b72:	2180      	movs	r1, #128	; 0x80
 8014b74:	481f      	ldr	r0, [pc, #124]	; (8014bf4 <readGRAM+0xfa8>)
 8014b76:	f7fc fe34 	bl	80117e2 <PIN_LOW>
 8014b7a:	2180      	movs	r1, #128	; 0x80
 8014b7c:	481d      	ldr	r0, [pc, #116]	; (8014bf4 <readGRAM+0xfa8>)
 8014b7e:	f7fc fe30 	bl	80117e2 <PIN_LOW>
 8014b82:	2180      	movs	r1, #128	; 0x80
 8014b84:	481b      	ldr	r0, [pc, #108]	; (8014bf4 <readGRAM+0xfa8>)
 8014b86:	f7fc fe2c 	bl	80117e2 <PIN_LOW>
 8014b8a:	2180      	movs	r1, #128	; 0x80
 8014b8c:	4819      	ldr	r0, [pc, #100]	; (8014bf4 <readGRAM+0xfa8>)
 8014b8e:	f7fc fe28 	bl	80117e2 <PIN_LOW>
 8014b92:	2180      	movs	r1, #128	; 0x80
 8014b94:	4817      	ldr	r0, [pc, #92]	; (8014bf4 <readGRAM+0xfa8>)
 8014b96:	f7fc fe24 	bl	80117e2 <PIN_LOW>
 8014b9a:	2180      	movs	r1, #128	; 0x80
 8014b9c:	4815      	ldr	r0, [pc, #84]	; (8014bf4 <readGRAM+0xfa8>)
 8014b9e:	f7fc fe20 	bl	80117e2 <PIN_LOW>
 8014ba2:	2180      	movs	r1, #128	; 0x80
 8014ba4:	4813      	ldr	r0, [pc, #76]	; (8014bf4 <readGRAM+0xfa8>)
 8014ba6:	f7fc fe1c 	bl	80117e2 <PIN_LOW>
 8014baa:	2180      	movs	r1, #128	; 0x80
 8014bac:	4811      	ldr	r0, [pc, #68]	; (8014bf4 <readGRAM+0xfa8>)
 8014bae:	f7fc fe18 	bl	80117e2 <PIN_LOW>
 8014bb2:	2180      	movs	r1, #128	; 0x80
 8014bb4:	480f      	ldr	r0, [pc, #60]	; (8014bf4 <readGRAM+0xfa8>)
 8014bb6:	f7fc fe14 	bl	80117e2 <PIN_LOW>
 8014bba:	2180      	movs	r1, #128	; 0x80
 8014bbc:	480d      	ldr	r0, [pc, #52]	; (8014bf4 <readGRAM+0xfa8>)
 8014bbe:	f7fc fe10 	bl	80117e2 <PIN_LOW>
 8014bc2:	2180      	movs	r1, #128	; 0x80
 8014bc4:	480b      	ldr	r0, [pc, #44]	; (8014bf4 <readGRAM+0xfa8>)
 8014bc6:	f7fc fe0c 	bl	80117e2 <PIN_LOW>
 8014bca:	2180      	movs	r1, #128	; 0x80
 8014bcc:	4809      	ldr	r0, [pc, #36]	; (8014bf4 <readGRAM+0xfa8>)
 8014bce:	f7fc fe08 	bl	80117e2 <PIN_LOW>
 8014bd2:	2180      	movs	r1, #128	; 0x80
 8014bd4:	4807      	ldr	r0, [pc, #28]	; (8014bf4 <readGRAM+0xfa8>)
 8014bd6:	f7fc fe04 	bl	80117e2 <PIN_LOW>
 8014bda:	2180      	movs	r1, #128	; 0x80
 8014bdc:	4805      	ldr	r0, [pc, #20]	; (8014bf4 <readGRAM+0xfa8>)
 8014bde:	f7fc fe00 	bl	80117e2 <PIN_LOW>
 8014be2:	2180      	movs	r1, #128	; 0x80
 8014be4:	4803      	ldr	r0, [pc, #12]	; (8014bf4 <readGRAM+0xfa8>)
 8014be6:	f7fc fdfc 	bl	80117e2 <PIN_LOW>
 8014bea:	2180      	movs	r1, #128	; 0x80
 8014bec:	e008      	b.n	8014c00 <readGRAM+0xfb4>
 8014bee:	bf00      	nop
 8014bf0:	2000698e 	.word	0x2000698e
 8014bf4:	40020c00 	.word	0x40020c00
 8014bf8:	40021400 	.word	0x40021400
 8014bfc:	40021000 	.word	0x40021000
 8014c00:	48c3      	ldr	r0, [pc, #780]	; (8014f10 <readGRAM+0x12c4>)
 8014c02:	f7fc fdee 	bl	80117e2 <PIN_LOW>
 8014c06:	2180      	movs	r1, #128	; 0x80
 8014c08:	48c1      	ldr	r0, [pc, #772]	; (8014f10 <readGRAM+0x12c4>)
 8014c0a:	f7fc fdea 	bl	80117e2 <PIN_LOW>
 8014c0e:	2180      	movs	r1, #128	; 0x80
 8014c10:	48bf      	ldr	r0, [pc, #764]	; (8014f10 <readGRAM+0x12c4>)
 8014c12:	f7fc fde6 	bl	80117e2 <PIN_LOW>
 8014c16:	2180      	movs	r1, #128	; 0x80
 8014c18:	48bd      	ldr	r0, [pc, #756]	; (8014f10 <readGRAM+0x12c4>)
 8014c1a:	f7fc fde2 	bl	80117e2 <PIN_LOW>
 8014c1e:	2180      	movs	r1, #128	; 0x80
 8014c20:	48bb      	ldr	r0, [pc, #748]	; (8014f10 <readGRAM+0x12c4>)
 8014c22:	f7fc fdde 	bl	80117e2 <PIN_LOW>
 8014c26:	2180      	movs	r1, #128	; 0x80
 8014c28:	48b9      	ldr	r0, [pc, #740]	; (8014f10 <readGRAM+0x12c4>)
 8014c2a:	f7fc fdda 	bl	80117e2 <PIN_LOW>
 8014c2e:	2180      	movs	r1, #128	; 0x80
 8014c30:	48b7      	ldr	r0, [pc, #732]	; (8014f10 <readGRAM+0x12c4>)
 8014c32:	f7fc fdd6 	bl	80117e2 <PIN_LOW>
 8014c36:	2180      	movs	r1, #128	; 0x80
 8014c38:	48b5      	ldr	r0, [pc, #724]	; (8014f10 <readGRAM+0x12c4>)
 8014c3a:	f7fc fdd2 	bl	80117e2 <PIN_LOW>
 8014c3e:	2180      	movs	r1, #128	; 0x80
 8014c40:	48b3      	ldr	r0, [pc, #716]	; (8014f10 <readGRAM+0x12c4>)
 8014c42:	f7fc fdce 	bl	80117e2 <PIN_LOW>
 8014c46:	2180      	movs	r1, #128	; 0x80
 8014c48:	48b1      	ldr	r0, [pc, #708]	; (8014f10 <readGRAM+0x12c4>)
 8014c4a:	f7fc fdca 	bl	80117e2 <PIN_LOW>
 8014c4e:	2180      	movs	r1, #128	; 0x80
 8014c50:	48af      	ldr	r0, [pc, #700]	; (8014f10 <readGRAM+0x12c4>)
 8014c52:	f7fc fdc6 	bl	80117e2 <PIN_LOW>
 8014c56:	2180      	movs	r1, #128	; 0x80
 8014c58:	48ad      	ldr	r0, [pc, #692]	; (8014f10 <readGRAM+0x12c4>)
 8014c5a:	f7fc fdc2 	bl	80117e2 <PIN_LOW>
 8014c5e:	2180      	movs	r1, #128	; 0x80
 8014c60:	48ab      	ldr	r0, [pc, #684]	; (8014f10 <readGRAM+0x12c4>)
 8014c62:	f7fc fdbe 	bl	80117e2 <PIN_LOW>
 8014c66:	2180      	movs	r1, #128	; 0x80
 8014c68:	48a9      	ldr	r0, [pc, #676]	; (8014f10 <readGRAM+0x12c4>)
 8014c6a:	f7fc fdba 	bl	80117e2 <PIN_LOW>
 8014c6e:	2180      	movs	r1, #128	; 0x80
 8014c70:	48a7      	ldr	r0, [pc, #668]	; (8014f10 <readGRAM+0x12c4>)
 8014c72:	f7fc fdb6 	bl	80117e2 <PIN_LOW>
 8014c76:	2180      	movs	r1, #128	; 0x80
 8014c78:	48a5      	ldr	r0, [pc, #660]	; (8014f10 <readGRAM+0x12c4>)
 8014c7a:	f7fc fdb2 	bl	80117e2 <PIN_LOW>
 8014c7e:	2180      	movs	r1, #128	; 0x80
 8014c80:	48a3      	ldr	r0, [pc, #652]	; (8014f10 <readGRAM+0x12c4>)
 8014c82:	f7fc fdae 	bl	80117e2 <PIN_LOW>
 8014c86:	2180      	movs	r1, #128	; 0x80
 8014c88:	48a1      	ldr	r0, [pc, #644]	; (8014f10 <readGRAM+0x12c4>)
 8014c8a:	f7fc fdaa 	bl	80117e2 <PIN_LOW>
 8014c8e:	2180      	movs	r1, #128	; 0x80
 8014c90:	489f      	ldr	r0, [pc, #636]	; (8014f10 <readGRAM+0x12c4>)
 8014c92:	f7fc fda6 	bl	80117e2 <PIN_LOW>
 8014c96:	2180      	movs	r1, #128	; 0x80
 8014c98:	489d      	ldr	r0, [pc, #628]	; (8014f10 <readGRAM+0x12c4>)
 8014c9a:	f7fc fda2 	bl	80117e2 <PIN_LOW>
 8014c9e:	2180      	movs	r1, #128	; 0x80
 8014ca0:	489b      	ldr	r0, [pc, #620]	; (8014f10 <readGRAM+0x12c4>)
 8014ca2:	f7fc fd9e 	bl	80117e2 <PIN_LOW>
 8014ca6:	2180      	movs	r1, #128	; 0x80
 8014ca8:	4899      	ldr	r0, [pc, #612]	; (8014f10 <readGRAM+0x12c4>)
 8014caa:	f7fc fd9a 	bl	80117e2 <PIN_LOW>
 8014cae:	2180      	movs	r1, #128	; 0x80
 8014cb0:	4897      	ldr	r0, [pc, #604]	; (8014f10 <readGRAM+0x12c4>)
 8014cb2:	f7fc fd96 	bl	80117e2 <PIN_LOW>
 8014cb6:	2180      	movs	r1, #128	; 0x80
 8014cb8:	4895      	ldr	r0, [pc, #596]	; (8014f10 <readGRAM+0x12c4>)
 8014cba:	f7fc fd92 	bl	80117e2 <PIN_LOW>
 8014cbe:	2180      	movs	r1, #128	; 0x80
 8014cc0:	4893      	ldr	r0, [pc, #588]	; (8014f10 <readGRAM+0x12c4>)
 8014cc2:	f7fc fd8e 	bl	80117e2 <PIN_LOW>
 8014cc6:	2180      	movs	r1, #128	; 0x80
 8014cc8:	4891      	ldr	r0, [pc, #580]	; (8014f10 <readGRAM+0x12c4>)
 8014cca:	f7fc fd8a 	bl	80117e2 <PIN_LOW>
 8014cce:	2180      	movs	r1, #128	; 0x80
 8014cd0:	488f      	ldr	r0, [pc, #572]	; (8014f10 <readGRAM+0x12c4>)
 8014cd2:	f7fc fd86 	bl	80117e2 <PIN_LOW>
 8014cd6:	2180      	movs	r1, #128	; 0x80
 8014cd8:	488d      	ldr	r0, [pc, #564]	; (8014f10 <readGRAM+0x12c4>)
 8014cda:	f7fc fd82 	bl	80117e2 <PIN_LOW>
 8014cde:	4b8d      	ldr	r3, [pc, #564]	; (8014f14 <readGRAM+0x12c8>)
 8014ce0:	691b      	ldr	r3, [r3, #16]
 8014ce2:	0b1b      	lsrs	r3, r3, #12
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	f003 0301 	and.w	r3, r3, #1
 8014cea:	b2da      	uxtb	r2, r3
 8014cec:	4b88      	ldr	r3, [pc, #544]	; (8014f10 <readGRAM+0x12c4>)
 8014cee:	691b      	ldr	r3, [r3, #16]
 8014cf0:	0b9b      	lsrs	r3, r3, #14
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	f003 0302 	and.w	r3, r3, #2
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	4b85      	ldr	r3, [pc, #532]	; (8014f14 <readGRAM+0x12c8>)
 8014d00:	691b      	ldr	r3, [r3, #16]
 8014d02:	0b5b      	lsrs	r3, r3, #13
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	f003 0304 	and.w	r3, r3, #4
 8014d0a:	b2db      	uxtb	r3, r3
 8014d0c:	4313      	orrs	r3, r2
 8014d0e:	b2da      	uxtb	r2, r3
 8014d10:	4b81      	ldr	r3, [pc, #516]	; (8014f18 <readGRAM+0x12cc>)
 8014d12:	691b      	ldr	r3, [r3, #16]
 8014d14:	0a9b      	lsrs	r3, r3, #10
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	f003 0308 	and.w	r3, r3, #8
 8014d1c:	b2db      	uxtb	r3, r3
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	4b7c      	ldr	r3, [pc, #496]	; (8014f14 <readGRAM+0x12c8>)
 8014d24:	691b      	ldr	r3, [r3, #16]
 8014d26:	0a9b      	lsrs	r3, r3, #10
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	f003 0310 	and.w	r3, r3, #16
 8014d2e:	b2db      	uxtb	r3, r3
 8014d30:	4313      	orrs	r3, r2
 8014d32:	b2da      	uxtb	r2, r3
 8014d34:	4b78      	ldr	r3, [pc, #480]	; (8014f18 <readGRAM+0x12cc>)
 8014d36:	691b      	ldr	r3, [r3, #16]
 8014d38:	099b      	lsrs	r3, r3, #6
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	f003 0320 	and.w	r3, r3, #32
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	4313      	orrs	r3, r2
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	4b74      	ldr	r3, [pc, #464]	; (8014f18 <readGRAM+0x12cc>)
 8014d48:	691b      	ldr	r3, [r3, #16]
 8014d4a:	08db      	lsrs	r3, r3, #3
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	4313      	orrs	r3, r2
 8014d56:	b2da      	uxtb	r2, r3
 8014d58:	4b6e      	ldr	r3, [pc, #440]	; (8014f14 <readGRAM+0x12c8>)
 8014d5a:	691b      	ldr	r3, [r3, #16]
 8014d5c:	099b      	lsrs	r3, r3, #6
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	4313      	orrs	r3, r2
 8014d68:	757b      	strb	r3, [r7, #21]
 8014d6a:	2180      	movs	r1, #128	; 0x80
 8014d6c:	4868      	ldr	r0, [pc, #416]	; (8014f10 <readGRAM+0x12c4>)
 8014d6e:	f7fc fd48 	bl	8011802 <PIN_HIGH>
 8014d72:	2180      	movs	r1, #128	; 0x80
 8014d74:	4866      	ldr	r0, [pc, #408]	; (8014f10 <readGRAM+0x12c4>)
 8014d76:	f7fc fd44 	bl	8011802 <PIN_HIGH>
                READ_8(b);
 8014d7a:	2180      	movs	r1, #128	; 0x80
 8014d7c:	4864      	ldr	r0, [pc, #400]	; (8014f10 <readGRAM+0x12c4>)
 8014d7e:	f7fc fd40 	bl	8011802 <PIN_HIGH>
 8014d82:	2180      	movs	r1, #128	; 0x80
 8014d84:	4862      	ldr	r0, [pc, #392]	; (8014f10 <readGRAM+0x12c4>)
 8014d86:	f7fc fd2c 	bl	80117e2 <PIN_LOW>
 8014d8a:	2180      	movs	r1, #128	; 0x80
 8014d8c:	4860      	ldr	r0, [pc, #384]	; (8014f10 <readGRAM+0x12c4>)
 8014d8e:	f7fc fd28 	bl	80117e2 <PIN_LOW>
 8014d92:	2180      	movs	r1, #128	; 0x80
 8014d94:	485e      	ldr	r0, [pc, #376]	; (8014f10 <readGRAM+0x12c4>)
 8014d96:	f7fc fd24 	bl	80117e2 <PIN_LOW>
 8014d9a:	2180      	movs	r1, #128	; 0x80
 8014d9c:	485c      	ldr	r0, [pc, #368]	; (8014f10 <readGRAM+0x12c4>)
 8014d9e:	f7fc fd20 	bl	80117e2 <PIN_LOW>
 8014da2:	2180      	movs	r1, #128	; 0x80
 8014da4:	485a      	ldr	r0, [pc, #360]	; (8014f10 <readGRAM+0x12c4>)
 8014da6:	f7fc fd1c 	bl	80117e2 <PIN_LOW>
 8014daa:	2180      	movs	r1, #128	; 0x80
 8014dac:	4858      	ldr	r0, [pc, #352]	; (8014f10 <readGRAM+0x12c4>)
 8014dae:	f7fc fd18 	bl	80117e2 <PIN_LOW>
 8014db2:	2180      	movs	r1, #128	; 0x80
 8014db4:	4856      	ldr	r0, [pc, #344]	; (8014f10 <readGRAM+0x12c4>)
 8014db6:	f7fc fd14 	bl	80117e2 <PIN_LOW>
 8014dba:	2180      	movs	r1, #128	; 0x80
 8014dbc:	4854      	ldr	r0, [pc, #336]	; (8014f10 <readGRAM+0x12c4>)
 8014dbe:	f7fc fd10 	bl	80117e2 <PIN_LOW>
 8014dc2:	2180      	movs	r1, #128	; 0x80
 8014dc4:	4852      	ldr	r0, [pc, #328]	; (8014f10 <readGRAM+0x12c4>)
 8014dc6:	f7fc fd0c 	bl	80117e2 <PIN_LOW>
 8014dca:	2180      	movs	r1, #128	; 0x80
 8014dcc:	4850      	ldr	r0, [pc, #320]	; (8014f10 <readGRAM+0x12c4>)
 8014dce:	f7fc fd08 	bl	80117e2 <PIN_LOW>
 8014dd2:	2180      	movs	r1, #128	; 0x80
 8014dd4:	484e      	ldr	r0, [pc, #312]	; (8014f10 <readGRAM+0x12c4>)
 8014dd6:	f7fc fd04 	bl	80117e2 <PIN_LOW>
 8014dda:	2180      	movs	r1, #128	; 0x80
 8014ddc:	484c      	ldr	r0, [pc, #304]	; (8014f10 <readGRAM+0x12c4>)
 8014dde:	f7fc fd00 	bl	80117e2 <PIN_LOW>
 8014de2:	2180      	movs	r1, #128	; 0x80
 8014de4:	484a      	ldr	r0, [pc, #296]	; (8014f10 <readGRAM+0x12c4>)
 8014de6:	f7fc fcfc 	bl	80117e2 <PIN_LOW>
 8014dea:	2180      	movs	r1, #128	; 0x80
 8014dec:	4848      	ldr	r0, [pc, #288]	; (8014f10 <readGRAM+0x12c4>)
 8014dee:	f7fc fcf8 	bl	80117e2 <PIN_LOW>
 8014df2:	2180      	movs	r1, #128	; 0x80
 8014df4:	4846      	ldr	r0, [pc, #280]	; (8014f10 <readGRAM+0x12c4>)
 8014df6:	f7fc fcf4 	bl	80117e2 <PIN_LOW>
 8014dfa:	2180      	movs	r1, #128	; 0x80
 8014dfc:	4844      	ldr	r0, [pc, #272]	; (8014f10 <readGRAM+0x12c4>)
 8014dfe:	f7fc fcf0 	bl	80117e2 <PIN_LOW>
 8014e02:	2180      	movs	r1, #128	; 0x80
 8014e04:	4842      	ldr	r0, [pc, #264]	; (8014f10 <readGRAM+0x12c4>)
 8014e06:	f7fc fcec 	bl	80117e2 <PIN_LOW>
 8014e0a:	2180      	movs	r1, #128	; 0x80
 8014e0c:	4840      	ldr	r0, [pc, #256]	; (8014f10 <readGRAM+0x12c4>)
 8014e0e:	f7fc fce8 	bl	80117e2 <PIN_LOW>
 8014e12:	2180      	movs	r1, #128	; 0x80
 8014e14:	483e      	ldr	r0, [pc, #248]	; (8014f10 <readGRAM+0x12c4>)
 8014e16:	f7fc fce4 	bl	80117e2 <PIN_LOW>
 8014e1a:	2180      	movs	r1, #128	; 0x80
 8014e1c:	483c      	ldr	r0, [pc, #240]	; (8014f10 <readGRAM+0x12c4>)
 8014e1e:	f7fc fce0 	bl	80117e2 <PIN_LOW>
 8014e22:	2180      	movs	r1, #128	; 0x80
 8014e24:	483a      	ldr	r0, [pc, #232]	; (8014f10 <readGRAM+0x12c4>)
 8014e26:	f7fc fcdc 	bl	80117e2 <PIN_LOW>
 8014e2a:	2180      	movs	r1, #128	; 0x80
 8014e2c:	4838      	ldr	r0, [pc, #224]	; (8014f10 <readGRAM+0x12c4>)
 8014e2e:	f7fc fcd8 	bl	80117e2 <PIN_LOW>
 8014e32:	2180      	movs	r1, #128	; 0x80
 8014e34:	4836      	ldr	r0, [pc, #216]	; (8014f10 <readGRAM+0x12c4>)
 8014e36:	f7fc fcd4 	bl	80117e2 <PIN_LOW>
 8014e3a:	2180      	movs	r1, #128	; 0x80
 8014e3c:	4834      	ldr	r0, [pc, #208]	; (8014f10 <readGRAM+0x12c4>)
 8014e3e:	f7fc fcd0 	bl	80117e2 <PIN_LOW>
 8014e42:	2180      	movs	r1, #128	; 0x80
 8014e44:	4832      	ldr	r0, [pc, #200]	; (8014f10 <readGRAM+0x12c4>)
 8014e46:	f7fc fccc 	bl	80117e2 <PIN_LOW>
 8014e4a:	2180      	movs	r1, #128	; 0x80
 8014e4c:	4830      	ldr	r0, [pc, #192]	; (8014f10 <readGRAM+0x12c4>)
 8014e4e:	f7fc fcc8 	bl	80117e2 <PIN_LOW>
 8014e52:	2180      	movs	r1, #128	; 0x80
 8014e54:	482e      	ldr	r0, [pc, #184]	; (8014f10 <readGRAM+0x12c4>)
 8014e56:	f7fc fcc4 	bl	80117e2 <PIN_LOW>
 8014e5a:	2180      	movs	r1, #128	; 0x80
 8014e5c:	482c      	ldr	r0, [pc, #176]	; (8014f10 <readGRAM+0x12c4>)
 8014e5e:	f7fc fcc0 	bl	80117e2 <PIN_LOW>
 8014e62:	2180      	movs	r1, #128	; 0x80
 8014e64:	482a      	ldr	r0, [pc, #168]	; (8014f10 <readGRAM+0x12c4>)
 8014e66:	f7fc fcbc 	bl	80117e2 <PIN_LOW>
 8014e6a:	2180      	movs	r1, #128	; 0x80
 8014e6c:	4828      	ldr	r0, [pc, #160]	; (8014f10 <readGRAM+0x12c4>)
 8014e6e:	f7fc fcb8 	bl	80117e2 <PIN_LOW>
 8014e72:	2180      	movs	r1, #128	; 0x80
 8014e74:	4826      	ldr	r0, [pc, #152]	; (8014f10 <readGRAM+0x12c4>)
 8014e76:	f7fc fcb4 	bl	80117e2 <PIN_LOW>
 8014e7a:	2180      	movs	r1, #128	; 0x80
 8014e7c:	4824      	ldr	r0, [pc, #144]	; (8014f10 <readGRAM+0x12c4>)
 8014e7e:	f7fc fcb0 	bl	80117e2 <PIN_LOW>
 8014e82:	2180      	movs	r1, #128	; 0x80
 8014e84:	4822      	ldr	r0, [pc, #136]	; (8014f10 <readGRAM+0x12c4>)
 8014e86:	f7fc fcac 	bl	80117e2 <PIN_LOW>
 8014e8a:	2180      	movs	r1, #128	; 0x80
 8014e8c:	4820      	ldr	r0, [pc, #128]	; (8014f10 <readGRAM+0x12c4>)
 8014e8e:	f7fc fca8 	bl	80117e2 <PIN_LOW>
 8014e92:	2180      	movs	r1, #128	; 0x80
 8014e94:	481e      	ldr	r0, [pc, #120]	; (8014f10 <readGRAM+0x12c4>)
 8014e96:	f7fc fca4 	bl	80117e2 <PIN_LOW>
 8014e9a:	2180      	movs	r1, #128	; 0x80
 8014e9c:	481c      	ldr	r0, [pc, #112]	; (8014f10 <readGRAM+0x12c4>)
 8014e9e:	f7fc fca0 	bl	80117e2 <PIN_LOW>
 8014ea2:	2180      	movs	r1, #128	; 0x80
 8014ea4:	481a      	ldr	r0, [pc, #104]	; (8014f10 <readGRAM+0x12c4>)
 8014ea6:	f7fc fc9c 	bl	80117e2 <PIN_LOW>
 8014eaa:	2180      	movs	r1, #128	; 0x80
 8014eac:	4818      	ldr	r0, [pc, #96]	; (8014f10 <readGRAM+0x12c4>)
 8014eae:	f7fc fc98 	bl	80117e2 <PIN_LOW>
 8014eb2:	2180      	movs	r1, #128	; 0x80
 8014eb4:	4816      	ldr	r0, [pc, #88]	; (8014f10 <readGRAM+0x12c4>)
 8014eb6:	f7fc fc94 	bl	80117e2 <PIN_LOW>
 8014eba:	2180      	movs	r1, #128	; 0x80
 8014ebc:	4814      	ldr	r0, [pc, #80]	; (8014f10 <readGRAM+0x12c4>)
 8014ebe:	f7fc fc90 	bl	80117e2 <PIN_LOW>
 8014ec2:	2180      	movs	r1, #128	; 0x80
 8014ec4:	4812      	ldr	r0, [pc, #72]	; (8014f10 <readGRAM+0x12c4>)
 8014ec6:	f7fc fc8c 	bl	80117e2 <PIN_LOW>
 8014eca:	2180      	movs	r1, #128	; 0x80
 8014ecc:	4810      	ldr	r0, [pc, #64]	; (8014f10 <readGRAM+0x12c4>)
 8014ece:	f7fc fc88 	bl	80117e2 <PIN_LOW>
 8014ed2:	2180      	movs	r1, #128	; 0x80
 8014ed4:	480e      	ldr	r0, [pc, #56]	; (8014f10 <readGRAM+0x12c4>)
 8014ed6:	f7fc fc84 	bl	80117e2 <PIN_LOW>
 8014eda:	2180      	movs	r1, #128	; 0x80
 8014edc:	480c      	ldr	r0, [pc, #48]	; (8014f10 <readGRAM+0x12c4>)
 8014ede:	f7fc fc80 	bl	80117e2 <PIN_LOW>
 8014ee2:	2180      	movs	r1, #128	; 0x80
 8014ee4:	480a      	ldr	r0, [pc, #40]	; (8014f10 <readGRAM+0x12c4>)
 8014ee6:	f7fc fc7c 	bl	80117e2 <PIN_LOW>
 8014eea:	2180      	movs	r1, #128	; 0x80
 8014eec:	4808      	ldr	r0, [pc, #32]	; (8014f10 <readGRAM+0x12c4>)
 8014eee:	f7fc fc78 	bl	80117e2 <PIN_LOW>
 8014ef2:	2180      	movs	r1, #128	; 0x80
 8014ef4:	4806      	ldr	r0, [pc, #24]	; (8014f10 <readGRAM+0x12c4>)
 8014ef6:	f7fc fc74 	bl	80117e2 <PIN_LOW>
 8014efa:	2180      	movs	r1, #128	; 0x80
 8014efc:	4804      	ldr	r0, [pc, #16]	; (8014f10 <readGRAM+0x12c4>)
 8014efe:	f7fc fc70 	bl	80117e2 <PIN_LOW>
 8014f02:	2180      	movs	r1, #128	; 0x80
 8014f04:	4802      	ldr	r0, [pc, #8]	; (8014f10 <readGRAM+0x12c4>)
 8014f06:	f7fc fc6c 	bl	80117e2 <PIN_LOW>
 8014f0a:	2180      	movs	r1, #128	; 0x80
 8014f0c:	e006      	b.n	8014f1c <readGRAM+0x12d0>
 8014f0e:	bf00      	nop
 8014f10:	40020c00 	.word	0x40020c00
 8014f14:	40021400 	.word	0x40021400
 8014f18:	40021000 	.word	0x40021000
 8014f1c:	4836      	ldr	r0, [pc, #216]	; (8014ff8 <readGRAM+0x13ac>)
 8014f1e:	f7fc fc60 	bl	80117e2 <PIN_LOW>
 8014f22:	2180      	movs	r1, #128	; 0x80
 8014f24:	4834      	ldr	r0, [pc, #208]	; (8014ff8 <readGRAM+0x13ac>)
 8014f26:	f7fc fc5c 	bl	80117e2 <PIN_LOW>
 8014f2a:	4b34      	ldr	r3, [pc, #208]	; (8014ffc <readGRAM+0x13b0>)
 8014f2c:	691b      	ldr	r3, [r3, #16]
 8014f2e:	0b1b      	lsrs	r3, r3, #12
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	4b2f      	ldr	r3, [pc, #188]	; (8014ff8 <readGRAM+0x13ac>)
 8014f3a:	691b      	ldr	r3, [r3, #16]
 8014f3c:	0b9b      	lsrs	r3, r3, #14
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	f003 0302 	and.w	r3, r3, #2
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	4313      	orrs	r3, r2
 8014f48:	b2da      	uxtb	r2, r3
 8014f4a:	4b2c      	ldr	r3, [pc, #176]	; (8014ffc <readGRAM+0x13b0>)
 8014f4c:	691b      	ldr	r3, [r3, #16]
 8014f4e:	0b5b      	lsrs	r3, r3, #13
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	f003 0304 	and.w	r3, r3, #4
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	4313      	orrs	r3, r2
 8014f5a:	b2da      	uxtb	r2, r3
 8014f5c:	4b28      	ldr	r3, [pc, #160]	; (8015000 <readGRAM+0x13b4>)
 8014f5e:	691b      	ldr	r3, [r3, #16]
 8014f60:	0a9b      	lsrs	r3, r3, #10
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	f003 0308 	and.w	r3, r3, #8
 8014f68:	b2db      	uxtb	r3, r3
 8014f6a:	4313      	orrs	r3, r2
 8014f6c:	b2da      	uxtb	r2, r3
 8014f6e:	4b23      	ldr	r3, [pc, #140]	; (8014ffc <readGRAM+0x13b0>)
 8014f70:	691b      	ldr	r3, [r3, #16]
 8014f72:	0a9b      	lsrs	r3, r3, #10
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	f003 0310 	and.w	r3, r3, #16
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	4313      	orrs	r3, r2
 8014f7e:	b2da      	uxtb	r2, r3
 8014f80:	4b1f      	ldr	r3, [pc, #124]	; (8015000 <readGRAM+0x13b4>)
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	099b      	lsrs	r3, r3, #6
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	f003 0320 	and.w	r3, r3, #32
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	4313      	orrs	r3, r2
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	4b1b      	ldr	r3, [pc, #108]	; (8015000 <readGRAM+0x13b4>)
 8014f94:	691b      	ldr	r3, [r3, #16]
 8014f96:	08db      	lsrs	r3, r3, #3
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	4313      	orrs	r3, r2
 8014fa2:	b2da      	uxtb	r2, r3
 8014fa4:	4b15      	ldr	r3, [pc, #84]	; (8014ffc <readGRAM+0x13b0>)
 8014fa6:	691b      	ldr	r3, [r3, #16]
 8014fa8:	099b      	lsrs	r3, r3, #6
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	4313      	orrs	r3, r2
 8014fb4:	753b      	strb	r3, [r7, #20]
 8014fb6:	2180      	movs	r1, #128	; 0x80
 8014fb8:	480f      	ldr	r0, [pc, #60]	; (8014ff8 <readGRAM+0x13ac>)
 8014fba:	f7fc fc22 	bl	8011802 <PIN_HIGH>
 8014fbe:	2180      	movs	r1, #128	; 0x80
 8014fc0:	480d      	ldr	r0, [pc, #52]	; (8014ff8 <readGRAM+0x13ac>)
 8014fc2:	f7fc fc1e 	bl	8011802 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8014fc6:	4b0f      	ldr	r3, [pc, #60]	; (8015004 <readGRAM+0x13b8>)
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	f003 0304 	and.w	r3, r3, #4
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d008      	beq.n	8014fe4 <readGRAM+0x1398>
                    ret = color565(b, g, r);
 8014fd2:	7dfa      	ldrb	r2, [r7, #23]
 8014fd4:	7d79      	ldrb	r1, [r7, #21]
 8014fd6:	7d3b      	ldrb	r3, [r7, #20]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7fc fcdb 	bl	8011994 <color565>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014fe2:	e283      	b.n	80154ec <readGRAM+0x18a0>
                else
                    ret = color565(r, g, b);
 8014fe4:	7d3a      	ldrb	r2, [r7, #20]
 8014fe6:	7d79      	ldrb	r1, [r7, #21]
 8014fe8:	7dfb      	ldrb	r3, [r7, #23]
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fc fcd2 	bl	8011994 <color565>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014ff4:	e27a      	b.n	80154ec <readGRAM+0x18a0>
 8014ff6:	bf00      	nop
 8014ff8:	40020c00 	.word	0x40020c00
 8014ffc:	40021400 	.word	0x40021400
 8015000:	40021000 	.word	0x40021000
 8015004:	2000698e 	.word	0x2000698e
            } else
            {
                READ_16(ret);
 8015008:	2180      	movs	r1, #128	; 0x80
 801500a:	48c3      	ldr	r0, [pc, #780]	; (8015318 <readGRAM+0x16cc>)
 801500c:	f7fc fbf9 	bl	8011802 <PIN_HIGH>
 8015010:	2180      	movs	r1, #128	; 0x80
 8015012:	48c1      	ldr	r0, [pc, #772]	; (8015318 <readGRAM+0x16cc>)
 8015014:	f7fc fbe5 	bl	80117e2 <PIN_LOW>
 8015018:	2180      	movs	r1, #128	; 0x80
 801501a:	48bf      	ldr	r0, [pc, #764]	; (8015318 <readGRAM+0x16cc>)
 801501c:	f7fc fbe1 	bl	80117e2 <PIN_LOW>
 8015020:	2180      	movs	r1, #128	; 0x80
 8015022:	48bd      	ldr	r0, [pc, #756]	; (8015318 <readGRAM+0x16cc>)
 8015024:	f7fc fbdd 	bl	80117e2 <PIN_LOW>
 8015028:	2180      	movs	r1, #128	; 0x80
 801502a:	48bb      	ldr	r0, [pc, #748]	; (8015318 <readGRAM+0x16cc>)
 801502c:	f7fc fbd9 	bl	80117e2 <PIN_LOW>
 8015030:	2180      	movs	r1, #128	; 0x80
 8015032:	48b9      	ldr	r0, [pc, #740]	; (8015318 <readGRAM+0x16cc>)
 8015034:	f7fc fbd5 	bl	80117e2 <PIN_LOW>
 8015038:	2180      	movs	r1, #128	; 0x80
 801503a:	48b7      	ldr	r0, [pc, #732]	; (8015318 <readGRAM+0x16cc>)
 801503c:	f7fc fbd1 	bl	80117e2 <PIN_LOW>
 8015040:	2180      	movs	r1, #128	; 0x80
 8015042:	48b5      	ldr	r0, [pc, #724]	; (8015318 <readGRAM+0x16cc>)
 8015044:	f7fc fbcd 	bl	80117e2 <PIN_LOW>
 8015048:	2180      	movs	r1, #128	; 0x80
 801504a:	48b3      	ldr	r0, [pc, #716]	; (8015318 <readGRAM+0x16cc>)
 801504c:	f7fc fbc9 	bl	80117e2 <PIN_LOW>
 8015050:	2180      	movs	r1, #128	; 0x80
 8015052:	48b1      	ldr	r0, [pc, #708]	; (8015318 <readGRAM+0x16cc>)
 8015054:	f7fc fbc5 	bl	80117e2 <PIN_LOW>
 8015058:	2180      	movs	r1, #128	; 0x80
 801505a:	48af      	ldr	r0, [pc, #700]	; (8015318 <readGRAM+0x16cc>)
 801505c:	f7fc fbc1 	bl	80117e2 <PIN_LOW>
 8015060:	2180      	movs	r1, #128	; 0x80
 8015062:	48ad      	ldr	r0, [pc, #692]	; (8015318 <readGRAM+0x16cc>)
 8015064:	f7fc fbbd 	bl	80117e2 <PIN_LOW>
 8015068:	2180      	movs	r1, #128	; 0x80
 801506a:	48ab      	ldr	r0, [pc, #684]	; (8015318 <readGRAM+0x16cc>)
 801506c:	f7fc fbb9 	bl	80117e2 <PIN_LOW>
 8015070:	2180      	movs	r1, #128	; 0x80
 8015072:	48a9      	ldr	r0, [pc, #676]	; (8015318 <readGRAM+0x16cc>)
 8015074:	f7fc fbb5 	bl	80117e2 <PIN_LOW>
 8015078:	2180      	movs	r1, #128	; 0x80
 801507a:	48a7      	ldr	r0, [pc, #668]	; (8015318 <readGRAM+0x16cc>)
 801507c:	f7fc fbb1 	bl	80117e2 <PIN_LOW>
 8015080:	2180      	movs	r1, #128	; 0x80
 8015082:	48a5      	ldr	r0, [pc, #660]	; (8015318 <readGRAM+0x16cc>)
 8015084:	f7fc fbad 	bl	80117e2 <PIN_LOW>
 8015088:	2180      	movs	r1, #128	; 0x80
 801508a:	48a3      	ldr	r0, [pc, #652]	; (8015318 <readGRAM+0x16cc>)
 801508c:	f7fc fba9 	bl	80117e2 <PIN_LOW>
 8015090:	2180      	movs	r1, #128	; 0x80
 8015092:	48a1      	ldr	r0, [pc, #644]	; (8015318 <readGRAM+0x16cc>)
 8015094:	f7fc fba5 	bl	80117e2 <PIN_LOW>
 8015098:	2180      	movs	r1, #128	; 0x80
 801509a:	489f      	ldr	r0, [pc, #636]	; (8015318 <readGRAM+0x16cc>)
 801509c:	f7fc fba1 	bl	80117e2 <PIN_LOW>
 80150a0:	2180      	movs	r1, #128	; 0x80
 80150a2:	489d      	ldr	r0, [pc, #628]	; (8015318 <readGRAM+0x16cc>)
 80150a4:	f7fc fb9d 	bl	80117e2 <PIN_LOW>
 80150a8:	2180      	movs	r1, #128	; 0x80
 80150aa:	489b      	ldr	r0, [pc, #620]	; (8015318 <readGRAM+0x16cc>)
 80150ac:	f7fc fb99 	bl	80117e2 <PIN_LOW>
 80150b0:	2180      	movs	r1, #128	; 0x80
 80150b2:	4899      	ldr	r0, [pc, #612]	; (8015318 <readGRAM+0x16cc>)
 80150b4:	f7fc fb95 	bl	80117e2 <PIN_LOW>
 80150b8:	2180      	movs	r1, #128	; 0x80
 80150ba:	4897      	ldr	r0, [pc, #604]	; (8015318 <readGRAM+0x16cc>)
 80150bc:	f7fc fb91 	bl	80117e2 <PIN_LOW>
 80150c0:	2180      	movs	r1, #128	; 0x80
 80150c2:	4895      	ldr	r0, [pc, #596]	; (8015318 <readGRAM+0x16cc>)
 80150c4:	f7fc fb8d 	bl	80117e2 <PIN_LOW>
 80150c8:	2180      	movs	r1, #128	; 0x80
 80150ca:	4893      	ldr	r0, [pc, #588]	; (8015318 <readGRAM+0x16cc>)
 80150cc:	f7fc fb89 	bl	80117e2 <PIN_LOW>
 80150d0:	2180      	movs	r1, #128	; 0x80
 80150d2:	4891      	ldr	r0, [pc, #580]	; (8015318 <readGRAM+0x16cc>)
 80150d4:	f7fc fb85 	bl	80117e2 <PIN_LOW>
 80150d8:	2180      	movs	r1, #128	; 0x80
 80150da:	488f      	ldr	r0, [pc, #572]	; (8015318 <readGRAM+0x16cc>)
 80150dc:	f7fc fb81 	bl	80117e2 <PIN_LOW>
 80150e0:	2180      	movs	r1, #128	; 0x80
 80150e2:	488d      	ldr	r0, [pc, #564]	; (8015318 <readGRAM+0x16cc>)
 80150e4:	f7fc fb7d 	bl	80117e2 <PIN_LOW>
 80150e8:	2180      	movs	r1, #128	; 0x80
 80150ea:	488b      	ldr	r0, [pc, #556]	; (8015318 <readGRAM+0x16cc>)
 80150ec:	f7fc fb79 	bl	80117e2 <PIN_LOW>
 80150f0:	2180      	movs	r1, #128	; 0x80
 80150f2:	4889      	ldr	r0, [pc, #548]	; (8015318 <readGRAM+0x16cc>)
 80150f4:	f7fc fb75 	bl	80117e2 <PIN_LOW>
 80150f8:	2180      	movs	r1, #128	; 0x80
 80150fa:	4887      	ldr	r0, [pc, #540]	; (8015318 <readGRAM+0x16cc>)
 80150fc:	f7fc fb71 	bl	80117e2 <PIN_LOW>
 8015100:	2180      	movs	r1, #128	; 0x80
 8015102:	4885      	ldr	r0, [pc, #532]	; (8015318 <readGRAM+0x16cc>)
 8015104:	f7fc fb6d 	bl	80117e2 <PIN_LOW>
 8015108:	2180      	movs	r1, #128	; 0x80
 801510a:	4883      	ldr	r0, [pc, #524]	; (8015318 <readGRAM+0x16cc>)
 801510c:	f7fc fb69 	bl	80117e2 <PIN_LOW>
 8015110:	2180      	movs	r1, #128	; 0x80
 8015112:	4881      	ldr	r0, [pc, #516]	; (8015318 <readGRAM+0x16cc>)
 8015114:	f7fc fb65 	bl	80117e2 <PIN_LOW>
 8015118:	2180      	movs	r1, #128	; 0x80
 801511a:	487f      	ldr	r0, [pc, #508]	; (8015318 <readGRAM+0x16cc>)
 801511c:	f7fc fb61 	bl	80117e2 <PIN_LOW>
 8015120:	2180      	movs	r1, #128	; 0x80
 8015122:	487d      	ldr	r0, [pc, #500]	; (8015318 <readGRAM+0x16cc>)
 8015124:	f7fc fb5d 	bl	80117e2 <PIN_LOW>
 8015128:	2180      	movs	r1, #128	; 0x80
 801512a:	487b      	ldr	r0, [pc, #492]	; (8015318 <readGRAM+0x16cc>)
 801512c:	f7fc fb59 	bl	80117e2 <PIN_LOW>
 8015130:	2180      	movs	r1, #128	; 0x80
 8015132:	4879      	ldr	r0, [pc, #484]	; (8015318 <readGRAM+0x16cc>)
 8015134:	f7fc fb55 	bl	80117e2 <PIN_LOW>
 8015138:	2180      	movs	r1, #128	; 0x80
 801513a:	4877      	ldr	r0, [pc, #476]	; (8015318 <readGRAM+0x16cc>)
 801513c:	f7fc fb51 	bl	80117e2 <PIN_LOW>
 8015140:	2180      	movs	r1, #128	; 0x80
 8015142:	4875      	ldr	r0, [pc, #468]	; (8015318 <readGRAM+0x16cc>)
 8015144:	f7fc fb4d 	bl	80117e2 <PIN_LOW>
 8015148:	2180      	movs	r1, #128	; 0x80
 801514a:	4873      	ldr	r0, [pc, #460]	; (8015318 <readGRAM+0x16cc>)
 801514c:	f7fc fb49 	bl	80117e2 <PIN_LOW>
 8015150:	2180      	movs	r1, #128	; 0x80
 8015152:	4871      	ldr	r0, [pc, #452]	; (8015318 <readGRAM+0x16cc>)
 8015154:	f7fc fb45 	bl	80117e2 <PIN_LOW>
 8015158:	2180      	movs	r1, #128	; 0x80
 801515a:	486f      	ldr	r0, [pc, #444]	; (8015318 <readGRAM+0x16cc>)
 801515c:	f7fc fb41 	bl	80117e2 <PIN_LOW>
 8015160:	2180      	movs	r1, #128	; 0x80
 8015162:	486d      	ldr	r0, [pc, #436]	; (8015318 <readGRAM+0x16cc>)
 8015164:	f7fc fb3d 	bl	80117e2 <PIN_LOW>
 8015168:	2180      	movs	r1, #128	; 0x80
 801516a:	486b      	ldr	r0, [pc, #428]	; (8015318 <readGRAM+0x16cc>)
 801516c:	f7fc fb39 	bl	80117e2 <PIN_LOW>
 8015170:	2180      	movs	r1, #128	; 0x80
 8015172:	4869      	ldr	r0, [pc, #420]	; (8015318 <readGRAM+0x16cc>)
 8015174:	f7fc fb35 	bl	80117e2 <PIN_LOW>
 8015178:	2180      	movs	r1, #128	; 0x80
 801517a:	4867      	ldr	r0, [pc, #412]	; (8015318 <readGRAM+0x16cc>)
 801517c:	f7fc fb31 	bl	80117e2 <PIN_LOW>
 8015180:	2180      	movs	r1, #128	; 0x80
 8015182:	4865      	ldr	r0, [pc, #404]	; (8015318 <readGRAM+0x16cc>)
 8015184:	f7fc fb2d 	bl	80117e2 <PIN_LOW>
 8015188:	2180      	movs	r1, #128	; 0x80
 801518a:	4863      	ldr	r0, [pc, #396]	; (8015318 <readGRAM+0x16cc>)
 801518c:	f7fc fb29 	bl	80117e2 <PIN_LOW>
 8015190:	2180      	movs	r1, #128	; 0x80
 8015192:	4861      	ldr	r0, [pc, #388]	; (8015318 <readGRAM+0x16cc>)
 8015194:	f7fc fb25 	bl	80117e2 <PIN_LOW>
 8015198:	2180      	movs	r1, #128	; 0x80
 801519a:	485f      	ldr	r0, [pc, #380]	; (8015318 <readGRAM+0x16cc>)
 801519c:	f7fc fb21 	bl	80117e2 <PIN_LOW>
 80151a0:	2180      	movs	r1, #128	; 0x80
 80151a2:	485d      	ldr	r0, [pc, #372]	; (8015318 <readGRAM+0x16cc>)
 80151a4:	f7fc fb1d 	bl	80117e2 <PIN_LOW>
 80151a8:	4b5c      	ldr	r3, [pc, #368]	; (801531c <readGRAM+0x16d0>)
 80151aa:	691b      	ldr	r3, [r3, #16]
 80151ac:	0b1b      	lsrs	r3, r3, #12
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	f003 0301 	and.w	r3, r3, #1
 80151b4:	b2da      	uxtb	r2, r3
 80151b6:	4b58      	ldr	r3, [pc, #352]	; (8015318 <readGRAM+0x16cc>)
 80151b8:	691b      	ldr	r3, [r3, #16]
 80151ba:	0b9b      	lsrs	r3, r3, #14
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	f003 0302 	and.w	r3, r3, #2
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	4313      	orrs	r3, r2
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	4b54      	ldr	r3, [pc, #336]	; (801531c <readGRAM+0x16d0>)
 80151ca:	691b      	ldr	r3, [r3, #16]
 80151cc:	0b5b      	lsrs	r3, r3, #13
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	f003 0304 	and.w	r3, r3, #4
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	4313      	orrs	r3, r2
 80151d8:	b2da      	uxtb	r2, r3
 80151da:	4b51      	ldr	r3, [pc, #324]	; (8015320 <readGRAM+0x16d4>)
 80151dc:	691b      	ldr	r3, [r3, #16]
 80151de:	0a9b      	lsrs	r3, r3, #10
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	f003 0308 	and.w	r3, r3, #8
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	4313      	orrs	r3, r2
 80151ea:	b2da      	uxtb	r2, r3
 80151ec:	4b4b      	ldr	r3, [pc, #300]	; (801531c <readGRAM+0x16d0>)
 80151ee:	691b      	ldr	r3, [r3, #16]
 80151f0:	0a9b      	lsrs	r3, r3, #10
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	f003 0310 	and.w	r3, r3, #16
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	4313      	orrs	r3, r2
 80151fc:	b2da      	uxtb	r2, r3
 80151fe:	4b48      	ldr	r3, [pc, #288]	; (8015320 <readGRAM+0x16d4>)
 8015200:	691b      	ldr	r3, [r3, #16]
 8015202:	099b      	lsrs	r3, r3, #6
 8015204:	b2db      	uxtb	r3, r3
 8015206:	f003 0320 	and.w	r3, r3, #32
 801520a:	b2db      	uxtb	r3, r3
 801520c:	4313      	orrs	r3, r2
 801520e:	b2da      	uxtb	r2, r3
 8015210:	4b43      	ldr	r3, [pc, #268]	; (8015320 <readGRAM+0x16d4>)
 8015212:	691b      	ldr	r3, [r3, #16]
 8015214:	08db      	lsrs	r3, r3, #3
 8015216:	b2db      	uxtb	r3, r3
 8015218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801521c:	b2db      	uxtb	r3, r3
 801521e:	4313      	orrs	r3, r2
 8015220:	b2da      	uxtb	r2, r3
 8015222:	4b3e      	ldr	r3, [pc, #248]	; (801531c <readGRAM+0x16d0>)
 8015224:	691b      	ldr	r3, [r3, #16]
 8015226:	099b      	lsrs	r3, r3, #6
 8015228:	b2db      	uxtb	r3, r3
 801522a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801522e:	b2db      	uxtb	r3, r3
 8015230:	4313      	orrs	r3, r2
 8015232:	75bb      	strb	r3, [r7, #22]
 8015234:	2180      	movs	r1, #128	; 0x80
 8015236:	4838      	ldr	r0, [pc, #224]	; (8015318 <readGRAM+0x16cc>)
 8015238:	f7fc fae3 	bl	8011802 <PIN_HIGH>
 801523c:	2180      	movs	r1, #128	; 0x80
 801523e:	4836      	ldr	r0, [pc, #216]	; (8015318 <readGRAM+0x16cc>)
 8015240:	f7fc fadf 	bl	8011802 <PIN_HIGH>
 8015244:	2180      	movs	r1, #128	; 0x80
 8015246:	4834      	ldr	r0, [pc, #208]	; (8015318 <readGRAM+0x16cc>)
 8015248:	f7fc fadb 	bl	8011802 <PIN_HIGH>
 801524c:	2180      	movs	r1, #128	; 0x80
 801524e:	4832      	ldr	r0, [pc, #200]	; (8015318 <readGRAM+0x16cc>)
 8015250:	f7fc fac7 	bl	80117e2 <PIN_LOW>
 8015254:	2180      	movs	r1, #128	; 0x80
 8015256:	4830      	ldr	r0, [pc, #192]	; (8015318 <readGRAM+0x16cc>)
 8015258:	f7fc fac3 	bl	80117e2 <PIN_LOW>
 801525c:	2180      	movs	r1, #128	; 0x80
 801525e:	482e      	ldr	r0, [pc, #184]	; (8015318 <readGRAM+0x16cc>)
 8015260:	f7fc fabf 	bl	80117e2 <PIN_LOW>
 8015264:	2180      	movs	r1, #128	; 0x80
 8015266:	482c      	ldr	r0, [pc, #176]	; (8015318 <readGRAM+0x16cc>)
 8015268:	f7fc fabb 	bl	80117e2 <PIN_LOW>
 801526c:	2180      	movs	r1, #128	; 0x80
 801526e:	482a      	ldr	r0, [pc, #168]	; (8015318 <readGRAM+0x16cc>)
 8015270:	f7fc fab7 	bl	80117e2 <PIN_LOW>
 8015274:	2180      	movs	r1, #128	; 0x80
 8015276:	4828      	ldr	r0, [pc, #160]	; (8015318 <readGRAM+0x16cc>)
 8015278:	f7fc fab3 	bl	80117e2 <PIN_LOW>
 801527c:	2180      	movs	r1, #128	; 0x80
 801527e:	4826      	ldr	r0, [pc, #152]	; (8015318 <readGRAM+0x16cc>)
 8015280:	f7fc faaf 	bl	80117e2 <PIN_LOW>
 8015284:	2180      	movs	r1, #128	; 0x80
 8015286:	4824      	ldr	r0, [pc, #144]	; (8015318 <readGRAM+0x16cc>)
 8015288:	f7fc faab 	bl	80117e2 <PIN_LOW>
 801528c:	2180      	movs	r1, #128	; 0x80
 801528e:	4822      	ldr	r0, [pc, #136]	; (8015318 <readGRAM+0x16cc>)
 8015290:	f7fc faa7 	bl	80117e2 <PIN_LOW>
 8015294:	2180      	movs	r1, #128	; 0x80
 8015296:	4820      	ldr	r0, [pc, #128]	; (8015318 <readGRAM+0x16cc>)
 8015298:	f7fc faa3 	bl	80117e2 <PIN_LOW>
 801529c:	2180      	movs	r1, #128	; 0x80
 801529e:	481e      	ldr	r0, [pc, #120]	; (8015318 <readGRAM+0x16cc>)
 80152a0:	f7fc fa9f 	bl	80117e2 <PIN_LOW>
 80152a4:	2180      	movs	r1, #128	; 0x80
 80152a6:	481c      	ldr	r0, [pc, #112]	; (8015318 <readGRAM+0x16cc>)
 80152a8:	f7fc fa9b 	bl	80117e2 <PIN_LOW>
 80152ac:	2180      	movs	r1, #128	; 0x80
 80152ae:	481a      	ldr	r0, [pc, #104]	; (8015318 <readGRAM+0x16cc>)
 80152b0:	f7fc fa97 	bl	80117e2 <PIN_LOW>
 80152b4:	2180      	movs	r1, #128	; 0x80
 80152b6:	4818      	ldr	r0, [pc, #96]	; (8015318 <readGRAM+0x16cc>)
 80152b8:	f7fc fa93 	bl	80117e2 <PIN_LOW>
 80152bc:	2180      	movs	r1, #128	; 0x80
 80152be:	4816      	ldr	r0, [pc, #88]	; (8015318 <readGRAM+0x16cc>)
 80152c0:	f7fc fa8f 	bl	80117e2 <PIN_LOW>
 80152c4:	2180      	movs	r1, #128	; 0x80
 80152c6:	4814      	ldr	r0, [pc, #80]	; (8015318 <readGRAM+0x16cc>)
 80152c8:	f7fc fa8b 	bl	80117e2 <PIN_LOW>
 80152cc:	2180      	movs	r1, #128	; 0x80
 80152ce:	4812      	ldr	r0, [pc, #72]	; (8015318 <readGRAM+0x16cc>)
 80152d0:	f7fc fa87 	bl	80117e2 <PIN_LOW>
 80152d4:	2180      	movs	r1, #128	; 0x80
 80152d6:	4810      	ldr	r0, [pc, #64]	; (8015318 <readGRAM+0x16cc>)
 80152d8:	f7fc fa83 	bl	80117e2 <PIN_LOW>
 80152dc:	2180      	movs	r1, #128	; 0x80
 80152de:	480e      	ldr	r0, [pc, #56]	; (8015318 <readGRAM+0x16cc>)
 80152e0:	f7fc fa7f 	bl	80117e2 <PIN_LOW>
 80152e4:	2180      	movs	r1, #128	; 0x80
 80152e6:	480c      	ldr	r0, [pc, #48]	; (8015318 <readGRAM+0x16cc>)
 80152e8:	f7fc fa7b 	bl	80117e2 <PIN_LOW>
 80152ec:	2180      	movs	r1, #128	; 0x80
 80152ee:	480a      	ldr	r0, [pc, #40]	; (8015318 <readGRAM+0x16cc>)
 80152f0:	f7fc fa77 	bl	80117e2 <PIN_LOW>
 80152f4:	2180      	movs	r1, #128	; 0x80
 80152f6:	4808      	ldr	r0, [pc, #32]	; (8015318 <readGRAM+0x16cc>)
 80152f8:	f7fc fa73 	bl	80117e2 <PIN_LOW>
 80152fc:	2180      	movs	r1, #128	; 0x80
 80152fe:	4806      	ldr	r0, [pc, #24]	; (8015318 <readGRAM+0x16cc>)
 8015300:	f7fc fa6f 	bl	80117e2 <PIN_LOW>
 8015304:	2180      	movs	r1, #128	; 0x80
 8015306:	4804      	ldr	r0, [pc, #16]	; (8015318 <readGRAM+0x16cc>)
 8015308:	f7fc fa6b 	bl	80117e2 <PIN_LOW>
 801530c:	2180      	movs	r1, #128	; 0x80
 801530e:	4802      	ldr	r0, [pc, #8]	; (8015318 <readGRAM+0x16cc>)
 8015310:	f7fc fa67 	bl	80117e2 <PIN_LOW>
 8015314:	2180      	movs	r1, #128	; 0x80
 8015316:	e005      	b.n	8015324 <readGRAM+0x16d8>
 8015318:	40020c00 	.word	0x40020c00
 801531c:	40021400 	.word	0x40021400
 8015320:	40021000 	.word	0x40021000
 8015324:	48a4      	ldr	r0, [pc, #656]	; (80155b8 <readGRAM+0x196c>)
 8015326:	f7fc fa5c 	bl	80117e2 <PIN_LOW>
 801532a:	2180      	movs	r1, #128	; 0x80
 801532c:	48a2      	ldr	r0, [pc, #648]	; (80155b8 <readGRAM+0x196c>)
 801532e:	f7fc fa58 	bl	80117e2 <PIN_LOW>
 8015332:	2180      	movs	r1, #128	; 0x80
 8015334:	48a0      	ldr	r0, [pc, #640]	; (80155b8 <readGRAM+0x196c>)
 8015336:	f7fc fa54 	bl	80117e2 <PIN_LOW>
 801533a:	2180      	movs	r1, #128	; 0x80
 801533c:	489e      	ldr	r0, [pc, #632]	; (80155b8 <readGRAM+0x196c>)
 801533e:	f7fc fa50 	bl	80117e2 <PIN_LOW>
 8015342:	2180      	movs	r1, #128	; 0x80
 8015344:	489c      	ldr	r0, [pc, #624]	; (80155b8 <readGRAM+0x196c>)
 8015346:	f7fc fa4c 	bl	80117e2 <PIN_LOW>
 801534a:	2180      	movs	r1, #128	; 0x80
 801534c:	489a      	ldr	r0, [pc, #616]	; (80155b8 <readGRAM+0x196c>)
 801534e:	f7fc fa48 	bl	80117e2 <PIN_LOW>
 8015352:	2180      	movs	r1, #128	; 0x80
 8015354:	4898      	ldr	r0, [pc, #608]	; (80155b8 <readGRAM+0x196c>)
 8015356:	f7fc fa44 	bl	80117e2 <PIN_LOW>
 801535a:	2180      	movs	r1, #128	; 0x80
 801535c:	4896      	ldr	r0, [pc, #600]	; (80155b8 <readGRAM+0x196c>)
 801535e:	f7fc fa40 	bl	80117e2 <PIN_LOW>
 8015362:	2180      	movs	r1, #128	; 0x80
 8015364:	4894      	ldr	r0, [pc, #592]	; (80155b8 <readGRAM+0x196c>)
 8015366:	f7fc fa3c 	bl	80117e2 <PIN_LOW>
 801536a:	2180      	movs	r1, #128	; 0x80
 801536c:	4892      	ldr	r0, [pc, #584]	; (80155b8 <readGRAM+0x196c>)
 801536e:	f7fc fa38 	bl	80117e2 <PIN_LOW>
 8015372:	2180      	movs	r1, #128	; 0x80
 8015374:	4890      	ldr	r0, [pc, #576]	; (80155b8 <readGRAM+0x196c>)
 8015376:	f7fc fa34 	bl	80117e2 <PIN_LOW>
 801537a:	2180      	movs	r1, #128	; 0x80
 801537c:	488e      	ldr	r0, [pc, #568]	; (80155b8 <readGRAM+0x196c>)
 801537e:	f7fc fa30 	bl	80117e2 <PIN_LOW>
 8015382:	2180      	movs	r1, #128	; 0x80
 8015384:	488c      	ldr	r0, [pc, #560]	; (80155b8 <readGRAM+0x196c>)
 8015386:	f7fc fa2c 	bl	80117e2 <PIN_LOW>
 801538a:	2180      	movs	r1, #128	; 0x80
 801538c:	488a      	ldr	r0, [pc, #552]	; (80155b8 <readGRAM+0x196c>)
 801538e:	f7fc fa28 	bl	80117e2 <PIN_LOW>
 8015392:	2180      	movs	r1, #128	; 0x80
 8015394:	4888      	ldr	r0, [pc, #544]	; (80155b8 <readGRAM+0x196c>)
 8015396:	f7fc fa24 	bl	80117e2 <PIN_LOW>
 801539a:	2180      	movs	r1, #128	; 0x80
 801539c:	4886      	ldr	r0, [pc, #536]	; (80155b8 <readGRAM+0x196c>)
 801539e:	f7fc fa20 	bl	80117e2 <PIN_LOW>
 80153a2:	2180      	movs	r1, #128	; 0x80
 80153a4:	4884      	ldr	r0, [pc, #528]	; (80155b8 <readGRAM+0x196c>)
 80153a6:	f7fc fa1c 	bl	80117e2 <PIN_LOW>
 80153aa:	2180      	movs	r1, #128	; 0x80
 80153ac:	4882      	ldr	r0, [pc, #520]	; (80155b8 <readGRAM+0x196c>)
 80153ae:	f7fc fa18 	bl	80117e2 <PIN_LOW>
 80153b2:	2180      	movs	r1, #128	; 0x80
 80153b4:	4880      	ldr	r0, [pc, #512]	; (80155b8 <readGRAM+0x196c>)
 80153b6:	f7fc fa14 	bl	80117e2 <PIN_LOW>
 80153ba:	2180      	movs	r1, #128	; 0x80
 80153bc:	487e      	ldr	r0, [pc, #504]	; (80155b8 <readGRAM+0x196c>)
 80153be:	f7fc fa10 	bl	80117e2 <PIN_LOW>
 80153c2:	2180      	movs	r1, #128	; 0x80
 80153c4:	487c      	ldr	r0, [pc, #496]	; (80155b8 <readGRAM+0x196c>)
 80153c6:	f7fc fa0c 	bl	80117e2 <PIN_LOW>
 80153ca:	2180      	movs	r1, #128	; 0x80
 80153cc:	487a      	ldr	r0, [pc, #488]	; (80155b8 <readGRAM+0x196c>)
 80153ce:	f7fc fa08 	bl	80117e2 <PIN_LOW>
 80153d2:	2180      	movs	r1, #128	; 0x80
 80153d4:	4878      	ldr	r0, [pc, #480]	; (80155b8 <readGRAM+0x196c>)
 80153d6:	f7fc fa04 	bl	80117e2 <PIN_LOW>
 80153da:	2180      	movs	r1, #128	; 0x80
 80153dc:	4876      	ldr	r0, [pc, #472]	; (80155b8 <readGRAM+0x196c>)
 80153de:	f7fc fa00 	bl	80117e2 <PIN_LOW>
 80153e2:	2180      	movs	r1, #128	; 0x80
 80153e4:	4874      	ldr	r0, [pc, #464]	; (80155b8 <readGRAM+0x196c>)
 80153e6:	f7fc f9fc 	bl	80117e2 <PIN_LOW>
 80153ea:	2180      	movs	r1, #128	; 0x80
 80153ec:	4872      	ldr	r0, [pc, #456]	; (80155b8 <readGRAM+0x196c>)
 80153ee:	f7fc f9f8 	bl	80117e2 <PIN_LOW>
 80153f2:	4b72      	ldr	r3, [pc, #456]	; (80155bc <readGRAM+0x1970>)
 80153f4:	691b      	ldr	r3, [r3, #16]
 80153f6:	0b1b      	lsrs	r3, r3, #12
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	f003 0301 	and.w	r3, r3, #1
 80153fe:	b29a      	uxth	r2, r3
 8015400:	4b6d      	ldr	r3, [pc, #436]	; (80155b8 <readGRAM+0x196c>)
 8015402:	691b      	ldr	r3, [r3, #16]
 8015404:	0b9b      	lsrs	r3, r3, #14
 8015406:	b29b      	uxth	r3, r3
 8015408:	f003 0302 	and.w	r3, r3, #2
 801540c:	b29b      	uxth	r3, r3
 801540e:	4313      	orrs	r3, r2
 8015410:	b29a      	uxth	r2, r3
 8015412:	4b6a      	ldr	r3, [pc, #424]	; (80155bc <readGRAM+0x1970>)
 8015414:	691b      	ldr	r3, [r3, #16]
 8015416:	0b5b      	lsrs	r3, r3, #13
 8015418:	b29b      	uxth	r3, r3
 801541a:	f003 0304 	and.w	r3, r3, #4
 801541e:	b29b      	uxth	r3, r3
 8015420:	4313      	orrs	r3, r2
 8015422:	b29a      	uxth	r2, r3
 8015424:	4b66      	ldr	r3, [pc, #408]	; (80155c0 <readGRAM+0x1974>)
 8015426:	691b      	ldr	r3, [r3, #16]
 8015428:	0a9b      	lsrs	r3, r3, #10
 801542a:	b29b      	uxth	r3, r3
 801542c:	f003 0308 	and.w	r3, r3, #8
 8015430:	b29b      	uxth	r3, r3
 8015432:	4313      	orrs	r3, r2
 8015434:	b29a      	uxth	r2, r3
 8015436:	4b61      	ldr	r3, [pc, #388]	; (80155bc <readGRAM+0x1970>)
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	0a9b      	lsrs	r3, r3, #10
 801543c:	b29b      	uxth	r3, r3
 801543e:	f003 0310 	and.w	r3, r3, #16
 8015442:	b29b      	uxth	r3, r3
 8015444:	4313      	orrs	r3, r2
 8015446:	b29a      	uxth	r2, r3
 8015448:	4b5d      	ldr	r3, [pc, #372]	; (80155c0 <readGRAM+0x1974>)
 801544a:	691b      	ldr	r3, [r3, #16]
 801544c:	099b      	lsrs	r3, r3, #6
 801544e:	b29b      	uxth	r3, r3
 8015450:	f003 0320 	and.w	r3, r3, #32
 8015454:	b29b      	uxth	r3, r3
 8015456:	4313      	orrs	r3, r2
 8015458:	b29a      	uxth	r2, r3
 801545a:	4b59      	ldr	r3, [pc, #356]	; (80155c0 <readGRAM+0x1974>)
 801545c:	691b      	ldr	r3, [r3, #16]
 801545e:	08db      	lsrs	r3, r3, #3
 8015460:	b29b      	uxth	r3, r3
 8015462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015466:	b29b      	uxth	r3, r3
 8015468:	4313      	orrs	r3, r2
 801546a:	b29a      	uxth	r2, r3
 801546c:	4b53      	ldr	r3, [pc, #332]	; (80155bc <readGRAM+0x1970>)
 801546e:	691b      	ldr	r3, [r3, #16]
 8015470:	099b      	lsrs	r3, r3, #6
 8015472:	b29b      	uxth	r3, r3
 8015474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015478:	b29b      	uxth	r3, r3
 801547a:	4313      	orrs	r3, r2
 801547c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801547e:	2180      	movs	r1, #128	; 0x80
 8015480:	484d      	ldr	r0, [pc, #308]	; (80155b8 <readGRAM+0x196c>)
 8015482:	f7fc f9be 	bl	8011802 <PIN_HIGH>
 8015486:	2180      	movs	r1, #128	; 0x80
 8015488:	484b      	ldr	r0, [pc, #300]	; (80155b8 <readGRAM+0x196c>)
 801548a:	f7fc f9ba 	bl	8011802 <PIN_HIGH>
 801548e:	7dbb      	ldrb	r3, [r7, #22]
 8015490:	021b      	lsls	r3, r3, #8
 8015492:	b21a      	sxth	r2, r3
 8015494:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015498:	4313      	orrs	r3, r2
 801549a:	b21b      	sxth	r3, r3
 801549c:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 801549e:	4b49      	ldr	r3, [pc, #292]	; (80155c4 <readGRAM+0x1978>)
 80154a0:	881b      	ldrh	r3, [r3, #0]
 80154a2:	f003 0308 	and.w	r3, r3, #8
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d009      	beq.n	80154be <readGRAM+0x1872>
                    ret = (ret >> 8) | (ret << 8);
 80154aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154ac:	0a1b      	lsrs	r3, r3, #8
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	b21a      	sxth	r2, r3
 80154b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154b4:	021b      	lsls	r3, r3, #8
 80154b6:	b21b      	sxth	r3, r3
 80154b8:	4313      	orrs	r3, r2
 80154ba:	b21b      	sxth	r3, r3
 80154bc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80154be:	4b41      	ldr	r3, [pc, #260]	; (80155c4 <readGRAM+0x1978>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	f003 0304 	and.w	r3, r3, #4
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d010      	beq.n	80154ec <readGRAM+0x18a0>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80154ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80154ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80154d2:	b21a      	sxth	r2, r3
 80154d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154d6:	0adb      	lsrs	r3, r3, #11
 80154d8:	b29b      	uxth	r3, r3
 80154da:	b21b      	sxth	r3, r3
 80154dc:	4313      	orrs	r3, r2
 80154de:	b21a      	sxth	r2, r3
 80154e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154e2:	02db      	lsls	r3, r3, #11
 80154e4:	b21b      	sxth	r3, r3
 80154e6:	4313      	orrs	r3, r2
 80154e8:	b21b      	sxth	r3, r3
 80154ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80154ec:	4b36      	ldr	r3, [pc, #216]	; (80155c8 <readGRAM+0x197c>)
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d005      	beq.n	8015500 <readGRAM+0x18b4>
 80154f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fc f9fa 	bl	80118f0 <color555_to_565>
 80154fc:	4603      	mov	r3, r0
 80154fe:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	1c9a      	adds	r2, r3, #2
 8015504:	60ba      	str	r2, [r7, #8]
 8015506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015508:	801a      	strh	r2, [r3, #0]
            n--;
 801550a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801550e:	b29b      	uxth	r3, r3
 8015510:	3b01      	subs	r3, #1
 8015512:	b29b      	uxth	r3, r3
 8015514:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8015516:	4b2b      	ldr	r3, [pc, #172]	; (80155c4 <readGRAM+0x1978>)
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	f003 0302 	and.w	r3, r3, #2
 801551e:	2b00      	cmp	r3, #0
 8015520:	d005      	beq.n	801552e <readGRAM+0x18e2>
        while (n)
 8015522:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015526:	2b00      	cmp	r3, #0
 8015528:	f47f a9da 	bne.w	80148e0 <readGRAM+0xc94>
 801552c:	e000      	b.n	8015530 <readGRAM+0x18e4>
                break;
 801552e:	bf00      	nop
        }
        if (++col >= w) {
 8015530:	8bfb      	ldrh	r3, [r7, #30]
 8015532:	3301      	adds	r3, #1
 8015534:	b29b      	uxth	r3, r3
 8015536:	83fb      	strh	r3, [r7, #30]
 8015538:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801553c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015540:	429a      	cmp	r2, r3
 8015542:	db0d      	blt.n	8015560 <readGRAM+0x1914>
            col = 0;
 8015544:	2300      	movs	r3, #0
 8015546:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8015548:	8c3b      	ldrh	r3, [r7, #32]
 801554a:	3301      	adds	r3, #1
 801554c:	b29b      	uxth	r3, r3
 801554e:	843b      	strh	r3, [r7, #32]
 8015550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015554:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8015558:	429a      	cmp	r2, r3
 801555a:	db01      	blt.n	8015560 <readGRAM+0x1914>
                row = 0;
 801555c:	2300      	movs	r3, #0
 801555e:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8015560:	2180      	movs	r1, #128	; 0x80
 8015562:	4815      	ldr	r0, [pc, #84]	; (80155b8 <readGRAM+0x196c>)
 8015564:	f7fc f94d 	bl	8011802 <PIN_HIGH>
        CS_IDLE;
 8015568:	2108      	movs	r1, #8
 801556a:	4814      	ldr	r0, [pc, #80]	; (80155bc <readGRAM+0x1970>)
 801556c:	f7fc f949 	bl	8011802 <PIN_HIGH>
        setWriteDir();
 8015570:	f7fc faa6 	bl	8011ac0 <setWriteDir>
    while (n > 0) {
 8015574:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015578:	2b00      	cmp	r3, #0
 801557a:	f73e abb3 	bgt.w	8013ce4 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 801557e:	4b11      	ldr	r3, [pc, #68]	; (80155c4 <readGRAM+0x1978>)
 8015580:	881b      	ldrh	r3, [r3, #0]
 8015582:	f003 0301 	and.w	r3, r3, #1
 8015586:	2b00      	cmp	r3, #0
 8015588:	d110      	bne.n	80155ac <readGRAM+0x1960>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 801558a:	f7fc f979 	bl	8011880 <width>
 801558e:	4603      	mov	r3, r0
 8015590:	3b01      	subs	r3, #1
 8015592:	b29b      	uxth	r3, r3
 8015594:	b21c      	sxth	r4, r3
 8015596:	f7fc f97f 	bl	8011898 <height>
 801559a:	4603      	mov	r3, r0
 801559c:	3b01      	subs	r3, #1
 801559e:	b29b      	uxth	r3, r3
 80155a0:	b21b      	sxth	r3, r3
 80155a2:	4622      	mov	r2, r4
 80155a4:	2100      	movs	r1, #0
 80155a6:	2000      	movs	r0, #0
 80155a8:	f000 fc12 	bl	8015dd0 <setAddrWindow>
    return 0;
 80155ac:	2300      	movs	r3, #0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	372c      	adds	r7, #44	; 0x2c
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd90      	pop	{r4, r7, pc}
 80155b6:	bf00      	nop
 80155b8:	40020c00 	.word	0x40020c00
 80155bc:	40021400 	.word	0x40021400
 80155c0:	40021000 	.word	0x40021000
 80155c4:	2000698e 	.word	0x2000698e
 80155c8:	20000219 	.word	0x20000219

080155cc <setRotation>:

void setRotation(uint8_t r)
{
 80155cc:	b590      	push	{r4, r7, lr}
 80155ce:	b087      	sub	sp, #28
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	4603      	mov	r3, r0
 80155d4:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80155d6:	4ba9      	ldr	r3, [pc, #676]	; (801587c <setRotation+0x2b0>)
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	f003 0303 	and.w	r3, r3, #3
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	4ba6      	ldr	r3, [pc, #664]	; (8015880 <setRotation+0x2b4>)
 80155e6:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80155e8:	4ba5      	ldr	r3, [pc, #660]	; (8015880 <setRotation+0x2b4>)
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	f003 0301 	and.w	r3, r3, #1
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d002      	beq.n	80155fa <setRotation+0x2e>
 80155f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80155f8:	e001      	b.n	80155fe <setRotation+0x32>
 80155fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80155fe:	4ba1      	ldr	r3, [pc, #644]	; (8015884 <setRotation+0x2b8>)
 8015600:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8015602:	4b9f      	ldr	r3, [pc, #636]	; (8015880 <setRotation+0x2b4>)
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	f003 0301 	and.w	r3, r3, #1
 801560a:	2b00      	cmp	r3, #0
 801560c:	d002      	beq.n	8015614 <setRotation+0x48>
 801560e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015612:	e001      	b.n	8015618 <setRotation+0x4c>
 8015614:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015618:	4b9b      	ldr	r3, [pc, #620]	; (8015888 <setRotation+0x2bc>)
 801561a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 801561c:	4b98      	ldr	r3, [pc, #608]	; (8015880 <setRotation+0x2b4>)
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	2b03      	cmp	r3, #3
 8015622:	d817      	bhi.n	8015654 <setRotation+0x88>
 8015624:	a201      	add	r2, pc, #4	; (adr r2, 801562c <setRotation+0x60>)
 8015626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801562a:	bf00      	nop
 801562c:	0801563d 	.word	0x0801563d
 8015630:	08015643 	.word	0x08015643
 8015634:	08015649 	.word	0x08015649
 8015638:	0801564f 	.word	0x0801564f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 801563c:	2348      	movs	r3, #72	; 0x48
 801563e:	72fb      	strb	r3, [r7, #11]
       break;
 8015640:	e008      	b.n	8015654 <setRotation+0x88>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8015642:	2328      	movs	r3, #40	; 0x28
 8015644:	72fb      	strb	r3, [r7, #11]
       break;
 8015646:	e005      	b.n	8015654 <setRotation+0x88>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8015648:	2398      	movs	r3, #152	; 0x98
 801564a:	72fb      	strb	r3, [r7, #11]
       break;
 801564c:	e002      	b.n	8015654 <setRotation+0x88>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 801564e:	23f8      	movs	r3, #248	; 0xf8
 8015650:	72fb      	strb	r3, [r7, #11]
       break;
 8015652:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8015654:	4b8d      	ldr	r3, [pc, #564]	; (801588c <setRotation+0x2c0>)
 8015656:	881b      	ldrh	r3, [r3, #0]
 8015658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801565c:	2b00      	cmp	r3, #0
 801565e:	d005      	beq.n	801566c <setRotation+0xa0>
       val ^= 0x80;
 8015660:	7afa      	ldrb	r2, [r7, #11]
 8015662:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8015666:	4053      	eors	r3, r2
 8015668:	b2db      	uxtb	r3, r3
 801566a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 801566c:	4b87      	ldr	r3, [pc, #540]	; (801588c <setRotation+0x2c0>)
 801566e:	881b      	ldrh	r3, [r3, #0]
 8015670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015674:	2b00      	cmp	r3, #0
 8015676:	d004      	beq.n	8015682 <setRotation+0xb6>
       val ^= 0x40;
 8015678:	7afb      	ldrb	r3, [r7, #11]
 801567a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 801567e:	b2db      	uxtb	r3, r3
 8015680:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8015682:	4b82      	ldr	r3, [pc, #520]	; (801588c <setRotation+0x2c0>)
 8015684:	881b      	ldrh	r3, [r3, #0]
 8015686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801568a:	2b00      	cmp	r3, #0
 801568c:	d004      	beq.n	8015698 <setRotation+0xcc>
       val ^= 0x08;
 801568e:	7afb      	ldrb	r3, [r7, #11]
 8015690:	f083 0308 	eor.w	r3, r3, #8
 8015694:	b2db      	uxtb	r3, r3
 8015696:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8015698:	4b7c      	ldr	r3, [pc, #496]	; (801588c <setRotation+0x2c0>)
 801569a:	881b      	ldrh	r3, [r3, #0]
 801569c:	f003 0301 	and.w	r3, r3, #1
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f000 811a 	beq.w	80158da <setRotation+0x30e>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80156a6:	4b7a      	ldr	r3, [pc, #488]	; (8015890 <setRotation+0x2c4>)
 80156a8:	881b      	ldrh	r3, [r3, #0]
 80156aa:	f646 0214 	movw	r2, #26644	; 0x6814
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d128      	bne.n	8015704 <setRotation+0x138>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80156b2:	7afb      	ldrb	r3, [r7, #11]
 80156b4:	b25b      	sxtb	r3, r3
 80156b6:	105b      	asrs	r3, r3, #1
 80156b8:	b25b      	sxtb	r3, r3
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156c0:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80156c2:	7afb      	ldrb	r3, [r7, #11]
 80156c4:	105b      	asrs	r3, r3, #1
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	f003 0320 	and.w	r3, r3, #32
 80156cc:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80156ce:	7afb      	ldrb	r3, [r7, #11]
 80156d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 80156d8:	2300      	movs	r3, #0
 80156da:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80156dc:	8a3b      	ldrh	r3, [r7, #16]
 80156de:	b2da      	uxtb	r2, r3
 80156e0:	89fb      	ldrh	r3, [r7, #14]
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	4313      	orrs	r3, r2
 80156e6:	b2db      	uxtb	r3, r3
 80156e8:	f043 0302 	orr.w	r3, r3, #2
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80156f0:	233b      	movs	r3, #59	; 0x3b
 80156f2:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80156f4:	f107 0308 	add.w	r3, r7, #8
 80156f8:	461a      	mov	r2, r3
 80156fa:	2103      	movs	r1, #3
 80156fc:	20b6      	movs	r0, #182	; 0xb6
 80156fe:	f7fc fe07 	bl	8012310 <WriteCmdParamN>
           goto common_MC;
 8015702:	e0a4      	b.n	801584e <setRotation+0x282>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8015704:	4b62      	ldr	r3, [pc, #392]	; (8015890 <setRotation+0x2c4>)
 8015706:	881b      	ldrh	r3, [r3, #0]
 8015708:	f641 1263 	movw	r2, #6499	; 0x1963
 801570c:	4293      	cmp	r3, r2
 801570e:	d00b      	beq.n	8015728 <setRotation+0x15c>
 8015710:	4b5f      	ldr	r3, [pc, #380]	; (8015890 <setRotation+0x2c4>)
 8015712:	881b      	ldrh	r3, [r3, #0]
 8015714:	f249 4281 	movw	r2, #38017	; 0x9481
 8015718:	4293      	cmp	r3, r2
 801571a:	d005      	beq.n	8015728 <setRotation+0x15c>
 801571c:	4b5c      	ldr	r3, [pc, #368]	; (8015890 <setRotation+0x2c4>)
 801571e:	881b      	ldrh	r3, [r3, #0]
 8015720:	f241 5211 	movw	r2, #5393	; 0x1511
 8015724:	4293      	cmp	r3, r2
 8015726:	d139      	bne.n	801579c <setRotation+0x1d0>
           if (val & 0x80)
 8015728:	7afb      	ldrb	r3, [r7, #11]
 801572a:	b25b      	sxtb	r3, r3
 801572c:	2b00      	cmp	r3, #0
 801572e:	da04      	bge.n	801573a <setRotation+0x16e>
               val |= 0x01;    //GS
 8015730:	7afb      	ldrb	r3, [r7, #11]
 8015732:	f043 0301 	orr.w	r3, r3, #1
 8015736:	b2db      	uxtb	r3, r3
 8015738:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 801573a:	7afb      	ldrb	r3, [r7, #11]
 801573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015740:	2b00      	cmp	r3, #0
 8015742:	d004      	beq.n	801574e <setRotation+0x182>
               val |= 0x02;    //SS
 8015744:	7afb      	ldrb	r3, [r7, #11]
 8015746:	f043 0302 	orr.w	r3, r3, #2
 801574a:	b2db      	uxtb	r3, r3
 801574c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 801574e:	4b50      	ldr	r3, [pc, #320]	; (8015890 <setRotation+0x2c4>)
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	f641 1263 	movw	r2, #6499	; 0x1963
 8015756:	4293      	cmp	r3, r2
 8015758:	d104      	bne.n	8015764 <setRotation+0x198>
 801575a:	7afb      	ldrb	r3, [r7, #11]
 801575c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015760:	b2db      	uxtb	r3, r3
 8015762:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8015764:	4b4a      	ldr	r3, [pc, #296]	; (8015890 <setRotation+0x2c4>)
 8015766:	881b      	ldrh	r3, [r3, #0]
 8015768:	f249 4281 	movw	r2, #38017	; 0x9481
 801576c:	4293      	cmp	r3, r2
 801576e:	d104      	bne.n	801577a <setRotation+0x1ae>
 8015770:	7afb      	ldrb	r3, [r7, #11]
 8015772:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8015776:	b2db      	uxtb	r3, r3
 8015778:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 801577a:	4b45      	ldr	r3, [pc, #276]	; (8015890 <setRotation+0x2c4>)
 801577c:	881b      	ldrh	r3, [r3, #0]
 801577e:	f241 5211 	movw	r2, #5393	; 0x1511
 8015782:	4293      	cmp	r3, r2
 8015784:	d160      	bne.n	8015848 <setRotation+0x27c>
               val &= ~0x10;   //remove ML
 8015786:	7afb      	ldrb	r3, [r7, #11]
 8015788:	f023 0310 	bic.w	r3, r3, #16
 801578c:	b2db      	uxtb	r3, r3
 801578e:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8015790:	7afb      	ldrb	r3, [r7, #11]
 8015792:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8015796:	b2db      	uxtb	r3, r3
 8015798:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 801579a:	e055      	b.n	8015848 <setRotation+0x27c>
      }
       else if (is8347) {
 801579c:	4b3d      	ldr	r3, [pc, #244]	; (8015894 <setRotation+0x2c8>)
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d053      	beq.n	801584c <setRotation+0x280>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80157a4:	4b3c      	ldr	r3, [pc, #240]	; (8015898 <setRotation+0x2cc>)
 80157a6:	2202      	movs	r2, #2
 80157a8:	801a      	strh	r2, [r3, #0]
 80157aa:	4b3c      	ldr	r3, [pc, #240]	; (801589c <setRotation+0x2d0>)
 80157ac:	2206      	movs	r2, #6
 80157ae:	801a      	strh	r2, [r3, #0]
 80157b0:	4b3b      	ldr	r3, [pc, #236]	; (80158a0 <setRotation+0x2d4>)
 80157b2:	2222      	movs	r2, #34	; 0x22
 80157b4:	801a      	strh	r2, [r3, #0]
 80157b6:	4b3b      	ldr	r3, [pc, #236]	; (80158a4 <setRotation+0x2d8>)
 80157b8:	2202      	movs	r2, #2
 80157ba:	801a      	strh	r2, [r3, #0]
 80157bc:	4b3a      	ldr	r3, [pc, #232]	; (80158a8 <setRotation+0x2dc>)
 80157be:	2204      	movs	r2, #4
 80157c0:	801a      	strh	r2, [r3, #0]
 80157c2:	4b3a      	ldr	r3, [pc, #232]	; (80158ac <setRotation+0x2e0>)
 80157c4:	2206      	movs	r2, #6
 80157c6:	801a      	strh	r2, [r3, #0]
 80157c8:	4b39      	ldr	r3, [pc, #228]	; (80158b0 <setRotation+0x2e4>)
 80157ca:	2208      	movs	r2, #8
 80157cc:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 80157ce:	4b30      	ldr	r3, [pc, #192]	; (8015890 <setRotation+0x2c4>)
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	2b65      	cmp	r3, #101	; 0x65
 80157d4:	d121      	bne.n	801581a <setRotation+0x24e>
               val |= 0x01;    //GS=1
 80157d6:	7afb      	ldrb	r3, [r7, #11]
 80157d8:	f043 0301 	orr.w	r3, r3, #1
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80157e0:	7afb      	ldrb	r3, [r7, #11]
 80157e2:	f003 0310 	and.w	r3, r3, #16
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d005      	beq.n	80157f6 <setRotation+0x22a>
 80157ea:	7afa      	ldrb	r2, [r7, #11]
 80157ec:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80157f0:	4053      	eors	r3, r2
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80157f6:	79fb      	ldrb	r3, [r7, #7]
 80157f8:	f003 0301 	and.w	r3, r3, #1
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d006      	beq.n	801580e <setRotation+0x242>
 8015800:	4b25      	ldr	r3, [pc, #148]	; (8015898 <setRotation+0x2cc>)
 8015802:	2282      	movs	r2, #130	; 0x82
 8015804:	801a      	strh	r2, [r3, #0]
 8015806:	4b25      	ldr	r3, [pc, #148]	; (801589c <setRotation+0x2d0>)
 8015808:	2280      	movs	r2, #128	; 0x80
 801580a:	801a      	strh	r2, [r3, #0]
 801580c:	e005      	b.n	801581a <setRotation+0x24e>
               else _MC = 0x80, _MP = 0x82;
 801580e:	4b22      	ldr	r3, [pc, #136]	; (8015898 <setRotation+0x2cc>)
 8015810:	2280      	movs	r2, #128	; 0x80
 8015812:	801a      	strh	r2, [r3, #0]
 8015814:	4b21      	ldr	r3, [pc, #132]	; (801589c <setRotation+0x2d0>)
 8015816:	2282      	movs	r2, #130	; 0x82
 8015818:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 801581a:	4b1d      	ldr	r3, [pc, #116]	; (8015890 <setRotation+0x2c4>)
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	f245 2252 	movw	r2, #21074	; 0x5252
 8015822:	4293      	cmp	r3, r2
 8015824:	d146      	bne.n	80158b4 <setRotation+0x2e8>
               val |= 0x02;   //VERT_SCROLLON
 8015826:	7afb      	ldrb	r3, [r7, #11]
 8015828:	f043 0302 	orr.w	r3, r3, #2
 801582c:	b2db      	uxtb	r3, r3
 801582e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8015830:	7afb      	ldrb	r3, [r7, #11]
 8015832:	f003 0310 	and.w	r3, r3, #16
 8015836:	2b00      	cmp	r3, #0
 8015838:	d03c      	beq.n	80158b4 <setRotation+0x2e8>
 801583a:	7afa      	ldrb	r2, [r7, #11]
 801583c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8015840:	4053      	eors	r3, r2
 8015842:	b2db      	uxtb	r3, r3
 8015844:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8015846:	e035      	b.n	80158b4 <setRotation+0x2e8>
           goto common_MC;
 8015848:	bf00      	nop
 801584a:	e000      	b.n	801584e <setRotation+0x282>
       }
     common_MC:
 801584c:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 801584e:	4b12      	ldr	r3, [pc, #72]	; (8015898 <setRotation+0x2cc>)
 8015850:	222a      	movs	r2, #42	; 0x2a
 8015852:	801a      	strh	r2, [r3, #0]
 8015854:	4b11      	ldr	r3, [pc, #68]	; (801589c <setRotation+0x2d0>)
 8015856:	222b      	movs	r2, #43	; 0x2b
 8015858:	801a      	strh	r2, [r3, #0]
 801585a:	4b11      	ldr	r3, [pc, #68]	; (80158a0 <setRotation+0x2d4>)
 801585c:	222c      	movs	r2, #44	; 0x2c
 801585e:	801a      	strh	r2, [r3, #0]
 8015860:	4b10      	ldr	r3, [pc, #64]	; (80158a4 <setRotation+0x2d8>)
 8015862:	222a      	movs	r2, #42	; 0x2a
 8015864:	801a      	strh	r2, [r3, #0]
 8015866:	4b10      	ldr	r3, [pc, #64]	; (80158a8 <setRotation+0x2dc>)
 8015868:	222a      	movs	r2, #42	; 0x2a
 801586a:	801a      	strh	r2, [r3, #0]
 801586c:	4b0f      	ldr	r3, [pc, #60]	; (80158ac <setRotation+0x2e0>)
 801586e:	222b      	movs	r2, #43	; 0x2b
 8015870:	801a      	strh	r2, [r3, #0]
 8015872:	4b0f      	ldr	r3, [pc, #60]	; (80158b0 <setRotation+0x2e4>)
 8015874:	222b      	movs	r2, #43	; 0x2b
 8015876:	801a      	strh	r2, [r3, #0]
 8015878:	e01d      	b.n	80158b6 <setRotation+0x2ea>
 801587a:	bf00      	nop
 801587c:	20006992 	.word	0x20006992
 8015880:	2000021b 	.word	0x2000021b
 8015884:	20000014 	.word	0x20000014
 8015888:	20000016 	.word	0x20000016
 801588c:	2000698e 	.word	0x2000698e
 8015890:	2000699c 	.word	0x2000699c
 8015894:	20000218 	.word	0x20000218
 8015898:	20006996 	.word	0x20006996
 801589c:	20006994 	.word	0x20006994
 80158a0:	2000698c 	.word	0x2000698c
 80158a4:	20006998 	.word	0x20006998
 80158a8:	200069a0 	.word	0x200069a0
 80158ac:	20006990 	.word	0x20006990
 80158b0:	2000699a 	.word	0x2000699a
			goto common_BGR;
 80158b4:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80158b6:	4b7c      	ldr	r3, [pc, #496]	; (8015aa8 <setRotation+0x4dc>)
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d001      	beq.n	80158c2 <setRotation+0x2f6>
 80158be:	2316      	movs	r3, #22
 80158c0:	e000      	b.n	80158c4 <setRotation+0x2f8>
 80158c2:	2336      	movs	r3, #54	; 0x36
 80158c4:	f107 020b 	add.w	r2, r7, #11
 80158c8:	2101      	movs	r1, #1
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7fc fd20 	bl	8012310 <WriteCmdParamN>
       _lcd_madctl = val;
 80158d0:	7afb      	ldrb	r3, [r7, #11]
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	4b75      	ldr	r3, [pc, #468]	; (8015aac <setRotation+0x4e0>)
 80158d6:	801a      	strh	r2, [r3, #0]
 80158d8:	e0a1      	b.n	8015a1e <setRotation+0x452>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 80158da:	4b75      	ldr	r3, [pc, #468]	; (8015ab0 <setRotation+0x4e4>)
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	f24b 5209 	movw	r2, #46345	; 0xb509
 80158e2:	4293      	cmp	r3, r2
 80158e4:	d013      	beq.n	801590e <setRotation+0x342>
 80158e6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80158ea:	4293      	cmp	r3, r2
 80158ec:	dc4d      	bgt.n	801598a <setRotation+0x3be>
 80158ee:	f249 3226 	movw	r2, #37670	; 0x9326
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d00b      	beq.n	801590e <setRotation+0x342>
 80158f6:	f249 3226 	movw	r2, #37670	; 0x9326
 80158fa:	4293      	cmp	r3, r2
 80158fc:	dc45      	bgt.n	801598a <setRotation+0x3be>
 80158fe:	f245 4220 	movw	r2, #21536	; 0x5420
 8015902:	4293      	cmp	r3, r2
 8015904:	d003      	beq.n	801590e <setRotation+0x342>
 8015906:	f247 7293 	movw	r2, #30611	; 0x7793
 801590a:	4293      	cmp	r3, r2
 801590c:	d13d      	bne.n	801598a <setRotation+0x3be>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 801590e:	4b69      	ldr	r3, [pc, #420]	; (8015ab4 <setRotation+0x4e8>)
 8015910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015914:	801a      	strh	r2, [r3, #0]
 8015916:	4b68      	ldr	r3, [pc, #416]	; (8015ab8 <setRotation+0x4ec>)
 8015918:	f240 2201 	movw	r2, #513	; 0x201
 801591c:	801a      	strh	r2, [r3, #0]
 801591e:	4b67      	ldr	r3, [pc, #412]	; (8015abc <setRotation+0x4f0>)
 8015920:	f240 2202 	movw	r2, #514	; 0x202
 8015924:	801a      	strh	r2, [r3, #0]
 8015926:	4b66      	ldr	r3, [pc, #408]	; (8015ac0 <setRotation+0x4f4>)
 8015928:	f44f 7204 	mov.w	r2, #528	; 0x210
 801592c:	801a      	strh	r2, [r3, #0]
 801592e:	4b65      	ldr	r3, [pc, #404]	; (8015ac4 <setRotation+0x4f8>)
 8015930:	f240 2211 	movw	r2, #529	; 0x211
 8015934:	801a      	strh	r2, [r3, #0]
 8015936:	4b64      	ldr	r3, [pc, #400]	; (8015ac8 <setRotation+0x4fc>)
 8015938:	f240 2212 	movw	r2, #530	; 0x212
 801593c:	801a      	strh	r2, [r3, #0]
 801593e:	4b63      	ldr	r3, [pc, #396]	; (8015acc <setRotation+0x500>)
 8015940:	f240 2213 	movw	r2, #531	; 0x213
 8015944:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8015946:	7afb      	ldrb	r3, [r7, #11]
 8015948:	b25b      	sxtb	r3, r3
 801594a:	b29a      	uxth	r2, r3
 801594c:	4b60      	ldr	r3, [pc, #384]	; (8015ad0 <setRotation+0x504>)
 801594e:	4013      	ands	r3, r2
 8015950:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8015952:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8015956:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8015958:	4b55      	ldr	r3, [pc, #340]	; (8015ab0 <setRotation+0x4e4>)
 801595a:	881b      	ldrh	r3, [r3, #0]
 801595c:	f249 3226 	movw	r2, #37670	; 0x9326
 8015960:	4293      	cmp	r3, r2
 8015962:	d005      	beq.n	8015970 <setRotation+0x3a4>
 8015964:	4b52      	ldr	r3, [pc, #328]	; (8015ab0 <setRotation+0x4e4>)
 8015966:	881b      	ldrh	r3, [r3, #0]
 8015968:	f245 4220 	movw	r2, #21536	; 0x5420
 801596c:	4293      	cmp	r3, r2
 801596e:	d102      	bne.n	8015976 <setRotation+0x3aa>
 8015970:	8abb      	ldrh	r3, [r7, #20]
 8015972:	085b      	lsrs	r3, r3, #1
 8015974:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8015976:	8a3a      	ldrh	r2, [r7, #16]
 8015978:	8abb      	ldrh	r3, [r7, #20]
 801597a:	4313      	orrs	r3, r2
 801597c:	b29b      	uxth	r3, r3
 801597e:	4619      	mov	r1, r3
 8015980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015984:	f7fc f844 	bl	8011a10 <WriteCmdData>
           goto common_SS;
 8015988:	e022      	b.n	80159d0 <setRotation+0x404>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 801598a:	4b4a      	ldr	r3, [pc, #296]	; (8015ab4 <setRotation+0x4e8>)
 801598c:	2220      	movs	r2, #32
 801598e:	801a      	strh	r2, [r3, #0]
 8015990:	4b49      	ldr	r3, [pc, #292]	; (8015ab8 <setRotation+0x4ec>)
 8015992:	2221      	movs	r2, #33	; 0x21
 8015994:	801a      	strh	r2, [r3, #0]
 8015996:	4b49      	ldr	r3, [pc, #292]	; (8015abc <setRotation+0x4f0>)
 8015998:	2222      	movs	r2, #34	; 0x22
 801599a:	801a      	strh	r2, [r3, #0]
 801599c:	4b48      	ldr	r3, [pc, #288]	; (8015ac0 <setRotation+0x4f4>)
 801599e:	2250      	movs	r2, #80	; 0x50
 80159a0:	801a      	strh	r2, [r3, #0]
 80159a2:	4b48      	ldr	r3, [pc, #288]	; (8015ac4 <setRotation+0x4f8>)
 80159a4:	2251      	movs	r2, #81	; 0x51
 80159a6:	801a      	strh	r2, [r3, #0]
 80159a8:	4b47      	ldr	r3, [pc, #284]	; (8015ac8 <setRotation+0x4fc>)
 80159aa:	2252      	movs	r2, #82	; 0x52
 80159ac:	801a      	strh	r2, [r3, #0]
 80159ae:	4b47      	ldr	r3, [pc, #284]	; (8015acc <setRotation+0x500>)
 80159b0:	2253      	movs	r2, #83	; 0x53
 80159b2:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80159b4:	7afb      	ldrb	r3, [r7, #11]
 80159b6:	b25b      	sxtb	r3, r3
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	4b45      	ldr	r3, [pc, #276]	; (8015ad0 <setRotation+0x504>)
 80159bc:	4013      	ands	r3, r2
 80159be:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80159c0:	8a3b      	ldrh	r3, [r7, #16]
 80159c2:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	4619      	mov	r1, r3
 80159ca:	2060      	movs	r0, #96	; 0x60
 80159cc:	f7fc f820 	bl	8011a10 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 80159d0:	7afb      	ldrb	r3, [r7, #11]
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159da:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 80159dc:	89fb      	ldrh	r3, [r7, #14]
 80159de:	4619      	mov	r1, r3
 80159e0:	2001      	movs	r0, #1
 80159e2:	f7fc f815 	bl	8011a10 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80159e6:	7afb      	ldrb	r3, [r7, #11]
 80159e8:	109b      	asrs	r3, r3, #2
 80159ea:	b29b      	uxth	r3, r3
 80159ec:	f003 0308 	and.w	r3, r3, #8
 80159f0:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80159f2:	7afb      	ldrb	r3, [r7, #11]
 80159f4:	f003 0308 	and.w	r3, r3, #8
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d003      	beq.n	8015a04 <setRotation+0x438>
               ORG |= 0x1000;  //BGR
 80159fc:	8afb      	ldrh	r3, [r7, #22]
 80159fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015a02:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8015a04:	8afb      	ldrh	r3, [r7, #22]
 8015a06:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8015a0a:	b29a      	uxth	r2, r3
 8015a0c:	4b27      	ldr	r3, [pc, #156]	; (8015aac <setRotation+0x4e0>)
 8015a0e:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8015a10:	4b26      	ldr	r3, [pc, #152]	; (8015aac <setRotation+0x4e0>)
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	4619      	mov	r1, r3
 8015a16:	2003      	movs	r0, #3
 8015a18:	f7fb fffa 	bl	8011a10 <WriteCmdData>
           break;
 8015a1c:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8015a1e:	4b2d      	ldr	r3, [pc, #180]	; (8015ad4 <setRotation+0x508>)
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	f003 0301 	and.w	r3, r3, #1
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d023      	beq.n	8015a72 <setRotation+0x4a6>
 8015a2a:	4b2b      	ldr	r3, [pc, #172]	; (8015ad8 <setRotation+0x50c>)
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d11d      	bne.n	8015a72 <setRotation+0x4a6>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8015a36:	4b1f      	ldr	r3, [pc, #124]	; (8015ab4 <setRotation+0x4e8>)
 8015a38:	881b      	ldrh	r3, [r3, #0]
 8015a3a:	81bb      	strh	r3, [r7, #12]
 8015a3c:	4b1e      	ldr	r3, [pc, #120]	; (8015ab8 <setRotation+0x4ec>)
 8015a3e:	881a      	ldrh	r2, [r3, #0]
 8015a40:	4b1c      	ldr	r3, [pc, #112]	; (8015ab4 <setRotation+0x4e8>)
 8015a42:	801a      	strh	r2, [r3, #0]
 8015a44:	4a1c      	ldr	r2, [pc, #112]	; (8015ab8 <setRotation+0x4ec>)
 8015a46:	89bb      	ldrh	r3, [r7, #12]
 8015a48:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8015a4a:	4b1d      	ldr	r3, [pc, #116]	; (8015ac0 <setRotation+0x4f4>)
 8015a4c:	881b      	ldrh	r3, [r3, #0]
 8015a4e:	81bb      	strh	r3, [r7, #12]
 8015a50:	4b1d      	ldr	r3, [pc, #116]	; (8015ac8 <setRotation+0x4fc>)
 8015a52:	881a      	ldrh	r2, [r3, #0]
 8015a54:	4b1a      	ldr	r3, [pc, #104]	; (8015ac0 <setRotation+0x4f4>)
 8015a56:	801a      	strh	r2, [r3, #0]
 8015a58:	4a1b      	ldr	r2, [pc, #108]	; (8015ac8 <setRotation+0x4fc>)
 8015a5a:	89bb      	ldrh	r3, [r7, #12]
 8015a5c:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8015a5e:	4b19      	ldr	r3, [pc, #100]	; (8015ac4 <setRotation+0x4f8>)
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	81bb      	strh	r3, [r7, #12]
 8015a64:	4b19      	ldr	r3, [pc, #100]	; (8015acc <setRotation+0x500>)
 8015a66:	881a      	ldrh	r2, [r3, #0]
 8015a68:	4b16      	ldr	r3, [pc, #88]	; (8015ac4 <setRotation+0x4f8>)
 8015a6a:	801a      	strh	r2, [r3, #0]
 8015a6c:	4a17      	ldr	r2, [pc, #92]	; (8015acc <setRotation+0x500>)
 8015a6e:	89bb      	ldrh	r3, [r7, #12]
 8015a70:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8015a72:	f7fb ff05 	bl	8011880 <width>
 8015a76:	4603      	mov	r3, r0
 8015a78:	3b01      	subs	r3, #1
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	b21c      	sxth	r4, r3
 8015a7e:	f7fb ff0b 	bl	8011898 <height>
 8015a82:	4603      	mov	r3, r0
 8015a84:	3b01      	subs	r3, #1
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	b21b      	sxth	r3, r3
 8015a8a:	4622      	mov	r2, r4
 8015a8c:	2100      	movs	r1, #0
 8015a8e:	2000      	movs	r0, #0
 8015a90:	f000 f99e 	bl	8015dd0 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8015a94:	2200      	movs	r2, #0
 8015a96:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8015a9a:	2000      	movs	r0, #0
 8015a9c:	f000 fabc 	bl	8016018 <vertScroll>
}
 8015aa0:	bf00      	nop
 8015aa2:	371c      	adds	r7, #28
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd90      	pop	{r4, r7, pc}
 8015aa8:	20000218 	.word	0x20000218
 8015aac:	200069a2 	.word	0x200069a2
 8015ab0:	2000699c 	.word	0x2000699c
 8015ab4:	20006996 	.word	0x20006996
 8015ab8:	20006994 	.word	0x20006994
 8015abc:	2000698c 	.word	0x2000698c
 8015ac0:	20006998 	.word	0x20006998
 8015ac4:	200069a0 	.word	0x200069a0
 8015ac8:	20006990 	.word	0x20006990
 8015acc:	2000699a 	.word	0x2000699a
 8015ad0:	ffff8000 	.word	0xffff8000
 8015ad4:	2000021b 	.word	0x2000021b
 8015ad8:	2000698e 	.word	0x2000698e

08015adc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8015adc:	b590      	push	{r4, r7, lr}
 8015ade:	b085      	sub	sp, #20
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	80fb      	strh	r3, [r7, #6]
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	80bb      	strh	r3, [r7, #4]
 8015aea:	4613      	mov	r3, r2
 8015aec:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8015aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f2c0 8159 	blt.w	8015daa <drawPixel+0x2ce>
 8015af8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	f2c0 8154 	blt.w	8015daa <drawPixel+0x2ce>
 8015b02:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015b06:	f7fb febb 	bl	8011880 <width>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	429c      	cmp	r4, r3
 8015b0e:	f280 814c 	bge.w	8015daa <drawPixel+0x2ce>
 8015b12:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8015b16:	f7fb febf 	bl	8011898 <height>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	429c      	cmp	r4, r3
 8015b1e:	f280 8144 	bge.w	8015daa <drawPixel+0x2ce>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8015b22:	4ba4      	ldr	r3, [pc, #656]	; (8015db4 <drawPixel+0x2d8>)
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d005      	beq.n	8015b36 <drawPixel+0x5a>
 8015b2a:	887b      	ldrh	r3, [r7, #2]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7fb febf 	bl	80118b0 <color565_to_555>
 8015b32:	4603      	mov	r3, r0
 8015b34:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8015b36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015b3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015b3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015b42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8015b46:	f000 f943 	bl	8015dd0 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8015b4a:	4b9b      	ldr	r3, [pc, #620]	; (8015db8 <drawPixel+0x2dc>)
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	f000 8123 	beq.w	8015d9a <drawPixel+0x2be>
 8015b54:	2108      	movs	r1, #8
 8015b56:	4899      	ldr	r0, [pc, #612]	; (8015dbc <drawPixel+0x2e0>)
 8015b58:	f7fb fe43 	bl	80117e2 <PIN_LOW>
 8015b5c:	2120      	movs	r1, #32
 8015b5e:	4898      	ldr	r0, [pc, #608]	; (8015dc0 <drawPixel+0x2e4>)
 8015b60:	f7fb fe3f 	bl	80117e2 <PIN_LOW>
 8015b64:	4b97      	ldr	r3, [pc, #604]	; (8015dc4 <drawPixel+0x2e8>)
 8015b66:	881b      	ldrh	r3, [r3, #0]
 8015b68:	0a1b      	lsrs	r3, r3, #8
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	73fb      	strb	r3, [r7, #15]
 8015b6e:	4b95      	ldr	r3, [pc, #596]	; (8015dc4 <drawPixel+0x2e8>)
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	73bb      	strb	r3, [r7, #14]
 8015b74:	4b92      	ldr	r3, [pc, #584]	; (8015dc0 <drawPixel+0x2e4>)
 8015b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015b7a:	619a      	str	r2, [r3, #24]
 8015b7c:	4b92      	ldr	r3, [pc, #584]	; (8015dc8 <drawPixel+0x2ec>)
 8015b7e:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8015b82:	619a      	str	r2, [r3, #24]
 8015b84:	4b8d      	ldr	r3, [pc, #564]	; (8015dbc <drawPixel+0x2e0>)
 8015b86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8015b8a:	619a      	str	r2, [r3, #24]
 8015b8c:	7bfb      	ldrb	r3, [r7, #15]
 8015b8e:	039b      	lsls	r3, r3, #14
 8015b90:	4a8b      	ldr	r2, [pc, #556]	; (8015dc0 <drawPixel+0x2e4>)
 8015b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b96:	6193      	str	r3, [r2, #24]
 8015b98:	7bfb      	ldrb	r3, [r7, #15]
 8015b9a:	029b      	lsls	r3, r3, #10
 8015b9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8015ba0:	7bfb      	ldrb	r3, [r7, #15]
 8015ba2:	019b      	lsls	r3, r3, #6
 8015ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ba8:	431a      	orrs	r2, r3
 8015baa:	7bfb      	ldrb	r3, [r7, #15]
 8015bac:	00db      	lsls	r3, r3, #3
 8015bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015bb2:	431a      	orrs	r2, r3
 8015bb4:	4b84      	ldr	r3, [pc, #528]	; (8015dc8 <drawPixel+0x2ec>)
 8015bb6:	619a      	str	r2, [r3, #24]
 8015bb8:	7bfb      	ldrb	r3, [r7, #15]
 8015bba:	031b      	lsls	r3, r3, #12
 8015bbc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015bc0:	7bfb      	ldrb	r3, [r7, #15]
 8015bc2:	035b      	lsls	r3, r3, #13
 8015bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015bc8:	431a      	orrs	r2, r3
 8015bca:	7bfb      	ldrb	r3, [r7, #15]
 8015bcc:	029b      	lsls	r3, r3, #10
 8015bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015bd2:	431a      	orrs	r2, r3
 8015bd4:	7bfb      	ldrb	r3, [r7, #15]
 8015bd6:	019b      	lsls	r3, r3, #6
 8015bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015bdc:	431a      	orrs	r2, r3
 8015bde:	4b77      	ldr	r3, [pc, #476]	; (8015dbc <drawPixel+0x2e0>)
 8015be0:	619a      	str	r2, [r3, #24]
 8015be2:	2101      	movs	r1, #1
 8015be4:	4879      	ldr	r0, [pc, #484]	; (8015dcc <drawPixel+0x2f0>)
 8015be6:	f7fb fdfc 	bl	80117e2 <PIN_LOW>
 8015bea:	2101      	movs	r1, #1
 8015bec:	4877      	ldr	r0, [pc, #476]	; (8015dcc <drawPixel+0x2f0>)
 8015bee:	f7fb fdf8 	bl	80117e2 <PIN_LOW>
 8015bf2:	2101      	movs	r1, #1
 8015bf4:	4875      	ldr	r0, [pc, #468]	; (8015dcc <drawPixel+0x2f0>)
 8015bf6:	f7fb fdf4 	bl	80117e2 <PIN_LOW>
 8015bfa:	2101      	movs	r1, #1
 8015bfc:	4873      	ldr	r0, [pc, #460]	; (8015dcc <drawPixel+0x2f0>)
 8015bfe:	f7fb fdf0 	bl	80117e2 <PIN_LOW>
 8015c02:	2101      	movs	r1, #1
 8015c04:	4871      	ldr	r0, [pc, #452]	; (8015dcc <drawPixel+0x2f0>)
 8015c06:	f7fb fdec 	bl	80117e2 <PIN_LOW>
 8015c0a:	2101      	movs	r1, #1
 8015c0c:	486f      	ldr	r0, [pc, #444]	; (8015dcc <drawPixel+0x2f0>)
 8015c0e:	f7fb fde8 	bl	80117e2 <PIN_LOW>
 8015c12:	2101      	movs	r1, #1
 8015c14:	486d      	ldr	r0, [pc, #436]	; (8015dcc <drawPixel+0x2f0>)
 8015c16:	f7fb fde4 	bl	80117e2 <PIN_LOW>
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	486b      	ldr	r0, [pc, #428]	; (8015dcc <drawPixel+0x2f0>)
 8015c1e:	f7fb fde0 	bl	80117e2 <PIN_LOW>
 8015c22:	2101      	movs	r1, #1
 8015c24:	4869      	ldr	r0, [pc, #420]	; (8015dcc <drawPixel+0x2f0>)
 8015c26:	f7fb fddc 	bl	80117e2 <PIN_LOW>
 8015c2a:	2101      	movs	r1, #1
 8015c2c:	4867      	ldr	r0, [pc, #412]	; (8015dcc <drawPixel+0x2f0>)
 8015c2e:	f7fb fdd8 	bl	80117e2 <PIN_LOW>
 8015c32:	2101      	movs	r1, #1
 8015c34:	4865      	ldr	r0, [pc, #404]	; (8015dcc <drawPixel+0x2f0>)
 8015c36:	f7fb fdd4 	bl	80117e2 <PIN_LOW>
 8015c3a:	2101      	movs	r1, #1
 8015c3c:	4863      	ldr	r0, [pc, #396]	; (8015dcc <drawPixel+0x2f0>)
 8015c3e:	f7fb fdd0 	bl	80117e2 <PIN_LOW>
 8015c42:	2101      	movs	r1, #1
 8015c44:	4861      	ldr	r0, [pc, #388]	; (8015dcc <drawPixel+0x2f0>)
 8015c46:	f7fb fdcc 	bl	80117e2 <PIN_LOW>
 8015c4a:	2101      	movs	r1, #1
 8015c4c:	485f      	ldr	r0, [pc, #380]	; (8015dcc <drawPixel+0x2f0>)
 8015c4e:	f7fb fdc8 	bl	80117e2 <PIN_LOW>
 8015c52:	2101      	movs	r1, #1
 8015c54:	485d      	ldr	r0, [pc, #372]	; (8015dcc <drawPixel+0x2f0>)
 8015c56:	f7fb fdc4 	bl	80117e2 <PIN_LOW>
 8015c5a:	2101      	movs	r1, #1
 8015c5c:	485b      	ldr	r0, [pc, #364]	; (8015dcc <drawPixel+0x2f0>)
 8015c5e:	f7fb fdc0 	bl	80117e2 <PIN_LOW>
 8015c62:	2101      	movs	r1, #1
 8015c64:	4859      	ldr	r0, [pc, #356]	; (8015dcc <drawPixel+0x2f0>)
 8015c66:	f7fb fdbc 	bl	80117e2 <PIN_LOW>
 8015c6a:	2101      	movs	r1, #1
 8015c6c:	4857      	ldr	r0, [pc, #348]	; (8015dcc <drawPixel+0x2f0>)
 8015c6e:	f7fb fdc8 	bl	8011802 <PIN_HIGH>
 8015c72:	2101      	movs	r1, #1
 8015c74:	4855      	ldr	r0, [pc, #340]	; (8015dcc <drawPixel+0x2f0>)
 8015c76:	f7fb fdc4 	bl	8011802 <PIN_HIGH>
 8015c7a:	4b51      	ldr	r3, [pc, #324]	; (8015dc0 <drawPixel+0x2e4>)
 8015c7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015c80:	619a      	str	r2, [r3, #24]
 8015c82:	4b51      	ldr	r3, [pc, #324]	; (8015dc8 <drawPixel+0x2ec>)
 8015c84:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8015c88:	619a      	str	r2, [r3, #24]
 8015c8a:	4b4c      	ldr	r3, [pc, #304]	; (8015dbc <drawPixel+0x2e0>)
 8015c8c:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8015c90:	619a      	str	r2, [r3, #24]
 8015c92:	7bbb      	ldrb	r3, [r7, #14]
 8015c94:	039b      	lsls	r3, r3, #14
 8015c96:	4a4a      	ldr	r2, [pc, #296]	; (8015dc0 <drawPixel+0x2e4>)
 8015c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c9c:	6193      	str	r3, [r2, #24]
 8015c9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ca0:	029b      	lsls	r3, r3, #10
 8015ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8015ca6:	7bbb      	ldrb	r3, [r7, #14]
 8015ca8:	019b      	lsls	r3, r3, #6
 8015caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015cae:	431a      	orrs	r2, r3
 8015cb0:	7bbb      	ldrb	r3, [r7, #14]
 8015cb2:	00db      	lsls	r3, r3, #3
 8015cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015cb8:	431a      	orrs	r2, r3
 8015cba:	4b43      	ldr	r3, [pc, #268]	; (8015dc8 <drawPixel+0x2ec>)
 8015cbc:	619a      	str	r2, [r3, #24]
 8015cbe:	7bbb      	ldrb	r3, [r7, #14]
 8015cc0:	031b      	lsls	r3, r3, #12
 8015cc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015cc6:	7bbb      	ldrb	r3, [r7, #14]
 8015cc8:	035b      	lsls	r3, r3, #13
 8015cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015cce:	431a      	orrs	r2, r3
 8015cd0:	7bbb      	ldrb	r3, [r7, #14]
 8015cd2:	029b      	lsls	r3, r3, #10
 8015cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015cd8:	431a      	orrs	r2, r3
 8015cda:	7bbb      	ldrb	r3, [r7, #14]
 8015cdc:	019b      	lsls	r3, r3, #6
 8015cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015ce2:	431a      	orrs	r2, r3
 8015ce4:	4b35      	ldr	r3, [pc, #212]	; (8015dbc <drawPixel+0x2e0>)
 8015ce6:	619a      	str	r2, [r3, #24]
 8015ce8:	2101      	movs	r1, #1
 8015cea:	4838      	ldr	r0, [pc, #224]	; (8015dcc <drawPixel+0x2f0>)
 8015cec:	f7fb fd79 	bl	80117e2 <PIN_LOW>
 8015cf0:	2101      	movs	r1, #1
 8015cf2:	4836      	ldr	r0, [pc, #216]	; (8015dcc <drawPixel+0x2f0>)
 8015cf4:	f7fb fd75 	bl	80117e2 <PIN_LOW>
 8015cf8:	2101      	movs	r1, #1
 8015cfa:	4834      	ldr	r0, [pc, #208]	; (8015dcc <drawPixel+0x2f0>)
 8015cfc:	f7fb fd71 	bl	80117e2 <PIN_LOW>
 8015d00:	2101      	movs	r1, #1
 8015d02:	4832      	ldr	r0, [pc, #200]	; (8015dcc <drawPixel+0x2f0>)
 8015d04:	f7fb fd6d 	bl	80117e2 <PIN_LOW>
 8015d08:	2101      	movs	r1, #1
 8015d0a:	4830      	ldr	r0, [pc, #192]	; (8015dcc <drawPixel+0x2f0>)
 8015d0c:	f7fb fd69 	bl	80117e2 <PIN_LOW>
 8015d10:	2101      	movs	r1, #1
 8015d12:	482e      	ldr	r0, [pc, #184]	; (8015dcc <drawPixel+0x2f0>)
 8015d14:	f7fb fd65 	bl	80117e2 <PIN_LOW>
 8015d18:	2101      	movs	r1, #1
 8015d1a:	482c      	ldr	r0, [pc, #176]	; (8015dcc <drawPixel+0x2f0>)
 8015d1c:	f7fb fd61 	bl	80117e2 <PIN_LOW>
 8015d20:	2101      	movs	r1, #1
 8015d22:	482a      	ldr	r0, [pc, #168]	; (8015dcc <drawPixel+0x2f0>)
 8015d24:	f7fb fd5d 	bl	80117e2 <PIN_LOW>
 8015d28:	2101      	movs	r1, #1
 8015d2a:	4828      	ldr	r0, [pc, #160]	; (8015dcc <drawPixel+0x2f0>)
 8015d2c:	f7fb fd59 	bl	80117e2 <PIN_LOW>
 8015d30:	2101      	movs	r1, #1
 8015d32:	4826      	ldr	r0, [pc, #152]	; (8015dcc <drawPixel+0x2f0>)
 8015d34:	f7fb fd55 	bl	80117e2 <PIN_LOW>
 8015d38:	2101      	movs	r1, #1
 8015d3a:	4824      	ldr	r0, [pc, #144]	; (8015dcc <drawPixel+0x2f0>)
 8015d3c:	f7fb fd51 	bl	80117e2 <PIN_LOW>
 8015d40:	2101      	movs	r1, #1
 8015d42:	4822      	ldr	r0, [pc, #136]	; (8015dcc <drawPixel+0x2f0>)
 8015d44:	f7fb fd4d 	bl	80117e2 <PIN_LOW>
 8015d48:	2101      	movs	r1, #1
 8015d4a:	4820      	ldr	r0, [pc, #128]	; (8015dcc <drawPixel+0x2f0>)
 8015d4c:	f7fb fd49 	bl	80117e2 <PIN_LOW>
 8015d50:	2101      	movs	r1, #1
 8015d52:	481e      	ldr	r0, [pc, #120]	; (8015dcc <drawPixel+0x2f0>)
 8015d54:	f7fb fd45 	bl	80117e2 <PIN_LOW>
 8015d58:	2101      	movs	r1, #1
 8015d5a:	481c      	ldr	r0, [pc, #112]	; (8015dcc <drawPixel+0x2f0>)
 8015d5c:	f7fb fd41 	bl	80117e2 <PIN_LOW>
 8015d60:	2101      	movs	r1, #1
 8015d62:	481a      	ldr	r0, [pc, #104]	; (8015dcc <drawPixel+0x2f0>)
 8015d64:	f7fb fd3d 	bl	80117e2 <PIN_LOW>
 8015d68:	2101      	movs	r1, #1
 8015d6a:	4818      	ldr	r0, [pc, #96]	; (8015dcc <drawPixel+0x2f0>)
 8015d6c:	f7fb fd39 	bl	80117e2 <PIN_LOW>
 8015d70:	2101      	movs	r1, #1
 8015d72:	4816      	ldr	r0, [pc, #88]	; (8015dcc <drawPixel+0x2f0>)
 8015d74:	f7fb fd45 	bl	8011802 <PIN_HIGH>
 8015d78:	2101      	movs	r1, #1
 8015d7a:	4814      	ldr	r0, [pc, #80]	; (8015dcc <drawPixel+0x2f0>)
 8015d7c:	f7fb fd41 	bl	8011802 <PIN_HIGH>
 8015d80:	2120      	movs	r1, #32
 8015d82:	480f      	ldr	r0, [pc, #60]	; (8015dc0 <drawPixel+0x2e4>)
 8015d84:	f7fb fd3d 	bl	8011802 <PIN_HIGH>
 8015d88:	887b      	ldrh	r3, [r7, #2]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fb feca 	bl	8011b24 <write24>
 8015d90:	2108      	movs	r1, #8
 8015d92:	480a      	ldr	r0, [pc, #40]	; (8015dbc <drawPixel+0x2e0>)
 8015d94:	f7fb fd35 	bl	8011802 <PIN_HIGH>
 8015d98:	e008      	b.n	8015dac <drawPixel+0x2d0>
   WriteCmdData(_MW, color);
 8015d9a:	4b0a      	ldr	r3, [pc, #40]	; (8015dc4 <drawPixel+0x2e8>)
 8015d9c:	881b      	ldrh	r3, [r3, #0]
 8015d9e:	887a      	ldrh	r2, [r7, #2]
 8015da0:	4611      	mov	r1, r2
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fb fe34 	bl	8011a10 <WriteCmdData>
 8015da8:	e000      	b.n	8015dac <drawPixel+0x2d0>
       return;
 8015daa:	bf00      	nop
}
 8015dac:	3714      	adds	r7, #20
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd90      	pop	{r4, r7, pc}
 8015db2:	bf00      	nop
 8015db4:	20000219 	.word	0x20000219
 8015db8:	2000021a 	.word	0x2000021a
 8015dbc:	40021400 	.word	0x40021400
 8015dc0:	40020c00 	.word	0x40020c00
 8015dc4:	2000698c 	.word	0x2000698c
 8015dc8:	40021000 	.word	0x40021000
 8015dcc:	40020800 	.word	0x40020800

08015dd0 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8015dd0:	b590      	push	{r4, r7, lr}
 8015dd2:	b087      	sub	sp, #28
 8015dd4:	af02      	add	r7, sp, #8
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	4608      	mov	r0, r1
 8015dda:	4611      	mov	r1, r2
 8015ddc:	461a      	mov	r2, r3
 8015dde:	4623      	mov	r3, r4
 8015de0:	80fb      	strh	r3, [r7, #6]
 8015de2:	4603      	mov	r3, r0
 8015de4:	80bb      	strh	r3, [r7, #4]
 8015de6:	460b      	mov	r3, r1
 8015de8:	807b      	strh	r3, [r7, #2]
 8015dea:	4613      	mov	r3, r2
 8015dec:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8015dee:	4b80      	ldr	r3, [pc, #512]	; (8015ff0 <setAddrWindow+0x220>)
 8015df0:	881b      	ldrh	r3, [r3, #0]
 8015df2:	f249 3227 	movw	r2, #37671	; 0x9327
 8015df6:	4293      	cmp	r3, r2
 8015df8:	d117      	bne.n	8015e2a <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8015dfa:	4b7e      	ldr	r3, [pc, #504]	; (8015ff4 <setAddrWindow+0x224>)
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	d107      	bne.n	8015e12 <setAddrWindow+0x42>
 8015e02:	88bb      	ldrh	r3, [r7, #4]
 8015e04:	3320      	adds	r3, #32
 8015e06:	b29b      	uxth	r3, r3
 8015e08:	80bb      	strh	r3, [r7, #4]
 8015e0a:	883b      	ldrh	r3, [r7, #0]
 8015e0c:	3320      	adds	r3, #32
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8015e12:	4b78      	ldr	r3, [pc, #480]	; (8015ff4 <setAddrWindow+0x224>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b03      	cmp	r3, #3
 8015e18:	d107      	bne.n	8015e2a <setAddrWindow+0x5a>
 8015e1a:	88fb      	ldrh	r3, [r7, #6]
 8015e1c:	3320      	adds	r3, #32
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	80fb      	strh	r3, [r7, #6]
 8015e22:	887b      	ldrh	r3, [r7, #2]
 8015e24:	3320      	adds	r3, #32
 8015e26:	b29b      	uxth	r3, r3
 8015e28:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8015e2a:	4b71      	ldr	r3, [pc, #452]	; (8015ff0 <setAddrWindow+0x220>)
 8015e2c:	881b      	ldrh	r3, [r3, #0]
 8015e2e:	f241 5226 	movw	r2, #5414	; 0x1526
 8015e32:	4293      	cmp	r3, r2
 8015e34:	d128      	bne.n	8015e88 <setAddrWindow+0xb8>
 8015e36:	4b6f      	ldr	r3, [pc, #444]	; (8015ff4 <setAddrWindow+0x224>)
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	f003 0301 	and.w	r3, r3, #1
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d022      	beq.n	8015e88 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8015e42:	887a      	ldrh	r2, [r7, #2]
 8015e44:	88fb      	ldrh	r3, [r7, #6]
 8015e46:	1ad3      	subs	r3, r2, r3
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	81fb      	strh	r3, [r7, #14]
 8015e4c:	883a      	ldrh	r2, [r7, #0]
 8015e4e:	88bb      	ldrh	r3, [r7, #4]
 8015e50:	1ad3      	subs	r3, r2, r3
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8015e56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d106      	bne.n	8015e6c <setAddrWindow+0x9c>
 8015e5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	3301      	adds	r3, #1
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	803b      	strh	r3, [r7, #0]
 8015e6a:	e00d      	b.n	8015e88 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8015e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d109      	bne.n	8015e88 <setAddrWindow+0xb8>
 8015e74:	887a      	ldrh	r2, [r7, #2]
 8015e76:	89bb      	ldrh	r3, [r7, #12]
 8015e78:	4413      	add	r3, r2
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	807b      	strh	r3, [r7, #2]
 8015e7e:	883a      	ldrh	r2, [r7, #0]
 8015e80:	89bb      	ldrh	r3, [r7, #12]
 8015e82:	1ad3      	subs	r3, r2, r3
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8015e88:	4b5b      	ldr	r3, [pc, #364]	; (8015ff8 <setAddrWindow+0x228>)
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	f003 0301 	and.w	r3, r3, #1
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d054      	beq.n	8015f3e <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8015e94:	4b59      	ldr	r3, [pc, #356]	; (8015ffc <setAddrWindow+0x22c>)
 8015e96:	881b      	ldrh	r3, [r3, #0]
 8015e98:	b2d8      	uxtb	r0, r3
 8015e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e9e:	121b      	asrs	r3, r3, #8
 8015ea0:	b21b      	sxth	r3, r3
 8015ea2:	b2d9      	uxtb	r1, r3
 8015ea4:	88fb      	ldrh	r3, [r7, #6]
 8015ea6:	b2da      	uxtb	r2, r3
 8015ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015eac:	121b      	asrs	r3, r3, #8
 8015eae:	b21b      	sxth	r3, r3
 8015eb0:	b2dc      	uxtb	r4, r3
 8015eb2:	887b      	ldrh	r3, [r7, #2]
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	9300      	str	r3, [sp, #0]
 8015eb8:	4623      	mov	r3, r4
 8015eba:	f7fc fd1f 	bl	80128fc <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8015ebe:	4b50      	ldr	r3, [pc, #320]	; (8016000 <setAddrWindow+0x230>)
 8015ec0:	881b      	ldrh	r3, [r3, #0]
 8015ec2:	b2d8      	uxtb	r0, r3
 8015ec4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015ec8:	121b      	asrs	r3, r3, #8
 8015eca:	b21b      	sxth	r3, r3
 8015ecc:	b2d9      	uxtb	r1, r3
 8015ece:	88bb      	ldrh	r3, [r7, #4]
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ed6:	121b      	asrs	r3, r3, #8
 8015ed8:	b21b      	sxth	r3, r3
 8015eda:	b2dc      	uxtb	r4, r3
 8015edc:	883b      	ldrh	r3, [r7, #0]
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	4623      	mov	r3, r4
 8015ee4:	f7fc fd0a 	bl	80128fc <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8015ee8:	4b46      	ldr	r3, [pc, #280]	; (8016004 <setAddrWindow+0x234>)
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d07b      	beq.n	8015fe8 <setAddrWindow+0x218>
 8015ef0:	4b3f      	ldr	r3, [pc, #252]	; (8015ff0 <setAddrWindow+0x220>)
 8015ef2:	881b      	ldrh	r3, [r3, #0]
 8015ef4:	2b65      	cmp	r3, #101	; 0x65
 8015ef6:	d177      	bne.n	8015fe8 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8015ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015efc:	121b      	asrs	r3, r3, #8
 8015efe:	b21b      	sxth	r3, r3
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	723b      	strb	r3, [r7, #8]
 8015f04:	88fb      	ldrh	r3, [r7, #6]
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8015f0a:	4b3f      	ldr	r3, [pc, #252]	; (8016008 <setAddrWindow+0x238>)
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	f107 0208 	add.w	r2, r7, #8
 8015f12:	2102      	movs	r1, #2
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7fc f9fb 	bl	8012310 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8015f1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015f1e:	121b      	asrs	r3, r3, #8
 8015f20:	b21b      	sxth	r3, r3
 8015f22:	b2db      	uxtb	r3, r3
 8015f24:	723b      	strb	r3, [r7, #8]
 8015f26:	88bb      	ldrh	r3, [r7, #4]
 8015f28:	b2db      	uxtb	r3, r3
 8015f2a:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8015f2c:	4b37      	ldr	r3, [pc, #220]	; (801600c <setAddrWindow+0x23c>)
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	f107 0208 	add.w	r2, r7, #8
 8015f34:	2102      	movs	r1, #2
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7fc f9ea 	bl	8012310 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8015f3c:	e054      	b.n	8015fe8 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8015f3e:	4b32      	ldr	r3, [pc, #200]	; (8016008 <setAddrWindow+0x238>)
 8015f40:	881b      	ldrh	r3, [r3, #0]
 8015f42:	88fa      	ldrh	r2, [r7, #6]
 8015f44:	4611      	mov	r1, r2
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fb fd62 	bl	8011a10 <WriteCmdData>
       WriteCmdData(_MP, y);
 8015f4c:	4b2f      	ldr	r3, [pc, #188]	; (801600c <setAddrWindow+0x23c>)
 8015f4e:	881b      	ldrh	r3, [r3, #0]
 8015f50:	88ba      	ldrh	r2, [r7, #4]
 8015f52:	4611      	mov	r1, r2
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7fb fd5b 	bl	8011a10 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8015f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015f5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d105      	bne.n	8015f72 <setAddrWindow+0x1a2>
 8015f66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015f6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d03a      	beq.n	8015fe8 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8015f72:	4b21      	ldr	r3, [pc, #132]	; (8015ff8 <setAddrWindow+0x228>)
 8015f74:	881b      	ldrh	r3, [r3, #0]
 8015f76:	f003 0320 	and.w	r3, r3, #32
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d018      	beq.n	8015fb0 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8015f7e:	4b1d      	ldr	r3, [pc, #116]	; (8015ff4 <setAddrWindow+0x224>)
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	f003 0301 	and.w	r3, r3, #1
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d009      	beq.n	8015f9e <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8015f8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f8e:	021b      	lsls	r3, r3, #8
 8015f90:	b21a      	sxth	r2, r3
 8015f92:	88bb      	ldrh	r3, [r7, #4]
 8015f94:	4313      	orrs	r3, r2
 8015f96:	80bb      	strh	r3, [r7, #4]
 8015f98:	88bb      	ldrh	r3, [r7, #4]
 8015f9a:	803b      	strh	r3, [r7, #0]
 8015f9c:	e008      	b.n	8015fb0 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8015f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015fa2:	021b      	lsls	r3, r3, #8
 8015fa4:	b21a      	sxth	r2, r3
 8015fa6:	88fb      	ldrh	r3, [r7, #6]
 8015fa8:	4313      	orrs	r3, r2
 8015faa:	80fb      	strh	r3, [r7, #6]
 8015fac:	88fb      	ldrh	r3, [r7, #6]
 8015fae:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8015fb0:	4b12      	ldr	r3, [pc, #72]	; (8015ffc <setAddrWindow+0x22c>)
 8015fb2:	881b      	ldrh	r3, [r3, #0]
 8015fb4:	88fa      	ldrh	r2, [r7, #6]
 8015fb6:	4611      	mov	r1, r2
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fb fd29 	bl	8011a10 <WriteCmdData>
           WriteCmdData(_SP, y);
 8015fbe:	4b10      	ldr	r3, [pc, #64]	; (8016000 <setAddrWindow+0x230>)
 8015fc0:	881b      	ldrh	r3, [r3, #0]
 8015fc2:	88ba      	ldrh	r2, [r7, #4]
 8015fc4:	4611      	mov	r1, r2
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fb fd22 	bl	8011a10 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8015fcc:	4b10      	ldr	r3, [pc, #64]	; (8016010 <setAddrWindow+0x240>)
 8015fce:	881b      	ldrh	r3, [r3, #0]
 8015fd0:	887a      	ldrh	r2, [r7, #2]
 8015fd2:	4611      	mov	r1, r2
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fb fd1b 	bl	8011a10 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8015fda:	4b0e      	ldr	r3, [pc, #56]	; (8016014 <setAddrWindow+0x244>)
 8015fdc:	881b      	ldrh	r3, [r3, #0]
 8015fde:	883a      	ldrh	r2, [r7, #0]
 8015fe0:	4611      	mov	r1, r2
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7fb fd14 	bl	8011a10 <WriteCmdData>
}
 8015fe8:	bf00      	nop
 8015fea:	3714      	adds	r7, #20
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd90      	pop	{r4, r7, pc}
 8015ff0:	2000699c 	.word	0x2000699c
 8015ff4:	2000021b 	.word	0x2000021b
 8015ff8:	2000698e 	.word	0x2000698e
 8015ffc:	20006998 	.word	0x20006998
 8016000:	20006990 	.word	0x20006990
 8016004:	20000218 	.word	0x20000218
 8016008:	20006996 	.word	0x20006996
 801600c:	20006994 	.word	0x20006994
 8016010:	200069a0 	.word	0x200069a0
 8016014:	2000699a 	.word	0x2000699a

08016018 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b086      	sub	sp, #24
 801601c:	af00      	add	r7, sp, #0
 801601e:	4603      	mov	r3, r0
 8016020:	80fb      	strh	r3, [r7, #6]
 8016022:	460b      	mov	r3, r1
 8016024:	80bb      	strh	r3, [r7, #4]
 8016026:	4613      	mov	r3, r2
 8016028:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 801602a:	4b89      	ldr	r3, [pc, #548]	; (8016250 <vertScroll+0x238>)
 801602c:	881b      	ldrh	r3, [r3, #0]
 801602e:	f249 3227 	movw	r2, #37671	; 0x9327
 8016032:	4293      	cmp	r3, r2
 8016034:	d10b      	bne.n	801604e <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8016036:	4b87      	ldr	r3, [pc, #540]	; (8016254 <vertScroll+0x23c>)
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	2b02      	cmp	r3, #2
 801603c:	d003      	beq.n	8016046 <vertScroll+0x2e>
 801603e:	4b85      	ldr	r3, [pc, #532]	; (8016254 <vertScroll+0x23c>)
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	2b03      	cmp	r3, #3
 8016044:	d103      	bne.n	801604e <vertScroll+0x36>
 8016046:	88fb      	ldrh	r3, [r7, #6]
 8016048:	3320      	adds	r3, #32
 801604a:	b29b      	uxth	r3, r3
 801604c:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 801604e:	88fa      	ldrh	r2, [r7, #6]
 8016050:	88bb      	ldrh	r3, [r7, #4]
 8016052:	4413      	add	r3, r2
 8016054:	b29b      	uxth	r3, r3
 8016056:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 801605a:	b29b      	uxth	r3, r3
 801605c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 801605e:	88fb      	ldrh	r3, [r7, #6]
 8016060:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8016062:	4b7b      	ldr	r3, [pc, #492]	; (8016250 <vertScroll+0x238>)
 8016064:	881b      	ldrh	r3, [r3, #0]
 8016066:	f249 3227 	movw	r2, #37671	; 0x9327
 801606a:	4293      	cmp	r3, r2
 801606c:	d103      	bne.n	8016076 <vertScroll+0x5e>
 801606e:	8afb      	ldrh	r3, [r7, #22]
 8016070:	3320      	adds	r3, #32
 8016072:	b29b      	uxth	r3, r3
 8016074:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8016076:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801607a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801607e:	425b      	negs	r3, r3
 8016080:	429a      	cmp	r2, r3
 8016082:	dd05      	ble.n	8016090 <vertScroll+0x78>
 8016084:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016088:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801608c:	429a      	cmp	r2, r3
 801608e:	db01      	blt.n	8016094 <vertScroll+0x7c>
 8016090:	2300      	movs	r3, #0
 8016092:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8016094:	88fa      	ldrh	r2, [r7, #6]
 8016096:	887b      	ldrh	r3, [r7, #2]
 8016098:	4413      	add	r3, r2
 801609a:	b29b      	uxth	r3, r3
 801609c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 801609e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	da04      	bge.n	80160b0 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 80160a6:	8aba      	ldrh	r2, [r7, #20]
 80160a8:	88bb      	ldrh	r3, [r7, #4]
 80160aa:	4413      	add	r3, r2
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80160b0:	88fa      	ldrh	r2, [r7, #6]
 80160b2:	88bb      	ldrh	r3, [r7, #4]
 80160b4:	4413      	add	r3, r2
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	3b01      	subs	r3, #1
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80160be:	4b66      	ldr	r3, [pc, #408]	; (8016258 <vertScroll+0x240>)
 80160c0:	881b      	ldrh	r3, [r3, #0]
 80160c2:	f003 0301 	and.w	r3, r3, #1
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d071      	beq.n	80161ae <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 80160ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160ce:	121b      	asrs	r3, r3, #8
 80160d0:	b21b      	sxth	r3, r3
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80160d6:	88fb      	ldrh	r3, [r7, #6]
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80160dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80160e0:	121b      	asrs	r3, r3, #8
 80160e2:	b21b      	sxth	r3, r3
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80160e8:	88bb      	ldrh	r3, [r7, #4]
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80160ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80160f2:	121b      	asrs	r3, r3, #8
 80160f4:	b21b      	sxth	r3, r3
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80160fa:	8afb      	ldrh	r3, [r7, #22]
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8016100:	4b56      	ldr	r3, [pc, #344]	; (801625c <vertScroll+0x244>)
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d001      	beq.n	801610c <vertScroll+0xf4>
 8016108:	230e      	movs	r3, #14
 801610a:	e000      	b.n	801610e <vertScroll+0xf6>
 801610c:	2333      	movs	r3, #51	; 0x33
 801610e:	f107 020c 	add.w	r2, r7, #12
 8016112:	2106      	movs	r1, #6
 8016114:	4618      	mov	r0, r3
 8016116:	f7fc f8fb 	bl	8012310 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 801611a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801611e:	121b      	asrs	r3, r3, #8
 8016120:	b21b      	sxth	r3, r3
 8016122:	b2db      	uxtb	r3, r3
 8016124:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8016126:	8abb      	ldrh	r3, [r7, #20]
 8016128:	b2db      	uxtb	r3, r3
 801612a:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 801612c:	4b4b      	ldr	r3, [pc, #300]	; (801625c <vertScroll+0x244>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d001      	beq.n	8016138 <vertScroll+0x120>
 8016134:	2314      	movs	r3, #20
 8016136:	e000      	b.n	801613a <vertScroll+0x122>
 8016138:	2337      	movs	r3, #55	; 0x37
 801613a:	f107 020c 	add.w	r2, r7, #12
 801613e:	2102      	movs	r1, #2
 8016140:	4618      	mov	r0, r3
 8016142:	f7fc f8e5 	bl	8012310 <WriteCmdParamN>
		if (is8347) {
 8016146:	4b45      	ldr	r3, [pc, #276]	; (801625c <vertScroll+0x244>)
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d01f      	beq.n	801618e <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 801614e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d009      	beq.n	801616a <vertScroll+0x152>
 8016156:	4b3e      	ldr	r3, [pc, #248]	; (8016250 <vertScroll+0x238>)
 8016158:	881b      	ldrh	r3, [r3, #0]
 801615a:	f248 3247 	movw	r2, #33607	; 0x8347
 801615e:	4293      	cmp	r3, r2
 8016160:	d101      	bne.n	8016166 <vertScroll+0x14e>
 8016162:	2302      	movs	r3, #2
 8016164:	e002      	b.n	801616c <vertScroll+0x154>
 8016166:	2308      	movs	r3, #8
 8016168:	e000      	b.n	801616c <vertScroll+0x154>
 801616a:	2300      	movs	r3, #0
 801616c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 801616e:	4b38      	ldr	r3, [pc, #224]	; (8016250 <vertScroll+0x238>)
 8016170:	881b      	ldrh	r3, [r3, #0]
 8016172:	f248 3247 	movw	r2, #33607	; 0x8347
 8016176:	4293      	cmp	r3, r2
 8016178:	d101      	bne.n	801617e <vertScroll+0x166>
 801617a:	2318      	movs	r3, #24
 801617c:	e000      	b.n	8016180 <vertScroll+0x168>
 801617e:	2301      	movs	r3, #1
 8016180:	f107 020c 	add.w	r2, r7, #12
 8016184:	2101      	movs	r1, #1
 8016186:	4618      	mov	r0, r3
 8016188:	f7fc f8c2 	bl	8012310 <WriteCmdParamN>
 801618c:	e05d      	b.n	801624a <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 801618e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d159      	bne.n	801624a <vertScroll+0x232>
 8016196:	4b30      	ldr	r3, [pc, #192]	; (8016258 <vertScroll+0x240>)
 8016198:	881b      	ldrh	r3, [r3, #0]
 801619a:	f003 0301 	and.w	r3, r3, #1
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d053      	beq.n	801624a <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 80161a2:	2200      	movs	r2, #0
 80161a4:	2100      	movs	r1, #0
 80161a6:	2013      	movs	r0, #19
 80161a8:	f7fc f8b2 	bl	8012310 <WriteCmdParamN>
 80161ac:	e04d      	b.n	801624a <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80161ae:	4b28      	ldr	r3, [pc, #160]	; (8016250 <vertScroll+0x238>)
 80161b0:	881b      	ldrh	r3, [r3, #0]
 80161b2:	f24b 5209 	movw	r2, #46345	; 0xb509
 80161b6:	4293      	cmp	r3, r2
 80161b8:	d027      	beq.n	801620a <vertScroll+0x1f2>
 80161ba:	f24b 5209 	movw	r2, #46345	; 0xb509
 80161be:	4293      	cmp	r3, r2
 80161c0:	dc34      	bgt.n	801622c <vertScroll+0x214>
 80161c2:	f249 3226 	movw	r2, #37670	; 0x9326
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d01f      	beq.n	801620a <vertScroll+0x1f2>
 80161ca:	f249 3226 	movw	r2, #37670	; 0x9326
 80161ce:	4293      	cmp	r3, r2
 80161d0:	dc2c      	bgt.n	801622c <vertScroll+0x214>
 80161d2:	f247 7293 	movw	r2, #30611	; 0x7793
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d017      	beq.n	801620a <vertScroll+0x1f2>
 80161da:	f247 7293 	movw	r2, #30611	; 0x7793
 80161de:	4293      	cmp	r3, r2
 80161e0:	dc24      	bgt.n	801622c <vertScroll+0x214>
 80161e2:	f245 4220 	movw	r2, #21536	; 0x5420
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d00f      	beq.n	801620a <vertScroll+0x1f2>
 80161ea:	f247 7283 	movw	r2, #30595	; 0x7783
 80161ee:	4293      	cmp	r3, r2
 80161f0:	d11c      	bne.n	801622c <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80161f2:	4b1b      	ldr	r3, [pc, #108]	; (8016260 <vertScroll+0x248>)
 80161f4:	881b      	ldrh	r3, [r3, #0]
 80161f6:	4619      	mov	r1, r3
 80161f8:	2061      	movs	r0, #97	; 0x61
 80161fa:	f7fb fc09 	bl	8011a10 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80161fe:	8abb      	ldrh	r3, [r7, #20]
 8016200:	4619      	mov	r1, r3
 8016202:	206a      	movs	r0, #106	; 0x6a
 8016204:	f7fb fc04 	bl	8011a10 <WriteCmdData>
        break;
 8016208:	e01f      	b.n	801624a <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 801620a:	4b15      	ldr	r3, [pc, #84]	; (8016260 <vertScroll+0x248>)
 801620c:	881b      	ldrh	r3, [r3, #0]
 801620e:	f043 0302 	orr.w	r3, r3, #2
 8016212:	b29b      	uxth	r3, r3
 8016214:	4619      	mov	r1, r3
 8016216:	f240 4001 	movw	r0, #1025	; 0x401
 801621a:	f7fb fbf9 	bl	8011a10 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 801621e:	8abb      	ldrh	r3, [r7, #20]
 8016220:	4619      	mov	r1, r3
 8016222:	f240 4004 	movw	r0, #1028	; 0x404
 8016226:	f7fb fbf3 	bl	8011a10 <WriteCmdData>
        break;
 801622a:	e00e      	b.n	801624a <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 801622c:	4b0c      	ldr	r3, [pc, #48]	; (8016260 <vertScroll+0x248>)
 801622e:	881b      	ldrh	r3, [r3, #0]
 8016230:	f043 0302 	orr.w	r3, r3, #2
 8016234:	b29b      	uxth	r3, r3
 8016236:	4619      	mov	r1, r3
 8016238:	2061      	movs	r0, #97	; 0x61
 801623a:	f7fb fbe9 	bl	8011a10 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 801623e:	8abb      	ldrh	r3, [r7, #20]
 8016240:	4619      	mov	r1, r3
 8016242:	206a      	movs	r0, #106	; 0x6a
 8016244:	f7fb fbe4 	bl	8011a10 <WriteCmdData>
        break;
 8016248:	bf00      	nop
    }
}
 801624a:	3718      	adds	r7, #24
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	2000699c 	.word	0x2000699c
 8016254:	2000021b 	.word	0x2000021b
 8016258:	2000698e 	.word	0x2000698e
 801625c:	20000218 	.word	0x20000218
 8016260:	20006992 	.word	0x20006992

08016264 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af02      	add	r7, sp, #8
 801626a:	4603      	mov	r3, r0
 801626c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 801626e:	4b08      	ldr	r3, [pc, #32]	; (8016290 <fillScreen+0x2c>)
 8016270:	881b      	ldrh	r3, [r3, #0]
 8016272:	b21a      	sxth	r2, r3
 8016274:	4b07      	ldr	r3, [pc, #28]	; (8016294 <fillScreen+0x30>)
 8016276:	881b      	ldrh	r3, [r3, #0]
 8016278:	b219      	sxth	r1, r3
 801627a:	88fb      	ldrh	r3, [r7, #6]
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	460b      	mov	r3, r1
 8016280:	2100      	movs	r1, #0
 8016282:	2000      	movs	r0, #0
 8016284:	f000 fa2a 	bl	80166dc <fillRect>
}
 8016288:	bf00      	nop
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	20000014 	.word	0x20000014
 8016294:	20000016 	.word	0x20000016

08016298 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	4603      	mov	r3, r0
 80162a0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80162a2:	4b4c      	ldr	r3, [pc, #304]	; (80163d4 <invertDisplay+0x13c>)
 80162a4:	881b      	ldrh	r3, [r3, #0]
 80162a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	bf14      	ite	ne
 80162ae:	2301      	movne	r3, #1
 80162b0:	2300      	moveq	r3, #0
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	b21a      	sxth	r2, r3
 80162b6:	79fb      	ldrb	r3, [r7, #7]
 80162b8:	b21b      	sxth	r3, r3
 80162ba:	4053      	eors	r3, r2
 80162bc:	b21b      	sxth	r3, r3
 80162be:	b29a      	uxth	r2, r3
 80162c0:	4b45      	ldr	r3, [pc, #276]	; (80163d8 <invertDisplay+0x140>)
 80162c2:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80162c4:	4b43      	ldr	r3, [pc, #268]	; (80163d4 <invertDisplay+0x13c>)
 80162c6:	881b      	ldrh	r3, [r3, #0]
 80162c8:	f003 0301 	and.w	r3, r3, #1
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d035      	beq.n	801633c <invertDisplay+0xa4>
        if (is8347) {
 80162d0:	4b42      	ldr	r3, [pc, #264]	; (80163dc <invertDisplay+0x144>)
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d024      	beq.n	8016322 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80162d8:	4b41      	ldr	r3, [pc, #260]	; (80163e0 <invertDisplay+0x148>)
 80162da:	881b      	ldrh	r3, [r3, #0]
 80162dc:	f248 3247 	movw	r2, #33607	; 0x8347
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d005      	beq.n	80162f0 <invertDisplay+0x58>
 80162e4:	4b3e      	ldr	r3, [pc, #248]	; (80163e0 <invertDisplay+0x148>)
 80162e6:	881b      	ldrh	r3, [r3, #0]
 80162e8:	f245 2252 	movw	r2, #21074	; 0x5252
 80162ec:	4293      	cmp	r3, r2
 80162ee:	d108      	bne.n	8016302 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80162f0:	4b39      	ldr	r3, [pc, #228]	; (80163d8 <invertDisplay+0x140>)
 80162f2:	881b      	ldrh	r3, [r3, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d001      	beq.n	80162fc <invertDisplay+0x64>
 80162f8:	2306      	movs	r3, #6
 80162fa:	e000      	b.n	80162fe <invertDisplay+0x66>
 80162fc:	2302      	movs	r3, #2
 80162fe:	73fb      	strb	r3, [r7, #15]
 8016300:	e007      	b.n	8016312 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8016302:	4b35      	ldr	r3, [pc, #212]	; (80163d8 <invertDisplay+0x140>)
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d001      	beq.n	801630e <invertDisplay+0x76>
 801630a:	2308      	movs	r3, #8
 801630c:	e000      	b.n	8016310 <invertDisplay+0x78>
 801630e:	230a      	movs	r3, #10
 8016310:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8016312:	f107 030f 	add.w	r3, r7, #15
 8016316:	461a      	mov	r2, r3
 8016318:	2101      	movs	r1, #1
 801631a:	2001      	movs	r0, #1
 801631c:	f7fb fff8 	bl	8012310 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8016320:	e055      	b.n	80163ce <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8016322:	4b2d      	ldr	r3, [pc, #180]	; (80163d8 <invertDisplay+0x140>)
 8016324:	881b      	ldrh	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <invertDisplay+0x96>
 801632a:	2321      	movs	r3, #33	; 0x21
 801632c:	e000      	b.n	8016330 <invertDisplay+0x98>
 801632e:	2320      	movs	r3, #32
 8016330:	2200      	movs	r2, #0
 8016332:	2100      	movs	r1, #0
 8016334:	4618      	mov	r0, r3
 8016336:	f7fb ffeb 	bl	8012310 <WriteCmdParamN>
 801633a:	e048      	b.n	80163ce <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 801633c:	4b28      	ldr	r3, [pc, #160]	; (80163e0 <invertDisplay+0x148>)
 801633e:	881b      	ldrh	r3, [r3, #0]
 8016340:	f24b 5209 	movw	r2, #46345	; 0xb509
 8016344:	4293      	cmp	r3, r2
 8016346:	d030      	beq.n	80163aa <invertDisplay+0x112>
 8016348:	f24b 5209 	movw	r2, #46345	; 0xb509
 801634c:	4293      	cmp	r3, r2
 801634e:	dc37      	bgt.n	80163c0 <invertDisplay+0x128>
 8016350:	f249 3226 	movw	r2, #37670	; 0x9326
 8016354:	4293      	cmp	r3, r2
 8016356:	d028      	beq.n	80163aa <invertDisplay+0x112>
 8016358:	f249 3226 	movw	r2, #37670	; 0x9326
 801635c:	4293      	cmp	r3, r2
 801635e:	dc2f      	bgt.n	80163c0 <invertDisplay+0x128>
 8016360:	f249 2225 	movw	r2, #37413	; 0x9225
 8016364:	4293      	cmp	r3, r2
 8016366:	d013      	beq.n	8016390 <invertDisplay+0xf8>
 8016368:	f249 2225 	movw	r2, #37413	; 0x9225
 801636c:	4293      	cmp	r3, r2
 801636e:	dc27      	bgt.n	80163c0 <invertDisplay+0x128>
 8016370:	f247 7293 	movw	r2, #30611	; 0x7793
 8016374:	4293      	cmp	r3, r2
 8016376:	d018      	beq.n	80163aa <invertDisplay+0x112>
 8016378:	f247 7293 	movw	r2, #30611	; 0x7793
 801637c:	4293      	cmp	r3, r2
 801637e:	dc1f      	bgt.n	80163c0 <invertDisplay+0x128>
 8016380:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016384:	d004      	beq.n	8016390 <invertDisplay+0xf8>
 8016386:	f245 4220 	movw	r2, #21536	; 0x5420
 801638a:	4293      	cmp	r3, r2
 801638c:	d00d      	beq.n	80163aa <invertDisplay+0x112>
 801638e:	e017      	b.n	80163c0 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8016390:	4b11      	ldr	r3, [pc, #68]	; (80163d8 <invertDisplay+0x140>)
 8016392:	881b      	ldrh	r3, [r3, #0]
 8016394:	009b      	lsls	r3, r3, #2
 8016396:	b21b      	sxth	r3, r3
 8016398:	f043 0313 	orr.w	r3, r3, #19
 801639c:	b21b      	sxth	r3, r3
 801639e:	b29b      	uxth	r3, r3
 80163a0:	4619      	mov	r1, r3
 80163a2:	2007      	movs	r0, #7
 80163a4:	f7fb fb34 	bl	8011a10 <WriteCmdData>
        break;
 80163a8:	e011      	b.n	80163ce <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 80163aa:	4b0b      	ldr	r3, [pc, #44]	; (80163d8 <invertDisplay+0x140>)
 80163ac:	881b      	ldrh	r3, [r3, #0]
 80163ae:	f043 0302 	orr.w	r3, r3, #2
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	4619      	mov	r1, r3
 80163b6:	f240 4001 	movw	r0, #1025	; 0x401
 80163ba:	f7fb fb29 	bl	8011a10 <WriteCmdData>
        break;
 80163be:	e006      	b.n	80163ce <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80163c0:	4b05      	ldr	r3, [pc, #20]	; (80163d8 <invertDisplay+0x140>)
 80163c2:	881b      	ldrh	r3, [r3, #0]
 80163c4:	4619      	mov	r1, r3
 80163c6:	2061      	movs	r0, #97	; 0x61
 80163c8:	f7fb fb22 	bl	8011a10 <WriteCmdData>
        break;
 80163cc:	bf00      	nop
    }
}
 80163ce:	3710      	adds	r7, #16
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	2000698e 	.word	0x2000698e
 80163d8:	20006992 	.word	0x20006992
 80163dc:	20000218 	.word	0x20000218
 80163e0:	2000699c 	.word	0x2000699c

080163e4 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80163e4:	b590      	push	{r4, r7, lr}
 80163e6:	b085      	sub	sp, #20
 80163e8:	af02      	add	r7, sp, #8
 80163ea:	4604      	mov	r4, r0
 80163ec:	4608      	mov	r0, r1
 80163ee:	4611      	mov	r1, r2
 80163f0:	461a      	mov	r2, r3
 80163f2:	4623      	mov	r3, r4
 80163f4:	80fb      	strh	r3, [r7, #6]
 80163f6:	4603      	mov	r3, r0
 80163f8:	80bb      	strh	r3, [r7, #4]
 80163fa:	460b      	mov	r3, r1
 80163fc:	807b      	strh	r3, [r7, #2]
 80163fe:	4613      	mov	r3, r2
 8016400:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8016402:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016406:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801640a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801640e:	883b      	ldrh	r3, [r7, #0]
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	4613      	mov	r3, r2
 8016414:	2201      	movs	r2, #1
 8016416:	f000 f961 	bl	80166dc <fillRect>
}
 801641a:	bf00      	nop
 801641c:	370c      	adds	r7, #12
 801641e:	46bd      	mov	sp, r7
 8016420:	bd90      	pop	{r4, r7, pc}

08016422 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8016422:	b590      	push	{r4, r7, lr}
 8016424:	b085      	sub	sp, #20
 8016426:	af02      	add	r7, sp, #8
 8016428:	4604      	mov	r4, r0
 801642a:	4608      	mov	r0, r1
 801642c:	4611      	mov	r1, r2
 801642e:	461a      	mov	r2, r3
 8016430:	4623      	mov	r3, r4
 8016432:	80fb      	strh	r3, [r7, #6]
 8016434:	4603      	mov	r3, r0
 8016436:	80bb      	strh	r3, [r7, #4]
 8016438:	460b      	mov	r3, r1
 801643a:	807b      	strh	r3, [r7, #2]
 801643c:	4613      	mov	r3, r2
 801643e:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8016440:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016444:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016448:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801644c:	883b      	ldrh	r3, [r7, #0]
 801644e:	9300      	str	r3, [sp, #0]
 8016450:	2301      	movs	r3, #1
 8016452:	f000 f943 	bl	80166dc <fillRect>
}
 8016456:	bf00      	nop
 8016458:	370c      	adds	r7, #12
 801645a:	46bd      	mov	sp, r7
 801645c:	bd90      	pop	{r4, r7, pc}

0801645e <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 801645e:	b590      	push	{r4, r7, lr}
 8016460:	b085      	sub	sp, #20
 8016462:	af02      	add	r7, sp, #8
 8016464:	4604      	mov	r4, r0
 8016466:	4608      	mov	r0, r1
 8016468:	4611      	mov	r1, r2
 801646a:	461a      	mov	r2, r3
 801646c:	4623      	mov	r3, r4
 801646e:	80fb      	strh	r3, [r7, #6]
 8016470:	4603      	mov	r3, r0
 8016472:	80bb      	strh	r3, [r7, #4]
 8016474:	460b      	mov	r3, r1
 8016476:	807b      	strh	r3, [r7, #2]
 8016478:	4613      	mov	r3, r2
 801647a:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 801647c:	88ba      	ldrh	r2, [r7, #4]
 801647e:	887b      	ldrh	r3, [r7, #2]
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	b29b      	uxth	r3, r3
 8016484:	b219      	sxth	r1, r3
 8016486:	887b      	ldrh	r3, [r7, #2]
 8016488:	005b      	lsls	r3, r3, #1
 801648a:	b29b      	uxth	r3, r3
 801648c:	3301      	adds	r3, #1
 801648e:	b29b      	uxth	r3, r3
 8016490:	b21a      	sxth	r2, r3
 8016492:	883b      	ldrh	r3, [r7, #0]
 8016494:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8016498:	f7ff ffa4 	bl	80163e4 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 801649c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80164a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80164a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80164a8:	883b      	ldrh	r3, [r7, #0]
 80164aa:	9301      	str	r3, [sp, #4]
 80164ac:	2300      	movs	r3, #0
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	2303      	movs	r3, #3
 80164b2:	f000 f804 	bl	80164be <fillCircleHelper>
}
 80164b6:	bf00      	nop
 80164b8:	370c      	adds	r7, #12
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd90      	pop	{r4, r7, pc}

080164be <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80164be:	b590      	push	{r4, r7, lr}
 80164c0:	b087      	sub	sp, #28
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	4604      	mov	r4, r0
 80164c6:	4608      	mov	r0, r1
 80164c8:	4611      	mov	r1, r2
 80164ca:	461a      	mov	r2, r3
 80164cc:	4623      	mov	r3, r4
 80164ce:	80fb      	strh	r3, [r7, #6]
 80164d0:	4603      	mov	r3, r0
 80164d2:	80bb      	strh	r3, [r7, #4]
 80164d4:	460b      	mov	r3, r1
 80164d6:	807b      	strh	r3, [r7, #2]
 80164d8:	4613      	mov	r3, r2
 80164da:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80164dc:	887b      	ldrh	r3, [r7, #2]
 80164de:	f1c3 0301 	rsb	r3, r3, #1
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80164e6:	2301      	movs	r3, #1
 80164e8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80164ea:	887b      	ldrh	r3, [r7, #2]
 80164ec:	461a      	mov	r2, r3
 80164ee:	03d2      	lsls	r2, r2, #15
 80164f0:	1ad3      	subs	r3, r2, r3
 80164f2:	005b      	lsls	r3, r3, #1
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80164f8:	2300      	movs	r3, #0
 80164fa:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80164fc:	887b      	ldrh	r3, [r7, #2]
 80164fe:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8016500:	8a3b      	ldrh	r3, [r7, #16]
 8016502:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8016504:	89fb      	ldrh	r3, [r7, #14]
 8016506:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8016508:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801650c:	b29b      	uxth	r3, r3
 801650e:	3301      	adds	r3, #1
 8016510:	b29b      	uxth	r3, r3
 8016512:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8016514:	e095      	b.n	8016642 <fillCircleHelper+0x184>
        if (f >= 0) {
 8016516:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801651a:	2b00      	cmp	r3, #0
 801651c:	db0e      	blt.n	801653c <fillCircleHelper+0x7e>
            y--;
 801651e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016522:	b29b      	uxth	r3, r3
 8016524:	3b01      	subs	r3, #1
 8016526:	b29b      	uxth	r3, r3
 8016528:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 801652a:	8a7b      	ldrh	r3, [r7, #18]
 801652c:	3302      	adds	r3, #2
 801652e:	b29b      	uxth	r3, r3
 8016530:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8016532:	8afa      	ldrh	r2, [r7, #22]
 8016534:	8a7b      	ldrh	r3, [r7, #18]
 8016536:	4413      	add	r3, r2
 8016538:	b29b      	uxth	r3, r3
 801653a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 801653c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016540:	b29b      	uxth	r3, r3
 8016542:	3301      	adds	r3, #1
 8016544:	b29b      	uxth	r3, r3
 8016546:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8016548:	8abb      	ldrh	r3, [r7, #20]
 801654a:	3302      	adds	r3, #2
 801654c:	b29b      	uxth	r3, r3
 801654e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8016550:	8afa      	ldrh	r2, [r7, #22]
 8016552:	8abb      	ldrh	r3, [r7, #20]
 8016554:	4413      	add	r3, r2
 8016556:	b29b      	uxth	r3, r3
 8016558:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 801655a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801655e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016562:	429a      	cmp	r2, r3
 8016564:	db31      	blt.n	80165ca <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8016566:	787b      	ldrb	r3, [r7, #1]
 8016568:	f003 0301 	and.w	r3, r3, #1
 801656c:	2b00      	cmp	r3, #0
 801656e:	d013      	beq.n	8016598 <fillCircleHelper+0xda>
 8016570:	88fa      	ldrh	r2, [r7, #6]
 8016572:	8a3b      	ldrh	r3, [r7, #16]
 8016574:	4413      	add	r3, r2
 8016576:	b29b      	uxth	r3, r3
 8016578:	b218      	sxth	r0, r3
 801657a:	88ba      	ldrh	r2, [r7, #4]
 801657c:	89fb      	ldrh	r3, [r7, #14]
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	b29b      	uxth	r3, r3
 8016582:	b219      	sxth	r1, r3
 8016584:	89fb      	ldrh	r3, [r7, #14]
 8016586:	005b      	lsls	r3, r3, #1
 8016588:	b29a      	uxth	r2, r3
 801658a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801658c:	4413      	add	r3, r2
 801658e:	b29b      	uxth	r3, r3
 8016590:	b21a      	sxth	r2, r3
 8016592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016594:	f7ff ff26 	bl	80163e4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8016598:	787b      	ldrb	r3, [r7, #1]
 801659a:	f003 0302 	and.w	r3, r3, #2
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d013      	beq.n	80165ca <fillCircleHelper+0x10c>
 80165a2:	88fa      	ldrh	r2, [r7, #6]
 80165a4:	8a3b      	ldrh	r3, [r7, #16]
 80165a6:	1ad3      	subs	r3, r2, r3
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	b218      	sxth	r0, r3
 80165ac:	88ba      	ldrh	r2, [r7, #4]
 80165ae:	89fb      	ldrh	r3, [r7, #14]
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	b219      	sxth	r1, r3
 80165b6:	89fb      	ldrh	r3, [r7, #14]
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	b29a      	uxth	r2, r3
 80165bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80165be:	4413      	add	r3, r2
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	b21a      	sxth	r2, r3
 80165c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80165c6:	f7ff ff0d 	bl	80163e4 <drawFastVLine>
        }
        if(y != py) {
 80165ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80165ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d033      	beq.n	801663e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80165d6:	787b      	ldrb	r3, [r7, #1]
 80165d8:	f003 0301 	and.w	r3, r3, #1
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d013      	beq.n	8016608 <fillCircleHelper+0x14a>
 80165e0:	88fa      	ldrh	r2, [r7, #6]
 80165e2:	897b      	ldrh	r3, [r7, #10]
 80165e4:	4413      	add	r3, r2
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	b218      	sxth	r0, r3
 80165ea:	88ba      	ldrh	r2, [r7, #4]
 80165ec:	89bb      	ldrh	r3, [r7, #12]
 80165ee:	1ad3      	subs	r3, r2, r3
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	b219      	sxth	r1, r3
 80165f4:	89bb      	ldrh	r3, [r7, #12]
 80165f6:	005b      	lsls	r3, r3, #1
 80165f8:	b29a      	uxth	r2, r3
 80165fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80165fc:	4413      	add	r3, r2
 80165fe:	b29b      	uxth	r3, r3
 8016600:	b21a      	sxth	r2, r3
 8016602:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016604:	f7ff feee 	bl	80163e4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8016608:	787b      	ldrb	r3, [r7, #1]
 801660a:	f003 0302 	and.w	r3, r3, #2
 801660e:	2b00      	cmp	r3, #0
 8016610:	d013      	beq.n	801663a <fillCircleHelper+0x17c>
 8016612:	88fa      	ldrh	r2, [r7, #6]
 8016614:	897b      	ldrh	r3, [r7, #10]
 8016616:	1ad3      	subs	r3, r2, r3
 8016618:	b29b      	uxth	r3, r3
 801661a:	b218      	sxth	r0, r3
 801661c:	88ba      	ldrh	r2, [r7, #4]
 801661e:	89bb      	ldrh	r3, [r7, #12]
 8016620:	1ad3      	subs	r3, r2, r3
 8016622:	b29b      	uxth	r3, r3
 8016624:	b219      	sxth	r1, r3
 8016626:	89bb      	ldrh	r3, [r7, #12]
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	b29a      	uxth	r2, r3
 801662c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801662e:	4413      	add	r3, r2
 8016630:	b29b      	uxth	r3, r3
 8016632:	b21a      	sxth	r2, r3
 8016634:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016636:	f7ff fed5 	bl	80163e4 <drawFastVLine>
            py = y;
 801663a:	89fb      	ldrh	r3, [r7, #14]
 801663c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 801663e:	8a3b      	ldrh	r3, [r7, #16]
 8016640:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8016642:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801664a:	429a      	cmp	r2, r3
 801664c:	f6ff af63 	blt.w	8016516 <fillCircleHelper+0x58>
    }
}
 8016650:	bf00      	nop
 8016652:	bf00      	nop
 8016654:	371c      	adds	r7, #28
 8016656:	46bd      	mov	sp, r7
 8016658:	bd90      	pop	{r4, r7, pc}

0801665a <drawRect>:

void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 801665a:	b590      	push	{r4, r7, lr}
 801665c:	b083      	sub	sp, #12
 801665e:	af00      	add	r7, sp, #0
 8016660:	4604      	mov	r4, r0
 8016662:	4608      	mov	r0, r1
 8016664:	4611      	mov	r1, r2
 8016666:	461a      	mov	r2, r3
 8016668:	4623      	mov	r3, r4
 801666a:	80fb      	strh	r3, [r7, #6]
 801666c:	4603      	mov	r3, r0
 801666e:	80bb      	strh	r3, [r7, #4]
 8016670:	460b      	mov	r3, r1
 8016672:	807b      	strh	r3, [r7, #2]
 8016674:	4613      	mov	r3, r2
 8016676:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8016678:	8b3b      	ldrh	r3, [r7, #24]
 801667a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801667e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016682:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8016686:	f7ff fecc 	bl	8016422 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 801668a:	88ba      	ldrh	r2, [r7, #4]
 801668c:	883b      	ldrh	r3, [r7, #0]
 801668e:	4413      	add	r3, r2
 8016690:	b29b      	uxth	r3, r3
 8016692:	3b01      	subs	r3, #1
 8016694:	b29b      	uxth	r3, r3
 8016696:	b219      	sxth	r1, r3
 8016698:	8b3b      	ldrh	r3, [r7, #24]
 801669a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801669e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80166a2:	f7ff febe 	bl	8016422 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 80166a6:	8b3b      	ldrh	r3, [r7, #24]
 80166a8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80166ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80166b0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80166b4:	f7ff fe96 	bl	80163e4 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 80166b8:	88fa      	ldrh	r2, [r7, #6]
 80166ba:	887b      	ldrh	r3, [r7, #2]
 80166bc:	4413      	add	r3, r2
 80166be:	b29b      	uxth	r3, r3
 80166c0:	3b01      	subs	r3, #1
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	b218      	sxth	r0, r3
 80166c6:	8b3b      	ldrh	r3, [r7, #24]
 80166c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80166cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80166d0:	f7ff fe88 	bl	80163e4 <drawFastVLine>
}
 80166d4:	bf00      	nop
 80166d6:	370c      	adds	r7, #12
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd90      	pop	{r4, r7, pc}

080166dc <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80166dc:	b590      	push	{r4, r7, lr}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	4604      	mov	r4, r0
 80166e4:	4608      	mov	r0, r1
 80166e6:	4611      	mov	r1, r2
 80166e8:	461a      	mov	r2, r3
 80166ea:	4623      	mov	r3, r4
 80166ec:	80fb      	strh	r3, [r7, #6]
 80166ee:	4603      	mov	r3, r0
 80166f0:	80bb      	strh	r3, [r7, #4]
 80166f2:	460b      	mov	r3, r1
 80166f4:	807b      	strh	r3, [r7, #2]
 80166f6:	4613      	mov	r3, r2
 80166f8:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80166fa:	4bb9      	ldr	r3, [pc, #740]	; (80169e0 <fillRect+0x304>)
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d005      	beq.n	801670e <fillRect+0x32>
 8016702:	8c3b      	ldrh	r3, [r7, #32]
 8016704:	4618      	mov	r0, r3
 8016706:	f7fb f8d3 	bl	80118b0 <color565_to_555>
 801670a:	4603      	mov	r3, r0
 801670c:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 801670e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016712:	2b00      	cmp	r3, #0
 8016714:	da08      	bge.n	8016728 <fillRect+0x4c>
        w = -w;
 8016716:	887b      	ldrh	r3, [r7, #2]
 8016718:	425b      	negs	r3, r3
 801671a:	b29b      	uxth	r3, r3
 801671c:	807b      	strh	r3, [r7, #2]
        x -= w;
 801671e:	88fa      	ldrh	r2, [r7, #6]
 8016720:	887b      	ldrh	r3, [r7, #2]
 8016722:	1ad3      	subs	r3, r2, r3
 8016724:	b29b      	uxth	r3, r3
 8016726:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8016728:	88fa      	ldrh	r2, [r7, #6]
 801672a:	887b      	ldrh	r3, [r7, #2]
 801672c:	4413      	add	r3, r2
 801672e:	b29b      	uxth	r3, r3
 8016730:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8016732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016736:	2b00      	cmp	r3, #0
 8016738:	da01      	bge.n	801673e <fillRect+0x62>
        x = 0;
 801673a:	2300      	movs	r3, #0
 801673c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 801673e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8016742:	f7fb f89d 	bl	8011880 <width>
 8016746:	4603      	mov	r3, r0
 8016748:	429c      	cmp	r4, r3
 801674a:	dd03      	ble.n	8016754 <fillRect+0x78>
        end = width();
 801674c:	f7fb f898 	bl	8011880 <width>
 8016750:	4603      	mov	r3, r0
 8016752:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8016754:	89fa      	ldrh	r2, [r7, #14]
 8016756:	88fb      	ldrh	r3, [r7, #6]
 8016758:	1ad3      	subs	r3, r2, r3
 801675a:	b29b      	uxth	r3, r3
 801675c:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 801675e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016762:	2b00      	cmp	r3, #0
 8016764:	da08      	bge.n	8016778 <fillRect+0x9c>
        h = -h;
 8016766:	883b      	ldrh	r3, [r7, #0]
 8016768:	425b      	negs	r3, r3
 801676a:	b29b      	uxth	r3, r3
 801676c:	803b      	strh	r3, [r7, #0]
        y -= h;
 801676e:	88ba      	ldrh	r2, [r7, #4]
 8016770:	883b      	ldrh	r3, [r7, #0]
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	b29b      	uxth	r3, r3
 8016776:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8016778:	88ba      	ldrh	r2, [r7, #4]
 801677a:	883b      	ldrh	r3, [r7, #0]
 801677c:	4413      	add	r3, r2
 801677e:	b29b      	uxth	r3, r3
 8016780:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8016782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	da01      	bge.n	801678e <fillRect+0xb2>
        y = 0;
 801678a:	2300      	movs	r3, #0
 801678c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 801678e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8016792:	f7fb f881 	bl	8011898 <height>
 8016796:	4603      	mov	r3, r0
 8016798:	429c      	cmp	r4, r3
 801679a:	dd03      	ble.n	80167a4 <fillRect+0xc8>
        end = height();
 801679c:	f7fb f87c 	bl	8011898 <height>
 80167a0:	4603      	mov	r3, r0
 80167a2:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80167a4:	89fa      	ldrh	r2, [r7, #14]
 80167a6:	88bb      	ldrh	r3, [r7, #4]
 80167a8:	1ad3      	subs	r3, r2, r3
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80167ae:	88fa      	ldrh	r2, [r7, #6]
 80167b0:	887b      	ldrh	r3, [r7, #2]
 80167b2:	4413      	add	r3, r2
 80167b4:	b29b      	uxth	r3, r3
 80167b6:	3b01      	subs	r3, #1
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	b21c      	sxth	r4, r3
 80167bc:	88ba      	ldrh	r2, [r7, #4]
 80167be:	883b      	ldrh	r3, [r7, #0]
 80167c0:	4413      	add	r3, r2
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	3b01      	subs	r3, #1
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	b21b      	sxth	r3, r3
 80167ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80167ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80167d2:	4622      	mov	r2, r4
 80167d4:	f7ff fafc 	bl	8015dd0 <setAddrWindow>
    CS_ACTIVE;
 80167d8:	2108      	movs	r1, #8
 80167da:	4882      	ldr	r0, [pc, #520]	; (80169e4 <fillRect+0x308>)
 80167dc:	f7fb f801 	bl	80117e2 <PIN_LOW>
    WriteCmd(_MW);
 80167e0:	2120      	movs	r1, #32
 80167e2:	4881      	ldr	r0, [pc, #516]	; (80169e8 <fillRect+0x30c>)
 80167e4:	f7fa fffd 	bl	80117e2 <PIN_LOW>
 80167e8:	4b80      	ldr	r3, [pc, #512]	; (80169ec <fillRect+0x310>)
 80167ea:	881b      	ldrh	r3, [r3, #0]
 80167ec:	0a1b      	lsrs	r3, r3, #8
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	737b      	strb	r3, [r7, #13]
 80167f2:	4b7e      	ldr	r3, [pc, #504]	; (80169ec <fillRect+0x310>)
 80167f4:	881b      	ldrh	r3, [r3, #0]
 80167f6:	733b      	strb	r3, [r7, #12]
 80167f8:	4b7b      	ldr	r3, [pc, #492]	; (80169e8 <fillRect+0x30c>)
 80167fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80167fe:	619a      	str	r2, [r3, #24]
 8016800:	4b7b      	ldr	r3, [pc, #492]	; (80169f0 <fillRect+0x314>)
 8016802:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8016806:	619a      	str	r2, [r3, #24]
 8016808:	4b76      	ldr	r3, [pc, #472]	; (80169e4 <fillRect+0x308>)
 801680a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801680e:	619a      	str	r2, [r3, #24]
 8016810:	7b7b      	ldrb	r3, [r7, #13]
 8016812:	039b      	lsls	r3, r3, #14
 8016814:	4a74      	ldr	r2, [pc, #464]	; (80169e8 <fillRect+0x30c>)
 8016816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801681a:	6193      	str	r3, [r2, #24]
 801681c:	7b7b      	ldrb	r3, [r7, #13]
 801681e:	029b      	lsls	r3, r3, #10
 8016820:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016824:	7b7b      	ldrb	r3, [r7, #13]
 8016826:	019b      	lsls	r3, r3, #6
 8016828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801682c:	431a      	orrs	r2, r3
 801682e:	7b7b      	ldrb	r3, [r7, #13]
 8016830:	00db      	lsls	r3, r3, #3
 8016832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016836:	431a      	orrs	r2, r3
 8016838:	4b6d      	ldr	r3, [pc, #436]	; (80169f0 <fillRect+0x314>)
 801683a:	619a      	str	r2, [r3, #24]
 801683c:	7b7b      	ldrb	r3, [r7, #13]
 801683e:	031b      	lsls	r3, r3, #12
 8016840:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016844:	7b7b      	ldrb	r3, [r7, #13]
 8016846:	035b      	lsls	r3, r3, #13
 8016848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801684c:	431a      	orrs	r2, r3
 801684e:	7b7b      	ldrb	r3, [r7, #13]
 8016850:	029b      	lsls	r3, r3, #10
 8016852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016856:	431a      	orrs	r2, r3
 8016858:	7b7b      	ldrb	r3, [r7, #13]
 801685a:	019b      	lsls	r3, r3, #6
 801685c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016860:	431a      	orrs	r2, r3
 8016862:	4b60      	ldr	r3, [pc, #384]	; (80169e4 <fillRect+0x308>)
 8016864:	619a      	str	r2, [r3, #24]
 8016866:	2101      	movs	r1, #1
 8016868:	4862      	ldr	r0, [pc, #392]	; (80169f4 <fillRect+0x318>)
 801686a:	f7fa ffba 	bl	80117e2 <PIN_LOW>
 801686e:	2101      	movs	r1, #1
 8016870:	4860      	ldr	r0, [pc, #384]	; (80169f4 <fillRect+0x318>)
 8016872:	f7fa ffb6 	bl	80117e2 <PIN_LOW>
 8016876:	2101      	movs	r1, #1
 8016878:	485e      	ldr	r0, [pc, #376]	; (80169f4 <fillRect+0x318>)
 801687a:	f7fa ffb2 	bl	80117e2 <PIN_LOW>
 801687e:	2101      	movs	r1, #1
 8016880:	485c      	ldr	r0, [pc, #368]	; (80169f4 <fillRect+0x318>)
 8016882:	f7fa ffae 	bl	80117e2 <PIN_LOW>
 8016886:	2101      	movs	r1, #1
 8016888:	485a      	ldr	r0, [pc, #360]	; (80169f4 <fillRect+0x318>)
 801688a:	f7fa ffaa 	bl	80117e2 <PIN_LOW>
 801688e:	2101      	movs	r1, #1
 8016890:	4858      	ldr	r0, [pc, #352]	; (80169f4 <fillRect+0x318>)
 8016892:	f7fa ffa6 	bl	80117e2 <PIN_LOW>
 8016896:	2101      	movs	r1, #1
 8016898:	4856      	ldr	r0, [pc, #344]	; (80169f4 <fillRect+0x318>)
 801689a:	f7fa ffa2 	bl	80117e2 <PIN_LOW>
 801689e:	2101      	movs	r1, #1
 80168a0:	4854      	ldr	r0, [pc, #336]	; (80169f4 <fillRect+0x318>)
 80168a2:	f7fa ff9e 	bl	80117e2 <PIN_LOW>
 80168a6:	2101      	movs	r1, #1
 80168a8:	4852      	ldr	r0, [pc, #328]	; (80169f4 <fillRect+0x318>)
 80168aa:	f7fa ff9a 	bl	80117e2 <PIN_LOW>
 80168ae:	2101      	movs	r1, #1
 80168b0:	4850      	ldr	r0, [pc, #320]	; (80169f4 <fillRect+0x318>)
 80168b2:	f7fa ff96 	bl	80117e2 <PIN_LOW>
 80168b6:	2101      	movs	r1, #1
 80168b8:	484e      	ldr	r0, [pc, #312]	; (80169f4 <fillRect+0x318>)
 80168ba:	f7fa ff92 	bl	80117e2 <PIN_LOW>
 80168be:	2101      	movs	r1, #1
 80168c0:	484c      	ldr	r0, [pc, #304]	; (80169f4 <fillRect+0x318>)
 80168c2:	f7fa ff8e 	bl	80117e2 <PIN_LOW>
 80168c6:	2101      	movs	r1, #1
 80168c8:	484a      	ldr	r0, [pc, #296]	; (80169f4 <fillRect+0x318>)
 80168ca:	f7fa ff8a 	bl	80117e2 <PIN_LOW>
 80168ce:	2101      	movs	r1, #1
 80168d0:	4848      	ldr	r0, [pc, #288]	; (80169f4 <fillRect+0x318>)
 80168d2:	f7fa ff86 	bl	80117e2 <PIN_LOW>
 80168d6:	2101      	movs	r1, #1
 80168d8:	4846      	ldr	r0, [pc, #280]	; (80169f4 <fillRect+0x318>)
 80168da:	f7fa ff82 	bl	80117e2 <PIN_LOW>
 80168de:	2101      	movs	r1, #1
 80168e0:	4844      	ldr	r0, [pc, #272]	; (80169f4 <fillRect+0x318>)
 80168e2:	f7fa ff7e 	bl	80117e2 <PIN_LOW>
 80168e6:	2101      	movs	r1, #1
 80168e8:	4842      	ldr	r0, [pc, #264]	; (80169f4 <fillRect+0x318>)
 80168ea:	f7fa ff7a 	bl	80117e2 <PIN_LOW>
 80168ee:	2101      	movs	r1, #1
 80168f0:	4840      	ldr	r0, [pc, #256]	; (80169f4 <fillRect+0x318>)
 80168f2:	f7fa ff86 	bl	8011802 <PIN_HIGH>
 80168f6:	2101      	movs	r1, #1
 80168f8:	483e      	ldr	r0, [pc, #248]	; (80169f4 <fillRect+0x318>)
 80168fa:	f7fa ff82 	bl	8011802 <PIN_HIGH>
 80168fe:	4b3a      	ldr	r3, [pc, #232]	; (80169e8 <fillRect+0x30c>)
 8016900:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016904:	619a      	str	r2, [r3, #24]
 8016906:	4b3a      	ldr	r3, [pc, #232]	; (80169f0 <fillRect+0x314>)
 8016908:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801690c:	619a      	str	r2, [r3, #24]
 801690e:	4b35      	ldr	r3, [pc, #212]	; (80169e4 <fillRect+0x308>)
 8016910:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8016914:	619a      	str	r2, [r3, #24]
 8016916:	7b3b      	ldrb	r3, [r7, #12]
 8016918:	039b      	lsls	r3, r3, #14
 801691a:	4a33      	ldr	r2, [pc, #204]	; (80169e8 <fillRect+0x30c>)
 801691c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016920:	6193      	str	r3, [r2, #24]
 8016922:	7b3b      	ldrb	r3, [r7, #12]
 8016924:	029b      	lsls	r3, r3, #10
 8016926:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801692a:	7b3b      	ldrb	r3, [r7, #12]
 801692c:	019b      	lsls	r3, r3, #6
 801692e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016932:	431a      	orrs	r2, r3
 8016934:	7b3b      	ldrb	r3, [r7, #12]
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801693c:	431a      	orrs	r2, r3
 801693e:	4b2c      	ldr	r3, [pc, #176]	; (80169f0 <fillRect+0x314>)
 8016940:	619a      	str	r2, [r3, #24]
 8016942:	7b3b      	ldrb	r3, [r7, #12]
 8016944:	031b      	lsls	r3, r3, #12
 8016946:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801694a:	7b3b      	ldrb	r3, [r7, #12]
 801694c:	035b      	lsls	r3, r3, #13
 801694e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016952:	431a      	orrs	r2, r3
 8016954:	7b3b      	ldrb	r3, [r7, #12]
 8016956:	029b      	lsls	r3, r3, #10
 8016958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801695c:	431a      	orrs	r2, r3
 801695e:	7b3b      	ldrb	r3, [r7, #12]
 8016960:	019b      	lsls	r3, r3, #6
 8016962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016966:	431a      	orrs	r2, r3
 8016968:	4b1e      	ldr	r3, [pc, #120]	; (80169e4 <fillRect+0x308>)
 801696a:	619a      	str	r2, [r3, #24]
 801696c:	2101      	movs	r1, #1
 801696e:	4821      	ldr	r0, [pc, #132]	; (80169f4 <fillRect+0x318>)
 8016970:	f7fa ff37 	bl	80117e2 <PIN_LOW>
 8016974:	2101      	movs	r1, #1
 8016976:	481f      	ldr	r0, [pc, #124]	; (80169f4 <fillRect+0x318>)
 8016978:	f7fa ff33 	bl	80117e2 <PIN_LOW>
 801697c:	2101      	movs	r1, #1
 801697e:	481d      	ldr	r0, [pc, #116]	; (80169f4 <fillRect+0x318>)
 8016980:	f7fa ff2f 	bl	80117e2 <PIN_LOW>
 8016984:	2101      	movs	r1, #1
 8016986:	481b      	ldr	r0, [pc, #108]	; (80169f4 <fillRect+0x318>)
 8016988:	f7fa ff2b 	bl	80117e2 <PIN_LOW>
 801698c:	2101      	movs	r1, #1
 801698e:	4819      	ldr	r0, [pc, #100]	; (80169f4 <fillRect+0x318>)
 8016990:	f7fa ff27 	bl	80117e2 <PIN_LOW>
 8016994:	2101      	movs	r1, #1
 8016996:	4817      	ldr	r0, [pc, #92]	; (80169f4 <fillRect+0x318>)
 8016998:	f7fa ff23 	bl	80117e2 <PIN_LOW>
 801699c:	2101      	movs	r1, #1
 801699e:	4815      	ldr	r0, [pc, #84]	; (80169f4 <fillRect+0x318>)
 80169a0:	f7fa ff1f 	bl	80117e2 <PIN_LOW>
 80169a4:	2101      	movs	r1, #1
 80169a6:	4813      	ldr	r0, [pc, #76]	; (80169f4 <fillRect+0x318>)
 80169a8:	f7fa ff1b 	bl	80117e2 <PIN_LOW>
 80169ac:	2101      	movs	r1, #1
 80169ae:	4811      	ldr	r0, [pc, #68]	; (80169f4 <fillRect+0x318>)
 80169b0:	f7fa ff17 	bl	80117e2 <PIN_LOW>
 80169b4:	2101      	movs	r1, #1
 80169b6:	480f      	ldr	r0, [pc, #60]	; (80169f4 <fillRect+0x318>)
 80169b8:	f7fa ff13 	bl	80117e2 <PIN_LOW>
 80169bc:	2101      	movs	r1, #1
 80169be:	480d      	ldr	r0, [pc, #52]	; (80169f4 <fillRect+0x318>)
 80169c0:	f7fa ff0f 	bl	80117e2 <PIN_LOW>
 80169c4:	2101      	movs	r1, #1
 80169c6:	480b      	ldr	r0, [pc, #44]	; (80169f4 <fillRect+0x318>)
 80169c8:	f7fa ff0b 	bl	80117e2 <PIN_LOW>
 80169cc:	2101      	movs	r1, #1
 80169ce:	4809      	ldr	r0, [pc, #36]	; (80169f4 <fillRect+0x318>)
 80169d0:	f7fa ff07 	bl	80117e2 <PIN_LOW>
 80169d4:	2101      	movs	r1, #1
 80169d6:	4807      	ldr	r0, [pc, #28]	; (80169f4 <fillRect+0x318>)
 80169d8:	f7fa ff03 	bl	80117e2 <PIN_LOW>
 80169dc:	2101      	movs	r1, #1
 80169de:	e00b      	b.n	80169f8 <fillRect+0x31c>
 80169e0:	20000219 	.word	0x20000219
 80169e4:	40021400 	.word	0x40021400
 80169e8:	40020c00 	.word	0x40020c00
 80169ec:	2000698c 	.word	0x2000698c
 80169f0:	40021000 	.word	0x40021000
 80169f4:	40020800 	.word	0x40020800
 80169f8:	48b7      	ldr	r0, [pc, #732]	; (8016cd8 <fillRect+0x5fc>)
 80169fa:	f7fa fef2 	bl	80117e2 <PIN_LOW>
 80169fe:	2101      	movs	r1, #1
 8016a00:	48b5      	ldr	r0, [pc, #724]	; (8016cd8 <fillRect+0x5fc>)
 8016a02:	f7fa feee 	bl	80117e2 <PIN_LOW>
 8016a06:	2101      	movs	r1, #1
 8016a08:	48b3      	ldr	r0, [pc, #716]	; (8016cd8 <fillRect+0x5fc>)
 8016a0a:	f7fa feea 	bl	80117e2 <PIN_LOW>
 8016a0e:	2101      	movs	r1, #1
 8016a10:	48b1      	ldr	r0, [pc, #708]	; (8016cd8 <fillRect+0x5fc>)
 8016a12:	f7fa fef6 	bl	8011802 <PIN_HIGH>
 8016a16:	2101      	movs	r1, #1
 8016a18:	48af      	ldr	r0, [pc, #700]	; (8016cd8 <fillRect+0x5fc>)
 8016a1a:	f7fa fef2 	bl	8011802 <PIN_HIGH>
 8016a1e:	2120      	movs	r1, #32
 8016a20:	48ae      	ldr	r0, [pc, #696]	; (8016cdc <fillRect+0x600>)
 8016a22:	f7fa feee 	bl	8011802 <PIN_HIGH>
    if (h > w) {
 8016a26:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	dd05      	ble.n	8016a3e <fillRect+0x362>
        end = h;
 8016a32:	883b      	ldrh	r3, [r7, #0]
 8016a34:	81fb      	strh	r3, [r7, #14]
        h = w;
 8016a36:	887b      	ldrh	r3, [r7, #2]
 8016a38:	803b      	strh	r3, [r7, #0]
        w = end;
 8016a3a:	89fb      	ldrh	r3, [r7, #14]
 8016a3c:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8016a3e:	8c3b      	ldrh	r3, [r7, #32]
 8016a40:	0a1b      	lsrs	r3, r3, #8
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	72fb      	strb	r3, [r7, #11]
 8016a46:	8c3b      	ldrh	r3, [r7, #32]
 8016a48:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8016a4a:	e110      	b.n	8016c6e <fillRect+0x592>
        end = w;
 8016a4c:	887b      	ldrh	r3, [r7, #2]
 8016a4e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8016a50:	4ba2      	ldr	r3, [pc, #648]	; (8016cdc <fillRect+0x600>)
 8016a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016a56:	619a      	str	r2, [r3, #24]
 8016a58:	4ba1      	ldr	r3, [pc, #644]	; (8016ce0 <fillRect+0x604>)
 8016a5a:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8016a5e:	619a      	str	r2, [r3, #24]
 8016a60:	4ba0      	ldr	r3, [pc, #640]	; (8016ce4 <fillRect+0x608>)
 8016a62:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8016a66:	619a      	str	r2, [r3, #24]
 8016a68:	7afb      	ldrb	r3, [r7, #11]
 8016a6a:	039b      	lsls	r3, r3, #14
 8016a6c:	4a9b      	ldr	r2, [pc, #620]	; (8016cdc <fillRect+0x600>)
 8016a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016a72:	6193      	str	r3, [r2, #24]
 8016a74:	7afb      	ldrb	r3, [r7, #11]
 8016a76:	029b      	lsls	r3, r3, #10
 8016a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016a7c:	7afb      	ldrb	r3, [r7, #11]
 8016a7e:	019b      	lsls	r3, r3, #6
 8016a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a84:	431a      	orrs	r2, r3
 8016a86:	7afb      	ldrb	r3, [r7, #11]
 8016a88:	00db      	lsls	r3, r3, #3
 8016a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016a8e:	431a      	orrs	r2, r3
 8016a90:	4b93      	ldr	r3, [pc, #588]	; (8016ce0 <fillRect+0x604>)
 8016a92:	619a      	str	r2, [r3, #24]
 8016a94:	7afb      	ldrb	r3, [r7, #11]
 8016a96:	031b      	lsls	r3, r3, #12
 8016a98:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016a9c:	7afb      	ldrb	r3, [r7, #11]
 8016a9e:	035b      	lsls	r3, r3, #13
 8016aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016aa4:	431a      	orrs	r2, r3
 8016aa6:	7afb      	ldrb	r3, [r7, #11]
 8016aa8:	029b      	lsls	r3, r3, #10
 8016aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016aae:	431a      	orrs	r2, r3
 8016ab0:	7afb      	ldrb	r3, [r7, #11]
 8016ab2:	019b      	lsls	r3, r3, #6
 8016ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ab8:	431a      	orrs	r2, r3
 8016aba:	4b8a      	ldr	r3, [pc, #552]	; (8016ce4 <fillRect+0x608>)
 8016abc:	619a      	str	r2, [r3, #24]
 8016abe:	2101      	movs	r1, #1
 8016ac0:	4885      	ldr	r0, [pc, #532]	; (8016cd8 <fillRect+0x5fc>)
 8016ac2:	f7fa fe8e 	bl	80117e2 <PIN_LOW>
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	4883      	ldr	r0, [pc, #524]	; (8016cd8 <fillRect+0x5fc>)
 8016aca:	f7fa fe8a 	bl	80117e2 <PIN_LOW>
 8016ace:	2101      	movs	r1, #1
 8016ad0:	4881      	ldr	r0, [pc, #516]	; (8016cd8 <fillRect+0x5fc>)
 8016ad2:	f7fa fe86 	bl	80117e2 <PIN_LOW>
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	487f      	ldr	r0, [pc, #508]	; (8016cd8 <fillRect+0x5fc>)
 8016ada:	f7fa fe82 	bl	80117e2 <PIN_LOW>
 8016ade:	2101      	movs	r1, #1
 8016ae0:	487d      	ldr	r0, [pc, #500]	; (8016cd8 <fillRect+0x5fc>)
 8016ae2:	f7fa fe7e 	bl	80117e2 <PIN_LOW>
 8016ae6:	2101      	movs	r1, #1
 8016ae8:	487b      	ldr	r0, [pc, #492]	; (8016cd8 <fillRect+0x5fc>)
 8016aea:	f7fa fe7a 	bl	80117e2 <PIN_LOW>
 8016aee:	2101      	movs	r1, #1
 8016af0:	4879      	ldr	r0, [pc, #484]	; (8016cd8 <fillRect+0x5fc>)
 8016af2:	f7fa fe76 	bl	80117e2 <PIN_LOW>
 8016af6:	2101      	movs	r1, #1
 8016af8:	4877      	ldr	r0, [pc, #476]	; (8016cd8 <fillRect+0x5fc>)
 8016afa:	f7fa fe72 	bl	80117e2 <PIN_LOW>
 8016afe:	2101      	movs	r1, #1
 8016b00:	4875      	ldr	r0, [pc, #468]	; (8016cd8 <fillRect+0x5fc>)
 8016b02:	f7fa fe6e 	bl	80117e2 <PIN_LOW>
 8016b06:	2101      	movs	r1, #1
 8016b08:	4873      	ldr	r0, [pc, #460]	; (8016cd8 <fillRect+0x5fc>)
 8016b0a:	f7fa fe6a 	bl	80117e2 <PIN_LOW>
 8016b0e:	2101      	movs	r1, #1
 8016b10:	4871      	ldr	r0, [pc, #452]	; (8016cd8 <fillRect+0x5fc>)
 8016b12:	f7fa fe66 	bl	80117e2 <PIN_LOW>
 8016b16:	2101      	movs	r1, #1
 8016b18:	486f      	ldr	r0, [pc, #444]	; (8016cd8 <fillRect+0x5fc>)
 8016b1a:	f7fa fe62 	bl	80117e2 <PIN_LOW>
 8016b1e:	2101      	movs	r1, #1
 8016b20:	486d      	ldr	r0, [pc, #436]	; (8016cd8 <fillRect+0x5fc>)
 8016b22:	f7fa fe5e 	bl	80117e2 <PIN_LOW>
 8016b26:	2101      	movs	r1, #1
 8016b28:	486b      	ldr	r0, [pc, #428]	; (8016cd8 <fillRect+0x5fc>)
 8016b2a:	f7fa fe5a 	bl	80117e2 <PIN_LOW>
 8016b2e:	2101      	movs	r1, #1
 8016b30:	4869      	ldr	r0, [pc, #420]	; (8016cd8 <fillRect+0x5fc>)
 8016b32:	f7fa fe56 	bl	80117e2 <PIN_LOW>
 8016b36:	2101      	movs	r1, #1
 8016b38:	4867      	ldr	r0, [pc, #412]	; (8016cd8 <fillRect+0x5fc>)
 8016b3a:	f7fa fe52 	bl	80117e2 <PIN_LOW>
 8016b3e:	2101      	movs	r1, #1
 8016b40:	4865      	ldr	r0, [pc, #404]	; (8016cd8 <fillRect+0x5fc>)
 8016b42:	f7fa fe4e 	bl	80117e2 <PIN_LOW>
 8016b46:	2101      	movs	r1, #1
 8016b48:	4863      	ldr	r0, [pc, #396]	; (8016cd8 <fillRect+0x5fc>)
 8016b4a:	f7fa fe5a 	bl	8011802 <PIN_HIGH>
 8016b4e:	2101      	movs	r1, #1
 8016b50:	4861      	ldr	r0, [pc, #388]	; (8016cd8 <fillRect+0x5fc>)
 8016b52:	f7fa fe56 	bl	8011802 <PIN_HIGH>
            write8(lo);
 8016b56:	4b61      	ldr	r3, [pc, #388]	; (8016cdc <fillRect+0x600>)
 8016b58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016b5c:	619a      	str	r2, [r3, #24]
 8016b5e:	4b60      	ldr	r3, [pc, #384]	; (8016ce0 <fillRect+0x604>)
 8016b60:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8016b64:	619a      	str	r2, [r3, #24]
 8016b66:	4b5f      	ldr	r3, [pc, #380]	; (8016ce4 <fillRect+0x608>)
 8016b68:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8016b6c:	619a      	str	r2, [r3, #24]
 8016b6e:	7abb      	ldrb	r3, [r7, #10]
 8016b70:	039b      	lsls	r3, r3, #14
 8016b72:	4a5a      	ldr	r2, [pc, #360]	; (8016cdc <fillRect+0x600>)
 8016b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b78:	6193      	str	r3, [r2, #24]
 8016b7a:	7abb      	ldrb	r3, [r7, #10]
 8016b7c:	029b      	lsls	r3, r3, #10
 8016b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016b82:	7abb      	ldrb	r3, [r7, #10]
 8016b84:	019b      	lsls	r3, r3, #6
 8016b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016b8a:	431a      	orrs	r2, r3
 8016b8c:	7abb      	ldrb	r3, [r7, #10]
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016b94:	431a      	orrs	r2, r3
 8016b96:	4b52      	ldr	r3, [pc, #328]	; (8016ce0 <fillRect+0x604>)
 8016b98:	619a      	str	r2, [r3, #24]
 8016b9a:	7abb      	ldrb	r3, [r7, #10]
 8016b9c:	031b      	lsls	r3, r3, #12
 8016b9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016ba2:	7abb      	ldrb	r3, [r7, #10]
 8016ba4:	035b      	lsls	r3, r3, #13
 8016ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016baa:	431a      	orrs	r2, r3
 8016bac:	7abb      	ldrb	r3, [r7, #10]
 8016bae:	029b      	lsls	r3, r3, #10
 8016bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016bb4:	431a      	orrs	r2, r3
 8016bb6:	7abb      	ldrb	r3, [r7, #10]
 8016bb8:	019b      	lsls	r3, r3, #6
 8016bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016bbe:	431a      	orrs	r2, r3
 8016bc0:	4b48      	ldr	r3, [pc, #288]	; (8016ce4 <fillRect+0x608>)
 8016bc2:	619a      	str	r2, [r3, #24]
 8016bc4:	2101      	movs	r1, #1
 8016bc6:	4844      	ldr	r0, [pc, #272]	; (8016cd8 <fillRect+0x5fc>)
 8016bc8:	f7fa fe0b 	bl	80117e2 <PIN_LOW>
 8016bcc:	2101      	movs	r1, #1
 8016bce:	4842      	ldr	r0, [pc, #264]	; (8016cd8 <fillRect+0x5fc>)
 8016bd0:	f7fa fe07 	bl	80117e2 <PIN_LOW>
 8016bd4:	2101      	movs	r1, #1
 8016bd6:	4840      	ldr	r0, [pc, #256]	; (8016cd8 <fillRect+0x5fc>)
 8016bd8:	f7fa fe03 	bl	80117e2 <PIN_LOW>
 8016bdc:	2101      	movs	r1, #1
 8016bde:	483e      	ldr	r0, [pc, #248]	; (8016cd8 <fillRect+0x5fc>)
 8016be0:	f7fa fdff 	bl	80117e2 <PIN_LOW>
 8016be4:	2101      	movs	r1, #1
 8016be6:	483c      	ldr	r0, [pc, #240]	; (8016cd8 <fillRect+0x5fc>)
 8016be8:	f7fa fdfb 	bl	80117e2 <PIN_LOW>
 8016bec:	2101      	movs	r1, #1
 8016bee:	483a      	ldr	r0, [pc, #232]	; (8016cd8 <fillRect+0x5fc>)
 8016bf0:	f7fa fdf7 	bl	80117e2 <PIN_LOW>
 8016bf4:	2101      	movs	r1, #1
 8016bf6:	4838      	ldr	r0, [pc, #224]	; (8016cd8 <fillRect+0x5fc>)
 8016bf8:	f7fa fdf3 	bl	80117e2 <PIN_LOW>
 8016bfc:	2101      	movs	r1, #1
 8016bfe:	4836      	ldr	r0, [pc, #216]	; (8016cd8 <fillRect+0x5fc>)
 8016c00:	f7fa fdef 	bl	80117e2 <PIN_LOW>
 8016c04:	2101      	movs	r1, #1
 8016c06:	4834      	ldr	r0, [pc, #208]	; (8016cd8 <fillRect+0x5fc>)
 8016c08:	f7fa fdeb 	bl	80117e2 <PIN_LOW>
 8016c0c:	2101      	movs	r1, #1
 8016c0e:	4832      	ldr	r0, [pc, #200]	; (8016cd8 <fillRect+0x5fc>)
 8016c10:	f7fa fde7 	bl	80117e2 <PIN_LOW>
 8016c14:	2101      	movs	r1, #1
 8016c16:	4830      	ldr	r0, [pc, #192]	; (8016cd8 <fillRect+0x5fc>)
 8016c18:	f7fa fde3 	bl	80117e2 <PIN_LOW>
 8016c1c:	2101      	movs	r1, #1
 8016c1e:	482e      	ldr	r0, [pc, #184]	; (8016cd8 <fillRect+0x5fc>)
 8016c20:	f7fa fddf 	bl	80117e2 <PIN_LOW>
 8016c24:	2101      	movs	r1, #1
 8016c26:	482c      	ldr	r0, [pc, #176]	; (8016cd8 <fillRect+0x5fc>)
 8016c28:	f7fa fddb 	bl	80117e2 <PIN_LOW>
 8016c2c:	2101      	movs	r1, #1
 8016c2e:	482a      	ldr	r0, [pc, #168]	; (8016cd8 <fillRect+0x5fc>)
 8016c30:	f7fa fdd7 	bl	80117e2 <PIN_LOW>
 8016c34:	2101      	movs	r1, #1
 8016c36:	4828      	ldr	r0, [pc, #160]	; (8016cd8 <fillRect+0x5fc>)
 8016c38:	f7fa fdd3 	bl	80117e2 <PIN_LOW>
 8016c3c:	2101      	movs	r1, #1
 8016c3e:	4826      	ldr	r0, [pc, #152]	; (8016cd8 <fillRect+0x5fc>)
 8016c40:	f7fa fdcf 	bl	80117e2 <PIN_LOW>
 8016c44:	2101      	movs	r1, #1
 8016c46:	4824      	ldr	r0, [pc, #144]	; (8016cd8 <fillRect+0x5fc>)
 8016c48:	f7fa fdcb 	bl	80117e2 <PIN_LOW>
 8016c4c:	2101      	movs	r1, #1
 8016c4e:	4822      	ldr	r0, [pc, #136]	; (8016cd8 <fillRect+0x5fc>)
 8016c50:	f7fa fdd7 	bl	8011802 <PIN_HIGH>
 8016c54:	2101      	movs	r1, #1
 8016c56:	4820      	ldr	r0, [pc, #128]	; (8016cd8 <fillRect+0x5fc>)
 8016c58:	f7fa fdd3 	bl	8011802 <PIN_HIGH>
        } while (--end != 0);
 8016c5c:	89fb      	ldrh	r3, [r7, #14]
 8016c5e:	3b01      	subs	r3, #1
 8016c60:	b29b      	uxth	r3, r3
 8016c62:	81fb      	strh	r3, [r7, #14]
 8016c64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f47f aef1 	bne.w	8016a50 <fillRect+0x374>
    while (h-- > 0) {
 8016c6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016c72:	b29a      	uxth	r2, r3
 8016c74:	3a01      	subs	r2, #1
 8016c76:	b292      	uxth	r2, r2
 8016c78:	803a      	strh	r2, [r7, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	f73f aee6 	bgt.w	8016a4c <fillRect+0x370>
#endif
    }
    CS_IDLE;
 8016c80:	2108      	movs	r1, #8
 8016c82:	4818      	ldr	r0, [pc, #96]	; (8016ce4 <fillRect+0x608>)
 8016c84:	f7fa fdbd 	bl	8011802 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8016c88:	4b17      	ldr	r3, [pc, #92]	; (8016ce8 <fillRect+0x60c>)
 8016c8a:	881b      	ldrh	r3, [r3, #0]
 8016c8c:	f003 0301 	and.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d00b      	beq.n	8016cac <fillRect+0x5d0>
 8016c94:	4b15      	ldr	r3, [pc, #84]	; (8016cec <fillRect+0x610>)
 8016c96:	881b      	ldrh	r3, [r3, #0]
 8016c98:	f241 5226 	movw	r2, #5414	; 0x1526
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d116      	bne.n	8016cce <fillRect+0x5f2>
 8016ca0:	4b13      	ldr	r3, [pc, #76]	; (8016cf0 <fillRect+0x614>)
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	f003 0301 	and.w	r3, r3, #1
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d010      	beq.n	8016cce <fillRect+0x5f2>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8016cac:	f7fa fde8 	bl	8011880 <width>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	3b01      	subs	r3, #1
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	b21c      	sxth	r4, r3
 8016cb8:	f7fa fdee 	bl	8011898 <height>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	3b01      	subs	r3, #1
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	b21b      	sxth	r3, r3
 8016cc4:	4622      	mov	r2, r4
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	2000      	movs	r0, #0
 8016cca:	f7ff f881 	bl	8015dd0 <setAddrWindow>
}
 8016cce:	bf00      	nop
 8016cd0:	3714      	adds	r7, #20
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd90      	pop	{r4, r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	40020800 	.word	0x40020800
 8016cdc:	40020c00 	.word	0x40020c00
 8016ce0:	40021000 	.word	0x40021000
 8016ce4:	40021400 	.word	0x40021400
 8016ce8:	2000698e 	.word	0x2000698e
 8016cec:	2000699c 	.word	0x2000699c
 8016cf0:	2000021b 	.word	0x2000021b

08016cf4 <__libc_init_array>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	4d0d      	ldr	r5, [pc, #52]	; (8016d2c <__libc_init_array+0x38>)
 8016cf8:	4c0d      	ldr	r4, [pc, #52]	; (8016d30 <__libc_init_array+0x3c>)
 8016cfa:	1b64      	subs	r4, r4, r5
 8016cfc:	10a4      	asrs	r4, r4, #2
 8016cfe:	2600      	movs	r6, #0
 8016d00:	42a6      	cmp	r6, r4
 8016d02:	d109      	bne.n	8016d18 <__libc_init_array+0x24>
 8016d04:	4d0b      	ldr	r5, [pc, #44]	; (8016d34 <__libc_init_array+0x40>)
 8016d06:	4c0c      	ldr	r4, [pc, #48]	; (8016d38 <__libc_init_array+0x44>)
 8016d08:	f001 f8cc 	bl	8017ea4 <_init>
 8016d0c:	1b64      	subs	r4, r4, r5
 8016d0e:	10a4      	asrs	r4, r4, #2
 8016d10:	2600      	movs	r6, #0
 8016d12:	42a6      	cmp	r6, r4
 8016d14:	d105      	bne.n	8016d22 <__libc_init_array+0x2e>
 8016d16:	bd70      	pop	{r4, r5, r6, pc}
 8016d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d1c:	4798      	blx	r3
 8016d1e:	3601      	adds	r6, #1
 8016d20:	e7ee      	b.n	8016d00 <__libc_init_array+0xc>
 8016d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d26:	4798      	blx	r3
 8016d28:	3601      	adds	r6, #1
 8016d2a:	e7f2      	b.n	8016d12 <__libc_init_array+0x1e>
 8016d2c:	0801b07c 	.word	0x0801b07c
 8016d30:	0801b07c 	.word	0x0801b07c
 8016d34:	0801b07c 	.word	0x0801b07c
 8016d38:	0801b080 	.word	0x0801b080

08016d3c <memcmp>:
 8016d3c:	b530      	push	{r4, r5, lr}
 8016d3e:	3901      	subs	r1, #1
 8016d40:	2400      	movs	r4, #0
 8016d42:	42a2      	cmp	r2, r4
 8016d44:	d101      	bne.n	8016d4a <memcmp+0xe>
 8016d46:	2000      	movs	r0, #0
 8016d48:	e005      	b.n	8016d56 <memcmp+0x1a>
 8016d4a:	5d03      	ldrb	r3, [r0, r4]
 8016d4c:	3401      	adds	r4, #1
 8016d4e:	5d0d      	ldrb	r5, [r1, r4]
 8016d50:	42ab      	cmp	r3, r5
 8016d52:	d0f6      	beq.n	8016d42 <memcmp+0x6>
 8016d54:	1b58      	subs	r0, r3, r5
 8016d56:	bd30      	pop	{r4, r5, pc}

08016d58 <memcpy>:
 8016d58:	440a      	add	r2, r1
 8016d5a:	4291      	cmp	r1, r2
 8016d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d60:	d100      	bne.n	8016d64 <memcpy+0xc>
 8016d62:	4770      	bx	lr
 8016d64:	b510      	push	{r4, lr}
 8016d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d6e:	4291      	cmp	r1, r2
 8016d70:	d1f9      	bne.n	8016d66 <memcpy+0xe>
 8016d72:	bd10      	pop	{r4, pc}

08016d74 <memset>:
 8016d74:	4402      	add	r2, r0
 8016d76:	4603      	mov	r3, r0
 8016d78:	4293      	cmp	r3, r2
 8016d7a:	d100      	bne.n	8016d7e <memset+0xa>
 8016d7c:	4770      	bx	lr
 8016d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8016d82:	e7f9      	b.n	8016d78 <memset+0x4>

08016d84 <iprintf>:
 8016d84:	b40f      	push	{r0, r1, r2, r3}
 8016d86:	4b0a      	ldr	r3, [pc, #40]	; (8016db0 <iprintf+0x2c>)
 8016d88:	b513      	push	{r0, r1, r4, lr}
 8016d8a:	681c      	ldr	r4, [r3, #0]
 8016d8c:	b124      	cbz	r4, 8016d98 <iprintf+0x14>
 8016d8e:	69a3      	ldr	r3, [r4, #24]
 8016d90:	b913      	cbnz	r3, 8016d98 <iprintf+0x14>
 8016d92:	4620      	mov	r0, r4
 8016d94:	f000 fabc 	bl	8017310 <__sinit>
 8016d98:	ab05      	add	r3, sp, #20
 8016d9a:	9a04      	ldr	r2, [sp, #16]
 8016d9c:	68a1      	ldr	r1, [r4, #8]
 8016d9e:	9301      	str	r3, [sp, #4]
 8016da0:	4620      	mov	r0, r4
 8016da2:	f000 fca7 	bl	80176f4 <_vfiprintf_r>
 8016da6:	b002      	add	sp, #8
 8016da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dac:	b004      	add	sp, #16
 8016dae:	4770      	bx	lr
 8016db0:	20000018 	.word	0x20000018

08016db4 <_puts_r>:
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	460e      	mov	r6, r1
 8016db8:	4605      	mov	r5, r0
 8016dba:	b118      	cbz	r0, 8016dc4 <_puts_r+0x10>
 8016dbc:	6983      	ldr	r3, [r0, #24]
 8016dbe:	b90b      	cbnz	r3, 8016dc4 <_puts_r+0x10>
 8016dc0:	f000 faa6 	bl	8017310 <__sinit>
 8016dc4:	69ab      	ldr	r3, [r5, #24]
 8016dc6:	68ac      	ldr	r4, [r5, #8]
 8016dc8:	b913      	cbnz	r3, 8016dd0 <_puts_r+0x1c>
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f000 faa0 	bl	8017310 <__sinit>
 8016dd0:	4b2c      	ldr	r3, [pc, #176]	; (8016e84 <_puts_r+0xd0>)
 8016dd2:	429c      	cmp	r4, r3
 8016dd4:	d120      	bne.n	8016e18 <_puts_r+0x64>
 8016dd6:	686c      	ldr	r4, [r5, #4]
 8016dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016dda:	07db      	lsls	r3, r3, #31
 8016ddc:	d405      	bmi.n	8016dea <_puts_r+0x36>
 8016dde:	89a3      	ldrh	r3, [r4, #12]
 8016de0:	0598      	lsls	r0, r3, #22
 8016de2:	d402      	bmi.n	8016dea <_puts_r+0x36>
 8016de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016de6:	f000 fb43 	bl	8017470 <__retarget_lock_acquire_recursive>
 8016dea:	89a3      	ldrh	r3, [r4, #12]
 8016dec:	0719      	lsls	r1, r3, #28
 8016dee:	d51d      	bpl.n	8016e2c <_puts_r+0x78>
 8016df0:	6923      	ldr	r3, [r4, #16]
 8016df2:	b1db      	cbz	r3, 8016e2c <_puts_r+0x78>
 8016df4:	3e01      	subs	r6, #1
 8016df6:	68a3      	ldr	r3, [r4, #8]
 8016df8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016dfc:	3b01      	subs	r3, #1
 8016dfe:	60a3      	str	r3, [r4, #8]
 8016e00:	bb39      	cbnz	r1, 8016e52 <_puts_r+0x9e>
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	da38      	bge.n	8016e78 <_puts_r+0xc4>
 8016e06:	4622      	mov	r2, r4
 8016e08:	210a      	movs	r1, #10
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f000 f888 	bl	8016f20 <__swbuf_r>
 8016e10:	3001      	adds	r0, #1
 8016e12:	d011      	beq.n	8016e38 <_puts_r+0x84>
 8016e14:	250a      	movs	r5, #10
 8016e16:	e011      	b.n	8016e3c <_puts_r+0x88>
 8016e18:	4b1b      	ldr	r3, [pc, #108]	; (8016e88 <_puts_r+0xd4>)
 8016e1a:	429c      	cmp	r4, r3
 8016e1c:	d101      	bne.n	8016e22 <_puts_r+0x6e>
 8016e1e:	68ac      	ldr	r4, [r5, #8]
 8016e20:	e7da      	b.n	8016dd8 <_puts_r+0x24>
 8016e22:	4b1a      	ldr	r3, [pc, #104]	; (8016e8c <_puts_r+0xd8>)
 8016e24:	429c      	cmp	r4, r3
 8016e26:	bf08      	it	eq
 8016e28:	68ec      	ldreq	r4, [r5, #12]
 8016e2a:	e7d5      	b.n	8016dd8 <_puts_r+0x24>
 8016e2c:	4621      	mov	r1, r4
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f000 f8c8 	bl	8016fc4 <__swsetup_r>
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d0dd      	beq.n	8016df4 <_puts_r+0x40>
 8016e38:	f04f 35ff 	mov.w	r5, #4294967295
 8016e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e3e:	07da      	lsls	r2, r3, #31
 8016e40:	d405      	bmi.n	8016e4e <_puts_r+0x9a>
 8016e42:	89a3      	ldrh	r3, [r4, #12]
 8016e44:	059b      	lsls	r3, r3, #22
 8016e46:	d402      	bmi.n	8016e4e <_puts_r+0x9a>
 8016e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e4a:	f000 fb12 	bl	8017472 <__retarget_lock_release_recursive>
 8016e4e:	4628      	mov	r0, r5
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	da04      	bge.n	8016e60 <_puts_r+0xac>
 8016e56:	69a2      	ldr	r2, [r4, #24]
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	dc06      	bgt.n	8016e6a <_puts_r+0xb6>
 8016e5c:	290a      	cmp	r1, #10
 8016e5e:	d004      	beq.n	8016e6a <_puts_r+0xb6>
 8016e60:	6823      	ldr	r3, [r4, #0]
 8016e62:	1c5a      	adds	r2, r3, #1
 8016e64:	6022      	str	r2, [r4, #0]
 8016e66:	7019      	strb	r1, [r3, #0]
 8016e68:	e7c5      	b.n	8016df6 <_puts_r+0x42>
 8016e6a:	4622      	mov	r2, r4
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	f000 f857 	bl	8016f20 <__swbuf_r>
 8016e72:	3001      	adds	r0, #1
 8016e74:	d1bf      	bne.n	8016df6 <_puts_r+0x42>
 8016e76:	e7df      	b.n	8016e38 <_puts_r+0x84>
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	250a      	movs	r5, #10
 8016e7c:	1c5a      	adds	r2, r3, #1
 8016e7e:	6022      	str	r2, [r4, #0]
 8016e80:	701d      	strb	r5, [r3, #0]
 8016e82:	e7db      	b.n	8016e3c <_puts_r+0x88>
 8016e84:	0801b000 	.word	0x0801b000
 8016e88:	0801b020 	.word	0x0801b020
 8016e8c:	0801afe0 	.word	0x0801afe0

08016e90 <puts>:
 8016e90:	4b02      	ldr	r3, [pc, #8]	; (8016e9c <puts+0xc>)
 8016e92:	4601      	mov	r1, r0
 8016e94:	6818      	ldr	r0, [r3, #0]
 8016e96:	f7ff bf8d 	b.w	8016db4 <_puts_r>
 8016e9a:	bf00      	nop
 8016e9c:	20000018 	.word	0x20000018

08016ea0 <rand>:
 8016ea0:	4b17      	ldr	r3, [pc, #92]	; (8016f00 <rand+0x60>)
 8016ea2:	b510      	push	{r4, lr}
 8016ea4:	681c      	ldr	r4, [r3, #0]
 8016ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ea8:	b9b3      	cbnz	r3, 8016ed8 <rand+0x38>
 8016eaa:	2018      	movs	r0, #24
 8016eac:	f000 fb46 	bl	801753c <malloc>
 8016eb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8016eb2:	b928      	cbnz	r0, 8016ec0 <rand+0x20>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	4b13      	ldr	r3, [pc, #76]	; (8016f04 <rand+0x64>)
 8016eb8:	4813      	ldr	r0, [pc, #76]	; (8016f08 <rand+0x68>)
 8016eba:	214e      	movs	r1, #78	; 0x4e
 8016ebc:	f000 f8f0 	bl	80170a0 <__assert_func>
 8016ec0:	4a12      	ldr	r2, [pc, #72]	; (8016f0c <rand+0x6c>)
 8016ec2:	4b13      	ldr	r3, [pc, #76]	; (8016f10 <rand+0x70>)
 8016ec4:	e9c0 2300 	strd	r2, r3, [r0]
 8016ec8:	4b12      	ldr	r3, [pc, #72]	; (8016f14 <rand+0x74>)
 8016eca:	6083      	str	r3, [r0, #8]
 8016ecc:	230b      	movs	r3, #11
 8016ece:	8183      	strh	r3, [r0, #12]
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016ed8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016eda:	480f      	ldr	r0, [pc, #60]	; (8016f18 <rand+0x78>)
 8016edc:	690a      	ldr	r2, [r1, #16]
 8016ede:	694b      	ldr	r3, [r1, #20]
 8016ee0:	4c0e      	ldr	r4, [pc, #56]	; (8016f1c <rand+0x7c>)
 8016ee2:	4350      	muls	r0, r2
 8016ee4:	fb04 0003 	mla	r0, r4, r3, r0
 8016ee8:	fba2 3404 	umull	r3, r4, r2, r4
 8016eec:	1c5a      	adds	r2, r3, #1
 8016eee:	4404      	add	r4, r0
 8016ef0:	f144 0000 	adc.w	r0, r4, #0
 8016ef4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016ef8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016efc:	bd10      	pop	{r4, pc}
 8016efe:	bf00      	nop
 8016f00:	20000018 	.word	0x20000018
 8016f04:	0801af2c 	.word	0x0801af2c
 8016f08:	0801af43 	.word	0x0801af43
 8016f0c:	abcd330e 	.word	0xabcd330e
 8016f10:	e66d1234 	.word	0xe66d1234
 8016f14:	0005deec 	.word	0x0005deec
 8016f18:	5851f42d 	.word	0x5851f42d
 8016f1c:	4c957f2d 	.word	0x4c957f2d

08016f20 <__swbuf_r>:
 8016f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f22:	460e      	mov	r6, r1
 8016f24:	4614      	mov	r4, r2
 8016f26:	4605      	mov	r5, r0
 8016f28:	b118      	cbz	r0, 8016f32 <__swbuf_r+0x12>
 8016f2a:	6983      	ldr	r3, [r0, #24]
 8016f2c:	b90b      	cbnz	r3, 8016f32 <__swbuf_r+0x12>
 8016f2e:	f000 f9ef 	bl	8017310 <__sinit>
 8016f32:	4b21      	ldr	r3, [pc, #132]	; (8016fb8 <__swbuf_r+0x98>)
 8016f34:	429c      	cmp	r4, r3
 8016f36:	d12b      	bne.n	8016f90 <__swbuf_r+0x70>
 8016f38:	686c      	ldr	r4, [r5, #4]
 8016f3a:	69a3      	ldr	r3, [r4, #24]
 8016f3c:	60a3      	str	r3, [r4, #8]
 8016f3e:	89a3      	ldrh	r3, [r4, #12]
 8016f40:	071a      	lsls	r2, r3, #28
 8016f42:	d52f      	bpl.n	8016fa4 <__swbuf_r+0x84>
 8016f44:	6923      	ldr	r3, [r4, #16]
 8016f46:	b36b      	cbz	r3, 8016fa4 <__swbuf_r+0x84>
 8016f48:	6923      	ldr	r3, [r4, #16]
 8016f4a:	6820      	ldr	r0, [r4, #0]
 8016f4c:	1ac0      	subs	r0, r0, r3
 8016f4e:	6963      	ldr	r3, [r4, #20]
 8016f50:	b2f6      	uxtb	r6, r6
 8016f52:	4283      	cmp	r3, r0
 8016f54:	4637      	mov	r7, r6
 8016f56:	dc04      	bgt.n	8016f62 <__swbuf_r+0x42>
 8016f58:	4621      	mov	r1, r4
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f000 f944 	bl	80171e8 <_fflush_r>
 8016f60:	bb30      	cbnz	r0, 8016fb0 <__swbuf_r+0x90>
 8016f62:	68a3      	ldr	r3, [r4, #8]
 8016f64:	3b01      	subs	r3, #1
 8016f66:	60a3      	str	r3, [r4, #8]
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	1c5a      	adds	r2, r3, #1
 8016f6c:	6022      	str	r2, [r4, #0]
 8016f6e:	701e      	strb	r6, [r3, #0]
 8016f70:	6963      	ldr	r3, [r4, #20]
 8016f72:	3001      	adds	r0, #1
 8016f74:	4283      	cmp	r3, r0
 8016f76:	d004      	beq.n	8016f82 <__swbuf_r+0x62>
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	07db      	lsls	r3, r3, #31
 8016f7c:	d506      	bpl.n	8016f8c <__swbuf_r+0x6c>
 8016f7e:	2e0a      	cmp	r6, #10
 8016f80:	d104      	bne.n	8016f8c <__swbuf_r+0x6c>
 8016f82:	4621      	mov	r1, r4
 8016f84:	4628      	mov	r0, r5
 8016f86:	f000 f92f 	bl	80171e8 <_fflush_r>
 8016f8a:	b988      	cbnz	r0, 8016fb0 <__swbuf_r+0x90>
 8016f8c:	4638      	mov	r0, r7
 8016f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f90:	4b0a      	ldr	r3, [pc, #40]	; (8016fbc <__swbuf_r+0x9c>)
 8016f92:	429c      	cmp	r4, r3
 8016f94:	d101      	bne.n	8016f9a <__swbuf_r+0x7a>
 8016f96:	68ac      	ldr	r4, [r5, #8]
 8016f98:	e7cf      	b.n	8016f3a <__swbuf_r+0x1a>
 8016f9a:	4b09      	ldr	r3, [pc, #36]	; (8016fc0 <__swbuf_r+0xa0>)
 8016f9c:	429c      	cmp	r4, r3
 8016f9e:	bf08      	it	eq
 8016fa0:	68ec      	ldreq	r4, [r5, #12]
 8016fa2:	e7ca      	b.n	8016f3a <__swbuf_r+0x1a>
 8016fa4:	4621      	mov	r1, r4
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f000 f80c 	bl	8016fc4 <__swsetup_r>
 8016fac:	2800      	cmp	r0, #0
 8016fae:	d0cb      	beq.n	8016f48 <__swbuf_r+0x28>
 8016fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8016fb4:	e7ea      	b.n	8016f8c <__swbuf_r+0x6c>
 8016fb6:	bf00      	nop
 8016fb8:	0801b000 	.word	0x0801b000
 8016fbc:	0801b020 	.word	0x0801b020
 8016fc0:	0801afe0 	.word	0x0801afe0

08016fc4 <__swsetup_r>:
 8016fc4:	4b32      	ldr	r3, [pc, #200]	; (8017090 <__swsetup_r+0xcc>)
 8016fc6:	b570      	push	{r4, r5, r6, lr}
 8016fc8:	681d      	ldr	r5, [r3, #0]
 8016fca:	4606      	mov	r6, r0
 8016fcc:	460c      	mov	r4, r1
 8016fce:	b125      	cbz	r5, 8016fda <__swsetup_r+0x16>
 8016fd0:	69ab      	ldr	r3, [r5, #24]
 8016fd2:	b913      	cbnz	r3, 8016fda <__swsetup_r+0x16>
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f99b 	bl	8017310 <__sinit>
 8016fda:	4b2e      	ldr	r3, [pc, #184]	; (8017094 <__swsetup_r+0xd0>)
 8016fdc:	429c      	cmp	r4, r3
 8016fde:	d10f      	bne.n	8017000 <__swsetup_r+0x3c>
 8016fe0:	686c      	ldr	r4, [r5, #4]
 8016fe2:	89a3      	ldrh	r3, [r4, #12]
 8016fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016fe8:	0719      	lsls	r1, r3, #28
 8016fea:	d42c      	bmi.n	8017046 <__swsetup_r+0x82>
 8016fec:	06dd      	lsls	r5, r3, #27
 8016fee:	d411      	bmi.n	8017014 <__swsetup_r+0x50>
 8016ff0:	2309      	movs	r3, #9
 8016ff2:	6033      	str	r3, [r6, #0]
 8016ff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016ff8:	81a3      	strh	r3, [r4, #12]
 8016ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8016ffe:	e03e      	b.n	801707e <__swsetup_r+0xba>
 8017000:	4b25      	ldr	r3, [pc, #148]	; (8017098 <__swsetup_r+0xd4>)
 8017002:	429c      	cmp	r4, r3
 8017004:	d101      	bne.n	801700a <__swsetup_r+0x46>
 8017006:	68ac      	ldr	r4, [r5, #8]
 8017008:	e7eb      	b.n	8016fe2 <__swsetup_r+0x1e>
 801700a:	4b24      	ldr	r3, [pc, #144]	; (801709c <__swsetup_r+0xd8>)
 801700c:	429c      	cmp	r4, r3
 801700e:	bf08      	it	eq
 8017010:	68ec      	ldreq	r4, [r5, #12]
 8017012:	e7e6      	b.n	8016fe2 <__swsetup_r+0x1e>
 8017014:	0758      	lsls	r0, r3, #29
 8017016:	d512      	bpl.n	801703e <__swsetup_r+0x7a>
 8017018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801701a:	b141      	cbz	r1, 801702e <__swsetup_r+0x6a>
 801701c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017020:	4299      	cmp	r1, r3
 8017022:	d002      	beq.n	801702a <__swsetup_r+0x66>
 8017024:	4630      	mov	r0, r6
 8017026:	f000 fa91 	bl	801754c <_free_r>
 801702a:	2300      	movs	r3, #0
 801702c:	6363      	str	r3, [r4, #52]	; 0x34
 801702e:	89a3      	ldrh	r3, [r4, #12]
 8017030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017034:	81a3      	strh	r3, [r4, #12]
 8017036:	2300      	movs	r3, #0
 8017038:	6063      	str	r3, [r4, #4]
 801703a:	6923      	ldr	r3, [r4, #16]
 801703c:	6023      	str	r3, [r4, #0]
 801703e:	89a3      	ldrh	r3, [r4, #12]
 8017040:	f043 0308 	orr.w	r3, r3, #8
 8017044:	81a3      	strh	r3, [r4, #12]
 8017046:	6923      	ldr	r3, [r4, #16]
 8017048:	b94b      	cbnz	r3, 801705e <__swsetup_r+0x9a>
 801704a:	89a3      	ldrh	r3, [r4, #12]
 801704c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017054:	d003      	beq.n	801705e <__swsetup_r+0x9a>
 8017056:	4621      	mov	r1, r4
 8017058:	4630      	mov	r0, r6
 801705a:	f000 fa2f 	bl	80174bc <__smakebuf_r>
 801705e:	89a0      	ldrh	r0, [r4, #12]
 8017060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017064:	f010 0301 	ands.w	r3, r0, #1
 8017068:	d00a      	beq.n	8017080 <__swsetup_r+0xbc>
 801706a:	2300      	movs	r3, #0
 801706c:	60a3      	str	r3, [r4, #8]
 801706e:	6963      	ldr	r3, [r4, #20]
 8017070:	425b      	negs	r3, r3
 8017072:	61a3      	str	r3, [r4, #24]
 8017074:	6923      	ldr	r3, [r4, #16]
 8017076:	b943      	cbnz	r3, 801708a <__swsetup_r+0xc6>
 8017078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801707c:	d1ba      	bne.n	8016ff4 <__swsetup_r+0x30>
 801707e:	bd70      	pop	{r4, r5, r6, pc}
 8017080:	0781      	lsls	r1, r0, #30
 8017082:	bf58      	it	pl
 8017084:	6963      	ldrpl	r3, [r4, #20]
 8017086:	60a3      	str	r3, [r4, #8]
 8017088:	e7f4      	b.n	8017074 <__swsetup_r+0xb0>
 801708a:	2000      	movs	r0, #0
 801708c:	e7f7      	b.n	801707e <__swsetup_r+0xba>
 801708e:	bf00      	nop
 8017090:	20000018 	.word	0x20000018
 8017094:	0801b000 	.word	0x0801b000
 8017098:	0801b020 	.word	0x0801b020
 801709c:	0801afe0 	.word	0x0801afe0

080170a0 <__assert_func>:
 80170a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170a2:	4614      	mov	r4, r2
 80170a4:	461a      	mov	r2, r3
 80170a6:	4b09      	ldr	r3, [pc, #36]	; (80170cc <__assert_func+0x2c>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	4605      	mov	r5, r0
 80170ac:	68d8      	ldr	r0, [r3, #12]
 80170ae:	b14c      	cbz	r4, 80170c4 <__assert_func+0x24>
 80170b0:	4b07      	ldr	r3, [pc, #28]	; (80170d0 <__assert_func+0x30>)
 80170b2:	9100      	str	r1, [sp, #0]
 80170b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80170b8:	4906      	ldr	r1, [pc, #24]	; (80170d4 <__assert_func+0x34>)
 80170ba:	462b      	mov	r3, r5
 80170bc:	f000 f9a6 	bl	801740c <fiprintf>
 80170c0:	f000 fe42 	bl	8017d48 <abort>
 80170c4:	4b04      	ldr	r3, [pc, #16]	; (80170d8 <__assert_func+0x38>)
 80170c6:	461c      	mov	r4, r3
 80170c8:	e7f3      	b.n	80170b2 <__assert_func+0x12>
 80170ca:	bf00      	nop
 80170cc:	20000018 	.word	0x20000018
 80170d0:	0801afa2 	.word	0x0801afa2
 80170d4:	0801afaf 	.word	0x0801afaf
 80170d8:	0801afdd 	.word	0x0801afdd

080170dc <__sflush_r>:
 80170dc:	898a      	ldrh	r2, [r1, #12]
 80170de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170e2:	4605      	mov	r5, r0
 80170e4:	0710      	lsls	r0, r2, #28
 80170e6:	460c      	mov	r4, r1
 80170e8:	d458      	bmi.n	801719c <__sflush_r+0xc0>
 80170ea:	684b      	ldr	r3, [r1, #4]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	dc05      	bgt.n	80170fc <__sflush_r+0x20>
 80170f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	dc02      	bgt.n	80170fc <__sflush_r+0x20>
 80170f6:	2000      	movs	r0, #0
 80170f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170fe:	2e00      	cmp	r6, #0
 8017100:	d0f9      	beq.n	80170f6 <__sflush_r+0x1a>
 8017102:	2300      	movs	r3, #0
 8017104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017108:	682f      	ldr	r7, [r5, #0]
 801710a:	602b      	str	r3, [r5, #0]
 801710c:	d032      	beq.n	8017174 <__sflush_r+0x98>
 801710e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017110:	89a3      	ldrh	r3, [r4, #12]
 8017112:	075a      	lsls	r2, r3, #29
 8017114:	d505      	bpl.n	8017122 <__sflush_r+0x46>
 8017116:	6863      	ldr	r3, [r4, #4]
 8017118:	1ac0      	subs	r0, r0, r3
 801711a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801711c:	b10b      	cbz	r3, 8017122 <__sflush_r+0x46>
 801711e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017120:	1ac0      	subs	r0, r0, r3
 8017122:	2300      	movs	r3, #0
 8017124:	4602      	mov	r2, r0
 8017126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017128:	6a21      	ldr	r1, [r4, #32]
 801712a:	4628      	mov	r0, r5
 801712c:	47b0      	blx	r6
 801712e:	1c43      	adds	r3, r0, #1
 8017130:	89a3      	ldrh	r3, [r4, #12]
 8017132:	d106      	bne.n	8017142 <__sflush_r+0x66>
 8017134:	6829      	ldr	r1, [r5, #0]
 8017136:	291d      	cmp	r1, #29
 8017138:	d82c      	bhi.n	8017194 <__sflush_r+0xb8>
 801713a:	4a2a      	ldr	r2, [pc, #168]	; (80171e4 <__sflush_r+0x108>)
 801713c:	40ca      	lsrs	r2, r1
 801713e:	07d6      	lsls	r6, r2, #31
 8017140:	d528      	bpl.n	8017194 <__sflush_r+0xb8>
 8017142:	2200      	movs	r2, #0
 8017144:	6062      	str	r2, [r4, #4]
 8017146:	04d9      	lsls	r1, r3, #19
 8017148:	6922      	ldr	r2, [r4, #16]
 801714a:	6022      	str	r2, [r4, #0]
 801714c:	d504      	bpl.n	8017158 <__sflush_r+0x7c>
 801714e:	1c42      	adds	r2, r0, #1
 8017150:	d101      	bne.n	8017156 <__sflush_r+0x7a>
 8017152:	682b      	ldr	r3, [r5, #0]
 8017154:	b903      	cbnz	r3, 8017158 <__sflush_r+0x7c>
 8017156:	6560      	str	r0, [r4, #84]	; 0x54
 8017158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801715a:	602f      	str	r7, [r5, #0]
 801715c:	2900      	cmp	r1, #0
 801715e:	d0ca      	beq.n	80170f6 <__sflush_r+0x1a>
 8017160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017164:	4299      	cmp	r1, r3
 8017166:	d002      	beq.n	801716e <__sflush_r+0x92>
 8017168:	4628      	mov	r0, r5
 801716a:	f000 f9ef 	bl	801754c <_free_r>
 801716e:	2000      	movs	r0, #0
 8017170:	6360      	str	r0, [r4, #52]	; 0x34
 8017172:	e7c1      	b.n	80170f8 <__sflush_r+0x1c>
 8017174:	6a21      	ldr	r1, [r4, #32]
 8017176:	2301      	movs	r3, #1
 8017178:	4628      	mov	r0, r5
 801717a:	47b0      	blx	r6
 801717c:	1c41      	adds	r1, r0, #1
 801717e:	d1c7      	bne.n	8017110 <__sflush_r+0x34>
 8017180:	682b      	ldr	r3, [r5, #0]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d0c4      	beq.n	8017110 <__sflush_r+0x34>
 8017186:	2b1d      	cmp	r3, #29
 8017188:	d001      	beq.n	801718e <__sflush_r+0xb2>
 801718a:	2b16      	cmp	r3, #22
 801718c:	d101      	bne.n	8017192 <__sflush_r+0xb6>
 801718e:	602f      	str	r7, [r5, #0]
 8017190:	e7b1      	b.n	80170f6 <__sflush_r+0x1a>
 8017192:	89a3      	ldrh	r3, [r4, #12]
 8017194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017198:	81a3      	strh	r3, [r4, #12]
 801719a:	e7ad      	b.n	80170f8 <__sflush_r+0x1c>
 801719c:	690f      	ldr	r7, [r1, #16]
 801719e:	2f00      	cmp	r7, #0
 80171a0:	d0a9      	beq.n	80170f6 <__sflush_r+0x1a>
 80171a2:	0793      	lsls	r3, r2, #30
 80171a4:	680e      	ldr	r6, [r1, #0]
 80171a6:	bf08      	it	eq
 80171a8:	694b      	ldreq	r3, [r1, #20]
 80171aa:	600f      	str	r7, [r1, #0]
 80171ac:	bf18      	it	ne
 80171ae:	2300      	movne	r3, #0
 80171b0:	eba6 0807 	sub.w	r8, r6, r7
 80171b4:	608b      	str	r3, [r1, #8]
 80171b6:	f1b8 0f00 	cmp.w	r8, #0
 80171ba:	dd9c      	ble.n	80170f6 <__sflush_r+0x1a>
 80171bc:	6a21      	ldr	r1, [r4, #32]
 80171be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80171c0:	4643      	mov	r3, r8
 80171c2:	463a      	mov	r2, r7
 80171c4:	4628      	mov	r0, r5
 80171c6:	47b0      	blx	r6
 80171c8:	2800      	cmp	r0, #0
 80171ca:	dc06      	bgt.n	80171da <__sflush_r+0xfe>
 80171cc:	89a3      	ldrh	r3, [r4, #12]
 80171ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171d2:	81a3      	strh	r3, [r4, #12]
 80171d4:	f04f 30ff 	mov.w	r0, #4294967295
 80171d8:	e78e      	b.n	80170f8 <__sflush_r+0x1c>
 80171da:	4407      	add	r7, r0
 80171dc:	eba8 0800 	sub.w	r8, r8, r0
 80171e0:	e7e9      	b.n	80171b6 <__sflush_r+0xda>
 80171e2:	bf00      	nop
 80171e4:	20400001 	.word	0x20400001

080171e8 <_fflush_r>:
 80171e8:	b538      	push	{r3, r4, r5, lr}
 80171ea:	690b      	ldr	r3, [r1, #16]
 80171ec:	4605      	mov	r5, r0
 80171ee:	460c      	mov	r4, r1
 80171f0:	b913      	cbnz	r3, 80171f8 <_fflush_r+0x10>
 80171f2:	2500      	movs	r5, #0
 80171f4:	4628      	mov	r0, r5
 80171f6:	bd38      	pop	{r3, r4, r5, pc}
 80171f8:	b118      	cbz	r0, 8017202 <_fflush_r+0x1a>
 80171fa:	6983      	ldr	r3, [r0, #24]
 80171fc:	b90b      	cbnz	r3, 8017202 <_fflush_r+0x1a>
 80171fe:	f000 f887 	bl	8017310 <__sinit>
 8017202:	4b14      	ldr	r3, [pc, #80]	; (8017254 <_fflush_r+0x6c>)
 8017204:	429c      	cmp	r4, r3
 8017206:	d11b      	bne.n	8017240 <_fflush_r+0x58>
 8017208:	686c      	ldr	r4, [r5, #4]
 801720a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d0ef      	beq.n	80171f2 <_fflush_r+0xa>
 8017212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017214:	07d0      	lsls	r0, r2, #31
 8017216:	d404      	bmi.n	8017222 <_fflush_r+0x3a>
 8017218:	0599      	lsls	r1, r3, #22
 801721a:	d402      	bmi.n	8017222 <_fflush_r+0x3a>
 801721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801721e:	f000 f927 	bl	8017470 <__retarget_lock_acquire_recursive>
 8017222:	4628      	mov	r0, r5
 8017224:	4621      	mov	r1, r4
 8017226:	f7ff ff59 	bl	80170dc <__sflush_r>
 801722a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801722c:	07da      	lsls	r2, r3, #31
 801722e:	4605      	mov	r5, r0
 8017230:	d4e0      	bmi.n	80171f4 <_fflush_r+0xc>
 8017232:	89a3      	ldrh	r3, [r4, #12]
 8017234:	059b      	lsls	r3, r3, #22
 8017236:	d4dd      	bmi.n	80171f4 <_fflush_r+0xc>
 8017238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801723a:	f000 f91a 	bl	8017472 <__retarget_lock_release_recursive>
 801723e:	e7d9      	b.n	80171f4 <_fflush_r+0xc>
 8017240:	4b05      	ldr	r3, [pc, #20]	; (8017258 <_fflush_r+0x70>)
 8017242:	429c      	cmp	r4, r3
 8017244:	d101      	bne.n	801724a <_fflush_r+0x62>
 8017246:	68ac      	ldr	r4, [r5, #8]
 8017248:	e7df      	b.n	801720a <_fflush_r+0x22>
 801724a:	4b04      	ldr	r3, [pc, #16]	; (801725c <_fflush_r+0x74>)
 801724c:	429c      	cmp	r4, r3
 801724e:	bf08      	it	eq
 8017250:	68ec      	ldreq	r4, [r5, #12]
 8017252:	e7da      	b.n	801720a <_fflush_r+0x22>
 8017254:	0801b000 	.word	0x0801b000
 8017258:	0801b020 	.word	0x0801b020
 801725c:	0801afe0 	.word	0x0801afe0

08017260 <std>:
 8017260:	2300      	movs	r3, #0
 8017262:	b510      	push	{r4, lr}
 8017264:	4604      	mov	r4, r0
 8017266:	e9c0 3300 	strd	r3, r3, [r0]
 801726a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801726e:	6083      	str	r3, [r0, #8]
 8017270:	8181      	strh	r1, [r0, #12]
 8017272:	6643      	str	r3, [r0, #100]	; 0x64
 8017274:	81c2      	strh	r2, [r0, #14]
 8017276:	6183      	str	r3, [r0, #24]
 8017278:	4619      	mov	r1, r3
 801727a:	2208      	movs	r2, #8
 801727c:	305c      	adds	r0, #92	; 0x5c
 801727e:	f7ff fd79 	bl	8016d74 <memset>
 8017282:	4b05      	ldr	r3, [pc, #20]	; (8017298 <std+0x38>)
 8017284:	6263      	str	r3, [r4, #36]	; 0x24
 8017286:	4b05      	ldr	r3, [pc, #20]	; (801729c <std+0x3c>)
 8017288:	62a3      	str	r3, [r4, #40]	; 0x28
 801728a:	4b05      	ldr	r3, [pc, #20]	; (80172a0 <std+0x40>)
 801728c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801728e:	4b05      	ldr	r3, [pc, #20]	; (80172a4 <std+0x44>)
 8017290:	6224      	str	r4, [r4, #32]
 8017292:	6323      	str	r3, [r4, #48]	; 0x30
 8017294:	bd10      	pop	{r4, pc}
 8017296:	bf00      	nop
 8017298:	08017c9d 	.word	0x08017c9d
 801729c:	08017cbf 	.word	0x08017cbf
 80172a0:	08017cf7 	.word	0x08017cf7
 80172a4:	08017d1b 	.word	0x08017d1b

080172a8 <_cleanup_r>:
 80172a8:	4901      	ldr	r1, [pc, #4]	; (80172b0 <_cleanup_r+0x8>)
 80172aa:	f000 b8c1 	b.w	8017430 <_fwalk_reent>
 80172ae:	bf00      	nop
 80172b0:	080171e9 	.word	0x080171e9

080172b4 <__sfmoreglue>:
 80172b4:	b570      	push	{r4, r5, r6, lr}
 80172b6:	1e4a      	subs	r2, r1, #1
 80172b8:	2568      	movs	r5, #104	; 0x68
 80172ba:	4355      	muls	r5, r2
 80172bc:	460e      	mov	r6, r1
 80172be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80172c2:	f000 f993 	bl	80175ec <_malloc_r>
 80172c6:	4604      	mov	r4, r0
 80172c8:	b140      	cbz	r0, 80172dc <__sfmoreglue+0x28>
 80172ca:	2100      	movs	r1, #0
 80172cc:	e9c0 1600 	strd	r1, r6, [r0]
 80172d0:	300c      	adds	r0, #12
 80172d2:	60a0      	str	r0, [r4, #8]
 80172d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80172d8:	f7ff fd4c 	bl	8016d74 <memset>
 80172dc:	4620      	mov	r0, r4
 80172de:	bd70      	pop	{r4, r5, r6, pc}

080172e0 <__sfp_lock_acquire>:
 80172e0:	4801      	ldr	r0, [pc, #4]	; (80172e8 <__sfp_lock_acquire+0x8>)
 80172e2:	f000 b8c5 	b.w	8017470 <__retarget_lock_acquire_recursive>
 80172e6:	bf00      	nop
 80172e8:	200069b0 	.word	0x200069b0

080172ec <__sfp_lock_release>:
 80172ec:	4801      	ldr	r0, [pc, #4]	; (80172f4 <__sfp_lock_release+0x8>)
 80172ee:	f000 b8c0 	b.w	8017472 <__retarget_lock_release_recursive>
 80172f2:	bf00      	nop
 80172f4:	200069b0 	.word	0x200069b0

080172f8 <__sinit_lock_acquire>:
 80172f8:	4801      	ldr	r0, [pc, #4]	; (8017300 <__sinit_lock_acquire+0x8>)
 80172fa:	f000 b8b9 	b.w	8017470 <__retarget_lock_acquire_recursive>
 80172fe:	bf00      	nop
 8017300:	200069ab 	.word	0x200069ab

08017304 <__sinit_lock_release>:
 8017304:	4801      	ldr	r0, [pc, #4]	; (801730c <__sinit_lock_release+0x8>)
 8017306:	f000 b8b4 	b.w	8017472 <__retarget_lock_release_recursive>
 801730a:	bf00      	nop
 801730c:	200069ab 	.word	0x200069ab

08017310 <__sinit>:
 8017310:	b510      	push	{r4, lr}
 8017312:	4604      	mov	r4, r0
 8017314:	f7ff fff0 	bl	80172f8 <__sinit_lock_acquire>
 8017318:	69a3      	ldr	r3, [r4, #24]
 801731a:	b11b      	cbz	r3, 8017324 <__sinit+0x14>
 801731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017320:	f7ff bff0 	b.w	8017304 <__sinit_lock_release>
 8017324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017328:	6523      	str	r3, [r4, #80]	; 0x50
 801732a:	4b13      	ldr	r3, [pc, #76]	; (8017378 <__sinit+0x68>)
 801732c:	4a13      	ldr	r2, [pc, #76]	; (801737c <__sinit+0x6c>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	62a2      	str	r2, [r4, #40]	; 0x28
 8017332:	42a3      	cmp	r3, r4
 8017334:	bf04      	itt	eq
 8017336:	2301      	moveq	r3, #1
 8017338:	61a3      	streq	r3, [r4, #24]
 801733a:	4620      	mov	r0, r4
 801733c:	f000 f820 	bl	8017380 <__sfp>
 8017340:	6060      	str	r0, [r4, #4]
 8017342:	4620      	mov	r0, r4
 8017344:	f000 f81c 	bl	8017380 <__sfp>
 8017348:	60a0      	str	r0, [r4, #8]
 801734a:	4620      	mov	r0, r4
 801734c:	f000 f818 	bl	8017380 <__sfp>
 8017350:	2200      	movs	r2, #0
 8017352:	60e0      	str	r0, [r4, #12]
 8017354:	2104      	movs	r1, #4
 8017356:	6860      	ldr	r0, [r4, #4]
 8017358:	f7ff ff82 	bl	8017260 <std>
 801735c:	68a0      	ldr	r0, [r4, #8]
 801735e:	2201      	movs	r2, #1
 8017360:	2109      	movs	r1, #9
 8017362:	f7ff ff7d 	bl	8017260 <std>
 8017366:	68e0      	ldr	r0, [r4, #12]
 8017368:	2202      	movs	r2, #2
 801736a:	2112      	movs	r1, #18
 801736c:	f7ff ff78 	bl	8017260 <std>
 8017370:	2301      	movs	r3, #1
 8017372:	61a3      	str	r3, [r4, #24]
 8017374:	e7d2      	b.n	801731c <__sinit+0xc>
 8017376:	bf00      	nop
 8017378:	0801af28 	.word	0x0801af28
 801737c:	080172a9 	.word	0x080172a9

08017380 <__sfp>:
 8017380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017382:	4607      	mov	r7, r0
 8017384:	f7ff ffac 	bl	80172e0 <__sfp_lock_acquire>
 8017388:	4b1e      	ldr	r3, [pc, #120]	; (8017404 <__sfp+0x84>)
 801738a:	681e      	ldr	r6, [r3, #0]
 801738c:	69b3      	ldr	r3, [r6, #24]
 801738e:	b913      	cbnz	r3, 8017396 <__sfp+0x16>
 8017390:	4630      	mov	r0, r6
 8017392:	f7ff ffbd 	bl	8017310 <__sinit>
 8017396:	3648      	adds	r6, #72	; 0x48
 8017398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801739c:	3b01      	subs	r3, #1
 801739e:	d503      	bpl.n	80173a8 <__sfp+0x28>
 80173a0:	6833      	ldr	r3, [r6, #0]
 80173a2:	b30b      	cbz	r3, 80173e8 <__sfp+0x68>
 80173a4:	6836      	ldr	r6, [r6, #0]
 80173a6:	e7f7      	b.n	8017398 <__sfp+0x18>
 80173a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80173ac:	b9d5      	cbnz	r5, 80173e4 <__sfp+0x64>
 80173ae:	4b16      	ldr	r3, [pc, #88]	; (8017408 <__sfp+0x88>)
 80173b0:	60e3      	str	r3, [r4, #12]
 80173b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80173b6:	6665      	str	r5, [r4, #100]	; 0x64
 80173b8:	f000 f859 	bl	801746e <__retarget_lock_init_recursive>
 80173bc:	f7ff ff96 	bl	80172ec <__sfp_lock_release>
 80173c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80173c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80173c8:	6025      	str	r5, [r4, #0]
 80173ca:	61a5      	str	r5, [r4, #24]
 80173cc:	2208      	movs	r2, #8
 80173ce:	4629      	mov	r1, r5
 80173d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80173d4:	f7ff fcce 	bl	8016d74 <memset>
 80173d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80173dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80173e0:	4620      	mov	r0, r4
 80173e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173e4:	3468      	adds	r4, #104	; 0x68
 80173e6:	e7d9      	b.n	801739c <__sfp+0x1c>
 80173e8:	2104      	movs	r1, #4
 80173ea:	4638      	mov	r0, r7
 80173ec:	f7ff ff62 	bl	80172b4 <__sfmoreglue>
 80173f0:	4604      	mov	r4, r0
 80173f2:	6030      	str	r0, [r6, #0]
 80173f4:	2800      	cmp	r0, #0
 80173f6:	d1d5      	bne.n	80173a4 <__sfp+0x24>
 80173f8:	f7ff ff78 	bl	80172ec <__sfp_lock_release>
 80173fc:	230c      	movs	r3, #12
 80173fe:	603b      	str	r3, [r7, #0]
 8017400:	e7ee      	b.n	80173e0 <__sfp+0x60>
 8017402:	bf00      	nop
 8017404:	0801af28 	.word	0x0801af28
 8017408:	ffff0001 	.word	0xffff0001

0801740c <fiprintf>:
 801740c:	b40e      	push	{r1, r2, r3}
 801740e:	b503      	push	{r0, r1, lr}
 8017410:	4601      	mov	r1, r0
 8017412:	ab03      	add	r3, sp, #12
 8017414:	4805      	ldr	r0, [pc, #20]	; (801742c <fiprintf+0x20>)
 8017416:	f853 2b04 	ldr.w	r2, [r3], #4
 801741a:	6800      	ldr	r0, [r0, #0]
 801741c:	9301      	str	r3, [sp, #4]
 801741e:	f000 f969 	bl	80176f4 <_vfiprintf_r>
 8017422:	b002      	add	sp, #8
 8017424:	f85d eb04 	ldr.w	lr, [sp], #4
 8017428:	b003      	add	sp, #12
 801742a:	4770      	bx	lr
 801742c:	20000018 	.word	0x20000018

08017430 <_fwalk_reent>:
 8017430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017434:	4606      	mov	r6, r0
 8017436:	4688      	mov	r8, r1
 8017438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801743c:	2700      	movs	r7, #0
 801743e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017442:	f1b9 0901 	subs.w	r9, r9, #1
 8017446:	d505      	bpl.n	8017454 <_fwalk_reent+0x24>
 8017448:	6824      	ldr	r4, [r4, #0]
 801744a:	2c00      	cmp	r4, #0
 801744c:	d1f7      	bne.n	801743e <_fwalk_reent+0xe>
 801744e:	4638      	mov	r0, r7
 8017450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017454:	89ab      	ldrh	r3, [r5, #12]
 8017456:	2b01      	cmp	r3, #1
 8017458:	d907      	bls.n	801746a <_fwalk_reent+0x3a>
 801745a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801745e:	3301      	adds	r3, #1
 8017460:	d003      	beq.n	801746a <_fwalk_reent+0x3a>
 8017462:	4629      	mov	r1, r5
 8017464:	4630      	mov	r0, r6
 8017466:	47c0      	blx	r8
 8017468:	4307      	orrs	r7, r0
 801746a:	3568      	adds	r5, #104	; 0x68
 801746c:	e7e9      	b.n	8017442 <_fwalk_reent+0x12>

0801746e <__retarget_lock_init_recursive>:
 801746e:	4770      	bx	lr

08017470 <__retarget_lock_acquire_recursive>:
 8017470:	4770      	bx	lr

08017472 <__retarget_lock_release_recursive>:
 8017472:	4770      	bx	lr

08017474 <__swhatbuf_r>:
 8017474:	b570      	push	{r4, r5, r6, lr}
 8017476:	460e      	mov	r6, r1
 8017478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801747c:	2900      	cmp	r1, #0
 801747e:	b096      	sub	sp, #88	; 0x58
 8017480:	4614      	mov	r4, r2
 8017482:	461d      	mov	r5, r3
 8017484:	da07      	bge.n	8017496 <__swhatbuf_r+0x22>
 8017486:	2300      	movs	r3, #0
 8017488:	602b      	str	r3, [r5, #0]
 801748a:	89b3      	ldrh	r3, [r6, #12]
 801748c:	061a      	lsls	r2, r3, #24
 801748e:	d410      	bmi.n	80174b2 <__swhatbuf_r+0x3e>
 8017490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017494:	e00e      	b.n	80174b4 <__swhatbuf_r+0x40>
 8017496:	466a      	mov	r2, sp
 8017498:	f000 fc6e 	bl	8017d78 <_fstat_r>
 801749c:	2800      	cmp	r0, #0
 801749e:	dbf2      	blt.n	8017486 <__swhatbuf_r+0x12>
 80174a0:	9a01      	ldr	r2, [sp, #4]
 80174a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80174a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80174aa:	425a      	negs	r2, r3
 80174ac:	415a      	adcs	r2, r3
 80174ae:	602a      	str	r2, [r5, #0]
 80174b0:	e7ee      	b.n	8017490 <__swhatbuf_r+0x1c>
 80174b2:	2340      	movs	r3, #64	; 0x40
 80174b4:	2000      	movs	r0, #0
 80174b6:	6023      	str	r3, [r4, #0]
 80174b8:	b016      	add	sp, #88	; 0x58
 80174ba:	bd70      	pop	{r4, r5, r6, pc}

080174bc <__smakebuf_r>:
 80174bc:	898b      	ldrh	r3, [r1, #12]
 80174be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174c0:	079d      	lsls	r5, r3, #30
 80174c2:	4606      	mov	r6, r0
 80174c4:	460c      	mov	r4, r1
 80174c6:	d507      	bpl.n	80174d8 <__smakebuf_r+0x1c>
 80174c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80174cc:	6023      	str	r3, [r4, #0]
 80174ce:	6123      	str	r3, [r4, #16]
 80174d0:	2301      	movs	r3, #1
 80174d2:	6163      	str	r3, [r4, #20]
 80174d4:	b002      	add	sp, #8
 80174d6:	bd70      	pop	{r4, r5, r6, pc}
 80174d8:	ab01      	add	r3, sp, #4
 80174da:	466a      	mov	r2, sp
 80174dc:	f7ff ffca 	bl	8017474 <__swhatbuf_r>
 80174e0:	9900      	ldr	r1, [sp, #0]
 80174e2:	4605      	mov	r5, r0
 80174e4:	4630      	mov	r0, r6
 80174e6:	f000 f881 	bl	80175ec <_malloc_r>
 80174ea:	b948      	cbnz	r0, 8017500 <__smakebuf_r+0x44>
 80174ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174f0:	059a      	lsls	r2, r3, #22
 80174f2:	d4ef      	bmi.n	80174d4 <__smakebuf_r+0x18>
 80174f4:	f023 0303 	bic.w	r3, r3, #3
 80174f8:	f043 0302 	orr.w	r3, r3, #2
 80174fc:	81a3      	strh	r3, [r4, #12]
 80174fe:	e7e3      	b.n	80174c8 <__smakebuf_r+0xc>
 8017500:	4b0d      	ldr	r3, [pc, #52]	; (8017538 <__smakebuf_r+0x7c>)
 8017502:	62b3      	str	r3, [r6, #40]	; 0x28
 8017504:	89a3      	ldrh	r3, [r4, #12]
 8017506:	6020      	str	r0, [r4, #0]
 8017508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801750c:	81a3      	strh	r3, [r4, #12]
 801750e:	9b00      	ldr	r3, [sp, #0]
 8017510:	6163      	str	r3, [r4, #20]
 8017512:	9b01      	ldr	r3, [sp, #4]
 8017514:	6120      	str	r0, [r4, #16]
 8017516:	b15b      	cbz	r3, 8017530 <__smakebuf_r+0x74>
 8017518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801751c:	4630      	mov	r0, r6
 801751e:	f000 fc3d 	bl	8017d9c <_isatty_r>
 8017522:	b128      	cbz	r0, 8017530 <__smakebuf_r+0x74>
 8017524:	89a3      	ldrh	r3, [r4, #12]
 8017526:	f023 0303 	bic.w	r3, r3, #3
 801752a:	f043 0301 	orr.w	r3, r3, #1
 801752e:	81a3      	strh	r3, [r4, #12]
 8017530:	89a0      	ldrh	r0, [r4, #12]
 8017532:	4305      	orrs	r5, r0
 8017534:	81a5      	strh	r5, [r4, #12]
 8017536:	e7cd      	b.n	80174d4 <__smakebuf_r+0x18>
 8017538:	080172a9 	.word	0x080172a9

0801753c <malloc>:
 801753c:	4b02      	ldr	r3, [pc, #8]	; (8017548 <malloc+0xc>)
 801753e:	4601      	mov	r1, r0
 8017540:	6818      	ldr	r0, [r3, #0]
 8017542:	f000 b853 	b.w	80175ec <_malloc_r>
 8017546:	bf00      	nop
 8017548:	20000018 	.word	0x20000018

0801754c <_free_r>:
 801754c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801754e:	2900      	cmp	r1, #0
 8017550:	d048      	beq.n	80175e4 <_free_r+0x98>
 8017552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017556:	9001      	str	r0, [sp, #4]
 8017558:	2b00      	cmp	r3, #0
 801755a:	f1a1 0404 	sub.w	r4, r1, #4
 801755e:	bfb8      	it	lt
 8017560:	18e4      	addlt	r4, r4, r3
 8017562:	f000 fc3d 	bl	8017de0 <__malloc_lock>
 8017566:	4a20      	ldr	r2, [pc, #128]	; (80175e8 <_free_r+0x9c>)
 8017568:	9801      	ldr	r0, [sp, #4]
 801756a:	6813      	ldr	r3, [r2, #0]
 801756c:	4615      	mov	r5, r2
 801756e:	b933      	cbnz	r3, 801757e <_free_r+0x32>
 8017570:	6063      	str	r3, [r4, #4]
 8017572:	6014      	str	r4, [r2, #0]
 8017574:	b003      	add	sp, #12
 8017576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801757a:	f000 bc37 	b.w	8017dec <__malloc_unlock>
 801757e:	42a3      	cmp	r3, r4
 8017580:	d90b      	bls.n	801759a <_free_r+0x4e>
 8017582:	6821      	ldr	r1, [r4, #0]
 8017584:	1862      	adds	r2, r4, r1
 8017586:	4293      	cmp	r3, r2
 8017588:	bf04      	itt	eq
 801758a:	681a      	ldreq	r2, [r3, #0]
 801758c:	685b      	ldreq	r3, [r3, #4]
 801758e:	6063      	str	r3, [r4, #4]
 8017590:	bf04      	itt	eq
 8017592:	1852      	addeq	r2, r2, r1
 8017594:	6022      	streq	r2, [r4, #0]
 8017596:	602c      	str	r4, [r5, #0]
 8017598:	e7ec      	b.n	8017574 <_free_r+0x28>
 801759a:	461a      	mov	r2, r3
 801759c:	685b      	ldr	r3, [r3, #4]
 801759e:	b10b      	cbz	r3, 80175a4 <_free_r+0x58>
 80175a0:	42a3      	cmp	r3, r4
 80175a2:	d9fa      	bls.n	801759a <_free_r+0x4e>
 80175a4:	6811      	ldr	r1, [r2, #0]
 80175a6:	1855      	adds	r5, r2, r1
 80175a8:	42a5      	cmp	r5, r4
 80175aa:	d10b      	bne.n	80175c4 <_free_r+0x78>
 80175ac:	6824      	ldr	r4, [r4, #0]
 80175ae:	4421      	add	r1, r4
 80175b0:	1854      	adds	r4, r2, r1
 80175b2:	42a3      	cmp	r3, r4
 80175b4:	6011      	str	r1, [r2, #0]
 80175b6:	d1dd      	bne.n	8017574 <_free_r+0x28>
 80175b8:	681c      	ldr	r4, [r3, #0]
 80175ba:	685b      	ldr	r3, [r3, #4]
 80175bc:	6053      	str	r3, [r2, #4]
 80175be:	4421      	add	r1, r4
 80175c0:	6011      	str	r1, [r2, #0]
 80175c2:	e7d7      	b.n	8017574 <_free_r+0x28>
 80175c4:	d902      	bls.n	80175cc <_free_r+0x80>
 80175c6:	230c      	movs	r3, #12
 80175c8:	6003      	str	r3, [r0, #0]
 80175ca:	e7d3      	b.n	8017574 <_free_r+0x28>
 80175cc:	6825      	ldr	r5, [r4, #0]
 80175ce:	1961      	adds	r1, r4, r5
 80175d0:	428b      	cmp	r3, r1
 80175d2:	bf04      	itt	eq
 80175d4:	6819      	ldreq	r1, [r3, #0]
 80175d6:	685b      	ldreq	r3, [r3, #4]
 80175d8:	6063      	str	r3, [r4, #4]
 80175da:	bf04      	itt	eq
 80175dc:	1949      	addeq	r1, r1, r5
 80175de:	6021      	streq	r1, [r4, #0]
 80175e0:	6054      	str	r4, [r2, #4]
 80175e2:	e7c7      	b.n	8017574 <_free_r+0x28>
 80175e4:	b003      	add	sp, #12
 80175e6:	bd30      	pop	{r4, r5, pc}
 80175e8:	2000021c 	.word	0x2000021c

080175ec <_malloc_r>:
 80175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ee:	1ccd      	adds	r5, r1, #3
 80175f0:	f025 0503 	bic.w	r5, r5, #3
 80175f4:	3508      	adds	r5, #8
 80175f6:	2d0c      	cmp	r5, #12
 80175f8:	bf38      	it	cc
 80175fa:	250c      	movcc	r5, #12
 80175fc:	2d00      	cmp	r5, #0
 80175fe:	4606      	mov	r6, r0
 8017600:	db01      	blt.n	8017606 <_malloc_r+0x1a>
 8017602:	42a9      	cmp	r1, r5
 8017604:	d903      	bls.n	801760e <_malloc_r+0x22>
 8017606:	230c      	movs	r3, #12
 8017608:	6033      	str	r3, [r6, #0]
 801760a:	2000      	movs	r0, #0
 801760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801760e:	f000 fbe7 	bl	8017de0 <__malloc_lock>
 8017612:	4921      	ldr	r1, [pc, #132]	; (8017698 <_malloc_r+0xac>)
 8017614:	680a      	ldr	r2, [r1, #0]
 8017616:	4614      	mov	r4, r2
 8017618:	b99c      	cbnz	r4, 8017642 <_malloc_r+0x56>
 801761a:	4f20      	ldr	r7, [pc, #128]	; (801769c <_malloc_r+0xb0>)
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	b923      	cbnz	r3, 801762a <_malloc_r+0x3e>
 8017620:	4621      	mov	r1, r4
 8017622:	4630      	mov	r0, r6
 8017624:	f000 fb2a 	bl	8017c7c <_sbrk_r>
 8017628:	6038      	str	r0, [r7, #0]
 801762a:	4629      	mov	r1, r5
 801762c:	4630      	mov	r0, r6
 801762e:	f000 fb25 	bl	8017c7c <_sbrk_r>
 8017632:	1c43      	adds	r3, r0, #1
 8017634:	d123      	bne.n	801767e <_malloc_r+0x92>
 8017636:	230c      	movs	r3, #12
 8017638:	6033      	str	r3, [r6, #0]
 801763a:	4630      	mov	r0, r6
 801763c:	f000 fbd6 	bl	8017dec <__malloc_unlock>
 8017640:	e7e3      	b.n	801760a <_malloc_r+0x1e>
 8017642:	6823      	ldr	r3, [r4, #0]
 8017644:	1b5b      	subs	r3, r3, r5
 8017646:	d417      	bmi.n	8017678 <_malloc_r+0x8c>
 8017648:	2b0b      	cmp	r3, #11
 801764a:	d903      	bls.n	8017654 <_malloc_r+0x68>
 801764c:	6023      	str	r3, [r4, #0]
 801764e:	441c      	add	r4, r3
 8017650:	6025      	str	r5, [r4, #0]
 8017652:	e004      	b.n	801765e <_malloc_r+0x72>
 8017654:	6863      	ldr	r3, [r4, #4]
 8017656:	42a2      	cmp	r2, r4
 8017658:	bf0c      	ite	eq
 801765a:	600b      	streq	r3, [r1, #0]
 801765c:	6053      	strne	r3, [r2, #4]
 801765e:	4630      	mov	r0, r6
 8017660:	f000 fbc4 	bl	8017dec <__malloc_unlock>
 8017664:	f104 000b 	add.w	r0, r4, #11
 8017668:	1d23      	adds	r3, r4, #4
 801766a:	f020 0007 	bic.w	r0, r0, #7
 801766e:	1ac2      	subs	r2, r0, r3
 8017670:	d0cc      	beq.n	801760c <_malloc_r+0x20>
 8017672:	1a1b      	subs	r3, r3, r0
 8017674:	50a3      	str	r3, [r4, r2]
 8017676:	e7c9      	b.n	801760c <_malloc_r+0x20>
 8017678:	4622      	mov	r2, r4
 801767a:	6864      	ldr	r4, [r4, #4]
 801767c:	e7cc      	b.n	8017618 <_malloc_r+0x2c>
 801767e:	1cc4      	adds	r4, r0, #3
 8017680:	f024 0403 	bic.w	r4, r4, #3
 8017684:	42a0      	cmp	r0, r4
 8017686:	d0e3      	beq.n	8017650 <_malloc_r+0x64>
 8017688:	1a21      	subs	r1, r4, r0
 801768a:	4630      	mov	r0, r6
 801768c:	f000 faf6 	bl	8017c7c <_sbrk_r>
 8017690:	3001      	adds	r0, #1
 8017692:	d1dd      	bne.n	8017650 <_malloc_r+0x64>
 8017694:	e7cf      	b.n	8017636 <_malloc_r+0x4a>
 8017696:	bf00      	nop
 8017698:	2000021c 	.word	0x2000021c
 801769c:	20000220 	.word	0x20000220

080176a0 <__sfputc_r>:
 80176a0:	6893      	ldr	r3, [r2, #8]
 80176a2:	3b01      	subs	r3, #1
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	b410      	push	{r4}
 80176a8:	6093      	str	r3, [r2, #8]
 80176aa:	da08      	bge.n	80176be <__sfputc_r+0x1e>
 80176ac:	6994      	ldr	r4, [r2, #24]
 80176ae:	42a3      	cmp	r3, r4
 80176b0:	db01      	blt.n	80176b6 <__sfputc_r+0x16>
 80176b2:	290a      	cmp	r1, #10
 80176b4:	d103      	bne.n	80176be <__sfputc_r+0x1e>
 80176b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176ba:	f7ff bc31 	b.w	8016f20 <__swbuf_r>
 80176be:	6813      	ldr	r3, [r2, #0]
 80176c0:	1c58      	adds	r0, r3, #1
 80176c2:	6010      	str	r0, [r2, #0]
 80176c4:	7019      	strb	r1, [r3, #0]
 80176c6:	4608      	mov	r0, r1
 80176c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176cc:	4770      	bx	lr

080176ce <__sfputs_r>:
 80176ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d0:	4606      	mov	r6, r0
 80176d2:	460f      	mov	r7, r1
 80176d4:	4614      	mov	r4, r2
 80176d6:	18d5      	adds	r5, r2, r3
 80176d8:	42ac      	cmp	r4, r5
 80176da:	d101      	bne.n	80176e0 <__sfputs_r+0x12>
 80176dc:	2000      	movs	r0, #0
 80176de:	e007      	b.n	80176f0 <__sfputs_r+0x22>
 80176e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176e4:	463a      	mov	r2, r7
 80176e6:	4630      	mov	r0, r6
 80176e8:	f7ff ffda 	bl	80176a0 <__sfputc_r>
 80176ec:	1c43      	adds	r3, r0, #1
 80176ee:	d1f3      	bne.n	80176d8 <__sfputs_r+0xa>
 80176f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080176f4 <_vfiprintf_r>:
 80176f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f8:	460d      	mov	r5, r1
 80176fa:	b09d      	sub	sp, #116	; 0x74
 80176fc:	4614      	mov	r4, r2
 80176fe:	4698      	mov	r8, r3
 8017700:	4606      	mov	r6, r0
 8017702:	b118      	cbz	r0, 801770c <_vfiprintf_r+0x18>
 8017704:	6983      	ldr	r3, [r0, #24]
 8017706:	b90b      	cbnz	r3, 801770c <_vfiprintf_r+0x18>
 8017708:	f7ff fe02 	bl	8017310 <__sinit>
 801770c:	4b89      	ldr	r3, [pc, #548]	; (8017934 <_vfiprintf_r+0x240>)
 801770e:	429d      	cmp	r5, r3
 8017710:	d11b      	bne.n	801774a <_vfiprintf_r+0x56>
 8017712:	6875      	ldr	r5, [r6, #4]
 8017714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017716:	07d9      	lsls	r1, r3, #31
 8017718:	d405      	bmi.n	8017726 <_vfiprintf_r+0x32>
 801771a:	89ab      	ldrh	r3, [r5, #12]
 801771c:	059a      	lsls	r2, r3, #22
 801771e:	d402      	bmi.n	8017726 <_vfiprintf_r+0x32>
 8017720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017722:	f7ff fea5 	bl	8017470 <__retarget_lock_acquire_recursive>
 8017726:	89ab      	ldrh	r3, [r5, #12]
 8017728:	071b      	lsls	r3, r3, #28
 801772a:	d501      	bpl.n	8017730 <_vfiprintf_r+0x3c>
 801772c:	692b      	ldr	r3, [r5, #16]
 801772e:	b9eb      	cbnz	r3, 801776c <_vfiprintf_r+0x78>
 8017730:	4629      	mov	r1, r5
 8017732:	4630      	mov	r0, r6
 8017734:	f7ff fc46 	bl	8016fc4 <__swsetup_r>
 8017738:	b1c0      	cbz	r0, 801776c <_vfiprintf_r+0x78>
 801773a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801773c:	07dc      	lsls	r4, r3, #31
 801773e:	d50e      	bpl.n	801775e <_vfiprintf_r+0x6a>
 8017740:	f04f 30ff 	mov.w	r0, #4294967295
 8017744:	b01d      	add	sp, #116	; 0x74
 8017746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801774a:	4b7b      	ldr	r3, [pc, #492]	; (8017938 <_vfiprintf_r+0x244>)
 801774c:	429d      	cmp	r5, r3
 801774e:	d101      	bne.n	8017754 <_vfiprintf_r+0x60>
 8017750:	68b5      	ldr	r5, [r6, #8]
 8017752:	e7df      	b.n	8017714 <_vfiprintf_r+0x20>
 8017754:	4b79      	ldr	r3, [pc, #484]	; (801793c <_vfiprintf_r+0x248>)
 8017756:	429d      	cmp	r5, r3
 8017758:	bf08      	it	eq
 801775a:	68f5      	ldreq	r5, [r6, #12]
 801775c:	e7da      	b.n	8017714 <_vfiprintf_r+0x20>
 801775e:	89ab      	ldrh	r3, [r5, #12]
 8017760:	0598      	lsls	r0, r3, #22
 8017762:	d4ed      	bmi.n	8017740 <_vfiprintf_r+0x4c>
 8017764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017766:	f7ff fe84 	bl	8017472 <__retarget_lock_release_recursive>
 801776a:	e7e9      	b.n	8017740 <_vfiprintf_r+0x4c>
 801776c:	2300      	movs	r3, #0
 801776e:	9309      	str	r3, [sp, #36]	; 0x24
 8017770:	2320      	movs	r3, #32
 8017772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017776:	f8cd 800c 	str.w	r8, [sp, #12]
 801777a:	2330      	movs	r3, #48	; 0x30
 801777c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017940 <_vfiprintf_r+0x24c>
 8017780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017784:	f04f 0901 	mov.w	r9, #1
 8017788:	4623      	mov	r3, r4
 801778a:	469a      	mov	sl, r3
 801778c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017790:	b10a      	cbz	r2, 8017796 <_vfiprintf_r+0xa2>
 8017792:	2a25      	cmp	r2, #37	; 0x25
 8017794:	d1f9      	bne.n	801778a <_vfiprintf_r+0x96>
 8017796:	ebba 0b04 	subs.w	fp, sl, r4
 801779a:	d00b      	beq.n	80177b4 <_vfiprintf_r+0xc0>
 801779c:	465b      	mov	r3, fp
 801779e:	4622      	mov	r2, r4
 80177a0:	4629      	mov	r1, r5
 80177a2:	4630      	mov	r0, r6
 80177a4:	f7ff ff93 	bl	80176ce <__sfputs_r>
 80177a8:	3001      	adds	r0, #1
 80177aa:	f000 80aa 	beq.w	8017902 <_vfiprintf_r+0x20e>
 80177ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177b0:	445a      	add	r2, fp
 80177b2:	9209      	str	r2, [sp, #36]	; 0x24
 80177b4:	f89a 3000 	ldrb.w	r3, [sl]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	f000 80a2 	beq.w	8017902 <_vfiprintf_r+0x20e>
 80177be:	2300      	movs	r3, #0
 80177c0:	f04f 32ff 	mov.w	r2, #4294967295
 80177c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177c8:	f10a 0a01 	add.w	sl, sl, #1
 80177cc:	9304      	str	r3, [sp, #16]
 80177ce:	9307      	str	r3, [sp, #28]
 80177d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177d4:	931a      	str	r3, [sp, #104]	; 0x68
 80177d6:	4654      	mov	r4, sl
 80177d8:	2205      	movs	r2, #5
 80177da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177de:	4858      	ldr	r0, [pc, #352]	; (8017940 <_vfiprintf_r+0x24c>)
 80177e0:	f7e8 fd2e 	bl	8000240 <memchr>
 80177e4:	9a04      	ldr	r2, [sp, #16]
 80177e6:	b9d8      	cbnz	r0, 8017820 <_vfiprintf_r+0x12c>
 80177e8:	06d1      	lsls	r1, r2, #27
 80177ea:	bf44      	itt	mi
 80177ec:	2320      	movmi	r3, #32
 80177ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177f2:	0713      	lsls	r3, r2, #28
 80177f4:	bf44      	itt	mi
 80177f6:	232b      	movmi	r3, #43	; 0x2b
 80177f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017800:	2b2a      	cmp	r3, #42	; 0x2a
 8017802:	d015      	beq.n	8017830 <_vfiprintf_r+0x13c>
 8017804:	9a07      	ldr	r2, [sp, #28]
 8017806:	4654      	mov	r4, sl
 8017808:	2000      	movs	r0, #0
 801780a:	f04f 0c0a 	mov.w	ip, #10
 801780e:	4621      	mov	r1, r4
 8017810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017814:	3b30      	subs	r3, #48	; 0x30
 8017816:	2b09      	cmp	r3, #9
 8017818:	d94e      	bls.n	80178b8 <_vfiprintf_r+0x1c4>
 801781a:	b1b0      	cbz	r0, 801784a <_vfiprintf_r+0x156>
 801781c:	9207      	str	r2, [sp, #28]
 801781e:	e014      	b.n	801784a <_vfiprintf_r+0x156>
 8017820:	eba0 0308 	sub.w	r3, r0, r8
 8017824:	fa09 f303 	lsl.w	r3, r9, r3
 8017828:	4313      	orrs	r3, r2
 801782a:	9304      	str	r3, [sp, #16]
 801782c:	46a2      	mov	sl, r4
 801782e:	e7d2      	b.n	80177d6 <_vfiprintf_r+0xe2>
 8017830:	9b03      	ldr	r3, [sp, #12]
 8017832:	1d19      	adds	r1, r3, #4
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	9103      	str	r1, [sp, #12]
 8017838:	2b00      	cmp	r3, #0
 801783a:	bfbb      	ittet	lt
 801783c:	425b      	neglt	r3, r3
 801783e:	f042 0202 	orrlt.w	r2, r2, #2
 8017842:	9307      	strge	r3, [sp, #28]
 8017844:	9307      	strlt	r3, [sp, #28]
 8017846:	bfb8      	it	lt
 8017848:	9204      	strlt	r2, [sp, #16]
 801784a:	7823      	ldrb	r3, [r4, #0]
 801784c:	2b2e      	cmp	r3, #46	; 0x2e
 801784e:	d10c      	bne.n	801786a <_vfiprintf_r+0x176>
 8017850:	7863      	ldrb	r3, [r4, #1]
 8017852:	2b2a      	cmp	r3, #42	; 0x2a
 8017854:	d135      	bne.n	80178c2 <_vfiprintf_r+0x1ce>
 8017856:	9b03      	ldr	r3, [sp, #12]
 8017858:	1d1a      	adds	r2, r3, #4
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	9203      	str	r2, [sp, #12]
 801785e:	2b00      	cmp	r3, #0
 8017860:	bfb8      	it	lt
 8017862:	f04f 33ff 	movlt.w	r3, #4294967295
 8017866:	3402      	adds	r4, #2
 8017868:	9305      	str	r3, [sp, #20]
 801786a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017950 <_vfiprintf_r+0x25c>
 801786e:	7821      	ldrb	r1, [r4, #0]
 8017870:	2203      	movs	r2, #3
 8017872:	4650      	mov	r0, sl
 8017874:	f7e8 fce4 	bl	8000240 <memchr>
 8017878:	b140      	cbz	r0, 801788c <_vfiprintf_r+0x198>
 801787a:	2340      	movs	r3, #64	; 0x40
 801787c:	eba0 000a 	sub.w	r0, r0, sl
 8017880:	fa03 f000 	lsl.w	r0, r3, r0
 8017884:	9b04      	ldr	r3, [sp, #16]
 8017886:	4303      	orrs	r3, r0
 8017888:	3401      	adds	r4, #1
 801788a:	9304      	str	r3, [sp, #16]
 801788c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017890:	482c      	ldr	r0, [pc, #176]	; (8017944 <_vfiprintf_r+0x250>)
 8017892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017896:	2206      	movs	r2, #6
 8017898:	f7e8 fcd2 	bl	8000240 <memchr>
 801789c:	2800      	cmp	r0, #0
 801789e:	d03f      	beq.n	8017920 <_vfiprintf_r+0x22c>
 80178a0:	4b29      	ldr	r3, [pc, #164]	; (8017948 <_vfiprintf_r+0x254>)
 80178a2:	bb1b      	cbnz	r3, 80178ec <_vfiprintf_r+0x1f8>
 80178a4:	9b03      	ldr	r3, [sp, #12]
 80178a6:	3307      	adds	r3, #7
 80178a8:	f023 0307 	bic.w	r3, r3, #7
 80178ac:	3308      	adds	r3, #8
 80178ae:	9303      	str	r3, [sp, #12]
 80178b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b2:	443b      	add	r3, r7
 80178b4:	9309      	str	r3, [sp, #36]	; 0x24
 80178b6:	e767      	b.n	8017788 <_vfiprintf_r+0x94>
 80178b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80178bc:	460c      	mov	r4, r1
 80178be:	2001      	movs	r0, #1
 80178c0:	e7a5      	b.n	801780e <_vfiprintf_r+0x11a>
 80178c2:	2300      	movs	r3, #0
 80178c4:	3401      	adds	r4, #1
 80178c6:	9305      	str	r3, [sp, #20]
 80178c8:	4619      	mov	r1, r3
 80178ca:	f04f 0c0a 	mov.w	ip, #10
 80178ce:	4620      	mov	r0, r4
 80178d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d4:	3a30      	subs	r2, #48	; 0x30
 80178d6:	2a09      	cmp	r2, #9
 80178d8:	d903      	bls.n	80178e2 <_vfiprintf_r+0x1ee>
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d0c5      	beq.n	801786a <_vfiprintf_r+0x176>
 80178de:	9105      	str	r1, [sp, #20]
 80178e0:	e7c3      	b.n	801786a <_vfiprintf_r+0x176>
 80178e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80178e6:	4604      	mov	r4, r0
 80178e8:	2301      	movs	r3, #1
 80178ea:	e7f0      	b.n	80178ce <_vfiprintf_r+0x1da>
 80178ec:	ab03      	add	r3, sp, #12
 80178ee:	9300      	str	r3, [sp, #0]
 80178f0:	462a      	mov	r2, r5
 80178f2:	4b16      	ldr	r3, [pc, #88]	; (801794c <_vfiprintf_r+0x258>)
 80178f4:	a904      	add	r1, sp, #16
 80178f6:	4630      	mov	r0, r6
 80178f8:	f3af 8000 	nop.w
 80178fc:	4607      	mov	r7, r0
 80178fe:	1c78      	adds	r0, r7, #1
 8017900:	d1d6      	bne.n	80178b0 <_vfiprintf_r+0x1bc>
 8017902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017904:	07d9      	lsls	r1, r3, #31
 8017906:	d405      	bmi.n	8017914 <_vfiprintf_r+0x220>
 8017908:	89ab      	ldrh	r3, [r5, #12]
 801790a:	059a      	lsls	r2, r3, #22
 801790c:	d402      	bmi.n	8017914 <_vfiprintf_r+0x220>
 801790e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017910:	f7ff fdaf 	bl	8017472 <__retarget_lock_release_recursive>
 8017914:	89ab      	ldrh	r3, [r5, #12]
 8017916:	065b      	lsls	r3, r3, #25
 8017918:	f53f af12 	bmi.w	8017740 <_vfiprintf_r+0x4c>
 801791c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801791e:	e711      	b.n	8017744 <_vfiprintf_r+0x50>
 8017920:	ab03      	add	r3, sp, #12
 8017922:	9300      	str	r3, [sp, #0]
 8017924:	462a      	mov	r2, r5
 8017926:	4b09      	ldr	r3, [pc, #36]	; (801794c <_vfiprintf_r+0x258>)
 8017928:	a904      	add	r1, sp, #16
 801792a:	4630      	mov	r0, r6
 801792c:	f000 f880 	bl	8017a30 <_printf_i>
 8017930:	e7e4      	b.n	80178fc <_vfiprintf_r+0x208>
 8017932:	bf00      	nop
 8017934:	0801b000 	.word	0x0801b000
 8017938:	0801b020 	.word	0x0801b020
 801793c:	0801afe0 	.word	0x0801afe0
 8017940:	0801b040 	.word	0x0801b040
 8017944:	0801b04a 	.word	0x0801b04a
 8017948:	00000000 	.word	0x00000000
 801794c:	080176cf 	.word	0x080176cf
 8017950:	0801b046 	.word	0x0801b046

08017954 <_printf_common>:
 8017954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017958:	4616      	mov	r6, r2
 801795a:	4699      	mov	r9, r3
 801795c:	688a      	ldr	r2, [r1, #8]
 801795e:	690b      	ldr	r3, [r1, #16]
 8017960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017964:	4293      	cmp	r3, r2
 8017966:	bfb8      	it	lt
 8017968:	4613      	movlt	r3, r2
 801796a:	6033      	str	r3, [r6, #0]
 801796c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017970:	4607      	mov	r7, r0
 8017972:	460c      	mov	r4, r1
 8017974:	b10a      	cbz	r2, 801797a <_printf_common+0x26>
 8017976:	3301      	adds	r3, #1
 8017978:	6033      	str	r3, [r6, #0]
 801797a:	6823      	ldr	r3, [r4, #0]
 801797c:	0699      	lsls	r1, r3, #26
 801797e:	bf42      	ittt	mi
 8017980:	6833      	ldrmi	r3, [r6, #0]
 8017982:	3302      	addmi	r3, #2
 8017984:	6033      	strmi	r3, [r6, #0]
 8017986:	6825      	ldr	r5, [r4, #0]
 8017988:	f015 0506 	ands.w	r5, r5, #6
 801798c:	d106      	bne.n	801799c <_printf_common+0x48>
 801798e:	f104 0a19 	add.w	sl, r4, #25
 8017992:	68e3      	ldr	r3, [r4, #12]
 8017994:	6832      	ldr	r2, [r6, #0]
 8017996:	1a9b      	subs	r3, r3, r2
 8017998:	42ab      	cmp	r3, r5
 801799a:	dc26      	bgt.n	80179ea <_printf_common+0x96>
 801799c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80179a0:	1e13      	subs	r3, r2, #0
 80179a2:	6822      	ldr	r2, [r4, #0]
 80179a4:	bf18      	it	ne
 80179a6:	2301      	movne	r3, #1
 80179a8:	0692      	lsls	r2, r2, #26
 80179aa:	d42b      	bmi.n	8017a04 <_printf_common+0xb0>
 80179ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179b0:	4649      	mov	r1, r9
 80179b2:	4638      	mov	r0, r7
 80179b4:	47c0      	blx	r8
 80179b6:	3001      	adds	r0, #1
 80179b8:	d01e      	beq.n	80179f8 <_printf_common+0xa4>
 80179ba:	6823      	ldr	r3, [r4, #0]
 80179bc:	68e5      	ldr	r5, [r4, #12]
 80179be:	6832      	ldr	r2, [r6, #0]
 80179c0:	f003 0306 	and.w	r3, r3, #6
 80179c4:	2b04      	cmp	r3, #4
 80179c6:	bf08      	it	eq
 80179c8:	1aad      	subeq	r5, r5, r2
 80179ca:	68a3      	ldr	r3, [r4, #8]
 80179cc:	6922      	ldr	r2, [r4, #16]
 80179ce:	bf0c      	ite	eq
 80179d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179d4:	2500      	movne	r5, #0
 80179d6:	4293      	cmp	r3, r2
 80179d8:	bfc4      	itt	gt
 80179da:	1a9b      	subgt	r3, r3, r2
 80179dc:	18ed      	addgt	r5, r5, r3
 80179de:	2600      	movs	r6, #0
 80179e0:	341a      	adds	r4, #26
 80179e2:	42b5      	cmp	r5, r6
 80179e4:	d11a      	bne.n	8017a1c <_printf_common+0xc8>
 80179e6:	2000      	movs	r0, #0
 80179e8:	e008      	b.n	80179fc <_printf_common+0xa8>
 80179ea:	2301      	movs	r3, #1
 80179ec:	4652      	mov	r2, sl
 80179ee:	4649      	mov	r1, r9
 80179f0:	4638      	mov	r0, r7
 80179f2:	47c0      	blx	r8
 80179f4:	3001      	adds	r0, #1
 80179f6:	d103      	bne.n	8017a00 <_printf_common+0xac>
 80179f8:	f04f 30ff 	mov.w	r0, #4294967295
 80179fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a00:	3501      	adds	r5, #1
 8017a02:	e7c6      	b.n	8017992 <_printf_common+0x3e>
 8017a04:	18e1      	adds	r1, r4, r3
 8017a06:	1c5a      	adds	r2, r3, #1
 8017a08:	2030      	movs	r0, #48	; 0x30
 8017a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a0e:	4422      	add	r2, r4
 8017a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a18:	3302      	adds	r3, #2
 8017a1a:	e7c7      	b.n	80179ac <_printf_common+0x58>
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	4622      	mov	r2, r4
 8017a20:	4649      	mov	r1, r9
 8017a22:	4638      	mov	r0, r7
 8017a24:	47c0      	blx	r8
 8017a26:	3001      	adds	r0, #1
 8017a28:	d0e6      	beq.n	80179f8 <_printf_common+0xa4>
 8017a2a:	3601      	adds	r6, #1
 8017a2c:	e7d9      	b.n	80179e2 <_printf_common+0x8e>
	...

08017a30 <_printf_i>:
 8017a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a34:	460c      	mov	r4, r1
 8017a36:	4691      	mov	r9, r2
 8017a38:	7e27      	ldrb	r7, [r4, #24]
 8017a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017a3c:	2f78      	cmp	r7, #120	; 0x78
 8017a3e:	4680      	mov	r8, r0
 8017a40:	469a      	mov	sl, r3
 8017a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a46:	d807      	bhi.n	8017a58 <_printf_i+0x28>
 8017a48:	2f62      	cmp	r7, #98	; 0x62
 8017a4a:	d80a      	bhi.n	8017a62 <_printf_i+0x32>
 8017a4c:	2f00      	cmp	r7, #0
 8017a4e:	f000 80d8 	beq.w	8017c02 <_printf_i+0x1d2>
 8017a52:	2f58      	cmp	r7, #88	; 0x58
 8017a54:	f000 80a3 	beq.w	8017b9e <_printf_i+0x16e>
 8017a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a60:	e03a      	b.n	8017ad8 <_printf_i+0xa8>
 8017a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a66:	2b15      	cmp	r3, #21
 8017a68:	d8f6      	bhi.n	8017a58 <_printf_i+0x28>
 8017a6a:	a001      	add	r0, pc, #4	; (adr r0, 8017a70 <_printf_i+0x40>)
 8017a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017a70:	08017ac9 	.word	0x08017ac9
 8017a74:	08017add 	.word	0x08017add
 8017a78:	08017a59 	.word	0x08017a59
 8017a7c:	08017a59 	.word	0x08017a59
 8017a80:	08017a59 	.word	0x08017a59
 8017a84:	08017a59 	.word	0x08017a59
 8017a88:	08017add 	.word	0x08017add
 8017a8c:	08017a59 	.word	0x08017a59
 8017a90:	08017a59 	.word	0x08017a59
 8017a94:	08017a59 	.word	0x08017a59
 8017a98:	08017a59 	.word	0x08017a59
 8017a9c:	08017be9 	.word	0x08017be9
 8017aa0:	08017b0d 	.word	0x08017b0d
 8017aa4:	08017bcb 	.word	0x08017bcb
 8017aa8:	08017a59 	.word	0x08017a59
 8017aac:	08017a59 	.word	0x08017a59
 8017ab0:	08017c0b 	.word	0x08017c0b
 8017ab4:	08017a59 	.word	0x08017a59
 8017ab8:	08017b0d 	.word	0x08017b0d
 8017abc:	08017a59 	.word	0x08017a59
 8017ac0:	08017a59 	.word	0x08017a59
 8017ac4:	08017bd3 	.word	0x08017bd3
 8017ac8:	680b      	ldr	r3, [r1, #0]
 8017aca:	1d1a      	adds	r2, r3, #4
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	600a      	str	r2, [r1, #0]
 8017ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e0a3      	b.n	8017c24 <_printf_i+0x1f4>
 8017adc:	6825      	ldr	r5, [r4, #0]
 8017ade:	6808      	ldr	r0, [r1, #0]
 8017ae0:	062e      	lsls	r6, r5, #24
 8017ae2:	f100 0304 	add.w	r3, r0, #4
 8017ae6:	d50a      	bpl.n	8017afe <_printf_i+0xce>
 8017ae8:	6805      	ldr	r5, [r0, #0]
 8017aea:	600b      	str	r3, [r1, #0]
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	da03      	bge.n	8017af8 <_printf_i+0xc8>
 8017af0:	232d      	movs	r3, #45	; 0x2d
 8017af2:	426d      	negs	r5, r5
 8017af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017af8:	485e      	ldr	r0, [pc, #376]	; (8017c74 <_printf_i+0x244>)
 8017afa:	230a      	movs	r3, #10
 8017afc:	e019      	b.n	8017b32 <_printf_i+0x102>
 8017afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017b02:	6805      	ldr	r5, [r0, #0]
 8017b04:	600b      	str	r3, [r1, #0]
 8017b06:	bf18      	it	ne
 8017b08:	b22d      	sxthne	r5, r5
 8017b0a:	e7ef      	b.n	8017aec <_printf_i+0xbc>
 8017b0c:	680b      	ldr	r3, [r1, #0]
 8017b0e:	6825      	ldr	r5, [r4, #0]
 8017b10:	1d18      	adds	r0, r3, #4
 8017b12:	6008      	str	r0, [r1, #0]
 8017b14:	0628      	lsls	r0, r5, #24
 8017b16:	d501      	bpl.n	8017b1c <_printf_i+0xec>
 8017b18:	681d      	ldr	r5, [r3, #0]
 8017b1a:	e002      	b.n	8017b22 <_printf_i+0xf2>
 8017b1c:	0669      	lsls	r1, r5, #25
 8017b1e:	d5fb      	bpl.n	8017b18 <_printf_i+0xe8>
 8017b20:	881d      	ldrh	r5, [r3, #0]
 8017b22:	4854      	ldr	r0, [pc, #336]	; (8017c74 <_printf_i+0x244>)
 8017b24:	2f6f      	cmp	r7, #111	; 0x6f
 8017b26:	bf0c      	ite	eq
 8017b28:	2308      	moveq	r3, #8
 8017b2a:	230a      	movne	r3, #10
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b32:	6866      	ldr	r6, [r4, #4]
 8017b34:	60a6      	str	r6, [r4, #8]
 8017b36:	2e00      	cmp	r6, #0
 8017b38:	bfa2      	ittt	ge
 8017b3a:	6821      	ldrge	r1, [r4, #0]
 8017b3c:	f021 0104 	bicge.w	r1, r1, #4
 8017b40:	6021      	strge	r1, [r4, #0]
 8017b42:	b90d      	cbnz	r5, 8017b48 <_printf_i+0x118>
 8017b44:	2e00      	cmp	r6, #0
 8017b46:	d04d      	beq.n	8017be4 <_printf_i+0x1b4>
 8017b48:	4616      	mov	r6, r2
 8017b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8017b52:	5dc7      	ldrb	r7, [r0, r7]
 8017b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b58:	462f      	mov	r7, r5
 8017b5a:	42bb      	cmp	r3, r7
 8017b5c:	460d      	mov	r5, r1
 8017b5e:	d9f4      	bls.n	8017b4a <_printf_i+0x11a>
 8017b60:	2b08      	cmp	r3, #8
 8017b62:	d10b      	bne.n	8017b7c <_printf_i+0x14c>
 8017b64:	6823      	ldr	r3, [r4, #0]
 8017b66:	07df      	lsls	r7, r3, #31
 8017b68:	d508      	bpl.n	8017b7c <_printf_i+0x14c>
 8017b6a:	6923      	ldr	r3, [r4, #16]
 8017b6c:	6861      	ldr	r1, [r4, #4]
 8017b6e:	4299      	cmp	r1, r3
 8017b70:	bfde      	ittt	le
 8017b72:	2330      	movle	r3, #48	; 0x30
 8017b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b7c:	1b92      	subs	r2, r2, r6
 8017b7e:	6122      	str	r2, [r4, #16]
 8017b80:	f8cd a000 	str.w	sl, [sp]
 8017b84:	464b      	mov	r3, r9
 8017b86:	aa03      	add	r2, sp, #12
 8017b88:	4621      	mov	r1, r4
 8017b8a:	4640      	mov	r0, r8
 8017b8c:	f7ff fee2 	bl	8017954 <_printf_common>
 8017b90:	3001      	adds	r0, #1
 8017b92:	d14c      	bne.n	8017c2e <_printf_i+0x1fe>
 8017b94:	f04f 30ff 	mov.w	r0, #4294967295
 8017b98:	b004      	add	sp, #16
 8017b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b9e:	4835      	ldr	r0, [pc, #212]	; (8017c74 <_printf_i+0x244>)
 8017ba0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	680e      	ldr	r6, [r1, #0]
 8017ba8:	061f      	lsls	r7, r3, #24
 8017baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8017bae:	600e      	str	r6, [r1, #0]
 8017bb0:	d514      	bpl.n	8017bdc <_printf_i+0x1ac>
 8017bb2:	07d9      	lsls	r1, r3, #31
 8017bb4:	bf44      	itt	mi
 8017bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8017bba:	6023      	strmi	r3, [r4, #0]
 8017bbc:	b91d      	cbnz	r5, 8017bc6 <_printf_i+0x196>
 8017bbe:	6823      	ldr	r3, [r4, #0]
 8017bc0:	f023 0320 	bic.w	r3, r3, #32
 8017bc4:	6023      	str	r3, [r4, #0]
 8017bc6:	2310      	movs	r3, #16
 8017bc8:	e7b0      	b.n	8017b2c <_printf_i+0xfc>
 8017bca:	6823      	ldr	r3, [r4, #0]
 8017bcc:	f043 0320 	orr.w	r3, r3, #32
 8017bd0:	6023      	str	r3, [r4, #0]
 8017bd2:	2378      	movs	r3, #120	; 0x78
 8017bd4:	4828      	ldr	r0, [pc, #160]	; (8017c78 <_printf_i+0x248>)
 8017bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017bda:	e7e3      	b.n	8017ba4 <_printf_i+0x174>
 8017bdc:	065e      	lsls	r6, r3, #25
 8017bde:	bf48      	it	mi
 8017be0:	b2ad      	uxthmi	r5, r5
 8017be2:	e7e6      	b.n	8017bb2 <_printf_i+0x182>
 8017be4:	4616      	mov	r6, r2
 8017be6:	e7bb      	b.n	8017b60 <_printf_i+0x130>
 8017be8:	680b      	ldr	r3, [r1, #0]
 8017bea:	6826      	ldr	r6, [r4, #0]
 8017bec:	6960      	ldr	r0, [r4, #20]
 8017bee:	1d1d      	adds	r5, r3, #4
 8017bf0:	600d      	str	r5, [r1, #0]
 8017bf2:	0635      	lsls	r5, r6, #24
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	d501      	bpl.n	8017bfc <_printf_i+0x1cc>
 8017bf8:	6018      	str	r0, [r3, #0]
 8017bfa:	e002      	b.n	8017c02 <_printf_i+0x1d2>
 8017bfc:	0671      	lsls	r1, r6, #25
 8017bfe:	d5fb      	bpl.n	8017bf8 <_printf_i+0x1c8>
 8017c00:	8018      	strh	r0, [r3, #0]
 8017c02:	2300      	movs	r3, #0
 8017c04:	6123      	str	r3, [r4, #16]
 8017c06:	4616      	mov	r6, r2
 8017c08:	e7ba      	b.n	8017b80 <_printf_i+0x150>
 8017c0a:	680b      	ldr	r3, [r1, #0]
 8017c0c:	1d1a      	adds	r2, r3, #4
 8017c0e:	600a      	str	r2, [r1, #0]
 8017c10:	681e      	ldr	r6, [r3, #0]
 8017c12:	6862      	ldr	r2, [r4, #4]
 8017c14:	2100      	movs	r1, #0
 8017c16:	4630      	mov	r0, r6
 8017c18:	f7e8 fb12 	bl	8000240 <memchr>
 8017c1c:	b108      	cbz	r0, 8017c22 <_printf_i+0x1f2>
 8017c1e:	1b80      	subs	r0, r0, r6
 8017c20:	6060      	str	r0, [r4, #4]
 8017c22:	6863      	ldr	r3, [r4, #4]
 8017c24:	6123      	str	r3, [r4, #16]
 8017c26:	2300      	movs	r3, #0
 8017c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c2c:	e7a8      	b.n	8017b80 <_printf_i+0x150>
 8017c2e:	6923      	ldr	r3, [r4, #16]
 8017c30:	4632      	mov	r2, r6
 8017c32:	4649      	mov	r1, r9
 8017c34:	4640      	mov	r0, r8
 8017c36:	47d0      	blx	sl
 8017c38:	3001      	adds	r0, #1
 8017c3a:	d0ab      	beq.n	8017b94 <_printf_i+0x164>
 8017c3c:	6823      	ldr	r3, [r4, #0]
 8017c3e:	079b      	lsls	r3, r3, #30
 8017c40:	d413      	bmi.n	8017c6a <_printf_i+0x23a>
 8017c42:	68e0      	ldr	r0, [r4, #12]
 8017c44:	9b03      	ldr	r3, [sp, #12]
 8017c46:	4298      	cmp	r0, r3
 8017c48:	bfb8      	it	lt
 8017c4a:	4618      	movlt	r0, r3
 8017c4c:	e7a4      	b.n	8017b98 <_printf_i+0x168>
 8017c4e:	2301      	movs	r3, #1
 8017c50:	4632      	mov	r2, r6
 8017c52:	4649      	mov	r1, r9
 8017c54:	4640      	mov	r0, r8
 8017c56:	47d0      	blx	sl
 8017c58:	3001      	adds	r0, #1
 8017c5a:	d09b      	beq.n	8017b94 <_printf_i+0x164>
 8017c5c:	3501      	adds	r5, #1
 8017c5e:	68e3      	ldr	r3, [r4, #12]
 8017c60:	9903      	ldr	r1, [sp, #12]
 8017c62:	1a5b      	subs	r3, r3, r1
 8017c64:	42ab      	cmp	r3, r5
 8017c66:	dcf2      	bgt.n	8017c4e <_printf_i+0x21e>
 8017c68:	e7eb      	b.n	8017c42 <_printf_i+0x212>
 8017c6a:	2500      	movs	r5, #0
 8017c6c:	f104 0619 	add.w	r6, r4, #25
 8017c70:	e7f5      	b.n	8017c5e <_printf_i+0x22e>
 8017c72:	bf00      	nop
 8017c74:	0801b051 	.word	0x0801b051
 8017c78:	0801b062 	.word	0x0801b062

08017c7c <_sbrk_r>:
 8017c7c:	b538      	push	{r3, r4, r5, lr}
 8017c7e:	4d06      	ldr	r5, [pc, #24]	; (8017c98 <_sbrk_r+0x1c>)
 8017c80:	2300      	movs	r3, #0
 8017c82:	4604      	mov	r4, r0
 8017c84:	4608      	mov	r0, r1
 8017c86:	602b      	str	r3, [r5, #0]
 8017c88:	f7e8 ffee 	bl	8000c68 <_sbrk>
 8017c8c:	1c43      	adds	r3, r0, #1
 8017c8e:	d102      	bne.n	8017c96 <_sbrk_r+0x1a>
 8017c90:	682b      	ldr	r3, [r5, #0]
 8017c92:	b103      	cbz	r3, 8017c96 <_sbrk_r+0x1a>
 8017c94:	6023      	str	r3, [r4, #0]
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	200069a4 	.word	0x200069a4

08017c9c <__sread>:
 8017c9c:	b510      	push	{r4, lr}
 8017c9e:	460c      	mov	r4, r1
 8017ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca4:	f000 f8a8 	bl	8017df8 <_read_r>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	bfab      	itete	ge
 8017cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cae:	89a3      	ldrhlt	r3, [r4, #12]
 8017cb0:	181b      	addge	r3, r3, r0
 8017cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017cb6:	bfac      	ite	ge
 8017cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cba:	81a3      	strhlt	r3, [r4, #12]
 8017cbc:	bd10      	pop	{r4, pc}

08017cbe <__swrite>:
 8017cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc2:	461f      	mov	r7, r3
 8017cc4:	898b      	ldrh	r3, [r1, #12]
 8017cc6:	05db      	lsls	r3, r3, #23
 8017cc8:	4605      	mov	r5, r0
 8017cca:	460c      	mov	r4, r1
 8017ccc:	4616      	mov	r6, r2
 8017cce:	d505      	bpl.n	8017cdc <__swrite+0x1e>
 8017cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cd4:	2302      	movs	r3, #2
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	f000 f870 	bl	8017dbc <_lseek_r>
 8017cdc:	89a3      	ldrh	r3, [r4, #12]
 8017cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ce6:	81a3      	strh	r3, [r4, #12]
 8017ce8:	4632      	mov	r2, r6
 8017cea:	463b      	mov	r3, r7
 8017cec:	4628      	mov	r0, r5
 8017cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf2:	f000 b817 	b.w	8017d24 <_write_r>

08017cf6 <__sseek>:
 8017cf6:	b510      	push	{r4, lr}
 8017cf8:	460c      	mov	r4, r1
 8017cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cfe:	f000 f85d 	bl	8017dbc <_lseek_r>
 8017d02:	1c43      	adds	r3, r0, #1
 8017d04:	89a3      	ldrh	r3, [r4, #12]
 8017d06:	bf15      	itete	ne
 8017d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d12:	81a3      	strheq	r3, [r4, #12]
 8017d14:	bf18      	it	ne
 8017d16:	81a3      	strhne	r3, [r4, #12]
 8017d18:	bd10      	pop	{r4, pc}

08017d1a <__sclose>:
 8017d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d1e:	f000 b81b 	b.w	8017d58 <_close_r>
	...

08017d24 <_write_r>:
 8017d24:	b538      	push	{r3, r4, r5, lr}
 8017d26:	4d07      	ldr	r5, [pc, #28]	; (8017d44 <_write_r+0x20>)
 8017d28:	4604      	mov	r4, r0
 8017d2a:	4608      	mov	r0, r1
 8017d2c:	4611      	mov	r1, r2
 8017d2e:	2200      	movs	r2, #0
 8017d30:	602a      	str	r2, [r5, #0]
 8017d32:	461a      	mov	r2, r3
 8017d34:	f7e8 fe88 	bl	8000a48 <_write>
 8017d38:	1c43      	adds	r3, r0, #1
 8017d3a:	d102      	bne.n	8017d42 <_write_r+0x1e>
 8017d3c:	682b      	ldr	r3, [r5, #0]
 8017d3e:	b103      	cbz	r3, 8017d42 <_write_r+0x1e>
 8017d40:	6023      	str	r3, [r4, #0]
 8017d42:	bd38      	pop	{r3, r4, r5, pc}
 8017d44:	200069a4 	.word	0x200069a4

08017d48 <abort>:
 8017d48:	b508      	push	{r3, lr}
 8017d4a:	2006      	movs	r0, #6
 8017d4c:	f000 f88e 	bl	8017e6c <raise>
 8017d50:	2001      	movs	r0, #1
 8017d52:	f7e8 ff2d 	bl	8000bb0 <_exit>
	...

08017d58 <_close_r>:
 8017d58:	b538      	push	{r3, r4, r5, lr}
 8017d5a:	4d06      	ldr	r5, [pc, #24]	; (8017d74 <_close_r+0x1c>)
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4604      	mov	r4, r0
 8017d60:	4608      	mov	r0, r1
 8017d62:	602b      	str	r3, [r5, #0]
 8017d64:	f7e8 ff4b 	bl	8000bfe <_close>
 8017d68:	1c43      	adds	r3, r0, #1
 8017d6a:	d102      	bne.n	8017d72 <_close_r+0x1a>
 8017d6c:	682b      	ldr	r3, [r5, #0]
 8017d6e:	b103      	cbz	r3, 8017d72 <_close_r+0x1a>
 8017d70:	6023      	str	r3, [r4, #0]
 8017d72:	bd38      	pop	{r3, r4, r5, pc}
 8017d74:	200069a4 	.word	0x200069a4

08017d78 <_fstat_r>:
 8017d78:	b538      	push	{r3, r4, r5, lr}
 8017d7a:	4d07      	ldr	r5, [pc, #28]	; (8017d98 <_fstat_r+0x20>)
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	4604      	mov	r4, r0
 8017d80:	4608      	mov	r0, r1
 8017d82:	4611      	mov	r1, r2
 8017d84:	602b      	str	r3, [r5, #0]
 8017d86:	f7e8 ff46 	bl	8000c16 <_fstat>
 8017d8a:	1c43      	adds	r3, r0, #1
 8017d8c:	d102      	bne.n	8017d94 <_fstat_r+0x1c>
 8017d8e:	682b      	ldr	r3, [r5, #0]
 8017d90:	b103      	cbz	r3, 8017d94 <_fstat_r+0x1c>
 8017d92:	6023      	str	r3, [r4, #0]
 8017d94:	bd38      	pop	{r3, r4, r5, pc}
 8017d96:	bf00      	nop
 8017d98:	200069a4 	.word	0x200069a4

08017d9c <_isatty_r>:
 8017d9c:	b538      	push	{r3, r4, r5, lr}
 8017d9e:	4d06      	ldr	r5, [pc, #24]	; (8017db8 <_isatty_r+0x1c>)
 8017da0:	2300      	movs	r3, #0
 8017da2:	4604      	mov	r4, r0
 8017da4:	4608      	mov	r0, r1
 8017da6:	602b      	str	r3, [r5, #0]
 8017da8:	f7e8 ff45 	bl	8000c36 <_isatty>
 8017dac:	1c43      	adds	r3, r0, #1
 8017dae:	d102      	bne.n	8017db6 <_isatty_r+0x1a>
 8017db0:	682b      	ldr	r3, [r5, #0]
 8017db2:	b103      	cbz	r3, 8017db6 <_isatty_r+0x1a>
 8017db4:	6023      	str	r3, [r4, #0]
 8017db6:	bd38      	pop	{r3, r4, r5, pc}
 8017db8:	200069a4 	.word	0x200069a4

08017dbc <_lseek_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4d07      	ldr	r5, [pc, #28]	; (8017ddc <_lseek_r+0x20>)
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	4608      	mov	r0, r1
 8017dc4:	4611      	mov	r1, r2
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	602a      	str	r2, [r5, #0]
 8017dca:	461a      	mov	r2, r3
 8017dcc:	f7e8 ff3e 	bl	8000c4c <_lseek>
 8017dd0:	1c43      	adds	r3, r0, #1
 8017dd2:	d102      	bne.n	8017dda <_lseek_r+0x1e>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	b103      	cbz	r3, 8017dda <_lseek_r+0x1e>
 8017dd8:	6023      	str	r3, [r4, #0]
 8017dda:	bd38      	pop	{r3, r4, r5, pc}
 8017ddc:	200069a4 	.word	0x200069a4

08017de0 <__malloc_lock>:
 8017de0:	4801      	ldr	r0, [pc, #4]	; (8017de8 <__malloc_lock+0x8>)
 8017de2:	f7ff bb45 	b.w	8017470 <__retarget_lock_acquire_recursive>
 8017de6:	bf00      	nop
 8017de8:	200069ac 	.word	0x200069ac

08017dec <__malloc_unlock>:
 8017dec:	4801      	ldr	r0, [pc, #4]	; (8017df4 <__malloc_unlock+0x8>)
 8017dee:	f7ff bb40 	b.w	8017472 <__retarget_lock_release_recursive>
 8017df2:	bf00      	nop
 8017df4:	200069ac 	.word	0x200069ac

08017df8 <_read_r>:
 8017df8:	b538      	push	{r3, r4, r5, lr}
 8017dfa:	4d07      	ldr	r5, [pc, #28]	; (8017e18 <_read_r+0x20>)
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	4608      	mov	r0, r1
 8017e00:	4611      	mov	r1, r2
 8017e02:	2200      	movs	r2, #0
 8017e04:	602a      	str	r2, [r5, #0]
 8017e06:	461a      	mov	r2, r3
 8017e08:	f7e8 fedc 	bl	8000bc4 <_read>
 8017e0c:	1c43      	adds	r3, r0, #1
 8017e0e:	d102      	bne.n	8017e16 <_read_r+0x1e>
 8017e10:	682b      	ldr	r3, [r5, #0]
 8017e12:	b103      	cbz	r3, 8017e16 <_read_r+0x1e>
 8017e14:	6023      	str	r3, [r4, #0]
 8017e16:	bd38      	pop	{r3, r4, r5, pc}
 8017e18:	200069a4 	.word	0x200069a4

08017e1c <_raise_r>:
 8017e1c:	291f      	cmp	r1, #31
 8017e1e:	b538      	push	{r3, r4, r5, lr}
 8017e20:	4604      	mov	r4, r0
 8017e22:	460d      	mov	r5, r1
 8017e24:	d904      	bls.n	8017e30 <_raise_r+0x14>
 8017e26:	2316      	movs	r3, #22
 8017e28:	6003      	str	r3, [r0, #0]
 8017e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e2e:	bd38      	pop	{r3, r4, r5, pc}
 8017e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e32:	b112      	cbz	r2, 8017e3a <_raise_r+0x1e>
 8017e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e38:	b94b      	cbnz	r3, 8017e4e <_raise_r+0x32>
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	f000 f830 	bl	8017ea0 <_getpid_r>
 8017e40:	462a      	mov	r2, r5
 8017e42:	4601      	mov	r1, r0
 8017e44:	4620      	mov	r0, r4
 8017e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e4a:	f000 b817 	b.w	8017e7c <_kill_r>
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d00a      	beq.n	8017e68 <_raise_r+0x4c>
 8017e52:	1c59      	adds	r1, r3, #1
 8017e54:	d103      	bne.n	8017e5e <_raise_r+0x42>
 8017e56:	2316      	movs	r3, #22
 8017e58:	6003      	str	r3, [r0, #0]
 8017e5a:	2001      	movs	r0, #1
 8017e5c:	e7e7      	b.n	8017e2e <_raise_r+0x12>
 8017e5e:	2400      	movs	r4, #0
 8017e60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e64:	4628      	mov	r0, r5
 8017e66:	4798      	blx	r3
 8017e68:	2000      	movs	r0, #0
 8017e6a:	e7e0      	b.n	8017e2e <_raise_r+0x12>

08017e6c <raise>:
 8017e6c:	4b02      	ldr	r3, [pc, #8]	; (8017e78 <raise+0xc>)
 8017e6e:	4601      	mov	r1, r0
 8017e70:	6818      	ldr	r0, [r3, #0]
 8017e72:	f7ff bfd3 	b.w	8017e1c <_raise_r>
 8017e76:	bf00      	nop
 8017e78:	20000018 	.word	0x20000018

08017e7c <_kill_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4d07      	ldr	r5, [pc, #28]	; (8017e9c <_kill_r+0x20>)
 8017e80:	2300      	movs	r3, #0
 8017e82:	4604      	mov	r4, r0
 8017e84:	4608      	mov	r0, r1
 8017e86:	4611      	mov	r1, r2
 8017e88:	602b      	str	r3, [r5, #0]
 8017e8a:	f7e8 fe7f 	bl	8000b8c <_kill>
 8017e8e:	1c43      	adds	r3, r0, #1
 8017e90:	d102      	bne.n	8017e98 <_kill_r+0x1c>
 8017e92:	682b      	ldr	r3, [r5, #0]
 8017e94:	b103      	cbz	r3, 8017e98 <_kill_r+0x1c>
 8017e96:	6023      	str	r3, [r4, #0]
 8017e98:	bd38      	pop	{r3, r4, r5, pc}
 8017e9a:	bf00      	nop
 8017e9c:	200069a4 	.word	0x200069a4

08017ea0 <_getpid_r>:
 8017ea0:	f7e8 be6c 	b.w	8000b7c <_getpid>

08017ea4 <_init>:
 8017ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea6:	bf00      	nop
 8017ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eaa:	bc08      	pop	{r3}
 8017eac:	469e      	mov	lr, r3
 8017eae:	4770      	bx	lr

08017eb0 <_fini>:
 8017eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb2:	bf00      	nop
 8017eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eb6:	bc08      	pop	{r3}
 8017eb8:	469e      	mov	lr, r3
 8017eba:	4770      	bx	lr
