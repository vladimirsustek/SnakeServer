
SnakeServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  08017e50  08017e50  00027e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b008  0801b008  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b008  0801b008  0002b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b010  0801b010  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b010  0801b010  0002b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b014  0801b014  0002b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801b018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006938  2000007c  0801b094  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069b4  0801b094  000369b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a708  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f1e  00000000  00000000  0006a7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000716d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00073030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035b2c  00000000  00000000  00074888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d388  00000000  00000000  000aa3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112d9c  00000000  00000000  000d773c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ea4d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed8  00000000  00000000  001ea52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08017e38 	.word	0x08017e38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08017e38 	.word	0x08017e38

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_ADC1_Init+0x98>)
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ADC1_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <MX_ADC1_Init+0x98>)
 8000638:	f000 fc72 	bl	8000f20 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa0d 	bl	8000a60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000646:	2304      	movs	r3, #4
 8000648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2301      	movs	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_ADC1_Init+0x98>)
 8000658:	f000 fe40 	bl	80012dc <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000662:	f000 f9fd 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000224 	.word	0x20000224
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0x74>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d123      	bne.n	80006e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x78>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ce:	2310      	movs	r3, #16
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0x7c>)
 80006e2:	f002 faf3 	bl	8002ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a62      	ldr	r2, [pc, #392]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a5c      	ldr	r2, [pc, #368]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a56      	ldr	r2, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b51      	ldr	r3, [pc, #324]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a50      	ldr	r2, [pc, #320]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b4e      	ldr	r3, [pc, #312]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000772:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a4a      	ldr	r2, [pc, #296]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a3e      	ldr	r2, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x1a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d8:	4832      	ldr	r0, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 80007da:	f002 fc23 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_D0_Pin|LCD_D7_Pin|LCD_D4_Pin|LCD_D2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007e4:	4830      	ldr	r0, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 80007e6:	f002 fc1d 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D5_Pin|LCD_D3_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 80007f0:	482e      	ldr	r0, [pc, #184]	; (80008ac <MX_GPIO_Init+0x1b0>)
 80007f2:	f002 fc17 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D1_Pin|LCD_RS_Pin|LCD_RD_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f248 01a0 	movw	r1, #32928	; 0x80a0
 80007fc:	482c      	ldr	r0, [pc, #176]	; (80008b0 <MX_GPIO_Init+0x1b4>)
 80007fe:	f002 fc11 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <MX_GPIO_Init+0x1b8>)
 800081a:	f002 fa57 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000838:	f002 fa48 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D7_Pin|LCD_D4_Pin|LCD_D2_Pin;
 800083c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 8000856:	f002 fa39 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D3_Pin;
 800085a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_GPIO_Init+0x1b0>)
 8000874:	f002 fa2a 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_RS_Pin|LCD_RD_Pin;
 8000878:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_GPIO_Init+0x1b4>)
 8000892:	f002 fa1b 	bl	8002ccc <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021400 	.word	0x40021400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40020800 	.word	0x40020800

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ea      	sub	sp, #424	; 0x1a8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 faae 	bl	8000e1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f847 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff19 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ca:	f000 f9e7 	bl	8000c9c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80008ce:	f005 f811 	bl	80058f4 <MX_LWIP_Init>
  MX_ADC1_Init();
 80008d2:	f7ff fe81 	bl	80005d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  snake_hw_init();
 80008d6:	f010 fa45 	bl	8010d64 <snake_hw_init>
  tcp_server_init();
 80008da:	f010 f843 	bl	8010964 <tcp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80008de:	f005 f93b 	bl	8005b58 <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  snake_t snake = { 0 };
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80008ea:	461a      	mov	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f016 fa0b 	bl	8016d08 <memset>
	  food_t food = { 0 };
 80008f2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
	  uint32_t gPrgCycle = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  snake_init(&snake);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f010 fa33 	bl	8010d70 <snake_init>

	  for(;;)
	  {
		snake_control(&snake);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f010 fa1e 	bl	8010d4e <snake_control>
		snake_move(&snake);
 8000912:	463b      	mov	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f010 faa7 	bl	8010e68 <snake_move>

		if (snake.state != PLAYING) break;
 800091a:	463b      	mov	r3, r7
 800091c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8000920:	2b00      	cmp	r3, #0
 8000922:	d115      	bne.n	8000950 <main+0x98>

		snake_haseaten(&snake, &food);
 8000924:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8000928:	463b      	mov	r3, r7
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f010 fce5 	bl	80112fc <snake_haseaten>
		snake_display(&snake);
 8000932:	463b      	mov	r3, r7
 8000934:	4618      	mov	r0, r3
 8000936:	f010 fa5b 	bl	8010df0 <snake_display>
		snake_place_food(&snake, &food, gPrgCycle);
 800093a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800093e:	463b      	mov	r3, r7
 8000940:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000944:	4618      	mov	r0, r3
 8000946:	f010 fc9f 	bl	8011288 <snake_place_food>

		MX_LWIP_Process();
 800094a:	f005 f905 	bl	8005b58 <MX_LWIP_Process>
		snake_control(&snake);
 800094e:	e7dc      	b.n	800090a <main+0x52>
		if (snake.state != PLAYING) break;
 8000950:	bf00      	nop
  {
 8000952:	e7c4      	b.n	80008de <main+0x26>

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	; 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f016 f9d0 	bl	8016d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000978:	f002 fb6e 	bl	8003058 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <SystemClock_Config+0xd8>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClock_Config+0xd8>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xd8>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <SystemClock_Config+0xdc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <SystemClock_Config+0xdc>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xdc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009c4:	23d8      	movs	r3, #216	; 0xd8
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fb9d 	bl	8003118 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e4:	f000 f83c 	bl	8000a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e8:	f002 fb46 	bl	8003078 <HAL_PWREx_EnableOverDrive>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009f2:	f000 f835 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2107      	movs	r1, #7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fe2d 	bl	8003674 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a20:	f000 f81e 	bl	8000a60 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <_write>:

/* USER CODE BEGIN 4 */
/*printf <=> uart redirection */
int _write(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <_write+0x28>)
 8000a4c:	f003 fc8a 	bl	8004364 <HAL_UART_Transmit>
	return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000026c 	.word	0x2000026c

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f9ca 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <USART3_IRQHandler+0x10>)
 8000b0e:	f003 fd0b 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000026c 	.word	0x2000026c

08000b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	return 1;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_kill>:

int _kill(int pid, int sig)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <_kill+0x20>)
 8000b38:	2216      	movs	r2, #22
 8000b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200069a4 	.word	0x200069a4

08000b50 <_exit>:

void _exit (int status)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ffe5 	bl	8000b2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b62:	e7fe      	b.n	8000b62 <_exit+0x12>

08000b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
	}

return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d205      	bcs.n	8000c44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <_sbrk+0x6c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20080000 	.word	0x20080000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000098 	.word	0x20000098
 8000c70:	200069b8 	.word	0x200069b8
 8000c74:	200069a4 	.word	0x200069a4

08000c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART3_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ce0:	f003 faf2 	bl	80042c8 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f7ff feb9 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000026c 	.word	0x2000026c
 8000cf8:	40004800 	.word	0x40004800

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ae      	sub	sp, #184	; 0xb8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2290      	movs	r2, #144	; 0x90
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f015 fff3 	bl	8016d08 <memset>
  if(uartHandle->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d144      	bne.n	8000db6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fe9c 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d46:	f7ff fe8b 	bl	8000a60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0xc8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <HAL_UART_MspInit+0xcc>)
 8000da2:	f001 ff93 	bl	8002ccc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2027      	movs	r0, #39	; 0x27
 8000dac:	f000 fdc1 	bl	8001932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000db0:	2027      	movs	r0, #39	; 0x27
 8000db2:	f000 fdda 	bl	800196a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	37b8      	adds	r7, #184	; 0xb8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ff3f 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f015 ff45 	bl	8016c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fd5b 	bl	80008b8 <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e10:	0801b018 	.word	0x0801b018
  ldr r2, =_sbss
 8000e14:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e18:	200069b4 	.word	0x200069b4

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>

08000e1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e22:	2003      	movs	r0, #3
 8000e24:	f000 fd7a 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f805 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2e:	f7ff fe1d 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fd95 	bl	8001986 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 fd5d 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200002f0 	.word	0x200002f0

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200002f0 	.word	0x200002f0

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e031      	b.n	8000f9a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d109      	bne.n	8000f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fb9c 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d116      	bne.n	8000f8c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_ADC_Init+0x84>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	f043 0202 	orr.w	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fb0a 	bl	8001588 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8a:	e001      	b.n	8000f90 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	ffffeefd 	.word	0xffffeefd

08000fa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Start+0x1a>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e0ad      	b.n	800111e <HAL_ADC_Start+0x176>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d018      	beq.n	800100a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000fe8:	4b50      	ldr	r3, [pc, #320]	; (800112c <HAL_ADC_Start+0x184>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_ADC_Start+0x188>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9a      	lsrs	r2, r3, #18
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3b01      	subs	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f9      	bne.n	8000ffe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d175      	bne.n	8001104 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <HAL_ADC_Start+0x18c>)
 800101e:	4013      	ands	r3, r2
 8001020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800103e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001052:	d106      	bne.n	8001062 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f023 0206 	bic.w	r2, r3, #6
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
 8001060:	e002      	b.n	8001068 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001078:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_ADC_Start+0x190>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d143      	bne.n	800111c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e03a      	b.n	800111c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a24      	ldr	r2, [pc, #144]	; (800113c <HAL_ADC_Start+0x194>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d10e      	bne.n	80010ce <HAL_ADC_Start+0x126>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010cc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_ADC_Start+0x190>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d120      	bne.n	800111c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <HAL_ADC_Start+0x198>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d11b      	bne.n	800111c <HAL_ADC_Start+0x174>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	e00b      	b.n	800111c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 0210 	orr.w	r2, r3, #16
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	fffff8fe 	.word	0xfffff8fe
 8001138:	40012300 	.word	0x40012300
 800113c:	40012000 	.word	0x40012000
 8001140:	40012200 	.word	0x40012200

08001144 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Stop+0x16>
 8001156:	2302      	movs	r3, #2
 8001158:	e01f      	b.n	800119a <HAL_ADC_Stop+0x56>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_ADC_Stop+0x64>)
 8001186:	4013      	ands	r3, r2
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	ffffeefe 	.word	0xffffeefe

080011ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c8:	d113      	bne.n	80011f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d8:	d10b      	bne.n	80011f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f043 0220 	orr.w	r2, r3, #32
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e063      	b.n	80012ba <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011f2:	f7ff fe65 	bl	8000ec0 <HAL_GetTick>
 80011f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f8:	e021      	b.n	800123e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d01d      	beq.n	800123e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <HAL_ADC_PollForConversion+0x6c>
 8001208:	f7ff fe5a 	bl	8000ec0 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d212      	bcs.n	800123e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d00b      	beq.n	800123e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f043 0204 	orr.w	r2, r3, #4
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e03d      	b.n	80012ba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b02      	cmp	r3, #2
 800124a:	d1d6      	bne.n	80011fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0212 	mvn.w	r2, #18
 8001254:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d123      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d11f      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e136      	b.n	8001566 <HAL_ADC_ConfigChannel+0x28a>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d93a      	bls.n	800137e <HAL_ADC_ConfigChannel+0xa2>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001310:	d035      	beq.n	800137e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	3b1e      	subs	r3, #30
 8001328:	2207      	movs	r2, #7
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a8d      	ldr	r2, [pc, #564]	; (8001574 <HAL_ADC_ConfigChannel+0x298>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10a      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	061a      	lsls	r2, r3, #24
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001356:	e035      	b.n	80013c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68d9      	ldr	r1, [r3, #12]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	4603      	mov	r3, r0
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4403      	add	r3, r0
 8001370:	3b1e      	subs	r3, #30
 8001372:	409a      	lsls	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800137c:	e022      	b.n	80013c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6919      	ldr	r1, [r3, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	2207      	movs	r2, #7
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6919      	ldr	r1, [r3, #16]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	4603      	mov	r3, r0
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4403      	add	r3, r0
 80013ba:	409a      	lsls	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d824      	bhi.n	8001416 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	221f      	movs	r2, #31
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43da      	mvns	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	400a      	ands	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b05      	subs	r3, #5
 8001408:	fa00 f203 	lsl.w	r2, r0, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
 8001414:	e04c      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d824      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b23      	subs	r3, #35	; 0x23
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b23      	subs	r3, #35	; 0x23
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
 8001466:	e023      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b41      	subs	r3, #65	; 0x41
 800147a:	221f      	movs	r2, #31
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43da      	mvns	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	400a      	ands	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b41      	subs	r3, #65	; 0x41
 80014a4:	fa00 f203 	lsl.w	r2, r0, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_ADC_ConfigChannel+0x29c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10a      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1f4>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a2c      	ldr	r2, [pc, #176]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a28      	ldr	r2, [pc, #160]	; (8001578 <HAL_ADC_ConfigChannel+0x29c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10f      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d10b      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 80014f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_ADC_ConfigChannel+0x29c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d12b      	bne.n	800155c <HAL_ADC_ConfigChannel+0x280>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_ADC_ConfigChannel+0x298>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x23a>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b11      	cmp	r3, #17
 8001514:	d122      	bne.n	800155c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 800151c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001520:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_ADC_ConfigChannel+0x2a0>)
 8001528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800152c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_ADC_ConfigChannel+0x298>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_ADC_ConfigChannel+0x2a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_ADC_ConfigChannel+0x2a8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9a      	lsrs	r2, r3, #18
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800154e:	e002      	b.n	8001556 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f9      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	10000012 	.word	0x10000012
 8001578:	40012000 	.word	0x40012000
 800157c:	40012300 	.word	0x40012300
 8001580:	20000000 	.word	0x20000000
 8001584:	431bde83 	.word	0x431bde83

08001588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001590:	4b78      	ldr	r3, [pc, #480]	; (8001774 <ADC_Init+0x1ec>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a77      	ldr	r2, [pc, #476]	; (8001774 <ADC_Init+0x1ec>)
 8001596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800159a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800159c:	4b75      	ldr	r3, [pc, #468]	; (8001774 <ADC_Init+0x1ec>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4973      	ldr	r1, [pc, #460]	; (8001774 <ADC_Init+0x1ec>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6899      	ldr	r1, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	4a58      	ldr	r2, [pc, #352]	; (8001778 <ADC_Init+0x1f0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d022      	beq.n	8001662 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800162a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6899      	ldr	r1, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800164c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6899      	ldr	r1, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e00f      	b.n	8001682 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001680:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0202 	bic.w	r2, r2, #2
 8001690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6899      	ldr	r1, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	005a      	lsls	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6859      	ldr	r1, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	3b01      	subs	r3, #1
 80016dc:	035a      	lsls	r2, r3, #13
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e007      	b.n	80016f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	3b01      	subs	r3, #1
 8001714:	051a      	lsls	r2, r3, #20
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800172c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173a:	025a      	lsls	r2, r3, #9
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	029a      	lsls	r2, r3, #10
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	609a      	str	r2, [r3, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40012300 	.word	0x40012300
 8001778:	0f000001 	.word	0x0f000001

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	05fa0000 	.word	0x05fa0000

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff29 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff3e 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff31 	bl	80017e0 <__NVIC_EnableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffa2 	bl	80018d8 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fa88 	bl	8000ec0 <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d008      	beq.n	80019d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e052      	b.n	8001a76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0216 	bic.w	r2, r2, #22
 80019de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <HAL_DMA_Abort+0x62>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0208 	bic.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a20:	e013      	b.n	8001a4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a22:	f7ff fa4d 	bl	8000ec0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d90c      	bls.n	8001a4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e015      	b.n	8001a76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e4      	bne.n	8001a22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	223f      	movs	r2, #63	; 0x3f
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00c      	b.n	8001ab6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001ad4:	4ba9      	ldr	r3, [pc, #676]	; (8001d7c <HAL_ETH_Init+0x2b8>)
 8001ad6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e181      	b.n	8001dee <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f004 f836 	bl	8005b70 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b04:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <HAL_ETH_Init+0x2bc>)
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	4a9d      	ldr	r2, [pc, #628]	; (8001d80 <HAL_ETH_Init+0x2bc>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b10:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_ETH_Init+0x2bc>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b1c:	4b99      	ldr	r3, [pc, #612]	; (8001d84 <HAL_ETH_Init+0x2c0>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a98      	ldr	r2, [pc, #608]	; (8001d84 <HAL_ETH_Init+0x2c0>)
 8001b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b26:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b28:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <HAL_ETH_Init+0x2c0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4994      	ldr	r1, [pc, #592]	; (8001d84 <HAL_ETH_Init+0x2c0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4e:	f7ff f9b7 	bl	8000ec0 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b54:	e011      	b.n	8001b7a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001b56:	f7ff f9b3 	bl	8000ec0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b64:	d909      	bls.n	8001b7a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e139      	b.n	8001dee <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e4      	bne.n	8001b56 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f023 031c 	bic.w	r3, r3, #28
 8001b9a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b9c:	f001 ff38 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8001ba0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4a78      	ldr	r2, [pc, #480]	; (8001d88 <HAL_ETH_Init+0x2c4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d908      	bls.n	8001bbc <HAL_ETH_Init+0xf8>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4a77      	ldr	r2, [pc, #476]	; (8001d8c <HAL_ETH_Init+0x2c8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d804      	bhi.n	8001bbc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e027      	b.n	8001c0c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4a73      	ldr	r2, [pc, #460]	; (8001d8c <HAL_ETH_Init+0x2c8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d908      	bls.n	8001bd6 <HAL_ETH_Init+0x112>
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4a6d      	ldr	r2, [pc, #436]	; (8001d7c <HAL_ETH_Init+0x2b8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d204      	bcs.n	8001bd6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f043 030c 	orr.w	r3, r3, #12
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	e01a      	b.n	8001c0c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	; (8001d7c <HAL_ETH_Init+0x2b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d303      	bcc.n	8001be6 <HAL_ETH_Init+0x122>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <HAL_ETH_Init+0x2cc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d911      	bls.n	8001c0a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4a69      	ldr	r2, [pc, #420]	; (8001d90 <HAL_ETH_Init+0x2cc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d908      	bls.n	8001c00 <HAL_ETH_Init+0x13c>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4a68      	ldr	r2, [pc, #416]	; (8001d94 <HAL_ETH_Init+0x2d0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d804      	bhi.n	8001c00 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e005      	b.n	8001c0c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	e000      	b.n	8001c0c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c0a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c18:	2100      	movs	r1, #0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fb98 	bl	8002350 <HAL_ETH_WritePHYRegister>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c2a:	6939      	ldr	r1, [r7, #16]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fd4d 	bl	80026cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0d7      	b.n	8001dee <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c3e:	20ff      	movs	r0, #255	; 0xff
 8001c40:	f7ff f94a 	bl	8000ed8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a5 	beq.w	8001d98 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c4e:	f7ff f937 	bl	8000ec0 <HAL_GetTick>
 8001c52:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fb0f 	bl	8002280 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001c62:	f7ff f92d 	bl	8000ec0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d90f      	bls.n	8001c94 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fd26 	bl	80026cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0ac      	b.n	8001dee <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0da      	beq.n	8001c54 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fb53 	bl	8002350 <HAL_ETH_WritePHYRegister>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fd08 	bl	80026cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e092      	b.n	8001dee <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f8fa 	bl	8000ec0 <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fad2 	bl	8002280 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001cdc:	f7ff f8f0 	bl	8000ec0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d90f      	bls.n	8001d0e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001cf2:	6939      	ldr	r1, [r7, #16]
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fce9 	bl	80026cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e06f      	b.n	8001dee <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0da      	beq.n	8001cce <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2110      	movs	r1, #16
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 faad 	bl	8002280 <HAL_ETH_ReadPHYRegister>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fcca 	bl	80026cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d40:	2301      	movs	r3, #1
 8001d42:	e054      	b.n	8001dee <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	e002      	b.n	8001d5e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	e035      	b.n	8001ddc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e030      	b.n	8001ddc <HAL_ETH_Init+0x318>
 8001d7a:	bf00      	nop
 8001d7c:	03938700 	.word	0x03938700
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40013800 	.word	0x40013800
 8001d88:	01312cff 	.word	0x01312cff
 8001d8c:	02160ebf 	.word	0x02160ebf
 8001d90:	05f5e0ff 	.word	0x05f5e0ff
 8001d94:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 facd 	bl	8002350 <HAL_ETH_WritePHYRegister>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fc82 	bl	80026cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e00c      	b.n	8001dee <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001dd4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001dd8:	f7ff f87e 	bl	8000ed8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc74 	bl	80026cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ETH_DMATxDescListInit+0x20>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e052      	b.n	8001ebe <HAL_ETH_DMATxDescListInit+0xc6>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e030      	b.n	8001e96 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e44:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e002      	b.n	8001e90 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3ca      	bcc.n	8001e34 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ea8:	440b      	add	r3, r1
 8001eaa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ETH_DMARxDescListInit+0x20>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e056      	b.n	8001f98 <HAL_ETH_DMARxDescListInit+0xce>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e034      	b.n	8001f70 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	015b      	lsls	r3, r3, #5
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f1e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d208      	bcs.n	8001f64 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e002      	b.n	8001f6a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3c6      	bcc.n	8001f06 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001f82:	440b      	add	r3, r1
 8001f84:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ETH_TransmitFrame+0x24>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0cd      	b.n	8002164 <HAL_ETH_TransmitFrame+0x1c0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0b8      	b.n	8002164 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da09      	bge.n	8002010 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2212      	movs	r2, #18
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0a9      	b.n	8002164 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002016:	4293      	cmp	r3, r2
 8002018:	d915      	bls.n	8002046 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_ETH_TransmitFrame+0x1cc>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a9b      	lsrs	r3, r3, #10
 8002024:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_ETH_TransmitFrame+0x1cc>)
 800202a:	fba3 1302 	umull	r1, r3, r3, r2
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e001      	b.n	800204a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d11c      	bne.n	800208a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800205e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800206a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800207a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
 8002088:	e04b      	b.n	8002122 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e044      	b.n	800211a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800209e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d107      	bne.n	80020b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020b4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020be:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d116      	bne.n	80020f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80020d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_ETH_TransmitFrame+0x1d0>)
 80020de:	fb02 f203 	mul.w	r2, r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80020ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80020f6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002106:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3301      	adds	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3b6      	bcc.n	8002090 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f241 0314 	movw	r3, #4116	; 0x1014
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	f241 0314 	movw	r3, #4116	; 0x1014
 800213e:	4413      	add	r3, r2
 8002140:	2204      	movs	r2, #4
 8002142:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f241 0304 	movw	r3, #4100	; 0x1004
 800214c:	4413      	add	r3, r2
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	ac02b00b 	.word	0xac02b00b
 8002174:	fffffa0c 	.word	0xfffffa0c

08002178 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ETH_GetReceivedFrame+0x1a>
 800218e:	2302      	movs	r3, #2
 8002190:	e070      	b.n	8002274 <HAL_ETH_GetReceivedFrame+0xfc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db5a      	blt.n	8002262 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d030      	beq.n	800221c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d103      	bne.n	80021d4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80021e8:	3b04      	subs	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e02b      	b.n	8002274 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
 800224a:	e00a      	b.n	8002262 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b82      	cmp	r3, #130	; 0x82
 80022a0:	d101      	bne.n	80022a6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e050      	b.n	8002348 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2282      	movs	r2, #130	; 0x82
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022f2:	f7fe fde5 	bl	8000ec0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022f8:	e015      	b.n	8002326 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80022fa:	f7fe fde1 	bl	8000ec0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d309      	bcc.n	800231e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e014      	b.n	8002348 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e4      	bne.n	80022fa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	460b      	mov	r3, r1
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b42      	cmp	r3, #66	; 0x42
 8002370:	d101      	bne.n	8002376 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	e04e      	b.n	8002414 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2242      	movs	r2, #66	; 0x42
 800237a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 031c 	and.w	r3, r3, #28
 800238c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8a1b      	ldrh	r3, [r3, #16]
 8002392:	02db      	lsls	r3, r3, #11
 8002394:	b29b      	uxth	r3, r3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800239c:	897b      	ldrh	r3, [r7, #10]
 800239e:	019b      	lsls	r3, r3, #6
 80023a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80023cc:	f7fe fd78 	bl	8000ec0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023d2:	e015      	b.n	8002400 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80023d4:	f7fe fd74 	bl	8000ec0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d309      	bcc.n	80023f8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e00d      	b.n	8002414 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1e4      	bne.n	80023d4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ETH_Start+0x16>
 800242e:	2302      	movs	r3, #2
 8002430:	e01f      	b.n	8002472 <HAL_ETH_Start+0x56>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb44 	bl	8002ad0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fb7b 	bl	8002b44 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fc12 	bl	8002c78 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fbaf 	bl	8002bb8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fbdc 	bl	8002c18 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ETH_Stop+0x16>
 800248c:	2302      	movs	r3, #2
 800248e:	e01f      	b.n	80024d0 <HAL_ETH_Stop+0x56>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fba1 	bl	8002be8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fbce 	bl	8002c48 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb66 	bl	8002b7e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fbe0 	bl	8002c78 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fb26 	bl	8002b0a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ETH_ConfigMAC+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0e4      	b.n	80026be <HAL_ETH_ConfigMAC+0x1e6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80b1 	beq.w	800266e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4b6c      	ldr	r3, [pc, #432]	; (80026c8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002524:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800252a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002530:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002536:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800253c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002542:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002548:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800254e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002554:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800255a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002560:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002566:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fcaa 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002594:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800259a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80025a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80025a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80025ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80025be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80025c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7fe fc84 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002608:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800260e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002614:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800261a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002620:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002638:	2001      	movs	r0, #1
 800263a:	f7fe fc4d 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800265e:	2001      	movs	r0, #1
 8002660:	f7fe fc3a 	bl	8000ed8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	61da      	str	r2, [r3, #28]
 800266c:	e01e      	b.n	80026ac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800267c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe fc1a 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	ff20810f 	.word	0xff20810f

080026cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0b0      	sub	sp, #192	; 0xc0
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80026fa:	2300      	movs	r3, #0
 80026fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002716:	663b      	str	r3, [r7, #96]	; 0x60
 8002718:	e001      	b.n	800271e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800271e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002728:	2300      	movs	r3, #0
 800272a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002738:	2340      	movs	r3, #64	; 0x40
 800273a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80027a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a4:	4bab      	ldr	r3, [pc, #684]	; (8002a54 <ETH_MACDMAConfig+0x388>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80027ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80027b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80027b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80027b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80027be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80027c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80027c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80027c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80027cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80027d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80027d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80027d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80027d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80027d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80027dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80027de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80027e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002800:	2001      	movs	r0, #1
 8002802:	f7fe fb69 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800280e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002810:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002814:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002818:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800281a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800281e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002824:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800282a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800282c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002830:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002834:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800283c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800283e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800284a:	2001      	movs	r0, #1
 800284c:	f7fe fb44 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002858:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002862:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800286c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002878:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800287c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002880:	4013      	ands	r3, r2
 8002882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800288a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800288c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002890:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002896:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800289c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800289e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80028a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80028a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80028a8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80028aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f7fe fb05 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80028dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7fe faf0 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002900:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002914:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002926:	2304      	movs	r3, #4
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800292a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800293c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002946:	2300      	movs	r3, #0
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800294a:	2300      	movs	r3, #0
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f241 0318 	movw	r3, #4120	; 0x1018
 8002956:	4413      	add	r3, r2
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800295e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <ETH_MACDMAConfig+0x38c>)
 8002964:	4013      	ands	r3, r2
 8002966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800296a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800296c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800296e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002970:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002972:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002974:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002976:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002978:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800297a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800297c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800297e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002980:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002982:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002986:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800298a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800298c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f241 0318 	movw	r3, #4120	; 0x1018
 800299e:	4413      	add	r3, r2
 80029a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80029ae:	4413      	add	r3, r2
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe fa8e 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80029c4:	4413      	add	r3, r2
 80029c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80029d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80029da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80029dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80029de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80029e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80029e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80029e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7fe fa67 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a16:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6811      	ldr	r1, [r2, #0]
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <ETH_MACDMAConfig+0x390>)
 8002a32:	431a      	orrs	r2, r3
 8002a34:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a38:	440b      	add	r3, r1
 8002a3a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	461a      	mov	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f80b 	bl	8002a60 <ETH_MACAddressConfig>
}
 8002a4a:	bf00      	nop
 8002a4c:	37c0      	adds	r7, #192	; 0xc0
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	ff20810f 	.word	0xff20810f
 8002a58:	f8de3f23 	.word	0xf8de3f23
 8002a5c:	00010040 	.word	0x00010040

08002a60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3305      	adds	r3, #5
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	3204      	adds	r2, #4
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <ETH_MACAddressConfig+0x68>)
 8002a82:	4413      	add	r3, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3303      	adds	r3, #3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	061a      	lsls	r2, r3, #24
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3302      	adds	r3, #2
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <ETH_MACAddressConfig+0x6c>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40028040 	.word	0x40028040
 8002acc:	40028044 	.word	0x40028044

08002ad0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fe f9ef 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f7fe f9d2 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0204 	orr.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7fe f9b5 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0204 	bic.w	r2, r2, #4
 8002b98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7fe f998 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bc8:	4413      	add	r3, r2
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bd4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bd8:	440b      	add	r3, r1
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bf8:	4413      	add	r3, r2
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6811      	ldr	r1, [r2, #0]
 8002c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c08:	440b      	add	r3, r1
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c38:	440b      	add	r3, r1
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6811      	ldr	r1, [r2, #0]
 8002c60:	f023 0202 	bic.w	r2, r3, #2
 8002c64:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c68:	440b      	add	r3, r1
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6811      	ldr	r1, [r2, #0]
 8002c94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c98:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c9c:	440b      	add	r3, r1
 8002c9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ca8:	4413      	add	r3, r2
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fe f912 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cbe:	440b      	add	r3, r1
 8002cc0:	601a      	str	r2, [r3, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e175      	b.n	8002fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 8164 	bne.w	8002fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_GPIO_Init+0x56>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d123      	bne.n	8002e14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80be 	beq.w	8002fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e6e:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <HAL_GPIO_Init+0x328>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_GPIO_Init+0x32c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d037      	beq.n	8002f0a <HAL_GPIO_Init+0x23e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_GPIO_Init+0x330>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_GPIO_Init+0x23a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_GPIO_Init+0x334>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <HAL_GPIO_Init+0x236>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a55      	ldr	r2, [pc, #340]	; (8003004 <HAL_GPIO_Init+0x338>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x232>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a54      	ldr	r2, [pc, #336]	; (8003008 <HAL_GPIO_Init+0x33c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a53      	ldr	r2, [pc, #332]	; (800300c <HAL_GPIO_Init+0x340>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x22a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_GPIO_Init+0x344>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_GPIO_Init+0x348>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_GPIO_Init+0x34c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_GPIO_Init+0x350>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x21a>
 8002ee2:	2309      	movs	r3, #9
 8002ee4:	e012      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	e010      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002eea:	2308      	movs	r3, #8
 8002eec:	e00e      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002eee:	2307      	movs	r3, #7
 8002ef0:	e00c      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ef2:	2306      	movs	r3, #6
 8002ef4:	e00a      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	e008      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002efa:	2304      	movs	r3, #4
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002efe:	2303      	movs	r3, #3
 8002f00:	e004      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e002      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	4093      	lsls	r3, r2
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f1c:	4935      	ldr	r1, [pc, #212]	; (8002ff4 <HAL_GPIO_Init+0x328>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4e:	4a34      	ldr	r2, [pc, #208]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f78:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f67f ae86 	bls.w	8002cec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	40020400 	.word	0x40020400
 8003000:	40020800 	.word	0x40020800
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40021000 	.word	0x40021000
 800300c:	40021400 	.word	0x40021400
 8003010:	40021800 	.word	0x40021800
 8003014:	40021c00 	.word	0x40021c00
 8003018:	40022000 	.word	0x40022000
 800301c:	40022400 	.word	0x40022400
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000

08003078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a6:	f7fd ff0b 	bl	8000ec0 <HAL_GetTick>
 80030aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ac:	e009      	b.n	80030c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ae:	f7fd ff07 	bl	8000ec0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030bc:	d901      	bls.n	80030c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e022      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d1ee      	bne.n	80030ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7fd fef0 	bl	8000ec0 <HAL_GetTick>
 80030e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e2:	e009      	b.n	80030f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e4:	f7fd feec 	bl	8000ec0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e007      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003104:	d1ee      	bne.n	80030e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e29b      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8087 	beq.w	800324a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313c:	4b96      	ldr	r3, [pc, #600]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00c      	beq.n	8003162 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003148:	4b93      	ldr	r3, [pc, #588]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0x62>
 8003154:	4b90      	ldr	r3, [pc, #576]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003160:	d10b      	bne.n	800317a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d06c      	beq.n	8003248 <HAL_RCC_OscConfig+0x130>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d168      	bne.n	8003248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e275      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x7a>
 8003184:	4b84      	ldr	r3, [pc, #528]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a83      	ldr	r2, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e02e      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x9c>
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7b      	ldr	r2, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0xc0>
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a72      	ldr	r2, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b6c      	ldr	r3, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6b      	ldr	r2, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd fe62 	bl	8000ec0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fe5e 	bl	8000ec0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e229      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xe8>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd fe4e 	bl	8000ec0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fd fe4a 	bl	8000ec0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e215      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x110>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d069      	beq.n	800332a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003256:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x190>
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x17a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1e9      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	493d      	ldr	r1, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e040      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fe00 	bl	8000ec0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fd fdfc 	bl	8000ec0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1c7      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4929      	ldr	r1, [pc, #164]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
 80032f6:	e018      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd fddc 	bl	8000ec0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fd fdd8 	bl	8000ec0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1a3      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d038      	beq.n	80033a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d019      	beq.n	8003372 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fd fdb9 	bl	8000ec0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003352:	f7fd fdb5 	bl	8000ec0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e180      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x23a>
 8003370:	e01a      	b.n	80033a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fd fd9f 	bl	8000ec0 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003386:	f7fd fd9b 	bl	8000ec0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d903      	bls.n	800339c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e166      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
 8003398:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	4b92      	ldr	r3, [pc, #584]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a4 	beq.w	80034fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a88      	ldr	r2, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ea:	4b80      	ldr	r3, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7f      	ldr	r2, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fd63 	bl	8000ec0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fd fd5f 	bl	8000ec0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e12a      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x31a>
 8003424:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e02d      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x33c>
 800343a:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e01c      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10c      	bne.n	8003476 <HAL_RCC_OscConfig+0x35e>
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
 8003468:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a5e      	ldr	r2, [pc, #376]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd fd13 	bl	8000ec0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fd fd0f 	bl	8000ec0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0d8      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RCC_OscConfig+0x386>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fd fcfd 	bl	8000ec0 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fd fcf9 	bl	8000ec0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0c2      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80ae 	beq.w	8003664 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003508:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d06d      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d14b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fcca 	bl	8000ec0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd fcc6 	bl	8000ec0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e091      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	3b01      	subs	r3, #1
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	491b      	ldr	r1, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fc98 	bl	8000ec0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd fc94 	bl	8000ec0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e05f      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x47c>
 80035b2:	e057      	b.n	8003664 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fc7e 	bl	8000ec0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fc7a 	bl	8000ec0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e045      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b0>
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x54c>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_RCC_OscConfig+0x558>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d030      	beq.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d129      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d122      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003628:	4293      	cmp	r3, r2
 800362a:	d119      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	3b01      	subs	r3, #1
 800363a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d10f      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d0      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d910      	bls.n	80036bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	4965      	ldr	r1, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d040      	beq.n	8003798 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d115      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e073      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06b      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4936      	ldr	r1, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fd fbaa 	bl	8000ec0 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fba6 	bl	8000ec0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e053      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d210      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 020f 	bic.w	r2, r3, #15
 80037ae:	4922      	ldr	r1, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1cc>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1d0>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fb06 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	0801a8bc 	.word	0x0801a8bc
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003864:	4b67      	ldr	r3, [pc, #412]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d00d      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x40>
 8003870:	2b08      	cmp	r3, #8
 8003872:	f200 80bd 	bhi.w	80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x34>
 800387a:	2b04      	cmp	r3, #4
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x3a>
 800387e:	e0b7      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003882:	60bb      	str	r3, [r7, #8]
      break;
 8003884:	e0b7      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003886:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003888:	60bb      	str	r3, [r7, #8]
      break;
 800388a:	e0b4      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388c:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003894:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04d      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b58      	ldr	r3, [pc, #352]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	461a      	mov	r2, r3
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	ea02 0800 	and.w	r8, r2, r0
 80038ba:	ea03 0901 	and.w	r9, r3, r1
 80038be:	4640      	mov	r0, r8
 80038c0:	4649      	mov	r1, r9
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	014b      	lsls	r3, r1, #5
 80038cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038d0:	0142      	lsls	r2, r0, #5
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	ebb0 0008 	subs.w	r0, r0, r8
 80038da:	eb61 0109 	sbc.w	r1, r1, r9
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ec:	0182      	lsls	r2, r0, #6
 80038ee:	1a12      	subs	r2, r2, r0
 80038f0:	eb63 0301 	sbc.w	r3, r3, r1
 80038f4:	f04f 0000 	mov.w	r0, #0
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	00d9      	lsls	r1, r3, #3
 80038fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003902:	00d0      	lsls	r0, r2, #3
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	eb12 0208 	adds.w	r2, r2, r8
 800390c:	eb43 0309 	adc.w	r3, r3, r9
 8003910:	f04f 0000 	mov.w	r0, #0
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	0259      	lsls	r1, r3, #9
 800391a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800391e:	0250      	lsls	r0, r2, #9
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	f7fc fcd6 	bl	80002e0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e04a      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	ea02 0400 	and.w	r4, r2, r0
 8003956:	ea03 0501 	and.w	r5, r3, r1
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	014b      	lsls	r3, r1, #5
 8003968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800396c:	0142      	lsls	r2, r0, #5
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	1b00      	subs	r0, r0, r4
 8003974:	eb61 0105 	sbc.w	r1, r1, r5
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	018b      	lsls	r3, r1, #6
 8003982:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003986:	0182      	lsls	r2, r0, #6
 8003988:	1a12      	subs	r2, r2, r0
 800398a:	eb63 0301 	sbc.w	r3, r3, r1
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	00d9      	lsls	r1, r3, #3
 8003998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800399c:	00d0      	lsls	r0, r2, #3
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	1912      	adds	r2, r2, r4
 80039a4:	eb45 0303 	adc.w	r3, r5, r3
 80039a8:	f04f 0000 	mov.w	r0, #0
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	0299      	lsls	r1, r3, #10
 80039b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039b6:	0290      	lsls	r0, r2, #10
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	f7fc fc8a 	bl	80002e0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	60bb      	str	r3, [r7, #8]
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039f2:	60bb      	str	r3, [r7, #8]
      break;
 80039f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f6:	68bb      	ldr	r3, [r7, #8]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0801a8cc 	.word	0x0801a8cc

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	0801a8cc 	.word	0x0801a8cc

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa0:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	4964      	ldr	r1, [pc, #400]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad2:	4b5d      	ldr	r3, [pc, #372]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	4959      	ldr	r1, [pc, #356]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	494a      	ldr	r1, [pc, #296]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 808b 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a39      	ldr	r2, [pc, #228]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
 8003b68:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd f99e 	bl	8000ec0 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd f99a 	bl	8000ec0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e38f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d035      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d02e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d114      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f962 	bl	8000ec0 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd f95e 	bl	8000ec0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e351      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	4901      	ldr	r1, [pc, #4]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	0ffffcff 	.word	0x0ffffcff
 8003c54:	4bb3      	ldr	r3, [pc, #716]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4ab2      	ldr	r2, [pc, #712]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	4bb0      	ldr	r3, [pc, #704]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	49ad      	ldr	r1, [pc, #692]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c7e:	4ba9      	ldr	r3, [pc, #676]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c84:	4aa7      	ldr	r2, [pc, #668]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c8e:	4ba5      	ldr	r3, [pc, #660]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	49a2      	ldr	r1, [pc, #648]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cac:	4b9d      	ldr	r3, [pc, #628]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cba:	499a      	ldr	r1, [pc, #616]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cce:	4b95      	ldr	r3, [pc, #596]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cdc:	4991      	ldr	r1, [pc, #580]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf0:	4b8c      	ldr	r3, [pc, #560]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfe:	4989      	ldr	r1, [pc, #548]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d12:	4b84      	ldr	r3, [pc, #528]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4980      	ldr	r1, [pc, #512]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d34:	4b7b      	ldr	r3, [pc, #492]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	4978      	ldr	r1, [pc, #480]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d56:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f023 020c 	bic.w	r2, r3, #12
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	496f      	ldr	r1, [pc, #444]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d78:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4967      	ldr	r1, [pc, #412]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d9a:	4b62      	ldr	r3, [pc, #392]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	495e      	ldr	r1, [pc, #376]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	4956      	ldr	r1, [pc, #344]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dde:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e00:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	4945      	ldr	r1, [pc, #276]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e22:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	493c      	ldr	r1, [pc, #240]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e44:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	4934      	ldr	r1, [pc, #208]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	492b      	ldr	r1, [pc, #172]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed8:	4912      	ldr	r1, [pc, #72]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	4909      	ldr	r1, [pc, #36]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	4986      	ldr	r1, [pc, #536]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f3c:	4b81      	ldr	r3, [pc, #516]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	497d      	ldr	r1, [pc, #500]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d006      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80d6 	beq.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f68:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a75      	ldr	r2, [pc, #468]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7fc ffa4 	bl	8000ec0 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f7c:	f7fc ffa0 	bl	8000ec0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e195      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d021      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11d      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fbc:	4b61      	ldr	r3, [pc, #388]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	019a      	lsls	r2, r3, #6
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4958      	ldr	r1, [pc, #352]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004014:	d129      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004016:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004024:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0f1b      	lsrs	r3, r3, #28
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	061b      	lsls	r3, r3, #24
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	493e      	ldr	r1, [pc, #248]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004052:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004058:	f023 021f 	bic.w	r2, r3, #31
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	3b01      	subs	r3, #1
 8004062:	4938      	ldr	r1, [pc, #224]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01d      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004076:	4b33      	ldr	r3, [pc, #204]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407c:	0e1b      	lsrs	r3, r3, #24
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004084:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408a:	0f1b      	lsrs	r3, r3, #28
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	019a      	lsls	r2, r3, #6
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	4926      	ldr	r1, [pc, #152]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	019a      	lsls	r2, r3, #6
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	491a      	ldr	r1, [pc, #104]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ee:	f7fc fee7 	bl	8000ec0 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040f6:	f7fc fee3 	bl	8000ec0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	; 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0d8      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 80ce 	bne.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fc feca 	bl	8000ec0 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004130:	f7fc fec6 	bl	8000ec0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d904      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0bb      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004148:	4b5e      	ldr	r3, [pc, #376]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004154:	d0ec      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02e      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d12a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800417e:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800418c:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	0f1b      	lsrs	r3, r3, #28
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	019a      	lsls	r2, r3, #6
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	071b      	lsls	r3, r3, #28
 80041b2:	4944      	ldr	r1, [pc, #272]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	493d      	ldr	r1, [pc, #244]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e8:	d11d      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	0e1b      	lsrs	r3, r3, #24
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f8:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	0f1b      	lsrs	r3, r3, #28
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	019a      	lsls	r2, r3, #6
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	4929      	ldr	r1, [pc, #164]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	0e1b      	lsrs	r3, r3, #24
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4917      	ldr	r1, [pc, #92]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4911      	ldr	r1, [pc, #68]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fc fe16 	bl	8000ec0 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004298:	f7fc fe12 	bl	8000ec0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e007      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b6:	d1ef      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e040      	b.n	800435c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc fd06 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fc18 	bl	8004b3c <UART_SetConfig>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e022      	b.n	800435c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fe6e 	bl	8005000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fef5 	bl	8005144 <UART_CheckIdleState>
 800435a:	4603      	mov	r3, r0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004378:	2b20      	cmp	r3, #32
 800437a:	f040 8081 	bne.w	8004480 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_Transmit+0x26>
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e079      	b.n	8004482 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x38>
 8004398:	2302      	movs	r3, #2
 800439a:	e072      	b.n	8004482 <HAL_UART_Transmit+0x11e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b2:	f7fc fd85 	bl	8000ec0 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d108      	bne.n	80043e4 <HAL_UART_Transmit+0x80>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e003      	b.n	80043ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043f4:	e02c      	b.n	8004450 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fee8 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e038      	b.n	8004482 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3302      	adds	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e007      	b.n	800443e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3301      	adds	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1cc      	bne.n	80043f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	2140      	movs	r1, #64	; 0x40
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 feb5 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e005      	b.n	8004482 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	; 0x28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449c:	2b20      	cmp	r3, #32
 800449e:	d13d      	bne.n	800451c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Receive_IT+0x22>
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e036      	b.n	800451e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Receive_IT+0x34>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e02f      	b.n	800451e <HAL_UART_Receive_IT+0x94>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	613b      	str	r3, [r7, #16]
   return(result);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	61bb      	str	r3, [r7, #24]
   return(result);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	461a      	mov	r2, r3
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 ff24 	bl	8005360 <UART_Start_Receive_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	e000      	b.n	800451e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3728      	adds	r7, #40	; 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	; 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800454e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004552:	f640 030f 	movw	r3, #2063	; 0x80f
 8004556:	4013      	ands	r3, r2
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800455c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d115      	bne.n	8004590 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 82a4 	beq.w	8004ace <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
      }
      return;
 800458e:	e29e      	b.n	8004ace <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8117 	beq.w	80047c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_UART_IRQHandler+0x298>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 810a 	beq.w	80047c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0xbc>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d011      	beq.n	8004614 <HAL_UART_IRQHandler+0xec>
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2202      	movs	r2, #2
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_UART_IRQHandler+0x11c>
 8004620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2204      	movs	r2, #4
 8004632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800465c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_UART_IRQHandler+0x18a>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 820a 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04f      	beq.n	80047aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fef2 	bl	80054f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d141      	bne.n	80047a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3308      	adds	r3, #8
 8004724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800474a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1d9      	bne.n	800471e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_UART_IRQHandler+0x29c>)
 8004778:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd f97d 	bl	8001a7e <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00f      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9ae 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00b      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9aa 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e007      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9a6 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80047b8:	e18b      	b.n	8004ad2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ba:	bf00      	nop
    return;
 80047bc:	e189      	b.n	8004ad2 <HAL_UART_IRQHandler+0x5aa>
 80047be:	bf00      	nop
 80047c0:	04000120 	.word	0x04000120
 80047c4:	080055bb 	.word	0x080055bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 8144 	bne.w	8004a5a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 813d 	beq.w	8004a5a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8136 	beq.w	8004a5a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2210      	movs	r2, #16
 80047f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	f040 80b2 	bne.w	800496a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 815d 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004826:	429a      	cmp	r2, r3
 8004828:	f080 8155 	bcs.w	8004ad6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004840:	f000 8085 	beq.w	800494e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800486e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800487a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1da      	bne.n	8004844 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800489e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e1      	bne.n	800488e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004930:	65bb      	str	r3, [r7, #88]	; 0x58
 8004932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e4      	bne.n	800490e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd f828 	bl	800199e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495a:	b29b      	uxth	r3, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8d4 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004968:	e0b5      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004976:	b29b      	uxth	r3, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a7 	beq.w	8004ada <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800498c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a2 	beq.w	8004ada <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e4      	bne.n	8004996 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	623b      	str	r3, [r7, #32]
   return(result);
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3308      	adds	r3, #8
 80049ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f0:	633a      	str	r2, [r7, #48]	; 0x30
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e3      	bne.n	80049cc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	617b      	str	r3, [r7, #20]
   return(result);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e4      	bne.n	8004a16 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f85c 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a58:	e03f      	b.n	8004ada <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <HAL_UART_IRQHandler+0x55c>
 8004a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f853 	bl	8004b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a82:	e02d      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01c      	beq.n	8004ade <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
    }
    return;
 8004aac:	e017      	b.n	8004ade <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d012      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fd8d 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 8004acc:	e008      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e006      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004ad2:	bf00      	nop
 8004ad4:	e004      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004ade:	bf00      	nop
  }

}
 8004ae0:	37e8      	adds	r7, #232	; 0xe8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4ba7      	ldr	r3, [pc, #668]	; (8004e04 <UART_SetConfig+0x2c8>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a95      	ldr	r2, [pc, #596]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d120      	bne.n	8004bfa <UART_SetConfig+0xbe>
 8004bb8:	4b94      	ldr	r3, [pc, #592]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d816      	bhi.n	8004bf4 <UART_SetConfig+0xb8>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x90>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004be9 	.word	0x08004be9
 8004bd4:	08004be3 	.word	0x08004be3
 8004bd8:	08004bef 	.word	0x08004bef
 8004bdc:	2301      	movs	r3, #1
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e14f      	b.n	8004e82 <UART_SetConfig+0x346>
 8004be2:	2302      	movs	r3, #2
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e14c      	b.n	8004e82 <UART_SetConfig+0x346>
 8004be8:	2304      	movs	r3, #4
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e149      	b.n	8004e82 <UART_SetConfig+0x346>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e146      	b.n	8004e82 <UART_SetConfig+0x346>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e143      	b.n	8004e82 <UART_SetConfig+0x346>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a84      	ldr	r2, [pc, #528]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d132      	bne.n	8004c6a <UART_SetConfig+0x12e>
 8004c04:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d828      	bhi.n	8004c64 <UART_SetConfig+0x128>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0xdc>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c59 	.word	0x08004c59
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c53 	.word	0x08004c53
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c65 	.word	0x08004c65
 8004c48:	08004c5f 	.word	0x08004c5f
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e117      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e114      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e111      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e10e      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c64:	2310      	movs	r3, #16
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e10b      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a69      	ldr	r2, [pc, #420]	; (8004e14 <UART_SetConfig+0x2d8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d120      	bne.n	8004cb6 <UART_SetConfig+0x17a>
 8004c74:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c7e:	2b30      	cmp	r3, #48	; 0x30
 8004c80:	d013      	beq.n	8004caa <UART_SetConfig+0x16e>
 8004c82:	2b30      	cmp	r3, #48	; 0x30
 8004c84:	d814      	bhi.n	8004cb0 <UART_SetConfig+0x174>
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d009      	beq.n	8004c9e <UART_SetConfig+0x162>
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d810      	bhi.n	8004cb0 <UART_SetConfig+0x174>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <UART_SetConfig+0x15c>
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d006      	beq.n	8004ca4 <UART_SetConfig+0x168>
 8004c96:	e00b      	b.n	8004cb0 <UART_SetConfig+0x174>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e0f1      	b.n	8004e82 <UART_SetConfig+0x346>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e0ee      	b.n	8004e82 <UART_SetConfig+0x346>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e0eb      	b.n	8004e82 <UART_SetConfig+0x346>
 8004caa:	2308      	movs	r3, #8
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e0e8      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e0e5      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a57      	ldr	r2, [pc, #348]	; (8004e18 <UART_SetConfig+0x2dc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d120      	bne.n	8004d02 <UART_SetConfig+0x1c6>
 8004cc0:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ccc:	d013      	beq.n	8004cf6 <UART_SetConfig+0x1ba>
 8004cce:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd0:	d814      	bhi.n	8004cfc <UART_SetConfig+0x1c0>
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d009      	beq.n	8004cea <UART_SetConfig+0x1ae>
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d810      	bhi.n	8004cfc <UART_SetConfig+0x1c0>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <UART_SetConfig+0x1a8>
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d006      	beq.n	8004cf0 <UART_SetConfig+0x1b4>
 8004ce2:	e00b      	b.n	8004cfc <UART_SetConfig+0x1c0>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e0cb      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cea:	2302      	movs	r3, #2
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e0c8      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e0c5      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0c2      	b.n	8004e82 <UART_SetConfig+0x346>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e0bf      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a45      	ldr	r2, [pc, #276]	; (8004e1c <UART_SetConfig+0x2e0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d125      	bne.n	8004d58 <UART_SetConfig+0x21c>
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1a:	d017      	beq.n	8004d4c <UART_SetConfig+0x210>
 8004d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d20:	d817      	bhi.n	8004d52 <UART_SetConfig+0x216>
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d26:	d00b      	beq.n	8004d40 <UART_SetConfig+0x204>
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d811      	bhi.n	8004d52 <UART_SetConfig+0x216>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <UART_SetConfig+0x1fe>
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d36:	d006      	beq.n	8004d46 <UART_SetConfig+0x20a>
 8004d38:	e00b      	b.n	8004d52 <UART_SetConfig+0x216>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e0a0      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d40:	2302      	movs	r3, #2
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e09d      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d46:	2304      	movs	r3, #4
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e09a      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e097      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d52:	2310      	movs	r3, #16
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e094      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <UART_SetConfig+0x2e4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d125      	bne.n	8004dae <UART_SetConfig+0x272>
 8004d62:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d70:	d017      	beq.n	8004da2 <UART_SetConfig+0x266>
 8004d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d76:	d817      	bhi.n	8004da8 <UART_SetConfig+0x26c>
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	d00b      	beq.n	8004d96 <UART_SetConfig+0x25a>
 8004d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d82:	d811      	bhi.n	8004da8 <UART_SetConfig+0x26c>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <UART_SetConfig+0x254>
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d006      	beq.n	8004d9c <UART_SetConfig+0x260>
 8004d8e:	e00b      	b.n	8004da8 <UART_SetConfig+0x26c>
 8004d90:	2301      	movs	r3, #1
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e075      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d96:	2302      	movs	r3, #2
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e072      	b.n	8004e82 <UART_SetConfig+0x346>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e06f      	b.n	8004e82 <UART_SetConfig+0x346>
 8004da2:	2308      	movs	r3, #8
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e06c      	b.n	8004e82 <UART_SetConfig+0x346>
 8004da8:	2310      	movs	r3, #16
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e069      	b.n	8004e82 <UART_SetConfig+0x346>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <UART_SetConfig+0x2e8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d137      	bne.n	8004e28 <UART_SetConfig+0x2ec>
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dc6:	d017      	beq.n	8004df8 <UART_SetConfig+0x2bc>
 8004dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dcc:	d817      	bhi.n	8004dfe <UART_SetConfig+0x2c2>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	d00b      	beq.n	8004dec <UART_SetConfig+0x2b0>
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d811      	bhi.n	8004dfe <UART_SetConfig+0x2c2>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <UART_SetConfig+0x2aa>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d006      	beq.n	8004df2 <UART_SetConfig+0x2b6>
 8004de4:	e00b      	b.n	8004dfe <UART_SetConfig+0x2c2>
 8004de6:	2300      	movs	r3, #0
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e04a      	b.n	8004e82 <UART_SetConfig+0x346>
 8004dec:	2302      	movs	r3, #2
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e047      	b.n	8004e82 <UART_SetConfig+0x346>
 8004df2:	2304      	movs	r3, #4
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e044      	b.n	8004e82 <UART_SetConfig+0x346>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e041      	b.n	8004e82 <UART_SetConfig+0x346>
 8004dfe:	2310      	movs	r3, #16
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e03e      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e04:	efff69f3 	.word	0xefff69f3
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40004400 	.word	0x40004400
 8004e14:	40004800 	.word	0x40004800
 8004e18:	40004c00 	.word	0x40004c00
 8004e1c:	40005000 	.word	0x40005000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	40007800 	.word	0x40007800
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <UART_SetConfig+0x4b8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d125      	bne.n	8004e7e <UART_SetConfig+0x342>
 8004e32:	4b71      	ldr	r3, [pc, #452]	; (8004ff8 <UART_SetConfig+0x4bc>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e40:	d017      	beq.n	8004e72 <UART_SetConfig+0x336>
 8004e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e46:	d817      	bhi.n	8004e78 <UART_SetConfig+0x33c>
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	d00b      	beq.n	8004e66 <UART_SetConfig+0x32a>
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d811      	bhi.n	8004e78 <UART_SetConfig+0x33c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <UART_SetConfig+0x324>
 8004e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5c:	d006      	beq.n	8004e6c <UART_SetConfig+0x330>
 8004e5e:	e00b      	b.n	8004e78 <UART_SetConfig+0x33c>
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e00d      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e66:	2302      	movs	r3, #2
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e00a      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e007      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e72:	2308      	movs	r3, #8
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e004      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e001      	b.n	8004e82 <UART_SetConfig+0x346>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8a:	d15a      	bne.n	8004f42 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004e8c:	7ffb      	ldrb	r3, [r7, #31]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d827      	bhi.n	8004ee2 <UART_SetConfig+0x3a6>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0x35c>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004ec5 	.word	0x08004ec5
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	08004ee3 	.word	0x08004ee3
 8004ea8:	08004ed3 	.word	0x08004ed3
 8004eac:	08004ee3 	.word	0x08004ee3
 8004eb0:	08004ee3 	.word	0x08004ee3
 8004eb4:	08004ee3 	.word	0x08004ee3
 8004eb8:	08004edb 	.word	0x08004edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe fdb4 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	61b8      	str	r0, [r7, #24]
        break;
 8004ec2:	e013      	b.n	8004eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec4:	f7fe fdc4 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004ec8:	61b8      	str	r0, [r7, #24]
        break;
 8004eca:	e00f      	b.n	8004eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <UART_SetConfig+0x4c0>)
 8004ece:	61bb      	str	r3, [r7, #24]
        break;
 8004ed0:	e00c      	b.n	8004eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed2:	f7fe fcbb 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8004ed6:	61b8      	str	r0, [r7, #24]
        break;
 8004ed8:	e008      	b.n	8004eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	61bb      	str	r3, [r7, #24]
        break;
 8004ee0:	e004      	b.n	8004eec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d074      	beq.n	8004fdc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	005a      	lsls	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	d916      	bls.n	8004f3c <UART_SetConfig+0x400>
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f14:	d212      	bcs.n	8004f3c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f023 030f 	bic.w	r3, r3, #15
 8004f1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	89fb      	ldrh	r3, [r7, #14]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	89fa      	ldrh	r2, [r7, #14]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	e04f      	b.n	8004fdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	77bb      	strb	r3, [r7, #30]
 8004f40:	e04c      	b.n	8004fdc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d828      	bhi.n	8004f9a <UART_SetConfig+0x45e>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x414>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f8b 	.word	0x08004f8b
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7fe fd58 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8004f78:	61b8      	str	r0, [r7, #24]
        break;
 8004f7a:	e013      	b.n	8004fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f7c:	f7fe fd68 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004f80:	61b8      	str	r0, [r7, #24]
        break;
 8004f82:	e00f      	b.n	8004fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <UART_SetConfig+0x4c0>)
 8004f86:	61bb      	str	r3, [r7, #24]
        break;
 8004f88:	e00c      	b.n	8004fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7fe fc5f 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8004f8e:	61b8      	str	r0, [r7, #24]
        break;
 8004f90:	e008      	b.n	8004fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	61bb      	str	r3, [r7, #24]
        break;
 8004f98:	e004      	b.n	8004fa4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085a      	lsrs	r2, r3, #1
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d909      	bls.n	8004fd8 <UART_SetConfig+0x49c>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fca:	d205      	bcs.n	8004fd8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60da      	str	r2, [r3, #12]
 8004fd6:	e001      	b.n	8004fdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40007c00 	.word	0x40007c00
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	00f42400 	.word	0x00f42400

08005000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fe:	d10a      	bne.n	8005116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005154:	f7fb feb4 	bl	8000ec0 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d10e      	bne.n	8005186 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f82d 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e023      	b.n	80051ce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b04      	cmp	r3, #4
 8005192:	d10e      	bne.n	80051b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f817 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e00d      	b.n	80051ce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b09c      	sub	sp, #112	; 0x70
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e0a5      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	f000 80a1 	beq.w	8005334 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fb fe65 	bl	8000ec0 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051fe:	429a      	cmp	r2, r3
 8005200:	d302      	bcc.n	8005208 <UART_WaitOnFlagUntilTimeout+0x32>
 8005202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005204:	2b00      	cmp	r3, #0
 8005206:	d13e      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800521c:	667b      	str	r3, [r7, #100]	; 0x64
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005228:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800522c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e6      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	663b      	str	r3, [r7, #96]	; 0x60
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800525a:	64ba      	str	r2, [r7, #72]	; 0x48
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e067      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d04f      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	d147      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e6      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005300:	623a      	str	r2, [r7, #32]
 8005302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	61bb      	str	r3, [r7, #24]
   return(result);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e010      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	f43f af4a 	beq.w	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3770      	adds	r7, #112	; 0x70
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005360:	b480      	push	{r7}
 8005362:	b097      	sub	sp, #92	; 0x5c
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d10e      	bne.n	80053b2 <UART_Start_Receive_IT+0x52>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <UART_Start_Receive_IT+0x48>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a6:	e02d      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b0:	e028      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <UART_Start_Receive_IT+0x76>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <UART_Start_Receive_IT+0x6c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ca:	e01b      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	227f      	movs	r2, #127	; 0x7f
 80053d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d4:	e016      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053de:	d10d      	bne.n	80053fc <UART_Start_Receive_IT+0x9c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <UART_Start_Receive_IT+0x92>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	227f      	movs	r2, #127	; 0x7f
 80053ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f0:	e008      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	223f      	movs	r2, #63	; 0x3f
 80053f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fa:	e003      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2222      	movs	r2, #34	; 0x22
 8005410:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	657b      	str	r3, [r7, #84]	; 0x54
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005432:	64ba      	str	r2, [r7, #72]	; 0x48
 8005434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d107      	bne.n	8005460 <UART_Start_Receive_IT+0x100>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <UART_Start_Receive_IT+0x18c>)
 800545c:	665a      	str	r2, [r3, #100]	; 0x64
 800545e:	e002      	b.n	8005466 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a23      	ldr	r2, [pc, #140]	; (80054f0 <UART_Start_Receive_IT+0x190>)
 8005464:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d019      	beq.n	80054aa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800549a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_Start_Receive_IT+0x116>
 80054a8:	e018      	b.n	80054dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	6a3a      	ldr	r2, [r7, #32]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	375c      	adds	r7, #92	; 0x5c
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	08005797 	.word	0x08005797
 80054f0:	0800563b 	.word	0x0800563b

080054f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b095      	sub	sp, #84	; 0x54
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
 800551c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	61fb      	str	r3, [r7, #28]
   return(result);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	64bb      	str	r3, [r7, #72]	; 0x48
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005566:	2b01      	cmp	r3, #1
 8005568:	d118      	bne.n	800559c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60bb      	str	r3, [r7, #8]
   return(result);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	647b      	str	r3, [r7, #68]	; 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80055ae:	bf00      	nop
 80055b0:	3754      	adds	r7, #84	; 0x54
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff fa8f 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	613b      	str	r3, [r7, #16]
   return(result);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fa5b 	bl	8004ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005632:	bf00      	nop
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b096      	sub	sp, #88	; 0x58
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005648:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005650:	2b22      	cmp	r3, #34	; 0x22
 8005652:	f040 8094 	bne.w	800577e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005660:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005664:	b2d9      	uxtb	r1, r3
 8005666:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800566a:	b2da      	uxtb	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	400a      	ands	r2, r1
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d177      	bne.n	800578e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056bc:	647b      	str	r3, [r7, #68]	; 0x44
 80056be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e6      	bne.n	800569e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	623b      	str	r3, [r7, #32]
   return(result);
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3308      	adds	r3, #8
 80056ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f0:	633a      	str	r2, [r7, #48]	; 0x30
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e5      	bne.n	80056d0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	2b01      	cmp	r3, #1
 8005716:	d12e      	bne.n	8005776 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	60fb      	str	r3, [r7, #12]
   return(result);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	617b      	str	r3, [r7, #20]
   return(result);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e6      	bne.n	800571e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b10      	cmp	r3, #16
 800575c:	d103      	bne.n	8005766 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2210      	movs	r2, #16
 8005764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff f9ce 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005774:	e00b      	b.n	800578e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f00b fe30 	bl	80113dc <HAL_UART_RxCpltCallback>
}
 800577c:	e007      	b.n	800578e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0208 	orr.w	r2, r2, #8
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	bf00      	nop
 8005790:	3758      	adds	r7, #88	; 0x58
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b096      	sub	sp, #88	; 0x58
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	2b22      	cmp	r3, #34	; 0x22
 80057ae:	f040 8094 	bne.w	80058da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80057c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80057c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	1c9a      	adds	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d177      	bne.n	80058ea <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800580e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
 800581a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800581e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	61fb      	str	r3, [r7, #28]
   return(result);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800584c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e5      	bne.n	800582c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005870:	2b01      	cmp	r3, #1
 8005872:	d12e      	bne.n	80058d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	60bb      	str	r3, [r7, #8]
   return(result);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f023 0310 	bic.w	r3, r3, #16
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6979      	ldr	r1, [r7, #20]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d103      	bne.n	80058c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2210      	movs	r2, #16
 80058c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f920 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058d0:	e00b      	b.n	80058ea <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f00b fd82 	bl	80113dc <HAL_UART_RxCpltCallback>
}
 80058d8:	e007      	b.n	80058ea <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	619a      	str	r2, [r3, #24]
}
 80058ea:	bf00      	nop
 80058ec:	3758      	adds	r7, #88	; 0x58
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80058fa:	4b8d      	ldr	r3, [pc, #564]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80058fc:	22c0      	movs	r2, #192	; 0xc0
 80058fe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005900:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005902:	22a8      	movs	r2, #168	; 0xa8
 8005904:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8005906:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005908:	2264      	movs	r2, #100	; 0x64
 800590a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800590c:	4b88      	ldr	r3, [pc, #544]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800590e:	2201      	movs	r2, #1
 8005910:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005912:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005918:	4b86      	ldr	r3, [pc, #536]	; (8005b34 <MX_LWIP_Init+0x240>)
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800591e:	4b85      	ldr	r3, [pc, #532]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005924:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005926:	2200      	movs	r2, #0
 8005928:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800592a:	4b83      	ldr	r3, [pc, #524]	; (8005b38 <MX_LWIP_Init+0x244>)
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005930:	4b81      	ldr	r3, [pc, #516]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005932:	2200      	movs	r2, #0
 8005934:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005936:	4b80      	ldr	r3, [pc, #512]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005938:	2200      	movs	r2, #0
 800593a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800593c:	4b7e      	ldr	r3, [pc, #504]	; (8005b38 <MX_LWIP_Init+0x244>)
 800593e:	2200      	movs	r2, #0
 8005940:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005942:	f000 fcd7 	bl	80062f4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005946:	4b7a      	ldr	r3, [pc, #488]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	061a      	lsls	r2, r3, #24
 800594c:	4b78      	ldr	r3, [pc, #480]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	431a      	orrs	r2, r3
 8005954:	4b76      	ldr	r3, [pc, #472]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	4313      	orrs	r3, r2
 800595c:	4a74      	ldr	r2, [pc, #464]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800595e:	78d2      	ldrb	r2, [r2, #3]
 8005960:	4313      	orrs	r3, r2
 8005962:	061a      	lsls	r2, r3, #24
 8005964:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	0619      	lsls	r1, r3, #24
 800596a:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	4319      	orrs	r1, r3
 8005972:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	430b      	orrs	r3, r1
 800597a:	496d      	ldr	r1, [pc, #436]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800597c:	78c9      	ldrb	r1, [r1, #3]
 800597e:	430b      	orrs	r3, r1
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005986:	431a      	orrs	r2, r3
 8005988:	4b69      	ldr	r3, [pc, #420]	; (8005b30 <MX_LWIP_Init+0x23c>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	0619      	lsls	r1, r3, #24
 800598e:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	4319      	orrs	r1, r3
 8005996:	4b66      	ldr	r3, [pc, #408]	; (8005b30 <MX_LWIP_Init+0x23c>)
 8005998:	789b      	ldrb	r3, [r3, #2]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	430b      	orrs	r3, r1
 800599e:	4964      	ldr	r1, [pc, #400]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80059a0:	78c9      	ldrb	r1, [r1, #3]
 80059a2:	430b      	orrs	r3, r1
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059aa:	431a      	orrs	r2, r3
 80059ac:	4b60      	ldr	r3, [pc, #384]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	0619      	lsls	r1, r3, #24
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	4319      	orrs	r1, r3
 80059ba:	4b5d      	ldr	r3, [pc, #372]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80059bc:	789b      	ldrb	r3, [r3, #2]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	430b      	orrs	r3, r1
 80059c2:	495b      	ldr	r1, [pc, #364]	; (8005b30 <MX_LWIP_Init+0x23c>)
 80059c4:	78c9      	ldrb	r1, [r1, #3]
 80059c6:	430b      	orrs	r3, r1
 80059c8:	0e1b      	lsrs	r3, r3, #24
 80059ca:	4313      	orrs	r3, r2
 80059cc:	4a5b      	ldr	r2, [pc, #364]	; (8005b3c <MX_LWIP_Init+0x248>)
 80059ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80059d0:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	061a      	lsls	r2, r3, #24
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	431a      	orrs	r2, r3
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059e0:	789b      	ldrb	r3, [r3, #2]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4313      	orrs	r3, r2
 80059e6:	4a53      	ldr	r2, [pc, #332]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059e8:	78d2      	ldrb	r2, [r2, #3]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	061a      	lsls	r2, r3, #24
 80059ee:	4b51      	ldr	r3, [pc, #324]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	0619      	lsls	r1, r3, #24
 80059f4:	4b4f      	ldr	r3, [pc, #316]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	4319      	orrs	r1, r3
 80059fc:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <MX_LWIP_Init+0x240>)
 80059fe:	789b      	ldrb	r3, [r3, #2]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	430b      	orrs	r3, r1
 8005a04:	494b      	ldr	r1, [pc, #300]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a06:	78c9      	ldrb	r1, [r1, #3]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a10:	431a      	orrs	r2, r3
 8005a12:	4b48      	ldr	r3, [pc, #288]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	0619      	lsls	r1, r3, #24
 8005a18:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	4319      	orrs	r1, r3
 8005a20:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a22:	789b      	ldrb	r3, [r3, #2]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	430b      	orrs	r3, r1
 8005a28:	4942      	ldr	r1, [pc, #264]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a2a:	78c9      	ldrb	r1, [r1, #3]
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a34:	431a      	orrs	r2, r3
 8005a36:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	0619      	lsls	r1, r3, #24
 8005a3c:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	4319      	orrs	r1, r3
 8005a44:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a46:	789b      	ldrb	r3, [r3, #2]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	4939      	ldr	r1, [pc, #228]	; (8005b34 <MX_LWIP_Init+0x240>)
 8005a4e:	78c9      	ldrb	r1, [r1, #3]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	0e1b      	lsrs	r3, r3, #24
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a3a      	ldr	r2, [pc, #232]	; (8005b40 <MX_LWIP_Init+0x24c>)
 8005a58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	061a      	lsls	r2, r3, #24
 8005a60:	4b35      	ldr	r3, [pc, #212]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	431a      	orrs	r2, r3
 8005a68:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a6a:	789b      	ldrb	r3, [r3, #2]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	4a31      	ldr	r2, [pc, #196]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a72:	78d2      	ldrb	r2, [r2, #3]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	061a      	lsls	r2, r3, #24
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	0619      	lsls	r1, r3, #24
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	4319      	orrs	r1, r3
 8005a86:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a88:	789b      	ldrb	r3, [r3, #2]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	492a      	ldr	r1, [pc, #168]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a90:	78c9      	ldrb	r1, [r1, #3]
 8005a92:	430b      	orrs	r3, r1
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	0619      	lsls	r1, r3, #24
 8005aa2:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	4319      	orrs	r1, r3
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005aac:	789b      	ldrb	r3, [r3, #2]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	4921      	ldr	r1, [pc, #132]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005ab4:	78c9      	ldrb	r1, [r1, #3]
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	0a1b      	lsrs	r3, r3, #8
 8005aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	0619      	lsls	r1, r3, #24
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	4319      	orrs	r1, r3
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005ad0:	789b      	ldrb	r3, [r3, #2]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	4918      	ldr	r1, [pc, #96]	; (8005b38 <MX_LWIP_Init+0x244>)
 8005ad8:	78c9      	ldrb	r1, [r1, #3]
 8005ada:	430b      	orrs	r3, r1
 8005adc:	0e1b      	lsrs	r3, r3, #24
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <MX_LWIP_Init+0x250>)
 8005ae2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <MX_LWIP_Init+0x254>)
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <MX_LWIP_Init+0x258>)
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <MX_LWIP_Init+0x250>)
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <MX_LWIP_Init+0x24c>)
 8005af4:	4911      	ldr	r1, [pc, #68]	; (8005b3c <MX_LWIP_Init+0x248>)
 8005af6:	4816      	ldr	r0, [pc, #88]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005af8:	f001 f8a2 	bl	8006c40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005afc:	4814      	ldr	r0, [pc, #80]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005afe:	f001 fa51 	bl	8006fa4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005b04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b08:	089b      	lsrs	r3, r3, #2
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005b14:	480e      	ldr	r0, [pc, #56]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005b16:	f001 fa55 	bl	8006fc4 <netif_set_up>
 8005b1a:	e002      	b.n	8005b22 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005b1e:	f001 fabd 	bl	800709c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005b22:	490c      	ldr	r1, [pc, #48]	; (8005b54 <MX_LWIP_Init+0x260>)
 8005b24:	480a      	ldr	r0, [pc, #40]	; (8005b50 <MX_LWIP_Init+0x25c>)
 8005b26:	f001 faeb 	bl	8007100 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b2a:	bf00      	nop
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000334 	.word	0x20000334
 8005b34:	20000330 	.word	0x20000330
 8005b38:	200002f4 	.word	0x200002f4
 8005b3c:	2000032c 	.word	0x2000032c
 8005b40:	20000338 	.word	0x20000338
 8005b44:	2000033c 	.word	0x2000033c
 8005b48:	080107b9 	.word	0x080107b9
 8005b4c:	08006121 	.word	0x08006121
 8005b50:	200002f8 	.word	0x200002f8
 8005b54:	0800618d 	.word	0x0800618d

08005b58 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005b5c:	4803      	ldr	r0, [pc, #12]	; (8005b6c <MX_LWIP_Process+0x14>)
 8005b5e:	f000 fabf 	bl	80060e0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005b62:	f008 fa43 	bl	800dfec <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	200002f8 	.word	0x200002f8

08005b70 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	; 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a4e      	ldr	r2, [pc, #312]	; (8005cc8 <HAL_ETH_MspInit+0x158>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f040 8096 	bne.w	8005cc0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005b94:	4b4d      	ldr	r3, [pc, #308]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	4a4c      	ldr	r2, [pc, #304]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba0:	4b4a      	ldr	r3, [pc, #296]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	4b47      	ldr	r3, [pc, #284]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	4a46      	ldr	r2, [pc, #280]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb8:	4b44      	ldr	r3, [pc, #272]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	4a40      	ldr	r2, [pc, #256]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bce:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005be2:	f043 0304 	orr.w	r3, r3, #4
 8005be6:	6313      	str	r3, [r2, #48]	; 0x30
 8005be8:	4b38      	ldr	r3, [pc, #224]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bf4:	4b35      	ldr	r3, [pc, #212]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005c00:	4b32      	ldr	r3, [pc, #200]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c12:	f043 0302 	orr.w	r3, r3, #2
 8005c16:	6313      	str	r3, [r2, #48]	; 0x30
 8005c18:	4b2c      	ldr	r3, [pc, #176]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c24:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4a28      	ldr	r2, [pc, #160]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c30:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <HAL_ETH_MspInit+0x15c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005c3c:	2332      	movs	r3, #50	; 0x32
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c40:	2302      	movs	r3, #2
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c4c:	230b      	movs	r3, #11
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c54:	4619      	mov	r1, r3
 8005c56:	481e      	ldr	r0, [pc, #120]	; (8005cd0 <HAL_ETH_MspInit+0x160>)
 8005c58:	f7fd f838 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005c5c:	2386      	movs	r3, #134	; 0x86
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c60:	2302      	movs	r3, #2
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c6c:	230b      	movs	r3, #11
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c74:	4619      	mov	r1, r3
 8005c76:	4817      	ldr	r0, [pc, #92]	; (8005cd4 <HAL_ETH_MspInit+0x164>)
 8005c78:	f7fd f828 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c82:	2302      	movs	r3, #2
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c8e:	230b      	movs	r3, #11
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c96:	4619      	mov	r1, r3
 8005c98:	480f      	ldr	r0, [pc, #60]	; (8005cd8 <HAL_ETH_MspInit+0x168>)
 8005c9a:	f7fd f817 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005c9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cac:	2303      	movs	r3, #3
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cb0:	230b      	movs	r3, #11
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4808      	ldr	r0, [pc, #32]	; (8005cdc <HAL_ETH_MspInit+0x16c>)
 8005cbc:	f7fd f806 	bl	8002ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	3738      	adds	r7, #56	; 0x38
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40028000 	.word	0x40028000
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40020800 	.word	0x40020800
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	40020400 	.word	0x40020400
 8005cdc:	40021800 	.word	0x40021800

08005ce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005cec:	4b4d      	ldr	r3, [pc, #308]	; (8005e24 <low_level_init+0x144>)
 8005cee:	4a4e      	ldr	r2, [pc, #312]	; (8005e28 <low_level_init+0x148>)
 8005cf0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005cf2:	4b4c      	ldr	r3, [pc, #304]	; (8005e24 <low_level_init+0x144>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <low_level_init+0x144>)
 8005cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d00:	4b48      	ldr	r3, [pc, #288]	; (8005e24 <low_level_init+0x144>)
 8005d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d06:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005d08:	4b46      	ldr	r3, [pc, #280]	; (8005e24 <low_level_init+0x144>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d16:	23e1      	movs	r3, #225	; 0xe1
 8005d18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005d22:	2300      	movs	r3, #0
 8005d24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005d26:	4a3f      	ldr	r2, [pc, #252]	; (8005e24 <low_level_init+0x144>)
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <low_level_init+0x144>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005d34:	4b3b      	ldr	r3, [pc, #236]	; (8005e24 <low_level_init+0x144>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005d3a:	4b3a      	ldr	r3, [pc, #232]	; (8005e24 <low_level_init+0x144>)
 8005d3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d40:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005d42:	4838      	ldr	r0, [pc, #224]	; (8005e24 <low_level_init+0x144>)
 8005d44:	f7fb febe 	bl	8001ac4 <HAL_ETH_Init>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d58:	f043 0304 	orr.w	r3, r3, #4
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005d64:	2304      	movs	r3, #4
 8005d66:	4a31      	ldr	r2, [pc, #196]	; (8005e2c <low_level_init+0x14c>)
 8005d68:	4931      	ldr	r1, [pc, #196]	; (8005e30 <low_level_init+0x150>)
 8005d6a:	482e      	ldr	r0, [pc, #184]	; (8005e24 <low_level_init+0x144>)
 8005d6c:	f7fc f844 	bl	8001df8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005d70:	2304      	movs	r3, #4
 8005d72:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <low_level_init+0x154>)
 8005d74:	4930      	ldr	r1, [pc, #192]	; (8005e38 <low_level_init+0x158>)
 8005d76:	482b      	ldr	r0, [pc, #172]	; (8005e24 <low_level_init+0x144>)
 8005d78:	f7fc f8a7 	bl	8001eca <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2206      	movs	r2, #6
 8005d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <low_level_init+0x144>)
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <low_level_init+0x144>)
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	785a      	ldrb	r2, [r3, #1]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005d9c:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <low_level_init+0x144>)
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	789a      	ldrb	r2, [r3, #2]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <low_level_init+0x144>)
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	78da      	ldrb	r2, [r3, #3]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005db4:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <low_level_init+0x144>)
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	791a      	ldrb	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005dc0:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <low_level_init+0x144>)
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	795a      	ldrb	r2, [r3, #5]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005dd2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dda:	f043 030a 	orr.w	r3, r3, #10
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005de6:	480f      	ldr	r0, [pc, #60]	; (8005e24 <low_level_init+0x144>)
 8005de8:	f7fc fb18 	bl	800241c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005dec:	f107 0310 	add.w	r3, r7, #16
 8005df0:	461a      	mov	r2, r3
 8005df2:	211d      	movs	r1, #29
 8005df4:	480b      	ldr	r0, [pc, #44]	; (8005e24 <low_level_init+0x144>)
 8005df6:	f7fc fa43 	bl	8002280 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f043 030b 	orr.w	r3, r3, #11
 8005e00:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	461a      	mov	r2, r3
 8005e06:	211d      	movs	r1, #29
 8005e08:	4806      	ldr	r0, [pc, #24]	; (8005e24 <low_level_init+0x144>)
 8005e0a:	f7fc faa1 	bl	8002350 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	461a      	mov	r2, r3
 8005e14:	211d      	movs	r1, #29
 8005e16:	4803      	ldr	r0, [pc, #12]	; (8005e24 <low_level_init+0x144>)
 8005e18:	f7fc fa32 	bl	8002280 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20001c10 	.word	0x20001c10
 8005e28:	40028000 	.word	0x40028000
 8005e2c:	20001c58 	.word	0x20001c58
 8005e30:	20000340 	.word	0x20000340
 8005e34:	200003c0 	.word	0x200003c0
 8005e38:	20001b90 	.word	0x20001b90

08005e3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005e46:	4b4b      	ldr	r3, [pc, #300]	; (8005f74 <low_level_output+0x138>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005e5e:	4b45      	ldr	r3, [pc, #276]	; (8005f74 <low_level_output+0x138>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	623b      	str	r3, [r7, #32]
 8005e6c:	e05a      	b.n	8005f24 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da03      	bge.n	8005e7e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005e76:	23f8      	movs	r3, #248	; 0xf8
 8005e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005e7c:	e05c      	b.n	8005f38 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	895b      	ldrh	r3, [r3, #10]
 8005e82:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005e88:	e02f      	b.n	8005eea <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	18d0      	adds	r0, r2, r3
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	18d1      	adds	r1, r2, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f010 ff23 	bl	8016cec <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da03      	bge.n	8005ebc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005eb4:	23f8      	movs	r3, #248	; 0xf8
 8005eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005eba:	e03d      	b.n	8005f38 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005ecc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ed8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ee4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d8c8      	bhi.n	8005e8a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	18d0      	adds	r0, r2, r3
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4413      	add	r3, r2
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f010 feef 	bl	8016cec <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1a1      	bne.n	8005e6e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	4811      	ldr	r0, [pc, #68]	; (8005f74 <low_level_output+0x138>)
 8005f2e:	f7fc f839 	bl	8001fa4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <low_level_output+0x138>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005f40:	4413      	add	r3, r2
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <low_level_output+0x138>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	f241 0314 	movw	r3, #4116	; 0x1014
 8005f54:	4413      	add	r3, r2
 8005f56:	2220      	movs	r2, #32
 8005f58:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <low_level_output+0x138>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f62:	4413      	add	r3, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3728      	adds	r7, #40	; 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20001c10 	.word	0x20001c10

08005f78 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005f9c:	484f      	ldr	r0, [pc, #316]	; (80060dc <low_level_input+0x164>)
 8005f9e:	f7fc f8eb 	bl	8002178 <HAL_ETH_GetReceivedFrame>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <low_level_input+0x34>

    return NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e092      	b.n	80060d2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005fac:	4b4b      	ldr	r3, [pc, #300]	; (80060dc <low_level_input+0x164>)
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <low_level_input+0x164>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f001 f936 	bl	8007238 <pbuf_alloc>
 8005fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d04b      	beq.n	800606c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005fd4:	4b41      	ldr	r3, [pc, #260]	; (80060dc <low_level_input+0x164>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe2:	e040      	b.n	8006066 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	895b      	ldrh	r3, [r3, #10]
 8005fe8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005fee:	e021      	b.n	8006034 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	18d0      	adds	r0, r2, r3
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	18d1      	adds	r1, r2, r3
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	461a      	mov	r2, r3
 8006008:	f010 fe70 	bl	8016cec <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006022:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800602e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800603e:	4293      	cmp	r3, r2
 8006040:	d8d6      	bhi.n	8005ff0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	18d0      	adds	r0, r2, r3
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4619      	mov	r1, r3
 8006054:	f010 fe4a 	bl	8016cec <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1bb      	bne.n	8005fe4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <low_level_input+0x164>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e00b      	b.n	8006090 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3301      	adds	r3, #1
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <low_level_input+0x164>)
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	429a      	cmp	r2, r3
 8006098:	d3ee      	bcc.n	8006078 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <low_level_input+0x164>)
 800609c:	2200      	movs	r2, #0
 800609e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <low_level_input+0x164>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80060a8:	4413      	add	r3, r2
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <low_level_input+0x164>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	f241 0314 	movw	r3, #4116	; 0x1014
 80060bc:	4413      	add	r3, r2
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <low_level_input+0x164>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f241 0308 	movw	r3, #4104	; 0x1008
 80060ca:	4413      	add	r3, r2
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
  }
  return p;
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20001c10 	.word	0x20001c10

080060e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff45 	bl	8005f78 <low_level_input>
 80060ee:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d010      	beq.n	8006118 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	4798      	blx	r3
 8006100:	4603      	mov	r3, r0
 8006102:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006104:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d006      	beq.n	800611a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f001 fb77 	bl	8007800 <pbuf_free>
    p = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	e000      	b.n	800611a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006118:	bf00      	nop
  }
}
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <ethernetif_init+0x1c>
 800612e:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <ethernetif_init+0x48>)
 8006130:	f240 2212 	movw	r2, #530	; 0x212
 8006134:	490d      	ldr	r1, [pc, #52]	; (800616c <ethernetif_init+0x4c>)
 8006136:	480e      	ldr	r0, [pc, #56]	; (8006170 <ethernetif_init+0x50>)
 8006138:	f010 fdee 	bl	8016d18 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2273      	movs	r2, #115	; 0x73
 8006140:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2274      	movs	r2, #116	; 0x74
 8006148:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <ethernetif_init+0x54>)
 8006150:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <ethernetif_init+0x58>)
 8006156:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fdc1 	bl	8005ce0 <low_level_init>

  return ERR_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	08017e50 	.word	0x08017e50
 800616c:	08017e6c 	.word	0x08017e6c
 8006170:	08017e7c 	.word	0x08017e7c
 8006174:	0800ec7d 	.word	0x0800ec7d
 8006178:	08005e3d 	.word	0x08005e3d

0800617c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006180:	f7fa fe9e 	bl	8000ec0 <HAL_GetTick>
 8006184:	4603      	mov	r3, r0
}
 8006186:	4618      	mov	r0, r3
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d05d      	beq.n	800626a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80061ae:	4b34      	ldr	r3, [pc, #208]	; (8006280 <ethernetif_update_config+0xf4>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d03f      	beq.n	8006236 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80061b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061ba:	2100      	movs	r1, #0
 80061bc:	4830      	ldr	r0, [pc, #192]	; (8006280 <ethernetif_update_config+0xf4>)
 80061be:	f7fc f8c7 	bl	8002350 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80061c2:	f7fa fe7d 	bl	8000ec0 <HAL_GetTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	461a      	mov	r2, r3
 80061d0:	2101      	movs	r1, #1
 80061d2:	482b      	ldr	r0, [pc, #172]	; (8006280 <ethernetif_update_config+0xf4>)
 80061d4:	f7fc f854 	bl	8002280 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80061d8:	f7fa fe72 	bl	8000ec0 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e6:	d828      	bhi.n	800623a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0eb      	beq.n	80061ca <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	461a      	mov	r2, r3
 80061f8:	2110      	movs	r1, #16
 80061fa:	4821      	ldr	r0, [pc, #132]	; (8006280 <ethernetif_update_config+0xf4>)
 80061fc:	f7fc f840 	bl	8002280 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <ethernetif_update_config+0xf4>)
 800620c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	e002      	b.n	800621a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <ethernetif_update_config+0xf4>)
 8006216:	2200      	movs	r2, #0
 8006218:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <ethernetif_update_config+0xf4>)
 8006226:	2200      	movs	r2, #0
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	e016      	b.n	800625a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <ethernetif_update_config+0xf4>)
 800622e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	e011      	b.n	800625a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <ethernetif_update_config+0xb0>
          goto error;
 800623a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <ethernetif_update_config+0xf4>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <ethernetif_update_config+0xf4>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800624c:	4313      	orrs	r3, r2
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	2100      	movs	r1, #0
 8006254:	480a      	ldr	r0, [pc, #40]	; (8006280 <ethernetif_update_config+0xf4>)
 8006256:	f7fc f87b 	bl	8002350 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800625a:	2100      	movs	r1, #0
 800625c:	4808      	ldr	r0, [pc, #32]	; (8006280 <ethernetif_update_config+0xf4>)
 800625e:	f7fc f93b 	bl	80024d8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006262:	4807      	ldr	r0, [pc, #28]	; (8006280 <ethernetif_update_config+0xf4>)
 8006264:	f7fc f8da 	bl	800241c <HAL_ETH_Start>
 8006268:	e002      	b.n	8006270 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <ethernetif_update_config+0xf4>)
 800626c:	f7fc f905 	bl	800247a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f807 	bl	8006284 <ethernetif_notify_conn_changed>
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20001c10 	.word	0x20001c10

08006284 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	b21a      	sxth	r2, r3
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	b29b      	uxth	r3, r3
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	061a      	lsls	r2, r3, #24
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0e1b      	lsrs	r3, r3, #24
 80062e6:	4313      	orrs	r3, r2
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80062fe:	f000 f8d5 	bl	80064ac <mem_init>
  memp_init();
 8006302:	f000 fbdb 	bl	8006abc <memp_init>
  pbuf_init();
  netif_init();
 8006306:	f000 fc93 	bl	8006c30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800630a:	f007 feb1 	bl	800e070 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800630e:	f001 fd15 	bl	8007d3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006312:	f007 fe23 	bl	800df5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <ptr_to_mem+0x20>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	4413      	add	r3, r2
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	2000009c 	.word	0x2000009c

08006344 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <mem_to_ptr+0x20>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	b29b      	uxth	r3, r3
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000009c 	.word	0x2000009c

08006368 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006370:	4b45      	ldr	r3, [pc, #276]	; (8006488 <plug_holes+0x120>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d206      	bcs.n	8006388 <plug_holes+0x20>
 800637a:	4b44      	ldr	r3, [pc, #272]	; (800648c <plug_holes+0x124>)
 800637c:	f240 12df 	movw	r2, #479	; 0x1df
 8006380:	4943      	ldr	r1, [pc, #268]	; (8006490 <plug_holes+0x128>)
 8006382:	4844      	ldr	r0, [pc, #272]	; (8006494 <plug_holes+0x12c>)
 8006384:	f010 fcc8 	bl	8016d18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006388:	4b43      	ldr	r3, [pc, #268]	; (8006498 <plug_holes+0x130>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d306      	bcc.n	80063a0 <plug_holes+0x38>
 8006392:	4b3e      	ldr	r3, [pc, #248]	; (800648c <plug_holes+0x124>)
 8006394:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006398:	4940      	ldr	r1, [pc, #256]	; (800649c <plug_holes+0x134>)
 800639a:	483e      	ldr	r0, [pc, #248]	; (8006494 <plug_holes+0x12c>)
 800639c:	f010 fcbc 	bl	8016d18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <plug_holes+0x4e>
 80063a8:	4b38      	ldr	r3, [pc, #224]	; (800648c <plug_holes+0x124>)
 80063aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80063ae:	493c      	ldr	r1, [pc, #240]	; (80064a0 <plug_holes+0x138>)
 80063b0:	4838      	ldr	r0, [pc, #224]	; (8006494 <plug_holes+0x12c>)
 80063b2:	f010 fcb1 	bl	8016d18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80063be:	d906      	bls.n	80063ce <plug_holes+0x66>
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <plug_holes+0x124>)
 80063c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80063c6:	4937      	ldr	r1, [pc, #220]	; (80064a4 <plug_holes+0x13c>)
 80063c8:	4832      	ldr	r0, [pc, #200]	; (8006494 <plug_holes+0x12c>)
 80063ca:	f010 fca5 	bl	8016d18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ffa4 	bl	8006320 <ptr_to_mem>
 80063d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d024      	beq.n	800642c <plug_holes+0xc4>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d120      	bne.n	800642c <plug_holes+0xc4>
 80063ea:	4b2b      	ldr	r3, [pc, #172]	; (8006498 <plug_holes+0x130>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d01b      	beq.n	800642c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80063f4:	4b2c      	ldr	r3, [pc, #176]	; (80064a8 <plug_holes+0x140>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d102      	bne.n	8006404 <plug_holes+0x9c>
      lfree = mem;
 80063fe:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <plug_holes+0x140>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006414:	d00a      	beq.n	800642c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff80 	bl	8006320 <ptr_to_mem>
 8006420:	4604      	mov	r4, r0
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff ff8e 	bl	8006344 <mem_to_ptr>
 8006428:	4603      	mov	r3, r0
 800642a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	885b      	ldrh	r3, [r3, #2]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff ff75 	bl	8006320 <ptr_to_mem>
 8006436:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d01f      	beq.n	8006480 <plug_holes+0x118>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11b      	bne.n	8006480 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <plug_holes+0x140>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d102      	bne.n	8006458 <plug_holes+0xf0>
      lfree = pmem;
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <plug_holes+0x140>)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006468:	d00a      	beq.n	8006480 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff ff56 	bl	8006320 <ptr_to_mem>
 8006474:	4604      	mov	r4, r0
 8006476:	68b8      	ldr	r0, [r7, #8]
 8006478:	f7ff ff64 	bl	8006344 <mem_to_ptr>
 800647c:	4603      	mov	r3, r0
 800647e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	bd90      	pop	{r4, r7, pc}
 8006488:	2000009c 	.word	0x2000009c
 800648c:	08017ea4 	.word	0x08017ea4
 8006490:	08017ed4 	.word	0x08017ed4
 8006494:	08017eec 	.word	0x08017eec
 8006498:	200000a0 	.word	0x200000a0
 800649c:	08017f14 	.word	0x08017f14
 80064a0:	08017f30 	.word	0x08017f30
 80064a4:	08017f4c 	.word	0x08017f4c
 80064a8:	200000a4 	.word	0x200000a4

080064ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <mem_init+0x68>)
 80064b4:	3303      	adds	r3, #3
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	461a      	mov	r2, r3
 80064bc:	4b16      	ldr	r3, [pc, #88]	; (8006518 <mem_init+0x6c>)
 80064be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80064c0:	4b15      	ldr	r3, [pc, #84]	; (8006518 <mem_init+0x6c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80064cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80064da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80064de:	f7ff ff1f 	bl	8006320 <ptr_to_mem>
 80064e2:	4603      	mov	r3, r0
 80064e4:	4a0d      	ldr	r2, [pc, #52]	; (800651c <mem_init+0x70>)
 80064e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <mem_init+0x70>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <mem_init+0x70>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80064f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <mem_init+0x70>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006502:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <mem_init+0x6c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a05      	ldr	r2, [pc, #20]	; (8006520 <mem_init+0x74>)
 800650a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20003440 	.word	0x20003440
 8006518:	2000009c 	.word	0x2000009c
 800651c:	200000a0 	.word	0x200000a0
 8006520:	200000a4 	.word	0x200000a4

08006524 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff09 	bl	8006344 <mem_to_ptr>
 8006532:	4603      	mov	r3, r0
 8006534:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fef0 	bl	8006320 <ptr_to_mem>
 8006540:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	885b      	ldrh	r3, [r3, #2]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff feea 	bl	8006320 <ptr_to_mem>
 800654c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006556:	d818      	bhi.n	800658a <mem_link_valid+0x66>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	885b      	ldrh	r3, [r3, #2]
 800655c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006560:	d813      	bhi.n	800658a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006566:	8afa      	ldrh	r2, [r7, #22]
 8006568:	429a      	cmp	r2, r3
 800656a:	d004      	beq.n	8006576 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	8afa      	ldrh	r2, [r7, #22]
 8006572:	429a      	cmp	r2, r3
 8006574:	d109      	bne.n	800658a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <mem_link_valid+0x74>)
 8006578:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d006      	beq.n	800658e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	885b      	ldrh	r3, [r3, #2]
 8006584:	8afa      	ldrh	r2, [r7, #22]
 8006586:	429a      	cmp	r2, r3
 8006588:	d001      	beq.n	800658e <mem_link_valid+0x6a>
    return 0;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <mem_link_valid+0x6c>
  }
  return 1;
 800658e:	2301      	movs	r3, #1
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200000a0 	.word	0x200000a0

0800659c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d04c      	beq.n	8006644 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <mem_free+0xb0>)
 80065b6:	f240 2273 	movw	r2, #627	; 0x273
 80065ba:	4925      	ldr	r1, [pc, #148]	; (8006650 <mem_free+0xb4>)
 80065bc:	4825      	ldr	r0, [pc, #148]	; (8006654 <mem_free+0xb8>)
 80065be:	f010 fbab 	bl	8016d18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80065c2:	e040      	b.n	8006646 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3b08      	subs	r3, #8
 80065c8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <mem_free+0xbc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d306      	bcc.n	80065e2 <mem_free+0x46>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f103 020c 	add.w	r2, r3, #12
 80065da:	4b20      	ldr	r3, [pc, #128]	; (800665c <mem_free+0xc0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d907      	bls.n	80065f2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <mem_free+0xb0>)
 80065e4:	f240 227f 	movw	r2, #639	; 0x27f
 80065e8:	491d      	ldr	r1, [pc, #116]	; (8006660 <mem_free+0xc4>)
 80065ea:	481a      	ldr	r0, [pc, #104]	; (8006654 <mem_free+0xb8>)
 80065ec:	f010 fb94 	bl	8016d18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80065f0:	e029      	b.n	8006646 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	791b      	ldrb	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <mem_free+0xb0>)
 80065fc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006600:	4918      	ldr	r1, [pc, #96]	; (8006664 <mem_free+0xc8>)
 8006602:	4814      	ldr	r0, [pc, #80]	; (8006654 <mem_free+0xb8>)
 8006604:	f010 fb88 	bl	8016d18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006608:	e01d      	b.n	8006646 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff ff8a 	bl	8006524 <mem_link_valid>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <mem_free+0xb0>)
 8006618:	f240 2295 	movw	r2, #661	; 0x295
 800661c:	4912      	ldr	r1, [pc, #72]	; (8006668 <mem_free+0xcc>)
 800661e:	480d      	ldr	r0, [pc, #52]	; (8006654 <mem_free+0xb8>)
 8006620:	f010 fb7a 	bl	8016d18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006624:	e00f      	b.n	8006646 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <mem_free+0xd0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d202      	bcs.n	800663c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <mem_free+0xd0>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff fe93 	bl	8006368 <plug_holes>
 8006642:	e000      	b.n	8006646 <mem_free+0xaa>
    return;
 8006644:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08017ea4 	.word	0x08017ea4
 8006650:	08017f78 	.word	0x08017f78
 8006654:	08017eec 	.word	0x08017eec
 8006658:	2000009c 	.word	0x2000009c
 800665c:	200000a0 	.word	0x200000a0
 8006660:	08017f9c 	.word	0x08017f9c
 8006664:	08017fb8 	.word	0x08017fb8
 8006668:	08017fe0 	.word	0x08017fe0
 800666c:	200000a4 	.word	0x200000a4

08006670 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800667c:	887b      	ldrh	r3, [r7, #2]
 800667e:	3303      	adds	r3, #3
 8006680:	b29b      	uxth	r3, r3
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006688:	8bfb      	ldrh	r3, [r7, #30]
 800668a:	2b0b      	cmp	r3, #11
 800668c:	d801      	bhi.n	8006692 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800668e:	230c      	movs	r3, #12
 8006690:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006692:	8bfb      	ldrh	r3, [r7, #30]
 8006694:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006698:	d803      	bhi.n	80066a2 <mem_trim+0x32>
 800669a:	8bfa      	ldrh	r2, [r7, #30]
 800669c:	887b      	ldrh	r3, [r7, #2]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d201      	bcs.n	80066a6 <mem_trim+0x36>
    return NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e0cc      	b.n	8006840 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80066a6:	4b68      	ldr	r3, [pc, #416]	; (8006848 <mem_trim+0x1d8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d304      	bcc.n	80066ba <mem_trim+0x4a>
 80066b0:	4b66      	ldr	r3, [pc, #408]	; (800684c <mem_trim+0x1dc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d306      	bcc.n	80066c8 <mem_trim+0x58>
 80066ba:	4b65      	ldr	r3, [pc, #404]	; (8006850 <mem_trim+0x1e0>)
 80066bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80066c0:	4964      	ldr	r1, [pc, #400]	; (8006854 <mem_trim+0x1e4>)
 80066c2:	4865      	ldr	r0, [pc, #404]	; (8006858 <mem_trim+0x1e8>)
 80066c4:	f010 fb28 	bl	8016d18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80066c8:	4b5f      	ldr	r3, [pc, #380]	; (8006848 <mem_trim+0x1d8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d304      	bcc.n	80066dc <mem_trim+0x6c>
 80066d2:	4b5e      	ldr	r3, [pc, #376]	; (800684c <mem_trim+0x1dc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d301      	bcc.n	80066e0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	e0af      	b.n	8006840 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3b08      	subs	r3, #8
 80066e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f7ff fe2c 	bl	8006344 <mem_to_ptr>
 80066ec:	4603      	mov	r3, r0
 80066ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	881a      	ldrh	r2, [r3, #0]
 80066f4:	8afb      	ldrh	r3, [r7, #22]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b08      	subs	r3, #8
 80066fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80066fe:	8bfa      	ldrh	r2, [r7, #30]
 8006700:	8abb      	ldrh	r3, [r7, #20]
 8006702:	429a      	cmp	r2, r3
 8006704:	d906      	bls.n	8006714 <mem_trim+0xa4>
 8006706:	4b52      	ldr	r3, [pc, #328]	; (8006850 <mem_trim+0x1e0>)
 8006708:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800670c:	4953      	ldr	r1, [pc, #332]	; (800685c <mem_trim+0x1ec>)
 800670e:	4852      	ldr	r0, [pc, #328]	; (8006858 <mem_trim+0x1e8>)
 8006710:	f010 fb02 	bl	8016d18 <iprintf>
  if (newsize > size) {
 8006714:	8bfa      	ldrh	r2, [r7, #30]
 8006716:	8abb      	ldrh	r3, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	d901      	bls.n	8006720 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	e08f      	b.n	8006840 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006720:	8bfa      	ldrh	r2, [r7, #30]
 8006722:	8abb      	ldrh	r3, [r7, #20]
 8006724:	429a      	cmp	r2, r3
 8006726:	d101      	bne.n	800672c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	e089      	b.n	8006840 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fdf5 	bl	8006320 <ptr_to_mem>
 8006736:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	791b      	ldrb	r3, [r3, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d13f      	bne.n	80067c0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006748:	d106      	bne.n	8006758 <mem_trim+0xe8>
 800674a:	4b41      	ldr	r3, [pc, #260]	; (8006850 <mem_trim+0x1e0>)
 800674c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006750:	4943      	ldr	r1, [pc, #268]	; (8006860 <mem_trim+0x1f0>)
 8006752:	4841      	ldr	r0, [pc, #260]	; (8006858 <mem_trim+0x1e8>)
 8006754:	f010 fae0 	bl	8016d18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800675e:	8afa      	ldrh	r2, [r7, #22]
 8006760:	8bfb      	ldrh	r3, [r7, #30]
 8006762:	4413      	add	r3, r2
 8006764:	b29b      	uxth	r3, r3
 8006766:	3308      	adds	r3, #8
 8006768:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800676a:	4b3e      	ldr	r3, [pc, #248]	; (8006864 <mem_trim+0x1f4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	d106      	bne.n	8006782 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006774:	89fb      	ldrh	r3, [r7, #14]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fdd2 	bl	8006320 <ptr_to_mem>
 800677c:	4603      	mov	r3, r0
 800677e:	4a39      	ldr	r2, [pc, #228]	; (8006864 <mem_trim+0x1f4>)
 8006780:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fdcb 	bl	8006320 <ptr_to_mem>
 800678a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2200      	movs	r2, #0
 8006790:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	89ba      	ldrh	r2, [r7, #12]
 8006796:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	8afa      	ldrh	r2, [r7, #22]
 800679c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	89fa      	ldrh	r2, [r7, #14]
 80067a2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067ac:	d047      	beq.n	800683e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fdb4 	bl	8006320 <ptr_to_mem>
 80067b8:	4602      	mov	r2, r0
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	8053      	strh	r3, [r2, #2]
 80067be:	e03e      	b.n	800683e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	f103 0214 	add.w	r2, r3, #20
 80067c6:	8abb      	ldrh	r3, [r7, #20]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d838      	bhi.n	800683e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80067cc:	8afa      	ldrh	r2, [r7, #22]
 80067ce:	8bfb      	ldrh	r3, [r7, #30]
 80067d0:	4413      	add	r3, r2
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3308      	adds	r3, #8
 80067d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067e0:	d106      	bne.n	80067f0 <mem_trim+0x180>
 80067e2:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <mem_trim+0x1e0>)
 80067e4:	f240 3216 	movw	r2, #790	; 0x316
 80067e8:	491d      	ldr	r1, [pc, #116]	; (8006860 <mem_trim+0x1f0>)
 80067ea:	481b      	ldr	r0, [pc, #108]	; (8006858 <mem_trim+0x1e8>)
 80067ec:	f010 fa94 	bl	8016d18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fd94 	bl	8006320 <ptr_to_mem>
 80067f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <mem_trim+0x1f4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d202      	bcs.n	800680a <mem_trim+0x19a>
      lfree = mem2;
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <mem_trim+0x1f4>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2200      	movs	r2, #0
 800680e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	881a      	ldrh	r2, [r3, #0]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	8afa      	ldrh	r2, [r7, #22]
 800681c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	89fa      	ldrh	r2, [r7, #14]
 8006822:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800682c:	d007      	beq.n	800683e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fd74 	bl	8006320 <ptr_to_mem>
 8006838:	4602      	mov	r2, r0
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800683e:	687b      	ldr	r3, [r7, #4]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	2000009c 	.word	0x2000009c
 800684c:	200000a0 	.word	0x200000a0
 8006850:	08017ea4 	.word	0x08017ea4
 8006854:	08018014 	.word	0x08018014
 8006858:	08017eec 	.word	0x08017eec
 800685c:	0801802c 	.word	0x0801802c
 8006860:	0801804c 	.word	0x0801804c
 8006864:	200000a4 	.word	0x200000a4

08006868 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <mem_malloc+0x14>
    return NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	e0d9      	b.n	8006a30 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	3303      	adds	r3, #3
 8006880:	b29b      	uxth	r3, r3
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006888:	8bbb      	ldrh	r3, [r7, #28]
 800688a:	2b0b      	cmp	r3, #11
 800688c:	d801      	bhi.n	8006892 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800688e:	230c      	movs	r3, #12
 8006890:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006892:	8bbb      	ldrh	r3, [r7, #28]
 8006894:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006898:	d803      	bhi.n	80068a2 <mem_malloc+0x3a>
 800689a:	8bba      	ldrh	r2, [r7, #28]
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d201      	bcs.n	80068a6 <mem_malloc+0x3e>
    return NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e0c4      	b.n	8006a30 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80068a6:	4b64      	ldr	r3, [pc, #400]	; (8006a38 <mem_malloc+0x1d0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fd4a 	bl	8006344 <mem_to_ptr>
 80068b0:	4603      	mov	r3, r0
 80068b2:	83fb      	strh	r3, [r7, #30]
 80068b4:	e0b4      	b.n	8006a20 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80068b6:	8bfb      	ldrh	r3, [r7, #30]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fd31 	bl	8006320 <ptr_to_mem>
 80068be:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 80a4 	bne.w	8006a12 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f1a3 0208 	sub.w	r2, r3, #8
 80068d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80068da:	429a      	cmp	r2, r3
 80068dc:	f0c0 8099 	bcc.w	8006a12 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f1a3 0208 	sub.w	r2, r3, #8
 80068ee:	8bbb      	ldrh	r3, [r7, #28]
 80068f0:	3314      	adds	r3, #20
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d333      	bcc.n	800695e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80068f6:	8bfa      	ldrh	r2, [r7, #30]
 80068f8:	8bbb      	ldrh	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3308      	adds	r3, #8
 8006900:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006902:	8a7b      	ldrh	r3, [r7, #18]
 8006904:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006908:	d106      	bne.n	8006918 <mem_malloc+0xb0>
 800690a:	4b4c      	ldr	r3, [pc, #304]	; (8006a3c <mem_malloc+0x1d4>)
 800690c:	f240 3287 	movw	r2, #903	; 0x387
 8006910:	494b      	ldr	r1, [pc, #300]	; (8006a40 <mem_malloc+0x1d8>)
 8006912:	484c      	ldr	r0, [pc, #304]	; (8006a44 <mem_malloc+0x1dc>)
 8006914:	f010 fa00 	bl	8016d18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006918:	8a7b      	ldrh	r3, [r7, #18]
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fd00 	bl	8006320 <ptr_to_mem>
 8006920:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	881a      	ldrh	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8bfa      	ldrh	r2, [r7, #30]
 8006934:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	8a7a      	ldrh	r2, [r7, #18]
 800693a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2201      	movs	r2, #1
 8006940:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800694a:	d00b      	beq.n	8006964 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fce5 	bl	8006320 <ptr_to_mem>
 8006956:	4602      	mov	r2, r0
 8006958:	8a7b      	ldrh	r3, [r7, #18]
 800695a:	8053      	strh	r3, [r2, #2]
 800695c:	e002      	b.n	8006964 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2201      	movs	r2, #1
 8006962:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006964:	4b34      	ldr	r3, [pc, #208]	; (8006a38 <mem_malloc+0x1d0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	429a      	cmp	r2, r3
 800696c:	d127      	bne.n	80069be <mem_malloc+0x156>
          struct mem *cur = lfree;
 800696e:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <mem_malloc+0x1d0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006974:	e005      	b.n	8006982 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fcd0 	bl	8006320 <ptr_to_mem>
 8006980:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <mem_malloc+0x12c>
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <mem_malloc+0x1e0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	429a      	cmp	r2, r3
 8006992:	d1f0      	bne.n	8006976 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006994:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <mem_malloc+0x1d0>)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800699a:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <mem_malloc+0x1d0>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <mem_malloc+0x1e0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d00b      	beq.n	80069be <mem_malloc+0x156>
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <mem_malloc+0x1d0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <mem_malloc+0x156>
 80069b0:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <mem_malloc+0x1d4>)
 80069b2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80069b6:	4925      	ldr	r1, [pc, #148]	; (8006a4c <mem_malloc+0x1e4>)
 80069b8:	4822      	ldr	r0, [pc, #136]	; (8006a44 <mem_malloc+0x1dc>)
 80069ba:	f010 f9ad 	bl	8016d18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80069be:	8bba      	ldrh	r2, [r7, #28]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	4413      	add	r3, r2
 80069c4:	3308      	adds	r3, #8
 80069c6:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <mem_malloc+0x1e0>)
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d906      	bls.n	80069dc <mem_malloc+0x174>
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <mem_malloc+0x1d4>)
 80069d0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80069d4:	491e      	ldr	r1, [pc, #120]	; (8006a50 <mem_malloc+0x1e8>)
 80069d6:	481b      	ldr	r0, [pc, #108]	; (8006a44 <mem_malloc+0x1dc>)
 80069d8:	f010 f99e 	bl	8016d18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <mem_malloc+0x18c>
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <mem_malloc+0x1d4>)
 80069e8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80069ec:	4919      	ldr	r1, [pc, #100]	; (8006a54 <mem_malloc+0x1ec>)
 80069ee:	4815      	ldr	r0, [pc, #84]	; (8006a44 <mem_malloc+0x1dc>)
 80069f0:	f010 f992 	bl	8016d18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <mem_malloc+0x1a4>
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <mem_malloc+0x1d4>)
 8006a00:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006a04:	4914      	ldr	r1, [pc, #80]	; (8006a58 <mem_malloc+0x1f0>)
 8006a06:	480f      	ldr	r0, [pc, #60]	; (8006a44 <mem_malloc+0x1dc>)
 8006a08:	f010 f986 	bl	8016d18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	e00e      	b.n	8006a30 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006a12:	8bfb      	ldrh	r3, [r7, #30]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fc83 	bl	8006320 <ptr_to_mem>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a20:	8bfa      	ldrh	r2, [r7, #30]
 8006a22:	8bbb      	ldrh	r3, [r7, #28]
 8006a24:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	f4ff af44 	bcc.w	80068b6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	200000a4 	.word	0x200000a4
 8006a3c:	08017ea4 	.word	0x08017ea4
 8006a40:	0801804c 	.word	0x0801804c
 8006a44:	08017eec 	.word	0x08017eec
 8006a48:	200000a0 	.word	0x200000a0
 8006a4c:	08018060 	.word	0x08018060
 8006a50:	0801807c 	.word	0x0801807c
 8006a54:	080180ac 	.word	0x080180ac
 8006a58:	080180dc 	.word	0x080180dc

08006a5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	3303      	adds	r3, #3
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e011      	b.n	8006aa2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	885b      	ldrh	r3, [r3, #2]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	dbe7      	blt.n	8006a7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	80fb      	strh	r3, [r7, #6]
 8006ac6:	e009      	b.n	8006adc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	4a08      	ldr	r2, [pc, #32]	; (8006aec <memp_init+0x30>)
 8006acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff ffc3 	bl	8006a5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	80fb      	strh	r3, [r7, #6]
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d9f2      	bls.n	8006ac8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	0801a940 	.word	0x0801a940

08006af0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d012      	beq.n	8006b2c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <do_memp_malloc_pool+0x38>
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <do_memp_malloc_pool+0x48>)
 8006b1c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b20:	4906      	ldr	r1, [pc, #24]	; (8006b3c <do_memp_malloc_pool+0x4c>)
 8006b22:	4807      	ldr	r0, [pc, #28]	; (8006b40 <do_memp_malloc_pool+0x50>)
 8006b24:	f010 f8f8 	bl	8016d18 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e000      	b.n	8006b2e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08018100 	.word	0x08018100
 8006b3c:	08018130 	.word	0x08018130
 8006b40:	08018154 	.word	0x08018154

08006b44 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d908      	bls.n	8006b66 <memp_malloc+0x22>
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <memp_malloc+0x3c>)
 8006b56:	f240 1257 	movw	r2, #343	; 0x157
 8006b5a:	490a      	ldr	r1, [pc, #40]	; (8006b84 <memp_malloc+0x40>)
 8006b5c:	480a      	ldr	r0, [pc, #40]	; (8006b88 <memp_malloc+0x44>)
 8006b5e:	f010 f8db 	bl	8016d18 <iprintf>
 8006b62:	2300      	movs	r3, #0
 8006b64:	e008      	b.n	8006b78 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <memp_malloc+0x48>)
 8006b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ffbe 	bl	8006af0 <do_memp_malloc_pool>
 8006b74:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08018100 	.word	0x08018100
 8006b84:	08018190 	.word	0x08018190
 8006b88:	08018154 	.word	0x08018154
 8006b8c:	0801a940 	.word	0x0801a940

08006b90 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <do_memp_free_pool+0x22>
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <do_memp_free_pool+0x40>)
 8006ba6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006baa:	490a      	ldr	r1, [pc, #40]	; (8006bd4 <do_memp_free_pool+0x44>)
 8006bac:	480a      	ldr	r0, [pc, #40]	; (8006bd8 <do_memp_free_pool+0x48>)
 8006bae:	f010 f8b3 	bl	8016d18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	08018100 	.word	0x08018100
 8006bd4:	080181b0 	.word	0x080181b0
 8006bd8:	08018154 	.word	0x08018154

08006bdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d907      	bls.n	8006bfe <memp_free+0x22>
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <memp_free+0x44>)
 8006bf0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006bf4:	490b      	ldr	r1, [pc, #44]	; (8006c24 <memp_free+0x48>)
 8006bf6:	480c      	ldr	r0, [pc, #48]	; (8006c28 <memp_free+0x4c>)
 8006bf8:	f010 f88e 	bl	8016d18 <iprintf>
 8006bfc:	e00c      	b.n	8006c18 <memp_free+0x3c>

  if (mem == NULL) {
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d008      	beq.n	8006c16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <memp_free+0x50>)
 8006c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff ffbe 	bl	8006b90 <do_memp_free_pool>
 8006c14:	e000      	b.n	8006c18 <memp_free+0x3c>
    return;
 8006c16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08018100 	.word	0x08018100
 8006c24:	080181d0 	.word	0x080181d0
 8006c28:	08018154 	.word	0x08018154
 8006c2c:	0801a940 	.word	0x0801a940

08006c30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d108      	bne.n	8006c66 <netif_add+0x26>
 8006c54:	4b57      	ldr	r3, [pc, #348]	; (8006db4 <netif_add+0x174>)
 8006c56:	f240 1227 	movw	r2, #295	; 0x127
 8006c5a:	4957      	ldr	r1, [pc, #348]	; (8006db8 <netif_add+0x178>)
 8006c5c:	4857      	ldr	r0, [pc, #348]	; (8006dbc <netif_add+0x17c>)
 8006c5e:	f010 f85b 	bl	8016d18 <iprintf>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e0a2      	b.n	8006dac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <netif_add+0x3e>
 8006c6c:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <netif_add+0x174>)
 8006c6e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006c72:	4953      	ldr	r1, [pc, #332]	; (8006dc0 <netif_add+0x180>)
 8006c74:	4851      	ldr	r0, [pc, #324]	; (8006dbc <netif_add+0x17c>)
 8006c76:	f010 f84f 	bl	8016d18 <iprintf>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e096      	b.n	8006dac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006c84:	4b4f      	ldr	r3, [pc, #316]	; (8006dc4 <netif_add+0x184>)
 8006c86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006c8e:	4b4d      	ldr	r3, [pc, #308]	; (8006dc4 <netif_add+0x184>)
 8006c90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006c98:	4b4a      	ldr	r3, [pc, #296]	; (8006dc4 <netif_add+0x184>)
 8006c9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <netif_add+0x188>)
 8006cb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a3a      	ldr	r2, [r7, #32]
 8006ccc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006cce:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <netif_add+0x18c>)
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cdc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f913 	bl	8006f10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	4798      	blx	r3
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <netif_add+0xba>
    return NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e058      	b.n	8006dac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d00:	2bff      	cmp	r3, #255	; 0xff
 8006d02:	d103      	bne.n	8006d0c <netif_add+0xcc>
        netif->num = 0;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d10:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <netif_add+0x190>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e02b      	b.n	8006d70 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d106      	bne.n	8006d2e <netif_add+0xee>
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <netif_add+0x174>)
 8006d22:	f240 128b 	movw	r2, #395	; 0x18b
 8006d26:	492b      	ldr	r1, [pc, #172]	; (8006dd4 <netif_add+0x194>)
 8006d28:	4824      	ldr	r0, [pc, #144]	; (8006dbc <netif_add+0x17c>)
 8006d2a:	f00f fff5 	bl	8016d18 <iprintf>
        num_netifs++;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3301      	adds	r3, #1
 8006d32:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	dd06      	ble.n	8006d48 <netif_add+0x108>
 8006d3a:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <netif_add+0x174>)
 8006d3c:	f240 128d 	movw	r2, #397	; 0x18d
 8006d40:	4925      	ldr	r1, [pc, #148]	; (8006dd8 <netif_add+0x198>)
 8006d42:	481e      	ldr	r0, [pc, #120]	; (8006dbc <netif_add+0x17c>)
 8006d44:	f00f ffe8 	bl	8016d18 <iprintf>
        if (netif2->num == netif->num) {
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d108      	bne.n	8006d6a <netif_add+0x12a>
          netif->num++;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006d68:	e005      	b.n	8006d76 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1d0      	bne.n	8006d18 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1be      	bne.n	8006cfa <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d82:	2bfe      	cmp	r3, #254	; 0xfe
 8006d84:	d103      	bne.n	8006d8e <netif_add+0x14e>
    netif_num = 0;
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <netif_add+0x18c>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	e006      	b.n	8006d9c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d94:	3301      	adds	r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <netif_add+0x18c>)
 8006d9a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <netif_add+0x190>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006da4:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <netif_add+0x190>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006daa:	68fb      	ldr	r3, [r7, #12]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	080181ec 	.word	0x080181ec
 8006db8:	08018280 	.word	0x08018280
 8006dbc:	0801823c 	.word	0x0801823c
 8006dc0:	0801829c 	.word	0x0801829c
 8006dc4:	0801a9a4 	.word	0x0801a9a4
 8006dc8:	08007123 	.word	0x08007123
 8006dcc:	200000cc 	.word	0x200000cc
 8006dd0:	2000695c 	.word	0x2000695c
 8006dd4:	080182c0 	.word	0x080182c0
 8006dd8:	080182d4 	.word	0x080182d4

08006ddc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 fd8f 	bl	800990c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f007 fac7 	bl	800e384 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <netif_do_set_ipaddr+0x20>
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <netif_do_set_ipaddr+0x88>)
 8006e14:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006e18:	491c      	ldr	r1, [pc, #112]	; (8006e8c <netif_do_set_ipaddr+0x8c>)
 8006e1a:	481d      	ldr	r0, [pc, #116]	; (8006e90 <netif_do_set_ipaddr+0x90>)
 8006e1c:	f00f ff7c 	bl	8016d18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <netif_do_set_ipaddr+0x34>
 8006e26:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <netif_do_set_ipaddr+0x88>)
 8006e28:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006e2c:	4917      	ldr	r1, [pc, #92]	; (8006e8c <netif_do_set_ipaddr+0x8c>)
 8006e2e:	4818      	ldr	r0, [pc, #96]	; (8006e90 <netif_do_set_ipaddr+0x90>)
 8006e30:	f00f ff72 	bl	8016d18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d01c      	beq.n	8006e7c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006e52:	f107 0314 	add.w	r3, r7, #20
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ffbf 	bl	8006ddc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <netif_do_set_ipaddr+0x6a>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	e000      	b.n	8006e6c <netif_do_set_ipaddr+0x6c>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006e70:	2101      	movs	r1, #1
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f8d2 	bl	800701c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	080181ec 	.word	0x080181ec
 8006e8c:	08018304 	.word	0x08018304
 8006e90:	0801823c 	.word	0x0801823c

08006e94 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d00a      	beq.n	8006ec4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <netif_do_set_netmask+0x26>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	e000      	b.n	8006ebc <netif_do_set_netmask+0x28>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d00a      	beq.n	8006f02 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <netif_do_set_gw+0x26>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	e000      	b.n	8006efa <netif_do_set_gw+0x28>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006f2c:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <netif_set_addr+0x90>)
 8006f2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006f36:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <netif_set_addr+0x90>)
 8006f38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <netif_set_addr+0x90>)
 8006f42:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <netif_set_addr+0x42>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <netif_set_addr+0x46>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <netif_set_addr+0x48>
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006f60:	f107 0310 	add.w	r3, r7, #16
 8006f64:	461a      	mov	r2, r3
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff ff49 	bl	8006e00 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff ff8e 	bl	8006e94 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff ffa8 	bl	8006ed2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff ff35 	bl	8006e00 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006f96:	bf00      	nop
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	0801a9a4 	.word	0x0801a9a4

08006fa4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006fac:	4a04      	ldr	r2, [pc, #16]	; (8006fc0 <netif_set_default+0x1c>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20006960 	.word	0x20006960

08006fc4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <netif_set_up+0x1e>
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <netif_set_up+0x4c>)
 8006fd4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006fd8:	490e      	ldr	r1, [pc, #56]	; (8007014 <netif_set_up+0x50>)
 8006fda:	480f      	ldr	r0, [pc, #60]	; (8007018 <netif_set_up+0x54>)
 8006fdc:	f00f fe9c 	bl	8016d18 <iprintf>
 8006fe0:	e013      	b.n	800700a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10c      	bne.n	800700a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007002:	2103      	movs	r1, #3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f809 	bl	800701c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	080181ec 	.word	0x080181ec
 8007014:	08018374 	.word	0x08018374
 8007018:	0801823c 	.word	0x0801823c

0800701c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <netif_issue_reports+0x20>
 800702e:	4b18      	ldr	r3, [pc, #96]	; (8007090 <netif_issue_reports+0x74>)
 8007030:	f240 326d 	movw	r2, #877	; 0x36d
 8007034:	4917      	ldr	r1, [pc, #92]	; (8007094 <netif_issue_reports+0x78>)
 8007036:	4818      	ldr	r0, [pc, #96]	; (8007098 <netif_issue_reports+0x7c>)
 8007038:	f00f fe6e 	bl	8016d18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01e      	beq.n	8007088 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007050:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d013      	beq.n	800708a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3304      	adds	r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00e      	beq.n	800708a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f008 f8e9 	bl	800f258 <etharp_request>
 8007086:	e000      	b.n	800708a <netif_issue_reports+0x6e>
    return;
 8007088:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	080181ec 	.word	0x080181ec
 8007094:	08018390 	.word	0x08018390
 8007098:	0801823c 	.word	0x0801823c

0800709c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d107      	bne.n	80070ba <netif_set_down+0x1e>
 80070aa:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <netif_set_down+0x58>)
 80070ac:	f240 329b 	movw	r2, #923	; 0x39b
 80070b0:	4911      	ldr	r1, [pc, #68]	; (80070f8 <netif_set_down+0x5c>)
 80070b2:	4812      	ldr	r0, [pc, #72]	; (80070fc <netif_set_down+0x60>)
 80070b4:	f00f fe30 	bl	8016d18 <iprintf>
 80070b8:	e019      	b.n	80070ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d012      	beq.n	80070ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f007 fc73 	bl	800e9d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	080181ec 	.word	0x080181ec
 80070f8:	080183b4 	.word	0x080183b4
 80070fc:	0801823c 	.word	0x0801823c

08007100 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	61da      	str	r2, [r3, #28]
  }
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800712e:	f06f 030b 	mvn.w	r3, #11
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d013      	beq.n	8007178 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <netif_get_by_index+0x48>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	e00c      	b.n	8007172 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800715e:	3301      	adds	r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	429a      	cmp	r2, r3
 8007166:	d101      	bne.n	800716c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	e006      	b.n	800717a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1ef      	bne.n	8007158 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000695c 	.word	0x2000695c

0800718c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <pbuf_free_ooseq+0x38>)
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007198:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <pbuf_free_ooseq+0x3c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	607b      	str	r3, [r7, #4]
 800719e:	e00a      	b.n	80071b6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 fbed 	bl	8009988 <tcp_free_ooseq>
      return;
 80071ae:	e005      	b.n	80071bc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f1      	bne.n	80071a0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20006964 	.word	0x20006964
 80071c8:	2000696c 	.word	0x2000696c

080071cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <pbuf_pool_is_empty+0x14>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80071d6:	bf00      	nop
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	20006964 	.word	0x20006964

080071e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	460b      	mov	r3, r1
 80071f4:	80fb      	strh	r3, [r7, #6]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88ba      	ldrh	r2, [r7, #4]
 8007210:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007212:	8b3b      	ldrh	r3, [r7, #24]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	7f3a      	ldrb	r2, [r7, #28]
 800721e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	73da      	strb	r2, [r3, #15]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08c      	sub	sp, #48	; 0x30
 800723c:	af02      	add	r7, sp, #8
 800723e:	4603      	mov	r3, r0
 8007240:	71fb      	strb	r3, [r7, #7]
 8007242:	460b      	mov	r3, r1
 8007244:	80bb      	strh	r3, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800724e:	887b      	ldrh	r3, [r7, #2]
 8007250:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007254:	d07f      	beq.n	8007356 <pbuf_alloc+0x11e>
 8007256:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800725a:	f300 80c8 	bgt.w	80073ee <pbuf_alloc+0x1b6>
 800725e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007262:	d010      	beq.n	8007286 <pbuf_alloc+0x4e>
 8007264:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007268:	f300 80c1 	bgt.w	80073ee <pbuf_alloc+0x1b6>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d002      	beq.n	8007276 <pbuf_alloc+0x3e>
 8007270:	2b41      	cmp	r3, #65	; 0x41
 8007272:	f040 80bc 	bne.w	80073ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	88bb      	ldrh	r3, [r7, #4]
 800727a:	4619      	mov	r1, r3
 800727c:	2000      	movs	r0, #0
 800727e:	f000 f8d1 	bl	8007424 <pbuf_alloc_reference>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007284:	e0bd      	b.n	8007402 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007286:	2300      	movs	r3, #0
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800728e:	88bb      	ldrh	r3, [r7, #4]
 8007290:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007292:	2008      	movs	r0, #8
 8007294:	f7ff fc56 	bl	8006b44 <memp_malloc>
 8007298:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d109      	bne.n	80072b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072a0:	f7ff ff94 	bl	80071cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ac:	f000 faa8 	bl	8007800 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e0a7      	b.n	8007404 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b6:	3303      	adds	r3, #3
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f023 0303 	bic.w	r3, r3, #3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8b7a      	ldrh	r2, [r7, #26]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	bf28      	it	cs
 80072cc:	4613      	movcs	r3, r2
 80072ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80072d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072d2:	3310      	adds	r3, #16
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	3303      	adds	r3, #3
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	4618      	mov	r0, r3
 80072e0:	89f9      	ldrh	r1, [r7, #14]
 80072e2:	8b7a      	ldrh	r2, [r7, #26]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	887b      	ldrh	r3, [r7, #2]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	460b      	mov	r3, r1
 80072ee:	4601      	mov	r1, r0
 80072f0:	6938      	ldr	r0, [r7, #16]
 80072f2:	f7ff ff77 	bl	80071e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d006      	beq.n	8007310 <pbuf_alloc+0xd8>
 8007302:	4b42      	ldr	r3, [pc, #264]	; (800740c <pbuf_alloc+0x1d4>)
 8007304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007308:	4941      	ldr	r1, [pc, #260]	; (8007410 <pbuf_alloc+0x1d8>)
 800730a:	4842      	ldr	r0, [pc, #264]	; (8007414 <pbuf_alloc+0x1dc>)
 800730c:	f00f fd04 	bl	8016d18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007312:	3303      	adds	r3, #3
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800731c:	d106      	bne.n	800732c <pbuf_alloc+0xf4>
 800731e:	4b3b      	ldr	r3, [pc, #236]	; (800740c <pbuf_alloc+0x1d4>)
 8007320:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007324:	493c      	ldr	r1, [pc, #240]	; (8007418 <pbuf_alloc+0x1e0>)
 8007326:	483b      	ldr	r0, [pc, #236]	; (8007414 <pbuf_alloc+0x1dc>)
 8007328:	f00f fcf6 	bl	8016d18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
 8007336:	e002      	b.n	800733e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007342:	8b7a      	ldrh	r2, [r7, #26]
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800734e:	8b7b      	ldrh	r3, [r7, #26]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19e      	bne.n	8007292 <pbuf_alloc+0x5a>
      break;
 8007354:	e055      	b.n	8007402 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007356:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007358:	3303      	adds	r3, #3
 800735a:	b29b      	uxth	r3, r3
 800735c:	f023 0303 	bic.w	r3, r3, #3
 8007360:	b29a      	uxth	r2, r3
 8007362:	88bb      	ldrh	r3, [r7, #4]
 8007364:	3303      	adds	r3, #3
 8007366:	b29b      	uxth	r3, r3
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	b29b      	uxth	r3, r3
 800736e:	4413      	add	r3, r2
 8007370:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007372:	8b3b      	ldrh	r3, [r7, #24]
 8007374:	3310      	adds	r3, #16
 8007376:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007378:	8b3a      	ldrh	r2, [r7, #24]
 800737a:	88bb      	ldrh	r3, [r7, #4]
 800737c:	3303      	adds	r3, #3
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	429a      	cmp	r2, r3
 8007384:	d306      	bcc.n	8007394 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007386:	8afa      	ldrh	r2, [r7, #22]
 8007388:	88bb      	ldrh	r3, [r7, #4]
 800738a:	3303      	adds	r3, #3
 800738c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007390:	429a      	cmp	r2, r3
 8007392:	d201      	bcs.n	8007398 <pbuf_alloc+0x160>
        return NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	e035      	b.n	8007404 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fa64 	bl	8006868 <mem_malloc>
 80073a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <pbuf_alloc+0x174>
        return NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e02b      	b.n	8007404 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ae:	3310      	adds	r3, #16
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	4413      	add	r3, r2
 80073b4:	3303      	adds	r3, #3
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	4618      	mov	r0, r3
 80073bc:	88b9      	ldrh	r1, [r7, #4]
 80073be:	88ba      	ldrh	r2, [r7, #4]
 80073c0:	2300      	movs	r3, #0
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	460b      	mov	r3, r1
 80073ca:	4601      	mov	r1, r0
 80073cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ce:	f7ff ff09 	bl	80071e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <pbuf_alloc+0x1c8>
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <pbuf_alloc+0x1d4>)
 80073e0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80073e4:	490d      	ldr	r1, [pc, #52]	; (800741c <pbuf_alloc+0x1e4>)
 80073e6:	480b      	ldr	r0, [pc, #44]	; (8007414 <pbuf_alloc+0x1dc>)
 80073e8:	f00f fc96 	bl	8016d18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80073ec:	e008      	b.n	8007400 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <pbuf_alloc+0x1d4>)
 80073f0:	f240 1227 	movw	r2, #295	; 0x127
 80073f4:	490a      	ldr	r1, [pc, #40]	; (8007420 <pbuf_alloc+0x1e8>)
 80073f6:	4807      	ldr	r0, [pc, #28]	; (8007414 <pbuf_alloc+0x1dc>)
 80073f8:	f00f fc8e 	bl	8016d18 <iprintf>
      return NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e001      	b.n	8007404 <pbuf_alloc+0x1cc>
      break;
 8007400:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	0801841c 	.word	0x0801841c
 8007410:	0801844c 	.word	0x0801844c
 8007414:	0801847c 	.word	0x0801847c
 8007418:	080184a4 	.word	0x080184a4
 800741c:	080184d8 	.word	0x080184d8
 8007420:	08018504 	.word	0x08018504

08007424 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af02      	add	r7, sp, #8
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	807b      	strh	r3, [r7, #2]
 8007430:	4613      	mov	r3, r2
 8007432:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007434:	883b      	ldrh	r3, [r7, #0]
 8007436:	2b41      	cmp	r3, #65	; 0x41
 8007438:	d009      	beq.n	800744e <pbuf_alloc_reference+0x2a>
 800743a:	883b      	ldrh	r3, [r7, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d006      	beq.n	800744e <pbuf_alloc_reference+0x2a>
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <pbuf_alloc_reference+0x5c>)
 8007442:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007446:	490f      	ldr	r1, [pc, #60]	; (8007484 <pbuf_alloc_reference+0x60>)
 8007448:	480f      	ldr	r0, [pc, #60]	; (8007488 <pbuf_alloc_reference+0x64>)
 800744a:	f00f fc65 	bl	8016d18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800744e:	2007      	movs	r0, #7
 8007450:	f7ff fb78 	bl	8006b44 <memp_malloc>
 8007454:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	e00b      	b.n	8007478 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007460:	8879      	ldrh	r1, [r7, #2]
 8007462:	887a      	ldrh	r2, [r7, #2]
 8007464:	2300      	movs	r3, #0
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	883b      	ldrh	r3, [r7, #0]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	460b      	mov	r3, r1
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff feb7 	bl	80071e4 <pbuf_init_alloced_pbuf>
  return p;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0801841c 	.word	0x0801841c
 8007484:	08018520 	.word	0x08018520
 8007488:	0801847c 	.word	0x0801847c

0800748c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af02      	add	r7, sp, #8
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	460b      	mov	r3, r1
 800749a:	81bb      	strh	r3, [r7, #12]
 800749c:	4613      	mov	r3, r2
 800749e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074a4:	8a7b      	ldrh	r3, [r7, #18]
 80074a6:	3303      	adds	r3, #3
 80074a8:	f023 0203 	bic.w	r2, r3, #3
 80074ac:	89bb      	ldrh	r3, [r7, #12]
 80074ae:	441a      	add	r2, r3
 80074b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d901      	bls.n	80074ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e018      	b.n	80074ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80074c0:	8a7b      	ldrh	r3, [r7, #18]
 80074c2:	3303      	adds	r3, #3
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	6a3a      	ldr	r2, [r7, #32]
 80074ca:	4413      	add	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e001      	b.n	80074d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	89b9      	ldrh	r1, [r7, #12]
 80074d8:	89ba      	ldrh	r2, [r7, #12]
 80074da:	2302      	movs	r3, #2
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	460b      	mov	r3, r1
 80074e4:	6979      	ldr	r1, [r7, #20]
 80074e6:	f7ff fe7d 	bl	80071e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80074ea:	687b      	ldr	r3, [r7, #4]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <pbuf_realloc+0x20>
 8007506:	4b3a      	ldr	r3, [pc, #232]	; (80075f0 <pbuf_realloc+0xfc>)
 8007508:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800750c:	4939      	ldr	r1, [pc, #228]	; (80075f4 <pbuf_realloc+0x100>)
 800750e:	483a      	ldr	r0, [pc, #232]	; (80075f8 <pbuf_realloc+0x104>)
 8007510:	f00f fc02 	bl	8016d18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	891b      	ldrh	r3, [r3, #8]
 8007518:	887a      	ldrh	r2, [r7, #2]
 800751a:	429a      	cmp	r2, r3
 800751c:	d263      	bcs.n	80075e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	891a      	ldrh	r2, [r3, #8]
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007528:	887b      	ldrh	r3, [r7, #2]
 800752a:	817b      	strh	r3, [r7, #10]
  q = p;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007530:	e018      	b.n	8007564 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	895b      	ldrh	r3, [r3, #10]
 8007536:	897a      	ldrh	r2, [r7, #10]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	891a      	ldrh	r2, [r3, #8]
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <pbuf_realloc+0x70>
 8007556:	4b26      	ldr	r3, [pc, #152]	; (80075f0 <pbuf_realloc+0xfc>)
 8007558:	f240 12af 	movw	r2, #431	; 0x1af
 800755c:	4927      	ldr	r1, [pc, #156]	; (80075fc <pbuf_realloc+0x108>)
 800755e:	4826      	ldr	r0, [pc, #152]	; (80075f8 <pbuf_realloc+0x104>)
 8007560:	f00f fbda 	bl	8016d18 <iprintf>
  while (rem_len > q->len) {
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	895b      	ldrh	r3, [r3, #10]
 8007568:	897a      	ldrh	r2, [r7, #10]
 800756a:	429a      	cmp	r2, r3
 800756c:	d8e1      	bhi.n	8007532 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7b1b      	ldrb	r3, [r3, #12]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	2b00      	cmp	r3, #0
 8007578:	d121      	bne.n	80075be <pbuf_realloc+0xca>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	895b      	ldrh	r3, [r3, #10]
 800757e:	897a      	ldrh	r2, [r7, #10]
 8007580:	429a      	cmp	r2, r3
 8007582:	d01c      	beq.n	80075be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7b5b      	ldrb	r3, [r3, #13]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d116      	bne.n	80075be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	b29a      	uxth	r2, r3
 800759a:	897b      	ldrh	r3, [r7, #10]
 800759c:	4413      	add	r3, r2
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff f864 	bl	8006670 <mem_trim>
 80075a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <pbuf_realloc+0xca>
 80075b0:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <pbuf_realloc+0xfc>)
 80075b2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80075b6:	4912      	ldr	r1, [pc, #72]	; (8007600 <pbuf_realloc+0x10c>)
 80075b8:	480f      	ldr	r0, [pc, #60]	; (80075f8 <pbuf_realloc+0x104>)
 80075ba:	f00f fbad 	bl	8016d18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	897a      	ldrh	r2, [r7, #10]
 80075c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	895a      	ldrh	r2, [r3, #10]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f911 	bl	8007800 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e000      	b.n	80075e8 <pbuf_realloc+0xf4>
    return;
 80075e6:	bf00      	nop

}
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	0801841c 	.word	0x0801841c
 80075f4:	08018534 	.word	0x08018534
 80075f8:	0801847c 	.word	0x0801847c
 80075fc:	0801854c 	.word	0x0801854c
 8007600:	08018564 	.word	0x08018564

08007604 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <pbuf_add_header_impl+0x22>
 8007618:	4b2b      	ldr	r3, [pc, #172]	; (80076c8 <pbuf_add_header_impl+0xc4>)
 800761a:	f240 12df 	movw	r2, #479	; 0x1df
 800761e:	492b      	ldr	r1, [pc, #172]	; (80076cc <pbuf_add_header_impl+0xc8>)
 8007620:	482b      	ldr	r0, [pc, #172]	; (80076d0 <pbuf_add_header_impl+0xcc>)
 8007622:	f00f fb79 	bl	8016d18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <pbuf_add_header_impl+0x30>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007632:	d301      	bcc.n	8007638 <pbuf_add_header_impl+0x34>
    return 1;
 8007634:	2301      	movs	r3, #1
 8007636:	e043      	b.n	80076c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <pbuf_add_header_impl+0x3e>
    return 0;
 800763e:	2300      	movs	r3, #0
 8007640:	e03e      	b.n	80076c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	891a      	ldrh	r2, [r3, #8]
 800764a:	8a7b      	ldrh	r3, [r7, #18]
 800764c:	4413      	add	r3, r2
 800764e:	b29b      	uxth	r3, r3
 8007650:	8a7a      	ldrh	r2, [r7, #18]
 8007652:	429a      	cmp	r2, r3
 8007654:	d901      	bls.n	800765a <pbuf_add_header_impl+0x56>
    return 1;
 8007656:	2301      	movs	r3, #1
 8007658:	e032      	b.n	80076c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	7b1b      	ldrb	r3, [r3, #12]
 800765e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007660:	8a3b      	ldrh	r3, [r7, #16]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00c      	beq.n	8007684 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	425b      	negs	r3, r3
 8007672:	4413      	add	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3310      	adds	r3, #16
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	429a      	cmp	r2, r3
 800767e:	d20d      	bcs.n	800769c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007680:	2301      	movs	r3, #1
 8007682:	e01d      	b.n	80076c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d006      	beq.n	8007698 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	425b      	negs	r3, r3
 8007692:	4413      	add	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e001      	b.n	800769c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007698:	2301      	movs	r3, #1
 800769a:	e011      	b.n	80076c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	895a      	ldrh	r2, [r3, #10]
 80076a6:	8a7b      	ldrh	r3, [r7, #18]
 80076a8:	4413      	add	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	891a      	ldrh	r2, [r3, #8]
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	4413      	add	r3, r2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0801841c 	.word	0x0801841c
 80076cc:	08018580 	.word	0x08018580
 80076d0:	0801847c 	.word	0x0801847c

080076d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff ff8e 	bl	8007604 <pbuf_add_header_impl>
 80076e8:	4603      	mov	r3, r0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <pbuf_remove_header+0x1e>
 8007704:	4b20      	ldr	r3, [pc, #128]	; (8007788 <pbuf_remove_header+0x94>)
 8007706:	f240 224b 	movw	r2, #587	; 0x24b
 800770a:	4920      	ldr	r1, [pc, #128]	; (800778c <pbuf_remove_header+0x98>)
 800770c:	4820      	ldr	r0, [pc, #128]	; (8007790 <pbuf_remove_header+0x9c>)
 800770e:	f00f fb03 	bl	8016d18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <pbuf_remove_header+0x2c>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771e:	d301      	bcc.n	8007724 <pbuf_remove_header+0x30>
    return 1;
 8007720:	2301      	movs	r3, #1
 8007722:	e02c      	b.n	800777e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <pbuf_remove_header+0x3a>
    return 0;
 800772a:	2300      	movs	r3, #0
 800772c:	e027      	b.n	800777e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	895b      	ldrh	r3, [r3, #10]
 8007736:	89fa      	ldrh	r2, [r7, #14]
 8007738:	429a      	cmp	r2, r3
 800773a:	d908      	bls.n	800774e <pbuf_remove_header+0x5a>
 800773c:	4b12      	ldr	r3, [pc, #72]	; (8007788 <pbuf_remove_header+0x94>)
 800773e:	f240 2255 	movw	r2, #597	; 0x255
 8007742:	4914      	ldr	r1, [pc, #80]	; (8007794 <pbuf_remove_header+0xa0>)
 8007744:	4812      	ldr	r0, [pc, #72]	; (8007790 <pbuf_remove_header+0x9c>)
 8007746:	f00f fae7 	bl	8016d18 <iprintf>
 800774a:	2301      	movs	r3, #1
 800774c:	e017      	b.n	800777e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	441a      	add	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	895a      	ldrh	r2, [r3, #10]
 8007764:	89fb      	ldrh	r3, [r7, #14]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	891a      	ldrh	r2, [r3, #8]
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	0801841c 	.word	0x0801841c
 800778c:	08018580 	.word	0x08018580
 8007790:	0801847c 	.word	0x0801847c
 8007794:	0801858c 	.word	0x0801858c

08007798 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
 80077a4:	4613      	mov	r3, r2
 80077a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da08      	bge.n	80077c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077b4:	425b      	negs	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff9b 	bl	80076f4 <pbuf_remove_header>
 80077be:	4603      	mov	r3, r0
 80077c0:	e007      	b.n	80077d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80077c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077c6:	787a      	ldrb	r2, [r7, #1]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff ff1a 	bl	8007604 <pbuf_add_header_impl>
 80077d0:	4603      	mov	r3, r0
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80077e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077ea:	2201      	movs	r2, #1
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff ffd2 	bl	8007798 <pbuf_header_impl>
 80077f4:	4603      	mov	r3, r0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <pbuf_free+0x22>
 8007814:	4b38      	ldr	r3, [pc, #224]	; (80078f8 <pbuf_free+0xf8>)
 8007816:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800781a:	4938      	ldr	r1, [pc, #224]	; (80078fc <pbuf_free+0xfc>)
 800781c:	4838      	ldr	r0, [pc, #224]	; (8007900 <pbuf_free+0x100>)
 800781e:	f00f fa7b 	bl	8016d18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007822:	2300      	movs	r3, #0
 8007824:	e063      	b.n	80078ee <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800782a:	e05c      	b.n	80078e6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7b9b      	ldrb	r3, [r3, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <pbuf_free+0x42>
 8007834:	4b30      	ldr	r3, [pc, #192]	; (80078f8 <pbuf_free+0xf8>)
 8007836:	f240 22f1 	movw	r2, #753	; 0x2f1
 800783a:	4932      	ldr	r1, [pc, #200]	; (8007904 <pbuf_free+0x104>)
 800783c:	4830      	ldr	r0, [pc, #192]	; (8007900 <pbuf_free+0x100>)
 800783e:	f00f fa6b 	bl	8016d18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7b9b      	ldrb	r3, [r3, #14]
 8007846:	3b01      	subs	r3, #1
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	739a      	strb	r2, [r3, #14]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7b9b      	ldrb	r3, [r3, #14]
 8007852:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007854:	7dbb      	ldrb	r3, [r7, #22]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d143      	bne.n	80078e2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7b1b      	ldrb	r3, [r3, #12]
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7b5b      	ldrb	r3, [r3, #13]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d011      	beq.n	800789a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <pbuf_free+0x90>
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <pbuf_free+0xf8>)
 8007884:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007888:	491f      	ldr	r1, [pc, #124]	; (8007908 <pbuf_free+0x108>)
 800788a:	481d      	ldr	r0, [pc, #116]	; (8007900 <pbuf_free+0x100>)
 800788c:	f00f fa44 	bl	8016d18 <iprintf>
        pc->custom_free_function(p);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
 8007898:	e01d      	b.n	80078d6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d104      	bne.n	80078aa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	2008      	movs	r0, #8
 80078a4:	f7ff f99a 	bl	8006bdc <memp_free>
 80078a8:	e015      	b.n	80078d6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d104      	bne.n	80078ba <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	2007      	movs	r0, #7
 80078b4:	f7ff f992 	bl	8006bdc <memp_free>
 80078b8:	e00d      	b.n	80078d6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <pbuf_free+0xc8>
          mem_free(p);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe fe6b 	bl	800659c <mem_free>
 80078c6:	e006      	b.n	80078d6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <pbuf_free+0xf8>)
 80078ca:	f240 320f 	movw	r2, #783	; 0x30f
 80078ce:	490f      	ldr	r1, [pc, #60]	; (800790c <pbuf_free+0x10c>)
 80078d0:	480b      	ldr	r0, [pc, #44]	; (8007900 <pbuf_free+0x100>)
 80078d2:	f00f fa21 	bl	8016d18 <iprintf>
        }
      }
      count++;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	3301      	adds	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	e001      	b.n	80078e6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d19f      	bne.n	800782c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	0801841c 	.word	0x0801841c
 80078fc:	08018580 	.word	0x08018580
 8007900:	0801847c 	.word	0x0801847c
 8007904:	080185ac 	.word	0x080185ac
 8007908:	080185c4 	.word	0x080185c4
 800790c:	080185e8 	.word	0x080185e8

08007910 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800791c:	e005      	b.n	800792a <pbuf_clen+0x1a>
    ++len;
 800791e:	89fb      	ldrh	r3, [r7, #14]
 8007920:	3301      	adds	r3, #1
 8007922:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f6      	bne.n	800791e <pbuf_clen+0xe>
  }
  return len;
 8007930:	89fb      	ldrh	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d010      	beq.n	8007970 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7b9b      	ldrb	r3, [r3, #14]
 8007952:	3301      	adds	r3, #1
 8007954:	b2da      	uxtb	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7b9b      	ldrb	r3, [r3, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <pbuf_ref+0x30>
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <pbuf_ref+0x38>)
 8007964:	f240 3242 	movw	r2, #834	; 0x342
 8007968:	4904      	ldr	r1, [pc, #16]	; (800797c <pbuf_ref+0x3c>)
 800796a:	4805      	ldr	r0, [pc, #20]	; (8007980 <pbuf_ref+0x40>)
 800796c:	f00f f9d4 	bl	8016d18 <iprintf>
  }
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	0801841c 	.word	0x0801841c
 800797c:	080185fc 	.word	0x080185fc
 8007980:	0801847c 	.word	0x0801847c

08007984 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <pbuf_cat+0x16>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <pbuf_cat+0x26>
 800799a:	4b20      	ldr	r3, [pc, #128]	; (8007a1c <pbuf_cat+0x98>)
 800799c:	f240 3259 	movw	r2, #857	; 0x359
 80079a0:	491f      	ldr	r1, [pc, #124]	; (8007a20 <pbuf_cat+0x9c>)
 80079a2:	4820      	ldr	r0, [pc, #128]	; (8007a24 <pbuf_cat+0xa0>)
 80079a4:	f00f f9b8 	bl	8016d18 <iprintf>
 80079a8:	e034      	b.n	8007a14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e00a      	b.n	80079c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	891a      	ldrh	r2, [r3, #8]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	891b      	ldrh	r3, [r3, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f0      	bne.n	80079b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	891a      	ldrh	r2, [r3, #8]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	895b      	ldrh	r3, [r3, #10]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d006      	beq.n	80079e8 <pbuf_cat+0x64>
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <pbuf_cat+0x98>)
 80079dc:	f240 3262 	movw	r2, #866	; 0x362
 80079e0:	4911      	ldr	r1, [pc, #68]	; (8007a28 <pbuf_cat+0xa4>)
 80079e2:	4810      	ldr	r0, [pc, #64]	; (8007a24 <pbuf_cat+0xa0>)
 80079e4:	f00f f998 	bl	8016d18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <pbuf_cat+0x7a>
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <pbuf_cat+0x98>)
 80079f2:	f240 3263 	movw	r2, #867	; 0x363
 80079f6:	490d      	ldr	r1, [pc, #52]	; (8007a2c <pbuf_cat+0xa8>)
 80079f8:	480a      	ldr	r0, [pc, #40]	; (8007a24 <pbuf_cat+0xa0>)
 80079fa:	f00f f98d 	bl	8016d18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	891b      	ldrh	r3, [r3, #8]
 8007a06:	4413      	add	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	0801841c 	.word	0x0801841c
 8007a20:	08018610 	.word	0x08018610
 8007a24:	0801847c 	.word	0x0801847c
 8007a28:	08018648 	.word	0x08018648
 8007a2c:	08018678 	.word	0x08018678

08007a30 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff ffa1 	bl	8007984 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007a42:	6838      	ldr	r0, [r7, #0]
 8007a44:	f7ff ff7c 	bl	8007940 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <pbuf_copy+0x2a>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <pbuf_copy+0x2a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	891a      	ldrh	r2, [r3, #8]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	891b      	ldrh	r3, [r3, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d209      	bcs.n	8007a8e <pbuf_copy+0x3e>
 8007a7a:	4b57      	ldr	r3, [pc, #348]	; (8007bd8 <pbuf_copy+0x188>)
 8007a7c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007a80:	4956      	ldr	r1, [pc, #344]	; (8007bdc <pbuf_copy+0x18c>)
 8007a82:	4857      	ldr	r0, [pc, #348]	; (8007be0 <pbuf_copy+0x190>)
 8007a84:	f00f f948 	bl	8016d18 <iprintf>
 8007a88:	f06f 030f 	mvn.w	r3, #15
 8007a8c:	e09f      	b.n	8007bce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	895b      	ldrh	r3, [r3, #10]
 8007a92:	461a      	mov	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	895b      	ldrh	r3, [r3, #10]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1acb      	subs	r3, r1, r3
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d306      	bcc.n	8007ab4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	895b      	ldrh	r3, [r3, #10]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e005      	b.n	8007ac0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	895b      	ldrh	r3, [r3, #10]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	18d0      	adds	r0, r2, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	4413      	add	r3, r2
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f00f f90a 	bl	8016cec <memcpy>
    offset_to += len;
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	895b      	ldrh	r3, [r3, #10]
 8007aec:	461a      	mov	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d906      	bls.n	8007b02 <pbuf_copy+0xb2>
 8007af4:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <pbuf_copy+0x188>)
 8007af6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007afa:	493a      	ldr	r1, [pc, #232]	; (8007be4 <pbuf_copy+0x194>)
 8007afc:	4838      	ldr	r0, [pc, #224]	; (8007be0 <pbuf_copy+0x190>)
 8007afe:	f00f f90b 	bl	8016d18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	895b      	ldrh	r3, [r3, #10]
 8007b06:	461a      	mov	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d906      	bls.n	8007b1c <pbuf_copy+0xcc>
 8007b0e:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <pbuf_copy+0x188>)
 8007b10:	f240 32da 	movw	r2, #986	; 0x3da
 8007b14:	4934      	ldr	r1, [pc, #208]	; (8007be8 <pbuf_copy+0x198>)
 8007b16:	4832      	ldr	r0, [pc, #200]	; (8007be0 <pbuf_copy+0x190>)
 8007b18:	f00f f8fe 	bl	8016d18 <iprintf>
    if (offset_from >= p_from->len) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	895b      	ldrh	r3, [r3, #10]
 8007b20:	461a      	mov	r2, r3
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d304      	bcc.n	8007b32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	895b      	ldrh	r3, [r3, #10]
 8007b36:	461a      	mov	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d114      	bne.n	8007b68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10c      	bne.n	8007b68 <pbuf_copy+0x118>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <pbuf_copy+0x118>
 8007b54:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <pbuf_copy+0x188>)
 8007b56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007b5a:	4924      	ldr	r1, [pc, #144]	; (8007bec <pbuf_copy+0x19c>)
 8007b5c:	4820      	ldr	r0, [pc, #128]	; (8007be0 <pbuf_copy+0x190>)
 8007b5e:	f00f f8db 	bl	8016d18 <iprintf>
 8007b62:	f06f 030f 	mvn.w	r3, #15
 8007b66:	e032      	b.n	8007bce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <pbuf_copy+0x146>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	895a      	ldrh	r2, [r3, #10]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	891b      	ldrh	r3, [r3, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d10d      	bne.n	8007b96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <pbuf_copy+0x146>
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <pbuf_copy+0x188>)
 8007b84:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007b88:	4919      	ldr	r1, [pc, #100]	; (8007bf0 <pbuf_copy+0x1a0>)
 8007b8a:	4815      	ldr	r0, [pc, #84]	; (8007be0 <pbuf_copy+0x190>)
 8007b8c:	f00f f8c4 	bl	8016d18 <iprintf>
 8007b90:	f06f 0305 	mvn.w	r3, #5
 8007b94:	e01b      	b.n	8007bce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d013      	beq.n	8007bc4 <pbuf_copy+0x174>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	895a      	ldrh	r2, [r3, #10]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	891b      	ldrh	r3, [r3, #8]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d10d      	bne.n	8007bc4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <pbuf_copy+0x174>
 8007bb0:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <pbuf_copy+0x188>)
 8007bb2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007bb6:	490e      	ldr	r1, [pc, #56]	; (8007bf0 <pbuf_copy+0x1a0>)
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <pbuf_copy+0x190>)
 8007bba:	f00f f8ad 	bl	8016d18 <iprintf>
 8007bbe:	f06f 0305 	mvn.w	r3, #5
 8007bc2:	e004      	b.n	8007bce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f47f af61 	bne.w	8007a8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	0801841c 	.word	0x0801841c
 8007bdc:	080186c4 	.word	0x080186c4
 8007be0:	0801847c 	.word	0x0801847c
 8007be4:	080186f4 	.word	0x080186f4
 8007be8:	0801870c 	.word	0x0801870c
 8007bec:	08018728 	.word	0x08018728
 8007bf0:	08018738 	.word	0x08018738

08007bf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	460b      	mov	r3, r1
 8007c04:	80fb      	strh	r3, [r7, #6]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d108      	bne.n	8007c2a <pbuf_copy_partial+0x36>
 8007c18:	4b2b      	ldr	r3, [pc, #172]	; (8007cc8 <pbuf_copy_partial+0xd4>)
 8007c1a:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c1e:	492b      	ldr	r1, [pc, #172]	; (8007ccc <pbuf_copy_partial+0xd8>)
 8007c20:	482b      	ldr	r0, [pc, #172]	; (8007cd0 <pbuf_copy_partial+0xdc>)
 8007c22:	f00f f879 	bl	8016d18 <iprintf>
 8007c26:	2300      	movs	r3, #0
 8007c28:	e04a      	b.n	8007cc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d108      	bne.n	8007c42 <pbuf_copy_partial+0x4e>
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <pbuf_copy_partial+0xd4>)
 8007c32:	f240 420b 	movw	r2, #1035	; 0x40b
 8007c36:	4927      	ldr	r1, [pc, #156]	; (8007cd4 <pbuf_copy_partial+0xe0>)
 8007c38:	4825      	ldr	r0, [pc, #148]	; (8007cd0 <pbuf_copy_partial+0xdc>)
 8007c3a:	f00f f86d 	bl	8016d18 <iprintf>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e03e      	b.n	8007cc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	e034      	b.n	8007cb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c48:	88bb      	ldrh	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <pbuf_copy_partial+0x70>
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	895b      	ldrh	r3, [r3, #10]
 8007c52:	88ba      	ldrh	r2, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d305      	bcc.n	8007c64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	88ba      	ldrh	r2, [r7, #4]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	80bb      	strh	r3, [r7, #4]
 8007c62:	e023      	b.n	8007cac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	895a      	ldrh	r2, [r3, #10]
 8007c68:	88bb      	ldrh	r3, [r7, #4]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007c6e:	8b3a      	ldrh	r2, [r7, #24]
 8007c70:	88fb      	ldrh	r3, [r7, #6]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d901      	bls.n	8007c7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007c7a:	8b7b      	ldrh	r3, [r7, #26]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	18d0      	adds	r0, r2, r3
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	88bb      	ldrh	r3, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	8b3a      	ldrh	r2, [r7, #24]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	f00f f82e 	bl	8016cec <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007c90:	8afa      	ldrh	r2, [r7, #22]
 8007c92:	8b3b      	ldrh	r3, [r7, #24]
 8007c94:	4413      	add	r3, r2
 8007c96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007c98:	8b7a      	ldrh	r2, [r7, #26]
 8007c9a:	8b3b      	ldrh	r3, [r7, #24]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ca0:	88fa      	ldrh	r2, [r7, #6]
 8007ca2:	8b3b      	ldrh	r3, [r7, #24]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <pbuf_copy_partial+0xca>
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1c4      	bne.n	8007c48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	0801841c 	.word	0x0801841c
 8007ccc:	08018764 	.word	0x08018764
 8007cd0:	0801847c 	.word	0x0801847c
 8007cd4:	08018784 	.word	0x08018784

08007cd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	603a      	str	r2, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	8919      	ldrh	r1, [r3, #8]
 8007cec:	88ba      	ldrh	r2, [r7, #4]
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff faa1 	bl	8007238 <pbuf_alloc>
 8007cf6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <pbuf_clone+0x2a>
    return NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e011      	b.n	8007d26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fea3 	bl	8007a50 <pbuf_copy>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d006      	beq.n	8007d24 <pbuf_clone+0x4c>
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <pbuf_clone+0x58>)
 8007d18:	f240 5224 	movw	r2, #1316	; 0x524
 8007d1c:	4905      	ldr	r1, [pc, #20]	; (8007d34 <pbuf_clone+0x5c>)
 8007d1e:	4806      	ldr	r0, [pc, #24]	; (8007d38 <pbuf_clone+0x60>)
 8007d20:	f00e fffa 	bl	8016d18 <iprintf>
  return q;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	0801841c 	.word	0x0801841c
 8007d34:	08018890 	.word	0x08018890
 8007d38:	0801847c 	.word	0x0801847c

08007d3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007d40:	f00f f878 	bl	8016e34 <rand>
 8007d44:	4603      	mov	r3, r0
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	4b01      	ldr	r3, [pc, #4]	; (8007d5c <tcp_init+0x20>)
 8007d56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	2000000a 	.word	0x2000000a

08007d60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7d1b      	ldrb	r3, [r3, #20]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d105      	bne.n	8007d7c <tcp_free+0x1c>
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <tcp_free+0x2c>)
 8007d72:	22d4      	movs	r2, #212	; 0xd4
 8007d74:	4906      	ldr	r1, [pc, #24]	; (8007d90 <tcp_free+0x30>)
 8007d76:	4807      	ldr	r0, [pc, #28]	; (8007d94 <tcp_free+0x34>)
 8007d78:	f00e ffce 	bl	8016d18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	2001      	movs	r0, #1
 8007d80:	f7fe ff2c 	bl	8006bdc <memp_free>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	0801891c 	.word	0x0801891c
 8007d90:	0801894c 	.word	0x0801894c
 8007d94:	08018960 	.word	0x08018960

08007d98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d105      	bne.n	8007db4 <tcp_free_listen+0x1c>
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <tcp_free_listen+0x2c>)
 8007daa:	22df      	movs	r2, #223	; 0xdf
 8007dac:	4906      	ldr	r1, [pc, #24]	; (8007dc8 <tcp_free_listen+0x30>)
 8007dae:	4807      	ldr	r0, [pc, #28]	; (8007dcc <tcp_free_listen+0x34>)
 8007db0:	f00e ffb2 	bl	8016d18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	2002      	movs	r0, #2
 8007db8:	f7fe ff10 	bl	8006bdc <memp_free>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	0801891c 	.word	0x0801891c
 8007dc8:	08018988 	.word	0x08018988
 8007dcc:	08018960 	.word	0x08018960

08007dd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007dd4:	f001 f85c 	bl	8008e90 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007dd8:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <tcp_tmr+0x28>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <tcp_tmr+0x28>)
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <tcp_tmr+0x28>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007df0:	f000 fd0e 	bl	8008810 <tcp_slowtmr>
  }
}
 8007df4:	bf00      	nop
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	200000cd 	.word	0x200000cd

08007dfc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d105      	bne.n	8007e18 <tcp_remove_listener+0x1c>
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <tcp_remove_listener+0x48>)
 8007e0e:	22ff      	movs	r2, #255	; 0xff
 8007e10:	490d      	ldr	r1, [pc, #52]	; (8007e48 <tcp_remove_listener+0x4c>)
 8007e12:	480e      	ldr	r0, [pc, #56]	; (8007e4c <tcp_remove_listener+0x50>)
 8007e14:	f00e ff80 	bl	8016d18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e00a      	b.n	8007e34 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d102      	bne.n	8007e2e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f1      	bne.n	8007e1e <tcp_remove_listener+0x22>
    }
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	0801891c 	.word	0x0801891c
 8007e48:	080189a4 	.word	0x080189a4
 8007e4c:	08018960 	.word	0x08018960

08007e50 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <tcp_listen_closed+0x1c>
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <tcp_listen_closed+0x60>)
 8007e60:	f240 1211 	movw	r2, #273	; 0x111
 8007e64:	4913      	ldr	r1, [pc, #76]	; (8007eb4 <tcp_listen_closed+0x64>)
 8007e66:	4814      	ldr	r0, [pc, #80]	; (8007eb8 <tcp_listen_closed+0x68>)
 8007e68:	f00e ff56 	bl	8016d18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7d1b      	ldrb	r3, [r3, #20]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d006      	beq.n	8007e82 <tcp_listen_closed+0x32>
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <tcp_listen_closed+0x60>)
 8007e76:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007e7a:	4910      	ldr	r1, [pc, #64]	; (8007ebc <tcp_listen_closed+0x6c>)
 8007e7c:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <tcp_listen_closed+0x68>)
 8007e7e:	f00e ff4b 	bl	8016d18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007e82:	2301      	movs	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	e00b      	b.n	8007ea0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <tcp_listen_closed+0x70>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ffb1 	bl	8007dfc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d9f0      	bls.n	8007e88 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	0801891c 	.word	0x0801891c
 8007eb4:	080189cc 	.word	0x080189cc
 8007eb8:	08018960 	.word	0x08018960
 8007ebc:	080189d8 	.word	0x080189d8
 8007ec0:	0801a97c 	.word	0x0801a97c

08007ec4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007ec4:	b5b0      	push	{r4, r5, r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <tcp_close_shutdown+0x20>
 8007ed6:	4b63      	ldr	r3, [pc, #396]	; (8008064 <tcp_close_shutdown+0x1a0>)
 8007ed8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007edc:	4962      	ldr	r1, [pc, #392]	; (8008068 <tcp_close_shutdown+0x1a4>)
 8007ede:	4863      	ldr	r0, [pc, #396]	; (800806c <tcp_close_shutdown+0x1a8>)
 8007ee0:	f00e ff1a 	bl	8016d18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d066      	beq.n	8007fb8 <tcp_close_shutdown+0xf4>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7d1b      	ldrb	r3, [r3, #20]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d003      	beq.n	8007efa <tcp_close_shutdown+0x36>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7d1b      	ldrb	r3, [r3, #20]
 8007ef6:	2b07      	cmp	r3, #7
 8007ef8:	d15e      	bne.n	8007fb8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <tcp_close_shutdown+0x48>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f0a:	d055      	beq.n	8007fb8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8b5b      	ldrh	r3, [r3, #26]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <tcp_close_shutdown+0x62>
 8007f18:	4b52      	ldr	r3, [pc, #328]	; (8008064 <tcp_close_shutdown+0x1a0>)
 8007f1a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007f1e:	4954      	ldr	r1, [pc, #336]	; (8008070 <tcp_close_shutdown+0x1ac>)
 8007f20:	4852      	ldr	r0, [pc, #328]	; (800806c <tcp_close_shutdown+0x1a8>)
 8007f22:	f00e fef9 	bl	8016d18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007f2e:	687d      	ldr	r5, [r7, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	8ad2      	ldrh	r2, [r2, #22]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	8b09      	ldrh	r1, [r1, #24]
 8007f3c:	9102      	str	r1, [sp, #8]
 8007f3e:	9201      	str	r2, [sp, #4]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	462b      	mov	r3, r5
 8007f44:	4622      	mov	r2, r4
 8007f46:	4601      	mov	r1, r0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f005 fd85 	bl	800da58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fb66 	bl	8009620 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f54:	4b47      	ldr	r3, [pc, #284]	; (8008074 <tcp_close_shutdown+0x1b0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d105      	bne.n	8007f6a <tcp_close_shutdown+0xa6>
 8007f5e:	4b45      	ldr	r3, [pc, #276]	; (8008074 <tcp_close_shutdown+0x1b0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4a43      	ldr	r2, [pc, #268]	; (8008074 <tcp_close_shutdown+0x1b0>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e013      	b.n	8007f92 <tcp_close_shutdown+0xce>
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <tcp_close_shutdown+0x1b0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e00c      	b.n	8007f8c <tcp_close_shutdown+0xc8>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d104      	bne.n	8007f86 <tcp_close_shutdown+0xc2>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	60da      	str	r2, [r3, #12]
 8007f84:	e005      	b.n	8007f92 <tcp_close_shutdown+0xce>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1ef      	bne.n	8007f72 <tcp_close_shutdown+0xae>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	60da      	str	r2, [r3, #12]
 8007f98:	4b37      	ldr	r3, [pc, #220]	; (8008078 <tcp_close_shutdown+0x1b4>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007f9e:	4b37      	ldr	r3, [pc, #220]	; (800807c <tcp_close_shutdown+0x1b8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d102      	bne.n	8007fae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007fa8:	f003 fffa 	bl	800bfa0 <tcp_trigger_input_pcb_close>
 8007fac:	e002      	b.n	8007fb4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fed6 	bl	8007d60 <tcp_free>
      }
      return ERR_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e050      	b.n	800805a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7d1b      	ldrb	r3, [r3, #20]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d03b      	beq.n	8008038 <tcp_close_shutdown+0x174>
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	dc44      	bgt.n	800804e <tcp_close_shutdown+0x18a>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <tcp_close_shutdown+0x10a>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d02a      	beq.n	8008022 <tcp_close_shutdown+0x15e>
 8007fcc:	e03f      	b.n	800804e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	8adb      	ldrh	r3, [r3, #22]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d021      	beq.n	800801a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <tcp_close_shutdown+0x1bc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d105      	bne.n	8007fec <tcp_close_shutdown+0x128>
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <tcp_close_shutdown+0x1bc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	4a26      	ldr	r2, [pc, #152]	; (8008080 <tcp_close_shutdown+0x1bc>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e013      	b.n	8008014 <tcp_close_shutdown+0x150>
 8007fec:	4b24      	ldr	r3, [pc, #144]	; (8008080 <tcp_close_shutdown+0x1bc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	e00c      	b.n	800800e <tcp_close_shutdown+0x14a>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d104      	bne.n	8008008 <tcp_close_shutdown+0x144>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	e005      	b.n	8008014 <tcp_close_shutdown+0x150>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1ef      	bne.n	8007ff4 <tcp_close_shutdown+0x130>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff fea0 	bl	8007d60 <tcp_free>
      break;
 8008020:	e01a      	b.n	8008058 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff ff14 	bl	8007e50 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4816      	ldr	r0, [pc, #88]	; (8008084 <tcp_close_shutdown+0x1c0>)
 800802c:	f001 fb48 	bl	80096c0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff feb1 	bl	8007d98 <tcp_free_listen>
      break;
 8008036:	e00f      	b.n	8008058 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	480e      	ldr	r0, [pc, #56]	; (8008074 <tcp_close_shutdown+0x1b0>)
 800803c:	f001 fb40 	bl	80096c0 <tcp_pcb_remove>
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <tcp_close_shutdown+0x1b4>)
 8008042:	2201      	movs	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fe8a 	bl	8007d60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800804c:	e004      	b.n	8008058 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f81a 	bl	8008088 <tcp_close_shutdown_fin>
 8008054:	4603      	mov	r3, r0
 8008056:	e000      	b.n	800805a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bdb0      	pop	{r4, r5, r7, pc}
 8008062:	bf00      	nop
 8008064:	0801891c 	.word	0x0801891c
 8008068:	080189f0 	.word	0x080189f0
 800806c:	08018960 	.word	0x08018960
 8008070:	08018a10 	.word	0x08018a10
 8008074:	2000696c 	.word	0x2000696c
 8008078:	20006968 	.word	0x20006968
 800807c:	20006980 	.word	0x20006980
 8008080:	20006978 	.word	0x20006978
 8008084:	20006974 	.word	0x20006974

08008088 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <tcp_close_shutdown_fin+0x1c>
 8008096:	4b2e      	ldr	r3, [pc, #184]	; (8008150 <tcp_close_shutdown_fin+0xc8>)
 8008098:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800809c:	492d      	ldr	r1, [pc, #180]	; (8008154 <tcp_close_shutdown_fin+0xcc>)
 800809e:	482e      	ldr	r0, [pc, #184]	; (8008158 <tcp_close_shutdown_fin+0xd0>)
 80080a0:	f00e fe3a 	bl	8016d18 <iprintf>

  switch (pcb->state) {
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7d1b      	ldrb	r3, [r3, #20]
 80080a8:	2b07      	cmp	r3, #7
 80080aa:	d020      	beq.n	80080ee <tcp_close_shutdown_fin+0x66>
 80080ac:	2b07      	cmp	r3, #7
 80080ae:	dc2b      	bgt.n	8008108 <tcp_close_shutdown_fin+0x80>
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d002      	beq.n	80080ba <tcp_close_shutdown_fin+0x32>
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d00d      	beq.n	80080d4 <tcp_close_shutdown_fin+0x4c>
 80080b8:	e026      	b.n	8008108 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f004 fdda 	bl	800cc74 <tcp_send_fin>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d11f      	bne.n	800810c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2205      	movs	r2, #5
 80080d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080d2:	e01b      	b.n	800810c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f004 fdcd 	bl	800cc74 <tcp_send_fin>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d114      	bne.n	8008110 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2205      	movs	r2, #5
 80080ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080ec:	e010      	b.n	8008110 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f004 fdc0 	bl	800cc74 <tcp_send_fin>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2209      	movs	r2, #9
 8008104:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008106:	e005      	b.n	8008114 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e01c      	b.n	8008146 <tcp_close_shutdown_fin+0xbe>
      break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <tcp_close_shutdown_fin+0x8e>
      break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <tcp_close_shutdown_fin+0x8e>
      break;
 8008114:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f004 fee6 	bl	800cef0 <tcp_output>
 8008124:	e00d      	b.n	8008142 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d108      	bne.n	8008142 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8b5b      	ldrh	r3, [r3, #26]
 8008134:	f043 0308 	orr.w	r3, r3, #8
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	e001      	b.n	8008146 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	0801891c 	.word	0x0801891c
 8008154:	080189cc 	.word	0x080189cc
 8008158:	08018960 	.word	0x08018960

0800815c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <tcp_close+0x22>
 800816a:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <tcp_close+0x4c>)
 800816c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008170:	490e      	ldr	r1, [pc, #56]	; (80081ac <tcp_close+0x50>)
 8008172:	480f      	ldr	r0, [pc, #60]	; (80081b0 <tcp_close+0x54>)
 8008174:	f00e fdd0 	bl	8016d18 <iprintf>
 8008178:	f06f 030f 	mvn.w	r3, #15
 800817c:	e00f      	b.n	800819e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	7d1b      	ldrb	r3, [r3, #20]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d006      	beq.n	8008194 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8b5b      	ldrh	r3, [r3, #26]
 800818a:	f043 0310 	orr.w	r3, r3, #16
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008194:	2101      	movs	r1, #1
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe94 	bl	8007ec4 <tcp_close_shutdown>
 800819c:	4603      	mov	r3, r0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	0801891c 	.word	0x0801891c
 80081ac:	08018a2c 	.word	0x08018a2c
 80081b0:	08018960 	.word	0x08018960

080081b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08e      	sub	sp, #56	; 0x38
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d107      	bne.n	80081d4 <tcp_abandon+0x20>
 80081c4:	4b52      	ldr	r3, [pc, #328]	; (8008310 <tcp_abandon+0x15c>)
 80081c6:	f240 223d 	movw	r2, #573	; 0x23d
 80081ca:	4952      	ldr	r1, [pc, #328]	; (8008314 <tcp_abandon+0x160>)
 80081cc:	4852      	ldr	r0, [pc, #328]	; (8008318 <tcp_abandon+0x164>)
 80081ce:	f00e fda3 	bl	8016d18 <iprintf>
 80081d2:	e099      	b.n	8008308 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d106      	bne.n	80081ea <tcp_abandon+0x36>
 80081dc:	4b4c      	ldr	r3, [pc, #304]	; (8008310 <tcp_abandon+0x15c>)
 80081de:	f44f 7210 	mov.w	r2, #576	; 0x240
 80081e2:	494e      	ldr	r1, [pc, #312]	; (800831c <tcp_abandon+0x168>)
 80081e4:	484c      	ldr	r0, [pc, #304]	; (8008318 <tcp_abandon+0x164>)
 80081e6:	f00e fd97 	bl	8016d18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7d1b      	ldrb	r3, [r3, #20]
 80081ee:	2b0a      	cmp	r3, #10
 80081f0:	d107      	bne.n	8008202 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	484a      	ldr	r0, [pc, #296]	; (8008320 <tcp_abandon+0x16c>)
 80081f6:	f001 fa63 	bl	80096c0 <tcp_pcb_remove>
    tcp_free(pcb);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fdb0 	bl	8007d60 <tcp_free>
 8008200:	e082      	b.n	8008308 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7d1b      	ldrb	r3, [r3, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d126      	bne.n	800827a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	8adb      	ldrh	r3, [r3, #22]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02e      	beq.n	8008292 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008234:	4b3b      	ldr	r3, [pc, #236]	; (8008324 <tcp_abandon+0x170>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d105      	bne.n	800824a <tcp_abandon+0x96>
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <tcp_abandon+0x170>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	4a37      	ldr	r2, [pc, #220]	; (8008324 <tcp_abandon+0x170>)
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	e013      	b.n	8008272 <tcp_abandon+0xbe>
 800824a:	4b36      	ldr	r3, [pc, #216]	; (8008324 <tcp_abandon+0x170>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e00c      	b.n	800826c <tcp_abandon+0xb8>
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	429a      	cmp	r2, r3
 800825a:	d104      	bne.n	8008266 <tcp_abandon+0xb2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	e005      	b.n	8008272 <tcp_abandon+0xbe>
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1ef      	bne.n	8008252 <tcp_abandon+0x9e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	60da      	str	r2, [r3, #12]
 8008278:	e00b      	b.n	8008292 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8adb      	ldrh	r3, [r3, #22]
 8008282:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	4828      	ldr	r0, [pc, #160]	; (8008328 <tcp_abandon+0x174>)
 8008288:	f001 fa1a 	bl	80096c0 <tcp_pcb_remove>
 800828c:	4b27      	ldr	r3, [pc, #156]	; (800832c <tcp_abandon+0x178>)
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fed6 	bl	8009050 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fecd 	bl	8009050 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fec4 	bl	8009050 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00e      	beq.n	80082ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	8b12      	ldrh	r2, [r2, #24]
 80082d8:	9202      	str	r2, [sp, #8]
 80082da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80082dc:	9201      	str	r2, [sp, #4]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	460b      	mov	r3, r1
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f005 fbb6 	bl	800da58 <tcp_rst>
    }
    last_state = pcb->state;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7d1b      	ldrb	r3, [r3, #20]
 80082f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fd34 	bl	8007d60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <tcp_abandon+0x154>
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f06f 010c 	mvn.w	r1, #12
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	4798      	blx	r3
  }
}
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0801891c 	.word	0x0801891c
 8008314:	08018a60 	.word	0x08018a60
 8008318:	08018960 	.word	0x08018960
 800831c:	08018a7c 	.word	0x08018a7c
 8008320:	2000697c 	.word	0x2000697c
 8008324:	20006978 	.word	0x20006978
 8008328:	2000696c 	.word	0x2000696c
 800832c:	20006968 	.word	0x20006968

08008330 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008338:	2101      	movs	r1, #1
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff ff3a 	bl	80081b4 <tcp_abandon>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008356:	2304      	movs	r3, #4
 8008358:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008360:	4b3e      	ldr	r3, [pc, #248]	; (800845c <tcp_bind+0x114>)
 8008362:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <tcp_bind+0x36>
 800836a:	4b3d      	ldr	r3, [pc, #244]	; (8008460 <tcp_bind+0x118>)
 800836c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008370:	493c      	ldr	r1, [pc, #240]	; (8008464 <tcp_bind+0x11c>)
 8008372:	483d      	ldr	r0, [pc, #244]	; (8008468 <tcp_bind+0x120>)
 8008374:	f00e fcd0 	bl	8016d18 <iprintf>
 8008378:	f06f 030f 	mvn.w	r3, #15
 800837c:	e06a      	b.n	8008454 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	7d1b      	ldrb	r3, [r3, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <tcp_bind+0x52>
 8008386:	4b36      	ldr	r3, [pc, #216]	; (8008460 <tcp_bind+0x118>)
 8008388:	f240 22ab 	movw	r2, #683	; 0x2ab
 800838c:	4937      	ldr	r1, [pc, #220]	; (800846c <tcp_bind+0x124>)
 800838e:	4836      	ldr	r0, [pc, #216]	; (8008468 <tcp_bind+0x120>)
 8008390:	f00e fcc2 	bl	8016d18 <iprintf>
 8008394:	f06f 0305 	mvn.w	r3, #5
 8008398:	e05c      	b.n	8008454 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80083a0:	f000 f9f0 	bl	8008784 <tcp_new_port>
 80083a4:	4603      	mov	r3, r0
 80083a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d135      	bne.n	800841a <tcp_bind+0xd2>
      return ERR_BUF;
 80083ae:	f06f 0301 	mvn.w	r3, #1
 80083b2:	e04f      	b.n	8008454 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	e02b      	b.n	8008412 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083ba:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <tcp_bind+0x128>)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	e01e      	b.n	8008406 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	8adb      	ldrh	r3, [r3, #22]
 80083cc:	88fa      	ldrh	r2, [r7, #6]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d116      	bne.n	8008400 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80083d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d010      	beq.n	80083fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <tcp_bind+0xb2>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d102      	bne.n	8008400 <tcp_bind+0xb8>
              return ERR_USE;
 80083fa:	f06f 0307 	mvn.w	r3, #7
 80083fe:	e029      	b.n	8008454 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1dd      	bne.n	80083c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	3301      	adds	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	429a      	cmp	r2, r3
 8008418:	dbcf      	blt.n	80083ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00c      	beq.n	800843a <tcp_bind+0xf2>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <tcp_bind+0xec>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	e000      	b.n	8008436 <tcp_bind+0xee>
 8008434:	2300      	movs	r3, #0
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <tcp_bind+0x12c>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	60da      	str	r2, [r3, #12]
 8008448:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <tcp_bind+0x12c>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	f005 fcc5 	bl	800dddc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	0801a9a4 	.word	0x0801a9a4
 8008460:	0801891c 	.word	0x0801891c
 8008464:	08018ab0 	.word	0x08018ab0
 8008468:	08018960 	.word	0x08018960
 800846c:	08018ac8 	.word	0x08018ac8
 8008470:	0801a97c 	.word	0x0801a97c
 8008474:	20006978 	.word	0x20006978

08008478 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <tcp_accept_null+0x22>
 800848c:	4b07      	ldr	r3, [pc, #28]	; (80084ac <tcp_accept_null+0x34>)
 800848e:	f240 320f 	movw	r2, #783	; 0x30f
 8008492:	4907      	ldr	r1, [pc, #28]	; (80084b0 <tcp_accept_null+0x38>)
 8008494:	4807      	ldr	r0, [pc, #28]	; (80084b4 <tcp_accept_null+0x3c>)
 8008496:	f00e fc3f 	bl	8016d18 <iprintf>

  tcp_abort(pcb);
 800849a:	68b8      	ldr	r0, [r7, #8]
 800849c:	f7ff ff48 	bl	8008330 <tcp_abort>

  return ERR_ABRT;
 80084a0:	f06f 030c 	mvn.w	r3, #12
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	0801891c 	.word	0x0801891c
 80084b0:	08018af0 	.word	0x08018af0
 80084b4:	08018960 	.word	0x08018960

080084b8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	2200      	movs	r2, #0
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f806 	bl	80084dc <tcp_listen_with_backlog_and_err>
 80084d0:	4603      	mov	r3, r0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	460b      	mov	r3, r1
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d109      	bne.n	8008508 <tcp_listen_with_backlog_and_err+0x2c>
 80084f4:	4b47      	ldr	r3, [pc, #284]	; (8008614 <tcp_listen_with_backlog_and_err+0x138>)
 80084f6:	f240 3259 	movw	r2, #857	; 0x359
 80084fa:	4947      	ldr	r1, [pc, #284]	; (8008618 <tcp_listen_with_backlog_and_err+0x13c>)
 80084fc:	4847      	ldr	r0, [pc, #284]	; (800861c <tcp_listen_with_backlog_and_err+0x140>)
 80084fe:	f00e fc0b 	bl	8016d18 <iprintf>
 8008502:	23f0      	movs	r3, #240	; 0xf0
 8008504:	76fb      	strb	r3, [r7, #27]
 8008506:	e079      	b.n	80085fc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	7d1b      	ldrb	r3, [r3, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <tcp_listen_with_backlog_and_err+0x48>
 8008510:	4b40      	ldr	r3, [pc, #256]	; (8008614 <tcp_listen_with_backlog_and_err+0x138>)
 8008512:	f240 325a 	movw	r2, #858	; 0x35a
 8008516:	4942      	ldr	r1, [pc, #264]	; (8008620 <tcp_listen_with_backlog_and_err+0x144>)
 8008518:	4840      	ldr	r0, [pc, #256]	; (800861c <tcp_listen_with_backlog_and_err+0x140>)
 800851a:	f00e fbfd 	bl	8016d18 <iprintf>
 800851e:	23f1      	movs	r3, #241	; 0xf1
 8008520:	76fb      	strb	r3, [r7, #27]
 8008522:	e06b      	b.n	80085fc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d104      	bne.n	8008536 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008530:	23f7      	movs	r3, #247	; 0xf7
 8008532:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008534:	e062      	b.n	80085fc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008536:	2002      	movs	r0, #2
 8008538:	f7fe fb04 	bl	8006b44 <memp_malloc>
 800853c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008544:	23ff      	movs	r3, #255	; 0xff
 8008546:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008548:	e058      	b.n	80085fc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8ada      	ldrh	r2, [r3, #22]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2201      	movs	r2, #1
 800855e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7d5a      	ldrb	r2, [r3, #21]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	7a5a      	ldrb	r2, [r3, #9]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2200      	movs	r2, #0
 8008574:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	7ada      	ldrb	r2, [r3, #11]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	7a9a      	ldrb	r2, [r3, #10]
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8adb      	ldrh	r3, [r3, #22]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d021      	beq.n	80085da <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008596:	4b23      	ldr	r3, [pc, #140]	; (8008624 <tcp_listen_with_backlog_and_err+0x148>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d105      	bne.n	80085ac <tcp_listen_with_backlog_and_err+0xd0>
 80085a0:	4b20      	ldr	r3, [pc, #128]	; (8008624 <tcp_listen_with_backlog_and_err+0x148>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <tcp_listen_with_backlog_and_err+0x148>)
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e013      	b.n	80085d4 <tcp_listen_with_backlog_and_err+0xf8>
 80085ac:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <tcp_listen_with_backlog_and_err+0x148>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e00c      	b.n	80085ce <tcp_listen_with_backlog_and_err+0xf2>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d104      	bne.n	80085c8 <tcp_listen_with_backlog_and_err+0xec>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	60da      	str	r2, [r3, #12]
 80085c6:	e005      	b.n	80085d4 <tcp_listen_with_backlog_and_err+0xf8>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1ef      	bne.n	80085b4 <tcp_listen_with_backlog_and_err+0xd8>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff fbc0 	bl	8007d60 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	4a11      	ldr	r2, [pc, #68]	; (8008628 <tcp_listen_with_backlog_and_err+0x14c>)
 80085e4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <tcp_listen_with_backlog_and_err+0x150>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	4a0f      	ldr	r2, [pc, #60]	; (800862c <tcp_listen_with_backlog_and_err+0x150>)
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	f005 fbf2 	bl	800dddc <tcp_timer_needed>
  res = ERR_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7efa      	ldrb	r2, [r7, #27]
 8008606:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008608:	69fb      	ldr	r3, [r7, #28]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	0801891c 	.word	0x0801891c
 8008618:	08018b10 	.word	0x08018b10
 800861c:	08018960 	.word	0x08018960
 8008620:	08018b40 	.word	0x08018b40
 8008624:	20006978 	.word	0x20006978
 8008628:	08008479 	.word	0x08008479
 800862c:	20006974 	.word	0x20006974

08008630 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <tcp_update_rcv_ann_wnd+0x1c>
 800863e:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008640:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008644:	4924      	ldr	r1, [pc, #144]	; (80086d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008646:	4825      	ldr	r0, [pc, #148]	; (80086dc <tcp_update_rcv_ann_wnd+0xac>)
 8008648:	f00e fb66 	bl	8016d18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008654:	4413      	add	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008660:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008664:	bf28      	it	cs
 8008666:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800866a:	b292      	uxth	r2, r2
 800866c:	4413      	add	r3, r2
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	db08      	blt.n	8008688 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	e020      	b.n	80086ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd03      	ble.n	800869e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800869c:	e014      	b.n	80086c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b0:	d306      	bcc.n	80086c0 <tcp_update_rcv_ann_wnd+0x90>
 80086b2:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80086b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80086b8:	4909      	ldr	r1, [pc, #36]	; (80086e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80086ba:	4808      	ldr	r0, [pc, #32]	; (80086dc <tcp_update_rcv_ann_wnd+0xac>)
 80086bc:	f00e fb2c 	bl	8016d18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80086c8:	2300      	movs	r3, #0
  }
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	0801891c 	.word	0x0801891c
 80086d8:	08018b78 	.word	0x08018b78
 80086dc:	08018960 	.word	0x08018960
 80086e0:	08018b9c 	.word	0x08018b9c

080086e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <tcp_recved+0x22>
 80086f6:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <tcp_recved+0x90>)
 80086f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80086fc:	491e      	ldr	r1, [pc, #120]	; (8008778 <tcp_recved+0x94>)
 80086fe:	481f      	ldr	r0, [pc, #124]	; (800877c <tcp_recved+0x98>)
 8008700:	f00e fb0a 	bl	8016d18 <iprintf>
 8008704:	e032      	b.n	800876c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7d1b      	ldrb	r3, [r3, #20]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d106      	bne.n	800871c <tcp_recved+0x38>
 800870e:	4b19      	ldr	r3, [pc, #100]	; (8008774 <tcp_recved+0x90>)
 8008710:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008714:	491a      	ldr	r1, [pc, #104]	; (8008780 <tcp_recved+0x9c>)
 8008716:	4819      	ldr	r0, [pc, #100]	; (800877c <tcp_recved+0x98>)
 8008718:	f00e fafe 	bl	8016d18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008720:	887b      	ldrh	r3, [r7, #2]
 8008722:	4413      	add	r3, r2
 8008724:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008726:	89fb      	ldrh	r3, [r7, #14]
 8008728:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800872c:	d804      	bhi.n	8008738 <tcp_recved+0x54>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008732:	89fa      	ldrh	r2, [r7, #14]
 8008734:	429a      	cmp	r2, r3
 8008736:	d204      	bcs.n	8008742 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800873e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008740:	e002      	b.n	8008748 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	89fa      	ldrh	r2, [r7, #14]
 8008746:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff ff71 	bl	8008630 <tcp_update_rcv_ann_wnd>
 800874e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008756:	d309      	bcc.n	800876c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8b5b      	ldrh	r3, [r3, #26]
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f004 fbc2 	bl	800cef0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	0801891c 	.word	0x0801891c
 8008778:	08018bb8 	.word	0x08018bb8
 800877c:	08018960 	.word	0x08018960
 8008780:	08018bd0 	.word	0x08018bd0

08008784 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800878e:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <tcp_new_port+0x84>)
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	4b1c      	ldr	r3, [pc, #112]	; (8008808 <tcp_new_port+0x84>)
 8008798:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <tcp_new_port+0x84>)
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d103      	bne.n	80087ae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80087a6:	4b18      	ldr	r3, [pc, #96]	; (8008808 <tcp_new_port+0x84>)
 80087a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80087ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087ae:	2300      	movs	r3, #0
 80087b0:	71fb      	strb	r3, [r7, #7]
 80087b2:	e01e      	b.n	80087f2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	4a15      	ldr	r2, [pc, #84]	; (800880c <tcp_new_port+0x88>)
 80087b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	e011      	b.n	80087e6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	8ada      	ldrh	r2, [r3, #22]
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <tcp_new_port+0x84>)
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d108      	bne.n	80087e0 <tcp_new_port+0x5c>
        n++;
 80087ce:	88bb      	ldrh	r3, [r7, #4]
 80087d0:	3301      	adds	r3, #1
 80087d2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80087d4:	88bb      	ldrh	r3, [r7, #4]
 80087d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087da:	d3d8      	bcc.n	800878e <tcp_new_port+0xa>
          return 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	e00d      	b.n	80087fc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1ea      	bne.n	80087c2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	3301      	adds	r3, #1
 80087f0:	71fb      	strb	r3, [r7, #7]
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d9dd      	bls.n	80087b4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80087f8:	4b03      	ldr	r3, [pc, #12]	; (8008808 <tcp_new_port+0x84>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	2000000a 	.word	0x2000000a
 800880c:	0801a97c 	.word	0x0801a97c

08008810 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008810:	b5b0      	push	{r4, r5, r7, lr}
 8008812:	b090      	sub	sp, #64	; 0x40
 8008814:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800881c:	4b94      	ldr	r3, [pc, #592]	; (8008a70 <tcp_slowtmr+0x260>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3301      	adds	r3, #1
 8008822:	4a93      	ldr	r2, [pc, #588]	; (8008a70 <tcp_slowtmr+0x260>)
 8008824:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008826:	4b93      	ldr	r3, [pc, #588]	; (8008a74 <tcp_slowtmr+0x264>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	4b91      	ldr	r3, [pc, #580]	; (8008a74 <tcp_slowtmr+0x264>)
 8008830:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008836:	4b90      	ldr	r3, [pc, #576]	; (8008a78 <tcp_slowtmr+0x268>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800883c:	e29d      	b.n	8008d7a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	7d1b      	ldrb	r3, [r3, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <tcp_slowtmr+0x44>
 8008846:	4b8d      	ldr	r3, [pc, #564]	; (8008a7c <tcp_slowtmr+0x26c>)
 8008848:	f240 42be 	movw	r2, #1214	; 0x4be
 800884c:	498c      	ldr	r1, [pc, #560]	; (8008a80 <tcp_slowtmr+0x270>)
 800884e:	488d      	ldr	r0, [pc, #564]	; (8008a84 <tcp_slowtmr+0x274>)
 8008850:	f00e fa62 	bl	8016d18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	7d1b      	ldrb	r3, [r3, #20]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d106      	bne.n	800886a <tcp_slowtmr+0x5a>
 800885c:	4b87      	ldr	r3, [pc, #540]	; (8008a7c <tcp_slowtmr+0x26c>)
 800885e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008862:	4989      	ldr	r1, [pc, #548]	; (8008a88 <tcp_slowtmr+0x278>)
 8008864:	4887      	ldr	r0, [pc, #540]	; (8008a84 <tcp_slowtmr+0x274>)
 8008866:	f00e fa57 	bl	8016d18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	7d1b      	ldrb	r3, [r3, #20]
 800886e:	2b0a      	cmp	r3, #10
 8008870:	d106      	bne.n	8008880 <tcp_slowtmr+0x70>
 8008872:	4b82      	ldr	r3, [pc, #520]	; (8008a7c <tcp_slowtmr+0x26c>)
 8008874:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008878:	4984      	ldr	r1, [pc, #528]	; (8008a8c <tcp_slowtmr+0x27c>)
 800887a:	4882      	ldr	r0, [pc, #520]	; (8008a84 <tcp_slowtmr+0x274>)
 800887c:	f00e fa4c 	bl	8016d18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	7f9a      	ldrb	r2, [r3, #30]
 8008884:	4b7b      	ldr	r3, [pc, #492]	; (8008a74 <tcp_slowtmr+0x264>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d105      	bne.n	8008898 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008896:	e270      	b.n	8008d7a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008898:	4b76      	ldr	r3, [pc, #472]	; (8008a74 <tcp_slowtmr+0x264>)
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d10a      	bne.n	80088ca <tcp_slowtmr+0xba>
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d905      	bls.n	80088ca <tcp_slowtmr+0xba>
      ++pcb_remove;
 80088be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c2:	3301      	adds	r3, #1
 80088c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088c8:	e11e      	b.n	8008b08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088d0:	2b0b      	cmp	r3, #11
 80088d2:	d905      	bls.n	80088e0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	3301      	adds	r3, #1
 80088da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088de:	e113      	b.n	8008b08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d075      	beq.n	80089d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d006      	beq.n	8008900 <tcp_slowtmr+0xf0>
 80088f2:	4b62      	ldr	r3, [pc, #392]	; (8008a7c <tcp_slowtmr+0x26c>)
 80088f4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80088f8:	4965      	ldr	r1, [pc, #404]	; (8008a90 <tcp_slowtmr+0x280>)
 80088fa:	4862      	ldr	r0, [pc, #392]	; (8008a84 <tcp_slowtmr+0x274>)
 80088fc:	f00e fa0c 	bl	8016d18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <tcp_slowtmr+0x106>
 8008908:	4b5c      	ldr	r3, [pc, #368]	; (8008a7c <tcp_slowtmr+0x26c>)
 800890a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800890e:	4961      	ldr	r1, [pc, #388]	; (8008a94 <tcp_slowtmr+0x284>)
 8008910:	485c      	ldr	r0, [pc, #368]	; (8008a84 <tcp_slowtmr+0x274>)
 8008912:	f00e fa01 	bl	8016d18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800891c:	2b0b      	cmp	r3, #11
 800891e:	d905      	bls.n	800892c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008924:	3301      	adds	r3, #1
 8008926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800892a:	e0ed      	b.n	8008b08 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008932:	3b01      	subs	r3, #1
 8008934:	4a58      	ldr	r2, [pc, #352]	; (8008a98 <tcp_slowtmr+0x288>)
 8008936:	5cd3      	ldrb	r3, [r2, r3]
 8008938:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008940:	7c7a      	ldrb	r2, [r7, #17]
 8008942:	429a      	cmp	r2, r3
 8008944:	d907      	bls.n	8008956 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800894c:	3301      	adds	r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800895c:	7c7a      	ldrb	r2, [r7, #17]
 800895e:	429a      	cmp	r2, r3
 8008960:	f200 80d2 	bhi.w	8008b08 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008964:	2301      	movs	r3, #1
 8008966:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800896e:	2b00      	cmp	r3, #0
 8008970:	d108      	bne.n	8008984 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008974:	f005 f964 	bl	800dc40 <tcp_zero_window_probe>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d014      	beq.n	80089a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800897e:	2300      	movs	r3, #0
 8008980:	623b      	str	r3, [r7, #32]
 8008982:	e011      	b.n	80089a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800898a:	4619      	mov	r1, r3
 800898c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800898e:	f004 f829 	bl	800c9e4 <tcp_split_unsent_seg>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d107      	bne.n	80089a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800899a:	f004 faa9 	bl	800cef0 <tcp_output>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80ac 	beq.w	8008b08 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089be:	2b06      	cmp	r3, #6
 80089c0:	f200 80a2 	bhi.w	8008b08 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089ca:	3301      	adds	r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80089d4:	e098      	b.n	8008b08 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	db0f      	blt.n	8008a00 <tcp_slowtmr+0x1f0>
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d008      	beq.n	8008a00 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3301      	adds	r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	b21a      	sxth	r2, r3
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	db7b      	blt.n	8008b08 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a12:	f004 fd5f 	bl	800d4d4 <tcp_rexmit_rto_prepare>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <tcp_slowtmr+0x21c>
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d171      	bne.n	8008b08 <tcp_slowtmr+0x2f8>
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d06d      	beq.n	8008b08 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	7d1b      	ldrb	r3, [r3, #20]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d03a      	beq.n	8008aaa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a3a:	2b0c      	cmp	r3, #12
 8008a3c:	bf28      	it	cs
 8008a3e:	230c      	movcs	r3, #12
 8008a40:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a48:	10db      	asrs	r3, r3, #3
 8008a4a:	b21b      	sxth	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a54:	4413      	add	r3, r2
 8008a56:	7efa      	ldrb	r2, [r7, #27]
 8008a58:	4910      	ldr	r1, [pc, #64]	; (8008a9c <tcp_slowtmr+0x28c>)
 8008a5a:	5c8a      	ldrb	r2, [r1, r2]
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a66:	4293      	cmp	r3, r2
 8008a68:	dc1a      	bgt.n	8008aa0 <tcp_slowtmr+0x290>
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	b21a      	sxth	r2, r3
 8008a6e:	e019      	b.n	8008aa4 <tcp_slowtmr+0x294>
 8008a70:	20006970 	.word	0x20006970
 8008a74:	200000ce 	.word	0x200000ce
 8008a78:	2000696c 	.word	0x2000696c
 8008a7c:	0801891c 	.word	0x0801891c
 8008a80:	08018c60 	.word	0x08018c60
 8008a84:	08018960 	.word	0x08018960
 8008a88:	08018c8c 	.word	0x08018c8c
 8008a8c:	08018cb8 	.word	0x08018cb8
 8008a90:	08018ce8 	.word	0x08018ce8
 8008a94:	08018d1c 	.word	0x08018d1c
 8008a98:	0801a974 	.word	0x0801a974
 8008a9c:	0801a964 	.word	0x0801a964
 8008aa0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	2200      	movs	r2, #0
 8008aae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bf28      	it	cs
 8008ac0:	4613      	movcs	r3, r2
 8008ac2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ac4:	8a7b      	ldrh	r3, [r7, #18]
 8008ac6:	085b      	lsrs	r3, r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d206      	bcs.n	8008af0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b04:	f004 fd56 	bl	800d5b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	7d1b      	ldrb	r3, [r3, #20]
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	d111      	bne.n	8008b34 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	8b5b      	ldrh	r3, [r3, #26]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b1c:	4b9c      	ldr	r3, [pc, #624]	; (8008d90 <tcp_slowtmr+0x580>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b28      	cmp	r3, #40	; 0x28
 8008b28:	d904      	bls.n	8008b34 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b2e:	3301      	adds	r3, #1
 8008b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	7a5b      	ldrb	r3, [r3, #9]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d04a      	beq.n	8008bd6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d003      	beq.n	8008b50 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b4c:	2b07      	cmp	r3, #7
 8008b4e:	d142      	bne.n	8008bd6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b50:	4b8f      	ldr	r3, [pc, #572]	; (8008d90 <tcp_slowtmr+0x580>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b60:	4b8c      	ldr	r3, [pc, #560]	; (8008d94 <tcp_slowtmr+0x584>)
 8008b62:	440b      	add	r3, r1
 8008b64:	498c      	ldr	r1, [pc, #560]	; (8008d98 <tcp_slowtmr+0x588>)
 8008b66:	fba1 1303 	umull	r1, r3, r1, r3
 8008b6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d90a      	bls.n	8008b86 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b74:	3301      	adds	r3, #1
 8008b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b84:	e027      	b.n	8008bd6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b86:	4b82      	ldr	r3, [pc, #520]	; (8008d90 <tcp_slowtmr+0x580>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	4b7f      	ldr	r3, [pc, #508]	; (8008d9c <tcp_slowtmr+0x58c>)
 8008ba0:	fb03 f300 	mul.w	r3, r3, r0
 8008ba4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008ba6:	497c      	ldr	r1, [pc, #496]	; (8008d98 <tcp_slowtmr+0x588>)
 8008ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8008bac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d911      	bls.n	8008bd6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bb4:	f005 f804 	bl	800dbc0 <tcp_keepalive>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008bbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d107      	bne.n	8008bd6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bcc:	3301      	adds	r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d011      	beq.n	8008c02 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bde:	4b6c      	ldr	r3, [pc, #432]	; (8008d90 <tcp_slowtmr+0x580>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008bee:	4619      	mov	r1, r3
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	440b      	add	r3, r1
 8008bf6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008bfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bfe:	f000 fec3 	bl	8009988 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	7d1b      	ldrb	r3, [r3, #20]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d10b      	bne.n	8008c22 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c0a:	4b61      	ldr	r3, [pc, #388]	; (8008d90 <tcp_slowtmr+0x580>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b28      	cmp	r3, #40	; 0x28
 8008c16:	d904      	bls.n	8008c22 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	2b09      	cmp	r3, #9
 8008c28:	d10b      	bne.n	8008c42 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c2a:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <tcp_slowtmr+0x580>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2bf0      	cmp	r3, #240	; 0xf0
 8008c36:	d904      	bls.n	8008c42 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d060      	beq.n	8008d0c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c50:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c54:	f000 fce4 	bl	8009620 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d010      	beq.n	8008c80 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c5e:	4b50      	ldr	r3, [pc, #320]	; (8008da0 <tcp_slowtmr+0x590>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d106      	bne.n	8008c76 <tcp_slowtmr+0x466>
 8008c68:	4b4e      	ldr	r3, [pc, #312]	; (8008da4 <tcp_slowtmr+0x594>)
 8008c6a:	f240 526d 	movw	r2, #1389	; 0x56d
 8008c6e:	494e      	ldr	r1, [pc, #312]	; (8008da8 <tcp_slowtmr+0x598>)
 8008c70:	484e      	ldr	r0, [pc, #312]	; (8008dac <tcp_slowtmr+0x59c>)
 8008c72:	f00e f851 	bl	8016d18 <iprintf>
        prev->next = pcb->next;
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	e00f      	b.n	8008ca0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c80:	4b47      	ldr	r3, [pc, #284]	; (8008da0 <tcp_slowtmr+0x590>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d006      	beq.n	8008c98 <tcp_slowtmr+0x488>
 8008c8a:	4b46      	ldr	r3, [pc, #280]	; (8008da4 <tcp_slowtmr+0x594>)
 8008c8c:	f240 5271 	movw	r2, #1393	; 0x571
 8008c90:	4947      	ldr	r1, [pc, #284]	; (8008db0 <tcp_slowtmr+0x5a0>)
 8008c92:	4846      	ldr	r0, [pc, #280]	; (8008dac <tcp_slowtmr+0x59c>)
 8008c94:	f00e f840 	bl	8016d18 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4a40      	ldr	r2, [pc, #256]	; (8008da0 <tcp_slowtmr+0x590>)
 8008c9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008ca0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d013      	beq.n	8008cd0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008cb0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb8:	8ad2      	ldrh	r2, [r2, #22]
 8008cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cbc:	8b09      	ldrh	r1, [r1, #24]
 8008cbe:	9102      	str	r1, [sp, #8]
 8008cc0:	9201      	str	r2, [sp, #4]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	4601      	mov	r1, r0
 8008cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ccc:	f004 fec4 	bl	800da58 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	7d1b      	ldrb	r3, [r3, #20]
 8008cda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008ce6:	6838      	ldr	r0, [r7, #0]
 8008ce8:	f7ff f83a 	bl	8007d60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008cec:	4b31      	ldr	r3, [pc, #196]	; (8008db4 <tcp_slowtmr+0x5a4>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <tcp_slowtmr+0x4f2>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f06f 010c 	mvn.w	r1, #12
 8008cfe:	68b8      	ldr	r0, [r7, #8]
 8008d00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d02:	4b2c      	ldr	r3, [pc, #176]	; (8008db4 <tcp_slowtmr+0x5a4>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d037      	beq.n	8008d7a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008d0a:	e592      	b.n	8008832 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	7f1b      	ldrb	r3, [r3, #28]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	7f1a      	ldrb	r2, [r3, #28]
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	7f5b      	ldrb	r3, [r3, #29]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d325      	bcc.n	8008d7a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	2200      	movs	r2, #0
 8008d32:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d34:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <tcp_slowtmr+0x5a4>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <tcp_slowtmr+0x54c>
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d4c:	6912      	ldr	r2, [r2, #16]
 8008d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d5a:	e002      	b.n	8008d62 <tcp_slowtmr+0x552>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008d62:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <tcp_slowtmr+0x5a4>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d000      	beq.n	8008d6c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008d6a:	e562      	b.n	8008832 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	f004 f8bb 	bl	800cef0 <tcp_output>
  while (pcb != NULL) {
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f47f ad5e 	bne.w	800883e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <tcp_slowtmr+0x5a8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008d8c:	e069      	b.n	8008e62 <tcp_slowtmr+0x652>
 8008d8e:	bf00      	nop
 8008d90:	20006970 	.word	0x20006970
 8008d94:	000a4cb8 	.word	0x000a4cb8
 8008d98:	10624dd3 	.word	0x10624dd3
 8008d9c:	000124f8 	.word	0x000124f8
 8008da0:	2000696c 	.word	0x2000696c
 8008da4:	0801891c 	.word	0x0801891c
 8008da8:	08018d54 	.word	0x08018d54
 8008dac:	08018960 	.word	0x08018960
 8008db0:	08018d80 	.word	0x08018d80
 8008db4:	20006968 	.word	0x20006968
 8008db8:	2000697c 	.word	0x2000697c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b0a      	cmp	r3, #10
 8008dc2:	d006      	beq.n	8008dd2 <tcp_slowtmr+0x5c2>
 8008dc4:	4b2b      	ldr	r3, [pc, #172]	; (8008e74 <tcp_slowtmr+0x664>)
 8008dc6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008dca:	492b      	ldr	r1, [pc, #172]	; (8008e78 <tcp_slowtmr+0x668>)
 8008dcc:	482b      	ldr	r0, [pc, #172]	; (8008e7c <tcp_slowtmr+0x66c>)
 8008dce:	f00d ffa3 	bl	8016d18 <iprintf>
    pcb_remove = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dd8:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <tcp_slowtmr+0x670>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2bf0      	cmp	r3, #240	; 0xf0
 8008de4:	d904      	bls.n	8008df0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dea:	3301      	adds	r3, #1
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d02f      	beq.n	8008e58 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dfa:	f000 fc11 	bl	8009620 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d010      	beq.n	8008e26 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <tcp_slowtmr+0x674>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d106      	bne.n	8008e1c <tcp_slowtmr+0x60c>
 8008e0e:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <tcp_slowtmr+0x664>)
 8008e10:	f240 52af 	movw	r2, #1455	; 0x5af
 8008e14:	491c      	ldr	r1, [pc, #112]	; (8008e88 <tcp_slowtmr+0x678>)
 8008e16:	4819      	ldr	r0, [pc, #100]	; (8008e7c <tcp_slowtmr+0x66c>)
 8008e18:	f00d ff7e 	bl	8016d18 <iprintf>
        prev->next = pcb->next;
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	e00f      	b.n	8008e46 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e26:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <tcp_slowtmr+0x674>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d006      	beq.n	8008e3e <tcp_slowtmr+0x62e>
 8008e30:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <tcp_slowtmr+0x664>)
 8008e32:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e36:	4915      	ldr	r1, [pc, #84]	; (8008e8c <tcp_slowtmr+0x67c>)
 8008e38:	4810      	ldr	r0, [pc, #64]	; (8008e7c <tcp_slowtmr+0x66c>)
 8008e3a:	f00d ff6d 	bl	8016d18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <tcp_slowtmr+0x674>)
 8008e44:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e50:	69f8      	ldr	r0, [r7, #28]
 8008e52:	f7fe ff85 	bl	8007d60 <tcp_free>
 8008e56:	e004      	b.n	8008e62 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1a9      	bne.n	8008dbc <tcp_slowtmr+0x5ac>
    }
  }
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	3730      	adds	r7, #48	; 0x30
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bdb0      	pop	{r4, r5, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0801891c 	.word	0x0801891c
 8008e78:	08018dac 	.word	0x08018dac
 8008e7c:	08018960 	.word	0x08018960
 8008e80:	20006970 	.word	0x20006970
 8008e84:	2000697c 	.word	0x2000697c
 8008e88:	08018ddc 	.word	0x08018ddc
 8008e8c:	08018e04 	.word	0x08018e04

08008e90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e96:	4b2d      	ldr	r3, [pc, #180]	; (8008f4c <tcp_fasttmr+0xbc>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <tcp_fasttmr+0xbc>)
 8008ea0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008ea2:	4b2b      	ldr	r3, [pc, #172]	; (8008f50 <tcp_fasttmr+0xc0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ea8:	e048      	b.n	8008f3c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7f9a      	ldrb	r2, [r3, #30]
 8008eae:	4b27      	ldr	r3, [pc, #156]	; (8008f4c <tcp_fasttmr+0xbc>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d03f      	beq.n	8008f36 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eb6:	4b25      	ldr	r3, [pc, #148]	; (8008f4c <tcp_fasttmr+0xbc>)
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8b5b      	ldrh	r3, [r3, #26]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	8b5b      	ldrh	r3, [r3, #26]
 8008ece:	f043 0302 	orr.w	r3, r3, #2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f004 f809 	bl	800cef0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8b5b      	ldrh	r3, [r3, #26]
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8b5b      	ldrh	r3, [r3, #26]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8b5b      	ldrh	r3, [r3, #26]
 8008efc:	f023 0308 	bic.w	r3, r3, #8
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff f8be 	bl	8008088 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <tcp_fasttmr+0xc4>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f819 	bl	8008f58 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f26:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <tcp_fasttmr+0xc4>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d000      	beq.n	8008f30 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f2e:	e7b8      	b.n	8008ea2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e002      	b.n	8008f3c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1b3      	bne.n	8008eaa <tcp_fasttmr+0x1a>
    }
  }
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200000ce 	.word	0x200000ce
 8008f50:	2000696c 	.word	0x2000696c
 8008f54:	20006968 	.word	0x20006968

08008f58 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <tcp_process_refused_data+0x22>
 8008f66:	4b37      	ldr	r3, [pc, #220]	; (8009044 <tcp_process_refused_data+0xec>)
 8008f68:	f240 6209 	movw	r2, #1545	; 0x609
 8008f6c:	4936      	ldr	r1, [pc, #216]	; (8009048 <tcp_process_refused_data+0xf0>)
 8008f6e:	4837      	ldr	r0, [pc, #220]	; (800904c <tcp_process_refused_data+0xf4>)
 8008f70:	f00d fed2 	bl	8016d18 <iprintf>
 8008f74:	f06f 030f 	mvn.w	r3, #15
 8008f78:	e060      	b.n	800903c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f7e:	7b5b      	ldrb	r3, [r3, #13]
 8008f80:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f86:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <tcp_process_refused_data+0x58>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6918      	ldr	r0, [r3, #16]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	47a0      	blx	r4
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e007      	b.n	8008fc0 <tcp_process_refused_data+0x68>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	f000 f8c2 	bl	8009140 <tcp_recv_null>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d12a      	bne.n	800901e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d033      	beq.n	800903a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fda:	d005      	beq.n	8008fe8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <tcp_process_refused_data+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6918      	ldr	r0, [r3, #16]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	47a0      	blx	r4
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
 8009008:	e001      	b.n	800900e <tcp_process_refused_data+0xb6>
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800900e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009012:	f113 0f0d 	cmn.w	r3, #13
 8009016:	d110      	bne.n	800903a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009018:	f06f 030c 	mvn.w	r3, #12
 800901c:	e00e      	b.n	800903c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800901e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009022:	f113 0f0d 	cmn.w	r3, #13
 8009026:	d102      	bne.n	800902e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009028:	f06f 030c 	mvn.w	r3, #12
 800902c:	e006      	b.n	800903c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009034:	f06f 0304 	mvn.w	r3, #4
 8009038:	e000      	b.n	800903c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bd90      	pop	{r4, r7, pc}
 8009044:	0801891c 	.word	0x0801891c
 8009048:	08018e2c 	.word	0x08018e2c
 800904c:	08018960 	.word	0x08018960

08009050 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009058:	e007      	b.n	800906a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f80a 	bl	800907a <tcp_seg_free>
    seg = next;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f4      	bne.n	800905a <tcp_segs_free+0xa>
  }
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00c      	beq.n	80090a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fbb3 	bl	8007800 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	2003      	movs	r0, #3
 800909e:	f7fd fd9d 	bl	8006bdc <memp_free>
  }
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d107      	bne.n	80090ce <tcp_setprio+0x22>
 80090be:	4b07      	ldr	r3, [pc, #28]	; (80090dc <tcp_setprio+0x30>)
 80090c0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80090c4:	4906      	ldr	r1, [pc, #24]	; (80090e0 <tcp_setprio+0x34>)
 80090c6:	4807      	ldr	r0, [pc, #28]	; (80090e4 <tcp_setprio+0x38>)
 80090c8:	f00d fe26 	bl	8016d18 <iprintf>
 80090cc:	e002      	b.n	80090d4 <tcp_setprio+0x28>

  pcb->prio = prio;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	755a      	strb	r2, [r3, #21]
}
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	0801891c 	.word	0x0801891c
 80090e0:	08018e54 	.word	0x08018e54
 80090e4:	08018960 	.word	0x08018960

080090e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <tcp_seg_copy+0x1c>
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <tcp_seg_copy+0x4c>)
 80090f8:	f240 6282 	movw	r2, #1666	; 0x682
 80090fc:	490e      	ldr	r1, [pc, #56]	; (8009138 <tcp_seg_copy+0x50>)
 80090fe:	480f      	ldr	r0, [pc, #60]	; (800913c <tcp_seg_copy+0x54>)
 8009100:	f00d fe0a 	bl	8016d18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009104:	2003      	movs	r0, #3
 8009106:	f7fd fd1d 	bl	8006b44 <memp_malloc>
 800910a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <tcp_seg_copy+0x2e>
    return NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	e00a      	b.n	800912c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009116:	2210      	movs	r2, #16
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f00d fde6 	bl	8016cec <memcpy>
  pbuf_ref(cseg->p);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fc0b 	bl	8007940 <pbuf_ref>
  return cseg;
 800912a:	68fb      	ldr	r3, [r7, #12]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	0801891c 	.word	0x0801891c
 8009138:	08018e70 	.word	0x08018e70
 800913c:	08018960 	.word	0x08018960

08009140 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <tcp_recv_null+0x28>
 8009154:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <tcp_recv_null+0x60>)
 8009156:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800915a:	4912      	ldr	r1, [pc, #72]	; (80091a4 <tcp_recv_null+0x64>)
 800915c:	4812      	ldr	r0, [pc, #72]	; (80091a8 <tcp_recv_null+0x68>)
 800915e:	f00d fddb 	bl	8016d18 <iprintf>
 8009162:	f06f 030f 	mvn.w	r3, #15
 8009166:	e016      	b.n	8009196 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	891b      	ldrh	r3, [r3, #8]
 8009172:	4619      	mov	r1, r3
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7ff fab5 	bl	80086e4 <tcp_recved>
    pbuf_free(p);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fe fb40 	bl	8007800 <pbuf_free>
 8009180:	e008      	b.n	8009194 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d104      	bne.n	8009194 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800918a:	68b8      	ldr	r0, [r7, #8]
 800918c:	f7fe ffe6 	bl	800815c <tcp_close>
 8009190:	4603      	mov	r3, r0
 8009192:	e000      	b.n	8009196 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	0801891c 	.word	0x0801891c
 80091a4:	08018e8c 	.word	0x08018e8c
 80091a8:	08018960 	.word	0x08018960

080091ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80091b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	db01      	blt.n	80091c2 <tcp_kill_prio+0x16>
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	e000      	b.n	80091c4 <tcp_kill_prio+0x18>
 80091c2:	237f      	movs	r3, #127	; 0x7f
 80091c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d034      	beq.n	8009236 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091da:	4b19      	ldr	r3, [pc, #100]	; (8009240 <tcp_kill_prio+0x94>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	e01f      	b.n	8009222 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	7d5b      	ldrb	r3, [r3, #21]
 80091e6:	7afa      	ldrb	r2, [r7, #11]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d80c      	bhi.n	8009206 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091f0:	7afa      	ldrb	r2, [r7, #11]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d112      	bne.n	800921c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091f6:	4b13      	ldr	r3, [pc, #76]	; (8009244 <tcp_kill_prio+0x98>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	429a      	cmp	r2, r3
 8009204:	d80a      	bhi.n	800921c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <tcp_kill_prio+0x98>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	7d5b      	ldrb	r3, [r3, #21]
 800921a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1dc      	bne.n	80091e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800922e:	6938      	ldr	r0, [r7, #16]
 8009230:	f7ff f87e 	bl	8008330 <tcp_abort>
 8009234:	e000      	b.n	8009238 <tcp_kill_prio+0x8c>
    return;
 8009236:	bf00      	nop
  }
}
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	2000696c 	.word	0x2000696c
 8009244:	20006970 	.word	0x20006970

08009248 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b08      	cmp	r3, #8
 8009256:	d009      	beq.n	800926c <tcp_kill_state+0x24>
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2b09      	cmp	r3, #9
 800925c:	d006      	beq.n	800926c <tcp_kill_state+0x24>
 800925e:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <tcp_kill_state+0x80>)
 8009260:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009264:	4919      	ldr	r1, [pc, #100]	; (80092cc <tcp_kill_state+0x84>)
 8009266:	481a      	ldr	r0, [pc, #104]	; (80092d0 <tcp_kill_state+0x88>)
 8009268:	f00d fd56 	bl	8016d18 <iprintf>

  inactivity = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <tcp_kill_state+0x8c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	e017      	b.n	80092ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	7d1b      	ldrb	r3, [r3, #20]
 8009280:	79fa      	ldrb	r2, [r7, #7]
 8009282:	429a      	cmp	r2, r3
 8009284:	d10f      	bne.n	80092a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <tcp_kill_state+0x90>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d807      	bhi.n	80092a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <tcp_kill_state+0x90>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e4      	bne.n	800927c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80092b8:	2100      	movs	r1, #0
 80092ba:	6938      	ldr	r0, [r7, #16]
 80092bc:	f7fe ff7a 	bl	80081b4 <tcp_abandon>
  }
}
 80092c0:	bf00      	nop
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	0801891c 	.word	0x0801891c
 80092cc:	08018ea8 	.word	0x08018ea8
 80092d0:	08018960 	.word	0x08018960
 80092d4:	2000696c 	.word	0x2000696c
 80092d8:	20006970 	.word	0x20006970

080092dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <tcp_kill_timewait+0x58>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	e012      	b.n	8009318 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <tcp_kill_timewait+0x5c>)
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d807      	bhi.n	8009312 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009302:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <tcp_kill_timewait+0x5c>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e9      	bne.n	80092f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f7ff f803 	bl	8008330 <tcp_abort>
  }
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	2000697c 	.word	0x2000697c
 8009338:	20006970 	.word	0x20006970

0800933c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009342:	4b10      	ldr	r3, [pc, #64]	; (8009384 <tcp_handle_closepend+0x48>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009348:	e014      	b.n	8009374 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	8b5b      	ldrh	r3, [r3, #26]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	8b5b      	ldrh	r3, [r3, #26]
 8009360:	f023 0308 	bic.w	r3, r3, #8
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fe fe8c 	bl	8008088 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e7      	bne.n	800934a <tcp_handle_closepend+0xe>
  }
}
 800937a:	bf00      	nop
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	2000696c 	.word	0x2000696c

08009388 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009392:	2001      	movs	r0, #1
 8009394:	f7fd fbd6 	bl	8006b44 <memp_malloc>
 8009398:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d126      	bne.n	80093ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80093a0:	f7ff ffcc 	bl	800933c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80093a4:	f7ff ff9a 	bl	80092dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a8:	2001      	movs	r0, #1
 80093aa:	f7fd fbcb 	bl	8006b44 <memp_malloc>
 80093ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d11b      	bne.n	80093ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80093b6:	2009      	movs	r0, #9
 80093b8:	f7ff ff46 	bl	8009248 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093bc:	2001      	movs	r0, #1
 80093be:	f7fd fbc1 	bl	8006b44 <memp_malloc>
 80093c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d111      	bne.n	80093ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80093ca:	2008      	movs	r0, #8
 80093cc:	f7ff ff3c 	bl	8009248 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7fd fbb7 	bl	8006b44 <memp_malloc>
 80093d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d107      	bne.n	80093ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fee3 	bl	80091ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093e6:	2001      	movs	r0, #1
 80093e8:	f7fd fbac 	bl	8006b44 <memp_malloc>
 80093ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d03f      	beq.n	8009474 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093f4:	229c      	movs	r2, #156	; 0x9c
 80093f6:	2100      	movs	r1, #0
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f00d fc85 	bl	8016d08 <memset>
    pcb->prio = prio;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	79fa      	ldrb	r2, [r7, #7]
 8009402:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800940a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009414:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	22ff      	movs	r2, #255	; 0xff
 8009422:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f44f 7206 	mov.w	r2, #536	; 0x218
 800942a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2206      	movs	r2, #6
 8009430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2206      	movs	r2, #6
 8009438:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009440:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800944a:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <tcp_alloc+0xf8>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <tcp_alloc+0xfc>)
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009460:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <tcp_alloc+0x100>)
 8009468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a07      	ldr	r2, [pc, #28]	; (800948c <tcp_alloc+0x104>)
 8009470:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009474:	68fb      	ldr	r3, [r7, #12]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20006970 	.word	0x20006970
 8009484:	200000ce 	.word	0x200000ce
 8009488:	08009141 	.word	0x08009141
 800948c:	006ddd00 	.word	0x006ddd00

08009490 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009494:	2040      	movs	r0, #64	; 0x40
 8009496:	f7ff ff77 	bl	8009388 <tcp_alloc>
 800949a:	4603      	mov	r3, r0
}
 800949c:	4618      	mov	r0, r3
 800949e:	bd80      	pop	{r7, pc}

080094a0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	611a      	str	r2, [r3, #16]
  }
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
	...

080094c4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7d1b      	ldrb	r3, [r3, #20]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d106      	bne.n	80094ea <tcp_recv+0x26>
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <tcp_recv+0x38>)
 80094de:	f240 72df 	movw	r2, #2015	; 0x7df
 80094e2:	4907      	ldr	r1, [pc, #28]	; (8009500 <tcp_recv+0x3c>)
 80094e4:	4807      	ldr	r0, [pc, #28]	; (8009504 <tcp_recv+0x40>)
 80094e6:	f00d fc17 	bl	8016d18 <iprintf>
    pcb->recv = recv;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	0801891c 	.word	0x0801891c
 8009500:	08018eb8 	.word	0x08018eb8
 8009504:	08018960 	.word	0x08018960

08009508 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7d1b      	ldrb	r3, [r3, #20]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d106      	bne.n	800952e <tcp_sent+0x26>
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <tcp_sent+0x38>)
 8009522:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009526:	4907      	ldr	r1, [pc, #28]	; (8009544 <tcp_sent+0x3c>)
 8009528:	4807      	ldr	r0, [pc, #28]	; (8009548 <tcp_sent+0x40>)
 800952a:	f00d fbf5 	bl	8016d18 <iprintf>
    pcb->sent = sent;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	0801891c 	.word	0x0801891c
 8009544:	08018ee0 	.word	0x08018ee0
 8009548:	08018960 	.word	0x08018960

0800954c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00e      	beq.n	800957a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	7d1b      	ldrb	r3, [r3, #20]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d106      	bne.n	8009572 <tcp_err+0x26>
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <tcp_err+0x38>)
 8009566:	f640 020d 	movw	r2, #2061	; 0x80d
 800956a:	4907      	ldr	r1, [pc, #28]	; (8009588 <tcp_err+0x3c>)
 800956c:	4807      	ldr	r0, [pc, #28]	; (800958c <tcp_err+0x40>)
 800956e:	f00d fbd3 	bl	8016d18 <iprintf>
    pcb->errf = err;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	0801891c 	.word	0x0801891c
 8009588:	08018f08 	.word	0x08018f08
 800958c:	08018960 	.word	0x08018960

08009590 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d008      	beq.n	80095b2 <tcp_accept+0x22>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7d1b      	ldrb	r3, [r3, #20]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d104      	bne.n	80095b2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	619a      	str	r2, [r3, #24]
  }
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d107      	bne.n	80095e4 <tcp_poll+0x24>
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <tcp_poll+0x50>)
 80095d6:	f640 023d 	movw	r2, #2109	; 0x83d
 80095da:	490e      	ldr	r1, [pc, #56]	; (8009614 <tcp_poll+0x54>)
 80095dc:	480e      	ldr	r0, [pc, #56]	; (8009618 <tcp_poll+0x58>)
 80095de:	f00d fb9b 	bl	8016d18 <iprintf>
 80095e2:	e011      	b.n	8009608 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7d1b      	ldrb	r3, [r3, #20]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d106      	bne.n	80095fa <tcp_poll+0x3a>
 80095ec:	4b08      	ldr	r3, [pc, #32]	; (8009610 <tcp_poll+0x50>)
 80095ee:	f640 023e 	movw	r2, #2110	; 0x83e
 80095f2:	490a      	ldr	r1, [pc, #40]	; (800961c <tcp_poll+0x5c>)
 80095f4:	4808      	ldr	r0, [pc, #32]	; (8009618 <tcp_poll+0x58>)
 80095f6:	f00d fb8f 	bl	8016d18 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	79fa      	ldrb	r2, [r7, #7]
 8009606:	775a      	strb	r2, [r3, #29]
}
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	0801891c 	.word	0x0801891c
 8009614:	08018f30 	.word	0x08018f30
 8009618:	08018960 	.word	0x08018960
 800961c:	08018f48 	.word	0x08018f48

08009620 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <tcp_pcb_purge+0x1e>
 800962e:	4b21      	ldr	r3, [pc, #132]	; (80096b4 <tcp_pcb_purge+0x94>)
 8009630:	f640 0251 	movw	r2, #2129	; 0x851
 8009634:	4920      	ldr	r1, [pc, #128]	; (80096b8 <tcp_pcb_purge+0x98>)
 8009636:	4821      	ldr	r0, [pc, #132]	; (80096bc <tcp_pcb_purge+0x9c>)
 8009638:	f00d fb6e 	bl	8016d18 <iprintf>
 800963c:	e037      	b.n	80096ae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7d1b      	ldrb	r3, [r3, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d033      	beq.n	80096ae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800964a:	2b0a      	cmp	r3, #10
 800964c:	d02f      	beq.n	80096ae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009652:	2b01      	cmp	r3, #1
 8009654:	d02b      	beq.n	80096ae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f8cc 	bl	8007800 <pbuf_free>
      pcb->refused_data = NULL;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f986 	bl	8009988 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009682:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fce1 	bl	8009050 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fcdc 	bl	8009050 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	66da      	str	r2, [r3, #108]	; 0x6c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	0801891c 	.word	0x0801891c
 80096b8:	08018f68 	.word	0x08018f68
 80096bc:	08018960 	.word	0x08018960

080096c0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <tcp_pcb_remove+0x1e>
 80096d0:	4b3e      	ldr	r3, [pc, #248]	; (80097cc <tcp_pcb_remove+0x10c>)
 80096d2:	f640 0283 	movw	r2, #2179	; 0x883
 80096d6:	493e      	ldr	r1, [pc, #248]	; (80097d0 <tcp_pcb_remove+0x110>)
 80096d8:	483e      	ldr	r0, [pc, #248]	; (80097d4 <tcp_pcb_remove+0x114>)
 80096da:	f00d fb1d 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <tcp_pcb_remove+0x32>
 80096e4:	4b39      	ldr	r3, [pc, #228]	; (80097cc <tcp_pcb_remove+0x10c>)
 80096e6:	f640 0284 	movw	r2, #2180	; 0x884
 80096ea:	493b      	ldr	r1, [pc, #236]	; (80097d8 <tcp_pcb_remove+0x118>)
 80096ec:	4839      	ldr	r0, [pc, #228]	; (80097d4 <tcp_pcb_remove+0x114>)
 80096ee:	f00d fb13 	bl	8016d18 <iprintf>

  TCP_RMV(pcblist, pcb);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d105      	bne.n	8009708 <tcp_pcb_remove+0x48>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e013      	b.n	8009730 <tcp_pcb_remove+0x70>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	e00c      	b.n	800972a <tcp_pcb_remove+0x6a>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d104      	bne.n	8009724 <tcp_pcb_remove+0x64>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	60da      	str	r2, [r3, #12]
 8009722:	e005      	b.n	8009730 <tcp_pcb_remove+0x70>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1ef      	bne.n	8009710 <tcp_pcb_remove+0x50>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009736:	6838      	ldr	r0, [r7, #0]
 8009738:	f7ff ff72 	bl	8009620 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	7d1b      	ldrb	r3, [r3, #20]
 8009740:	2b0a      	cmp	r3, #10
 8009742:	d013      	beq.n	800976c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00f      	beq.n	800976c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	8b5b      	ldrh	r3, [r3, #26]
 8009750:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	8b5b      	ldrh	r3, [r3, #26]
 800975c:	f043 0302 	orr.w	r3, r3, #2
 8009760:	b29a      	uxth	r2, r3
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009766:	6838      	ldr	r0, [r7, #0]
 8009768:	f003 fbc2 	bl	800cef0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	7d1b      	ldrb	r3, [r3, #20]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d020      	beq.n	80097b6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <tcp_pcb_remove+0xca>
 800977c:	4b13      	ldr	r3, [pc, #76]	; (80097cc <tcp_pcb_remove+0x10c>)
 800977e:	f640 0293 	movw	r2, #2195	; 0x893
 8009782:	4916      	ldr	r1, [pc, #88]	; (80097dc <tcp_pcb_remove+0x11c>)
 8009784:	4813      	ldr	r0, [pc, #76]	; (80097d4 <tcp_pcb_remove+0x114>)
 8009786:	f00d fac7 	bl	8016d18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <tcp_pcb_remove+0xe0>
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <tcp_pcb_remove+0x10c>)
 8009794:	f640 0294 	movw	r2, #2196	; 0x894
 8009798:	4911      	ldr	r1, [pc, #68]	; (80097e0 <tcp_pcb_remove+0x120>)
 800979a:	480e      	ldr	r0, [pc, #56]	; (80097d4 <tcp_pcb_remove+0x114>)
 800979c:	f00d fabc 	bl	8016d18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <tcp_pcb_remove+0xf6>
 80097a8:	4b08      	ldr	r3, [pc, #32]	; (80097cc <tcp_pcb_remove+0x10c>)
 80097aa:	f640 0296 	movw	r2, #2198	; 0x896
 80097ae:	490d      	ldr	r1, [pc, #52]	; (80097e4 <tcp_pcb_remove+0x124>)
 80097b0:	4808      	ldr	r0, [pc, #32]	; (80097d4 <tcp_pcb_remove+0x114>)
 80097b2:	f00d fab1 	bl	8016d18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2200      	movs	r2, #0
 80097ba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	0801891c 	.word	0x0801891c
 80097d0:	08018f84 	.word	0x08018f84
 80097d4:	08018960 	.word	0x08018960
 80097d8:	08018fa0 	.word	0x08018fa0
 80097dc:	08018fc0 	.word	0x08018fc0
 80097e0:	08018fd8 	.word	0x08018fd8
 80097e4:	08018ff4 	.word	0x08018ff4

080097e8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d106      	bne.n	8009804 <tcp_next_iss+0x1c>
 80097f6:	4b0a      	ldr	r3, [pc, #40]	; (8009820 <tcp_next_iss+0x38>)
 80097f8:	f640 02af 	movw	r2, #2223	; 0x8af
 80097fc:	4909      	ldr	r1, [pc, #36]	; (8009824 <tcp_next_iss+0x3c>)
 80097fe:	480a      	ldr	r0, [pc, #40]	; (8009828 <tcp_next_iss+0x40>)
 8009800:	f00d fa8a 	bl	8016d18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009804:	4b09      	ldr	r3, [pc, #36]	; (800982c <tcp_next_iss+0x44>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b09      	ldr	r3, [pc, #36]	; (8009830 <tcp_next_iss+0x48>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4413      	add	r3, r2
 800980e:	4a07      	ldr	r2, [pc, #28]	; (800982c <tcp_next_iss+0x44>)
 8009810:	6013      	str	r3, [r2, #0]
  return iss;
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <tcp_next_iss+0x44>)
 8009814:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	0801891c 	.word	0x0801891c
 8009824:	0801900c 	.word	0x0801900c
 8009828:	08018960 	.word	0x08018960
 800982c:	2000000c 	.word	0x2000000c
 8009830:	20006970 	.word	0x20006970

08009834 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <tcp_eff_send_mss_netif+0x22>
 8009848:	4b14      	ldr	r3, [pc, #80]	; (800989c <tcp_eff_send_mss_netif+0x68>)
 800984a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800984e:	4914      	ldr	r1, [pc, #80]	; (80098a0 <tcp_eff_send_mss_netif+0x6c>)
 8009850:	4814      	ldr	r0, [pc, #80]	; (80098a4 <tcp_eff_send_mss_netif+0x70>)
 8009852:	f00d fa61 	bl	8016d18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800985c:	89fb      	ldrh	r3, [r7, #14]
 800985e:	e019      	b.n	8009894 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009864:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009866:	8afb      	ldrh	r3, [r7, #22]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d012      	beq.n	8009892 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800986c:	2328      	movs	r3, #40	; 0x28
 800986e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009870:	8afa      	ldrh	r2, [r7, #22]
 8009872:	8abb      	ldrh	r3, [r7, #20]
 8009874:	429a      	cmp	r2, r3
 8009876:	d904      	bls.n	8009882 <tcp_eff_send_mss_netif+0x4e>
 8009878:	8afa      	ldrh	r2, [r7, #22]
 800987a:	8abb      	ldrh	r3, [r7, #20]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	b29b      	uxth	r3, r3
 8009880:	e000      	b.n	8009884 <tcp_eff_send_mss_netif+0x50>
 8009882:	2300      	movs	r3, #0
 8009884:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009886:	8a7a      	ldrh	r2, [r7, #18]
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	4293      	cmp	r3, r2
 800988c:	bf28      	it	cs
 800988e:	4613      	movcs	r3, r2
 8009890:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009892:	89fb      	ldrh	r3, [r7, #14]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	0801891c 	.word	0x0801891c
 80098a0:	08019028 	.word	0x08019028
 80098a4:	08018960 	.word	0x08018960

080098a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d119      	bne.n	80098f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80098bc:	4b10      	ldr	r3, [pc, #64]	; (8009900 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80098be:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80098c2:	4910      	ldr	r1, [pc, #64]	; (8009904 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80098c4:	4810      	ldr	r0, [pc, #64]	; (8009908 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80098c6:	f00d fa27 	bl	8016d18 <iprintf>

  while (pcb != NULL) {
 80098ca:	e011      	b.n	80098f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d108      	bne.n	80098ea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7fe fd26 	bl	8008330 <tcp_abort>
      pcb = next;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e002      	b.n	80098f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1ea      	bne.n	80098cc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	0801891c 	.word	0x0801891c
 8009904:	08019050 	.word	0x08019050
 8009908:	08018960 	.word	0x08018960

0800990c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d02a      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x66>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d026      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009924:	4b15      	ldr	r3, [pc, #84]	; (800997c <tcp_netif_ip_addr_changed+0x70>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff ffbc 	bl	80098a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009930:	4b13      	ldr	r3, [pc, #76]	; (8009980 <tcp_netif_ip_addr_changed+0x74>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ffb6 	bl	80098a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d017      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x66>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d013      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800994a:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <tcp_netif_ip_addr_changed+0x78>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	e00c      	b.n	800996c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d103      	bne.n	8009966 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1ef      	bne.n	8009952 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	2000696c 	.word	0x2000696c
 8009980:	20006978 	.word	0x20006978
 8009984:	20006974 	.word	0x20006974

08009988 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fb57 	bl	8009050 <tcp_segs_free>
    pcb->ooseq = NULL;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b08d      	sub	sp, #52	; 0x34
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <tcp_input+0x1c>
 80099c0:	4b9b      	ldr	r3, [pc, #620]	; (8009c30 <tcp_input+0x280>)
 80099c2:	2283      	movs	r2, #131	; 0x83
 80099c4:	499b      	ldr	r1, [pc, #620]	; (8009c34 <tcp_input+0x284>)
 80099c6:	489c      	ldr	r0, [pc, #624]	; (8009c38 <tcp_input+0x288>)
 80099c8:	f00d f9a6 	bl	8016d18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a9a      	ldr	r2, [pc, #616]	; (8009c3c <tcp_input+0x28c>)
 80099d2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	895b      	ldrh	r3, [r3, #10]
 80099d8:	2b13      	cmp	r3, #19
 80099da:	f240 83c4 	bls.w	800a166 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099de:	4b98      	ldr	r3, [pc, #608]	; (8009c40 <tcp_input+0x290>)
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	4a97      	ldr	r2, [pc, #604]	; (8009c40 <tcp_input+0x290>)
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f006 f86b 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f040 83ba 	bne.w	800a16a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80099f6:	4b92      	ldr	r3, [pc, #584]	; (8009c40 <tcp_input+0x290>)
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099fe:	2be0      	cmp	r3, #224	; 0xe0
 8009a00:	f000 83b3 	beq.w	800a16a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009a04:	4b8d      	ldr	r3, [pc, #564]	; (8009c3c <tcp_input+0x28c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fc fc43 	bl	8006298 <lwip_htons>
 8009a12:	4603      	mov	r3, r0
 8009a14:	0b1b      	lsrs	r3, r3, #12
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009a1e:	7cbb      	ldrb	r3, [r7, #18]
 8009a20:	2b13      	cmp	r3, #19
 8009a22:	f240 83a4 	bls.w	800a16e <tcp_input+0x7be>
 8009a26:	7cbb      	ldrb	r3, [r7, #18]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	891b      	ldrh	r3, [r3, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	f200 839d 	bhi.w	800a16e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009a34:	7cbb      	ldrb	r3, [r7, #18]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b14      	subs	r3, #20
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	4b81      	ldr	r3, [pc, #516]	; (8009c44 <tcp_input+0x294>)
 8009a3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009a40:	4b81      	ldr	r3, [pc, #516]	; (8009c48 <tcp_input+0x298>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	895a      	ldrh	r2, [r3, #10]
 8009a4a:	7cbb      	ldrb	r3, [r7, #18]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d309      	bcc.n	8009a66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009a52:	4b7c      	ldr	r3, [pc, #496]	; (8009c44 <tcp_input+0x294>)
 8009a54:	881a      	ldrh	r2, [r3, #0]
 8009a56:	4b7d      	ldr	r3, [pc, #500]	; (8009c4c <tcp_input+0x29c>)
 8009a58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009a5a:	7cbb      	ldrb	r3, [r7, #18]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fd fe48 	bl	80076f4 <pbuf_remove_header>
 8009a64:	e04e      	b.n	8009b04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <tcp_input+0xca>
 8009a6e:	4b70      	ldr	r3, [pc, #448]	; (8009c30 <tcp_input+0x280>)
 8009a70:	22c2      	movs	r2, #194	; 0xc2
 8009a72:	4977      	ldr	r1, [pc, #476]	; (8009c50 <tcp_input+0x2a0>)
 8009a74:	4870      	ldr	r0, [pc, #448]	; (8009c38 <tcp_input+0x288>)
 8009a76:	f00d f94f 	bl	8016d18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009a7a:	2114      	movs	r1, #20
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fd fe39 	bl	80076f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	895a      	ldrh	r2, [r3, #10]
 8009a86:	4b71      	ldr	r3, [pc, #452]	; (8009c4c <tcp_input+0x29c>)
 8009a88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009a8a:	4b6e      	ldr	r3, [pc, #440]	; (8009c44 <tcp_input+0x294>)
 8009a8c:	881a      	ldrh	r2, [r3, #0]
 8009a8e:	4b6f      	ldr	r3, [pc, #444]	; (8009c4c <tcp_input+0x29c>)
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009a96:	4b6d      	ldr	r3, [pc, #436]	; (8009c4c <tcp_input+0x29c>)
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7fd fe29 	bl	80076f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	895b      	ldrh	r3, [r3, #10]
 8009aa8:	8a3a      	ldrh	r2, [r7, #16]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	f200 8361 	bhi.w	800a172 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4a64      	ldr	r2, [pc, #400]	; (8009c48 <tcp_input+0x298>)
 8009ab8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	8a3a      	ldrh	r2, [r7, #16]
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fe16 	bl	80076f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	891a      	ldrh	r2, [r3, #8]
 8009acc:	8a3b      	ldrh	r3, [r7, #16]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	895b      	ldrh	r3, [r3, #10]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <tcp_input+0x13a>
 8009ade:	4b54      	ldr	r3, [pc, #336]	; (8009c30 <tcp_input+0x280>)
 8009ae0:	22df      	movs	r2, #223	; 0xdf
 8009ae2:	495c      	ldr	r1, [pc, #368]	; (8009c54 <tcp_input+0x2a4>)
 8009ae4:	4854      	ldr	r0, [pc, #336]	; (8009c38 <tcp_input+0x288>)
 8009ae6:	f00d f917 	bl	8016d18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	891a      	ldrh	r2, [r3, #8]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	891b      	ldrh	r3, [r3, #8]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d005      	beq.n	8009b04 <tcp_input+0x154>
 8009af8:	4b4d      	ldr	r3, [pc, #308]	; (8009c30 <tcp_input+0x280>)
 8009afa:	22e0      	movs	r2, #224	; 0xe0
 8009afc:	4956      	ldr	r1, [pc, #344]	; (8009c58 <tcp_input+0x2a8>)
 8009afe:	484e      	ldr	r0, [pc, #312]	; (8009c38 <tcp_input+0x288>)
 8009b00:	f00d f90a 	bl	8016d18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009b04:	4b4d      	ldr	r3, [pc, #308]	; (8009c3c <tcp_input+0x28c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4a4b      	ldr	r2, [pc, #300]	; (8009c3c <tcp_input+0x28c>)
 8009b0e:	6814      	ldr	r4, [r2, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fc fbc1 	bl	8006298 <lwip_htons>
 8009b16:	4603      	mov	r3, r0
 8009b18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009b1a:	4b48      	ldr	r3, [pc, #288]	; (8009c3c <tcp_input+0x28c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	885b      	ldrh	r3, [r3, #2]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4a46      	ldr	r2, [pc, #280]	; (8009c3c <tcp_input+0x28c>)
 8009b24:	6814      	ldr	r4, [r2, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fc fbb6 	bl	8006298 <lwip_htons>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009b30:	4b42      	ldr	r3, [pc, #264]	; (8009c3c <tcp_input+0x28c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	4a41      	ldr	r2, [pc, #260]	; (8009c3c <tcp_input+0x28c>)
 8009b38:	6814      	ldr	r4, [r2, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fc fbc1 	bl	80062c2 <lwip_htonl>
 8009b40:	4603      	mov	r3, r0
 8009b42:	6063      	str	r3, [r4, #4]
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	4a45      	ldr	r2, [pc, #276]	; (8009c5c <tcp_input+0x2ac>)
 8009b48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009b4a:	4b3c      	ldr	r3, [pc, #240]	; (8009c3c <tcp_input+0x28c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4a3a      	ldr	r2, [pc, #232]	; (8009c3c <tcp_input+0x28c>)
 8009b52:	6814      	ldr	r4, [r2, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fc fbb4 	bl	80062c2 <lwip_htonl>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	4a3f      	ldr	r2, [pc, #252]	; (8009c60 <tcp_input+0x2b0>)
 8009b62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009b64:	4b35      	ldr	r3, [pc, #212]	; (8009c3c <tcp_input+0x28c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	89db      	ldrh	r3, [r3, #14]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4a33      	ldr	r2, [pc, #204]	; (8009c3c <tcp_input+0x28c>)
 8009b6e:	6814      	ldr	r4, [r2, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fc fb91 	bl	8006298 <lwip_htons>
 8009b76:	4603      	mov	r3, r0
 8009b78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009b7a:	4b30      	ldr	r3, [pc, #192]	; (8009c3c <tcp_input+0x28c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	899b      	ldrh	r3, [r3, #12]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fc fb88 	bl	8006298 <lwip_htons>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <tcp_input+0x2b4>)
 8009b94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	891a      	ldrh	r2, [r3, #8]
 8009b9a:	4b33      	ldr	r3, [pc, #204]	; (8009c68 <tcp_input+0x2b8>)
 8009b9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009b9e:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <tcp_input+0x2b4>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00c      	beq.n	8009bc4 <tcp_input+0x214>
    tcplen++;
 8009baa:	4b2f      	ldr	r3, [pc, #188]	; (8009c68 <tcp_input+0x2b8>)
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	4b2d      	ldr	r3, [pc, #180]	; (8009c68 <tcp_input+0x2b8>)
 8009bb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	891a      	ldrh	r2, [r3, #8]
 8009bba:	4b2b      	ldr	r3, [pc, #172]	; (8009c68 <tcp_input+0x2b8>)
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	f200 82d9 	bhi.w	800a176 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <tcp_input+0x2bc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	61fb      	str	r3, [r7, #28]
 8009bce:	e09d      	b.n	8009d0c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	7d1b      	ldrb	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <tcp_input+0x234>
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <tcp_input+0x280>)
 8009bda:	22fb      	movs	r2, #251	; 0xfb
 8009bdc:	4924      	ldr	r1, [pc, #144]	; (8009c70 <tcp_input+0x2c0>)
 8009bde:	4816      	ldr	r0, [pc, #88]	; (8009c38 <tcp_input+0x288>)
 8009be0:	f00d f89a 	bl	8016d18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	7d1b      	ldrb	r3, [r3, #20]
 8009be8:	2b0a      	cmp	r3, #10
 8009bea:	d105      	bne.n	8009bf8 <tcp_input+0x248>
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <tcp_input+0x280>)
 8009bee:	22fc      	movs	r2, #252	; 0xfc
 8009bf0:	4920      	ldr	r1, [pc, #128]	; (8009c74 <tcp_input+0x2c4>)
 8009bf2:	4811      	ldr	r0, [pc, #68]	; (8009c38 <tcp_input+0x288>)
 8009bf4:	f00d f890 	bl	8016d18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	7d1b      	ldrb	r3, [r3, #20]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d105      	bne.n	8009c0c <tcp_input+0x25c>
 8009c00:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <tcp_input+0x280>)
 8009c02:	22fd      	movs	r2, #253	; 0xfd
 8009c04:	491c      	ldr	r1, [pc, #112]	; (8009c78 <tcp_input+0x2c8>)
 8009c06:	480c      	ldr	r0, [pc, #48]	; (8009c38 <tcp_input+0x288>)
 8009c08:	f00d f886 	bl	8016d18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	7a1b      	ldrb	r3, [r3, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d033      	beq.n	8009c7c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	7a1a      	ldrb	r2, [r3, #8]
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <tcp_input+0x290>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c20:	3301      	adds	r3, #1
 8009c22:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d029      	beq.n	8009c7c <tcp_input+0x2cc>
      prev = pcb;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	61bb      	str	r3, [r7, #24]
      continue;
 8009c2c:	e06b      	b.n	8009d06 <tcp_input+0x356>
 8009c2e:	bf00      	nop
 8009c30:	08019084 	.word	0x08019084
 8009c34:	080190b8 	.word	0x080190b8
 8009c38:	080190d0 	.word	0x080190d0
 8009c3c:	200000e0 	.word	0x200000e0
 8009c40:	20003428 	.word	0x20003428
 8009c44:	200000e4 	.word	0x200000e4
 8009c48:	200000e8 	.word	0x200000e8
 8009c4c:	200000e6 	.word	0x200000e6
 8009c50:	080190f8 	.word	0x080190f8
 8009c54:	08019108 	.word	0x08019108
 8009c58:	08019114 	.word	0x08019114
 8009c5c:	200000f0 	.word	0x200000f0
 8009c60:	200000f4 	.word	0x200000f4
 8009c64:	200000fc 	.word	0x200000fc
 8009c68:	200000fa 	.word	0x200000fa
 8009c6c:	2000696c 	.word	0x2000696c
 8009c70:	08019134 	.word	0x08019134
 8009c74:	0801915c 	.word	0x0801915c
 8009c78:	08019188 	.word	0x08019188
    }

    if (pcb->remote_port == tcphdr->src &&
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	8b1a      	ldrh	r2, [r3, #24]
 8009c80:	4b94      	ldr	r3, [pc, #592]	; (8009ed4 <tcp_input+0x524>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d13a      	bne.n	8009d02 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	8ada      	ldrh	r2, [r3, #22]
 8009c90:	4b90      	ldr	r3, [pc, #576]	; (8009ed4 <tcp_input+0x524>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	885b      	ldrh	r3, [r3, #2]
 8009c96:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d132      	bne.n	8009d02 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	4b8d      	ldr	r3, [pc, #564]	; (8009ed8 <tcp_input+0x528>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d12c      	bne.n	8009d02 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	4b8a      	ldr	r3, [pc, #552]	; (8009ed8 <tcp_input+0x528>)
 8009cae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d126      	bne.n	8009d02 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d106      	bne.n	8009ccc <tcp_input+0x31c>
 8009cbe:	4b87      	ldr	r3, [pc, #540]	; (8009edc <tcp_input+0x52c>)
 8009cc0:	f240 120d 	movw	r2, #269	; 0x10d
 8009cc4:	4986      	ldr	r1, [pc, #536]	; (8009ee0 <tcp_input+0x530>)
 8009cc6:	4887      	ldr	r0, [pc, #540]	; (8009ee4 <tcp_input+0x534>)
 8009cc8:	f00d f826 	bl	8016d18 <iprintf>
      if (prev != NULL) {
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <tcp_input+0x338>
        prev->next = pcb->next;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009cda:	4b83      	ldr	r3, [pc, #524]	; (8009ee8 <tcp_input+0x538>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009ce2:	4a81      	ldr	r2, [pc, #516]	; (8009ee8 <tcp_input+0x538>)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d111      	bne.n	8009d16 <tcp_input+0x366>
 8009cf2:	4b7a      	ldr	r3, [pc, #488]	; (8009edc <tcp_input+0x52c>)
 8009cf4:	f240 1215 	movw	r2, #277	; 0x115
 8009cf8:	497c      	ldr	r1, [pc, #496]	; (8009eec <tcp_input+0x53c>)
 8009cfa:	487a      	ldr	r0, [pc, #488]	; (8009ee4 <tcp_input+0x534>)
 8009cfc:	f00d f80c 	bl	8016d18 <iprintf>
      break;
 8009d00:	e009      	b.n	8009d16 <tcp_input+0x366>
    }
    prev = pcb;
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f47f af5e 	bne.w	8009bd0 <tcp_input+0x220>
 8009d14:	e000      	b.n	8009d18 <tcp_input+0x368>
      break;
 8009d16:	bf00      	nop
  }

  if (pcb == NULL) {
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 8095 	bne.w	8009e4a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d20:	4b73      	ldr	r3, [pc, #460]	; (8009ef0 <tcp_input+0x540>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	61fb      	str	r3, [r7, #28]
 8009d26:	e03f      	b.n	8009da8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	7d1b      	ldrb	r3, [r3, #20]
 8009d2c:	2b0a      	cmp	r3, #10
 8009d2e:	d006      	beq.n	8009d3e <tcp_input+0x38e>
 8009d30:	4b6a      	ldr	r3, [pc, #424]	; (8009edc <tcp_input+0x52c>)
 8009d32:	f240 121f 	movw	r2, #287	; 0x11f
 8009d36:	496f      	ldr	r1, [pc, #444]	; (8009ef4 <tcp_input+0x544>)
 8009d38:	486a      	ldr	r0, [pc, #424]	; (8009ee4 <tcp_input+0x534>)
 8009d3a:	f00c ffed 	bl	8016d18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	7a1b      	ldrb	r3, [r3, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	7a1a      	ldrb	r2, [r3, #8]
 8009d4a:	4b63      	ldr	r3, [pc, #396]	; (8009ed8 <tcp_input+0x528>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d52:	3301      	adds	r3, #1
 8009d54:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d122      	bne.n	8009da0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	8b1a      	ldrh	r2, [r3, #24]
 8009d5e:	4b5d      	ldr	r3, [pc, #372]	; (8009ed4 <tcp_input+0x524>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d11b      	bne.n	8009da2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	8ada      	ldrh	r2, [r3, #22]
 8009d6e:	4b59      	ldr	r3, [pc, #356]	; (8009ed4 <tcp_input+0x524>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	885b      	ldrh	r3, [r3, #2]
 8009d74:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d113      	bne.n	8009da2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4b56      	ldr	r3, [pc, #344]	; (8009ed8 <tcp_input+0x528>)
 8009d80:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d10d      	bne.n	8009da2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b53      	ldr	r3, [pc, #332]	; (8009ed8 <tcp_input+0x528>)
 8009d8c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d107      	bne.n	8009da2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009d92:	69f8      	ldr	r0, [r7, #28]
 8009d94:	f000 fb54 	bl	800a440 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fd fd31 	bl	8007800 <pbuf_free>
        return;
 8009d9e:	e1f0      	b.n	800a182 <tcp_input+0x7d2>
        continue;
 8009da0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1bc      	bne.n	8009d28 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009db2:	4b51      	ldr	r3, [pc, #324]	; (8009ef8 <tcp_input+0x548>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e02a      	b.n	8009e10 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	7a1b      	ldrb	r3, [r3, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00c      	beq.n	8009ddc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	7a1a      	ldrb	r2, [r3, #8]
 8009dc6:	4b44      	ldr	r3, [pc, #272]	; (8009ed8 <tcp_input+0x528>)
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d002      	beq.n	8009ddc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	61bb      	str	r3, [r7, #24]
        continue;
 8009dda:	e016      	b.n	8009e0a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	8ada      	ldrh	r2, [r3, #22]
 8009de0:	4b3c      	ldr	r3, [pc, #240]	; (8009ed4 <tcp_input+0x524>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d10c      	bne.n	8009e06 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	4b39      	ldr	r3, [pc, #228]	; (8009ed8 <tcp_input+0x528>)
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d00f      	beq.n	8009e18 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <tcp_input+0x46a>
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1d1      	bne.n	8009dba <tcp_input+0x40a>
 8009e16:	e000      	b.n	8009e1a <tcp_input+0x46a>
            break;
 8009e18:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d014      	beq.n	8009e4a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009e2e:	4b32      	ldr	r3, [pc, #200]	; (8009ef8 <tcp_input+0x548>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e36:	4a30      	ldr	r2, [pc, #192]	; (8009ef8 <tcp_input+0x548>)
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009e3c:	6978      	ldr	r0, [r7, #20]
 8009e3e:	f000 fa01 	bl	800a244 <tcp_listen_input>
      }
      pbuf_free(p);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fd fcdc 	bl	8007800 <pbuf_free>
      return;
 8009e48:	e19b      	b.n	800a182 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8160 	beq.w	800a112 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009e52:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <tcp_input+0x54c>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	891a      	ldrh	r2, [r3, #8]
 8009e5c:	4b27      	ldr	r3, [pc, #156]	; (8009efc <tcp_input+0x54c>)
 8009e5e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009e60:	4a26      	ldr	r2, [pc, #152]	; (8009efc <tcp_input+0x54c>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009e66:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <tcp_input+0x524>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a24      	ldr	r2, [pc, #144]	; (8009efc <tcp_input+0x54c>)
 8009e6c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <tcp_input+0x550>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009e74:	4b23      	ldr	r3, [pc, #140]	; (8009f04 <tcp_input+0x554>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009e7a:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <tcp_input+0x558>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009e80:	4b22      	ldr	r3, [pc, #136]	; (8009f0c <tcp_input+0x55c>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f003 0308 	and.w	r3, r3, #8
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7b5b      	ldrb	r3, [r3, #13]
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d038      	beq.n	8009f14 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009ea2:	69f8      	ldr	r0, [r7, #28]
 8009ea4:	f7ff f858 	bl	8008f58 <tcp_process_refused_data>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f113 0f0d 	cmn.w	r3, #13
 8009eae:	d007      	beq.n	8009ec0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d02d      	beq.n	8009f14 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eb8:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <tcp_input+0x560>)
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d029      	beq.n	8009f14 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f040 8104 	bne.w	800a0d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009eca:	69f8      	ldr	r0, [r7, #28]
 8009ecc:	f003 fe16 	bl	800dafc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009ed0:	e0ff      	b.n	800a0d2 <tcp_input+0x722>
 8009ed2:	bf00      	nop
 8009ed4:	200000e0 	.word	0x200000e0
 8009ed8:	20003428 	.word	0x20003428
 8009edc:	08019084 	.word	0x08019084
 8009ee0:	080191b0 	.word	0x080191b0
 8009ee4:	080190d0 	.word	0x080190d0
 8009ee8:	2000696c 	.word	0x2000696c
 8009eec:	080191dc 	.word	0x080191dc
 8009ef0:	2000697c 	.word	0x2000697c
 8009ef4:	08019208 	.word	0x08019208
 8009ef8:	20006974 	.word	0x20006974
 8009efc:	200000d0 	.word	0x200000d0
 8009f00:	20000100 	.word	0x20000100
 8009f04:	200000fd 	.word	0x200000fd
 8009f08:	200000f8 	.word	0x200000f8
 8009f0c:	200000fc 	.word	0x200000fc
 8009f10:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8009f14:	4a9c      	ldr	r2, [pc, #624]	; (800a188 <tcp_input+0x7d8>)
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009f1a:	69f8      	ldr	r0, [r7, #28]
 8009f1c:	f000 fb0a 	bl	800a534 <tcp_process>
 8009f20:	4603      	mov	r3, r0
 8009f22:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009f24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f28:	f113 0f0d 	cmn.w	r3, #13
 8009f2c:	f000 80d3 	beq.w	800a0d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009f30:	4b96      	ldr	r3, [pc, #600]	; (800a18c <tcp_input+0x7dc>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d015      	beq.n	8009f68 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d008      	beq.n	8009f58 <tcp_input+0x5a8>
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	6912      	ldr	r2, [r2, #16]
 8009f50:	f06f 010d 	mvn.w	r1, #13
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009f58:	69f9      	ldr	r1, [r7, #28]
 8009f5a:	488d      	ldr	r0, [pc, #564]	; (800a190 <tcp_input+0x7e0>)
 8009f5c:	f7ff fbb0 	bl	80096c0 <tcp_pcb_remove>
        tcp_free(pcb);
 8009f60:	69f8      	ldr	r0, [r7, #28]
 8009f62:	f7fd fefd 	bl	8007d60 <tcp_free>
 8009f66:	e0c1      	b.n	800a0ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009f6c:	4b89      	ldr	r3, [pc, #548]	; (800a194 <tcp_input+0x7e4>)
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01d      	beq.n	8009fb0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009f74:	4b87      	ldr	r3, [pc, #540]	; (800a194 <tcp_input+0x7e4>)
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00a      	beq.n	8009f9a <tcp_input+0x5ea>
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	6910      	ldr	r0, [r2, #16]
 8009f8e:	89fa      	ldrh	r2, [r7, #14]
 8009f90:	69f9      	ldr	r1, [r7, #28]
 8009f92:	4798      	blx	r3
 8009f94:	4603      	mov	r3, r0
 8009f96:	74fb      	strb	r3, [r7, #19]
 8009f98:	e001      	b.n	8009f9e <tcp_input+0x5ee>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fa2:	f113 0f0d 	cmn.w	r3, #13
 8009fa6:	f000 8098 	beq.w	800a0da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009faa:	4b7a      	ldr	r3, [pc, #488]	; (800a194 <tcp_input+0x7e4>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009fb0:	69f8      	ldr	r0, [r7, #28]
 8009fb2:	f000 f907 	bl	800a1c4 <tcp_input_delayed_close>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 8090 	bne.w	800a0de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009fbe:	4b76      	ldr	r3, [pc, #472]	; (800a198 <tcp_input+0x7e8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d041      	beq.n	800a04a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <tcp_input+0x62c>
 8009fce:	4b73      	ldr	r3, [pc, #460]	; (800a19c <tcp_input+0x7ec>)
 8009fd0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009fd4:	4972      	ldr	r1, [pc, #456]	; (800a1a0 <tcp_input+0x7f0>)
 8009fd6:	4873      	ldr	r0, [pc, #460]	; (800a1a4 <tcp_input+0x7f4>)
 8009fd8:	f00c fe9e 	bl	8016d18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	8b5b      	ldrh	r3, [r3, #26]
 8009fe0:	f003 0310 	and.w	r3, r3, #16
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009fe8:	4b6b      	ldr	r3, [pc, #428]	; (800a198 <tcp_input+0x7e8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fd fc07 	bl	8007800 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009ff2:	69f8      	ldr	r0, [r7, #28]
 8009ff4:	f7fe f99c 	bl	8008330 <tcp_abort>
            goto aborted;
 8009ff8:	e078      	b.n	800a0ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00c      	beq.n	800a01e <tcp_input+0x66e>
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	6918      	ldr	r0, [r3, #16]
 800a00e:	4b62      	ldr	r3, [pc, #392]	; (800a198 <tcp_input+0x7e8>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	2300      	movs	r3, #0
 800a014:	69f9      	ldr	r1, [r7, #28]
 800a016:	47a0      	blx	r4
 800a018:	4603      	mov	r3, r0
 800a01a:	74fb      	strb	r3, [r7, #19]
 800a01c:	e008      	b.n	800a030 <tcp_input+0x680>
 800a01e:	4b5e      	ldr	r3, [pc, #376]	; (800a198 <tcp_input+0x7e8>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	2300      	movs	r3, #0
 800a024:	69f9      	ldr	r1, [r7, #28]
 800a026:	2000      	movs	r0, #0
 800a028:	f7ff f88a 	bl	8009140 <tcp_recv_null>
 800a02c:	4603      	mov	r3, r0
 800a02e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a034:	f113 0f0d 	cmn.w	r3, #13
 800a038:	d053      	beq.n	800a0e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a03a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a042:	4b55      	ldr	r3, [pc, #340]	; (800a198 <tcp_input+0x7e8>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a04a:	4b50      	ldr	r3, [pc, #320]	; (800a18c <tcp_input+0x7dc>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d030      	beq.n	800a0b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a062:	7b5a      	ldrb	r2, [r3, #13]
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a068:	f042 0220 	orr.w	r2, r2, #32
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	735a      	strb	r2, [r3, #13]
 800a070:	e022      	b.n	800a0b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a076:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a07a:	d005      	beq.n	800a088 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a080:	3301      	adds	r3, #1
 800a082:	b29a      	uxth	r2, r3
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <tcp_input+0x6fa>
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	6918      	ldr	r0, [r3, #16]
 800a09c:	2300      	movs	r3, #0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	69f9      	ldr	r1, [r7, #28]
 800a0a2:	47a0      	blx	r4
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	74fb      	strb	r3, [r7, #19]
 800a0a8:	e001      	b.n	800a0ae <tcp_input+0x6fe>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a0ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0b2:	f113 0f0d 	cmn.w	r3, #13
 800a0b6:	d016      	beq.n	800a0e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a0b8:	4b33      	ldr	r3, [pc, #204]	; (800a188 <tcp_input+0x7d8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a0be:	69f8      	ldr	r0, [r7, #28]
 800a0c0:	f000 f880 	bl	800a1c4 <tcp_input_delayed_close>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10f      	bne.n	800a0ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a0ca:	69f8      	ldr	r0, [r7, #28]
 800a0cc:	f002 ff10 	bl	800cef0 <tcp_output>
 800a0d0:	e00c      	b.n	800a0ec <tcp_input+0x73c>
        goto aborted;
 800a0d2:	bf00      	nop
 800a0d4:	e00a      	b.n	800a0ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a0d6:	bf00      	nop
 800a0d8:	e008      	b.n	800a0ec <tcp_input+0x73c>
              goto aborted;
 800a0da:	bf00      	nop
 800a0dc:	e006      	b.n	800a0ec <tcp_input+0x73c>
          goto aborted;
 800a0de:	bf00      	nop
 800a0e0:	e004      	b.n	800a0ec <tcp_input+0x73c>
            goto aborted;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <tcp_input+0x73c>
              goto aborted;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <tcp_input+0x73c>
          goto aborted;
 800a0ea:	bf00      	nop
    tcp_input_pcb = NULL;
 800a0ec:	4b26      	ldr	r3, [pc, #152]	; (800a188 <tcp_input+0x7d8>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a0f2:	4b29      	ldr	r3, [pc, #164]	; (800a198 <tcp_input+0x7e8>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	; (800a1a8 <tcp_input+0x7f8>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d03f      	beq.n	800a180 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a100:	4b29      	ldr	r3, [pc, #164]	; (800a1a8 <tcp_input+0x7f8>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fd fb7b 	bl	8007800 <pbuf_free>
      inseg.p = NULL;
 800a10a:	4b27      	ldr	r3, [pc, #156]	; (800a1a8 <tcp_input+0x7f8>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a110:	e036      	b.n	800a180 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a112:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <tcp_input+0x7fc>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	899b      	ldrh	r3, [r3, #12]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc f8bc 	bl	8006298 <lwip_htons>
 800a120:	4603      	mov	r3, r0
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d118      	bne.n	800a15e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a12c:	4b20      	ldr	r3, [pc, #128]	; (800a1b0 <tcp_input+0x800>)
 800a12e:	6819      	ldr	r1, [r3, #0]
 800a130:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <tcp_input+0x804>)
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	461a      	mov	r2, r3
 800a136:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <tcp_input+0x808>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a13c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <tcp_input+0x7fc>)
 800a13e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a144:	4a19      	ldr	r2, [pc, #100]	; (800a1ac <tcp_input+0x7fc>)
 800a146:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a148:	8812      	ldrh	r2, [r2, #0]
 800a14a:	b292      	uxth	r2, r2
 800a14c:	9202      	str	r2, [sp, #8]
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	4b1a      	ldr	r3, [pc, #104]	; (800a1bc <tcp_input+0x80c>)
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <tcp_input+0x810>)
 800a156:	4602      	mov	r2, r0
 800a158:	2000      	movs	r0, #0
 800a15a:	f003 fc7d 	bl	800da58 <tcp_rst>
    pbuf_free(p);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7fd fb4e 	bl	8007800 <pbuf_free>
  return;
 800a164:	e00c      	b.n	800a180 <tcp_input+0x7d0>
    goto dropped;
 800a166:	bf00      	nop
 800a168:	e006      	b.n	800a178 <tcp_input+0x7c8>
    goto dropped;
 800a16a:	bf00      	nop
 800a16c:	e004      	b.n	800a178 <tcp_input+0x7c8>
    goto dropped;
 800a16e:	bf00      	nop
 800a170:	e002      	b.n	800a178 <tcp_input+0x7c8>
      goto dropped;
 800a172:	bf00      	nop
 800a174:	e000      	b.n	800a178 <tcp_input+0x7c8>
      goto dropped;
 800a176:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fd fb41 	bl	8007800 <pbuf_free>
 800a17e:	e000      	b.n	800a182 <tcp_input+0x7d2>
  return;
 800a180:	bf00      	nop
}
 800a182:	3724      	adds	r7, #36	; 0x24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd90      	pop	{r4, r7, pc}
 800a188:	20006980 	.word	0x20006980
 800a18c:	200000fd 	.word	0x200000fd
 800a190:	2000696c 	.word	0x2000696c
 800a194:	200000f8 	.word	0x200000f8
 800a198:	20000100 	.word	0x20000100
 800a19c:	08019084 	.word	0x08019084
 800a1a0:	08019238 	.word	0x08019238
 800a1a4:	080190d0 	.word	0x080190d0
 800a1a8:	200000d0 	.word	0x200000d0
 800a1ac:	200000e0 	.word	0x200000e0
 800a1b0:	200000f4 	.word	0x200000f4
 800a1b4:	200000fa 	.word	0x200000fa
 800a1b8:	200000f0 	.word	0x200000f0
 800a1bc:	20003438 	.word	0x20003438
 800a1c0:	2000343c 	.word	0x2000343c

0800a1c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <tcp_input_delayed_close+0x1c>
 800a1d2:	4b17      	ldr	r3, [pc, #92]	; (800a230 <tcp_input_delayed_close+0x6c>)
 800a1d4:	f240 225a 	movw	r2, #602	; 0x25a
 800a1d8:	4916      	ldr	r1, [pc, #88]	; (800a234 <tcp_input_delayed_close+0x70>)
 800a1da:	4817      	ldr	r0, [pc, #92]	; (800a238 <tcp_input_delayed_close+0x74>)
 800a1dc:	f00c fd9c 	bl	8016d18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a1e0:	4b16      	ldr	r3, [pc, #88]	; (800a23c <tcp_input_delayed_close+0x78>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f003 0310 	and.w	r3, r3, #16
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d01c      	beq.n	800a226 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	8b5b      	ldrh	r3, [r3, #26]
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10d      	bne.n	800a214 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d008      	beq.n	800a214 <tcp_input_delayed_close+0x50>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6912      	ldr	r2, [r2, #16]
 800a20c:	f06f 010e 	mvn.w	r1, #14
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	480a      	ldr	r0, [pc, #40]	; (800a240 <tcp_input_delayed_close+0x7c>)
 800a218:	f7ff fa52 	bl	80096c0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7fd fd9f 	bl	8007d60 <tcp_free>
    return 1;
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	08019084 	.word	0x08019084
 800a234:	08019254 	.word	0x08019254
 800a238:	080190d0 	.word	0x080190d0
 800a23c:	200000fd 	.word	0x200000fd
 800a240:	2000696c 	.word	0x2000696c

0800a244 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b08b      	sub	sp, #44	; 0x2c
 800a248:	af04      	add	r7, sp, #16
 800a24a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a24c:	4b6f      	ldr	r3, [pc, #444]	; (800a40c <tcp_listen_input+0x1c8>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	f040 80d2 	bne.w	800a3fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d106      	bne.n	800a26e <tcp_listen_input+0x2a>
 800a260:	4b6b      	ldr	r3, [pc, #428]	; (800a410 <tcp_listen_input+0x1cc>)
 800a262:	f240 2281 	movw	r2, #641	; 0x281
 800a266:	496b      	ldr	r1, [pc, #428]	; (800a414 <tcp_listen_input+0x1d0>)
 800a268:	486b      	ldr	r0, [pc, #428]	; (800a418 <tcp_listen_input+0x1d4>)
 800a26a:	f00c fd55 	bl	8016d18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a26e:	4b67      	ldr	r3, [pc, #412]	; (800a40c <tcp_listen_input+0x1c8>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	f003 0310 	and.w	r3, r3, #16
 800a276:	2b00      	cmp	r3, #0
 800a278:	d019      	beq.n	800a2ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a27a:	4b68      	ldr	r3, [pc, #416]	; (800a41c <tcp_listen_input+0x1d8>)
 800a27c:	6819      	ldr	r1, [r3, #0]
 800a27e:	4b68      	ldr	r3, [pc, #416]	; (800a420 <tcp_listen_input+0x1dc>)
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	4b67      	ldr	r3, [pc, #412]	; (800a424 <tcp_listen_input+0x1e0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a28a:	4b67      	ldr	r3, [pc, #412]	; (800a428 <tcp_listen_input+0x1e4>)
 800a28c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a28e:	885b      	ldrh	r3, [r3, #2]
 800a290:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a292:	4a65      	ldr	r2, [pc, #404]	; (800a428 <tcp_listen_input+0x1e4>)
 800a294:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a296:	8812      	ldrh	r2, [r2, #0]
 800a298:	b292      	uxth	r2, r2
 800a29a:	9202      	str	r2, [sp, #8]
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	4b63      	ldr	r3, [pc, #396]	; (800a42c <tcp_listen_input+0x1e8>)
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4b63      	ldr	r3, [pc, #396]	; (800a430 <tcp_listen_input+0x1ec>)
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f003 fbd6 	bl	800da58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a2ac:	e0a9      	b.n	800a402 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a2ae:	4b57      	ldr	r3, [pc, #348]	; (800a40c <tcp_listen_input+0x1c8>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 80a3 	beq.w	800a402 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7d5b      	ldrb	r3, [r3, #21]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f861 	bl	8009388 <tcp_alloc>
 800a2c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d111      	bne.n	800a2f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <tcp_listen_input+0xa8>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6910      	ldr	r0, [r2, #16]
 800a2de:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4798      	blx	r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73bb      	strb	r3, [r7, #14]
      return;
 800a2ea:	e08b      	b.n	800a404 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2ec:	23f0      	movs	r3, #240	; 0xf0
 800a2ee:	73bb      	strb	r3, [r7, #14]
      return;
 800a2f0:	e088      	b.n	800a404 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2f2:	4b50      	ldr	r3, [pc, #320]	; (800a434 <tcp_listen_input+0x1f0>)
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a2fa:	4b4e      	ldr	r3, [pc, #312]	; (800a434 <tcp_listen_input+0x1f0>)
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	8ada      	ldrh	r2, [r3, #22]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a30a:	4b47      	ldr	r3, [pc, #284]	; (800a428 <tcp_listen_input+0x1e4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29a      	uxth	r2, r3
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2203      	movs	r2, #3
 800a31a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a31c:	4b41      	ldr	r3, [pc, #260]	; (800a424 <tcp_listen_input+0x1e0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a32e:	6978      	ldr	r0, [r7, #20]
 800a330:	f7ff fa5a 	bl	80097e8 <tcp_next_iss>
 800a334:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a34e:	4b35      	ldr	r3, [pc, #212]	; (800a424 <tcp_listen_input+0x1e0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	7a5b      	ldrb	r3, [r3, #9]
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	7a1a      	ldrb	r2, [r3, #8]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a37c:	4b2e      	ldr	r3, [pc, #184]	; (800a438 <tcp_listen_input+0x1f4>)
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	60da      	str	r2, [r3, #12]
 800a384:	4a2c      	ldr	r2, [pc, #176]	; (800a438 <tcp_listen_input+0x1f4>)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	f003 fd27 	bl	800dddc <tcp_timer_needed>
 800a38e:	4b2b      	ldr	r3, [pc, #172]	; (800a43c <tcp_listen_input+0x1f8>)
 800a390:	2201      	movs	r2, #1
 800a392:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a394:	6978      	ldr	r0, [r7, #20]
 800a396:	f001 fd8d 	bl	800beb4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a39a:	4b23      	ldr	r3, [pc, #140]	; (800a428 <tcp_listen_input+0x1e4>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	89db      	ldrh	r3, [r3, #14]
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f005 f8eb 	bl	800f598 <ip4_route>
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff fa32 	bl	8009834 <tcp_eff_send_mss_netif>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3d8:	2112      	movs	r1, #18
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f002 fc9a 	bl	800cd14 <tcp_enqueue_flags>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d004      	beq.n	800a3f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6978      	ldr	r0, [r7, #20]
 800a3f0:	f7fd fee0 	bl	80081b4 <tcp_abandon>
      return;
 800a3f4:	e006      	b.n	800a404 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a3f6:	6978      	ldr	r0, [r7, #20]
 800a3f8:	f002 fd7a 	bl	800cef0 <tcp_output>
  return;
 800a3fc:	e001      	b.n	800a402 <tcp_listen_input+0x1be>
    return;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <tcp_listen_input+0x1c0>
  return;
 800a402:	bf00      	nop
}
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	bd90      	pop	{r4, r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200000fc 	.word	0x200000fc
 800a410:	08019084 	.word	0x08019084
 800a414:	0801927c 	.word	0x0801927c
 800a418:	080190d0 	.word	0x080190d0
 800a41c:	200000f4 	.word	0x200000f4
 800a420:	200000fa 	.word	0x200000fa
 800a424:	200000f0 	.word	0x200000f0
 800a428:	200000e0 	.word	0x200000e0
 800a42c:	20003438 	.word	0x20003438
 800a430:	2000343c 	.word	0x2000343c
 800a434:	20003428 	.word	0x20003428
 800a438:	2000696c 	.word	0x2000696c
 800a43c:	20006968 	.word	0x20006968

0800a440 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af04      	add	r7, sp, #16
 800a446:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a448:	4b2f      	ldr	r3, [pc, #188]	; (800a508 <tcp_timewait_input+0xc8>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d153      	bne.n	800a4fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <tcp_timewait_input+0x28>
 800a45a:	4b2c      	ldr	r3, [pc, #176]	; (800a50c <tcp_timewait_input+0xcc>)
 800a45c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a460:	492b      	ldr	r1, [pc, #172]	; (800a510 <tcp_timewait_input+0xd0>)
 800a462:	482c      	ldr	r0, [pc, #176]	; (800a514 <tcp_timewait_input+0xd4>)
 800a464:	f00c fc58 	bl	8016d18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a468:	4b27      	ldr	r3, [pc, #156]	; (800a508 <tcp_timewait_input+0xc8>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d02a      	beq.n	800a4ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a474:	4b28      	ldr	r3, [pc, #160]	; (800a518 <tcp_timewait_input+0xd8>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	db2d      	blt.n	800a4de <tcp_timewait_input+0x9e>
 800a482:	4b25      	ldr	r3, [pc, #148]	; (800a518 <tcp_timewait_input+0xd8>)
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a48e:	440b      	add	r3, r1
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	dc23      	bgt.n	800a4de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a496:	4b21      	ldr	r3, [pc, #132]	; (800a51c <tcp_timewait_input+0xdc>)
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <tcp_timewait_input+0xe0>)
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <tcp_timewait_input+0xd8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	; (800a524 <tcp_timewait_input+0xe4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4aa:	885b      	ldrh	r3, [r3, #2]
 800a4ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4ae:	4a1d      	ldr	r2, [pc, #116]	; (800a524 <tcp_timewait_input+0xe4>)
 800a4b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4b2:	8812      	ldrh	r2, [r2, #0]
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	9202      	str	r2, [sp, #8]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <tcp_timewait_input+0xe8>)
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <tcp_timewait_input+0xec>)
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f003 fac8 	bl	800da58 <tcp_rst>
      return;
 800a4c8:	e01b      	b.n	800a502 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <tcp_timewait_input+0xc8>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <tcp_timewait_input+0xf0>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <tcp_timewait_input+0xe0>)
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00c      	beq.n	800a500 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8b5b      	ldrh	r3, [r3, #26]
 800a4ea:	f043 0302 	orr.w	r3, r3, #2
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f002 fcfb 	bl	800cef0 <tcp_output>
  }
  return;
 800a4fa:	e001      	b.n	800a500 <tcp_timewait_input+0xc0>
    return;
 800a4fc:	bf00      	nop
 800a4fe:	e000      	b.n	800a502 <tcp_timewait_input+0xc2>
  return;
 800a500:	bf00      	nop
}
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	200000fc 	.word	0x200000fc
 800a50c:	08019084 	.word	0x08019084
 800a510:	0801929c 	.word	0x0801929c
 800a514:	080190d0 	.word	0x080190d0
 800a518:	200000f0 	.word	0x200000f0
 800a51c:	200000f4 	.word	0x200000f4
 800a520:	200000fa 	.word	0x200000fa
 800a524:	200000e0 	.word	0x200000e0
 800a528:	20003438 	.word	0x20003438
 800a52c:	2000343c 	.word	0x2000343c
 800a530:	20006970 	.word	0x20006970

0800a534 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b08d      	sub	sp, #52	; 0x34
 800a538:	af04      	add	r7, sp, #16
 800a53a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <tcp_process+0x24>
 800a54a:	4ba5      	ldr	r3, [pc, #660]	; (800a7e0 <tcp_process+0x2ac>)
 800a54c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a550:	49a4      	ldr	r1, [pc, #656]	; (800a7e4 <tcp_process+0x2b0>)
 800a552:	48a5      	ldr	r0, [pc, #660]	; (800a7e8 <tcp_process+0x2b4>)
 800a554:	f00c fbe0 	bl	8016d18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a558:	4ba4      	ldr	r3, [pc, #656]	; (800a7ec <tcp_process+0x2b8>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d04e      	beq.n	800a602 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7d1b      	ldrb	r3, [r3, #20]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d108      	bne.n	800a57e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a570:	4b9f      	ldr	r3, [pc, #636]	; (800a7f0 <tcp_process+0x2bc>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d123      	bne.n	800a5c0 <tcp_process+0x8c>
        acceptable = 1;
 800a578:	2301      	movs	r3, #1
 800a57a:	76fb      	strb	r3, [r7, #27]
 800a57c:	e020      	b.n	800a5c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a582:	4b9c      	ldr	r3, [pc, #624]	; (800a7f4 <tcp_process+0x2c0>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d102      	bne.n	800a590 <tcp_process+0x5c>
        acceptable = 1;
 800a58a:	2301      	movs	r3, #1
 800a58c:	76fb      	strb	r3, [r7, #27]
 800a58e:	e017      	b.n	800a5c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a590:	4b98      	ldr	r3, [pc, #608]	; (800a7f4 <tcp_process+0x2c0>)
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	db10      	blt.n	800a5c0 <tcp_process+0x8c>
 800a59e:	4b95      	ldr	r3, [pc, #596]	; (800a7f4 <tcp_process+0x2c0>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5aa:	440b      	add	r3, r1
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dc06      	bgt.n	800a5c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8b5b      	ldrh	r3, [r3, #26]
 800a5b6:	f043 0302 	orr.w	r3, r3, #2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a5c0:	7efb      	ldrb	r3, [r7, #27]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01b      	beq.n	800a5fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <tcp_process+0xa8>
 800a5ce:	4b84      	ldr	r3, [pc, #528]	; (800a7e0 <tcp_process+0x2ac>)
 800a5d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a5d4:	4988      	ldr	r1, [pc, #544]	; (800a7f8 <tcp_process+0x2c4>)
 800a5d6:	4884      	ldr	r0, [pc, #528]	; (800a7e8 <tcp_process+0x2b4>)
 800a5d8:	f00c fb9e 	bl	8016d18 <iprintf>
      recv_flags |= TF_RESET;
 800a5dc:	4b87      	ldr	r3, [pc, #540]	; (800a7fc <tcp_process+0x2c8>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f043 0308 	orr.w	r3, r3, #8
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	4b85      	ldr	r3, [pc, #532]	; (800a7fc <tcp_process+0x2c8>)
 800a5e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8b5b      	ldrh	r3, [r3, #26]
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a5f8:	f06f 030d 	mvn.w	r3, #13
 800a5fc:	e37a      	b.n	800acf4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e378      	b.n	800acf4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a602:	4b7a      	ldr	r3, [pc, #488]	; (800a7ec <tcp_process+0x2b8>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d010      	beq.n	800a630 <tcp_process+0xfc>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7d1b      	ldrb	r3, [r3, #20]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d00c      	beq.n	800a630 <tcp_process+0xfc>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	7d1b      	ldrb	r3, [r3, #20]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d008      	beq.n	800a630 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	8b5b      	ldrh	r3, [r3, #26]
 800a622:	f043 0302 	orr.w	r3, r3, #2
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e361      	b.n	800acf4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8b5b      	ldrh	r3, [r3, #26]
 800a634:	f003 0310 	and.w	r3, r3, #16
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a63c:	4b70      	ldr	r3, [pc, #448]	; (800a800 <tcp_process+0x2cc>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 fc2d 	bl	800beb4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7d1b      	ldrb	r3, [r3, #20]
 800a65e:	3b02      	subs	r3, #2
 800a660:	2b07      	cmp	r3, #7
 800a662:	f200 8337 	bhi.w	800acd4 <tcp_process+0x7a0>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <tcp_process+0x138>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a68d 	.word	0x0800a68d
 800a670:	0800a8bd 	.word	0x0800a8bd
 800a674:	0800aa35 	.word	0x0800aa35
 800a678:	0800aa5f 	.word	0x0800aa5f
 800a67c:	0800ab83 	.word	0x0800ab83
 800a680:	0800aa35 	.word	0x0800aa35
 800a684:	0800ac0f 	.word	0x0800ac0f
 800a688:	0800ac9f 	.word	0x0800ac9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a68c:	4b57      	ldr	r3, [pc, #348]	; (800a7ec <tcp_process+0x2b8>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 80e4 	beq.w	800a862 <tcp_process+0x32e>
 800a69a:	4b54      	ldr	r3, [pc, #336]	; (800a7ec <tcp_process+0x2b8>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80dd 	beq.w	800a862 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	4b50      	ldr	r3, [pc, #320]	; (800a7f0 <tcp_process+0x2bc>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	f040 80d5 	bne.w	800a862 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a6b8:	4b4e      	ldr	r3, [pc, #312]	; (800a7f4 <tcp_process+0x2c0>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a6ca:	4b49      	ldr	r3, [pc, #292]	; (800a7f0 <tcp_process+0x2bc>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a6d2:	4b4c      	ldr	r3, [pc, #304]	; (800a804 <tcp_process+0x2d0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	89db      	ldrh	r3, [r3, #14]
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a6ec:	4b41      	ldr	r3, [pc, #260]	; (800a7f4 <tcp_process+0x2c0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	1e5a      	subs	r2, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	4618      	mov	r0, r3
 800a706:	f004 ff47 	bl	800f598 <ip4_route>
 800a70a:	4601      	mov	r1, r0
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	461a      	mov	r2, r3
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff f88e 	bl	8009834 <tcp_eff_send_mss_netif>
 800a718:	4603      	mov	r3, r0
 800a71a:	461a      	mov	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a724:	009a      	lsls	r2, r3, #2
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	f241 111c 	movw	r1, #4380	; 0x111c
 800a730:	428b      	cmp	r3, r1
 800a732:	bf38      	it	cc
 800a734:	460b      	movcc	r3, r1
 800a736:	429a      	cmp	r2, r3
 800a738:	d204      	bcs.n	800a744 <tcp_process+0x210>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	b29b      	uxth	r3, r3
 800a742:	e00d      	b.n	800a760 <tcp_process+0x22c>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a74e:	4293      	cmp	r3, r2
 800a750:	d904      	bls.n	800a75c <tcp_process+0x228>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	b29b      	uxth	r3, r3
 800a75a:	e001      	b.n	800a760 <tcp_process+0x22c>
 800a75c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <tcp_process+0x24a>
 800a770:	4b1b      	ldr	r3, [pc, #108]	; (800a7e0 <tcp_process+0x2ac>)
 800a772:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a776:	4924      	ldr	r1, [pc, #144]	; (800a808 <tcp_process+0x2d4>)
 800a778:	481b      	ldr	r0, [pc, #108]	; (800a7e8 <tcp_process+0x2b4>)
 800a77a:	f00c facd 	bl	8016d18 <iprintf>
        --pcb->snd_queuelen;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a784:	3b01      	subs	r3, #1
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d111      	bne.n	800a7be <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <tcp_process+0x280>
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <tcp_process+0x2ac>)
 800a7a8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a7ac:	4917      	ldr	r1, [pc, #92]	; (800a80c <tcp_process+0x2d8>)
 800a7ae:	480e      	ldr	r0, [pc, #56]	; (800a7e8 <tcp_process+0x2b4>)
 800a7b0:	f00c fab2 	bl	8016d18 <iprintf>
          pcb->unsent = rseg->next;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	66da      	str	r2, [r3, #108]	; 0x6c
 800a7bc:	e003      	b.n	800a7c6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a7c6:	69f8      	ldr	r0, [r7, #28]
 800a7c8:	f7fe fc57 	bl	800907a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11d      	bne.n	800a810 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7da:	861a      	strh	r2, [r3, #48]	; 0x30
 800a7dc:	e01f      	b.n	800a81e <tcp_process+0x2ea>
 800a7de:	bf00      	nop
 800a7e0:	08019084 	.word	0x08019084
 800a7e4:	080192bc 	.word	0x080192bc
 800a7e8:	080190d0 	.word	0x080190d0
 800a7ec:	200000fc 	.word	0x200000fc
 800a7f0:	200000f4 	.word	0x200000f4
 800a7f4:	200000f0 	.word	0x200000f0
 800a7f8:	080192d8 	.word	0x080192d8
 800a7fc:	200000fd 	.word	0x200000fd
 800a800:	20006970 	.word	0x20006970
 800a804:	200000e0 	.word	0x200000e0
 800a808:	080192f8 	.word	0x080192f8
 800a80c:	08019310 	.word	0x08019310
        } else {
          pcb->rtime = 0;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00a      	beq.n	800a83e <tcp_process+0x30a>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6910      	ldr	r0, [r2, #16]
 800a832:	2200      	movs	r2, #0
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4798      	blx	r3
 800a838:	4603      	mov	r3, r0
 800a83a:	76bb      	strb	r3, [r7, #26]
 800a83c:	e001      	b.n	800a842 <tcp_process+0x30e>
 800a83e:	2300      	movs	r3, #0
 800a840:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a842:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a846:	f113 0f0d 	cmn.w	r3, #13
 800a84a:	d102      	bne.n	800a852 <tcp_process+0x31e>
          return ERR_ABRT;
 800a84c:	f06f 030c 	mvn.w	r3, #12
 800a850:	e250      	b.n	800acf4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	8b5b      	ldrh	r3, [r3, #26]
 800a856:	f043 0302 	orr.w	r3, r3, #2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a860:	e23a      	b.n	800acd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a862:	4b9d      	ldr	r3, [pc, #628]	; (800aad8 <tcp_process+0x5a4>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	f003 0310 	and.w	r3, r3, #16
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8234 	beq.w	800acd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a870:	4b9a      	ldr	r3, [pc, #616]	; (800aadc <tcp_process+0x5a8>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	4b9a      	ldr	r3, [pc, #616]	; (800aae0 <tcp_process+0x5ac>)
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	4b9a      	ldr	r3, [pc, #616]	; (800aae4 <tcp_process+0x5b0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a880:	4b99      	ldr	r3, [pc, #612]	; (800aae8 <tcp_process+0x5b4>)
 800a882:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a884:	885b      	ldrh	r3, [r3, #2]
 800a886:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a888:	4a97      	ldr	r2, [pc, #604]	; (800aae8 <tcp_process+0x5b4>)
 800a88a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a88c:	8812      	ldrh	r2, [r2, #0]
 800a88e:	b292      	uxth	r2, r2
 800a890:	9202      	str	r2, [sp, #8]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	4b95      	ldr	r3, [pc, #596]	; (800aaec <tcp_process+0x5b8>)
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4b95      	ldr	r3, [pc, #596]	; (800aaf0 <tcp_process+0x5bc>)
 800a89a:	4602      	mov	r2, r0
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f003 f8db 	bl	800da58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8a8:	2b05      	cmp	r3, #5
 800a8aa:	f200 8215 	bhi.w	800acd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f002 fea5 	bl	800d604 <tcp_rexmit_rto>
      break;
 800a8ba:	e20d      	b.n	800acd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a8bc:	4b86      	ldr	r3, [pc, #536]	; (800aad8 <tcp_process+0x5a4>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 80a1 	beq.w	800aa0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8ca:	4b84      	ldr	r3, [pc, #528]	; (800aadc <tcp_process+0x5a8>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	db7e      	blt.n	800a9d8 <tcp_process+0x4a4>
 800a8da:	4b80      	ldr	r3, [pc, #512]	; (800aadc <tcp_process+0x5a8>)
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc77      	bgt.n	800a9d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2204      	movs	r2, #4
 800a8ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a8f6:	23fa      	movs	r3, #250	; 0xfa
 800a8f8:	76bb      	strb	r3, [r7, #26]
 800a8fa:	e01d      	b.n	800a938 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <tcp_process+0x3e0>
 800a906:	4b7b      	ldr	r3, [pc, #492]	; (800aaf4 <tcp_process+0x5c0>)
 800a908:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a90c:	497a      	ldr	r1, [pc, #488]	; (800aaf8 <tcp_process+0x5c4>)
 800a90e:	487b      	ldr	r0, [pc, #492]	; (800aafc <tcp_process+0x5c8>)
 800a910:	f00c fa02 	bl	8016d18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <tcp_process+0x400>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6910      	ldr	r0, [r2, #16]
 800a928:	2200      	movs	r2, #0
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	4798      	blx	r3
 800a92e:	4603      	mov	r3, r0
 800a930:	76bb      	strb	r3, [r7, #26]
 800a932:	e001      	b.n	800a938 <tcp_process+0x404>
 800a934:	23f0      	movs	r3, #240	; 0xf0
 800a936:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a938:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a940:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a944:	f113 0f0d 	cmn.w	r3, #13
 800a948:	d002      	beq.n	800a950 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7fd fcf0 	bl	8008330 <tcp_abort>
            }
            return ERR_ABRT;
 800a950:	f06f 030c 	mvn.w	r3, #12
 800a954:	e1ce      	b.n	800acf4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fae0 	bl	800af1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a95c:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <tcp_process+0x5cc>)
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <tcp_process+0x43c>
            recv_acked--;
 800a964:	4b66      	ldr	r3, [pc, #408]	; (800ab00 <tcp_process+0x5cc>)
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	3b01      	subs	r3, #1
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	4b64      	ldr	r3, [pc, #400]	; (800ab00 <tcp_process+0x5cc>)
 800a96e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a974:	009a      	lsls	r2, r3, #2
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	f241 111c 	movw	r1, #4380	; 0x111c
 800a980:	428b      	cmp	r3, r1
 800a982:	bf38      	it	cc
 800a984:	460b      	movcc	r3, r1
 800a986:	429a      	cmp	r2, r3
 800a988:	d204      	bcs.n	800a994 <tcp_process+0x460>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	b29b      	uxth	r3, r3
 800a992:	e00d      	b.n	800a9b0 <tcp_process+0x47c>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d904      	bls.n	800a9ac <tcp_process+0x478>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	e001      	b.n	800a9b0 <tcp_process+0x47c>
 800a9ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a9b6:	4b53      	ldr	r3, [pc, #332]	; (800ab04 <tcp_process+0x5d0>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d037      	beq.n	800aa32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8b5b      	ldrh	r3, [r3, #26]
 800a9c6:	f043 0302 	orr.w	r3, r3, #2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2207      	movs	r2, #7
 800a9d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a9d6:	e02c      	b.n	800aa32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9d8:	4b40      	ldr	r3, [pc, #256]	; (800aadc <tcp_process+0x5a8>)
 800a9da:	6819      	ldr	r1, [r3, #0]
 800a9dc:	4b40      	ldr	r3, [pc, #256]	; (800aae0 <tcp_process+0x5ac>)
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b40      	ldr	r3, [pc, #256]	; (800aae4 <tcp_process+0x5b0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9e8:	4b3f      	ldr	r3, [pc, #252]	; (800aae8 <tcp_process+0x5b4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ec:	885b      	ldrh	r3, [r3, #2]
 800a9ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9f0:	4a3d      	ldr	r2, [pc, #244]	; (800aae8 <tcp_process+0x5b4>)
 800a9f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9f4:	8812      	ldrh	r2, [r2, #0]
 800a9f6:	b292      	uxth	r2, r2
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	4b3b      	ldr	r3, [pc, #236]	; (800aaec <tcp_process+0x5b8>)
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4b3b      	ldr	r3, [pc, #236]	; (800aaf0 <tcp_process+0x5bc>)
 800aa02:	4602      	mov	r2, r0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f003 f827 	bl	800da58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800aa0a:	e167      	b.n	800acdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800aa0c:	4b32      	ldr	r3, [pc, #200]	; (800aad8 <tcp_process+0x5a4>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 8161 	beq.w	800acdc <tcp_process+0x7a8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	1e5a      	subs	r2, r3, #1
 800aa20:	4b30      	ldr	r3, [pc, #192]	; (800aae4 <tcp_process+0x5b0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	f040 8159 	bne.w	800acdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f002 fe0c 	bl	800d648 <tcp_rexmit>
      break;
 800aa30:	e154      	b.n	800acdc <tcp_process+0x7a8>
 800aa32:	e153      	b.n	800acdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fa71 	bl	800af1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800aa3a:	4b32      	ldr	r3, [pc, #200]	; (800ab04 <tcp_process+0x5d0>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 814c 	beq.w	800ace0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	8b5b      	ldrh	r3, [r3, #26]
 800aa4c:	f043 0302 	orr.w	r3, r3, #2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2207      	movs	r2, #7
 800aa5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aa5c:	e140      	b.n	800ace0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fa5c 	bl	800af1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa64:	4b27      	ldr	r3, [pc, #156]	; (800ab04 <tcp_process+0x5d0>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d071      	beq.n	800ab54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa70:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <tcp_process+0x5a4>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d060      	beq.n	800ab3e <tcp_process+0x60a>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa80:	4b16      	ldr	r3, [pc, #88]	; (800aadc <tcp_process+0x5a8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d15a      	bne.n	800ab3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d156      	bne.n	800ab3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	8b5b      	ldrh	r3, [r3, #26]
 800aa94:	f043 0302 	orr.w	r3, r3, #2
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fe fdbe 	bl	8009620 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aaa4:	4b18      	ldr	r3, [pc, #96]	; (800ab08 <tcp_process+0x5d4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d105      	bne.n	800aaba <tcp_process+0x586>
 800aaae:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <tcp_process+0x5d4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <tcp_process+0x5d4>)
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	e02e      	b.n	800ab18 <tcp_process+0x5e4>
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <tcp_process+0x5d4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	e027      	b.n	800ab12 <tcp_process+0x5de>
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d11f      	bne.n	800ab0c <tcp_process+0x5d8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	60da      	str	r2, [r3, #12]
 800aad4:	e020      	b.n	800ab18 <tcp_process+0x5e4>
 800aad6:	bf00      	nop
 800aad8:	200000fc 	.word	0x200000fc
 800aadc:	200000f4 	.word	0x200000f4
 800aae0:	200000fa 	.word	0x200000fa
 800aae4:	200000f0 	.word	0x200000f0
 800aae8:	200000e0 	.word	0x200000e0
 800aaec:	20003438 	.word	0x20003438
 800aaf0:	2000343c 	.word	0x2000343c
 800aaf4:	08019084 	.word	0x08019084
 800aaf8:	08019324 	.word	0x08019324
 800aafc:	080190d0 	.word	0x080190d0
 800ab00:	200000f8 	.word	0x200000f8
 800ab04:	200000fd 	.word	0x200000fd
 800ab08:	2000696c 	.word	0x2000696c
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	617b      	str	r3, [r7, #20]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1d4      	bne.n	800aac2 <tcp_process+0x58e>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	60da      	str	r2, [r3, #12]
 800ab1e:	4b77      	ldr	r3, [pc, #476]	; (800acfc <tcp_process+0x7c8>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	220a      	movs	r2, #10
 800ab28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ab2a:	4b75      	ldr	r3, [pc, #468]	; (800ad00 <tcp_process+0x7cc>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	4a73      	ldr	r2, [pc, #460]	; (800ad00 <tcp_process+0x7cc>)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	f003 f950 	bl	800dddc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ab3c:	e0d2      	b.n	800ace4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	8b5b      	ldrh	r3, [r3, #26]
 800ab42:	f043 0302 	orr.w	r3, r3, #2
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2208      	movs	r2, #8
 800ab50:	751a      	strb	r2, [r3, #20]
      break;
 800ab52:	e0c7      	b.n	800ace4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab54:	4b6b      	ldr	r3, [pc, #428]	; (800ad04 <tcp_process+0x7d0>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80c1 	beq.w	800ace4 <tcp_process+0x7b0>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab66:	4b68      	ldr	r3, [pc, #416]	; (800ad08 <tcp_process+0x7d4>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	f040 80ba 	bne.w	800ace4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 80b5 	bne.w	800ace4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2206      	movs	r2, #6
 800ab7e:	751a      	strb	r2, [r3, #20]
      break;
 800ab80:	e0b0      	b.n	800ace4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f9ca 	bl	800af1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ab88:	4b60      	ldr	r3, [pc, #384]	; (800ad0c <tcp_process+0x7d8>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0320 	and.w	r3, r3, #32
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80a9 	beq.w	800ace8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	8b5b      	ldrh	r3, [r3, #26]
 800ab9a:	f043 0302 	orr.w	r3, r3, #2
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7fe fd3b 	bl	8009620 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800abaa:	4b59      	ldr	r3, [pc, #356]	; (800ad10 <tcp_process+0x7dc>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d105      	bne.n	800abc0 <tcp_process+0x68c>
 800abb4:	4b56      	ldr	r3, [pc, #344]	; (800ad10 <tcp_process+0x7dc>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	4a55      	ldr	r2, [pc, #340]	; (800ad10 <tcp_process+0x7dc>)
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	e013      	b.n	800abe8 <tcp_process+0x6b4>
 800abc0:	4b53      	ldr	r3, [pc, #332]	; (800ad10 <tcp_process+0x7dc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	e00c      	b.n	800abe2 <tcp_process+0x6ae>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d104      	bne.n	800abdc <tcp_process+0x6a8>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	e005      	b.n	800abe8 <tcp_process+0x6b4>
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	613b      	str	r3, [r7, #16]
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1ef      	bne.n	800abc8 <tcp_process+0x694>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	60da      	str	r2, [r3, #12]
 800abee:	4b43      	ldr	r3, [pc, #268]	; (800acfc <tcp_process+0x7c8>)
 800abf0:	2201      	movs	r2, #1
 800abf2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	220a      	movs	r2, #10
 800abf8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800abfa:	4b41      	ldr	r3, [pc, #260]	; (800ad00 <tcp_process+0x7cc>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60da      	str	r2, [r3, #12]
 800ac02:	4a3f      	ldr	r2, [pc, #252]	; (800ad00 <tcp_process+0x7cc>)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	f003 f8e8 	bl	800dddc <tcp_timer_needed>
      }
      break;
 800ac0c:	e06c      	b.n	800ace8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f984 	bl	800af1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ac14:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <tcp_process+0x7d0>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d065      	beq.n	800acec <tcp_process+0x7b8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac24:	4b38      	ldr	r3, [pc, #224]	; (800ad08 <tcp_process+0x7d4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d15f      	bne.n	800acec <tcp_process+0x7b8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d15b      	bne.n	800acec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7fe fcf3 	bl	8009620 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ac3a:	4b35      	ldr	r3, [pc, #212]	; (800ad10 <tcp_process+0x7dc>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d105      	bne.n	800ac50 <tcp_process+0x71c>
 800ac44:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <tcp_process+0x7dc>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	4a31      	ldr	r2, [pc, #196]	; (800ad10 <tcp_process+0x7dc>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	e013      	b.n	800ac78 <tcp_process+0x744>
 800ac50:	4b2f      	ldr	r3, [pc, #188]	; (800ad10 <tcp_process+0x7dc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	e00c      	b.n	800ac72 <tcp_process+0x73e>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d104      	bne.n	800ac6c <tcp_process+0x738>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	e005      	b.n	800ac78 <tcp_process+0x744>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1ef      	bne.n	800ac58 <tcp_process+0x724>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	60da      	str	r2, [r3, #12]
 800ac7e:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <tcp_process+0x7c8>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	220a      	movs	r2, #10
 800ac88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <tcp_process+0x7cc>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60da      	str	r2, [r3, #12]
 800ac92:	4a1b      	ldr	r2, [pc, #108]	; (800ad00 <tcp_process+0x7cc>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	f003 f8a0 	bl	800dddc <tcp_timer_needed>
      }
      break;
 800ac9c:	e026      	b.n	800acec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f93c 	bl	800af1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aca4:	4b17      	ldr	r3, [pc, #92]	; (800ad04 <tcp_process+0x7d0>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f003 0310 	and.w	r3, r3, #16
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01f      	beq.n	800acf0 <tcp_process+0x7bc>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acb4:	4b14      	ldr	r3, [pc, #80]	; (800ad08 <tcp_process+0x7d4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d119      	bne.n	800acf0 <tcp_process+0x7bc>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d115      	bne.n	800acf0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800acc4:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <tcp_process+0x7d8>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f043 0310 	orr.w	r3, r3, #16
 800accc:	b2da      	uxtb	r2, r3
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <tcp_process+0x7d8>)
 800acd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800acd2:	e00d      	b.n	800acf0 <tcp_process+0x7bc>
    default:
      break;
 800acd4:	bf00      	nop
 800acd6:	e00c      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800acd8:	bf00      	nop
 800acda:	e00a      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800acdc:	bf00      	nop
 800acde:	e008      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800ace0:	bf00      	nop
 800ace2:	e006      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800ace4:	bf00      	nop
 800ace6:	e004      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800ace8:	bf00      	nop
 800acea:	e002      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800acec:	bf00      	nop
 800acee:	e000      	b.n	800acf2 <tcp_process+0x7be>
      break;
 800acf0:	bf00      	nop
  }
  return ERR_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3724      	adds	r7, #36	; 0x24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}
 800acfc:	20006968 	.word	0x20006968
 800ad00:	2000697c 	.word	0x2000697c
 800ad04:	200000fc 	.word	0x200000fc
 800ad08:	200000f4 	.word	0x200000f4
 800ad0c:	200000fd 	.word	0x200000fd
 800ad10:	2000696c 	.word	0x2000696c

0800ad14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <tcp_oos_insert_segment+0x1e>
 800ad24:	4b3b      	ldr	r3, [pc, #236]	; (800ae14 <tcp_oos_insert_segment+0x100>)
 800ad26:	f240 421f 	movw	r2, #1055	; 0x41f
 800ad2a:	493b      	ldr	r1, [pc, #236]	; (800ae18 <tcp_oos_insert_segment+0x104>)
 800ad2c:	483b      	ldr	r0, [pc, #236]	; (800ae1c <tcp_oos_insert_segment+0x108>)
 800ad2e:	f00b fff3 	bl	8016d18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	899b      	ldrh	r3, [r3, #12]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fb faac 	bl	8006298 <lwip_htons>
 800ad40:	4603      	mov	r3, r0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d028      	beq.n	800ad9e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ad4c:	6838      	ldr	r0, [r7, #0]
 800ad4e:	f7fe f97f 	bl	8009050 <tcp_segs_free>
    next = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	603b      	str	r3, [r7, #0]
 800ad56:	e056      	b.n	800ae06 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	899b      	ldrh	r3, [r3, #12]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fb fa99 	bl	8006298 <lwip_htons>
 800ad66:	4603      	mov	r3, r0
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00d      	beq.n	800ad8e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	b29c      	uxth	r4, r3
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	f7fb fa8c 	bl	8006298 <lwip_htons>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	4322      	orrs	r2, r4
 800ad8a:	b292      	uxth	r2, r2
 800ad8c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7fe f96e 	bl	800907a <tcp_seg_free>
    while (next &&
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00e      	beq.n	800adc2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	891b      	ldrh	r3, [r3, #8]
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <tcp_oos_insert_segment+0x10c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	441a      	add	r2, r3
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	8909      	ldrh	r1, [r1, #8]
 800adba:	440b      	add	r3, r1
 800adbc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	daca      	bge.n	800ad58 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d01e      	beq.n	800ae06 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	891b      	ldrh	r3, [r3, #8]
 800adcc:	461a      	mov	r2, r3
 800adce:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <tcp_oos_insert_segment+0x10c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	441a      	add	r2, r3
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	1ad3      	subs	r3, r2, r3
    if (next &&
 800addc:	2b00      	cmp	r3, #0
 800adde:	dd12      	ble.n	800ae06 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <tcp_oos_insert_segment+0x10c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	891b      	ldrh	r3, [r3, #8]
 800adfe:	4619      	mov	r1, r3
 800ae00:	4610      	mov	r0, r2
 800ae02:	f7fc fb77 	bl	80074f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	601a      	str	r2, [r3, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd90      	pop	{r4, r7, pc}
 800ae14:	08019084 	.word	0x08019084
 800ae18:	08019344 	.word	0x08019344
 800ae1c:	080190d0 	.word	0x080190d0
 800ae20:	200000f0 	.word	0x200000f0

0800ae24 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ae24:	b5b0      	push	{r4, r5, r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ae32:	e03e      	b.n	800aeb2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fc fd64 	bl	8007910 <pbuf_clen>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae52:	8a7a      	ldrh	r2, [r7, #18]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d906      	bls.n	800ae66 <tcp_free_acked_segments+0x42>
 800ae58:	4b2a      	ldr	r3, [pc, #168]	; (800af04 <tcp_free_acked_segments+0xe0>)
 800ae5a:	f240 4257 	movw	r2, #1111	; 0x457
 800ae5e:	492a      	ldr	r1, [pc, #168]	; (800af08 <tcp_free_acked_segments+0xe4>)
 800ae60:	482a      	ldr	r0, [pc, #168]	; (800af0c <tcp_free_acked_segments+0xe8>)
 800ae62:	f00b ff59 	bl	8016d18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ae6c:	8a7b      	ldrh	r3, [r7, #18]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	891a      	ldrh	r2, [r3, #8]
 800ae7c:	4b24      	ldr	r3, [pc, #144]	; (800af10 <tcp_free_acked_segments+0xec>)
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	4413      	add	r3, r2
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	4b22      	ldr	r3, [pc, #136]	; (800af10 <tcp_free_acked_segments+0xec>)
 800ae86:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ae88:	6978      	ldr	r0, [r7, #20]
 800ae8a:	f7fe f8f6 	bl	800907a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00c      	beq.n	800aeb2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <tcp_free_acked_segments+0x8e>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <tcp_free_acked_segments+0x8e>
 800aea4:	4b17      	ldr	r3, [pc, #92]	; (800af04 <tcp_free_acked_segments+0xe0>)
 800aea6:	f240 4261 	movw	r2, #1121	; 0x461
 800aeaa:	491a      	ldr	r1, [pc, #104]	; (800af14 <tcp_free_acked_segments+0xf0>)
 800aeac:	4817      	ldr	r0, [pc, #92]	; (800af0c <tcp_free_acked_segments+0xe8>)
 800aeae:	f00b ff33 	bl	8016d18 <iprintf>
  while (seg_list != NULL &&
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d020      	beq.n	800aefa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fb f9ff 	bl	80062c2 <lwip_htonl>
 800aec4:	4604      	mov	r4, r0
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	891b      	ldrh	r3, [r3, #8]
 800aeca:	461d      	mov	r5, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	899b      	ldrh	r3, [r3, #12]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fb f9df 	bl	8006298 <lwip_htons>
 800aeda:	4603      	mov	r3, r0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0303 	and.w	r3, r3, #3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <tcp_free_acked_segments+0xc6>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <tcp_free_acked_segments+0xc8>
 800aeea:	2300      	movs	r3, #0
 800aeec:	442b      	add	r3, r5
 800aeee:	18e2      	adds	r2, r4, r3
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <tcp_free_acked_segments+0xf4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dd9c      	ble.n	800ae34 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aefa:	68bb      	ldr	r3, [r7, #8]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bdb0      	pop	{r4, r5, r7, pc}
 800af04:	08019084 	.word	0x08019084
 800af08:	0801936c 	.word	0x0801936c
 800af0c:	080190d0 	.word	0x080190d0
 800af10:	200000f8 	.word	0x200000f8
 800af14:	08019394 	.word	0x08019394
 800af18:	200000f4 	.word	0x200000f4

0800af1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800af1c:	b5b0      	push	{r4, r5, r7, lr}
 800af1e:	b094      	sub	sp, #80	; 0x50
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <tcp_receive+0x20>
 800af2e:	4ba6      	ldr	r3, [pc, #664]	; (800b1c8 <tcp_receive+0x2ac>)
 800af30:	f240 427b 	movw	r2, #1147	; 0x47b
 800af34:	49a5      	ldr	r1, [pc, #660]	; (800b1cc <tcp_receive+0x2b0>)
 800af36:	48a6      	ldr	r0, [pc, #664]	; (800b1d0 <tcp_receive+0x2b4>)
 800af38:	f00b feee 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7d1b      	ldrb	r3, [r3, #20]
 800af40:	2b03      	cmp	r3, #3
 800af42:	d806      	bhi.n	800af52 <tcp_receive+0x36>
 800af44:	4ba0      	ldr	r3, [pc, #640]	; (800b1c8 <tcp_receive+0x2ac>)
 800af46:	f240 427c 	movw	r2, #1148	; 0x47c
 800af4a:	49a2      	ldr	r1, [pc, #648]	; (800b1d4 <tcp_receive+0x2b8>)
 800af4c:	48a0      	ldr	r0, [pc, #640]	; (800b1d0 <tcp_receive+0x2b4>)
 800af4e:	f00b fee3 	bl	8016d18 <iprintf>

  if (flags & TCP_ACK) {
 800af52:	4ba1      	ldr	r3, [pc, #644]	; (800b1d8 <tcp_receive+0x2bc>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 0310 	and.w	r3, r3, #16
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 8263 	beq.w	800b426 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af66:	461a      	mov	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6c:	4413      	add	r3, r2
 800af6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af74:	4b99      	ldr	r3, [pc, #612]	; (800b1dc <tcp_receive+0x2c0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	db1b      	blt.n	800afb6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af82:	4b96      	ldr	r3, [pc, #600]	; (800b1dc <tcp_receive+0x2c0>)
 800af84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af86:	429a      	cmp	r2, r3
 800af88:	d106      	bne.n	800af98 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af8e:	4b94      	ldr	r3, [pc, #592]	; (800b1e0 <tcp_receive+0x2c4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	db0e      	blt.n	800afb6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af9c:	4b90      	ldr	r3, [pc, #576]	; (800b1e0 <tcp_receive+0x2c4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d125      	bne.n	800aff0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800afa4:	4b8f      	ldr	r3, [pc, #572]	; (800b1e4 <tcp_receive+0x2c8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	89db      	ldrh	r3, [r3, #14]
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d91c      	bls.n	800aff0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800afb6:	4b8b      	ldr	r3, [pc, #556]	; (800b1e4 <tcp_receive+0x2c8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	89db      	ldrh	r3, [r3, #14]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d205      	bcs.n	800afe0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800afe0:	4b7e      	ldr	r3, [pc, #504]	; (800b1dc <tcp_receive+0x2c0>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800afe8:	4b7d      	ldr	r3, [pc, #500]	; (800b1e0 <tcp_receive+0x2c4>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800aff0:	4b7b      	ldr	r3, [pc, #492]	; (800b1e0 <tcp_receive+0x2c4>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	dc58      	bgt.n	800b0b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800affe:	4b7a      	ldr	r3, [pc, #488]	; (800b1e8 <tcp_receive+0x2cc>)
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d14b      	bne.n	800b09e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b010:	4413      	add	r3, r2
 800b012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b014:	429a      	cmp	r2, r3
 800b016:	d142      	bne.n	800b09e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b01e:	2b00      	cmp	r3, #0
 800b020:	db3d      	blt.n	800b09e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b026:	4b6e      	ldr	r3, [pc, #440]	; (800b1e0 <tcp_receive+0x2c4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d137      	bne.n	800b09e <tcp_receive+0x182>
              found_dupack = 1;
 800b02e:	2301      	movs	r3, #1
 800b030:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b038:	2bff      	cmp	r3, #255	; 0xff
 800b03a:	d007      	beq.n	800b04c <tcp_receive+0x130>
                ++pcb->dupacks;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b042:	3301      	adds	r3, #1
 800b044:	b2da      	uxtb	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b052:	2b03      	cmp	r3, #3
 800b054:	d91b      	bls.n	800b08e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b060:	4413      	add	r3, r2
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d30a      	bcc.n	800b084 <tcp_receive+0x168>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b078:	4413      	add	r3, r2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b082:	e004      	b.n	800b08e <tcp_receive+0x172>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b08a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b094:	2b02      	cmp	r3, #2
 800b096:	d902      	bls.n	800b09e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 fb41 	bl	800d720 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f040 8160 	bne.w	800b366 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0ae:	e15a      	b.n	800b366 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b0b0:	4b4b      	ldr	r3, [pc, #300]	; (800b1e0 <tcp_receive+0x2c4>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f2c0 814d 	blt.w	800b35c <tcp_receive+0x440>
 800b0c2:	4b47      	ldr	r3, [pc, #284]	; (800b1e0 <tcp_receive+0x2c4>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f300 8145 	bgt.w	800b35c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8b5b      	ldrh	r3, [r3, #26]
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d010      	beq.n	800b100 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	8b5b      	ldrh	r3, [r3, #26]
 800b0e2:	f023 0304 	bic.w	r3, r3, #4
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b10e:	10db      	asrs	r3, r3, #3
 800b110:	b21b      	sxth	r3, r3
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	4413      	add	r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	b21a      	sxth	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b128:	4b2d      	ldr	r3, [pc, #180]	; (800b1e0 <tcp_receive+0x2c4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b132:	b29b      	uxth	r3, r3
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <tcp_receive+0x2c4>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	f240 8096 	bls.w	800b27e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b15e:	429a      	cmp	r2, r3
 800b160:	d244      	bcs.n	800b1ec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	8b5b      	ldrh	r3, [r3, #26]
 800b166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <tcp_receive+0x256>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <tcp_receive+0x258>
 800b172:	2302      	movs	r3, #2
 800b174:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b178:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b182:	fb12 f303 	smulbb	r3, r2, r3
 800b186:	b29b      	uxth	r3, r3
 800b188:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b18a:	4293      	cmp	r3, r2
 800b18c:	bf28      	it	cs
 800b18e:	4613      	movcs	r3, r2
 800b190:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b19a:	4413      	add	r3, r2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d309      	bcc.n	800b1bc <tcp_receive+0x2a0>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b1ba:	e060      	b.n	800b27e <tcp_receive+0x362>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b1c6:	e05a      	b.n	800b27e <tcp_receive+0x362>
 800b1c8:	08019084 	.word	0x08019084
 800b1cc:	080193b4 	.word	0x080193b4
 800b1d0:	080190d0 	.word	0x080190d0
 800b1d4:	080193d0 	.word	0x080193d0
 800b1d8:	200000fc 	.word	0x200000fc
 800b1dc:	200000f0 	.word	0x200000f0
 800b1e0:	200000f4 	.word	0x200000f4
 800b1e4:	200000e0 	.word	0x200000e0
 800b1e8:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b1f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1f4:	4413      	add	r3, r2
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d309      	bcc.n	800b216 <tcp_receive+0x2fa>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b20a:	4413      	add	r3, r2
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b214:	e004      	b.n	800b220 <tcp_receive+0x304>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b21c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d326      	bcc.n	800b27e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b250:	4413      	add	r3, r2
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d30a      	bcc.n	800b274 <tcp_receive+0x358>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b268:	4413      	add	r3, r2
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b272:	e004      	b.n	800b27e <tcp_receive+0x362>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b27a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b286:	4a98      	ldr	r2, [pc, #608]	; (800b4e8 <tcp_receive+0x5cc>)
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff fdcb 	bl	800ae24 <tcp_free_acked_segments>
 800b28e:	4602      	mov	r2, r0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29c:	4a93      	ldr	r2, [pc, #588]	; (800b4ec <tcp_receive+0x5d0>)
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff fdc0 	bl	800ae24 <tcp_free_acked_segments>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2b8:	861a      	strh	r2, [r3, #48]	; 0x30
 800b2ba:	e002      	b.n	800b2c2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b2de:	4b84      	ldr	r3, [pc, #528]	; (800b4f0 <tcp_receive+0x5d4>)
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	8b5b      	ldrh	r3, [r3, #26]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d035      	beq.n	800b364 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d118      	bne.n	800b332 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	f7fa ffd4 	bl	80062c2 <lwip_htonl>
 800b31a:	4603      	mov	r3, r0
 800b31c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dc20      	bgt.n	800b364 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	8b5b      	ldrh	r3, [r3, #26]
 800b326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b330:	e018      	b.n	800b364 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fa ffbf 	bl	80062c2 <lwip_htonl>
 800b344:	4603      	mov	r3, r0
 800b346:	1ae3      	subs	r3, r4, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dc0b      	bgt.n	800b364 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8b5b      	ldrh	r3, [r3, #26]
 800b350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b35a:	e003      	b.n	800b364 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f002 fbcd 	bl	800dafc <tcp_send_empty_ack>
 800b362:	e000      	b.n	800b366 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b364:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d05b      	beq.n	800b426 <tcp_receive+0x50a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b372:	4b60      	ldr	r3, [pc, #384]	; (800b4f4 <tcp_receive+0x5d8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b00      	cmp	r3, #0
 800b37a:	da54      	bge.n	800b426 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b37c:	4b5e      	ldr	r3, [pc, #376]	; (800b4f8 <tcp_receive+0x5dc>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b386:	b29b      	uxth	r3, r3
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b390:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b39a:	10db      	asrs	r3, r3, #3
 800b39c:	b21b      	sxth	r3, r3
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3b4:	4413      	add	r3, r2
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	b21a      	sxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b3be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da05      	bge.n	800b3d2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b3c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3ca:	425b      	negs	r3, r3
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b3d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3dc:	109b      	asrs	r3, r3, #2
 800b3de:	b21b      	sxth	r3, r3
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	b21a      	sxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b406:	10db      	asrs	r3, r3, #3
 800b408:	b21b      	sxth	r3, r3
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b412:	b29b      	uxth	r3, r3
 800b414:	4413      	add	r3, r2
 800b416:	b29b      	uxth	r3, r3
 800b418:	b21a      	sxth	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b426:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <tcp_receive+0x5e0>)
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 84e1 	beq.w	800bdf2 <tcp_receive+0xed6>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7d1b      	ldrb	r3, [r3, #20]
 800b434:	2b06      	cmp	r3, #6
 800b436:	f200 84dc 	bhi.w	800bdf2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b43e:	4b30      	ldr	r3, [pc, #192]	; (800b500 <tcp_receive+0x5e4>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	f2c0 808e 	blt.w	800b568 <tcp_receive+0x64c>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b450:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <tcp_receive+0x5e0>)
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	4619      	mov	r1, r3
 800b456:	4b2a      	ldr	r3, [pc, #168]	; (800b500 <tcp_receive+0x5e4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	440b      	add	r3, r1
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	3301      	adds	r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	f300 8081 	bgt.w	800b568 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b466:	4b27      	ldr	r3, [pc, #156]	; (800b504 <tcp_receive+0x5e8>)
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b470:	4b23      	ldr	r3, [pc, #140]	; (800b500 <tcp_receive+0x5e4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b478:	4b22      	ldr	r3, [pc, #136]	; (800b504 <tcp_receive+0x5e8>)
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d106      	bne.n	800b48e <tcp_receive+0x572>
 800b480:	4b21      	ldr	r3, [pc, #132]	; (800b508 <tcp_receive+0x5ec>)
 800b482:	f240 5294 	movw	r2, #1428	; 0x594
 800b486:	4921      	ldr	r1, [pc, #132]	; (800b50c <tcp_receive+0x5f0>)
 800b488:	4821      	ldr	r0, [pc, #132]	; (800b510 <tcp_receive+0x5f4>)
 800b48a:	f00b fc45 	bl	8016d18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b494:	4293      	cmp	r3, r2
 800b496:	d906      	bls.n	800b4a6 <tcp_receive+0x58a>
 800b498:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <tcp_receive+0x5ec>)
 800b49a:	f240 5295 	movw	r2, #1429	; 0x595
 800b49e:	491d      	ldr	r1, [pc, #116]	; (800b514 <tcp_receive+0x5f8>)
 800b4a0:	481b      	ldr	r0, [pc, #108]	; (800b510 <tcp_receive+0x5f4>)
 800b4a2:	f00b fc39 	bl	8016d18 <iprintf>
      off = (u16_t)off32;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b4ac:	4b15      	ldr	r3, [pc, #84]	; (800b504 <tcp_receive+0x5e8>)
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	891b      	ldrh	r3, [r3, #8]
 800b4b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d906      	bls.n	800b4c8 <tcp_receive+0x5ac>
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <tcp_receive+0x5ec>)
 800b4bc:	f240 5297 	movw	r2, #1431	; 0x597
 800b4c0:	4915      	ldr	r1, [pc, #84]	; (800b518 <tcp_receive+0x5fc>)
 800b4c2:	4813      	ldr	r0, [pc, #76]	; (800b510 <tcp_receive+0x5f4>)
 800b4c4:	f00b fc28 	bl	8016d18 <iprintf>
      inseg.len -= off;
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <tcp_receive+0x5e8>)
 800b4ca:	891a      	ldrh	r2, [r3, #8]
 800b4cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <tcp_receive+0x5e8>)
 800b4d6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <tcp_receive+0x5e8>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	891a      	ldrh	r2, [r3, #8]
 800b4de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b4e6:	e029      	b.n	800b53c <tcp_receive+0x620>
 800b4e8:	080193ec 	.word	0x080193ec
 800b4ec:	080193f4 	.word	0x080193f4
 800b4f0:	200000f8 	.word	0x200000f8
 800b4f4:	200000f4 	.word	0x200000f4
 800b4f8:	20006970 	.word	0x20006970
 800b4fc:	200000fa 	.word	0x200000fa
 800b500:	200000f0 	.word	0x200000f0
 800b504:	200000d0 	.word	0x200000d0
 800b508:	08019084 	.word	0x08019084
 800b50c:	080193fc 	.word	0x080193fc
 800b510:	080190d0 	.word	0x080190d0
 800b514:	0801940c 	.word	0x0801940c
 800b518:	0801941c 	.word	0x0801941c
        off -= p->len;
 800b51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b51e:	895b      	ldrh	r3, [r3, #10]
 800b520:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b52c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b52e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b532:	2200      	movs	r2, #0
 800b534:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b53e:	895b      	ldrh	r3, [r3, #10]
 800b540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b544:	429a      	cmp	r2, r3
 800b546:	d8e9      	bhi.n	800b51c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b54c:	4619      	mov	r1, r3
 800b54e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b550:	f7fc f8d0 	bl	80076f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	4a91      	ldr	r2, [pc, #580]	; (800b7a0 <tcp_receive+0x884>)
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	4b91      	ldr	r3, [pc, #580]	; (800b7a4 <tcp_receive+0x888>)
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	4a8f      	ldr	r2, [pc, #572]	; (800b7a0 <tcp_receive+0x884>)
 800b562:	6812      	ldr	r2, [r2, #0]
 800b564:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b566:	e00d      	b.n	800b584 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b568:	4b8d      	ldr	r3, [pc, #564]	; (800b7a0 <tcp_receive+0x884>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	da06      	bge.n	800b584 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8b5b      	ldrh	r3, [r3, #26]
 800b57a:	f043 0302 	orr.w	r3, r3, #2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b584:	4b86      	ldr	r3, [pc, #536]	; (800b7a0 <tcp_receive+0x884>)
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f2c0 842a 	blt.w	800bde8 <tcp_receive+0xecc>
 800b594:	4b82      	ldr	r3, [pc, #520]	; (800b7a0 <tcp_receive+0x884>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b5a0:	440b      	add	r3, r1
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f300 841e 	bgt.w	800bde8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b0:	4b7b      	ldr	r3, [pc, #492]	; (800b7a0 <tcp_receive+0x884>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	f040 829a 	bne.w	800baee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b5ba:	4b7a      	ldr	r3, [pc, #488]	; (800b7a4 <tcp_receive+0x888>)
 800b5bc:	891c      	ldrh	r4, [r3, #8]
 800b5be:	4b79      	ldr	r3, [pc, #484]	; (800b7a4 <tcp_receive+0x888>)
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	899b      	ldrh	r3, [r3, #12]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fa fe66 	bl	8006298 <lwip_htons>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <tcp_receive+0x6c0>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e000      	b.n	800b5de <tcp_receive+0x6c2>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4423      	add	r3, r4
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	4b71      	ldr	r3, [pc, #452]	; (800b7a8 <tcp_receive+0x88c>)
 800b5e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b5ea:	4b6f      	ldr	r3, [pc, #444]	; (800b7a8 <tcp_receive+0x88c>)
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d275      	bcs.n	800b6de <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5f2:	4b6c      	ldr	r3, [pc, #432]	; (800b7a4 <tcp_receive+0x888>)
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	899b      	ldrh	r3, [r3, #12]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fa fe4c 	bl	8006298 <lwip_htons>
 800b600:	4603      	mov	r3, r0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01f      	beq.n	800b64c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b60c:	4b65      	ldr	r3, [pc, #404]	; (800b7a4 <tcp_receive+0x888>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	899b      	ldrh	r3, [r3, #12]
 800b612:	b29b      	uxth	r3, r3
 800b614:	b21b      	sxth	r3, r3
 800b616:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b61a:	b21c      	sxth	r4, r3
 800b61c:	4b61      	ldr	r3, [pc, #388]	; (800b7a4 <tcp_receive+0x888>)
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	899b      	ldrh	r3, [r3, #12]
 800b622:	b29b      	uxth	r3, r3
 800b624:	4618      	mov	r0, r3
 800b626:	f7fa fe37 	bl	8006298 <lwip_htons>
 800b62a:	4603      	mov	r3, r0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	b29b      	uxth	r3, r3
 800b630:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b634:	b29b      	uxth	r3, r3
 800b636:	4618      	mov	r0, r3
 800b638:	f7fa fe2e 	bl	8006298 <lwip_htons>
 800b63c:	4603      	mov	r3, r0
 800b63e:	b21b      	sxth	r3, r3
 800b640:	4323      	orrs	r3, r4
 800b642:	b21a      	sxth	r2, r3
 800b644:	4b57      	ldr	r3, [pc, #348]	; (800b7a4 <tcp_receive+0x888>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	b292      	uxth	r2, r2
 800b64a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b650:	4b54      	ldr	r3, [pc, #336]	; (800b7a4 <tcp_receive+0x888>)
 800b652:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b654:	4b53      	ldr	r3, [pc, #332]	; (800b7a4 <tcp_receive+0x888>)
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	899b      	ldrh	r3, [r3, #12]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fa fe1b 	bl	8006298 <lwip_htons>
 800b662:	4603      	mov	r3, r0
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <tcp_receive+0x75e>
            inseg.len -= 1;
 800b66e:	4b4d      	ldr	r3, [pc, #308]	; (800b7a4 <tcp_receive+0x888>)
 800b670:	891b      	ldrh	r3, [r3, #8]
 800b672:	3b01      	subs	r3, #1
 800b674:	b29a      	uxth	r2, r3
 800b676:	4b4b      	ldr	r3, [pc, #300]	; (800b7a4 <tcp_receive+0x888>)
 800b678:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b67a:	4b4a      	ldr	r3, [pc, #296]	; (800b7a4 <tcp_receive+0x888>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	4a49      	ldr	r2, [pc, #292]	; (800b7a4 <tcp_receive+0x888>)
 800b680:	8912      	ldrh	r2, [r2, #8]
 800b682:	4611      	mov	r1, r2
 800b684:	4618      	mov	r0, r3
 800b686:	f7fb ff35 	bl	80074f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b68a:	4b46      	ldr	r3, [pc, #280]	; (800b7a4 <tcp_receive+0x888>)
 800b68c:	891c      	ldrh	r4, [r3, #8]
 800b68e:	4b45      	ldr	r3, [pc, #276]	; (800b7a4 <tcp_receive+0x888>)
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	899b      	ldrh	r3, [r3, #12]
 800b694:	b29b      	uxth	r3, r3
 800b696:	4618      	mov	r0, r3
 800b698:	f7fa fdfe 	bl	8006298 <lwip_htons>
 800b69c:	4603      	mov	r3, r0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	f003 0303 	and.w	r3, r3, #3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <tcp_receive+0x790>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <tcp_receive+0x792>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4423      	add	r3, r4
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	4b3d      	ldr	r3, [pc, #244]	; (800b7a8 <tcp_receive+0x88c>)
 800b6b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b6b6:	4b3c      	ldr	r3, [pc, #240]	; (800b7a8 <tcp_receive+0x88c>)
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4b38      	ldr	r3, [pc, #224]	; (800b7a0 <tcp_receive+0x884>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b6ca:	440b      	add	r3, r1
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d006      	beq.n	800b6de <tcp_receive+0x7c2>
 800b6d0:	4b36      	ldr	r3, [pc, #216]	; (800b7ac <tcp_receive+0x890>)
 800b6d2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b6d6:	4936      	ldr	r1, [pc, #216]	; (800b7b0 <tcp_receive+0x894>)
 800b6d8:	4836      	ldr	r0, [pc, #216]	; (800b7b4 <tcp_receive+0x898>)
 800b6da:	f00b fb1d 	bl	8016d18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80e7 	beq.w	800b8b6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b6e8:	4b2e      	ldr	r3, [pc, #184]	; (800b7a4 <tcp_receive+0x888>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	899b      	ldrh	r3, [r3, #12]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fa fdd1 	bl	8006298 <lwip_htons>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d010      	beq.n	800b724 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b702:	e00a      	b.n	800b71a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b708:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7fd fcb0 	bl	800907a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1f0      	bne.n	800b704 <tcp_receive+0x7e8>
 800b722:	e0c8      	b.n	800b8b6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b72a:	e052      	b.n	800b7d2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	899b      	ldrh	r3, [r3, #12]
 800b732:	b29b      	uxth	r3, r3
 800b734:	4618      	mov	r0, r3
 800b736:	f7fa fdaf 	bl	8006298 <lwip_htons>
 800b73a:	4603      	mov	r3, r0
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	d03d      	beq.n	800b7c2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b746:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <tcp_receive+0x888>)
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	899b      	ldrh	r3, [r3, #12]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fa fda2 	bl	8006298 <lwip_htons>
 800b754:	4603      	mov	r3, r0
 800b756:	b2db      	uxtb	r3, r3
 800b758:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d130      	bne.n	800b7c2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b760:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <tcp_receive+0x888>)
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	899b      	ldrh	r3, [r3, #12]
 800b766:	b29c      	uxth	r4, r3
 800b768:	2001      	movs	r0, #1
 800b76a:	f7fa fd95 	bl	8006298 <lwip_htons>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <tcp_receive+0x888>)
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	4322      	orrs	r2, r4
 800b778:	b292      	uxth	r2, r2
 800b77a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b77c:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <tcp_receive+0x888>)
 800b77e:	891c      	ldrh	r4, [r3, #8]
 800b780:	4b08      	ldr	r3, [pc, #32]	; (800b7a4 <tcp_receive+0x888>)
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	899b      	ldrh	r3, [r3, #12]
 800b786:	b29b      	uxth	r3, r3
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fa fd85 	bl	8006298 <lwip_htons>
 800b78e:	4603      	mov	r3, r0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0303 	and.w	r3, r3, #3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <tcp_receive+0x89c>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e00d      	b.n	800b7ba <tcp_receive+0x89e>
 800b79e:	bf00      	nop
 800b7a0:	200000f0 	.word	0x200000f0
 800b7a4:	200000d0 	.word	0x200000d0
 800b7a8:	200000fa 	.word	0x200000fa
 800b7ac:	08019084 	.word	0x08019084
 800b7b0:	0801942c 	.word	0x0801942c
 800b7b4:	080190d0 	.word	0x080190d0
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4423      	add	r3, r4
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	4b98      	ldr	r3, [pc, #608]	; (800ba20 <tcp_receive+0xb04>)
 800b7c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b7cc:	6938      	ldr	r0, [r7, #16]
 800b7ce:	f7fd fc54 	bl	800907a <tcp_seg_free>
            while (next &&
 800b7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00e      	beq.n	800b7f6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b7d8:	4b91      	ldr	r3, [pc, #580]	; (800ba20 <tcp_receive+0xb04>)
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b91      	ldr	r3, [pc, #580]	; (800ba24 <tcp_receive+0xb08>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7ec:	8909      	ldrh	r1, [r1, #8]
 800b7ee:	440b      	add	r3, r1
 800b7f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da9a      	bge.n	800b72c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d059      	beq.n	800b8b0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b7fc:	4b88      	ldr	r3, [pc, #544]	; (800ba20 <tcp_receive+0xb04>)
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	4b88      	ldr	r3, [pc, #544]	; (800ba24 <tcp_receive+0xb08>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	441a      	add	r2, r3
 800b808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b810:	2b00      	cmp	r3, #0
 800b812:	dd4d      	ble.n	800b8b0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	4b81      	ldr	r3, [pc, #516]	; (800ba24 <tcp_receive+0xb08>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	b29b      	uxth	r3, r3
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	b29a      	uxth	r2, r3
 800b826:	4b80      	ldr	r3, [pc, #512]	; (800ba28 <tcp_receive+0xb0c>)
 800b828:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b82a:	4b7f      	ldr	r3, [pc, #508]	; (800ba28 <tcp_receive+0xb0c>)
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	899b      	ldrh	r3, [r3, #12]
 800b830:	b29b      	uxth	r3, r3
 800b832:	4618      	mov	r0, r3
 800b834:	f7fa fd30 	bl	8006298 <lwip_htons>
 800b838:	4603      	mov	r3, r0
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d005      	beq.n	800b850 <tcp_receive+0x934>
                inseg.len -= 1;
 800b844:	4b78      	ldr	r3, [pc, #480]	; (800ba28 <tcp_receive+0xb0c>)
 800b846:	891b      	ldrh	r3, [r3, #8]
 800b848:	3b01      	subs	r3, #1
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	4b76      	ldr	r3, [pc, #472]	; (800ba28 <tcp_receive+0xb0c>)
 800b84e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b850:	4b75      	ldr	r3, [pc, #468]	; (800ba28 <tcp_receive+0xb0c>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4a74      	ldr	r2, [pc, #464]	; (800ba28 <tcp_receive+0xb0c>)
 800b856:	8912      	ldrh	r2, [r2, #8]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fb fe4a 	bl	80074f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b860:	4b71      	ldr	r3, [pc, #452]	; (800ba28 <tcp_receive+0xb0c>)
 800b862:	891c      	ldrh	r4, [r3, #8]
 800b864:	4b70      	ldr	r3, [pc, #448]	; (800ba28 <tcp_receive+0xb0c>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	899b      	ldrh	r3, [r3, #12]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fa fd13 	bl	8006298 <lwip_htons>
 800b872:	4603      	mov	r3, r0
 800b874:	b2db      	uxtb	r3, r3
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <tcp_receive+0x966>
 800b87e:	2301      	movs	r3, #1
 800b880:	e000      	b.n	800b884 <tcp_receive+0x968>
 800b882:	2300      	movs	r3, #0
 800b884:	4423      	add	r3, r4
 800b886:	b29a      	uxth	r2, r3
 800b888:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <tcp_receive+0xb04>)
 800b88a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b88c:	4b64      	ldr	r3, [pc, #400]	; (800ba20 <tcp_receive+0xb04>)
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	461a      	mov	r2, r3
 800b892:	4b64      	ldr	r3, [pc, #400]	; (800ba24 <tcp_receive+0xb08>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	441a      	add	r2, r3
 800b898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d006      	beq.n	800b8b0 <tcp_receive+0x994>
 800b8a2:	4b62      	ldr	r3, [pc, #392]	; (800ba2c <tcp_receive+0xb10>)
 800b8a4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b8a8:	4961      	ldr	r1, [pc, #388]	; (800ba30 <tcp_receive+0xb14>)
 800b8aa:	4862      	ldr	r0, [pc, #392]	; (800ba34 <tcp_receive+0xb18>)
 800b8ac:	f00b fa34 	bl	8016d18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8b4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b8b6:	4b5a      	ldr	r3, [pc, #360]	; (800ba20 <tcp_receive+0xb04>)
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4b59      	ldr	r3, [pc, #356]	; (800ba24 <tcp_receive+0xb08>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8ca:	4b55      	ldr	r3, [pc, #340]	; (800ba20 <tcp_receive+0xb04>)
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d206      	bcs.n	800b8e0 <tcp_receive+0x9c4>
 800b8d2:	4b56      	ldr	r3, [pc, #344]	; (800ba2c <tcp_receive+0xb10>)
 800b8d4:	f240 6207 	movw	r2, #1543	; 0x607
 800b8d8:	4957      	ldr	r1, [pc, #348]	; (800ba38 <tcp_receive+0xb1c>)
 800b8da:	4856      	ldr	r0, [pc, #344]	; (800ba34 <tcp_receive+0xb18>)
 800b8dc:	f00b fa1c 	bl	8016d18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8e4:	4b4e      	ldr	r3, [pc, #312]	; (800ba20 <tcp_receive+0xb04>)
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7fc fe9d 	bl	8008630 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ba28 <tcp_receive+0xb0c>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	891b      	ldrh	r3, [r3, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b900:	4b49      	ldr	r3, [pc, #292]	; (800ba28 <tcp_receive+0xb0c>)
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4a4d      	ldr	r2, [pc, #308]	; (800ba3c <tcp_receive+0xb20>)
 800b906:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b908:	4b47      	ldr	r3, [pc, #284]	; (800ba28 <tcp_receive+0xb0c>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b90e:	4b46      	ldr	r3, [pc, #280]	; (800ba28 <tcp_receive+0xb0c>)
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	899b      	ldrh	r3, [r3, #12]
 800b914:	b29b      	uxth	r3, r3
 800b916:	4618      	mov	r0, r3
 800b918:	f7fa fcbe 	bl	8006298 <lwip_htons>
 800b91c:	4603      	mov	r3, r0
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 80b8 	beq.w	800ba9a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b92a:	4b45      	ldr	r3, [pc, #276]	; (800ba40 <tcp_receive+0xb24>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f043 0320 	orr.w	r3, r3, #32
 800b932:	b2da      	uxtb	r2, r3
 800b934:	4b42      	ldr	r3, [pc, #264]	; (800ba40 <tcp_receive+0xb24>)
 800b936:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b938:	e0af      	b.n	800ba9a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	4a36      	ldr	r2, [pc, #216]	; (800ba24 <tcp_receive+0xb08>)
 800b94a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	891b      	ldrh	r3, [r3, #8]
 800b950:	461c      	mov	r4, r3
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	899b      	ldrh	r3, [r3, #12]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fa fc9c 	bl	8006298 <lwip_htons>
 800b960:	4603      	mov	r3, r0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <tcp_receive+0xa54>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <tcp_receive+0xa56>
 800b970:	2300      	movs	r3, #0
 800b972:	191a      	adds	r2, r3, r4
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	441a      	add	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b982:	461c      	mov	r4, r3
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	891b      	ldrh	r3, [r3, #8]
 800b988:	461d      	mov	r5, r3
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	899b      	ldrh	r3, [r3, #12]
 800b990:	b29b      	uxth	r3, r3
 800b992:	4618      	mov	r0, r3
 800b994:	f7fa fc80 	bl	8006298 <lwip_htons>
 800b998:	4603      	mov	r3, r0
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	f003 0303 	and.w	r3, r3, #3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <tcp_receive+0xa8c>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e000      	b.n	800b9aa <tcp_receive+0xa8e>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	442b      	add	r3, r5
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	d206      	bcs.n	800b9be <tcp_receive+0xaa2>
 800b9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <tcp_receive+0xb10>)
 800b9b2:	f240 622b 	movw	r2, #1579	; 0x62b
 800b9b6:	4923      	ldr	r1, [pc, #140]	; (800ba44 <tcp_receive+0xb28>)
 800b9b8:	481e      	ldr	r0, [pc, #120]	; (800ba34 <tcp_receive+0xb18>)
 800b9ba:	f00b f9ad 	bl	8016d18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	891b      	ldrh	r3, [r3, #8]
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	899b      	ldrh	r3, [r3, #12]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fa fc63 	bl	8006298 <lwip_htons>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <tcp_receive+0xac6>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <tcp_receive+0xac8>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	1919      	adds	r1, r3, r4
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9ea:	b28b      	uxth	r3, r1
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7fc fe1b 	bl	8008630 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d028      	beq.n	800ba56 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ba04:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <tcp_receive+0xb20>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01d      	beq.n	800ba48 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	; (800ba3c <tcp_receive+0xb20>)
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7fb ffb4 	bl	8007984 <pbuf_cat>
 800ba1c:	e018      	b.n	800ba50 <tcp_receive+0xb34>
 800ba1e:	bf00      	nop
 800ba20:	200000fa 	.word	0x200000fa
 800ba24:	200000f0 	.word	0x200000f0
 800ba28:	200000d0 	.word	0x200000d0
 800ba2c:	08019084 	.word	0x08019084
 800ba30:	08019464 	.word	0x08019464
 800ba34:	080190d0 	.word	0x080190d0
 800ba38:	080194a0 	.word	0x080194a0
 800ba3c:	20000100 	.word	0x20000100
 800ba40:	200000fd 	.word	0x200000fd
 800ba44:	080194c0 	.word	0x080194c0
            } else {
              recv_data = cseg->p;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	4a70      	ldr	r2, [pc, #448]	; (800bc10 <tcp_receive+0xcf4>)
 800ba4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2200      	movs	r2, #0
 800ba54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	899b      	ldrh	r3, [r3, #12]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fa fc1a 	bl	8006298 <lwip_htons>
 800ba64:	4603      	mov	r3, r0
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00d      	beq.n	800ba8c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ba70:	4b68      	ldr	r3, [pc, #416]	; (800bc14 <tcp_receive+0xcf8>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	4b66      	ldr	r3, [pc, #408]	; (800bc14 <tcp_receive+0xcf8>)
 800ba7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7d1b      	ldrb	r3, [r3, #20]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d102      	bne.n	800ba8c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2207      	movs	r2, #7
 800ba8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ba94:	68b8      	ldr	r0, [r7, #8]
 800ba96:	f7fd faf0 	bl	800907a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d008      	beq.n	800bab4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800baae:	429a      	cmp	r2, r3
 800bab0:	f43f af43 	beq.w	800b93a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	8b5b      	ldrh	r3, [r3, #26]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00e      	beq.n	800bade <tcp_receive+0xbc2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8b5b      	ldrh	r3, [r3, #26]
 800bac4:	f023 0301 	bic.w	r3, r3, #1
 800bac8:	b29a      	uxth	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	835a      	strh	r2, [r3, #26]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8b5b      	ldrh	r3, [r3, #26]
 800bad2:	f043 0302 	orr.w	r3, r3, #2
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800badc:	e188      	b.n	800bdf0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	8b5b      	ldrh	r3, [r3, #26]
 800bae2:	f043 0301 	orr.w	r3, r3, #1
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800baec:	e180      	b.n	800bdf0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800baf6:	4848      	ldr	r0, [pc, #288]	; (800bc18 <tcp_receive+0xcfc>)
 800baf8:	f7fd faf6 	bl	80090e8 <tcp_seg_copy>
 800bafc:	4602      	mov	r2, r0
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	675a      	str	r2, [r3, #116]	; 0x74
 800bb02:	e16d      	b.n	800bde0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb0e:	e157      	b.n	800bdc0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4b41      	ldr	r3, [pc, #260]	; (800bc1c <tcp_receive+0xd00>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d11d      	bne.n	800bb5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bb1e:	4b3e      	ldr	r3, [pc, #248]	; (800bc18 <tcp_receive+0xcfc>)
 800bb20:	891a      	ldrh	r2, [r3, #8]
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	891b      	ldrh	r3, [r3, #8]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	f240 814f 	bls.w	800bdca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb2c:	483a      	ldr	r0, [pc, #232]	; (800bc18 <tcp_receive+0xcfc>)
 800bb2e:	f7fd fadb 	bl	80090e8 <tcp_seg_copy>
 800bb32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8149 	beq.w	800bdce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	e002      	b.n	800bb50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bb50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff f8de 	bl	800ad14 <tcp_oos_insert_segment>
                }
                break;
 800bb58:	e139      	b.n	800bdce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d117      	bne.n	800bb90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bb60:	4b2e      	ldr	r3, [pc, #184]	; (800bc1c <tcp_receive+0xd00>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da57      	bge.n	800bc20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb70:	4829      	ldr	r0, [pc, #164]	; (800bc18 <tcp_receive+0xcfc>)
 800bb72:	f7fd fab9 	bl	80090e8 <tcp_seg_copy>
 800bb76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8129 	beq.w	800bdd2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bb86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb88:	69b8      	ldr	r0, [r7, #24]
 800bb8a:	f7ff f8c3 	bl	800ad14 <tcp_oos_insert_segment>
                  }
                  break;
 800bb8e:	e120      	b.n	800bdd2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bb90:	4b22      	ldr	r3, [pc, #136]	; (800bc1c <tcp_receive+0xd00>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	db3e      	blt.n	800bc20 <tcp_receive+0xd04>
 800bba2:	4b1e      	ldr	r3, [pc, #120]	; (800bc1c <tcp_receive+0xd00>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	3301      	adds	r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dc35      	bgt.n	800bc20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bbb4:	4818      	ldr	r0, [pc, #96]	; (800bc18 <tcp_receive+0xcfc>)
 800bbb6:	f7fd fa97 	bl	80090e8 <tcp_seg_copy>
 800bbba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 8109 	beq.w	800bdd6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbcc:	8912      	ldrh	r2, [r2, #8]
 800bbce:	441a      	add	r2, r3
 800bbd0:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <tcp_receive+0xd00>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dd12      	ble.n	800bc00 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bbda:	4b10      	ldr	r3, [pc, #64]	; (800bc1c <tcp_receive+0xd00>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf6:	891b      	ldrh	r3, [r3, #8]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f7fb fc7a 	bl	80074f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bc06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc08:	69f8      	ldr	r0, [r7, #28]
 800bc0a:	f7ff f883 	bl	800ad14 <tcp_oos_insert_segment>
                  }
                  break;
 800bc0e:	e0e2      	b.n	800bdd6 <tcp_receive+0xeba>
 800bc10:	20000100 	.word	0x20000100
 800bc14:	200000fd 	.word	0x200000fd
 800bc18:	200000d0 	.word	0x200000d0
 800bc1c:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 80c6 	bne.w	800bdba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bc2e:	4b80      	ldr	r3, [pc, #512]	; (800be30 <tcp_receive+0xf14>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f340 80bd 	ble.w	800bdba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	899b      	ldrh	r3, [r3, #12]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fa fb25 	bl	8006298 <lwip_htons>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f040 80bf 	bne.w	800bdda <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bc5c:	4875      	ldr	r0, [pc, #468]	; (800be34 <tcp_receive+0xf18>)
 800bc5e:	f7fd fa43 	bl	80090e8 <tcp_seg_copy>
 800bc62:	4602      	mov	r2, r0
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 80b6 	beq.w	800bdde <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc7a:	8912      	ldrh	r2, [r2, #8]
 800bc7c:	441a      	add	r2, r3
 800bc7e:	4b6c      	ldr	r3, [pc, #432]	; (800be30 <tcp_receive+0xf14>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd12      	ble.n	800bcae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bc88:	4b69      	ldr	r3, [pc, #420]	; (800be30 <tcp_receive+0xf14>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	891b      	ldrh	r3, [r3, #8]
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fb fc23 	bl	80074f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bcae:	4b62      	ldr	r3, [pc, #392]	; (800be38 <tcp_receive+0xf1c>)
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4b5e      	ldr	r3, [pc, #376]	; (800be30 <tcp_receive+0xf14>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	441a      	add	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bcc2:	440b      	add	r3, r1
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f340 8089 	ble.w	800bdde <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	899b      	ldrh	r3, [r3, #12]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fa fade 	bl	8006298 <lwip_htons>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d022      	beq.n	800bd2e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcf8:	b21c      	sxth	r4, r3
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fa fac7 	bl	8006298 <lwip_htons>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fa fabe 	bl	8006298 <lwip_htons>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	4323      	orrs	r3, r4
 800bd22:	b21a      	sxth	r2, r3
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	b292      	uxth	r2, r2
 800bd2c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd38:	4413      	add	r3, r2
 800bd3a:	b299      	uxth	r1, r3
 800bd3c:	4b3c      	ldr	r3, [pc, #240]	; (800be30 <tcp_receive+0xf14>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	1a8a      	subs	r2, r1, r2
 800bd48:	b292      	uxth	r2, r2
 800bd4a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	891b      	ldrh	r3, [r3, #8]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	f7fb fbca 	bl	80074f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	891c      	ldrh	r4, [r3, #8]
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	899b      	ldrh	r3, [r3, #12]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fa fa91 	bl	8006298 <lwip_htons>
 800bd76:	4603      	mov	r3, r0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	f003 0303 	and.w	r3, r3, #3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <tcp_receive+0xe6a>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <tcp_receive+0xe6c>
 800bd86:	2300      	movs	r3, #0
 800bd88:	4423      	add	r3, r4
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	4b2a      	ldr	r3, [pc, #168]	; (800be38 <tcp_receive+0xf1c>)
 800bd8e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd90:	4b29      	ldr	r3, [pc, #164]	; (800be38 <tcp_receive+0xf1c>)
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	461a      	mov	r2, r3
 800bd96:	4b26      	ldr	r3, [pc, #152]	; (800be30 <tcp_receive+0xf14>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	441a      	add	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	6879      	ldr	r1, [r7, #4]
 800bda2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bda4:	440b      	add	r3, r1
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d019      	beq.n	800bdde <tcp_receive+0xec2>
 800bdaa:	4b24      	ldr	r3, [pc, #144]	; (800be3c <tcp_receive+0xf20>)
 800bdac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bdb0:	4923      	ldr	r1, [pc, #140]	; (800be40 <tcp_receive+0xf24>)
 800bdb2:	4824      	ldr	r0, [pc, #144]	; (800be44 <tcp_receive+0xf28>)
 800bdb4:	f00a ffb0 	bl	8016d18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bdb8:	e011      	b.n	800bdde <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f47f aea4 	bne.w	800bb10 <tcp_receive+0xbf4>
 800bdc8:	e00a      	b.n	800bde0 <tcp_receive+0xec4>
                break;
 800bdca:	bf00      	nop
 800bdcc:	e008      	b.n	800bde0 <tcp_receive+0xec4>
                break;
 800bdce:	bf00      	nop
 800bdd0:	e006      	b.n	800bde0 <tcp_receive+0xec4>
                  break;
 800bdd2:	bf00      	nop
 800bdd4:	e004      	b.n	800bde0 <tcp_receive+0xec4>
                  break;
 800bdd6:	bf00      	nop
 800bdd8:	e002      	b.n	800bde0 <tcp_receive+0xec4>
                  break;
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <tcp_receive+0xec4>
                break;
 800bdde:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 fe8b 	bl	800dafc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bde6:	e003      	b.n	800bdf0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 fe87 	bl	800dafc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bdee:	e01a      	b.n	800be26 <tcp_receive+0xf0a>
 800bdf0:	e019      	b.n	800be26 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <tcp_receive+0xf14>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	db0a      	blt.n	800be16 <tcp_receive+0xefa>
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <tcp_receive+0xf14>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	6879      	ldr	r1, [r7, #4]
 800be0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be0c:	440b      	add	r3, r1
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	3301      	adds	r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	dd07      	ble.n	800be26 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8b5b      	ldrh	r3, [r3, #26]
 800be1a:	f043 0302 	orr.w	r3, r3, #2
 800be1e:	b29a      	uxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800be24:	e7ff      	b.n	800be26 <tcp_receive+0xf0a>
 800be26:	bf00      	nop
 800be28:	3750      	adds	r7, #80	; 0x50
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bdb0      	pop	{r4, r5, r7, pc}
 800be2e:	bf00      	nop
 800be30:	200000f0 	.word	0x200000f0
 800be34:	200000d0 	.word	0x200000d0
 800be38:	200000fa 	.word	0x200000fa
 800be3c:	08019084 	.word	0x08019084
 800be40:	0801942c 	.word	0x0801942c
 800be44:	080190d0 	.word	0x080190d0

0800be48 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800be4e:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <tcp_get_next_optbyte+0x5c>)
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	b291      	uxth	r1, r2
 800be56:	4a13      	ldr	r2, [pc, #76]	; (800bea4 <tcp_get_next_optbyte+0x5c>)
 800be58:	8011      	strh	r1, [r2, #0]
 800be5a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800be5c:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <tcp_get_next_optbyte+0x60>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d004      	beq.n	800be6e <tcp_get_next_optbyte+0x26>
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <tcp_get_next_optbyte+0x64>)
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	88fa      	ldrh	r2, [r7, #6]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d208      	bcs.n	800be80 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800be6e:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <tcp_get_next_optbyte+0x68>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3314      	adds	r3, #20
 800be74:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800be76:	88fb      	ldrh	r3, [r7, #6]
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	4413      	add	r3, r2
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	e00b      	b.n	800be98 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800be80:	88fb      	ldrh	r3, [r7, #6]
 800be82:	b2da      	uxtb	r2, r3
 800be84:	4b09      	ldr	r3, [pc, #36]	; (800beac <tcp_get_next_optbyte+0x64>)
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800be8e:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <tcp_get_next_optbyte+0x60>)
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	797b      	ldrb	r3, [r7, #5]
 800be94:	4413      	add	r3, r2
 800be96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	200000ec 	.word	0x200000ec
 800bea8:	200000e8 	.word	0x200000e8
 800beac:	200000e6 	.word	0x200000e6
 800beb0:	200000e0 	.word	0x200000e0

0800beb4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <tcp_parseopt+0x1c>
 800bec2:	4b32      	ldr	r3, [pc, #200]	; (800bf8c <tcp_parseopt+0xd8>)
 800bec4:	f240 727d 	movw	r2, #1917	; 0x77d
 800bec8:	4931      	ldr	r1, [pc, #196]	; (800bf90 <tcp_parseopt+0xdc>)
 800beca:	4832      	ldr	r0, [pc, #200]	; (800bf94 <tcp_parseopt+0xe0>)
 800becc:	f00a ff24 	bl	8016d18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bed0:	4b31      	ldr	r3, [pc, #196]	; (800bf98 <tcp_parseopt+0xe4>)
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d055      	beq.n	800bf84 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bed8:	4b30      	ldr	r3, [pc, #192]	; (800bf9c <tcp_parseopt+0xe8>)
 800beda:	2200      	movs	r2, #0
 800bedc:	801a      	strh	r2, [r3, #0]
 800bede:	e045      	b.n	800bf6c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bee0:	f7ff ffb2 	bl	800be48 <tcp_get_next_optbyte>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d006      	beq.n	800befc <tcp_parseopt+0x48>
 800beee:	2b02      	cmp	r3, #2
 800bef0:	dc2b      	bgt.n	800bf4a <tcp_parseopt+0x96>
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d041      	beq.n	800bf7a <tcp_parseopt+0xc6>
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d127      	bne.n	800bf4a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800befa:	e037      	b.n	800bf6c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800befc:	f7ff ffa4 	bl	800be48 <tcp_get_next_optbyte>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b04      	cmp	r3, #4
 800bf04:	d13b      	bne.n	800bf7e <tcp_parseopt+0xca>
 800bf06:	4b25      	ldr	r3, [pc, #148]	; (800bf9c <tcp_parseopt+0xe8>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	4a22      	ldr	r2, [pc, #136]	; (800bf98 <tcp_parseopt+0xe4>)
 800bf0e:	8812      	ldrh	r2, [r2, #0]
 800bf10:	4293      	cmp	r3, r2
 800bf12:	da34      	bge.n	800bf7e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bf14:	f7ff ff98 	bl	800be48 <tcp_get_next_optbyte>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bf20:	f7ff ff92 	bl	800be48 <tcp_get_next_optbyte>
 800bf24:	4603      	mov	r3, r0
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	89bb      	ldrh	r3, [r7, #12]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bf2e:	89bb      	ldrh	r3, [r7, #12]
 800bf30:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bf34:	d804      	bhi.n	800bf40 <tcp_parseopt+0x8c>
 800bf36:	89bb      	ldrh	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <tcp_parseopt+0x8c>
 800bf3c:	89ba      	ldrh	r2, [r7, #12]
 800bf3e:	e001      	b.n	800bf44 <tcp_parseopt+0x90>
 800bf40:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bf48:	e010      	b.n	800bf6c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bf4a:	f7ff ff7d 	bl	800be48 <tcp_get_next_optbyte>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bf52:	7afb      	ldrb	r3, [r7, #11]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d914      	bls.n	800bf82 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <tcp_parseopt+0xe8>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	4413      	add	r3, r2
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	3b02      	subs	r3, #2
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	4b0c      	ldr	r3, [pc, #48]	; (800bf9c <tcp_parseopt+0xe8>)
 800bf6a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bf6c:	4b0b      	ldr	r3, [pc, #44]	; (800bf9c <tcp_parseopt+0xe8>)
 800bf6e:	881a      	ldrh	r2, [r3, #0]
 800bf70:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <tcp_parseopt+0xe4>)
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d3b3      	bcc.n	800bee0 <tcp_parseopt+0x2c>
 800bf78:	e004      	b.n	800bf84 <tcp_parseopt+0xd0>
          return;
 800bf7a:	bf00      	nop
 800bf7c:	e002      	b.n	800bf84 <tcp_parseopt+0xd0>
            return;
 800bf7e:	bf00      	nop
 800bf80:	e000      	b.n	800bf84 <tcp_parseopt+0xd0>
            return;
 800bf82:	bf00      	nop
      }
    }
  }
}
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	08019084 	.word	0x08019084
 800bf90:	080194e8 	.word	0x080194e8
 800bf94:	080190d0 	.word	0x080190d0
 800bf98:	200000e4 	.word	0x200000e4
 800bf9c:	200000ec 	.word	0x200000ec

0800bfa0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <tcp_trigger_input_pcb_close+0x1c>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f043 0310 	orr.w	r3, r3, #16
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	4b03      	ldr	r3, [pc, #12]	; (800bfbc <tcp_trigger_input_pcb_close+0x1c>)
 800bfb0:	701a      	strb	r2, [r3, #0]
}
 800bfb2:	bf00      	nop
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	200000fd 	.word	0x200000fd

0800bfc0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00a      	beq.n	800bfe8 <tcp_route+0x28>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	7a1b      	ldrb	r3, [r3, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d006      	beq.n	800bfe8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	7a1b      	ldrb	r3, [r3, #8]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fb f8ae 	bl	8007140 <netif_get_by_index>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	e003      	b.n	800bff0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f003 fad5 	bl	800f598 <ip4_route>
 800bfee:	4603      	mov	r3, r0
  }
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bff8:	b590      	push	{r4, r7, lr}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	4613      	mov	r3, r2
 800c006:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d105      	bne.n	800c01a <tcp_create_segment+0x22>
 800c00e:	4b44      	ldr	r3, [pc, #272]	; (800c120 <tcp_create_segment+0x128>)
 800c010:	22a3      	movs	r2, #163	; 0xa3
 800c012:	4944      	ldr	r1, [pc, #272]	; (800c124 <tcp_create_segment+0x12c>)
 800c014:	4844      	ldr	r0, [pc, #272]	; (800c128 <tcp_create_segment+0x130>)
 800c016:	f00a fe7f 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d105      	bne.n	800c02c <tcp_create_segment+0x34>
 800c020:	4b3f      	ldr	r3, [pc, #252]	; (800c120 <tcp_create_segment+0x128>)
 800c022:	22a4      	movs	r2, #164	; 0xa4
 800c024:	4941      	ldr	r1, [pc, #260]	; (800c12c <tcp_create_segment+0x134>)
 800c026:	4840      	ldr	r0, [pc, #256]	; (800c128 <tcp_create_segment+0x130>)
 800c028:	f00a fe76 	bl	8016d18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c02c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c03a:	2003      	movs	r0, #3
 800c03c:	f7fa fd82 	bl	8006b44 <memp_malloc>
 800c040:	6138      	str	r0, [r7, #16]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d104      	bne.n	800c052 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c048:	68b8      	ldr	r0, [r7, #8]
 800c04a:	f7fb fbd9 	bl	8007800 <pbuf_free>
    return NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	e061      	b.n	800c116 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c058:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	891a      	ldrh	r2, [r3, #8]
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	429a      	cmp	r2, r3
 800c070:	d205      	bcs.n	800c07e <tcp_create_segment+0x86>
 800c072:	4b2b      	ldr	r3, [pc, #172]	; (800c120 <tcp_create_segment+0x128>)
 800c074:	22b0      	movs	r2, #176	; 0xb0
 800c076:	492e      	ldr	r1, [pc, #184]	; (800c130 <tcp_create_segment+0x138>)
 800c078:	482b      	ldr	r0, [pc, #172]	; (800c128 <tcp_create_segment+0x130>)
 800c07a:	f00a fe4d 	bl	8016d18 <iprintf>
  seg->len = p->tot_len - optlen;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	891a      	ldrh	r2, [r3, #8]
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	b29b      	uxth	r3, r3
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	b29a      	uxth	r2, r3
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c08e:	2114      	movs	r1, #20
 800c090:	68b8      	ldr	r0, [r7, #8]
 800c092:	f7fb fb1f 	bl	80076d4 <pbuf_add_header>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c09c:	6938      	ldr	r0, [r7, #16]
 800c09e:	f7fc ffec 	bl	800907a <tcp_seg_free>
    return NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e037      	b.n	800c116 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8ada      	ldrh	r2, [r3, #22]
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	68dc      	ldr	r4, [r3, #12]
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7fa f8ed 	bl	8006298 <lwip_htons>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8b1a      	ldrh	r2, [r3, #24]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	68dc      	ldr	r4, [r3, #12]
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	f7fa f8e4 	bl	8006298 <lwip_htons>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	68dc      	ldr	r4, [r3, #12]
 800c0d8:	6838      	ldr	r0, [r7, #0]
 800c0da:	f7fa f8f2 	bl	80062c2 <lwip_htonl>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	089b      	lsrs	r3, r3, #2
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	3305      	adds	r3, #5
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	031b      	lsls	r3, r3, #12
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	68dc      	ldr	r4, [r3, #12]
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fa f8ca 	bl	8006298 <lwip_htons>
 800c104:	4603      	mov	r3, r0
 800c106:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	749a      	strb	r2, [r3, #18]
 800c110:	2200      	movs	r2, #0
 800c112:	74da      	strb	r2, [r3, #19]
  return seg;
 800c114:	693b      	ldr	r3, [r7, #16]
}
 800c116:	4618      	mov	r0, r3
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd90      	pop	{r4, r7, pc}
 800c11e:	bf00      	nop
 800c120:	08019504 	.word	0x08019504
 800c124:	08019538 	.word	0x08019538
 800c128:	08019558 	.word	0x08019558
 800c12c:	08019580 	.word	0x08019580
 800c130:	080195a4 	.word	0x080195a4

0800c134 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	607b      	str	r3, [r7, #4]
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
 800c140:	460b      	mov	r3, r1
 800c142:	81bb      	strh	r3, [r7, #12]
 800c144:	4613      	mov	r3, r2
 800c146:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c148:	89bb      	ldrh	r3, [r7, #12]
 800c14a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d105      	bne.n	800c15e <tcp_pbuf_prealloc+0x2a>
 800c152:	4b30      	ldr	r3, [pc, #192]	; (800c214 <tcp_pbuf_prealloc+0xe0>)
 800c154:	22e8      	movs	r2, #232	; 0xe8
 800c156:	4930      	ldr	r1, [pc, #192]	; (800c218 <tcp_pbuf_prealloc+0xe4>)
 800c158:	4830      	ldr	r0, [pc, #192]	; (800c21c <tcp_pbuf_prealloc+0xe8>)
 800c15a:	f00a fddd 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c15e:	6a3b      	ldr	r3, [r7, #32]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d105      	bne.n	800c170 <tcp_pbuf_prealloc+0x3c>
 800c164:	4b2b      	ldr	r3, [pc, #172]	; (800c214 <tcp_pbuf_prealloc+0xe0>)
 800c166:	22e9      	movs	r2, #233	; 0xe9
 800c168:	492d      	ldr	r1, [pc, #180]	; (800c220 <tcp_pbuf_prealloc+0xec>)
 800c16a:	482c      	ldr	r0, [pc, #176]	; (800c21c <tcp_pbuf_prealloc+0xe8>)
 800c16c:	f00a fdd4 	bl	8016d18 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c170:	89ba      	ldrh	r2, [r7, #12]
 800c172:	897b      	ldrh	r3, [r7, #10]
 800c174:	429a      	cmp	r2, r3
 800c176:	d221      	bcs.n	800c1bc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c178:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d111      	bne.n	800c1a8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	8b5b      	ldrh	r3, [r3, #26]
 800c188:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d115      	bne.n	800c1bc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c190:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c194:	2b00      	cmp	r3, #0
 800c196:	d007      	beq.n	800c1a8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d009      	beq.n	800c1bc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c1a8:	89bb      	ldrh	r3, [r7, #12]
 800c1aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c1ae:	f023 0203 	bic.w	r2, r3, #3
 800c1b2:	897b      	ldrh	r3, [r7, #10]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	bf28      	it	cs
 800c1b8:	4613      	movcs	r3, r2
 800c1ba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c1bc:	8af9      	ldrh	r1, [r7, #22]
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fb f837 	bl	8007238 <pbuf_alloc>
 800c1ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e019      	b.n	800c20a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d006      	beq.n	800c1ec <tcp_pbuf_prealloc+0xb8>
 800c1de:	4b0d      	ldr	r3, [pc, #52]	; (800c214 <tcp_pbuf_prealloc+0xe0>)
 800c1e0:	f240 120b 	movw	r2, #267	; 0x10b
 800c1e4:	490f      	ldr	r1, [pc, #60]	; (800c224 <tcp_pbuf_prealloc+0xf0>)
 800c1e6:	480d      	ldr	r0, [pc, #52]	; (800c21c <tcp_pbuf_prealloc+0xe8>)
 800c1e8:	f00a fd96 	bl	8016d18 <iprintf>
  *oversize = p->len - length;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	895a      	ldrh	r2, [r3, #10]
 800c1f0:	89bb      	ldrh	r3, [r7, #12]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	89ba      	ldrh	r2, [r7, #12]
 800c1fe:	811a      	strh	r2, [r3, #8]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	891a      	ldrh	r2, [r3, #8]
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	815a      	strh	r2, [r3, #10]
  return p;
 800c208:	693b      	ldr	r3, [r7, #16]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	08019504 	.word	0x08019504
 800c218:	080195bc 	.word	0x080195bc
 800c21c:	08019558 	.word	0x08019558
 800c220:	080195e0 	.word	0x080195e0
 800c224:	08019600 	.word	0x08019600

0800c228 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <tcp_write_checks+0x20>
 800c23a:	4b33      	ldr	r3, [pc, #204]	; (800c308 <tcp_write_checks+0xe0>)
 800c23c:	f240 1233 	movw	r2, #307	; 0x133
 800c240:	4932      	ldr	r1, [pc, #200]	; (800c30c <tcp_write_checks+0xe4>)
 800c242:	4833      	ldr	r0, [pc, #204]	; (800c310 <tcp_write_checks+0xe8>)
 800c244:	f00a fd68 	bl	8016d18 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7d1b      	ldrb	r3, [r3, #20]
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d00e      	beq.n	800c26e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c254:	2b07      	cmp	r3, #7
 800c256:	d00a      	beq.n	800c26e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d006      	beq.n	800c26e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c264:	2b03      	cmp	r3, #3
 800c266:	d002      	beq.n	800c26e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c268:	f06f 030a 	mvn.w	r3, #10
 800c26c:	e048      	b.n	800c300 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c26e:	887b      	ldrh	r3, [r7, #2]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <tcp_write_checks+0x50>
    return ERR_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	e043      	b.n	800c300 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c27e:	887a      	ldrh	r2, [r7, #2]
 800c280:	429a      	cmp	r2, r3
 800c282:	d909      	bls.n	800c298 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8b5b      	ldrh	r3, [r3, #26]
 800c288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c292:	f04f 33ff 	mov.w	r3, #4294967295
 800c296:	e033      	b.n	800c300 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c29e:	2b08      	cmp	r3, #8
 800c2a0:	d909      	bls.n	800c2b6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	8b5b      	ldrh	r3, [r3, #26]
 800c2a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	e024      	b.n	800c300 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00f      	beq.n	800c2e0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d11a      	bne.n	800c2fe <tcp_write_checks+0xd6>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d116      	bne.n	800c2fe <tcp_write_checks+0xd6>
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <tcp_write_checks+0xe0>)
 800c2d2:	f240 1255 	movw	r2, #341	; 0x155
 800c2d6:	490f      	ldr	r1, [pc, #60]	; (800c314 <tcp_write_checks+0xec>)
 800c2d8:	480d      	ldr	r0, [pc, #52]	; (800c310 <tcp_write_checks+0xe8>)
 800c2da:	f00a fd1d 	bl	8016d18 <iprintf>
 800c2de:	e00e      	b.n	800c2fe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d103      	bne.n	800c2f0 <tcp_write_checks+0xc8>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d006      	beq.n	800c2fe <tcp_write_checks+0xd6>
 800c2f0:	4b05      	ldr	r3, [pc, #20]	; (800c308 <tcp_write_checks+0xe0>)
 800c2f2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c2f6:	4908      	ldr	r1, [pc, #32]	; (800c318 <tcp_write_checks+0xf0>)
 800c2f8:	4805      	ldr	r0, [pc, #20]	; (800c310 <tcp_write_checks+0xe8>)
 800c2fa:	f00a fd0d 	bl	8016d18 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	08019504 	.word	0x08019504
 800c30c:	08019614 	.word	0x08019614
 800c310:	08019558 	.word	0x08019558
 800c314:	08019634 	.word	0x08019634
 800c318:	08019670 	.word	0x08019670

0800c31c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b09b      	sub	sp, #108	; 0x6c
 800c320:	af04      	add	r7, sp, #16
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4611      	mov	r1, r2
 800c328:	461a      	mov	r2, r3
 800c32a:	460b      	mov	r3, r1
 800c32c:	80fb      	strh	r3, [r7, #6]
 800c32e:	4613      	mov	r3, r2
 800c330:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	653b      	str	r3, [r7, #80]	; 0x50
 800c33a:	2300      	movs	r3, #0
 800c33c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c33e:	2300      	movs	r3, #0
 800c340:	64bb      	str	r3, [r7, #72]	; 0x48
 800c342:	2300      	movs	r3, #0
 800c344:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c346:	2300      	movs	r3, #0
 800c348:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <tcp_write+0x5c>
 800c364:	4ba4      	ldr	r3, [pc, #656]	; (800c5f8 <tcp_write+0x2dc>)
 800c366:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c36a:	49a4      	ldr	r1, [pc, #656]	; (800c5fc <tcp_write+0x2e0>)
 800c36c:	48a4      	ldr	r0, [pc, #656]	; (800c600 <tcp_write+0x2e4>)
 800c36e:	f00a fcd3 	bl	8016d18 <iprintf>
 800c372:	f06f 030f 	mvn.w	r3, #15
 800c376:	e32a      	b.n	800c9ce <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c37e:	085b      	lsrs	r3, r3, #1
 800c380:	b29a      	uxth	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c386:	4293      	cmp	r3, r2
 800c388:	bf28      	it	cs
 800c38a:	4613      	movcs	r3, r2
 800c38c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c38e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <tcp_write+0x7e>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c398:	e000      	b.n	800c39c <tcp_write+0x80>
 800c39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c39c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d109      	bne.n	800c3b8 <tcp_write+0x9c>
 800c3a4:	4b94      	ldr	r3, [pc, #592]	; (800c5f8 <tcp_write+0x2dc>)
 800c3a6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c3aa:	4996      	ldr	r1, [pc, #600]	; (800c604 <tcp_write+0x2e8>)
 800c3ac:	4894      	ldr	r0, [pc, #592]	; (800c600 <tcp_write+0x2e4>)
 800c3ae:	f00a fcb3 	bl	8016d18 <iprintf>
 800c3b2:	f06f 030f 	mvn.w	r3, #15
 800c3b6:	e30a      	b.n	800c9ce <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f7ff ff33 	bl	800c228 <tcp_write_checks>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c3c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <tcp_write+0xba>
    return err;
 800c3d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c3d4:	e2fb      	b.n	800c9ce <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 80f6 	beq.w	800c5dc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f4:	653b      	str	r3, [r7, #80]	; 0x50
 800c3f6:	e002      	b.n	800c3fe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1f8      	bne.n	800c3f8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c408:	7a9b      	ldrb	r3, [r3, #10]
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c418:	891b      	ldrh	r3, [r3, #8]
 800c41a:	4619      	mov	r1, r3
 800c41c:	8c3b      	ldrh	r3, [r7, #32]
 800c41e:	440b      	add	r3, r1
 800c420:	429a      	cmp	r2, r3
 800c422:	da06      	bge.n	800c432 <tcp_write+0x116>
 800c424:	4b74      	ldr	r3, [pc, #464]	; (800c5f8 <tcp_write+0x2dc>)
 800c426:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c42a:	4977      	ldr	r1, [pc, #476]	; (800c608 <tcp_write+0x2ec>)
 800c42c:	4874      	ldr	r0, [pc, #464]	; (800c600 <tcp_write+0x2e4>)
 800c42e:	f00a fc73 	bl	8016d18 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	891a      	ldrh	r2, [r3, #8]
 800c436:	8c3b      	ldrh	r3, [r7, #32]
 800c438:	4413      	add	r3, r2
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c448:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c44a:	8a7b      	ldrh	r3, [r7, #18]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d026      	beq.n	800c49e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c450:	8a7b      	ldrh	r3, [r7, #18]
 800c452:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c454:	429a      	cmp	r2, r3
 800c456:	d206      	bcs.n	800c466 <tcp_write+0x14a>
 800c458:	4b67      	ldr	r3, [pc, #412]	; (800c5f8 <tcp_write+0x2dc>)
 800c45a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c45e:	496b      	ldr	r1, [pc, #428]	; (800c60c <tcp_write+0x2f0>)
 800c460:	4867      	ldr	r0, [pc, #412]	; (800c600 <tcp_write+0x2e4>)
 800c462:	f00a fc59 	bl	8016d18 <iprintf>
      seg = last_unsent;
 800c466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c468:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c46a:	8a7b      	ldrh	r3, [r7, #18]
 800c46c:	88fa      	ldrh	r2, [r7, #6]
 800c46e:	4293      	cmp	r3, r2
 800c470:	bf28      	it	cs
 800c472:	4613      	movcs	r3, r2
 800c474:	b29b      	uxth	r3, r3
 800c476:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c478:	4293      	cmp	r3, r2
 800c47a:	bf28      	it	cs
 800c47c:	4613      	movcs	r3, r2
 800c47e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c484:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c486:	4413      	add	r3, r2
 800c488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c48c:	8a7a      	ldrh	r2, [r7, #18]
 800c48e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	b29b      	uxth	r3, r3
 800c494:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c496:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c49e:	8a7b      	ldrh	r3, [r7, #18]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <tcp_write+0x1a0>
 800c4a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4a8:	88fb      	ldrh	r3, [r7, #6]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d006      	beq.n	800c4bc <tcp_write+0x1a0>
 800c4ae:	4b52      	ldr	r3, [pc, #328]	; (800c5f8 <tcp_write+0x2dc>)
 800c4b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4b4:	4956      	ldr	r1, [pc, #344]	; (800c610 <tcp_write+0x2f4>)
 800c4b6:	4852      	ldr	r0, [pc, #328]	; (800c600 <tcp_write+0x2e4>)
 800c4b8:	f00a fc2e 	bl	8016d18 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c4bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4c0:	88fb      	ldrh	r3, [r7, #6]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	f080 8167 	bcs.w	800c796 <tcp_write+0x47a>
 800c4c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 8163 	beq.w	800c796 <tcp_write+0x47a>
 800c4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4d2:	891b      	ldrh	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 815e 	beq.w	800c796 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c4da:	88fa      	ldrh	r2, [r7, #6]
 800c4dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c4e0:	1ad2      	subs	r2, r2, r3
 800c4e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	bfa8      	it	ge
 800c4e8:	4613      	movge	r3, r2
 800c4ea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c4f0:	797b      	ldrb	r3, [r7, #5]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d027      	beq.n	800c54a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c4fa:	f107 0012 	add.w	r0, r7, #18
 800c4fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c500:	8bf9      	ldrh	r1, [r7, #30]
 800c502:	2301      	movs	r3, #1
 800c504:	9302      	str	r3, [sp, #8]
 800c506:	797b      	ldrb	r3, [r7, #5]
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	4603      	mov	r3, r0
 800c510:	2000      	movs	r0, #0
 800c512:	f7ff fe0f 	bl	800c134 <tcp_pbuf_prealloc>
 800c516:	6578      	str	r0, [r7, #84]	; 0x54
 800c518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f000 8225 	beq.w	800c96a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c522:	6858      	ldr	r0, [r3, #4]
 800c524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	4413      	add	r3, r2
 800c52c:	8bfa      	ldrh	r2, [r7, #30]
 800c52e:	4619      	mov	r1, r3
 800c530:	f00a fbdc 	bl	8016cec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c534:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c536:	f7fb f9eb 	bl	8007910 <pbuf_clen>
 800c53a:	4603      	mov	r3, r0
 800c53c:	461a      	mov	r2, r3
 800c53e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c542:	4413      	add	r3, r2
 800c544:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c548:	e041      	b.n	800c5ce <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	637b      	str	r3, [r7, #52]	; 0x34
 800c550:	e002      	b.n	800c558 <tcp_write+0x23c>
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	637b      	str	r3, [r7, #52]	; 0x34
 800c558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1f8      	bne.n	800c552 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c562:	7b1b      	ldrb	r3, [r3, #12]
 800c564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d115      	bne.n	800c598 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c572:	8952      	ldrh	r2, [r2, #10]
 800c574:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d10d      	bne.n	800c598 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c57c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <tcp_write+0x276>
 800c584:	4b1c      	ldr	r3, [pc, #112]	; (800c5f8 <tcp_write+0x2dc>)
 800c586:	f240 2231 	movw	r2, #561	; 0x231
 800c58a:	4922      	ldr	r1, [pc, #136]	; (800c614 <tcp_write+0x2f8>)
 800c58c:	481c      	ldr	r0, [pc, #112]	; (800c600 <tcp_write+0x2e4>)
 800c58e:	f00a fbc3 	bl	8016d18 <iprintf>
          extendlen = seglen;
 800c592:	8bfb      	ldrh	r3, [r7, #30]
 800c594:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c596:	e01a      	b.n	800c5ce <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c598:	8bfb      	ldrh	r3, [r7, #30]
 800c59a:	2201      	movs	r2, #1
 800c59c:	4619      	mov	r1, r3
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f7fa fe4a 	bl	8007238 <pbuf_alloc>
 800c5a4:	6578      	str	r0, [r7, #84]	; 0x54
 800c5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 81e0 	beq.w	800c96e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c5ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c5ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c5bc:	f7fb f9a8 	bl	8007910 <pbuf_clen>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c5c8:	4413      	add	r3, r2
 800c5ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c5ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c5d2:	8bfb      	ldrh	r3, [r7, #30]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c5da:	e0dc      	b.n	800c796 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 80d7 	beq.w	800c796 <tcp_write+0x47a>
 800c5e8:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <tcp_write+0x2dc>)
 800c5ea:	f240 224a 	movw	r2, #586	; 0x24a
 800c5ee:	490a      	ldr	r1, [pc, #40]	; (800c618 <tcp_write+0x2fc>)
 800c5f0:	4803      	ldr	r0, [pc, #12]	; (800c600 <tcp_write+0x2e4>)
 800c5f2:	f00a fb91 	bl	8016d18 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c5f6:	e0ce      	b.n	800c796 <tcp_write+0x47a>
 800c5f8:	08019504 	.word	0x08019504
 800c5fc:	080196a4 	.word	0x080196a4
 800c600:	08019558 	.word	0x08019558
 800c604:	080196bc 	.word	0x080196bc
 800c608:	080196f0 	.word	0x080196f0
 800c60c:	08019708 	.word	0x08019708
 800c610:	08019728 	.word	0x08019728
 800c614:	08019748 	.word	0x08019748
 800c618:	08019774 	.word	0x08019774
    struct pbuf *p;
    u16_t left = len - pos;
 800c61c:	88fa      	ldrh	r2, [r7, #6]
 800c61e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c626:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c632:	8b7a      	ldrh	r2, [r7, #26]
 800c634:	8bbb      	ldrh	r3, [r7, #28]
 800c636:	4293      	cmp	r3, r2
 800c638:	bf28      	it	cs
 800c63a:	4613      	movcs	r3, r2
 800c63c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c63e:	797b      	ldrb	r3, [r7, #5]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d036      	beq.n	800c6b6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c648:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	8b3b      	ldrh	r3, [r7, #24]
 800c650:	4413      	add	r3, r2
 800c652:	b299      	uxth	r1, r3
 800c654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c656:	2b00      	cmp	r3, #0
 800c658:	bf0c      	ite	eq
 800c65a:	2301      	moveq	r3, #1
 800c65c:	2300      	movne	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f107 0012 	add.w	r0, r7, #18
 800c664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	797b      	ldrb	r3, [r7, #5]
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4603      	mov	r3, r0
 800c672:	2036      	movs	r0, #54	; 0x36
 800c674:	f7ff fd5e 	bl	800c134 <tcp_pbuf_prealloc>
 800c678:	6338      	str	r0, [r7, #48]	; 0x30
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 8178 	beq.w	800c972 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	895b      	ldrh	r3, [r3, #10]
 800c686:	8b3a      	ldrh	r2, [r7, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d906      	bls.n	800c69a <tcp_write+0x37e>
 800c68c:	4b8c      	ldr	r3, [pc, #560]	; (800c8c0 <tcp_write+0x5a4>)
 800c68e:	f240 2266 	movw	r2, #614	; 0x266
 800c692:	498c      	ldr	r1, [pc, #560]	; (800c8c4 <tcp_write+0x5a8>)
 800c694:	488c      	ldr	r0, [pc, #560]	; (800c8c8 <tcp_write+0x5ac>)
 800c696:	f00a fb3f 	bl	8016d18 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c6a2:	18d0      	adds	r0, r2, r3
 800c6a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	8b3a      	ldrh	r2, [r7, #24]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f00a fb1c 	bl	8016cec <memcpy>
 800c6b4:	e02f      	b.n	800c716 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c6b6:	8a7b      	ldrh	r3, [r7, #18]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <tcp_write+0x3ae>
 800c6bc:	4b80      	ldr	r3, [pc, #512]	; (800c8c0 <tcp_write+0x5a4>)
 800c6be:	f240 2271 	movw	r2, #625	; 0x271
 800c6c2:	4982      	ldr	r1, [pc, #520]	; (800c8cc <tcp_write+0x5b0>)
 800c6c4:	4880      	ldr	r0, [pc, #512]	; (800c8c8 <tcp_write+0x5ac>)
 800c6c6:	f00a fb27 	bl	8016d18 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c6ca:	8b3b      	ldrh	r3, [r7, #24]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	2036      	movs	r0, #54	; 0x36
 800c6d2:	f7fa fdb1 	bl	8007238 <pbuf_alloc>
 800c6d6:	6178      	str	r0, [r7, #20]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 814b 	beq.w	800c976 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c6e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	441a      	add	r2, r3
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c6ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	2036      	movs	r0, #54	; 0x36
 800c6fa:	f7fa fd9d 	bl	8007238 <pbuf_alloc>
 800c6fe:	6338      	str	r0, [r7, #48]	; 0x30
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	2b00      	cmp	r3, #0
 800c704:	d103      	bne.n	800c70e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c706:	6978      	ldr	r0, [r7, #20]
 800c708:	f7fb f87a 	bl	8007800 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c70c:	e136      	b.n	800c97c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c70e:	6979      	ldr	r1, [r7, #20]
 800c710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c712:	f7fb f937 	bl	8007984 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c718:	f7fb f8fa 	bl	8007910 <pbuf_clen>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c724:	4413      	add	r3, r2
 800c726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c72a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d903      	bls.n	800c73a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c734:	f7fb f864 	bl	8007800 <pbuf_free>
      goto memerr;
 800c738:	e120      	b.n	800c97c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c73e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c742:	441a      	add	r2, r3
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	4613      	mov	r3, r2
 800c74c:	2200      	movs	r2, #0
 800c74e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff fc51 	bl	800bff8 <tcp_create_segment>
 800c756:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 810d 	beq.w	800c97a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <tcp_write+0x450>
      queue = seg;
 800c766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c768:	647b      	str	r3, [r7, #68]	; 0x44
 800c76a:	e00c      	b.n	800c786 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <tcp_write+0x464>
 800c772:	4b53      	ldr	r3, [pc, #332]	; (800c8c0 <tcp_write+0x5a4>)
 800c774:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c778:	4955      	ldr	r1, [pc, #340]	; (800c8d0 <tcp_write+0x5b4>)
 800c77a:	4853      	ldr	r0, [pc, #332]	; (800c8c8 <tcp_write+0x5ac>)
 800c77c:	f00a facc 	bl	8016d18 <iprintf>
      prev_seg->next = seg;
 800c780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c784:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c788:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c78a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c78e:	8b3b      	ldrh	r3, [r7, #24]
 800c790:	4413      	add	r3, r2
 800c792:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c796:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	f4ff af3d 	bcc.w	800c61c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c7a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d02c      	beq.n	800c802 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ae:	e01e      	b.n	800c7ee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	891a      	ldrh	r2, [r3, #8]
 800c7b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7b6:	4413      	add	r3, r2
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7bc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d110      	bne.n	800c7e8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7cc:	8952      	ldrh	r2, [r2, #10]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c7d2:	68b9      	ldr	r1, [r7, #8]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f00a fa89 	bl	8016cec <memcpy>
        p->len += oversize_used;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	895a      	ldrh	r2, [r3, #10]
 800c7de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7e0:	4413      	add	r3, r2
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1dd      	bne.n	800c7b0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7f6:	891a      	ldrh	r2, [r3, #8]
 800c7f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7fa:	4413      	add	r3, r2
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c800:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c802:	8a7a      	ldrh	r2, [r7, #18]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d018      	beq.n	800c842 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <tcp_write+0x508>
 800c816:	4b2a      	ldr	r3, [pc, #168]	; (800c8c0 <tcp_write+0x5a4>)
 800c818:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c81c:	492d      	ldr	r1, [pc, #180]	; (800c8d4 <tcp_write+0x5b8>)
 800c81e:	482a      	ldr	r0, [pc, #168]	; (800c8c8 <tcp_write+0x5ac>)
 800c820:	f00a fa7a 	bl	8016d18 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fb f8aa 	bl	8007984 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c832:	891a      	ldrh	r2, [r3, #8]
 800c834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c836:	891b      	ldrh	r3, [r3, #8]
 800c838:	4413      	add	r3, r2
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c83e:	811a      	strh	r2, [r3, #8]
 800c840:	e037      	b.n	800c8b2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d034      	beq.n	800c8b2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <tcp_write+0x53a>
 800c84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d106      	bne.n	800c864 <tcp_write+0x548>
 800c856:	4b1a      	ldr	r3, [pc, #104]	; (800c8c0 <tcp_write+0x5a4>)
 800c858:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c85c:	491e      	ldr	r1, [pc, #120]	; (800c8d8 <tcp_write+0x5bc>)
 800c85e:	481a      	ldr	r0, [pc, #104]	; (800c8c8 <tcp_write+0x5ac>)
 800c860:	f00a fa5a 	bl	8016d18 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	62bb      	str	r3, [r7, #40]	; 0x28
 800c86a:	e009      	b.n	800c880 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	891a      	ldrh	r2, [r3, #8]
 800c870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c872:	4413      	add	r3, r2
 800c874:	b29a      	uxth	r2, r3
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1f1      	bne.n	800c86c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	891a      	ldrh	r2, [r3, #8]
 800c88c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c88e:	4413      	add	r3, r2
 800c890:	b29a      	uxth	r2, r3
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	895a      	ldrh	r2, [r3, #10]
 800c89a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c89c:	4413      	add	r3, r2
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8a6:	891a      	ldrh	r2, [r3, #8]
 800c8a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8aa:	4413      	add	r3, r2
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d111      	bne.n	800c8dc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8bc:	66da      	str	r2, [r3, #108]	; 0x6c
 800c8be:	e010      	b.n	800c8e2 <tcp_write+0x5c6>
 800c8c0:	08019504 	.word	0x08019504
 800c8c4:	080197a4 	.word	0x080197a4
 800c8c8:	08019558 	.word	0x08019558
 800c8cc:	080197e4 	.word	0x080197e4
 800c8d0:	080197f4 	.word	0x080197f4
 800c8d4:	08019808 	.word	0x08019808
 800c8d8:	08019840 	.word	0x08019840
  } else {
    last_unsent->next = queue;
 800c8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8e0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8e6:	88fb      	ldrh	r3, [r7, #6]
 800c8e8:	441a      	add	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c8f4:	88fb      	ldrh	r3, [r7, #6]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c906:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00e      	beq.n	800c932 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10a      	bne.n	800c932 <tcp_write+0x616>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c920:	2b00      	cmp	r3, #0
 800c922:	d106      	bne.n	800c932 <tcp_write+0x616>
 800c924:	4b2c      	ldr	r3, [pc, #176]	; (800c9d8 <tcp_write+0x6bc>)
 800c926:	f240 3212 	movw	r2, #786	; 0x312
 800c92a:	492c      	ldr	r1, [pc, #176]	; (800c9dc <tcp_write+0x6c0>)
 800c92c:	482c      	ldr	r0, [pc, #176]	; (800c9e0 <tcp_write+0x6c4>)
 800c92e:	f00a f9f3 	bl	8016d18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c934:	2b00      	cmp	r3, #0
 800c936:	d016      	beq.n	800c966 <tcp_write+0x64a>
 800c938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d012      	beq.n	800c966 <tcp_write+0x64a>
 800c940:	797b      	ldrb	r3, [r7, #5]
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10d      	bne.n	800c966 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	899b      	ldrh	r3, [r3, #12]
 800c950:	b29c      	uxth	r4, r3
 800c952:	2008      	movs	r0, #8
 800c954:	f7f9 fca0 	bl	8006298 <lwip_htons>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	4322      	orrs	r2, r4
 800c962:	b292      	uxth	r2, r2
 800c964:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	e031      	b.n	800c9ce <tcp_write+0x6b2>
          goto memerr;
 800c96a:	bf00      	nop
 800c96c:	e006      	b.n	800c97c <tcp_write+0x660>
            goto memerr;
 800c96e:	bf00      	nop
 800c970:	e004      	b.n	800c97c <tcp_write+0x660>
        goto memerr;
 800c972:	bf00      	nop
 800c974:	e002      	b.n	800c97c <tcp_write+0x660>
        goto memerr;
 800c976:	bf00      	nop
 800c978:	e000      	b.n	800c97c <tcp_write+0x660>
      goto memerr;
 800c97a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8b5b      	ldrh	r3, [r3, #26]
 800c980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c984:	b29a      	uxth	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c990:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c992:	f7fa ff35 	bl	8007800 <pbuf_free>
  }
  if (queue != NULL) {
 800c996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c99c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c99e:	f7fc fb57 	bl	8009050 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00e      	beq.n	800c9ca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <tcp_write+0x6ae>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d106      	bne.n	800c9ca <tcp_write+0x6ae>
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <tcp_write+0x6bc>)
 800c9be:	f240 3227 	movw	r2, #807	; 0x327
 800c9c2:	4906      	ldr	r1, [pc, #24]	; (800c9dc <tcp_write+0x6c0>)
 800c9c4:	4806      	ldr	r0, [pc, #24]	; (800c9e0 <tcp_write+0x6c4>)
 800c9c6:	f00a f9a7 	bl	8016d18 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c9ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	375c      	adds	r7, #92	; 0x5c
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd90      	pop	{r4, r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	08019504 	.word	0x08019504
 800c9dc:	08019878 	.word	0x08019878
 800c9e0:	08019558 	.word	0x08019558

0800c9e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c9e4:	b590      	push	{r4, r7, lr}
 800c9e6:	b08b      	sub	sp, #44	; 0x2c
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d106      	bne.n	800ca10 <tcp_split_unsent_seg+0x2c>
 800ca02:	4b95      	ldr	r3, [pc, #596]	; (800cc58 <tcp_split_unsent_seg+0x274>)
 800ca04:	f240 324b 	movw	r2, #843	; 0x34b
 800ca08:	4994      	ldr	r1, [pc, #592]	; (800cc5c <tcp_split_unsent_seg+0x278>)
 800ca0a:	4895      	ldr	r0, [pc, #596]	; (800cc60 <tcp_split_unsent_seg+0x27c>)
 800ca0c:	f00a f984 	bl	8016d18 <iprintf>

  useg = pcb->unsent;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d102      	bne.n	800ca22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca20:	e116      	b.n	800cc50 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ca22:	887b      	ldrh	r3, [r7, #2]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d109      	bne.n	800ca3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca28:	4b8b      	ldr	r3, [pc, #556]	; (800cc58 <tcp_split_unsent_seg+0x274>)
 800ca2a:	f240 3253 	movw	r2, #851	; 0x353
 800ca2e:	498d      	ldr	r1, [pc, #564]	; (800cc64 <tcp_split_unsent_seg+0x280>)
 800ca30:	488b      	ldr	r0, [pc, #556]	; (800cc60 <tcp_split_unsent_seg+0x27c>)
 800ca32:	f00a f971 	bl	8016d18 <iprintf>
    return ERR_VAL;
 800ca36:	f06f 0305 	mvn.w	r3, #5
 800ca3a:	e109      	b.n	800cc50 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	891b      	ldrh	r3, [r3, #8]
 800ca40:	887a      	ldrh	r2, [r7, #2]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d301      	bcc.n	800ca4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	e102      	b.n	800cc50 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca4e:	887a      	ldrh	r2, [r7, #2]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d906      	bls.n	800ca62 <tcp_split_unsent_seg+0x7e>
 800ca54:	4b80      	ldr	r3, [pc, #512]	; (800cc58 <tcp_split_unsent_seg+0x274>)
 800ca56:	f240 325b 	movw	r2, #859	; 0x35b
 800ca5a:	4983      	ldr	r1, [pc, #524]	; (800cc68 <tcp_split_unsent_seg+0x284>)
 800ca5c:	4880      	ldr	r0, [pc, #512]	; (800cc60 <tcp_split_unsent_seg+0x27c>)
 800ca5e:	f00a f95b 	bl	8016d18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	891b      	ldrh	r3, [r3, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <tcp_split_unsent_seg+0x94>
 800ca6a:	4b7b      	ldr	r3, [pc, #492]	; (800cc58 <tcp_split_unsent_seg+0x274>)
 800ca6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ca70:	497e      	ldr	r1, [pc, #504]	; (800cc6c <tcp_split_unsent_seg+0x288>)
 800ca72:	487b      	ldr	r0, [pc, #492]	; (800cc60 <tcp_split_unsent_seg+0x27c>)
 800ca74:	f00a f950 	bl	8016d18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	7a9b      	ldrb	r3, [r3, #10]
 800ca7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	891a      	ldrh	r2, [r3, #8]
 800ca8e:	887b      	ldrh	r3, [r7, #2]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	89bb      	ldrh	r3, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800caa2:	4619      	mov	r1, r3
 800caa4:	2036      	movs	r0, #54	; 0x36
 800caa6:	f7fa fbc7 	bl	8007238 <pbuf_alloc>
 800caaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 80b7 	beq.w	800cc22 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	891a      	ldrh	r2, [r3, #8]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	891b      	ldrh	r3, [r3, #8]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	887b      	ldrh	r3, [r7, #2]
 800cac4:	4413      	add	r3, r2
 800cac6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	6858      	ldr	r0, [r3, #4]
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	18d1      	adds	r1, r2, r3
 800cad4:	897b      	ldrh	r3, [r7, #10]
 800cad6:	89ba      	ldrh	r2, [r7, #12]
 800cad8:	f7fb f88c 	bl	8007bf4 <pbuf_copy_partial>
 800cadc:	4603      	mov	r3, r0
 800cade:	461a      	mov	r2, r3
 800cae0:	89bb      	ldrh	r3, [r7, #12]
 800cae2:	4293      	cmp	r3, r2
 800cae4:	f040 809f 	bne.w	800cc26 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	899b      	ldrh	r3, [r3, #12]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f9 fbd1 	bl	8006298 <lwip_htons>
 800caf6:	4603      	mov	r3, r0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cafe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb00:	2300      	movs	r3, #0
 800cb02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cb04:	7efb      	ldrb	r3, [r7, #27]
 800cb06:	f003 0308 	and.w	r3, r3, #8
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d007      	beq.n	800cb1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb0e:	7efb      	ldrb	r3, [r7, #27]
 800cb10:	f023 0308 	bic.w	r3, r3, #8
 800cb14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cb16:	7ebb      	ldrb	r3, [r7, #26]
 800cb18:	f043 0308 	orr.w	r3, r3, #8
 800cb1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cb1e:	7efb      	ldrb	r3, [r7, #27]
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d007      	beq.n	800cb38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb28:	7efb      	ldrb	r3, [r7, #27]
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cb30:	7ebb      	ldrb	r3, [r7, #26]
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f9 fbbf 	bl	80062c2 <lwip_htonl>
 800cb44:	4602      	mov	r2, r0
 800cb46:	887b      	ldrh	r3, [r7, #2]
 800cb48:	18d1      	adds	r1, r2, r3
 800cb4a:	7eba      	ldrb	r2, [r7, #26]
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	460b      	mov	r3, r1
 800cb52:	6939      	ldr	r1, [r7, #16]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff fa4f 	bl	800bff8 <tcp_create_segment>
 800cb5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d063      	beq.n	800cc2a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fa fed2 	bl	8007910 <pbuf_clen>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	6858      	ldr	r0, [r3, #4]
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	891a      	ldrh	r2, [r3, #8]
 800cb8a:	89bb      	ldrh	r3, [r7, #12]
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	4619      	mov	r1, r3
 800cb92:	f7fa fcaf 	bl	80074f4 <pbuf_realloc>
  useg->len -= remainder;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	891a      	ldrh	r2, [r3, #8]
 800cb9a:	89bb      	ldrh	r3, [r7, #12]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	899b      	ldrh	r3, [r3, #12]
 800cbaa:	b29c      	uxth	r4, r3
 800cbac:	7efb      	ldrb	r3, [r7, #27]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7f9 fb71 	bl	8006298 <lwip_htons>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	461a      	mov	r2, r3
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	4322      	orrs	r2, r4
 800cbc0:	b292      	uxth	r2, r2
 800cbc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fa fea1 	bl	8007910 <pbuf_clen>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbd8:	4413      	add	r3, r2
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fa fe92 	bl	8007910 <pbuf_clen>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbf6:	4413      	add	r3, r2
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	69fa      	ldr	r2, [r7, #28]
 800cc0c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d103      	bne.n	800cc1e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e016      	b.n	800cc50 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cc22:	bf00      	nop
 800cc24:	e002      	b.n	800cc2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc26:	bf00      	nop
 800cc28:	e000      	b.n	800cc2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc2a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d006      	beq.n	800cc40 <tcp_split_unsent_seg+0x25c>
 800cc32:	4b09      	ldr	r3, [pc, #36]	; (800cc58 <tcp_split_unsent_seg+0x274>)
 800cc34:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc38:	490d      	ldr	r1, [pc, #52]	; (800cc70 <tcp_split_unsent_seg+0x28c>)
 800cc3a:	4809      	ldr	r0, [pc, #36]	; (800cc60 <tcp_split_unsent_seg+0x27c>)
 800cc3c:	f00a f86c 	bl	8016d18 <iprintf>
  if (p != NULL) {
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cc46:	6938      	ldr	r0, [r7, #16]
 800cc48:	f7fa fdda 	bl	8007800 <pbuf_free>
  }

  return ERR_MEM;
 800cc4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3724      	adds	r7, #36	; 0x24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd90      	pop	{r4, r7, pc}
 800cc58:	08019504 	.word	0x08019504
 800cc5c:	08019898 	.word	0x08019898
 800cc60:	08019558 	.word	0x08019558
 800cc64:	080198bc 	.word	0x080198bc
 800cc68:	080198e0 	.word	0x080198e0
 800cc6c:	080198f0 	.word	0x080198f0
 800cc70:	08019900 	.word	0x08019900

0800cc74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <tcp_send_fin+0x1c>
 800cc82:	4b21      	ldr	r3, [pc, #132]	; (800cd08 <tcp_send_fin+0x94>)
 800cc84:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cc88:	4920      	ldr	r1, [pc, #128]	; (800cd0c <tcp_send_fin+0x98>)
 800cc8a:	4821      	ldr	r0, [pc, #132]	; (800cd10 <tcp_send_fin+0x9c>)
 800cc8c:	f00a f844 	bl	8016d18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d02e      	beq.n	800ccf6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e002      	b.n	800cca6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1f8      	bne.n	800cca0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	899b      	ldrh	r3, [r3, #12]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f9 faee 	bl	8006298 <lwip_htons>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	f003 0307 	and.w	r3, r3, #7
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d116      	bne.n	800ccf6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	899b      	ldrh	r3, [r3, #12]
 800ccce:	b29c      	uxth	r4, r3
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	f7f9 fae1 	bl	8006298 <lwip_htons>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	461a      	mov	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	4322      	orrs	r2, r4
 800cce0:	b292      	uxth	r2, r2
 800cce2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8b5b      	ldrh	r3, [r3, #26]
 800cce8:	f043 0320 	orr.w	r3, r3, #32
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e004      	b.n	800cd00 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f80b 	bl	800cd14 <tcp_enqueue_flags>
 800ccfe:	4603      	mov	r3, r0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd90      	pop	{r4, r7, pc}
 800cd08:	08019504 	.word	0x08019504
 800cd0c:	0801990c 	.word	0x0801990c
 800cd10:	08019558 	.word	0x08019558

0800cd14 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	; 0x28
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	f003 0303 	and.w	r3, r3, #3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <tcp_enqueue_flags+0x2c>
 800cd32:	4b67      	ldr	r3, [pc, #412]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800cd34:	f240 4211 	movw	r2, #1041	; 0x411
 800cd38:	4966      	ldr	r1, [pc, #408]	; (800ced4 <tcp_enqueue_flags+0x1c0>)
 800cd3a:	4867      	ldr	r0, [pc, #412]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800cd3c:	f009 ffec 	bl	8016d18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <tcp_enqueue_flags+0x40>
 800cd46:	4b62      	ldr	r3, [pc, #392]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800cd48:	f240 4213 	movw	r2, #1043	; 0x413
 800cd4c:	4963      	ldr	r1, [pc, #396]	; (800cedc <tcp_enqueue_flags+0x1c8>)
 800cd4e:	4862      	ldr	r0, [pc, #392]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800cd50:	f009 ffe2 	bl	8016d18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	f003 0302 	and.w	r3, r3, #2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd62:	7ffb      	ldrb	r3, [r7, #31]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd76:	4619      	mov	r1, r3
 800cd78:	2036      	movs	r0, #54	; 0x36
 800cd7a:	f7fa fa5d 	bl	8007238 <pbuf_alloc>
 800cd7e:	6138      	str	r0, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d109      	bne.n	800cd9a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	8b5b      	ldrh	r3, [r3, #26]
 800cd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cd94:	f04f 33ff 	mov.w	r3, #4294967295
 800cd98:	e095      	b.n	800cec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	895a      	ldrh	r2, [r3, #10]
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d206      	bcs.n	800cdb4 <tcp_enqueue_flags+0xa0>
 800cda6:	4b4a      	ldr	r3, [pc, #296]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800cda8:	f240 4239 	movw	r2, #1081	; 0x439
 800cdac:	494c      	ldr	r1, [pc, #304]	; (800cee0 <tcp_enqueue_flags+0x1cc>)
 800cdae:	484a      	ldr	r0, [pc, #296]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800cdb0:	f009 ffb2 	bl	8016d18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cdb8:	78fa      	ldrb	r2, [r7, #3]
 800cdba:	7ffb      	ldrb	r3, [r7, #31]
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	6939      	ldr	r1, [r7, #16]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff f918 	bl	800bff8 <tcp_create_segment>
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d109      	bne.n	800cde4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	8b5b      	ldrh	r3, [r3, #26]
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdde:	f04f 33ff 	mov.w	r3, #4294967295
 800cde2:	e070      	b.n	800cec6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f003 0303 	and.w	r3, r3, #3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d006      	beq.n	800cdfe <tcp_enqueue_flags+0xea>
 800cdf0:	4b37      	ldr	r3, [pc, #220]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800cdf2:	f240 4242 	movw	r2, #1090	; 0x442
 800cdf6:	493b      	ldr	r1, [pc, #236]	; (800cee4 <tcp_enqueue_flags+0x1d0>)
 800cdf8:	4837      	ldr	r0, [pc, #220]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800cdfa:	f009 ff8d 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	891b      	ldrh	r3, [r3, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d006      	beq.n	800ce14 <tcp_enqueue_flags+0x100>
 800ce06:	4b32      	ldr	r3, [pc, #200]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800ce08:	f240 4243 	movw	r2, #1091	; 0x443
 800ce0c:	4936      	ldr	r1, [pc, #216]	; (800cee8 <tcp_enqueue_flags+0x1d4>)
 800ce0e:	4832      	ldr	r0, [pc, #200]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800ce10:	f009 ff82 	bl	8016d18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d103      	bne.n	800ce24 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce22:	e00d      	b.n	800ce40 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce28:	61bb      	str	r3, [r7, #24]
 800ce2a:	e002      	b.n	800ce32 <tcp_enqueue_flags+0x11e>
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1f8      	bne.n	800ce2c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d104      	bne.n	800ce5c <tcp_enqueue_flags+0x148>
 800ce52:	78fb      	ldrb	r3, [r7, #3]
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d004      	beq.n	800ce66 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d006      	beq.n	800ce7e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	8b5b      	ldrh	r3, [r3, #26]
 800ce74:	f043 0320 	orr.w	r3, r3, #32
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fa fd44 	bl	8007910 <pbuf_clen>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce92:	4413      	add	r3, r2
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00e      	beq.n	800cec4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <tcp_enqueue_flags+0x1b0>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <tcp_enqueue_flags+0x1b0>
 800ceb6:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <tcp_enqueue_flags+0x1bc>)
 800ceb8:	f240 4265 	movw	r2, #1125	; 0x465
 800cebc:	490b      	ldr	r1, [pc, #44]	; (800ceec <tcp_enqueue_flags+0x1d8>)
 800cebe:	4806      	ldr	r0, [pc, #24]	; (800ced8 <tcp_enqueue_flags+0x1c4>)
 800cec0:	f009 ff2a 	bl	8016d18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3720      	adds	r7, #32
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08019504 	.word	0x08019504
 800ced4:	08019928 	.word	0x08019928
 800ced8:	08019558 	.word	0x08019558
 800cedc:	08019980 	.word	0x08019980
 800cee0:	080199a0 	.word	0x080199a0
 800cee4:	080199dc 	.word	0x080199dc
 800cee8:	080199f4 	.word	0x080199f4
 800ceec:	08019a20 	.word	0x08019a20

0800cef0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cef0:	b5b0      	push	{r4, r5, r7, lr}
 800cef2:	b08a      	sub	sp, #40	; 0x28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <tcp_output+0x1c>
 800cefe:	4b9e      	ldr	r3, [pc, #632]	; (800d178 <tcp_output+0x288>)
 800cf00:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cf04:	499d      	ldr	r1, [pc, #628]	; (800d17c <tcp_output+0x28c>)
 800cf06:	489e      	ldr	r0, [pc, #632]	; (800d180 <tcp_output+0x290>)
 800cf08:	f009 ff06 	bl	8016d18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7d1b      	ldrb	r3, [r3, #20]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d106      	bne.n	800cf22 <tcp_output+0x32>
 800cf14:	4b98      	ldr	r3, [pc, #608]	; (800d178 <tcp_output+0x288>)
 800cf16:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cf1a:	499a      	ldr	r1, [pc, #616]	; (800d184 <tcp_output+0x294>)
 800cf1c:	4898      	ldr	r0, [pc, #608]	; (800d180 <tcp_output+0x290>)
 800cf1e:	f009 fefb 	bl	8016d18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf22:	4b99      	ldr	r3, [pc, #612]	; (800d188 <tcp_output+0x298>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d101      	bne.n	800cf30 <tcp_output+0x40>
    return ERR_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e1ce      	b.n	800d2ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	bf28      	it	cs
 800cf40:	4613      	movcs	r3, r2
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10b      	bne.n	800cf6a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	8b5b      	ldrh	r3, [r3, #26]
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 81aa 	beq.w	800d2b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fdcb 	bl	800dafc <tcp_send_empty_ack>
 800cf66:	4603      	mov	r3, r0
 800cf68:	e1b1      	b.n	800d2ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	461a      	mov	r2, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff f824 	bl	800bfc0 <tcp_route>
 800cf78:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <tcp_output+0x96>
    return ERR_RTE;
 800cf80:	f06f 0303 	mvn.w	r3, #3
 800cf84:	e1a3      	b.n	800d2ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <tcp_output+0xa4>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d111      	bne.n	800cfb8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <tcp_output+0xb0>
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	e000      	b.n	800cfa2 <tcp_output+0xb2>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <tcp_output+0xc0>
      return ERR_RTE;
 800cfaa:	f06f 0303 	mvn.w	r3, #3
 800cfae:	e18e      	b.n	800d2ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f9 f97f 	bl	80062c2 <lwip_htonl>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfce:	8912      	ldrh	r2, [r2, #8]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	69ba      	ldr	r2, [r7, #24]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d227      	bcs.n	800d028 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfde:	461a      	mov	r2, r3
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d114      	bne.n	800d010 <tcp_output+0x120>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d110      	bne.n	800d010 <tcp_output+0x120>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f003 0302 	and.w	r3, r3, #2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 814d 	beq.w	800d2b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fd6c 	bl	800dafc <tcp_send_empty_ack>
 800d024:	4603      	mov	r3, r0
 800d026:	e152      	b.n	800d2ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d034:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 811c 	beq.w	800d276 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d03e:	e002      	b.n	800d046 <tcp_output+0x156>
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	623b      	str	r3, [r7, #32]
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1f8      	bne.n	800d040 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d04e:	e112      	b.n	800d276 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	899b      	ldrh	r3, [r3, #12]
 800d056:	b29b      	uxth	r3, r3
 800d058:	4618      	mov	r0, r3
 800d05a:	f7f9 f91d 	bl	8006298 <lwip_htons>
 800d05e:	4603      	mov	r3, r0
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f003 0304 	and.w	r3, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <tcp_output+0x188>
 800d06a:	4b43      	ldr	r3, [pc, #268]	; (800d178 <tcp_output+0x288>)
 800d06c:	f240 5236 	movw	r2, #1334	; 0x536
 800d070:	4946      	ldr	r1, [pc, #280]	; (800d18c <tcp_output+0x29c>)
 800d072:	4843      	ldr	r0, [pc, #268]	; (800d180 <tcp_output+0x290>)
 800d074:	f009 fe50 	bl	8016d18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d01f      	beq.n	800d0c0 <tcp_output+0x1d0>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8b5b      	ldrh	r3, [r3, #26]
 800d084:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d119      	bne.n	800d0c0 <tcp_output+0x1d0>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <tcp_output+0x1bc>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d110      	bne.n	800d0c0 <tcp_output+0x1d0>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a2:	891a      	ldrh	r2, [r3, #8]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d209      	bcs.n	800d0c0 <tcp_output+0x1d0>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d004      	beq.n	800d0c0 <tcp_output+0x1d0>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d901      	bls.n	800d0c4 <tcp_output+0x1d4>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e000      	b.n	800d0c6 <tcp_output+0x1d6>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8b5b      	ldrh	r3, [r3, #26]
 800d0ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80e4 	beq.w	800d2a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	7d1b      	ldrb	r3, [r3, #20]
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d00d      	beq.n	800d0fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	b29c      	uxth	r4, r3
 800d0e8:	2010      	movs	r0, #16
 800d0ea:	f7f9 f8d5 	bl	8006298 <lwip_htons>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	4322      	orrs	r2, r4
 800d0f8:	b292      	uxth	r2, r2
 800d0fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d102:	f000 f909 	bl	800d318 <tcp_output_segment>
 800d106:	4603      	mov	r3, r0
 800d108:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d009      	beq.n	800d126 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8b5b      	ldrh	r3, [r3, #26]
 800d116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	835a      	strh	r2, [r3, #26]
      return err;
 800d120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d124:	e0d3      	b.n	800d2ce <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d006      	beq.n	800d144 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	8b5b      	ldrh	r3, [r3, #26]
 800d13a:	f023 0303 	bic.w	r3, r3, #3
 800d13e:	b29a      	uxth	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f9 f8b9 	bl	80062c2 <lwip_htonl>
 800d150:	4604      	mov	r4, r0
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	891b      	ldrh	r3, [r3, #8]
 800d156:	461d      	mov	r5, r3
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	899b      	ldrh	r3, [r3, #12]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4618      	mov	r0, r3
 800d162:	f7f9 f899 	bl	8006298 <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00e      	beq.n	800d190 <tcp_output+0x2a0>
 800d172:	2301      	movs	r3, #1
 800d174:	e00d      	b.n	800d192 <tcp_output+0x2a2>
 800d176:	bf00      	nop
 800d178:	08019504 	.word	0x08019504
 800d17c:	08019a48 	.word	0x08019a48
 800d180:	08019558 	.word	0x08019558
 800d184:	08019a60 	.word	0x08019a60
 800d188:	20006980 	.word	0x20006980
 800d18c:	08019a88 	.word	0x08019a88
 800d190:	2300      	movs	r3, #0
 800d192:	442b      	add	r3, r5
 800d194:	4423      	add	r3, r4
 800d196:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	da02      	bge.n	800d1aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	891b      	ldrh	r3, [r3, #8]
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	899b      	ldrh	r3, [r3, #12]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f9 f86d 	bl	8006298 <lwip_htons>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	f003 0303 	and.w	r3, r3, #3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <tcp_output+0x2de>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <tcp_output+0x2e0>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4423      	add	r3, r4
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d049      	beq.n	800d26a <tcp_output+0x37a>
      seg->next = NULL;
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d105      	bne.n	800d1f0 <tcp_output+0x300>
        pcb->unacked = seg;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	623b      	str	r3, [r7, #32]
 800d1ee:	e03f      	b.n	800d270 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f9 f863 	bl	80062c2 <lwip_htonl>
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	f7f9 f85c 	bl	80062c2 <lwip_htonl>
 800d20a:	4603      	mov	r3, r0
 800d20c:	1ae3      	subs	r3, r4, r3
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da24      	bge.n	800d25c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3370      	adds	r3, #112	; 0x70
 800d216:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d218:	e002      	b.n	800d220 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d011      	beq.n	800d24c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	f7f9 f846 	bl	80062c2 <lwip_htonl>
 800d236:	4604      	mov	r4, r0
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	4618      	mov	r0, r3
 800d240:	f7f9 f83f 	bl	80062c2 <lwip_htonl>
 800d244:	4603      	mov	r3, r0
 800d246:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dbe6      	blt.n	800d21a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e009      	b.n	800d270 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d260:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	623b      	str	r3, [r7, #32]
 800d268:	e002      	b.n	800d270 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d26c:	f7fb ff05 	bl	800907a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d012      	beq.n	800d2a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	f7f9 f81d 	bl	80062c2 <lwip_htonl>
 800d288:	4602      	mov	r2, r0
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d292:	8912      	ldrh	r2, [r2, #8]
 800d294:	4413      	add	r3, r2
  while (seg != NULL &&
 800d296:	69ba      	ldr	r2, [r7, #24]
 800d298:	429a      	cmp	r2, r3
 800d29a:	f4bf aed9 	bcs.w	800d050 <tcp_output+0x160>
 800d29e:	e000      	b.n	800d2a2 <tcp_output+0x3b2>
      break;
 800d2a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d108      	bne.n	800d2bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d2b2:	e004      	b.n	800d2be <tcp_output+0x3ce>
    goto output_done;
 800d2b4:	bf00      	nop
 800d2b6:	e002      	b.n	800d2be <tcp_output+0x3ce>
    goto output_done;
 800d2b8:	bf00      	nop
 800d2ba:	e000      	b.n	800d2be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d2bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	8b5b      	ldrh	r3, [r3, #26]
 800d2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3728      	adds	r7, #40	; 0x28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d2d6:	bf00      	nop

0800d2d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <tcp_output_segment_busy+0x1c>
 800d2e6:	4b09      	ldr	r3, [pc, #36]	; (800d30c <tcp_output_segment_busy+0x34>)
 800d2e8:	f240 529a 	movw	r2, #1434	; 0x59a
 800d2ec:	4908      	ldr	r1, [pc, #32]	; (800d310 <tcp_output_segment_busy+0x38>)
 800d2ee:	4809      	ldr	r0, [pc, #36]	; (800d314 <tcp_output_segment_busy+0x3c>)
 800d2f0:	f009 fd12 	bl	8016d18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	7b9b      	ldrb	r3, [r3, #14]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d001      	beq.n	800d302 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	08019504 	.word	0x08019504
 800d310:	08019aa0 	.word	0x08019aa0
 800d314:	08019558 	.word	0x08019558

0800d318 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d318:	b5b0      	push	{r4, r5, r7, lr}
 800d31a:	b08c      	sub	sp, #48	; 0x30
 800d31c:	af04      	add	r7, sp, #16
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <tcp_output_segment+0x20>
 800d32a:	4b63      	ldr	r3, [pc, #396]	; (800d4b8 <tcp_output_segment+0x1a0>)
 800d32c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d330:	4962      	ldr	r1, [pc, #392]	; (800d4bc <tcp_output_segment+0x1a4>)
 800d332:	4863      	ldr	r0, [pc, #396]	; (800d4c0 <tcp_output_segment+0x1a8>)
 800d334:	f009 fcf0 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <tcp_output_segment+0x34>
 800d33e:	4b5e      	ldr	r3, [pc, #376]	; (800d4b8 <tcp_output_segment+0x1a0>)
 800d340:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d344:	495f      	ldr	r1, [pc, #380]	; (800d4c4 <tcp_output_segment+0x1ac>)
 800d346:	485e      	ldr	r0, [pc, #376]	; (800d4c0 <tcp_output_segment+0x1a8>)
 800d348:	f009 fce6 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d106      	bne.n	800d360 <tcp_output_segment+0x48>
 800d352:	4b59      	ldr	r3, [pc, #356]	; (800d4b8 <tcp_output_segment+0x1a0>)
 800d354:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d358:	495b      	ldr	r1, [pc, #364]	; (800d4c8 <tcp_output_segment+0x1b0>)
 800d35a:	4859      	ldr	r0, [pc, #356]	; (800d4c0 <tcp_output_segment+0x1a8>)
 800d35c:	f009 fcdc 	bl	8016d18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff ffb9 	bl	800d2d8 <tcp_output_segment_busy>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	e09f      	b.n	800d4b0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	68dc      	ldr	r4, [r3, #12]
 800d378:	4610      	mov	r0, r2
 800d37a:	f7f8 ffa2 	bl	80062c2 <lwip_htonl>
 800d37e:	4603      	mov	r3, r0
 800d380:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	68dc      	ldr	r4, [r3, #12]
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7f8 ff84 	bl	8006298 <lwip_htons>
 800d390:	4603      	mov	r3, r0
 800d392:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d39c:	441a      	add	r2, r3
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	3314      	adds	r3, #20
 800d3a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	7a9b      	ldrb	r3, [r3, #10]
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d015      	beq.n	800d3e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d3c2:	f7fc fa37 	bl	8009834 <tcp_eff_send_mss_netif>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d3ca:	8b7b      	ldrh	r3, [r7, #26]
 800d3cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7f8 ff76 	bl	80062c2 <lwip_htonl>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	da02      	bge.n	800d3f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10c      	bne.n	800d414 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d3fa:	4b34      	ldr	r3, [pc, #208]	; (800d4cc <tcp_output_segment+0x1b4>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7f8 ff5a 	bl	80062c2 <lwip_htonl>
 800d40e:	4602      	mov	r2, r0
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	8959      	ldrh	r1, [r3, #10]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	8b3a      	ldrh	r2, [r7, #24]
 800d42e:	1a8a      	subs	r2, r1, r2
 800d430:	b292      	uxth	r2, r2
 800d432:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	8919      	ldrh	r1, [r3, #8]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	8b3a      	ldrh	r2, [r7, #24]
 800d440:	1a8a      	subs	r2, r1, r2
 800d442:	b292      	uxth	r2, r2
 800d444:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	68d2      	ldr	r2, [r2, #12]
 800d44e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	741a      	strb	r2, [r3, #16]
 800d458:	2200      	movs	r2, #0
 800d45a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f103 0214 	add.w	r2, r3, #20
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	7a9b      	ldrb	r3, [r3, #10]
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	f003 0304 	and.w	r3, r3, #4
 800d46e:	4413      	add	r3, r2
 800d470:	69fa      	ldr	r2, [r7, #28]
 800d472:	429a      	cmp	r2, r3
 800d474:	d006      	beq.n	800d484 <tcp_output_segment+0x16c>
 800d476:	4b10      	ldr	r3, [pc, #64]	; (800d4b8 <tcp_output_segment+0x1a0>)
 800d478:	f240 621c 	movw	r2, #1564	; 0x61c
 800d47c:	4914      	ldr	r1, [pc, #80]	; (800d4d0 <tcp_output_segment+0x1b8>)
 800d47e:	4810      	ldr	r0, [pc, #64]	; (800d4c0 <tcp_output_segment+0x1a8>)
 800d480:	f009 fc4a 	bl	8016d18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6858      	ldr	r0, [r3, #4]
 800d488:	68b9      	ldr	r1, [r7, #8]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	1d1c      	adds	r4, r3, #4
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	7add      	ldrb	r5, [r3, #11]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	7a9b      	ldrb	r3, [r3, #10]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	9202      	str	r2, [sp, #8]
 800d49a:	2206      	movs	r2, #6
 800d49c:	9201      	str	r2, [sp, #4]
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	f002 fa36 	bl	800f914 <ip4_output_if>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d4ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3720      	adds	r7, #32
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d4b8:	08019504 	.word	0x08019504
 800d4bc:	08019ac8 	.word	0x08019ac8
 800d4c0:	08019558 	.word	0x08019558
 800d4c4:	08019ae8 	.word	0x08019ae8
 800d4c8:	08019b08 	.word	0x08019b08
 800d4cc:	20006970 	.word	0x20006970
 800d4d0:	08019b2c 	.word	0x08019b2c

0800d4d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d4d4:	b5b0      	push	{r4, r5, r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <tcp_rexmit_rto_prepare+0x1c>
 800d4e2:	4b31      	ldr	r3, [pc, #196]	; (800d5a8 <tcp_rexmit_rto_prepare+0xd4>)
 800d4e4:	f240 6263 	movw	r2, #1635	; 0x663
 800d4e8:	4930      	ldr	r1, [pc, #192]	; (800d5ac <tcp_rexmit_rto_prepare+0xd8>)
 800d4ea:	4831      	ldr	r0, [pc, #196]	; (800d5b0 <tcp_rexmit_rto_prepare+0xdc>)
 800d4ec:	f009 fc14 	bl	8016d18 <iprintf>

  if (pcb->unacked == NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d4f8:	f06f 0305 	mvn.w	r3, #5
 800d4fc:	e050      	b.n	800d5a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e00b      	b.n	800d51e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f7ff fee6 	bl	800d2d8 <tcp_output_segment_busy>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d512:	f06f 0305 	mvn.w	r3, #5
 800d516:	e043      	b.n	800d5a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1ef      	bne.n	800d506 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff fed6 	bl	800d2d8 <tcp_output_segment_busy>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d532:	f06f 0305 	mvn.w	r3, #5
 800d536:	e033      	b.n	800d5a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	8b5b      	ldrh	r3, [r3, #26]
 800d552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d556:	b29a      	uxth	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f8 fead 	bl	80062c2 <lwip_htonl>
 800d568:	4604      	mov	r4, r0
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	891b      	ldrh	r3, [r3, #8]
 800d56e:	461d      	mov	r5, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	899b      	ldrh	r3, [r3, #12]
 800d576:	b29b      	uxth	r3, r3
 800d578:	4618      	mov	r0, r3
 800d57a:	f7f8 fe8d 	bl	8006298 <lwip_htons>
 800d57e:	4603      	mov	r3, r0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f003 0303 	and.w	r3, r3, #3
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <tcp_rexmit_rto_prepare+0xba>
 800d58a:	2301      	movs	r3, #1
 800d58c:	e000      	b.n	800d590 <tcp_rexmit_rto_prepare+0xbc>
 800d58e:	2300      	movs	r3, #0
 800d590:	442b      	add	r3, r5
 800d592:	18e2      	adds	r2, r4, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a8:	08019504 	.word	0x08019504
 800d5ac:	08019b40 	.word	0x08019b40
 800d5b0:	08019558 	.word	0x08019558

0800d5b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <tcp_rexmit_rto_commit+0x1c>
 800d5c2:	4b0d      	ldr	r3, [pc, #52]	; (800d5f8 <tcp_rexmit_rto_commit+0x44>)
 800d5c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d5c8:	490c      	ldr	r1, [pc, #48]	; (800d5fc <tcp_rexmit_rto_commit+0x48>)
 800d5ca:	480d      	ldr	r0, [pc, #52]	; (800d600 <tcp_rexmit_rto_commit+0x4c>)
 800d5cc:	f009 fba4 	bl	8016d18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5d6:	2bff      	cmp	r3, #255	; 0xff
 800d5d8:	d007      	beq.n	800d5ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff fc80 	bl	800cef0 <tcp_output>
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	08019504 	.word	0x08019504
 800d5fc:	08019b64 	.word	0x08019b64
 800d600:	08019558 	.word	0x08019558

0800d604 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d106      	bne.n	800d620 <tcp_rexmit_rto+0x1c>
 800d612:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <tcp_rexmit_rto+0x38>)
 800d614:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d618:	4909      	ldr	r1, [pc, #36]	; (800d640 <tcp_rexmit_rto+0x3c>)
 800d61a:	480a      	ldr	r0, [pc, #40]	; (800d644 <tcp_rexmit_rto+0x40>)
 800d61c:	f009 fb7c 	bl	8016d18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff ff57 	bl	800d4d4 <tcp_rexmit_rto_prepare>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff ffc1 	bl	800d5b4 <tcp_rexmit_rto_commit>
  }
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	08019504 	.word	0x08019504
 800d640:	08019b88 	.word	0x08019b88
 800d644:	08019558 	.word	0x08019558

0800d648 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <tcp_rexmit+0x1c>
 800d656:	4b2f      	ldr	r3, [pc, #188]	; (800d714 <tcp_rexmit+0xcc>)
 800d658:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d65c:	492e      	ldr	r1, [pc, #184]	; (800d718 <tcp_rexmit+0xd0>)
 800d65e:	482f      	ldr	r0, [pc, #188]	; (800d71c <tcp_rexmit+0xd4>)
 800d660:	f009 fb5a 	bl	8016d18 <iprintf>

  if (pcb->unacked == NULL) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d66c:	f06f 0305 	mvn.w	r3, #5
 800d670:	e04c      	b.n	800d70c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d676:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d678:	68b8      	ldr	r0, [r7, #8]
 800d67a:	f7ff fe2d 	bl	800d2d8 <tcp_output_segment_busy>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d684:	f06f 0305 	mvn.w	r3, #5
 800d688:	e040      	b.n	800d70c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	336c      	adds	r3, #108	; 0x6c
 800d696:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d698:	e002      	b.n	800d6a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d011      	beq.n	800d6cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f8 fe06 	bl	80062c2 <lwip_htonl>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7f8 fdff 	bl	80062c2 <lwip_htonl>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	dbe6      	blt.n	800d69a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d103      	bne.n	800d6ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6f0:	2bff      	cmp	r3, #255	; 0xff
 800d6f2:	d007      	beq.n	800d704 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	bd90      	pop	{r4, r7, pc}
 800d714:	08019504 	.word	0x08019504
 800d718:	08019ba4 	.word	0x08019ba4
 800d71c:	08019558 	.word	0x08019558

0800d720 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <tcp_rexmit_fast+0x1c>
 800d72e:	4b2a      	ldr	r3, [pc, #168]	; (800d7d8 <tcp_rexmit_fast+0xb8>)
 800d730:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d734:	4929      	ldr	r1, [pc, #164]	; (800d7dc <tcp_rexmit_fast+0xbc>)
 800d736:	482a      	ldr	r0, [pc, #168]	; (800d7e0 <tcp_rexmit_fast+0xc0>)
 800d738:	f009 faee 	bl	8016d18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d740:	2b00      	cmp	r3, #0
 800d742:	d045      	beq.n	800d7d0 <tcp_rexmit_fast+0xb0>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	8b5b      	ldrh	r3, [r3, #26]
 800d748:	f003 0304 	and.w	r3, r3, #4
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d13f      	bne.n	800d7d0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff ff79 	bl	800d648 <tcp_rexmit>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d139      	bne.n	800d7d0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d768:	4293      	cmp	r3, r2
 800d76a:	bf28      	it	cs
 800d76c:	4613      	movcs	r3, r2
 800d76e:	b29b      	uxth	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	da00      	bge.n	800d776 <tcp_rexmit_fast+0x56>
 800d774:	3301      	adds	r3, #1
 800d776:	105b      	asrs	r3, r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d786:	461a      	mov	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	429a      	cmp	r2, r3
 800d790:	d206      	bcs.n	800d7a0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	b29a      	uxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	0049      	lsls	r1, r1, #1
 800d7ae:	440b      	add	r3, r1
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8b5b      	ldrh	r3, [r3, #26]
 800d7c0:	f043 0304 	orr.w	r3, r3, #4
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	08019504 	.word	0x08019504
 800d7dc:	08019bbc 	.word	0x08019bbc
 800d7e0:	08019558 	.word	0x08019558

0800d7e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	817b      	strh	r3, [r7, #10]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d7f6:	897a      	ldrh	r2, [r7, #10]
 800d7f8:	893b      	ldrh	r3, [r7, #8]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	3314      	adds	r3, #20
 800d800:	b29b      	uxth	r3, r3
 800d802:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d806:	4619      	mov	r1, r3
 800d808:	2022      	movs	r0, #34	; 0x22
 800d80a:	f7f9 fd15 	bl	8007238 <pbuf_alloc>
 800d80e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d04d      	beq.n	800d8b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d816:	897b      	ldrh	r3, [r7, #10]
 800d818:	3313      	adds	r3, #19
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	8952      	ldrh	r2, [r2, #10]
 800d81e:	4293      	cmp	r3, r2
 800d820:	db06      	blt.n	800d830 <tcp_output_alloc_header_common+0x4c>
 800d822:	4b26      	ldr	r3, [pc, #152]	; (800d8bc <tcp_output_alloc_header_common+0xd8>)
 800d824:	f240 7223 	movw	r2, #1827	; 0x723
 800d828:	4925      	ldr	r1, [pc, #148]	; (800d8c0 <tcp_output_alloc_header_common+0xdc>)
 800d82a:	4826      	ldr	r0, [pc, #152]	; (800d8c4 <tcp_output_alloc_header_common+0xe0>)
 800d82c:	f009 fa74 	bl	8016d18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d836:	8c3b      	ldrh	r3, [r7, #32]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7f8 fd2d 	bl	8006298 <lwip_htons>
 800d83e:	4603      	mov	r3, r0
 800d840:	461a      	mov	r2, r3
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f8 fd25 	bl	8006298 <lwip_htons>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7f8 fd30 	bl	80062c2 <lwip_htonl>
 800d862:	4602      	mov	r2, r0
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d868:	897b      	ldrh	r3, [r7, #10]
 800d86a:	089b      	lsrs	r3, r3, #2
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3305      	adds	r3, #5
 800d870:	b29b      	uxth	r3, r3
 800d872:	031b      	lsls	r3, r3, #12
 800d874:	b29a      	uxth	r2, r3
 800d876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29b      	uxth	r3, r3
 800d880:	4618      	mov	r0, r3
 800d882:	f7f8 fd09 	bl	8006298 <lwip_htons>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d88e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d890:	4618      	mov	r0, r3
 800d892:	f7f8 fd01 	bl	8006298 <lwip_htons>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	741a      	strb	r2, [r3, #16]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	749a      	strb	r2, [r3, #18]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d8b2:	697b      	ldr	r3, [r7, #20]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	08019504 	.word	0x08019504
 800d8c0:	08019bdc 	.word	0x08019bdc
 800d8c4:	08019558 	.word	0x08019558

0800d8c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d8c8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ca:	b08a      	sub	sp, #40	; 0x28
 800d8cc:	af04      	add	r7, sp, #16
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	607b      	str	r3, [r7, #4]
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	817b      	strh	r3, [r7, #10]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <tcp_output_alloc_header+0x26>
 800d8e0:	4b15      	ldr	r3, [pc, #84]	; (800d938 <tcp_output_alloc_header+0x70>)
 800d8e2:	f240 7242 	movw	r2, #1858	; 0x742
 800d8e6:	4915      	ldr	r1, [pc, #84]	; (800d93c <tcp_output_alloc_header+0x74>)
 800d8e8:	4815      	ldr	r0, [pc, #84]	; (800d940 <tcp_output_alloc_header+0x78>)
 800d8ea:	f009 fa15 	bl	8016d18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	8adb      	ldrh	r3, [r3, #22]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	8b12      	ldrh	r2, [r2, #24]
 800d8fa:	68f9      	ldr	r1, [r7, #12]
 800d8fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d8fe:	893d      	ldrh	r5, [r7, #8]
 800d900:	897c      	ldrh	r4, [r7, #10]
 800d902:	9103      	str	r1, [sp, #12]
 800d904:	2110      	movs	r1, #16
 800d906:	9102      	str	r1, [sp, #8]
 800d908:	9201      	str	r2, [sp, #4]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	462a      	mov	r2, r5
 800d910:	4621      	mov	r1, r4
 800d912:	f7ff ff67 	bl	800d7e4 <tcp_output_alloc_header_common>
 800d916:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d006      	beq.n	800d92c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d926:	441a      	add	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d92c:	697b      	ldr	r3, [r7, #20]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bdb0      	pop	{r4, r5, r7, pc}
 800d936:	bf00      	nop
 800d938:	08019504 	.word	0x08019504
 800d93c:	08019c0c 	.word	0x08019c0c
 800d940:	08019558 	.word	0x08019558

0800d944 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	4611      	mov	r1, r2
 800d950:	461a      	mov	r2, r3
 800d952:	460b      	mov	r3, r1
 800d954:	71fb      	strb	r3, [r7, #7]
 800d956:	4613      	mov	r3, r2
 800d958:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <tcp_output_fill_options+0x2e>
 800d964:	4b13      	ldr	r3, [pc, #76]	; (800d9b4 <tcp_output_fill_options+0x70>)
 800d966:	f240 7256 	movw	r2, #1878	; 0x756
 800d96a:	4913      	ldr	r1, [pc, #76]	; (800d9b8 <tcp_output_fill_options+0x74>)
 800d96c:	4813      	ldr	r0, [pc, #76]	; (800d9bc <tcp_output_fill_options+0x78>)
 800d96e:	f009 f9d3 	bl	8016d18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	3314      	adds	r3, #20
 800d97c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	f103 0214 	add.w	r2, r3, #20
 800d984:	8bfb      	ldrh	r3, [r7, #30]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4619      	mov	r1, r3
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	f003 0304 	and.w	r3, r3, #4
 800d992:	440b      	add	r3, r1
 800d994:	4413      	add	r3, r2
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d006      	beq.n	800d9aa <tcp_output_fill_options+0x66>
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <tcp_output_fill_options+0x70>)
 800d99e:	f240 7275 	movw	r2, #1909	; 0x775
 800d9a2:	4907      	ldr	r1, [pc, #28]	; (800d9c0 <tcp_output_fill_options+0x7c>)
 800d9a4:	4805      	ldr	r0, [pc, #20]	; (800d9bc <tcp_output_fill_options+0x78>)
 800d9a6:	f009 f9b7 	bl	8016d18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d9aa:	bf00      	nop
 800d9ac:	3720      	adds	r7, #32
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08019504 	.word	0x08019504
 800d9b8:	08019c34 	.word	0x08019c34
 800d9bc:	08019558 	.word	0x08019558
 800d9c0:	08019b2c 	.word	0x08019b2c

0800d9c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	; 0x28
 800d9c8:	af04      	add	r7, sp, #16
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <tcp_output_control_segment+0x22>
 800d9d8:	4b1c      	ldr	r3, [pc, #112]	; (800da4c <tcp_output_control_segment+0x88>)
 800d9da:	f240 7287 	movw	r2, #1927	; 0x787
 800d9de:	491c      	ldr	r1, [pc, #112]	; (800da50 <tcp_output_control_segment+0x8c>)
 800d9e0:	481c      	ldr	r0, [pc, #112]	; (800da54 <tcp_output_control_segment+0x90>)
 800d9e2:	f009 f999 	bl	8016d18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7fe fae8 	bl	800bfc0 <tcp_route>
 800d9f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d9f8:	23fc      	movs	r3, #252	; 0xfc
 800d9fa:	75fb      	strb	r3, [r7, #23]
 800d9fc:	e01c      	b.n	800da38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d006      	beq.n	800da12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	7adb      	ldrb	r3, [r3, #11]
 800da08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	7a9b      	ldrb	r3, [r3, #10]
 800da0e:	757b      	strb	r3, [r7, #21]
 800da10:	e003      	b.n	800da1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da12:	23ff      	movs	r3, #255	; 0xff
 800da14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da1a:	7dba      	ldrb	r2, [r7, #22]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	9302      	str	r3, [sp, #8]
 800da20:	2306      	movs	r3, #6
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	7d7b      	ldrb	r3, [r7, #21]
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	4613      	mov	r3, r2
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	6879      	ldr	r1, [r7, #4]
 800da2e:	68b8      	ldr	r0, [r7, #8]
 800da30:	f001 ff70 	bl	800f914 <ip4_output_if>
 800da34:	4603      	mov	r3, r0
 800da36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da38:	68b8      	ldr	r0, [r7, #8]
 800da3a:	f7f9 fee1 	bl	8007800 <pbuf_free>
  return err;
 800da3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	08019504 	.word	0x08019504
 800da50:	08019c5c 	.word	0x08019c5c
 800da54:	08019558 	.word	0x08019558

0800da58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b08b      	sub	sp, #44	; 0x2c
 800da5c:	af04      	add	r7, sp, #16
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d106      	bne.n	800da7a <tcp_rst+0x22>
 800da6c:	4b1f      	ldr	r3, [pc, #124]	; (800daec <tcp_rst+0x94>)
 800da6e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800da72:	491f      	ldr	r1, [pc, #124]	; (800daf0 <tcp_rst+0x98>)
 800da74:	481f      	ldr	r0, [pc, #124]	; (800daf4 <tcp_rst+0x9c>)
 800da76:	f009 f94f 	bl	8016d18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d106      	bne.n	800da8e <tcp_rst+0x36>
 800da80:	4b1a      	ldr	r3, [pc, #104]	; (800daec <tcp_rst+0x94>)
 800da82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800da86:	491c      	ldr	r1, [pc, #112]	; (800daf8 <tcp_rst+0xa0>)
 800da88:	481a      	ldr	r0, [pc, #104]	; (800daf4 <tcp_rst+0x9c>)
 800da8a:	f009 f945 	bl	8016d18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da8e:	2300      	movs	r3, #0
 800da90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800da92:	f246 0308 	movw	r3, #24584	; 0x6008
 800da96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800da98:	7dfb      	ldrb	r3, [r7, #23]
 800da9a:	b29c      	uxth	r4, r3
 800da9c:	68b8      	ldr	r0, [r7, #8]
 800da9e:	f7f8 fc10 	bl	80062c2 <lwip_htonl>
 800daa2:	4602      	mov	r2, r0
 800daa4:	8abb      	ldrh	r3, [r7, #20]
 800daa6:	9303      	str	r3, [sp, #12]
 800daa8:	2314      	movs	r3, #20
 800daaa:	9302      	str	r3, [sp, #8]
 800daac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800daae:	9301      	str	r3, [sp, #4]
 800dab0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	4613      	mov	r3, r2
 800dab6:	2200      	movs	r2, #0
 800dab8:	4621      	mov	r1, r4
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff fe92 	bl	800d7e4 <tcp_output_alloc_header_common>
 800dac0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00c      	beq.n	800dae2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	2200      	movs	r2, #0
 800dacc:	6939      	ldr	r1, [r7, #16]
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f7ff ff38 	bl	800d944 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	6939      	ldr	r1, [r7, #16]
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7ff ff72 	bl	800d9c4 <tcp_output_control_segment>
 800dae0:	e000      	b.n	800dae4 <tcp_rst+0x8c>
    return;
 800dae2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dae4:	371c      	adds	r7, #28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd90      	pop	{r4, r7, pc}
 800daea:	bf00      	nop
 800daec:	08019504 	.word	0x08019504
 800daf0:	08019c88 	.word	0x08019c88
 800daf4:	08019558 	.word	0x08019558
 800daf8:	08019ca4 	.word	0x08019ca4

0800dafc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dafc:	b590      	push	{r4, r7, lr}
 800dafe:	b087      	sub	sp, #28
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_send_empty_ack+0x24>
 800db12:	4b28      	ldr	r3, [pc, #160]	; (800dbb4 <tcp_send_empty_ack+0xb8>)
 800db14:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800db18:	4927      	ldr	r1, [pc, #156]	; (800dbb8 <tcp_send_empty_ack+0xbc>)
 800db1a:	4828      	ldr	r0, [pc, #160]	; (800dbbc <tcp_send_empty_ack+0xc0>)
 800db1c:	f009 f8fc 	bl	8016d18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	b2db      	uxtb	r3, r3
 800db26:	f003 0304 	and.w	r3, r3, #4
 800db2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db2c:	7d7b      	ldrb	r3, [r7, #21]
 800db2e:	b29c      	uxth	r4, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db34:	4618      	mov	r0, r3
 800db36:	f7f8 fbc4 	bl	80062c2 <lwip_htonl>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2200      	movs	r2, #0
 800db3e:	4621      	mov	r1, r4
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff fec1 	bl	800d8c8 <tcp_output_alloc_header>
 800db46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d109      	bne.n	800db62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	8b5b      	ldrh	r3, [r3, #26]
 800db52:	f043 0303 	orr.w	r3, r3, #3
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800db5c:	f06f 0301 	mvn.w	r3, #1
 800db60:	e023      	b.n	800dbaa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800db62:	7dbb      	ldrb	r3, [r7, #22]
 800db64:	7dfa      	ldrb	r2, [r7, #23]
 800db66:	6939      	ldr	r1, [r7, #16]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff feeb 	bl	800d944 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	6939      	ldr	r1, [r7, #16]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff ff24 	bl	800d9c4 <tcp_output_control_segment>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800db80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	8b5b      	ldrh	r3, [r3, #26]
 800db8c:	f043 0303 	orr.w	r3, r3, #3
 800db90:	b29a      	uxth	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	835a      	strh	r2, [r3, #26]
 800db96:	e006      	b.n	800dba6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	8b5b      	ldrh	r3, [r3, #26]
 800db9c:	f023 0303 	bic.w	r3, r3, #3
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd90      	pop	{r4, r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	08019504 	.word	0x08019504
 800dbb8:	08019cc0 	.word	0x08019cc0
 800dbbc:	08019558 	.word	0x08019558

0800dbc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d106      	bne.n	800dbe0 <tcp_keepalive+0x20>
 800dbd2:	4b18      	ldr	r3, [pc, #96]	; (800dc34 <tcp_keepalive+0x74>)
 800dbd4:	f640 0224 	movw	r2, #2084	; 0x824
 800dbd8:	4917      	ldr	r1, [pc, #92]	; (800dc38 <tcp_keepalive+0x78>)
 800dbda:	4818      	ldr	r0, [pc, #96]	; (800dc3c <tcp_keepalive+0x7c>)
 800dbdc:	f009 f89c 	bl	8016d18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dbe0:	7dfb      	ldrb	r3, [r7, #23]
 800dbe2:	b29c      	uxth	r4, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f8 fb69 	bl	80062c2 <lwip_htonl>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fe66 	bl	800d8c8 <tcp_output_alloc_header>
 800dbfc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	e010      	b.n	800dc2c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc0a:	7dfb      	ldrb	r3, [r7, #23]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	6939      	ldr	r1, [r7, #16]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff fe97 	bl	800d944 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	6939      	ldr	r1, [r7, #16]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fed0 	bl	800d9c4 <tcp_output_control_segment>
 800dc24:	4603      	mov	r3, r0
 800dc26:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	371c      	adds	r7, #28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	08019504 	.word	0x08019504
 800dc38:	08019ce0 	.word	0x08019ce0
 800dc3c:	08019558 	.word	0x08019558

0800dc40 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc40:	b590      	push	{r4, r7, lr}
 800dc42:	b08b      	sub	sp, #44	; 0x2c
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d106      	bne.n	800dc62 <tcp_zero_window_probe+0x22>
 800dc54:	4b4c      	ldr	r3, [pc, #304]	; (800dd88 <tcp_zero_window_probe+0x148>)
 800dc56:	f640 024f 	movw	r2, #2127	; 0x84f
 800dc5a:	494c      	ldr	r1, [pc, #304]	; (800dd8c <tcp_zero_window_probe+0x14c>)
 800dc5c:	484c      	ldr	r0, [pc, #304]	; (800dd90 <tcp_zero_window_probe+0x150>)
 800dc5e:	f009 f85b 	bl	8016d18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc66:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e086      	b.n	800dd80 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dc78:	2bff      	cmp	r3, #255	; 0xff
 800dc7a:	d007      	beq.n	800dc8c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dc82:	3301      	adds	r3, #1
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	899b      	ldrh	r3, [r3, #12]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7f8 faff 	bl	8006298 <lwip_htons>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d005      	beq.n	800dcb2 <tcp_zero_window_probe+0x72>
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	891b      	ldrh	r3, [r3, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <tcp_zero_window_probe+0x72>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e000      	b.n	800dcb4 <tcp_zero_window_probe+0x74>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dcb6:	7ffb      	ldrb	r3, [r7, #31]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	bf0c      	ite	eq
 800dcbc:	2301      	moveq	r3, #1
 800dcbe:	2300      	movne	r3, #0
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcc8:	b299      	uxth	r1, r3
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	8bba      	ldrh	r2, [r7, #28]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7ff fdf8 	bl	800d8c8 <tcp_output_alloc_header>
 800dcd8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d102      	bne.n	800dce6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dce0:	f04f 33ff 	mov.w	r3, #4294967295
 800dce4:	e04c      	b.n	800dd80 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dcec:	7ffb      	ldrb	r3, [r7, #31]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d011      	beq.n	800dd16 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	899b      	ldrh	r3, [r3, #12]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	b21b      	sxth	r3, r3
 800dcfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dcfe:	b21c      	sxth	r4, r3
 800dd00:	2011      	movs	r0, #17
 800dd02:	f7f8 fac9 	bl	8006298 <lwip_htons>
 800dd06:	4603      	mov	r3, r0
 800dd08:	b21b      	sxth	r3, r3
 800dd0a:	4323      	orrs	r3, r4
 800dd0c:	b21b      	sxth	r3, r3
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	819a      	strh	r2, [r3, #12]
 800dd14:	e010      	b.n	800dd38 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	3314      	adds	r3, #20
 800dd1c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	6858      	ldr	r0, [r3, #4]
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	891a      	ldrh	r2, [r3, #8]
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	891b      	ldrh	r3, [r3, #8]
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	2201      	movs	r2, #1
 800dd32:	6939      	ldr	r1, [r7, #16]
 800dd34:	f7f9 ff5e 	bl	8007bf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f8 fabf 	bl	80062c2 <lwip_htonl>
 800dd44:	4603      	mov	r3, r0
 800dd46:	3301      	adds	r3, #1
 800dd48:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	da02      	bge.n	800dd5c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd60:	2200      	movs	r2, #0
 800dd62:	69b9      	ldr	r1, [r7, #24]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fded 	bl	800d944 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	69b9      	ldr	r1, [r7, #24]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fe26 	bl	800d9c4 <tcp_output_control_segment>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	372c      	adds	r7, #44	; 0x2c
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd90      	pop	{r4, r7, pc}
 800dd88:	08019504 	.word	0x08019504
 800dd8c:	08019cfc 	.word	0x08019cfc
 800dd90:	08019558 	.word	0x08019558

0800dd94 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dd9c:	f7fa f818 	bl	8007dd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dda0:	4b0a      	ldr	r3, [pc, #40]	; (800ddcc <tcpip_tcp_timer+0x38>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d103      	bne.n	800ddb0 <tcpip_tcp_timer+0x1c>
 800dda8:	4b09      	ldr	r3, [pc, #36]	; (800ddd0 <tcpip_tcp_timer+0x3c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d005      	beq.n	800ddbc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4908      	ldr	r1, [pc, #32]	; (800ddd4 <tcpip_tcp_timer+0x40>)
 800ddb4:	20fa      	movs	r0, #250	; 0xfa
 800ddb6:	f000 f8f3 	bl	800dfa0 <sys_timeout>
 800ddba:	e003      	b.n	800ddc4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <tcpip_tcp_timer+0x44>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]
  }
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	2000696c 	.word	0x2000696c
 800ddd0:	2000697c 	.word	0x2000697c
 800ddd4:	0800dd95 	.word	0x0800dd95
 800ddd8:	2000010c 	.word	0x2000010c

0800dddc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <tcp_timer_needed+0x30>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10f      	bne.n	800de08 <tcp_timer_needed+0x2c>
 800dde8:	4b09      	ldr	r3, [pc, #36]	; (800de10 <tcp_timer_needed+0x34>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d103      	bne.n	800ddf8 <tcp_timer_needed+0x1c>
 800ddf0:	4b08      	ldr	r3, [pc, #32]	; (800de14 <tcp_timer_needed+0x38>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d007      	beq.n	800de08 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <tcp_timer_needed+0x30>)
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ddfe:	2200      	movs	r2, #0
 800de00:	4905      	ldr	r1, [pc, #20]	; (800de18 <tcp_timer_needed+0x3c>)
 800de02:	20fa      	movs	r0, #250	; 0xfa
 800de04:	f000 f8cc 	bl	800dfa0 <sys_timeout>
  }
}
 800de08:	bf00      	nop
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	2000010c 	.word	0x2000010c
 800de10:	2000696c 	.word	0x2000696c
 800de14:	2000697c 	.word	0x2000697c
 800de18:	0800dd95 	.word	0x0800dd95

0800de1c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de28:	2006      	movs	r0, #6
 800de2a:	f7f8 fe8b 	bl	8006b44 <memp_malloc>
 800de2e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d109      	bne.n	800de4a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d151      	bne.n	800dee0 <sys_timeout_abs+0xc4>
 800de3c:	4b2a      	ldr	r3, [pc, #168]	; (800dee8 <sys_timeout_abs+0xcc>)
 800de3e:	22be      	movs	r2, #190	; 0xbe
 800de40:	492a      	ldr	r1, [pc, #168]	; (800deec <sys_timeout_abs+0xd0>)
 800de42:	482b      	ldr	r0, [pc, #172]	; (800def0 <sys_timeout_abs+0xd4>)
 800de44:	f008 ff68 	bl	8016d18 <iprintf>
    return;
 800de48:	e04a      	b.n	800dee0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2200      	movs	r2, #0
 800de4e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800de62:	4b24      	ldr	r3, [pc, #144]	; (800def4 <sys_timeout_abs+0xd8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d103      	bne.n	800de72 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800de6a:	4a22      	ldr	r2, [pc, #136]	; (800def4 <sys_timeout_abs+0xd8>)
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6013      	str	r3, [r2, #0]
    return;
 800de70:	e037      	b.n	800dee2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	685a      	ldr	r2, [r3, #4]
 800de76:	4b1f      	ldr	r3, [pc, #124]	; (800def4 <sys_timeout_abs+0xd8>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	0fdb      	lsrs	r3, r3, #31
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	d007      	beq.n	800de9a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800de8a:	4b1a      	ldr	r3, [pc, #104]	; (800def4 <sys_timeout_abs+0xd8>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800de92:	4a18      	ldr	r2, [pc, #96]	; (800def4 <sys_timeout_abs+0xd8>)
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	6013      	str	r3, [r2, #0]
 800de98:	e023      	b.n	800dee2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800de9a:	4b16      	ldr	r3, [pc, #88]	; (800def4 <sys_timeout_abs+0xd8>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	e01a      	b.n	800ded8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00b      	beq.n	800dec2 <sys_timeout_abs+0xa6>
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	0fdb      	lsrs	r3, r3, #31
 800deb8:	f003 0301 	and.w	r3, r3, #1
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d007      	beq.n	800ded2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	601a      	str	r2, [r3, #0]
        break;
 800ded0:	e007      	b.n	800dee2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1e1      	bne.n	800dea2 <sys_timeout_abs+0x86>
 800dede:	e000      	b.n	800dee2 <sys_timeout_abs+0xc6>
    return;
 800dee0:	bf00      	nop
      }
    }
  }
}
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	08019d20 	.word	0x08019d20
 800deec:	08019d54 	.word	0x08019d54
 800def0:	08019d94 	.word	0x08019d94
 800def4:	20000104 	.word	0x20000104

0800def8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	4798      	blx	r3

  now = sys_now();
 800df0a:	f7f8 f937 	bl	800617c <sys_now>
 800df0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <lwip_cyclic_timer+0x5c>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4413      	add	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	0fdb      	lsrs	r3, r3, #31
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	4413      	add	r3, r2
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	4907      	ldr	r1, [pc, #28]	; (800df58 <lwip_cyclic_timer+0x60>)
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ff6e 	bl	800de1c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800df40:	e004      	b.n	800df4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	4904      	ldr	r1, [pc, #16]	; (800df58 <lwip_cyclic_timer+0x60>)
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f7ff ff68 	bl	800de1c <sys_timeout_abs>
}
 800df4c:	bf00      	nop
 800df4e:	3718      	adds	r7, #24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	20000108 	.word	0x20000108
 800df58:	0800def9 	.word	0x0800def9

0800df5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df62:	2301      	movs	r3, #1
 800df64:	607b      	str	r3, [r7, #4]
 800df66:	e00e      	b.n	800df86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df68:	4a0b      	ldr	r2, [pc, #44]	; (800df98 <sys_timeouts_init+0x3c>)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	4a08      	ldr	r2, [pc, #32]	; (800df98 <sys_timeouts_init+0x3c>)
 800df76:	4413      	add	r3, r2
 800df78:	461a      	mov	r2, r3
 800df7a:	4908      	ldr	r1, [pc, #32]	; (800df9c <sys_timeouts_init+0x40>)
 800df7c:	f000 f810 	bl	800dfa0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	3301      	adds	r3, #1
 800df84:	607b      	str	r3, [r7, #4]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d9ed      	bls.n	800df68 <sys_timeouts_init+0xc>
  }
}
 800df8c:	bf00      	nop
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	0801a98c 	.word	0x0801a98c
 800df9c:	0800def9 	.word	0x0800def9

0800dfa0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfb2:	d306      	bcc.n	800dfc2 <sys_timeout+0x22>
 800dfb4:	4b0a      	ldr	r3, [pc, #40]	; (800dfe0 <sys_timeout+0x40>)
 800dfb6:	f240 1229 	movw	r2, #297	; 0x129
 800dfba:	490a      	ldr	r1, [pc, #40]	; (800dfe4 <sys_timeout+0x44>)
 800dfbc:	480a      	ldr	r0, [pc, #40]	; (800dfe8 <sys_timeout+0x48>)
 800dfbe:	f008 feab 	bl	8016d18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dfc2:	f7f8 f8db 	bl	800617c <sys_now>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	4413      	add	r3, r2
 800dfcc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	6978      	ldr	r0, [r7, #20]
 800dfd4:	f7ff ff22 	bl	800de1c <sys_timeout_abs>
#endif
}
 800dfd8:	bf00      	nop
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	08019d20 	.word	0x08019d20
 800dfe4:	08019dbc 	.word	0x08019dbc
 800dfe8:	08019d94 	.word	0x08019d94

0800dfec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dff2:	f7f8 f8c3 	bl	800617c <sys_now>
 800dff6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dff8:	4b1a      	ldr	r3, [pc, #104]	; (800e064 <sys_check_timeouts+0x78>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <sys_check_timeouts+0x1a>
 800e002:	f7f9 f8c3 	bl	800718c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e006:	4b18      	ldr	r3, [pc, #96]	; (800e068 <sys_check_timeouts+0x7c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d022      	beq.n	800e058 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	0fdb      	lsrs	r3, r3, #31
 800e01c:	f003 0301 	and.w	r3, r3, #1
 800e020:	b2db      	uxtb	r3, r3
 800e022:	2b00      	cmp	r3, #0
 800e024:	d11a      	bne.n	800e05c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a0f      	ldr	r2, [pc, #60]	; (800e068 <sys_check_timeouts+0x7c>)
 800e02c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	4a0b      	ldr	r2, [pc, #44]	; (800e06c <sys_check_timeouts+0x80>)
 800e040:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e042:	68b9      	ldr	r1, [r7, #8]
 800e044:	2006      	movs	r0, #6
 800e046:	f7f8 fdc9 	bl	8006bdc <memp_free>
    if (handler != NULL) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d0d3      	beq.n	800dff8 <sys_check_timeouts+0xc>
      handler(arg);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6838      	ldr	r0, [r7, #0]
 800e054:	4798      	blx	r3
  do {
 800e056:	e7cf      	b.n	800dff8 <sys_check_timeouts+0xc>
      return;
 800e058:	bf00      	nop
 800e05a:	e000      	b.n	800e05e <sys_check_timeouts+0x72>
      return;
 800e05c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20006964 	.word	0x20006964
 800e068:	20000104 	.word	0x20000104
 800e06c:	20000108 	.word	0x20000108

0800e070 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e074:	f008 fede 	bl	8016e34 <rand>
 800e078:	4603      	mov	r3, r0
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e080:	b29b      	uxth	r3, r3
 800e082:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e086:	b29a      	uxth	r2, r3
 800e088:	4b01      	ldr	r3, [pc, #4]	; (800e090 <udp_init+0x20>)
 800e08a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e08c:	bf00      	nop
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	20000010 	.word	0x20000010

0800e094 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d105      	bne.n	800e0b4 <udp_input_local_match+0x20>
 800e0a8:	4b27      	ldr	r3, [pc, #156]	; (800e148 <udp_input_local_match+0xb4>)
 800e0aa:	2287      	movs	r2, #135	; 0x87
 800e0ac:	4927      	ldr	r1, [pc, #156]	; (800e14c <udp_input_local_match+0xb8>)
 800e0ae:	4828      	ldr	r0, [pc, #160]	; (800e150 <udp_input_local_match+0xbc>)
 800e0b0:	f008 fe32 	bl	8016d18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <udp_input_local_match+0x32>
 800e0ba:	4b23      	ldr	r3, [pc, #140]	; (800e148 <udp_input_local_match+0xb4>)
 800e0bc:	2288      	movs	r2, #136	; 0x88
 800e0be:	4925      	ldr	r1, [pc, #148]	; (800e154 <udp_input_local_match+0xc0>)
 800e0c0:	4823      	ldr	r0, [pc, #140]	; (800e150 <udp_input_local_match+0xbc>)
 800e0c2:	f008 fe29 	bl	8016d18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	7a1b      	ldrb	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00b      	beq.n	800e0e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	7a1a      	ldrb	r2, [r3, #8]
 800e0d2:	4b21      	ldr	r3, [pc, #132]	; (800e158 <udp_input_local_match+0xc4>)
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d001      	beq.n	800e0e6 <udp_input_local_match+0x52>
    return 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	e02b      	b.n	800e13e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d018      	beq.n	800e11e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d013      	beq.n	800e11a <udp_input_local_match+0x86>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00f      	beq.n	800e11a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0fa:	4b17      	ldr	r3, [pc, #92]	; (800e158 <udp_input_local_match+0xc4>)
 800e0fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e102:	d00a      	beq.n	800e11a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	4b13      	ldr	r3, [pc, #76]	; (800e158 <udp_input_local_match+0xc4>)
 800e10a:	695b      	ldr	r3, [r3, #20]
 800e10c:	405a      	eors	r2, r3
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	3308      	adds	r3, #8
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e116:	2b00      	cmp	r3, #0
 800e118:	d110      	bne.n	800e13c <udp_input_local_match+0xa8>
          return 1;
 800e11a:	2301      	movs	r3, #1
 800e11c:	e00f      	b.n	800e13e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d009      	beq.n	800e138 <udp_input_local_match+0xa4>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d005      	beq.n	800e138 <udp_input_local_match+0xa4>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	4b09      	ldr	r3, [pc, #36]	; (800e158 <udp_input_local_match+0xc4>)
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	429a      	cmp	r2, r3
 800e136:	d101      	bne.n	800e13c <udp_input_local_match+0xa8>
        return 1;
 800e138:	2301      	movs	r3, #1
 800e13a:	e000      	b.n	800e13e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	08019e08 	.word	0x08019e08
 800e14c:	08019e38 	.word	0x08019e38
 800e150:	08019e5c 	.word	0x08019e5c
 800e154:	08019e84 	.word	0x08019e84
 800e158:	20003428 	.word	0x20003428

0800e15c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e15c:	b590      	push	{r4, r7, lr}
 800e15e:	b08d      	sub	sp, #52	; 0x34
 800e160:	af02      	add	r7, sp, #8
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d105      	bne.n	800e17c <udp_input+0x20>
 800e170:	4b7c      	ldr	r3, [pc, #496]	; (800e364 <udp_input+0x208>)
 800e172:	22cf      	movs	r2, #207	; 0xcf
 800e174:	497c      	ldr	r1, [pc, #496]	; (800e368 <udp_input+0x20c>)
 800e176:	487d      	ldr	r0, [pc, #500]	; (800e36c <udp_input+0x210>)
 800e178:	f008 fdce 	bl	8016d18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d105      	bne.n	800e18e <udp_input+0x32>
 800e182:	4b78      	ldr	r3, [pc, #480]	; (800e364 <udp_input+0x208>)
 800e184:	22d0      	movs	r2, #208	; 0xd0
 800e186:	497a      	ldr	r1, [pc, #488]	; (800e370 <udp_input+0x214>)
 800e188:	4878      	ldr	r0, [pc, #480]	; (800e36c <udp_input+0x210>)
 800e18a:	f008 fdc5 	bl	8016d18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	895b      	ldrh	r3, [r3, #10]
 800e192:	2b07      	cmp	r3, #7
 800e194:	d803      	bhi.n	800e19e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7f9 fb32 	bl	8007800 <pbuf_free>
    goto end;
 800e19c:	e0de      	b.n	800e35c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e1a4:	4b73      	ldr	r3, [pc, #460]	; (800e374 <udp_input+0x218>)
 800e1a6:	695b      	ldr	r3, [r3, #20]
 800e1a8:	4a72      	ldr	r2, [pc, #456]	; (800e374 <udp_input+0x218>)
 800e1aa:	6812      	ldr	r2, [r2, #0]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f001 fc88 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7f8 f86a 	bl	8006298 <lwip_htons>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	885b      	ldrh	r3, [r3, #2]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7f8 f862 	bl	8006298 <lwip_htons>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1e4:	4b64      	ldr	r3, [pc, #400]	; (800e378 <udp_input+0x21c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ea:	e054      	b.n	800e296 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	8a5b      	ldrh	r3, [r3, #18]
 800e1f0:	89fa      	ldrh	r2, [r7, #14]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d14a      	bne.n	800e28c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e1f6:	7cfb      	ldrb	r3, [r7, #19]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1fe:	f7ff ff49 	bl	800e094 <udp_input_local_match>
 800e202:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e204:	2b00      	cmp	r3, #0
 800e206:	d041      	beq.n	800e28c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	7c1b      	ldrb	r3, [r3, #16]
 800e20c:	f003 0304 	and.w	r3, r3, #4
 800e210:	2b00      	cmp	r3, #0
 800e212:	d11d      	bne.n	800e250 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	e017      	b.n	800e250 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e220:	7cfb      	ldrb	r3, [r7, #19]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d014      	beq.n	800e250 <udp_input+0xf4>
 800e226:	4b53      	ldr	r3, [pc, #332]	; (800e374 <udp_input+0x218>)
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22e:	d10f      	bne.n	800e250 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	3304      	adds	r3, #4
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d008      	beq.n	800e250 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	3304      	adds	r3, #4
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d101      	bne.n	800e250 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	8a9b      	ldrh	r3, [r3, #20]
 800e254:	8a3a      	ldrh	r2, [r7, #16]
 800e256:	429a      	cmp	r2, r3
 800e258:	d118      	bne.n	800e28c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d005      	beq.n	800e26e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	4b43      	ldr	r3, [pc, #268]	; (800e374 <udp_input+0x218>)
 800e268:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d10e      	bne.n	800e28c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d014      	beq.n	800e29e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	68da      	ldr	r2, [r3, #12]
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e27c:	4b3e      	ldr	r3, [pc, #248]	; (800e378 <udp_input+0x21c>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e284:	4a3c      	ldr	r2, [pc, #240]	; (800e378 <udp_input+0x21c>)
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e28a:	e008      	b.n	800e29e <udp_input+0x142>
      }
    }

    prev = pcb;
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	627b      	str	r3, [r7, #36]	; 0x24
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1a7      	bne.n	800e1ec <udp_input+0x90>
 800e29c:	e000      	b.n	800e2a0 <udp_input+0x144>
        break;
 800e29e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <udp_input+0x14e>
    pcb = uncon_pcb;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <udp_input+0x15a>
    for_us = 1;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	76fb      	strb	r3, [r7, #27]
 800e2b4:	e00a      	b.n	800e2cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	4b2d      	ldr	r3, [pc, #180]	; (800e374 <udp_input+0x218>)
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	bf0c      	ite	eq
 800e2c4:	2301      	moveq	r3, #1
 800e2c6:	2300      	movne	r3, #0
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e2cc:	7efb      	ldrb	r3, [r7, #27]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d041      	beq.n	800e356 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e2d2:	2108      	movs	r1, #8
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f9 fa0d 	bl	80076f4 <pbuf_remove_header>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00a      	beq.n	800e2f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e2e0:	4b20      	ldr	r3, [pc, #128]	; (800e364 <udp_input+0x208>)
 800e2e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e2e6:	4925      	ldr	r1, [pc, #148]	; (800e37c <udp_input+0x220>)
 800e2e8:	4820      	ldr	r0, [pc, #128]	; (800e36c <udp_input+0x210>)
 800e2ea:	f008 fd15 	bl	8016d18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7f9 fa86 	bl	8007800 <pbuf_free>
      goto end;
 800e2f4:	e032      	b.n	800e35c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d012      	beq.n	800e322 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	699c      	ldr	r4, [r3, #24]
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	69d8      	ldr	r0, [r3, #28]
 800e30c:	8a3b      	ldrh	r3, [r7, #16]
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	4b1b      	ldr	r3, [pc, #108]	; (800e380 <udp_input+0x224>)
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e316:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e318:	e021      	b.n	800e35e <udp_input+0x202>
        pbuf_free(p);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7f9 fa70 	bl	8007800 <pbuf_free>
        goto end;
 800e320:	e01c      	b.n	800e35c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e322:	7cfb      	ldrb	r3, [r7, #19]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d112      	bne.n	800e34e <udp_input+0x1f2>
 800e328:	4b12      	ldr	r3, [pc, #72]	; (800e374 <udp_input+0x218>)
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e330:	2be0      	cmp	r3, #224	; 0xe0
 800e332:	d00c      	beq.n	800e34e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e334:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <udp_input+0x218>)
 800e336:	899b      	ldrh	r3, [r3, #12]
 800e338:	3308      	adds	r3, #8
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	b21b      	sxth	r3, r3
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7f9 fa4a 	bl	80077da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e346:	2103      	movs	r1, #3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 f89b 	bl	800f484 <icmp_dest_unreach>
      pbuf_free(p);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f9 fa56 	bl	8007800 <pbuf_free>
  return;
 800e354:	e003      	b.n	800e35e <udp_input+0x202>
    pbuf_free(p);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7f9 fa52 	bl	8007800 <pbuf_free>
  return;
 800e35c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e35e:	372c      	adds	r7, #44	; 0x2c
 800e360:	46bd      	mov	sp, r7
 800e362:	bd90      	pop	{r4, r7, pc}
 800e364:	08019e08 	.word	0x08019e08
 800e368:	08019eac 	.word	0x08019eac
 800e36c:	08019e5c 	.word	0x08019e5c
 800e370:	08019ec4 	.word	0x08019ec4
 800e374:	20003428 	.word	0x20003428
 800e378:	20006984 	.word	0x20006984
 800e37c:	08019ee0 	.word	0x08019ee0
 800e380:	20003438 	.word	0x20003438

0800e384 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d01e      	beq.n	800e3d2 <udp_netif_ip_addr_changed+0x4e>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d01a      	beq.n	800e3d2 <udp_netif_ip_addr_changed+0x4e>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d017      	beq.n	800e3d2 <udp_netif_ip_addr_changed+0x4e>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d013      	beq.n	800e3d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e3aa:	4b0d      	ldr	r3, [pc, #52]	; (800e3e0 <udp_netif_ip_addr_changed+0x5c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	e00c      	b.n	800e3cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d103      	bne.n	800e3c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1ef      	bne.n	800e3b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	20006984 	.word	0x20006984

0800e3e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e3ec:	4915      	ldr	r1, [pc, #84]	; (800e444 <etharp_free_entry+0x60>)
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	440b      	add	r3, r1
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d013      	beq.n	800e428 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e400:	4910      	ldr	r1, [pc, #64]	; (800e444 <etharp_free_entry+0x60>)
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	4613      	mov	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	4413      	add	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	440b      	add	r3, r1
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4618      	mov	r0, r3
 800e412:	f7f9 f9f5 	bl	8007800 <pbuf_free>
    arp_table[i].q = NULL;
 800e416:	490b      	ldr	r1, [pc, #44]	; (800e444 <etharp_free_entry+0x60>)
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e428:	4906      	ldr	r1, [pc, #24]	; (800e444 <etharp_free_entry+0x60>)
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	4613      	mov	r3, r2
 800e42e:	005b      	lsls	r3, r3, #1
 800e430:	4413      	add	r3, r2
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	440b      	add	r3, r1
 800e436:	3314      	adds	r3, #20
 800e438:	2200      	movs	r2, #0
 800e43a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	20000110 	.word	0x20000110

0800e448 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e44e:	2300      	movs	r3, #0
 800e450:	607b      	str	r3, [r7, #4]
 800e452:	e096      	b.n	800e582 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e454:	494f      	ldr	r1, [pc, #316]	; (800e594 <etharp_tmr+0x14c>)
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	4613      	mov	r3, r2
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	4413      	add	r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	440b      	add	r3, r1
 800e462:	3314      	adds	r3, #20
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 8086 	beq.w	800e57c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e470:	4948      	ldr	r1, [pc, #288]	; (800e594 <etharp_tmr+0x14c>)
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4613      	mov	r3, r2
 800e476:	005b      	lsls	r3, r3, #1
 800e478:	4413      	add	r3, r2
 800e47a:	00db      	lsls	r3, r3, #3
 800e47c:	440b      	add	r3, r1
 800e47e:	3312      	adds	r3, #18
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	3301      	adds	r3, #1
 800e484:	b298      	uxth	r0, r3
 800e486:	4943      	ldr	r1, [pc, #268]	; (800e594 <etharp_tmr+0x14c>)
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	4613      	mov	r3, r2
 800e48c:	005b      	lsls	r3, r3, #1
 800e48e:	4413      	add	r3, r2
 800e490:	00db      	lsls	r3, r3, #3
 800e492:	440b      	add	r3, r1
 800e494:	3312      	adds	r3, #18
 800e496:	4602      	mov	r2, r0
 800e498:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e49a:	493e      	ldr	r1, [pc, #248]	; (800e594 <etharp_tmr+0x14c>)
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	4413      	add	r3, r2
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	440b      	add	r3, r1
 800e4a8:	3312      	adds	r3, #18
 800e4aa:	881b      	ldrh	r3, [r3, #0]
 800e4ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e4b0:	d215      	bcs.n	800e4de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e4b2:	4938      	ldr	r1, [pc, #224]	; (800e594 <etharp_tmr+0x14c>)
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	4413      	add	r3, r2
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	440b      	add	r3, r1
 800e4c0:	3314      	adds	r3, #20
 800e4c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d10e      	bne.n	800e4e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e4c8:	4932      	ldr	r1, [pc, #200]	; (800e594 <etharp_tmr+0x14c>)
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	4413      	add	r3, r2
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	440b      	add	r3, r1
 800e4d6:	3312      	adds	r3, #18
 800e4d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e4da:	2b04      	cmp	r3, #4
 800e4dc:	d903      	bls.n	800e4e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7ff ff80 	bl	800e3e4 <etharp_free_entry>
 800e4e4:	e04a      	b.n	800e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e4e6:	492b      	ldr	r1, [pc, #172]	; (800e594 <etharp_tmr+0x14c>)
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	4413      	add	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	440b      	add	r3, r1
 800e4f4:	3314      	adds	r3, #20
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d10a      	bne.n	800e512 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e4fc:	4925      	ldr	r1, [pc, #148]	; (800e594 <etharp_tmr+0x14c>)
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	4613      	mov	r3, r2
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	4413      	add	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	440b      	add	r3, r1
 800e50a:	3314      	adds	r3, #20
 800e50c:	2204      	movs	r2, #4
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	e034      	b.n	800e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e512:	4920      	ldr	r1, [pc, #128]	; (800e594 <etharp_tmr+0x14c>)
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	4613      	mov	r3, r2
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	00db      	lsls	r3, r3, #3
 800e51e:	440b      	add	r3, r1
 800e520:	3314      	adds	r3, #20
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2b04      	cmp	r3, #4
 800e526:	d10a      	bne.n	800e53e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e528:	491a      	ldr	r1, [pc, #104]	; (800e594 <etharp_tmr+0x14c>)
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	4613      	mov	r3, r2
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	4413      	add	r3, r2
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	440b      	add	r3, r1
 800e536:	3314      	adds	r3, #20
 800e538:	2202      	movs	r2, #2
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	e01e      	b.n	800e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e53e:	4915      	ldr	r1, [pc, #84]	; (800e594 <etharp_tmr+0x14c>)
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4613      	mov	r3, r2
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	4413      	add	r3, r2
 800e548:	00db      	lsls	r3, r3, #3
 800e54a:	440b      	add	r3, r1
 800e54c:	3314      	adds	r3, #20
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d113      	bne.n	800e57c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e554:	490f      	ldr	r1, [pc, #60]	; (800e594 <etharp_tmr+0x14c>)
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	4613      	mov	r3, r2
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	4413      	add	r3, r2
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	440b      	add	r3, r1
 800e562:	3308      	adds	r3, #8
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	4a08      	ldr	r2, [pc, #32]	; (800e594 <etharp_tmr+0x14c>)
 800e572:	4413      	add	r3, r2
 800e574:	3304      	adds	r3, #4
 800e576:	4619      	mov	r1, r3
 800e578:	f000 fe6e 	bl	800f258 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3301      	adds	r3, #1
 800e580:	607b      	str	r3, [r7, #4]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b09      	cmp	r3, #9
 800e586:	f77f af65 	ble.w	800e454 <etharp_tmr+0xc>
      }
    }
  }
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20000110 	.word	0x20000110

0800e598 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08a      	sub	sp, #40	; 0x28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e5a6:	230a      	movs	r3, #10
 800e5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e5aa:	230a      	movs	r3, #10
 800e5ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e5ae:	230a      	movs	r3, #10
 800e5b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e5b6:	230a      	movs	r3, #10
 800e5b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	83bb      	strh	r3, [r7, #28]
 800e5be:	2300      	movs	r3, #0
 800e5c0:	837b      	strh	r3, [r7, #26]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	843b      	strh	r3, [r7, #32]
 800e5ca:	e0ae      	b.n	800e72a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e5cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5d0:	49a6      	ldr	r1, [pc, #664]	; (800e86c <etharp_find_entry+0x2d4>)
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	440b      	add	r3, r1
 800e5dc:	3314      	adds	r3, #20
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e5e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e5e6:	2b0a      	cmp	r3, #10
 800e5e8:	d105      	bne.n	800e5f6 <etharp_find_entry+0x5e>
 800e5ea:	7dfb      	ldrb	r3, [r7, #23]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e5f0:	8c3b      	ldrh	r3, [r7, #32]
 800e5f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800e5f4:	e095      	b.n	800e722 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 8092 	beq.w	800e722 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d009      	beq.n	800e618 <etharp_find_entry+0x80>
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d806      	bhi.n	800e618 <etharp_find_entry+0x80>
 800e60a:	4b99      	ldr	r3, [pc, #612]	; (800e870 <etharp_find_entry+0x2d8>)
 800e60c:	f240 1223 	movw	r2, #291	; 0x123
 800e610:	4998      	ldr	r1, [pc, #608]	; (800e874 <etharp_find_entry+0x2dc>)
 800e612:	4899      	ldr	r0, [pc, #612]	; (800e878 <etharp_find_entry+0x2e0>)
 800e614:	f008 fb80 	bl	8016d18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d020      	beq.n	800e660 <etharp_find_entry+0xc8>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6819      	ldr	r1, [r3, #0]
 800e622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e626:	4891      	ldr	r0, [pc, #580]	; (800e86c <etharp_find_entry+0x2d4>)
 800e628:	4613      	mov	r3, r2
 800e62a:	005b      	lsls	r3, r3, #1
 800e62c:	4413      	add	r3, r2
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	4403      	add	r3, r0
 800e632:	3304      	adds	r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4299      	cmp	r1, r3
 800e638:	d112      	bne.n	800e660 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00c      	beq.n	800e65a <etharp_find_entry+0xc2>
 800e640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e644:	4989      	ldr	r1, [pc, #548]	; (800e86c <etharp_find_entry+0x2d4>)
 800e646:	4613      	mov	r3, r2
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	4413      	add	r3, r2
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	440b      	add	r3, r1
 800e650:	3308      	adds	r3, #8
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	429a      	cmp	r2, r3
 800e658:	d102      	bne.n	800e660 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e65a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e65e:	e100      	b.n	800e862 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d140      	bne.n	800e6e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e666:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e66a:	4980      	ldr	r1, [pc, #512]	; (800e86c <etharp_find_entry+0x2d4>)
 800e66c:	4613      	mov	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4413      	add	r3, r2
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	440b      	add	r3, r1
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01a      	beq.n	800e6b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e67c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e680:	497a      	ldr	r1, [pc, #488]	; (800e86c <etharp_find_entry+0x2d4>)
 800e682:	4613      	mov	r3, r2
 800e684:	005b      	lsls	r3, r3, #1
 800e686:	4413      	add	r3, r2
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	440b      	add	r3, r1
 800e68c:	3312      	adds	r3, #18
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	8bba      	ldrh	r2, [r7, #28]
 800e692:	429a      	cmp	r2, r3
 800e694:	d845      	bhi.n	800e722 <etharp_find_entry+0x18a>
            old_queue = i;
 800e696:	8c3b      	ldrh	r3, [r7, #32]
 800e698:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e69a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e69e:	4973      	ldr	r1, [pc, #460]	; (800e86c <etharp_find_entry+0x2d4>)
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	440b      	add	r3, r1
 800e6aa:	3312      	adds	r3, #18
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	83bb      	strh	r3, [r7, #28]
 800e6b0:	e037      	b.n	800e722 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e6b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6b6:	496d      	ldr	r1, [pc, #436]	; (800e86c <etharp_find_entry+0x2d4>)
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	005b      	lsls	r3, r3, #1
 800e6bc:	4413      	add	r3, r2
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	440b      	add	r3, r1
 800e6c2:	3312      	adds	r3, #18
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	8b7a      	ldrh	r2, [r7, #26]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d82a      	bhi.n	800e722 <etharp_find_entry+0x18a>
            old_pending = i;
 800e6cc:	8c3b      	ldrh	r3, [r7, #32]
 800e6ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e6d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6d4:	4965      	ldr	r1, [pc, #404]	; (800e86c <etharp_find_entry+0x2d4>)
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	4413      	add	r3, r2
 800e6dc:	00db      	lsls	r3, r3, #3
 800e6de:	440b      	add	r3, r1
 800e6e0:	3312      	adds	r3, #18
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	837b      	strh	r3, [r7, #26]
 800e6e6:	e01c      	b.n	800e722 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d919      	bls.n	800e722 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6f2:	495e      	ldr	r1, [pc, #376]	; (800e86c <etharp_find_entry+0x2d4>)
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	4413      	add	r3, r2
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	440b      	add	r3, r1
 800e6fe:	3312      	adds	r3, #18
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	8b3a      	ldrh	r2, [r7, #24]
 800e704:	429a      	cmp	r2, r3
 800e706:	d80c      	bhi.n	800e722 <etharp_find_entry+0x18a>
            old_stable = i;
 800e708:	8c3b      	ldrh	r3, [r7, #32]
 800e70a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e70c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e710:	4956      	ldr	r1, [pc, #344]	; (800e86c <etharp_find_entry+0x2d4>)
 800e712:	4613      	mov	r3, r2
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	4413      	add	r3, r2
 800e718:	00db      	lsls	r3, r3, #3
 800e71a:	440b      	add	r3, r1
 800e71c:	3312      	adds	r3, #18
 800e71e:	881b      	ldrh	r3, [r3, #0]
 800e720:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e722:	8c3b      	ldrh	r3, [r7, #32]
 800e724:	3301      	adds	r3, #1
 800e726:	b29b      	uxth	r3, r3
 800e728:	843b      	strh	r3, [r7, #32]
 800e72a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e72e:	2b09      	cmp	r3, #9
 800e730:	f77f af4c 	ble.w	800e5cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e734:	7afb      	ldrb	r3, [r7, #11]
 800e736:	f003 0302 	and.w	r3, r3, #2
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d108      	bne.n	800e750 <etharp_find_entry+0x1b8>
 800e73e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e742:	2b0a      	cmp	r3, #10
 800e744:	d107      	bne.n	800e756 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e746:	7afb      	ldrb	r3, [r7, #11]
 800e748:	f003 0301 	and.w	r3, r3, #1
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d102      	bne.n	800e756 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	e085      	b.n	800e862 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e756:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e75a:	2b09      	cmp	r3, #9
 800e75c:	dc02      	bgt.n	800e764 <etharp_find_entry+0x1cc>
    i = empty;
 800e75e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e760:	843b      	strh	r3, [r7, #32]
 800e762:	e039      	b.n	800e7d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e764:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e768:	2b09      	cmp	r3, #9
 800e76a:	dc14      	bgt.n	800e796 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e774:	493d      	ldr	r1, [pc, #244]	; (800e86c <etharp_find_entry+0x2d4>)
 800e776:	4613      	mov	r3, r2
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	4413      	add	r3, r2
 800e77c:	00db      	lsls	r3, r3, #3
 800e77e:	440b      	add	r3, r1
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d018      	beq.n	800e7b8 <etharp_find_entry+0x220>
 800e786:	4b3a      	ldr	r3, [pc, #232]	; (800e870 <etharp_find_entry+0x2d8>)
 800e788:	f240 126d 	movw	r2, #365	; 0x16d
 800e78c:	493b      	ldr	r1, [pc, #236]	; (800e87c <etharp_find_entry+0x2e4>)
 800e78e:	483a      	ldr	r0, [pc, #232]	; (800e878 <etharp_find_entry+0x2e0>)
 800e790:	f008 fac2 	bl	8016d18 <iprintf>
 800e794:	e010      	b.n	800e7b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e796:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e79a:	2b09      	cmp	r3, #9
 800e79c:	dc02      	bgt.n	800e7a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e79e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7a0:	843b      	strh	r3, [r7, #32]
 800e7a2:	e009      	b.n	800e7b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e7a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e7a8:	2b09      	cmp	r3, #9
 800e7aa:	dc02      	bgt.n	800e7b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e7ac:	8bfb      	ldrh	r3, [r7, #30]
 800e7ae:	843b      	strh	r3, [r7, #32]
 800e7b0:	e002      	b.n	800e7b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b6:	e054      	b.n	800e862 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e7b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e7bc:	2b09      	cmp	r3, #9
 800e7be:	dd06      	ble.n	800e7ce <etharp_find_entry+0x236>
 800e7c0:	4b2b      	ldr	r3, [pc, #172]	; (800e870 <etharp_find_entry+0x2d8>)
 800e7c2:	f240 127f 	movw	r2, #383	; 0x17f
 800e7c6:	492e      	ldr	r1, [pc, #184]	; (800e880 <etharp_find_entry+0x2e8>)
 800e7c8:	482b      	ldr	r0, [pc, #172]	; (800e878 <etharp_find_entry+0x2e0>)
 800e7ca:	f008 faa5 	bl	8016d18 <iprintf>
    etharp_free_entry(i);
 800e7ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fe06 	bl	800e3e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e7d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e7dc:	2b09      	cmp	r3, #9
 800e7de:	dd06      	ble.n	800e7ee <etharp_find_entry+0x256>
 800e7e0:	4b23      	ldr	r3, [pc, #140]	; (800e870 <etharp_find_entry+0x2d8>)
 800e7e2:	f240 1283 	movw	r2, #387	; 0x183
 800e7e6:	4926      	ldr	r1, [pc, #152]	; (800e880 <etharp_find_entry+0x2e8>)
 800e7e8:	4823      	ldr	r0, [pc, #140]	; (800e878 <etharp_find_entry+0x2e0>)
 800e7ea:	f008 fa95 	bl	8016d18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e7ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e7f2:	491e      	ldr	r1, [pc, #120]	; (800e86c <etharp_find_entry+0x2d4>)
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	005b      	lsls	r3, r3, #1
 800e7f8:	4413      	add	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	440b      	add	r3, r1
 800e7fe:	3314      	adds	r3, #20
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d006      	beq.n	800e814 <etharp_find_entry+0x27c>
 800e806:	4b1a      	ldr	r3, [pc, #104]	; (800e870 <etharp_find_entry+0x2d8>)
 800e808:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e80c:	491d      	ldr	r1, [pc, #116]	; (800e884 <etharp_find_entry+0x2ec>)
 800e80e:	481a      	ldr	r0, [pc, #104]	; (800e878 <etharp_find_entry+0x2e0>)
 800e810:	f008 fa82 	bl	8016d18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e81a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6819      	ldr	r1, [r3, #0]
 800e822:	4812      	ldr	r0, [pc, #72]	; (800e86c <etharp_find_entry+0x2d4>)
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	4403      	add	r3, r0
 800e82e:	3304      	adds	r3, #4
 800e830:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e836:	490d      	ldr	r1, [pc, #52]	; (800e86c <etharp_find_entry+0x2d4>)
 800e838:	4613      	mov	r3, r2
 800e83a:	005b      	lsls	r3, r3, #1
 800e83c:	4413      	add	r3, r2
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	440b      	add	r3, r1
 800e842:	3312      	adds	r3, #18
 800e844:	2200      	movs	r2, #0
 800e846:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e848:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e84c:	4907      	ldr	r1, [pc, #28]	; (800e86c <etharp_find_entry+0x2d4>)
 800e84e:	4613      	mov	r3, r2
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	4413      	add	r3, r2
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	440b      	add	r3, r1
 800e858:	3308      	adds	r3, #8
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e85e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3728      	adds	r7, #40	; 0x28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	20000110 	.word	0x20000110
 800e870:	0801a16c 	.word	0x0801a16c
 800e874:	0801a1a4 	.word	0x0801a1a4
 800e878:	0801a1e4 	.word	0x0801a1e4
 800e87c:	0801a20c 	.word	0x0801a20c
 800e880:	0801a224 	.word	0x0801a224
 800e884:	0801a238 	.word	0x0801a238

0800e888 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af02      	add	r7, sp, #8
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e89c:	2b06      	cmp	r3, #6
 800e89e:	d006      	beq.n	800e8ae <etharp_update_arp_entry+0x26>
 800e8a0:	4b48      	ldr	r3, [pc, #288]	; (800e9c4 <etharp_update_arp_entry+0x13c>)
 800e8a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e8a6:	4948      	ldr	r1, [pc, #288]	; (800e9c8 <etharp_update_arp_entry+0x140>)
 800e8a8:	4848      	ldr	r0, [pc, #288]	; (800e9cc <etharp_update_arp_entry+0x144>)
 800e8aa:	f008 fa35 	bl	8016d18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d012      	beq.n	800e8da <etharp_update_arp_entry+0x52>
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00e      	beq.n	800e8da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68f9      	ldr	r1, [r7, #12]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 f8fe 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800e8c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d105      	bne.n	800e8da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e8d6:	2be0      	cmp	r3, #224	; 0xe0
 800e8d8:	d102      	bne.n	800e8e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e8da:	f06f 030f 	mvn.w	r3, #15
 800e8de:	e06c      	b.n	800e9ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	68b8      	ldr	r0, [r7, #8]
 800e8e8:	f7ff fe56 	bl	800e598 <etharp_find_entry>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e8f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da02      	bge.n	800e8fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e8f8:	8afb      	ldrh	r3, [r7, #22]
 800e8fa:	b25b      	sxtb	r3, r3
 800e8fc:	e05d      	b.n	800e9ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e8fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e902:	4933      	ldr	r1, [pc, #204]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e904:	4613      	mov	r3, r2
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	4413      	add	r3, r2
 800e90a:	00db      	lsls	r3, r3, #3
 800e90c:	440b      	add	r3, r1
 800e90e:	3314      	adds	r3, #20
 800e910:	2202      	movs	r2, #2
 800e912:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e918:	492d      	ldr	r1, [pc, #180]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e91a:	4613      	mov	r3, r2
 800e91c:	005b      	lsls	r3, r3, #1
 800e91e:	4413      	add	r3, r2
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	440b      	add	r3, r1
 800e924:	3308      	adds	r3, #8
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e92a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e92e:	4613      	mov	r3, r2
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	4413      	add	r3, r2
 800e934:	00db      	lsls	r3, r3, #3
 800e936:	3308      	adds	r3, #8
 800e938:	4a25      	ldr	r2, [pc, #148]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e93a:	4413      	add	r3, r2
 800e93c:	3304      	adds	r3, #4
 800e93e:	2206      	movs	r2, #6
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	f008 f9d2 	bl	8016cec <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e94c:	4920      	ldr	r1, [pc, #128]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e94e:	4613      	mov	r3, r2
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	4413      	add	r3, r2
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	440b      	add	r3, r1
 800e958:	3312      	adds	r3, #18
 800e95a:	2200      	movs	r2, #0
 800e95c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e95e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e962:	491b      	ldr	r1, [pc, #108]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e964:	4613      	mov	r3, r2
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4413      	add	r3, r2
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	440b      	add	r3, r1
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d021      	beq.n	800e9b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e978:	4915      	ldr	r1, [pc, #84]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e97a:	4613      	mov	r3, r2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	4413      	add	r3, r2
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	440b      	add	r3, r1
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e98c:	4910      	ldr	r1, [pc, #64]	; (800e9d0 <etharp_update_arp_entry+0x148>)
 800e98e:	4613      	mov	r3, r2
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	4413      	add	r3, r2
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	440b      	add	r3, r1
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6939      	ldr	r1, [r7, #16]
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f001 ff91 	bl	80108d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e9b2:	6938      	ldr	r0, [r7, #16]
 800e9b4:	f7f8 ff24 	bl	8007800 <pbuf_free>
  }
  return ERR_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	0801a16c 	.word	0x0801a16c
 800e9c8:	0801a264 	.word	0x0801a264
 800e9cc:	0801a1e4 	.word	0x0801a1e4
 800e9d0:	20000110 	.word	0x20000110

0800e9d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9dc:	2300      	movs	r3, #0
 800e9de:	60fb      	str	r3, [r7, #12]
 800e9e0:	e01e      	b.n	800ea20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e9e2:	4913      	ldr	r1, [pc, #76]	; (800ea30 <etharp_cleanup_netif+0x5c>)
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	4413      	add	r3, r2
 800e9ec:	00db      	lsls	r3, r3, #3
 800e9ee:	440b      	add	r3, r1
 800e9f0:	3314      	adds	r3, #20
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00e      	beq.n	800ea1a <etharp_cleanup_netif+0x46>
 800e9fc:	490c      	ldr	r1, [pc, #48]	; (800ea30 <etharp_cleanup_netif+0x5c>)
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	4613      	mov	r3, r2
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	4413      	add	r3, r2
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	440b      	add	r3, r1
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d102      	bne.n	800ea1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7ff fce5 	bl	800e3e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	60fb      	str	r3, [r7, #12]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b09      	cmp	r3, #9
 800ea24:	dddd      	ble.n	800e9e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ea26:	bf00      	nop
 800ea28:	bf00      	nop
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20000110 	.word	0x20000110

0800ea34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ea34:	b5b0      	push	{r4, r5, r7, lr}
 800ea36:	b08a      	sub	sp, #40	; 0x28
 800ea38:	af04      	add	r7, sp, #16
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d107      	bne.n	800ea54 <etharp_input+0x20>
 800ea44:	4b3d      	ldr	r3, [pc, #244]	; (800eb3c <etharp_input+0x108>)
 800ea46:	f240 228a 	movw	r2, #650	; 0x28a
 800ea4a:	493d      	ldr	r1, [pc, #244]	; (800eb40 <etharp_input+0x10c>)
 800ea4c:	483d      	ldr	r0, [pc, #244]	; (800eb44 <etharp_input+0x110>)
 800ea4e:	f008 f963 	bl	8016d18 <iprintf>
 800ea52:	e06f      	b.n	800eb34 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	881b      	ldrh	r3, [r3, #0]
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea64:	d10c      	bne.n	800ea80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ea6a:	2b06      	cmp	r3, #6
 800ea6c:	d108      	bne.n	800ea80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d104      	bne.n	800ea80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	885b      	ldrh	r3, [r3, #2]
 800ea7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ea7c:	2b08      	cmp	r3, #8
 800ea7e:	d003      	beq.n	800ea88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7f8 febd 	bl	8007800 <pbuf_free>
    return;
 800ea86:	e055      	b.n	800eb34 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	330e      	adds	r3, #14
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	3318      	adds	r3, #24
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d102      	bne.n	800eaa8 <etharp_input+0x74>
    for_us = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	75fb      	strb	r3, [r7, #23]
 800eaa6:	e009      	b.n	800eabc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	3304      	adds	r3, #4
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	bf0c      	ite	eq
 800eab4:	2301      	moveq	r3, #1
 800eab6:	2300      	movne	r3, #0
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	f103 0208 	add.w	r2, r3, #8
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <etharp_input+0x98>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e000      	b.n	800eace <etharp_input+0x9a>
 800eacc:	2302      	movs	r3, #2
 800eace:	f107 010c 	add.w	r1, r7, #12
 800ead2:	6838      	ldr	r0, [r7, #0]
 800ead4:	f7ff fed8 	bl	800e888 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	88db      	ldrh	r3, [r3, #6]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eae2:	d003      	beq.n	800eaec <etharp_input+0xb8>
 800eae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eae8:	d01e      	beq.n	800eb28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800eaea:	e020      	b.n	800eb2e <etharp_input+0xfa>
      if (for_us) {
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d01c      	beq.n	800eb2c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800eb0c:	2102      	movs	r1, #2
 800eb0e:	9103      	str	r1, [sp, #12]
 800eb10:	f107 010c 	add.w	r1, r7, #12
 800eb14:	9102      	str	r1, [sp, #8]
 800eb16:	9201      	str	r2, [sp, #4]
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	4601      	mov	r1, r0
 800eb20:	6838      	ldr	r0, [r7, #0]
 800eb22:	f000 faeb 	bl	800f0fc <etharp_raw>
      break;
 800eb26:	e001      	b.n	800eb2c <etharp_input+0xf8>
      break;
 800eb28:	bf00      	nop
 800eb2a:	e000      	b.n	800eb2e <etharp_input+0xfa>
      break;
 800eb2c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7f8 fe66 	bl	8007800 <pbuf_free>
}
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bdb0      	pop	{r4, r5, r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	0801a16c 	.word	0x0801a16c
 800eb40:	0801a2bc 	.word	0x0801a2bc
 800eb44:	0801a1e4 	.word	0x0801a1e4

0800eb48 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af02      	add	r7, sp, #8
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	4613      	mov	r3, r2
 800eb54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800eb56:	79fa      	ldrb	r2, [r7, #7]
 800eb58:	4944      	ldr	r1, [pc, #272]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	4413      	add	r3, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	440b      	add	r3, r1
 800eb64:	3314      	adds	r3, #20
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d806      	bhi.n	800eb7a <etharp_output_to_arp_index+0x32>
 800eb6c:	4b40      	ldr	r3, [pc, #256]	; (800ec70 <etharp_output_to_arp_index+0x128>)
 800eb6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eb72:	4940      	ldr	r1, [pc, #256]	; (800ec74 <etharp_output_to_arp_index+0x12c>)
 800eb74:	4840      	ldr	r0, [pc, #256]	; (800ec78 <etharp_output_to_arp_index+0x130>)
 800eb76:	f008 f8cf 	bl	8016d18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800eb7a:	79fa      	ldrb	r2, [r7, #7]
 800eb7c:	493b      	ldr	r1, [pc, #236]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	440b      	add	r3, r1
 800eb88:	3314      	adds	r3, #20
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d153      	bne.n	800ec38 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800eb90:	79fa      	ldrb	r2, [r7, #7]
 800eb92:	4936      	ldr	r1, [pc, #216]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800eb94:	4613      	mov	r3, r2
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	4413      	add	r3, r2
 800eb9a:	00db      	lsls	r3, r3, #3
 800eb9c:	440b      	add	r3, r1
 800eb9e:	3312      	adds	r3, #18
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800eba6:	d919      	bls.n	800ebdc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eba8:	79fa      	ldrb	r2, [r7, #7]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	005b      	lsls	r3, r3, #1
 800ebae:	4413      	add	r3, r2
 800ebb0:	00db      	lsls	r3, r3, #3
 800ebb2:	4a2e      	ldr	r2, [pc, #184]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ebb4:	4413      	add	r3, r2
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	4619      	mov	r1, r3
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f000 fb4c 	bl	800f258 <etharp_request>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d138      	bne.n	800ec38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ebc6:	79fa      	ldrb	r2, [r7, #7]
 800ebc8:	4928      	ldr	r1, [pc, #160]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ebca:	4613      	mov	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	4413      	add	r3, r2
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	440b      	add	r3, r1
 800ebd4:	3314      	adds	r3, #20
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	701a      	strb	r2, [r3, #0]
 800ebda:	e02d      	b.n	800ec38 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ebdc:	79fa      	ldrb	r2, [r7, #7]
 800ebde:	4923      	ldr	r1, [pc, #140]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	4413      	add	r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	440b      	add	r3, r1
 800ebea:	3312      	adds	r3, #18
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ebf2:	d321      	bcc.n	800ec38 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ebf4:	79fa      	ldrb	r2, [r7, #7]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	005b      	lsls	r3, r3, #1
 800ebfa:	4413      	add	r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	4a1b      	ldr	r2, [pc, #108]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ec00:	4413      	add	r3, r2
 800ec02:	1d19      	adds	r1, r3, #4
 800ec04:	79fa      	ldrb	r2, [r7, #7]
 800ec06:	4613      	mov	r3, r2
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	4413      	add	r3, r2
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	3308      	adds	r3, #8
 800ec10:	4a16      	ldr	r2, [pc, #88]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ec12:	4413      	add	r3, r2
 800ec14:	3304      	adds	r3, #4
 800ec16:	461a      	mov	r2, r3
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 fafb 	bl	800f214 <etharp_request_dst>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d109      	bne.n	800ec38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ec24:	79fa      	ldrb	r2, [r7, #7]
 800ec26:	4911      	ldr	r1, [pc, #68]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ec28:	4613      	mov	r3, r2
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	4413      	add	r3, r2
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	440b      	add	r3, r1
 800ec32:	3314      	adds	r3, #20
 800ec34:	2203      	movs	r2, #3
 800ec36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ec3e:	79fa      	ldrb	r2, [r7, #7]
 800ec40:	4613      	mov	r3, r2
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	3308      	adds	r3, #8
 800ec4a:	4a08      	ldr	r2, [pc, #32]	; (800ec6c <etharp_output_to_arp_index+0x124>)
 800ec4c:	4413      	add	r3, r2
 800ec4e:	3304      	adds	r3, #4
 800ec50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec54:	9200      	str	r2, [sp, #0]
 800ec56:	460a      	mov	r2, r1
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f001 fe3a 	bl	80108d4 <ethernet_output>
 800ec60:	4603      	mov	r3, r0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000110 	.word	0x20000110
 800ec70:	0801a16c 	.word	0x0801a16c
 800ec74:	0801a2dc 	.word	0x0801a2dc
 800ec78:	0801a1e4 	.word	0x0801a1e4

0800ec7c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af02      	add	r7, sp, #8
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <etharp_output+0x24>
 800ec92:	4b73      	ldr	r3, [pc, #460]	; (800ee60 <etharp_output+0x1e4>)
 800ec94:	f240 321e 	movw	r2, #798	; 0x31e
 800ec98:	4972      	ldr	r1, [pc, #456]	; (800ee64 <etharp_output+0x1e8>)
 800ec9a:	4873      	ldr	r0, [pc, #460]	; (800ee68 <etharp_output+0x1ec>)
 800ec9c:	f008 f83c 	bl	8016d18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <etharp_output+0x38>
 800eca6:	4b6e      	ldr	r3, [pc, #440]	; (800ee60 <etharp_output+0x1e4>)
 800eca8:	f240 321f 	movw	r2, #799	; 0x31f
 800ecac:	496f      	ldr	r1, [pc, #444]	; (800ee6c <etharp_output+0x1f0>)
 800ecae:	486e      	ldr	r0, [pc, #440]	; (800ee68 <etharp_output+0x1ec>)
 800ecb0:	f008 f832 	bl	8016d18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d106      	bne.n	800ecc8 <etharp_output+0x4c>
 800ecba:	4b69      	ldr	r3, [pc, #420]	; (800ee60 <etharp_output+0x1e4>)
 800ecbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ecc0:	496b      	ldr	r1, [pc, #428]	; (800ee70 <etharp_output+0x1f4>)
 800ecc2:	4869      	ldr	r0, [pc, #420]	; (800ee68 <etharp_output+0x1ec>)
 800ecc4:	f008 f828 	bl	8016d18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	68f9      	ldr	r1, [r7, #12]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 fef8 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ecda:	4b66      	ldr	r3, [pc, #408]	; (800ee74 <etharp_output+0x1f8>)
 800ecdc:	61fb      	str	r3, [r7, #28]
 800ecde:	e0af      	b.n	800ee40 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ece8:	2be0      	cmp	r3, #224	; 0xe0
 800ecea:	d118      	bne.n	800ed1e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ecec:	2301      	movs	r3, #1
 800ecee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ecf4:	235e      	movs	r3, #94	; 0x5e
 800ecf6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	3302      	adds	r3, #2
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3303      	adds	r3, #3
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ed16:	f107 0310 	add.w	r3, r7, #16
 800ed1a:	61fb      	str	r3, [r7, #28]
 800ed1c:	e090      	b.n	800ee40 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3304      	adds	r3, #4
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	405a      	eors	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4013      	ands	r3, r2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d012      	beq.n	800ed5c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ed3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d00b      	beq.n	800ed5c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	330c      	adds	r3, #12
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	330c      	adds	r3, #12
 800ed52:	61bb      	str	r3, [r7, #24]
 800ed54:	e002      	b.n	800ed5c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ed56:	f06f 0303 	mvn.w	r3, #3
 800ed5a:	e07d      	b.n	800ee58 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ed5c:	4b46      	ldr	r3, [pc, #280]	; (800ee78 <etharp_output+0x1fc>)
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	4619      	mov	r1, r3
 800ed62:	4a46      	ldr	r2, [pc, #280]	; (800ee7c <etharp_output+0x200>)
 800ed64:	460b      	mov	r3, r1
 800ed66:	005b      	lsls	r3, r3, #1
 800ed68:	440b      	add	r3, r1
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	4413      	add	r3, r2
 800ed6e:	3314      	adds	r3, #20
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d925      	bls.n	800edc2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ed76:	4b40      	ldr	r3, [pc, #256]	; (800ee78 <etharp_output+0x1fc>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	4a3f      	ldr	r2, [pc, #252]	; (800ee7c <etharp_output+0x200>)
 800ed7e:	460b      	mov	r3, r1
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	440b      	add	r3, r1
 800ed84:	00db      	lsls	r3, r3, #3
 800ed86:	4413      	add	r3, r2
 800ed88:	3308      	adds	r3, #8
 800ed8a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d117      	bne.n	800edc2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	4b38      	ldr	r3, [pc, #224]	; (800ee78 <etharp_output+0x1fc>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	4937      	ldr	r1, [pc, #220]	; (800ee7c <etharp_output+0x200>)
 800ed9e:	4603      	mov	r3, r0
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4403      	add	r3, r0
 800eda4:	00db      	lsls	r3, r3, #3
 800eda6:	440b      	add	r3, r1
 800eda8:	3304      	adds	r3, #4
 800edaa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800edac:	429a      	cmp	r2, r3
 800edae:	d108      	bne.n	800edc2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800edb0:	4b31      	ldr	r3, [pc, #196]	; (800ee78 <etharp_output+0x1fc>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	461a      	mov	r2, r3
 800edb6:	68b9      	ldr	r1, [r7, #8]
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7ff fec5 	bl	800eb48 <etharp_output_to_arp_index>
 800edbe:	4603      	mov	r3, r0
 800edc0:	e04a      	b.n	800ee58 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
 800edc6:	e031      	b.n	800ee2c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800edc8:	7dfa      	ldrb	r2, [r7, #23]
 800edca:	492c      	ldr	r1, [pc, #176]	; (800ee7c <etharp_output+0x200>)
 800edcc:	4613      	mov	r3, r2
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	4413      	add	r3, r2
 800edd2:	00db      	lsls	r3, r3, #3
 800edd4:	440b      	add	r3, r1
 800edd6:	3314      	adds	r3, #20
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d923      	bls.n	800ee26 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800edde:	7dfa      	ldrb	r2, [r7, #23]
 800ede0:	4926      	ldr	r1, [pc, #152]	; (800ee7c <etharp_output+0x200>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	3308      	adds	r3, #8
 800edee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d117      	bne.n	800ee26 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	6819      	ldr	r1, [r3, #0]
 800edfa:	7dfa      	ldrb	r2, [r7, #23]
 800edfc:	481f      	ldr	r0, [pc, #124]	; (800ee7c <etharp_output+0x200>)
 800edfe:	4613      	mov	r3, r2
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	4413      	add	r3, r2
 800ee04:	00db      	lsls	r3, r3, #3
 800ee06:	4403      	add	r3, r0
 800ee08:	3304      	adds	r3, #4
 800ee0a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ee0c:	4299      	cmp	r1, r3
 800ee0e:	d10a      	bne.n	800ee26 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ee10:	4a19      	ldr	r2, [pc, #100]	; (800ee78 <etharp_output+0x1fc>)
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7ff fe93 	bl	800eb48 <etharp_output_to_arp_index>
 800ee22:	4603      	mov	r3, r0
 800ee24:	e018      	b.n	800ee58 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	75fb      	strb	r3, [r7, #23]
 800ee2c:	7dfb      	ldrb	r3, [r7, #23]
 800ee2e:	2b09      	cmp	r3, #9
 800ee30:	d9ca      	bls.n	800edc8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ee32:	68ba      	ldr	r2, [r7, #8]
 800ee34:	69b9      	ldr	r1, [r7, #24]
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 f822 	bl	800ee80 <etharp_query>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	e00b      	b.n	800ee58 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ee46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	68b9      	ldr	r1, [r7, #8]
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f001 fd3f 	bl	80108d4 <ethernet_output>
 800ee56:	4603      	mov	r3, r0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3720      	adds	r7, #32
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	0801a16c 	.word	0x0801a16c
 800ee64:	0801a2bc 	.word	0x0801a2bc
 800ee68:	0801a1e4 	.word	0x0801a1e4
 800ee6c:	0801a30c 	.word	0x0801a30c
 800ee70:	0801a2ac 	.word	0x0801a2ac
 800ee74:	0801a9a8 	.word	0x0801a9a8
 800ee78:	20000200 	.word	0x20000200
 800ee7c:	20000110 	.word	0x20000110

0800ee80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08c      	sub	sp, #48	; 0x30
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3326      	adds	r3, #38	; 0x26
 800ee90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ee92:	23ff      	movs	r3, #255	; 0xff
 800ee94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68f9      	ldr	r1, [r7, #12]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f000 fe0e 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10c      	bne.n	800eec8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eeb6:	2be0      	cmp	r3, #224	; 0xe0
 800eeb8:	d006      	beq.n	800eec8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d003      	beq.n	800eec8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eec8:	f06f 030f 	mvn.w	r3, #15
 800eecc:	e101      	b.n	800f0d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	2101      	movs	r1, #1
 800eed2:	68b8      	ldr	r0, [r7, #8]
 800eed4:	f7ff fb60 	bl	800e598 <etharp_find_entry>
 800eed8:	4603      	mov	r3, r0
 800eeda:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	da02      	bge.n	800eeea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eee4:	8a7b      	ldrh	r3, [r7, #18]
 800eee6:	b25b      	sxtb	r3, r3
 800eee8:	e0f3      	b.n	800f0d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eeea:	8a7b      	ldrh	r3, [r7, #18]
 800eeec:	2b7e      	cmp	r3, #126	; 0x7e
 800eeee:	d906      	bls.n	800eefe <etharp_query+0x7e>
 800eef0:	4b7a      	ldr	r3, [pc, #488]	; (800f0dc <etharp_query+0x25c>)
 800eef2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eef6:	497a      	ldr	r1, [pc, #488]	; (800f0e0 <etharp_query+0x260>)
 800eef8:	487a      	ldr	r0, [pc, #488]	; (800f0e4 <etharp_query+0x264>)
 800eefa:	f007 ff0d 	bl	8016d18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eefe:	8a7b      	ldrh	r3, [r7, #18]
 800ef00:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ef02:	7c7a      	ldrb	r2, [r7, #17]
 800ef04:	4978      	ldr	r1, [pc, #480]	; (800f0e8 <etharp_query+0x268>)
 800ef06:	4613      	mov	r3, r2
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	440b      	add	r3, r1
 800ef10:	3314      	adds	r3, #20
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d115      	bne.n	800ef44 <etharp_query+0xc4>
    is_new_entry = 1;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ef1c:	7c7a      	ldrb	r2, [r7, #17]
 800ef1e:	4972      	ldr	r1, [pc, #456]	; (800f0e8 <etharp_query+0x268>)
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	440b      	add	r3, r1
 800ef2a:	3314      	adds	r3, #20
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ef30:	7c7a      	ldrb	r2, [r7, #17]
 800ef32:	496d      	ldr	r1, [pc, #436]	; (800f0e8 <etharp_query+0x268>)
 800ef34:	4613      	mov	r3, r2
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	4413      	add	r3, r2
 800ef3a:	00db      	lsls	r3, r3, #3
 800ef3c:	440b      	add	r3, r1
 800ef3e:	3308      	adds	r3, #8
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ef44:	7c7a      	ldrb	r2, [r7, #17]
 800ef46:	4968      	ldr	r1, [pc, #416]	; (800f0e8 <etharp_query+0x268>)
 800ef48:	4613      	mov	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4413      	add	r3, r2
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	440b      	add	r3, r1
 800ef52:	3314      	adds	r3, #20
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d011      	beq.n	800ef7e <etharp_query+0xfe>
 800ef5a:	7c7a      	ldrb	r2, [r7, #17]
 800ef5c:	4962      	ldr	r1, [pc, #392]	; (800f0e8 <etharp_query+0x268>)
 800ef5e:	4613      	mov	r3, r2
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	4413      	add	r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	440b      	add	r3, r1
 800ef68:	3314      	adds	r3, #20
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d806      	bhi.n	800ef7e <etharp_query+0xfe>
 800ef70:	4b5a      	ldr	r3, [pc, #360]	; (800f0dc <etharp_query+0x25c>)
 800ef72:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ef76:	495d      	ldr	r1, [pc, #372]	; (800f0ec <etharp_query+0x26c>)
 800ef78:	485a      	ldr	r0, [pc, #360]	; (800f0e4 <etharp_query+0x264>)
 800ef7a:	f007 fecd 	bl	8016d18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d102      	bne.n	800ef8a <etharp_query+0x10a>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10c      	bne.n	800efa4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ef8a:	68b9      	ldr	r1, [r7, #8]
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 f963 	bl	800f258 <etharp_request>
 800ef92:	4603      	mov	r3, r0
 800ef94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d102      	bne.n	800efa4 <etharp_query+0x124>
      return result;
 800ef9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efa2:	e096      	b.n	800f0d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <etharp_query+0x138>
 800efaa:	4b4c      	ldr	r3, [pc, #304]	; (800f0dc <etharp_query+0x25c>)
 800efac:	f240 32e1 	movw	r2, #993	; 0x3e1
 800efb0:	494f      	ldr	r1, [pc, #316]	; (800f0f0 <etharp_query+0x270>)
 800efb2:	484c      	ldr	r0, [pc, #304]	; (800f0e4 <etharp_query+0x264>)
 800efb4:	f007 feb0 	bl	8016d18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800efb8:	7c7a      	ldrb	r2, [r7, #17]
 800efba:	494b      	ldr	r1, [pc, #300]	; (800f0e8 <etharp_query+0x268>)
 800efbc:	4613      	mov	r3, r2
 800efbe:	005b      	lsls	r3, r3, #1
 800efc0:	4413      	add	r3, r2
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	440b      	add	r3, r1
 800efc6:	3314      	adds	r3, #20
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d917      	bls.n	800effe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800efce:	4a49      	ldr	r2, [pc, #292]	; (800f0f4 <etharp_query+0x274>)
 800efd0:	7c7b      	ldrb	r3, [r7, #17]
 800efd2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800efd4:	7c7a      	ldrb	r2, [r7, #17]
 800efd6:	4613      	mov	r3, r2
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	4413      	add	r3, r2
 800efdc:	00db      	lsls	r3, r3, #3
 800efde:	3308      	adds	r3, #8
 800efe0:	4a41      	ldr	r2, [pc, #260]	; (800f0e8 <etharp_query+0x268>)
 800efe2:	4413      	add	r3, r2
 800efe4:	3304      	adds	r3, #4
 800efe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efea:	9200      	str	r2, [sp, #0]
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f001 fc6f 	bl	80108d4 <ethernet_output>
 800eff6:	4603      	mov	r3, r0
 800eff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800effc:	e067      	b.n	800f0ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800effe:	7c7a      	ldrb	r2, [r7, #17]
 800f000:	4939      	ldr	r1, [pc, #228]	; (800f0e8 <etharp_query+0x268>)
 800f002:	4613      	mov	r3, r2
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	4413      	add	r3, r2
 800f008:	00db      	lsls	r3, r3, #3
 800f00a:	440b      	add	r3, r1
 800f00c:	3314      	adds	r3, #20
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d15c      	bne.n	800f0ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f01c:	e01c      	b.n	800f058 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	895a      	ldrh	r2, [r3, #10]
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	891b      	ldrh	r3, [r3, #8]
 800f026:	429a      	cmp	r2, r3
 800f028:	d10a      	bne.n	800f040 <etharp_query+0x1c0>
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d006      	beq.n	800f040 <etharp_query+0x1c0>
 800f032:	4b2a      	ldr	r3, [pc, #168]	; (800f0dc <etharp_query+0x25c>)
 800f034:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f038:	492f      	ldr	r1, [pc, #188]	; (800f0f8 <etharp_query+0x278>)
 800f03a:	482a      	ldr	r0, [pc, #168]	; (800f0e4 <etharp_query+0x264>)
 800f03c:	f007 fe6c 	bl	8016d18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	7b1b      	ldrb	r3, [r3, #12]
 800f044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <etharp_query+0x1d2>
        copy_needed = 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	61bb      	str	r3, [r7, #24]
        break;
 800f050:	e005      	b.n	800f05e <etharp_query+0x1de>
      }
      p = p->next;
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1df      	bne.n	800f01e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d007      	beq.n	800f074 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f06a:	200e      	movs	r0, #14
 800f06c:	f7f8 fe34 	bl	8007cd8 <pbuf_clone>
 800f070:	61f8      	str	r0, [r7, #28]
 800f072:	e004      	b.n	800f07e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f078:	69f8      	ldr	r0, [r7, #28]
 800f07a:	f7f8 fc61 	bl	8007940 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d021      	beq.n	800f0c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f084:	7c7a      	ldrb	r2, [r7, #17]
 800f086:	4918      	ldr	r1, [pc, #96]	; (800f0e8 <etharp_query+0x268>)
 800f088:	4613      	mov	r3, r2
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	4413      	add	r3, r2
 800f08e:	00db      	lsls	r3, r3, #3
 800f090:	440b      	add	r3, r1
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d00a      	beq.n	800f0ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f098:	7c7a      	ldrb	r2, [r7, #17]
 800f09a:	4913      	ldr	r1, [pc, #76]	; (800f0e8 <etharp_query+0x268>)
 800f09c:	4613      	mov	r3, r2
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	440b      	add	r3, r1
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f8 fba9 	bl	8007800 <pbuf_free>
      }
      arp_table[i].q = p;
 800f0ae:	7c7a      	ldrb	r2, [r7, #17]
 800f0b0:	490d      	ldr	r1, [pc, #52]	; (800f0e8 <etharp_query+0x268>)
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	440b      	add	r3, r1
 800f0bc:	69fa      	ldr	r2, [r7, #28]
 800f0be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0c6:	e002      	b.n	800f0ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f0c8:	23ff      	movs	r3, #255	; 0xff
 800f0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f0ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3728      	adds	r7, #40	; 0x28
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	0801a16c 	.word	0x0801a16c
 800f0e0:	0801a318 	.word	0x0801a318
 800f0e4:	0801a1e4 	.word	0x0801a1e4
 800f0e8:	20000110 	.word	0x20000110
 800f0ec:	0801a328 	.word	0x0801a328
 800f0f0:	0801a30c 	.word	0x0801a30c
 800f0f4:	20000200 	.word	0x20000200
 800f0f8:	0801a350 	.word	0x0801a350

0800f0fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af02      	add	r7, sp, #8
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <etharp_raw+0x26>
 800f114:	4b3a      	ldr	r3, [pc, #232]	; (800f200 <etharp_raw+0x104>)
 800f116:	f240 4257 	movw	r2, #1111	; 0x457
 800f11a:	493a      	ldr	r1, [pc, #232]	; (800f204 <etharp_raw+0x108>)
 800f11c:	483a      	ldr	r0, [pc, #232]	; (800f208 <etharp_raw+0x10c>)
 800f11e:	f007 fdfb 	bl	8016d18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f122:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f126:	211c      	movs	r1, #28
 800f128:	200e      	movs	r0, #14
 800f12a:	f7f8 f885 	bl	8007238 <pbuf_alloc>
 800f12e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d102      	bne.n	800f13c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f136:	f04f 33ff 	mov.w	r3, #4294967295
 800f13a:	e05d      	b.n	800f1f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	895b      	ldrh	r3, [r3, #10]
 800f140:	2b1b      	cmp	r3, #27
 800f142:	d806      	bhi.n	800f152 <etharp_raw+0x56>
 800f144:	4b2e      	ldr	r3, [pc, #184]	; (800f200 <etharp_raw+0x104>)
 800f146:	f240 4262 	movw	r2, #1122	; 0x462
 800f14a:	4930      	ldr	r1, [pc, #192]	; (800f20c <etharp_raw+0x110>)
 800f14c:	482e      	ldr	r0, [pc, #184]	; (800f208 <etharp_raw+0x10c>)
 800f14e:	f007 fde3 	bl	8016d18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f158:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7f7 f89c 	bl	8006298 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	461a      	mov	r2, r3
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f16e:	2b06      	cmp	r3, #6
 800f170:	d006      	beq.n	800f180 <etharp_raw+0x84>
 800f172:	4b23      	ldr	r3, [pc, #140]	; (800f200 <etharp_raw+0x104>)
 800f174:	f240 4269 	movw	r2, #1129	; 0x469
 800f178:	4925      	ldr	r1, [pc, #148]	; (800f210 <etharp_raw+0x114>)
 800f17a:	4823      	ldr	r0, [pc, #140]	; (800f208 <etharp_raw+0x10c>)
 800f17c:	f007 fdcc 	bl	8016d18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	3308      	adds	r3, #8
 800f184:	2206      	movs	r2, #6
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	4618      	mov	r0, r3
 800f18a:	f007 fdaf 	bl	8016cec <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	3312      	adds	r3, #18
 800f192:	2206      	movs	r2, #6
 800f194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f196:	4618      	mov	r0, r3
 800f198:	f007 fda8 	bl	8016cec <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	330e      	adds	r3, #14
 800f1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	3318      	adds	r3, #24
 800f1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ac:	6812      	ldr	r2, [r2, #0]
 800f1ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f042 0201 	orr.w	r2, r2, #1
 800f1bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f042 0208 	orr.w	r2, r2, #8
 800f1c6:	709a      	strb	r2, [r3, #2]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	2206      	movs	r2, #6
 800f1d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f1d8:	f640 0306 	movw	r3, #2054	; 0x806
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	69b9      	ldr	r1, [r7, #24]
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f001 fb75 	bl	80108d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f1ea:	69b8      	ldr	r0, [r7, #24]
 800f1ec:	f7f8 fb08 	bl	8007800 <pbuf_free>
  p = NULL;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f1f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3720      	adds	r7, #32
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	0801a16c 	.word	0x0801a16c
 800f204:	0801a2bc 	.word	0x0801a2bc
 800f208:	0801a1e4 	.word	0x0801a1e4
 800f20c:	0801a36c 	.word	0x0801a36c
 800f210:	0801a3a0 	.word	0x0801a3a0

0800f214 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b088      	sub	sp, #32
 800f218:	af04      	add	r7, sp, #16
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f230:	2201      	movs	r2, #1
 800f232:	9203      	str	r2, [sp, #12]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	9202      	str	r2, [sp, #8]
 800f238:	4a06      	ldr	r2, [pc, #24]	; (800f254 <etharp_request_dst+0x40>)
 800f23a:	9201      	str	r2, [sp, #4]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	4603      	mov	r3, r0
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7ff ff5a 	bl	800f0fc <etharp_raw>
 800f248:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	0801a9b0 	.word	0x0801a9b0

0800f258 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f262:	4a05      	ldr	r2, [pc, #20]	; (800f278 <etharp_request+0x20>)
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff ffd4 	bl	800f214 <etharp_request_dst>
 800f26c:	4603      	mov	r3, r0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	0801a9a8 	.word	0x0801a9a8

0800f27c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08e      	sub	sp, #56	; 0x38
 800f280:	af04      	add	r7, sp, #16
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f286:	4b79      	ldr	r3, [pc, #484]	; (800f46c <icmp_input+0x1f0>)
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 030f 	and.w	r3, r3, #15
 800f294:	b2db      	uxtb	r3, r3
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f29e:	2b13      	cmp	r3, #19
 800f2a0:	f240 80cd 	bls.w	800f43e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	895b      	ldrh	r3, [r3, #10]
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	f240 80ca 	bls.w	800f442 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f2b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f000 80b7 	beq.w	800f430 <icmp_input+0x1b4>
 800f2c2:	2b08      	cmp	r3, #8
 800f2c4:	f040 80b7 	bne.w	800f436 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f2c8:	4b69      	ldr	r3, [pc, #420]	; (800f470 <icmp_input+0x1f4>)
 800f2ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f2cc:	4b67      	ldr	r3, [pc, #412]	; (800f46c <icmp_input+0x1f0>)
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2d4:	2be0      	cmp	r3, #224	; 0xe0
 800f2d6:	f000 80bb 	beq.w	800f450 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f2da:	4b64      	ldr	r3, [pc, #400]	; (800f46c <icmp_input+0x1f0>)
 800f2dc:	695b      	ldr	r3, [r3, #20]
 800f2de:	4a63      	ldr	r2, [pc, #396]	; (800f46c <icmp_input+0x1f0>)
 800f2e0:	6812      	ldr	r2, [r2, #0]
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f000 fbed 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f040 80b1 	bne.w	800f454 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	891b      	ldrh	r3, [r3, #8]
 800f2f6:	2b07      	cmp	r3, #7
 800f2f8:	f240 80a5 	bls.w	800f446 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2fe:	330e      	adds	r3, #14
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7f8 f9e6 	bl	80076d4 <pbuf_add_header>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d04b      	beq.n	800f3a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	891a      	ldrh	r2, [r3, #8]
 800f312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f314:	4413      	add	r3, r2
 800f316:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	891b      	ldrh	r3, [r3, #8]
 800f31c:	8b7a      	ldrh	r2, [r7, #26]
 800f31e:	429a      	cmp	r2, r3
 800f320:	f0c0 809a 	bcc.w	800f458 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f324:	8b7b      	ldrh	r3, [r7, #26]
 800f326:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f32a:	4619      	mov	r1, r3
 800f32c:	200e      	movs	r0, #14
 800f32e:	f7f7 ff83 	bl	8007238 <pbuf_alloc>
 800f332:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f000 8090 	beq.w	800f45c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	895b      	ldrh	r3, [r3, #10]
 800f340:	461a      	mov	r2, r3
 800f342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f344:	3308      	adds	r3, #8
 800f346:	429a      	cmp	r2, r3
 800f348:	d203      	bcs.n	800f352 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f34a:	6978      	ldr	r0, [r7, #20]
 800f34c:	f7f8 fa58 	bl	8007800 <pbuf_free>
          goto icmperr;
 800f350:	e085      	b.n	800f45e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f35a:	4618      	mov	r0, r3
 800f35c:	f007 fcc6 	bl	8016cec <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f362:	4619      	mov	r1, r3
 800f364:	6978      	ldr	r0, [r7, #20]
 800f366:	f7f8 f9c5 	bl	80076f4 <pbuf_remove_header>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d009      	beq.n	800f384 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f370:	4b40      	ldr	r3, [pc, #256]	; (800f474 <icmp_input+0x1f8>)
 800f372:	22b6      	movs	r2, #182	; 0xb6
 800f374:	4940      	ldr	r1, [pc, #256]	; (800f478 <icmp_input+0x1fc>)
 800f376:	4841      	ldr	r0, [pc, #260]	; (800f47c <icmp_input+0x200>)
 800f378:	f007 fcce 	bl	8016d18 <iprintf>
          pbuf_free(r);
 800f37c:	6978      	ldr	r0, [r7, #20]
 800f37e:	f7f8 fa3f 	bl	8007800 <pbuf_free>
          goto icmperr;
 800f382:	e06c      	b.n	800f45e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f384:	6879      	ldr	r1, [r7, #4]
 800f386:	6978      	ldr	r0, [r7, #20]
 800f388:	f7f8 fb62 	bl	8007a50 <pbuf_copy>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d003      	beq.n	800f39a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f392:	6978      	ldr	r0, [r7, #20]
 800f394:	f7f8 fa34 	bl	8007800 <pbuf_free>
          goto icmperr;
 800f398:	e061      	b.n	800f45e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7f8 fa30 	bl	8007800 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	607b      	str	r3, [r7, #4]
 800f3a4:	e00f      	b.n	800f3c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f3a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3a8:	330e      	adds	r3, #14
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7f8 f9a1 	bl	80076f4 <pbuf_remove_header>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d006      	beq.n	800f3c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f3b8:	4b2e      	ldr	r3, [pc, #184]	; (800f474 <icmp_input+0x1f8>)
 800f3ba:	22c7      	movs	r2, #199	; 0xc7
 800f3bc:	4930      	ldr	r1, [pc, #192]	; (800f480 <icmp_input+0x204>)
 800f3be:	482f      	ldr	r0, [pc, #188]	; (800f47c <icmp_input+0x200>)
 800f3c0:	f007 fcaa 	bl	8016d18 <iprintf>
          goto icmperr;
 800f3c4:	e04b      	b.n	800f45e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f3cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7f8 f97f 	bl	80076d4 <pbuf_add_header>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d12b      	bne.n	800f434 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f3ea:	4b20      	ldr	r3, [pc, #128]	; (800f46c <icmp_input+0x1f0>)
 800f3ec:	691a      	ldr	r2, [r3, #16]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	709a      	strb	r2, [r3, #2]
 800f3fe:	2200      	movs	r2, #0
 800f400:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	22ff      	movs	r2, #255	; 0xff
 800f406:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	729a      	strb	r2, [r3, #10]
 800f40e:	2200      	movs	r2, #0
 800f410:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	9302      	str	r3, [sp, #8]
 800f416:	2301      	movs	r3, #1
 800f418:	9301      	str	r3, [sp, #4]
 800f41a:	2300      	movs	r3, #0
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	23ff      	movs	r3, #255	; 0xff
 800f420:	2200      	movs	r2, #0
 800f422:	69f9      	ldr	r1, [r7, #28]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fa75 	bl	800f914 <ip4_output_if>
 800f42a:	4603      	mov	r3, r0
 800f42c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f42e:	e001      	b.n	800f434 <icmp_input+0x1b8>
      break;
 800f430:	bf00      	nop
 800f432:	e000      	b.n	800f436 <icmp_input+0x1ba>
      break;
 800f434:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7f8 f9e2 	bl	8007800 <pbuf_free>
  return;
 800f43c:	e013      	b.n	800f466 <icmp_input+0x1ea>
    goto lenerr;
 800f43e:	bf00      	nop
 800f440:	e002      	b.n	800f448 <icmp_input+0x1cc>
    goto lenerr;
 800f442:	bf00      	nop
 800f444:	e000      	b.n	800f448 <icmp_input+0x1cc>
        goto lenerr;
 800f446:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7f8 f9d9 	bl	8007800 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f44e:	e00a      	b.n	800f466 <icmp_input+0x1ea>
        goto icmperr;
 800f450:	bf00      	nop
 800f452:	e004      	b.n	800f45e <icmp_input+0x1e2>
        goto icmperr;
 800f454:	bf00      	nop
 800f456:	e002      	b.n	800f45e <icmp_input+0x1e2>
          goto icmperr;
 800f458:	bf00      	nop
 800f45a:	e000      	b.n	800f45e <icmp_input+0x1e2>
          goto icmperr;
 800f45c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7f8 f9ce 	bl	8007800 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f464:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f466:	3728      	adds	r7, #40	; 0x28
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20003428 	.word	0x20003428
 800f470:	2000343c 	.word	0x2000343c
 800f474:	0801a3e4 	.word	0x0801a3e4
 800f478:	0801a41c 	.word	0x0801a41c
 800f47c:	0801a454 	.word	0x0801a454
 800f480:	0801a47c 	.word	0x0801a47c

0800f484 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	460b      	mov	r3, r1
 800f48e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f490:	78fb      	ldrb	r3, [r7, #3]
 800f492:	461a      	mov	r2, r3
 800f494:	2103      	movs	r1, #3
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f814 	bl	800f4c4 <icmp_send_response>
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f4b0:	78fb      	ldrb	r3, [r7, #3]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	210b      	movs	r1, #11
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 f804 	bl	800f4c4 <icmp_send_response>
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08c      	sub	sp, #48	; 0x30
 800f4c8:	af04      	add	r7, sp, #16
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	70fb      	strb	r3, [r7, #3]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f4d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4d8:	2124      	movs	r1, #36	; 0x24
 800f4da:	2022      	movs	r0, #34	; 0x22
 800f4dc:	f7f7 feac 	bl	8007238 <pbuf_alloc>
 800f4e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d04c      	beq.n	800f582 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	895b      	ldrh	r3, [r3, #10]
 800f4ec:	2b23      	cmp	r3, #35	; 0x23
 800f4ee:	d806      	bhi.n	800f4fe <icmp_send_response+0x3a>
 800f4f0:	4b26      	ldr	r3, [pc, #152]	; (800f58c <icmp_send_response+0xc8>)
 800f4f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f4f6:	4926      	ldr	r1, [pc, #152]	; (800f590 <icmp_send_response+0xcc>)
 800f4f8:	4826      	ldr	r0, [pc, #152]	; (800f594 <icmp_send_response+0xd0>)
 800f4fa:	f007 fc0d 	bl	8016d18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	78fa      	ldrb	r2, [r7, #3]
 800f50e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	78ba      	ldrb	r2, [r7, #2]
 800f514:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2200      	movs	r2, #0
 800f51a:	711a      	strb	r2, [r3, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	2200      	movs	r2, #0
 800f524:	719a      	strb	r2, [r3, #6]
 800f526:	2200      	movs	r2, #0
 800f528:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	f103 0008 	add.w	r0, r3, #8
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	221c      	movs	r2, #28
 800f538:	4619      	mov	r1, r3
 800f53a:	f007 fbd7 	bl	8016cec <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f544:	f107 030c 	add.w	r3, r7, #12
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f825 	bl	800f598 <ip4_route>
 800f54e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d011      	beq.n	800f57a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	2200      	movs	r2, #0
 800f55a:	709a      	strb	r2, [r3, #2]
 800f55c:	2200      	movs	r2, #0
 800f55e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f560:	f107 020c 	add.w	r2, r7, #12
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	9302      	str	r3, [sp, #8]
 800f568:	2301      	movs	r3, #1
 800f56a:	9301      	str	r3, [sp, #4]
 800f56c:	2300      	movs	r3, #0
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	23ff      	movs	r3, #255	; 0xff
 800f572:	2100      	movs	r1, #0
 800f574:	69f8      	ldr	r0, [r7, #28]
 800f576:	f000 f9cd 	bl	800f914 <ip4_output_if>
  }
  pbuf_free(q);
 800f57a:	69f8      	ldr	r0, [r7, #28]
 800f57c:	f7f8 f940 	bl	8007800 <pbuf_free>
 800f580:	e000      	b.n	800f584 <icmp_send_response+0xc0>
    return;
 800f582:	bf00      	nop
}
 800f584:	3720      	adds	r7, #32
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	0801a3e4 	.word	0x0801a3e4
 800f590:	0801a4b0 	.word	0x0801a4b0
 800f594:	0801a454 	.word	0x0801a454

0800f598 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f5a0:	4b33      	ldr	r3, [pc, #204]	; (800f670 <ip4_route+0xd8>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	e036      	b.n	800f616 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5ae:	f003 0301 	and.w	r3, r3, #1
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d02b      	beq.n	800f610 <ip4_route+0x78>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5be:	089b      	lsrs	r3, r3, #2
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d022      	beq.n	800f610 <ip4_route+0x78>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d01d      	beq.n	800f610 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	405a      	eors	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	3308      	adds	r3, #8
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4013      	ands	r3, r2
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	e038      	b.n	800f662 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5f6:	f003 0302 	and.w	r3, r3, #2
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d108      	bne.n	800f610 <ip4_route+0x78>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	330c      	adds	r3, #12
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d101      	bne.n	800f610 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	e028      	b.n	800f662 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1c5      	bne.n	800f5a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f61c:	4b15      	ldr	r3, [pc, #84]	; (800f674 <ip4_route+0xdc>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d01a      	beq.n	800f65a <ip4_route+0xc2>
 800f624:	4b13      	ldr	r3, [pc, #76]	; (800f674 <ip4_route+0xdc>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f62c:	f003 0301 	and.w	r3, r3, #1
 800f630:	2b00      	cmp	r3, #0
 800f632:	d012      	beq.n	800f65a <ip4_route+0xc2>
 800f634:	4b0f      	ldr	r3, [pc, #60]	; (800f674 <ip4_route+0xdc>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f63c:	f003 0304 	and.w	r3, r3, #4
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00a      	beq.n	800f65a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f644:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <ip4_route+0xdc>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3304      	adds	r3, #4
 800f64a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d004      	beq.n	800f65a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	2b7f      	cmp	r3, #127	; 0x7f
 800f658:	d101      	bne.n	800f65e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f65a:	2300      	movs	r3, #0
 800f65c:	e001      	b.n	800f662 <ip4_route+0xca>
  }

  return netif_default;
 800f65e:	4b05      	ldr	r3, [pc, #20]	; (800f674 <ip4_route+0xdc>)
 800f660:	681b      	ldr	r3, [r3, #0]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	2000695c 	.word	0x2000695c
 800f674:	20006960 	.word	0x20006960

0800f678 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d016      	beq.n	800f6be <ip4_input_accept+0x46>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	3304      	adds	r3, #4
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d011      	beq.n	800f6be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f69a:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <ip4_input_accept+0x50>)
 800f69c:	695a      	ldr	r2, [r3, #20]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d008      	beq.n	800f6ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f6a8:	4b07      	ldr	r3, [pc, #28]	; (800f6c8 <ip4_input_accept+0x50>)
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	6879      	ldr	r1, [r7, #4]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 fa08 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800f6b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e000      	b.n	800f6c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	20003428 	.word	0x20003428

0800f6cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	091b      	lsrs	r3, r3, #4
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	d004      	beq.n	800f6f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7f8 f889 	bl	8007800 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	e107      	b.n	800f902 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	f003 030f 	and.w	r3, r3, #15
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	885b      	ldrh	r3, [r3, #2]
 800f706:	b29b      	uxth	r3, r3
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f6 fdc5 	bl	8006298 <lwip_htons>
 800f70e:	4603      	mov	r3, r0
 800f710:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	891b      	ldrh	r3, [r3, #8]
 800f716:	89ba      	ldrh	r2, [r7, #12]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d204      	bcs.n	800f726 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f71c:	89bb      	ldrh	r3, [r7, #12]
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7f7 fee7 	bl	80074f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	895b      	ldrh	r3, [r3, #10]
 800f72a:	89fa      	ldrh	r2, [r7, #14]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d807      	bhi.n	800f740 <ip4_input+0x74>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	891b      	ldrh	r3, [r3, #8]
 800f734:	89ba      	ldrh	r2, [r7, #12]
 800f736:	429a      	cmp	r2, r3
 800f738:	d802      	bhi.n	800f740 <ip4_input+0x74>
 800f73a:	89fb      	ldrh	r3, [r7, #14]
 800f73c:	2b13      	cmp	r3, #19
 800f73e:	d804      	bhi.n	800f74a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7f8 f85d 	bl	8007800 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f746:	2300      	movs	r3, #0
 800f748:	e0db      	b.n	800f902 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	4a6f      	ldr	r2, [pc, #444]	; (800f90c <ip4_input+0x240>)
 800f750:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	4a6d      	ldr	r2, [pc, #436]	; (800f90c <ip4_input+0x240>)
 800f758:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f75a:	4b6c      	ldr	r3, [pc, #432]	; (800f90c <ip4_input+0x240>)
 800f75c:	695b      	ldr	r3, [r3, #20]
 800f75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f762:	2be0      	cmp	r3, #224	; 0xe0
 800f764:	d112      	bne.n	800f78c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d007      	beq.n	800f786 <ip4_input+0xba>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	3304      	adds	r3, #4
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <ip4_input+0xba>
      netif = inp;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	613b      	str	r3, [r7, #16]
 800f784:	e02a      	b.n	800f7dc <ip4_input+0x110>
    } else {
      netif = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	613b      	str	r3, [r7, #16]
 800f78a:	e027      	b.n	800f7dc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f78c:	6838      	ldr	r0, [r7, #0]
 800f78e:	f7ff ff73 	bl	800f678 <ip4_input_accept>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <ip4_input+0xd2>
      netif = inp;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	613b      	str	r3, [r7, #16]
 800f79c:	e01e      	b.n	800f7dc <ip4_input+0x110>
    } else {
      netif = NULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f7a2:	4b5a      	ldr	r3, [pc, #360]	; (800f90c <ip4_input+0x240>)
 800f7a4:	695b      	ldr	r3, [r3, #20]
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	2b7f      	cmp	r3, #127	; 0x7f
 800f7aa:	d017      	beq.n	800f7dc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f7ac:	4b58      	ldr	r3, [pc, #352]	; (800f910 <ip4_input+0x244>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	613b      	str	r3, [r7, #16]
 800f7b2:	e00e      	b.n	800f7d2 <ip4_input+0x106>
          if (netif == inp) {
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d006      	beq.n	800f7ca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f7bc:	6938      	ldr	r0, [r7, #16]
 800f7be:	f7ff ff5b 	bl	800f678 <ip4_input_accept>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d108      	bne.n	800f7da <ip4_input+0x10e>
 800f7c8:	e000      	b.n	800f7cc <ip4_input+0x100>
            continue;
 800f7ca:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	613b      	str	r3, [r7, #16]
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1ed      	bne.n	800f7b4 <ip4_input+0xe8>
 800f7d8:	e000      	b.n	800f7dc <ip4_input+0x110>
            break;
 800f7da:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f7dc:	4b4b      	ldr	r3, [pc, #300]	; (800f90c <ip4_input+0x240>)
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f96e 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d105      	bne.n	800f7fa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f7ee:	4b47      	ldr	r3, [pc, #284]	; (800f90c <ip4_input+0x240>)
 800f7f0:	691b      	ldr	r3, [r3, #16]
 800f7f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f7f6:	2be0      	cmp	r3, #224	; 0xe0
 800f7f8:	d104      	bne.n	800f804 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7f8 f800 	bl	8007800 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	e07e      	b.n	800f902 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d104      	bne.n	800f814 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7f7 fff8 	bl	8007800 <pbuf_free>
    return ERR_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	e076      	b.n	800f902 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	88db      	ldrh	r3, [r3, #6]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	461a      	mov	r2, r3
 800f81c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f820:	4013      	ands	r3, r2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00b      	beq.n	800f83e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fc92 	bl	8010150 <ip4_reass>
 800f82c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <ip4_input+0x16c>
      return ERR_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	e064      	b.n	800f902 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f83e:	4a33      	ldr	r2, [pc, #204]	; (800f90c <ip4_input+0x240>)
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f844:	4a31      	ldr	r2, [pc, #196]	; (800f90c <ip4_input+0x240>)
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f84a:	4a30      	ldr	r2, [pc, #192]	; (800f90c <ip4_input+0x240>)
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	f003 030f 	and.w	r3, r3, #15
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	b29a      	uxth	r2, r3
 800f860:	4b2a      	ldr	r3, [pc, #168]	; (800f90c <ip4_input+0x240>)
 800f862:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f864:	89fb      	ldrh	r3, [r7, #14]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7f7 ff43 	bl	80076f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	7a5b      	ldrb	r3, [r3, #9]
 800f872:	2b11      	cmp	r3, #17
 800f874:	d006      	beq.n	800f884 <ip4_input+0x1b8>
 800f876:	2b11      	cmp	r3, #17
 800f878:	dc13      	bgt.n	800f8a2 <ip4_input+0x1d6>
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d00c      	beq.n	800f898 <ip4_input+0x1cc>
 800f87e:	2b06      	cmp	r3, #6
 800f880:	d005      	beq.n	800f88e <ip4_input+0x1c2>
 800f882:	e00e      	b.n	800f8a2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7fe fc68 	bl	800e15c <udp_input>
        break;
 800f88c:	e026      	b.n	800f8dc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7fa f88d 	bl	80099b0 <tcp_input>
        break;
 800f896:	e021      	b.n	800f8dc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f7ff fcee 	bl	800f27c <icmp_input>
        break;
 800f8a0:	e01c      	b.n	800f8dc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f8a2:	4b1a      	ldr	r3, [pc, #104]	; (800f90c <ip4_input+0x240>)
 800f8a4:	695b      	ldr	r3, [r3, #20]
 800f8a6:	6939      	ldr	r1, [r7, #16]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 f90b 	bl	800fac4 <ip4_addr_isbroadcast_u32>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d10f      	bne.n	800f8d4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <ip4_input+0x240>)
 800f8b6:	695b      	ldr	r3, [r3, #20]
 800f8b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f8bc:	2be0      	cmp	r3, #224	; 0xe0
 800f8be:	d009      	beq.n	800f8d4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f8c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7f7 ff87 	bl	80077da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f8cc:	2102      	movs	r1, #2
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff fdd8 	bl	800f484 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7f7 ff93 	bl	8007800 <pbuf_free>
        break;
 800f8da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f8dc:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <ip4_input+0x240>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f8e2:	4b0a      	ldr	r3, [pc, #40]	; (800f90c <ip4_input+0x240>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f8e8:	4b08      	ldr	r3, [pc, #32]	; (800f90c <ip4_input+0x240>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f8ee:	4b07      	ldr	r3, [pc, #28]	; (800f90c <ip4_input+0x240>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f8f4:	4b05      	ldr	r3, [pc, #20]	; (800f90c <ip4_input+0x240>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f8fa:	4b04      	ldr	r3, [pc, #16]	; (800f90c <ip4_input+0x240>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3718      	adds	r7, #24
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20003428 	.word	0x20003428
 800f910:	2000695c 	.word	0x2000695c

0800f914 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08a      	sub	sp, #40	; 0x28
 800f918:	af04      	add	r7, sp, #16
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d009      	beq.n	800f940 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d003      	beq.n	800f93a <ip4_output_if+0x26>
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d102      	bne.n	800f940 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93c:	3304      	adds	r3, #4
 800f93e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f940:	78fa      	ldrb	r2, [r7, #3]
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	9302      	str	r3, [sp, #8]
 800f946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f94a:	9301      	str	r3, [sp, #4]
 800f94c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	4613      	mov	r3, r2
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	6979      	ldr	r1, [r7, #20]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f000 f805 	bl	800f968 <ip4_output_if_src>
 800f95e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	7b9b      	ldrb	r3, [r3, #14]
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d006      	beq.n	800f98c <ip4_output_if_src+0x24>
 800f97e:	4b4b      	ldr	r3, [pc, #300]	; (800faac <ip4_output_if_src+0x144>)
 800f980:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f984:	494a      	ldr	r1, [pc, #296]	; (800fab0 <ip4_output_if_src+0x148>)
 800f986:	484b      	ldr	r0, [pc, #300]	; (800fab4 <ip4_output_if_src+0x14c>)
 800f988:	f007 f9c6 	bl	8016d18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d060      	beq.n	800fa54 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f992:	2314      	movs	r3, #20
 800f994:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f996:	2114      	movs	r1, #20
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7f7 fe9b 	bl	80076d4 <pbuf_add_header>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d002      	beq.n	800f9aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f9a4:	f06f 0301 	mvn.w	r3, #1
 800f9a8:	e07c      	b.n	800faa4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	895b      	ldrh	r3, [r3, #10]
 800f9b4:	2b13      	cmp	r3, #19
 800f9b6:	d806      	bhi.n	800f9c6 <ip4_output_if_src+0x5e>
 800f9b8:	4b3c      	ldr	r3, [pc, #240]	; (800faac <ip4_output_if_src+0x144>)
 800f9ba:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f9be:	493e      	ldr	r1, [pc, #248]	; (800fab8 <ip4_output_if_src+0x150>)
 800f9c0:	483c      	ldr	r0, [pc, #240]	; (800fab4 <ip4_output_if_src+0x14c>)
 800f9c2:	f007 f9a9 	bl	8016d18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	78fa      	ldrb	r2, [r7, #3]
 800f9ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f9d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f9dc:	8b7b      	ldrh	r3, [r7, #26]
 800f9de:	089b      	lsrs	r3, r3, #2
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f9f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	891b      	ldrh	r3, [r3, #8]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7f6 fc4c 	bl	8006298 <lwip_htons>
 800fa00:	4603      	mov	r3, r0
 800fa02:	461a      	mov	r2, r3
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	719a      	strb	r2, [r3, #6]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fa12:	4b2a      	ldr	r3, [pc, #168]	; (800fabc <ip4_output_if_src+0x154>)
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f6 fc3e 	bl	8006298 <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	461a      	mov	r2, r3
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fa24:	4b25      	ldr	r3, [pc, #148]	; (800fabc <ip4_output_if_src+0x154>)
 800fa26:	881b      	ldrh	r3, [r3, #0]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	4b23      	ldr	r3, [pc, #140]	; (800fabc <ip4_output_if_src+0x154>)
 800fa2e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d104      	bne.n	800fa40 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fa36:	4b22      	ldr	r3, [pc, #136]	; (800fac0 <ip4_output_if_src+0x158>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	60da      	str	r2, [r3, #12]
 800fa3e:	e003      	b.n	800fa48 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	729a      	strb	r2, [r3, #10]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	72da      	strb	r2, [r3, #11]
 800fa52:	e00f      	b.n	800fa74 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	895b      	ldrh	r3, [r3, #10]
 800fa58:	2b13      	cmp	r3, #19
 800fa5a:	d802      	bhi.n	800fa62 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fa5c:	f06f 0301 	mvn.w	r3, #1
 800fa60:	e020      	b.n	800faa4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fa6e:	f107 0314 	add.w	r3, r7, #20
 800fa72:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00c      	beq.n	800fa96 <ip4_output_if_src+0x12e>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	891a      	ldrh	r2, [r3, #8]
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d906      	bls.n	800fa96 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f000 fd4d 	bl	801052c <ip4_frag>
 800fa92:	4603      	mov	r3, r0
 800fa94:	e006      	b.n	800faa4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	695b      	ldr	r3, [r3, #20]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	68f9      	ldr	r1, [r7, #12]
 800fa9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faa0:	4798      	blx	r3
 800faa2:	4603      	mov	r3, r0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3720      	adds	r7, #32
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	0801a4dc 	.word	0x0801a4dc
 800fab0:	0801a510 	.word	0x0801a510
 800fab4:	0801a51c 	.word	0x0801a51c
 800fab8:	0801a544 	.word	0x0801a544
 800fabc:	20000202 	.word	0x20000202
 800fac0:	0801a9a4 	.word	0x0801a9a4

0800fac4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad8:	d002      	beq.n	800fae0 <ip4_addr_isbroadcast_u32+0x1c>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fae0:	2301      	movs	r3, #1
 800fae2:	e02a      	b.n	800fb3a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faea:	f003 0302 	and.w	r3, r3, #2
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	e021      	b.n	800fb3a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	3304      	adds	r3, #4
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d101      	bne.n	800fb06 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	e019      	b.n	800fb3a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	405a      	eors	r2, r3
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4013      	ands	r3, r2
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10d      	bne.n	800fb38 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	3308      	adds	r3, #8
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	43da      	mvns	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d101      	bne.n	800fb38 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e000      	b.n	800fb3a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fb38:	2300      	movs	r3, #0
  }
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
	...

0800fb48 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fb52:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <ip_reass_tmr+0x54>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fb58:	e018      	b.n	800fb8c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	7fdb      	ldrb	r3, [r3, #31]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00b      	beq.n	800fb7a <ip_reass_tmr+0x32>
      r->timer--;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	7fdb      	ldrb	r3, [r3, #31]
 800fb66:	3b01      	subs	r3, #1
 800fb68:	b2da      	uxtb	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	e008      	b.n	800fb8c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fb84:	68b9      	ldr	r1, [r7, #8]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 f80a 	bl	800fba0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e3      	bne.n	800fb5a <ip_reass_tmr+0x12>
    }
  }
}
 800fb92:	bf00      	nop
 800fb94:	bf00      	nop
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	20000204 	.word	0x20000204

0800fba0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d105      	bne.n	800fbc2 <ip_reass_free_complete_datagram+0x22>
 800fbb6:	4b45      	ldr	r3, [pc, #276]	; (800fccc <ip_reass_free_complete_datagram+0x12c>)
 800fbb8:	22ab      	movs	r2, #171	; 0xab
 800fbba:	4945      	ldr	r1, [pc, #276]	; (800fcd0 <ip_reass_free_complete_datagram+0x130>)
 800fbbc:	4845      	ldr	r0, [pc, #276]	; (800fcd4 <ip_reass_free_complete_datagram+0x134>)
 800fbbe:	f007 f8ab 	bl	8016d18 <iprintf>
  if (prev != NULL) {
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00a      	beq.n	800fbde <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d005      	beq.n	800fbde <ip_reass_free_complete_datagram+0x3e>
 800fbd2:	4b3e      	ldr	r3, [pc, #248]	; (800fccc <ip_reass_free_complete_datagram+0x12c>)
 800fbd4:	22ad      	movs	r2, #173	; 0xad
 800fbd6:	4940      	ldr	r1, [pc, #256]	; (800fcd8 <ip_reass_free_complete_datagram+0x138>)
 800fbd8:	483e      	ldr	r0, [pc, #248]	; (800fcd4 <ip_reass_free_complete_datagram+0x134>)
 800fbda:	f007 f89d 	bl	8016d18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	889b      	ldrh	r3, [r3, #4]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d12a      	bne.n	800fc46 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	6858      	ldr	r0, [r3, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3308      	adds	r3, #8
 800fc06:	2214      	movs	r2, #20
 800fc08:	4619      	mov	r1, r3
 800fc0a:	f007 f86f 	bl	8016cec <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fc0e:	2101      	movs	r1, #1
 800fc10:	69b8      	ldr	r0, [r7, #24]
 800fc12:	f7ff fc47 	bl	800f4a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fc16:	69b8      	ldr	r0, [r7, #24]
 800fc18:	f7f7 fe7a 	bl	8007910 <pbuf_clen>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fc20:	8bfa      	ldrh	r2, [r7, #30]
 800fc22:	8a7b      	ldrh	r3, [r7, #18]
 800fc24:	4413      	add	r3, r2
 800fc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc2a:	db05      	blt.n	800fc38 <ip_reass_free_complete_datagram+0x98>
 800fc2c:	4b27      	ldr	r3, [pc, #156]	; (800fccc <ip_reass_free_complete_datagram+0x12c>)
 800fc2e:	22bc      	movs	r2, #188	; 0xbc
 800fc30:	492a      	ldr	r1, [pc, #168]	; (800fcdc <ip_reass_free_complete_datagram+0x13c>)
 800fc32:	4828      	ldr	r0, [pc, #160]	; (800fcd4 <ip_reass_free_complete_datagram+0x134>)
 800fc34:	f007 f870 	bl	8016d18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fc38:	8bfa      	ldrh	r2, [r7, #30]
 800fc3a:	8a7b      	ldrh	r3, [r7, #18]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fc40:	69b8      	ldr	r0, [r7, #24]
 800fc42:	f7f7 fddd 	bl	8007800 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fc4c:	e01f      	b.n	800fc8e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f7f7 fe56 	bl	8007910 <pbuf_clen>
 800fc64:	4603      	mov	r3, r0
 800fc66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fc68:	8bfa      	ldrh	r2, [r7, #30]
 800fc6a:	8a7b      	ldrh	r3, [r7, #18]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc72:	db05      	blt.n	800fc80 <ip_reass_free_complete_datagram+0xe0>
 800fc74:	4b15      	ldr	r3, [pc, #84]	; (800fccc <ip_reass_free_complete_datagram+0x12c>)
 800fc76:	22cc      	movs	r2, #204	; 0xcc
 800fc78:	4918      	ldr	r1, [pc, #96]	; (800fcdc <ip_reass_free_complete_datagram+0x13c>)
 800fc7a:	4816      	ldr	r0, [pc, #88]	; (800fcd4 <ip_reass_free_complete_datagram+0x134>)
 800fc7c:	f007 f84c 	bl	8016d18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fc80:	8bfa      	ldrh	r2, [r7, #30]
 800fc82:	8a7b      	ldrh	r3, [r7, #18]
 800fc84:	4413      	add	r3, r2
 800fc86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f7f7 fdb9 	bl	8007800 <pbuf_free>
  while (p != NULL) {
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d1dc      	bne.n	800fc4e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 f8c2 	bl	800fe20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fc9c:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <ip_reass_free_complete_datagram+0x140>)
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	8bfa      	ldrh	r2, [r7, #30]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d905      	bls.n	800fcb2 <ip_reass_free_complete_datagram+0x112>
 800fca6:	4b09      	ldr	r3, [pc, #36]	; (800fccc <ip_reass_free_complete_datagram+0x12c>)
 800fca8:	22d2      	movs	r2, #210	; 0xd2
 800fcaa:	490e      	ldr	r1, [pc, #56]	; (800fce4 <ip_reass_free_complete_datagram+0x144>)
 800fcac:	4809      	ldr	r0, [pc, #36]	; (800fcd4 <ip_reass_free_complete_datagram+0x134>)
 800fcae:	f007 f833 	bl	8016d18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fcb2:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <ip_reass_free_complete_datagram+0x140>)
 800fcb4:	881a      	ldrh	r2, [r3, #0]
 800fcb6:	8bfb      	ldrh	r3, [r7, #30]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	4b08      	ldr	r3, [pc, #32]	; (800fce0 <ip_reass_free_complete_datagram+0x140>)
 800fcbe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fcc0:	8bfb      	ldrh	r3, [r7, #30]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3720      	adds	r7, #32
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	0801a574 	.word	0x0801a574
 800fcd0:	0801a5b0 	.word	0x0801a5b0
 800fcd4:	0801a5bc 	.word	0x0801a5bc
 800fcd8:	0801a5e4 	.word	0x0801a5e4
 800fcdc:	0801a5f8 	.word	0x0801a5f8
 800fce0:	20000208 	.word	0x20000208
 800fce4:	0801a618 	.word	0x0801a618

0800fce8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08a      	sub	sp, #40	; 0x28
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fd06:	4b28      	ldr	r3, [pc, #160]	; (800fda8 <ip_reass_remove_oldest_datagram+0xc0>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fd0c:	e030      	b.n	800fd70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd10:	695a      	ldr	r2, [r3, #20]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d10c      	bne.n	800fd34 <ip_reass_remove_oldest_datagram+0x4c>
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	699a      	ldr	r2, [r3, #24]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d106      	bne.n	800fd34 <ip_reass_remove_oldest_datagram+0x4c>
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	899a      	ldrh	r2, [r3, #12]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	889b      	ldrh	r3, [r3, #4]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d014      	beq.n	800fd5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	3301      	adds	r3, #1
 800fd38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fd3a:	6a3b      	ldr	r3, [r7, #32]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d104      	bne.n	800fd4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	61bb      	str	r3, [r7, #24]
 800fd48:	e009      	b.n	800fd5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	7fda      	ldrb	r2, [r3, #31]
 800fd4e:	6a3b      	ldr	r3, [r7, #32]
 800fd50:	7fdb      	ldrb	r3, [r3, #31]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d803      	bhi.n	800fd5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1cb      	bne.n	800fd0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d008      	beq.n	800fd8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fd7c:	69b9      	ldr	r1, [r7, #24]
 800fd7e:	6a38      	ldr	r0, [r7, #32]
 800fd80:	f7ff ff0e 	bl	800fba0 <ip_reass_free_complete_datagram>
 800fd84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	da02      	bge.n	800fd9c <ip_reass_remove_oldest_datagram+0xb4>
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	dcac      	bgt.n	800fcf6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fd9c:	697b      	ldr	r3, [r7, #20]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3728      	adds	r7, #40	; 0x28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20000204 	.word	0x20000204

0800fdac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fdb6:	2004      	movs	r0, #4
 800fdb8:	f7f6 fec4 	bl	8006b44 <memp_malloc>
 800fdbc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d110      	bne.n	800fde6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fdc4:	6839      	ldr	r1, [r7, #0]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7ff ff8e 	bl	800fce8 <ip_reass_remove_oldest_datagram>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	dc03      	bgt.n	800fddc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fdd4:	2004      	movs	r0, #4
 800fdd6:	f7f6 feb5 	bl	8006b44 <memp_malloc>
 800fdda:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	e016      	b.n	800fe14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fde6:	2220      	movs	r2, #32
 800fde8:	2100      	movs	r1, #0
 800fdea:	68f8      	ldr	r0, [r7, #12]
 800fdec:	f006 ff8c 	bl	8016d08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	220f      	movs	r2, #15
 800fdf4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fdf6:	4b09      	ldr	r3, [pc, #36]	; (800fe1c <ip_reass_enqueue_new_datagram+0x70>)
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fdfe:	4a07      	ldr	r2, [pc, #28]	; (800fe1c <ip_reass_enqueue_new_datagram+0x70>)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3308      	adds	r3, #8
 800fe08:	2214      	movs	r2, #20
 800fe0a:	6879      	ldr	r1, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f006 ff6d 	bl	8016cec <memcpy>
  return ipr;
 800fe12:	68fb      	ldr	r3, [r7, #12]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	20000204 	.word	0x20000204

0800fe20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fe2a:	4b10      	ldr	r3, [pc, #64]	; (800fe6c <ip_reass_dequeue_datagram+0x4c>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d104      	bne.n	800fe3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a0c      	ldr	r2, [pc, #48]	; (800fe6c <ip_reass_dequeue_datagram+0x4c>)
 800fe3a:	6013      	str	r3, [r2, #0]
 800fe3c:	e00d      	b.n	800fe5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d106      	bne.n	800fe52 <ip_reass_dequeue_datagram+0x32>
 800fe44:	4b0a      	ldr	r3, [pc, #40]	; (800fe70 <ip_reass_dequeue_datagram+0x50>)
 800fe46:	f240 1245 	movw	r2, #325	; 0x145
 800fe4a:	490a      	ldr	r1, [pc, #40]	; (800fe74 <ip_reass_dequeue_datagram+0x54>)
 800fe4c:	480a      	ldr	r0, [pc, #40]	; (800fe78 <ip_reass_dequeue_datagram+0x58>)
 800fe4e:	f006 ff63 	bl	8016d18 <iprintf>
    prev->next = ipr->next;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	2004      	movs	r0, #4
 800fe5e:	f7f6 febd 	bl	8006bdc <memp_free>
}
 800fe62:	bf00      	nop
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000204 	.word	0x20000204
 800fe70:	0801a574 	.word	0x0801a574
 800fe74:	0801a63c 	.word	0x0801a63c
 800fe78:	0801a5bc 	.word	0x0801a5bc

0800fe7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08c      	sub	sp, #48	; 0x30
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	885b      	ldrh	r3, [r3, #2]
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f6 f9fb 	bl	8006298 <lwip_htons>
 800fea2:	4603      	mov	r3, r0
 800fea4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f003 030f 	and.w	r3, r3, #15
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800feb4:	7e7b      	ldrb	r3, [r7, #25]
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	8b7a      	ldrh	r2, [r7, #26]
 800feba:	429a      	cmp	r2, r3
 800febc:	d202      	bcs.n	800fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800febe:	f04f 33ff 	mov.w	r3, #4294967295
 800fec2:	e135      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fec4:	7e7b      	ldrb	r3, [r7, #25]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	8b7a      	ldrh	r2, [r7, #26]
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	88db      	ldrh	r3, [r3, #6]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f6 f9df 	bl	8006298 <lwip_htons>
 800feda:	4603      	mov	r3, r0
 800fedc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	00db      	lsls	r3, r3, #3
 800fee4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800feec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feee:	2200      	movs	r2, #0
 800fef0:	701a      	strb	r2, [r3, #0]
 800fef2:	2200      	movs	r2, #0
 800fef4:	705a      	strb	r2, [r3, #1]
 800fef6:	2200      	movs	r2, #0
 800fef8:	709a      	strb	r2, [r3, #2]
 800fefa:	2200      	movs	r2, #0
 800fefc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff00:	8afa      	ldrh	r2, [r7, #22]
 800ff02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ff04:	8afa      	ldrh	r2, [r7, #22]
 800ff06:	8b7b      	ldrh	r3, [r7, #26]
 800ff08:	4413      	add	r3, r2
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	88db      	ldrh	r3, [r3, #6]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	8afa      	ldrh	r2, [r7, #22]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d902      	bls.n	800ff22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff20:	e106      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
 800ff28:	e068      	b.n	800fffc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ff30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff32:	889b      	ldrh	r3, [r3, #4]
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	889b      	ldrh	r3, [r3, #4]
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d235      	bcs.n	800ffac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ff46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d020      	beq.n	800ff8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	889b      	ldrh	r3, [r3, #4]
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff54:	88db      	ldrh	r3, [r3, #6]
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d307      	bcc.n	800ff6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	88db      	ldrh	r3, [r3, #6]
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	889b      	ldrh	r3, [r3, #4]
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d902      	bls.n	800ff72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff70:	e0de      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ff72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	88db      	ldrh	r3, [r3, #6]
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	889b      	ldrh	r3, [r3, #4]
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d03d      	beq.n	8010004 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ff8c:	e03a      	b.n	8010004 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	88db      	ldrh	r3, [r3, #6]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	889b      	ldrh	r3, [r3, #4]
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d902      	bls.n	800ffa4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa2:	e0c5      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	605a      	str	r2, [r3, #4]
      break;
 800ffaa:	e02b      	b.n	8010004 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	889b      	ldrh	r3, [r3, #4]
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	889b      	ldrh	r3, [r3, #4]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d102      	bne.n	800ffc2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ffbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc0:	e0b6      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	889b      	ldrh	r3, [r3, #4]
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	88db      	ldrh	r3, [r3, #6]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d202      	bcs.n	800ffd8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ffd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd6:	e0ab      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d009      	beq.n	800fff2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ffde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe0:	88db      	ldrh	r3, [r3, #6]
 800ffe2:	b29a      	uxth	r2, r3
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	889b      	ldrh	r3, [r3, #4]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d001      	beq.n	800fff2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d193      	bne.n	800ff2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010002:	e000      	b.n	8010006 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010004:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	2b00      	cmp	r3, #0
 801000a:	d12d      	bne.n	8010068 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801000c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000e:	2b00      	cmp	r3, #0
 8010010:	d01c      	beq.n	801004c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010014:	88db      	ldrh	r3, [r3, #6]
 8010016:	b29a      	uxth	r2, r3
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	889b      	ldrh	r3, [r3, #4]
 801001c:	b29b      	uxth	r3, r3
 801001e:	429a      	cmp	r2, r3
 8010020:	d906      	bls.n	8010030 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010022:	4b45      	ldr	r3, [pc, #276]	; (8010138 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010024:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010028:	4944      	ldr	r1, [pc, #272]	; (801013c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801002a:	4845      	ldr	r0, [pc, #276]	; (8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801002c:	f006 fe74 	bl	8016d18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010038:	88db      	ldrh	r3, [r3, #6]
 801003a:	b29a      	uxth	r2, r3
 801003c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003e:	889b      	ldrh	r3, [r3, #4]
 8010040:	b29b      	uxth	r3, r3
 8010042:	429a      	cmp	r2, r3
 8010044:	d010      	beq.n	8010068 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	623b      	str	r3, [r7, #32]
 801004a:	e00d      	b.n	8010068 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d006      	beq.n	8010062 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010054:	4b38      	ldr	r3, [pc, #224]	; (8010138 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010056:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801005a:	493a      	ldr	r1, [pc, #232]	; (8010144 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801005c:	4838      	ldr	r0, [pc, #224]	; (8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801005e:	f006 fe5b 	bl	8016d18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	7f9b      	ldrb	r3, [r3, #30]
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	2b00      	cmp	r3, #0
 8010078:	d059      	beq.n	801012e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801007a:	6a3b      	ldr	r3, [r7, #32]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d04f      	beq.n	8010120 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d006      	beq.n	8010096 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	889b      	ldrh	r3, [r3, #4]
 8010090:	b29b      	uxth	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d002      	beq.n	801009c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	623b      	str	r3, [r7, #32]
 801009a:	e041      	b.n	8010120 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801009c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80100a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80100a6:	e012      	b.n	80100ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80100ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b0:	88db      	ldrh	r3, [r3, #6]
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	889b      	ldrh	r3, [r3, #4]
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d002      	beq.n	80100c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	623b      	str	r3, [r7, #32]
            break;
 80100c2:	e007      	b.n	80100d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80100c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1e9      	bne.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80100d4:	6a3b      	ldr	r3, [r7, #32]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d022      	beq.n	8010120 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80100e2:	4b15      	ldr	r3, [pc, #84]	; (8010138 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80100e4:	f240 12df 	movw	r2, #479	; 0x1df
 80100e8:	4917      	ldr	r1, [pc, #92]	; (8010148 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80100ea:	4815      	ldr	r0, [pc, #84]	; (8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80100ec:	f006 fe14 	bl	8016d18 <iprintf>
          LWIP_ASSERT("sanity check",
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d106      	bne.n	801010a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80100fc:	4b0e      	ldr	r3, [pc, #56]	; (8010138 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80100fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010102:	4911      	ldr	r1, [pc, #68]	; (8010148 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010104:	480e      	ldr	r0, [pc, #56]	; (8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010106:	f006 fe07 	bl	8016d18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010112:	4b09      	ldr	r3, [pc, #36]	; (8010138 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010114:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010118:	490c      	ldr	r1, [pc, #48]	; (801014c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801011a:	4809      	ldr	r0, [pc, #36]	; (8010140 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801011c:	f006 fdfc 	bl	8016d18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bf14      	ite	ne
 8010126:	2301      	movne	r3, #1
 8010128:	2300      	moveq	r3, #0
 801012a:	b2db      	uxtb	r3, r3
 801012c:	e000      	b.n	8010130 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3730      	adds	r7, #48	; 0x30
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	0801a574 	.word	0x0801a574
 801013c:	0801a658 	.word	0x0801a658
 8010140:	0801a5bc 	.word	0x0801a5bc
 8010144:	0801a678 	.word	0x0801a678
 8010148:	0801a6b0 	.word	0x0801a6b0
 801014c:	0801a6c0 	.word	0x0801a6c0

08010150 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b08e      	sub	sp, #56	; 0x38
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	f003 030f 	and.w	r3, r3, #15
 8010166:	b2db      	uxtb	r3, r3
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b14      	cmp	r3, #20
 801016e:	f040 8167 	bne.w	8010440 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	88db      	ldrh	r3, [r3, #6]
 8010176:	b29b      	uxth	r3, r3
 8010178:	4618      	mov	r0, r3
 801017a:	f7f6 f88d 	bl	8006298 <lwip_htons>
 801017e:	4603      	mov	r3, r0
 8010180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010184:	b29b      	uxth	r3, r3
 8010186:	00db      	lsls	r3, r3, #3
 8010188:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801018a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018c:	885b      	ldrh	r3, [r3, #2]
 801018e:	b29b      	uxth	r3, r3
 8010190:	4618      	mov	r0, r3
 8010192:	f7f6 f881 	bl	8006298 <lwip_htons>
 8010196:	4603      	mov	r3, r0
 8010198:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801019a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 030f 	and.w	r3, r3, #15
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80101aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101b2:	429a      	cmp	r2, r3
 80101b4:	f0c0 8146 	bcc.w	8010444 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80101b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101bc:	b29b      	uxth	r3, r3
 80101be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7f7 fba3 	bl	8007910 <pbuf_clen>
 80101ca:	4603      	mov	r3, r0
 80101cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80101ce:	4b9f      	ldr	r3, [pc, #636]	; (801044c <ip4_reass+0x2fc>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	461a      	mov	r2, r3
 80101d4:	8c3b      	ldrh	r3, [r7, #32]
 80101d6:	4413      	add	r3, r2
 80101d8:	2b0a      	cmp	r3, #10
 80101da:	dd10      	ble.n	80101fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80101dc:	8c3b      	ldrh	r3, [r7, #32]
 80101de:	4619      	mov	r1, r3
 80101e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101e2:	f7ff fd81 	bl	800fce8 <ip_reass_remove_oldest_datagram>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f000 812d 	beq.w	8010448 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80101ee:	4b97      	ldr	r3, [pc, #604]	; (801044c <ip4_reass+0x2fc>)
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	461a      	mov	r2, r3
 80101f4:	8c3b      	ldrh	r3, [r7, #32]
 80101f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80101f8:	2b0a      	cmp	r3, #10
 80101fa:	f300 8125 	bgt.w	8010448 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80101fe:	4b94      	ldr	r3, [pc, #592]	; (8010450 <ip4_reass+0x300>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	633b      	str	r3, [r7, #48]	; 0x30
 8010204:	e015      	b.n	8010232 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010208:	695a      	ldr	r2, [r3, #20]
 801020a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	429a      	cmp	r2, r3
 8010210:	d10c      	bne.n	801022c <ip4_reass+0xdc>
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	699a      	ldr	r2, [r3, #24]
 8010216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	429a      	cmp	r2, r3
 801021c:	d106      	bne.n	801022c <ip4_reass+0xdc>
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	899a      	ldrh	r2, [r3, #12]
 8010222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010224:	889b      	ldrh	r3, [r3, #4]
 8010226:	b29b      	uxth	r3, r3
 8010228:	429a      	cmp	r2, r3
 801022a:	d006      	beq.n	801023a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801022c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	633b      	str	r3, [r7, #48]	; 0x30
 8010232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1e6      	bne.n	8010206 <ip4_reass+0xb6>
 8010238:	e000      	b.n	801023c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801023a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801023c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023e:	2b00      	cmp	r3, #0
 8010240:	d109      	bne.n	8010256 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010242:	8c3b      	ldrh	r3, [r7, #32]
 8010244:	4619      	mov	r1, r3
 8010246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010248:	f7ff fdb0 	bl	800fdac <ip_reass_enqueue_new_datagram>
 801024c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010250:	2b00      	cmp	r3, #0
 8010252:	d11c      	bne.n	801028e <ip4_reass+0x13e>
      goto nullreturn;
 8010254:	e109      	b.n	801046a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010258:	88db      	ldrh	r3, [r3, #6]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	f7f6 f81b 	bl	8006298 <lwip_htons>
 8010262:	4603      	mov	r3, r0
 8010264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010268:	2b00      	cmp	r3, #0
 801026a:	d110      	bne.n	801028e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	89db      	ldrh	r3, [r3, #14]
 8010270:	4618      	mov	r0, r3
 8010272:	f7f6 f811 	bl	8006298 <lwip_htons>
 8010276:	4603      	mov	r3, r0
 8010278:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801027c:	2b00      	cmp	r3, #0
 801027e:	d006      	beq.n	801028e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010282:	3308      	adds	r3, #8
 8010284:	2214      	movs	r2, #20
 8010286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010288:	4618      	mov	r0, r3
 801028a:	f006 fd2f 	bl	8016cec <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801028e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010290:	88db      	ldrh	r3, [r3, #6]
 8010292:	b29b      	uxth	r3, r3
 8010294:	f003 0320 	and.w	r3, r3, #32
 8010298:	2b00      	cmp	r3, #0
 801029a:	bf0c      	ite	eq
 801029c:	2301      	moveq	r3, #1
 801029e:	2300      	movne	r3, #0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00e      	beq.n	80102c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80102aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80102ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102ae:	4413      	add	r3, r2
 80102b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80102b2:	8b7a      	ldrh	r2, [r7, #26]
 80102b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80102b6:	429a      	cmp	r2, r3
 80102b8:	f0c0 80a0 	bcc.w	80103fc <ip4_reass+0x2ac>
 80102bc:	8b7b      	ldrh	r3, [r7, #26]
 80102be:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80102c2:	4293      	cmp	r3, r2
 80102c4:	f200 809a 	bhi.w	80103fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80102c8:	69fa      	ldr	r2, [r7, #28]
 80102ca:	6879      	ldr	r1, [r7, #4]
 80102cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ce:	f7ff fdd5 	bl	800fe7c <ip_reass_chain_frag_into_datagram_and_validate>
 80102d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102da:	f000 8091 	beq.w	8010400 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80102de:	4b5b      	ldr	r3, [pc, #364]	; (801044c <ip4_reass+0x2fc>)
 80102e0:	881a      	ldrh	r2, [r3, #0]
 80102e2:	8c3b      	ldrh	r3, [r7, #32]
 80102e4:	4413      	add	r3, r2
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	4b58      	ldr	r3, [pc, #352]	; (801044c <ip4_reass+0x2fc>)
 80102ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00d      	beq.n	801030e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80102f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80102f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f6:	4413      	add	r3, r2
 80102f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80102fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fc:	8a7a      	ldrh	r2, [r7, #18]
 80102fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010302:	7f9b      	ldrb	r3, [r3, #30]
 8010304:	f043 0301 	orr.w	r3, r3, #1
 8010308:	b2da      	uxtb	r2, r3
 801030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d171      	bne.n	80103f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	8b9b      	ldrh	r3, [r3, #28]
 8010318:	3314      	adds	r3, #20
 801031a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801031c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	3308      	adds	r3, #8
 8010332:	2214      	movs	r2, #20
 8010334:	4619      	mov	r1, r3
 8010336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010338:	f006 fcd8 	bl	8016cec <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801033c:	8a3b      	ldrh	r3, [r7, #16]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f5 ffaa 	bl	8006298 <lwip_htons>
 8010344:	4603      	mov	r3, r0
 8010346:	461a      	mov	r2, r3
 8010348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801034c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034e:	2200      	movs	r2, #0
 8010350:	719a      	strb	r2, [r3, #6]
 8010352:	2200      	movs	r2, #0
 8010354:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010358:	2200      	movs	r2, #0
 801035a:	729a      	strb	r2, [r3, #10]
 801035c:	2200      	movs	r2, #0
 801035e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010366:	e00d      	b.n	8010384 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801036e:	2114      	movs	r1, #20
 8010370:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010372:	f7f7 f9bf 	bl	80076f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010376:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f7f7 fb03 	bl	8007984 <pbuf_cat>
      r = iprh->next_pbuf;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010386:	2b00      	cmp	r3, #0
 8010388:	d1ee      	bne.n	8010368 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801038a:	4b31      	ldr	r3, [pc, #196]	; (8010450 <ip4_reass+0x300>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010390:	429a      	cmp	r2, r3
 8010392:	d102      	bne.n	801039a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010394:	2300      	movs	r3, #0
 8010396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010398:	e010      	b.n	80103bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801039a:	4b2d      	ldr	r3, [pc, #180]	; (8010450 <ip4_reass+0x300>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103a0:	e007      	b.n	80103b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d006      	beq.n	80103ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80103ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d1f4      	bne.n	80103a2 <ip4_reass+0x252>
 80103b8:	e000      	b.n	80103bc <ip4_reass+0x26c>
          break;
 80103ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80103bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103c0:	f7ff fd2e 	bl	800fe20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7f7 faa3 	bl	8007910 <pbuf_clen>
 80103ca:	4603      	mov	r3, r0
 80103cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80103ce:	4b1f      	ldr	r3, [pc, #124]	; (801044c <ip4_reass+0x2fc>)
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	8c3a      	ldrh	r2, [r7, #32]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d906      	bls.n	80103e6 <ip4_reass+0x296>
 80103d8:	4b1e      	ldr	r3, [pc, #120]	; (8010454 <ip4_reass+0x304>)
 80103da:	f240 229b 	movw	r2, #667	; 0x29b
 80103de:	491e      	ldr	r1, [pc, #120]	; (8010458 <ip4_reass+0x308>)
 80103e0:	481e      	ldr	r0, [pc, #120]	; (801045c <ip4_reass+0x30c>)
 80103e2:	f006 fc99 	bl	8016d18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80103e6:	4b19      	ldr	r3, [pc, #100]	; (801044c <ip4_reass+0x2fc>)
 80103e8:	881a      	ldrh	r2, [r3, #0]
 80103ea:	8c3b      	ldrh	r3, [r7, #32]
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	4b16      	ldr	r3, [pc, #88]	; (801044c <ip4_reass+0x2fc>)
 80103f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	e03c      	b.n	8010472 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80103f8:	2300      	movs	r3, #0
 80103fa:	e03a      	b.n	8010472 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80103fc:	bf00      	nop
 80103fe:	e000      	b.n	8010402 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010400:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	2b00      	cmp	r3, #0
 8010406:	d106      	bne.n	8010416 <ip4_reass+0x2c6>
 8010408:	4b12      	ldr	r3, [pc, #72]	; (8010454 <ip4_reass+0x304>)
 801040a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801040e:	4914      	ldr	r1, [pc, #80]	; (8010460 <ip4_reass+0x310>)
 8010410:	4812      	ldr	r0, [pc, #72]	; (801045c <ip4_reass+0x30c>)
 8010412:	f006 fc81 	bl	8016d18 <iprintf>
  if (ipr->p == NULL) {
 8010416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d124      	bne.n	8010468 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801041e:	4b0c      	ldr	r3, [pc, #48]	; (8010450 <ip4_reass+0x300>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010424:	429a      	cmp	r2, r3
 8010426:	d006      	beq.n	8010436 <ip4_reass+0x2e6>
 8010428:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <ip4_reass+0x304>)
 801042a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801042e:	490d      	ldr	r1, [pc, #52]	; (8010464 <ip4_reass+0x314>)
 8010430:	480a      	ldr	r0, [pc, #40]	; (801045c <ip4_reass+0x30c>)
 8010432:	f006 fc71 	bl	8016d18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010436:	2100      	movs	r1, #0
 8010438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801043a:	f7ff fcf1 	bl	800fe20 <ip_reass_dequeue_datagram>
 801043e:	e014      	b.n	801046a <ip4_reass+0x31a>
    goto nullreturn;
 8010440:	bf00      	nop
 8010442:	e012      	b.n	801046a <ip4_reass+0x31a>
    goto nullreturn;
 8010444:	bf00      	nop
 8010446:	e010      	b.n	801046a <ip4_reass+0x31a>
      goto nullreturn;
 8010448:	bf00      	nop
 801044a:	e00e      	b.n	801046a <ip4_reass+0x31a>
 801044c:	20000208 	.word	0x20000208
 8010450:	20000204 	.word	0x20000204
 8010454:	0801a574 	.word	0x0801a574
 8010458:	0801a6e4 	.word	0x0801a6e4
 801045c:	0801a5bc 	.word	0x0801a5bc
 8010460:	0801a700 	.word	0x0801a700
 8010464:	0801a70c 	.word	0x0801a70c
  }

nullreturn:
 8010468:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7f7 f9c8 	bl	8007800 <pbuf_free>
  return NULL;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3738      	adds	r7, #56	; 0x38
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop

0801047c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010480:	2005      	movs	r0, #5
 8010482:	f7f6 fb5f 	bl	8006b44 <memp_malloc>
 8010486:	4603      	mov	r3, r0
}
 8010488:	4618      	mov	r0, r3
 801048a:	bd80      	pop	{r7, pc}

0801048c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d106      	bne.n	80104a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801049a:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801049c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80104a0:	4906      	ldr	r1, [pc, #24]	; (80104bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80104a2:	4807      	ldr	r0, [pc, #28]	; (80104c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80104a4:	f006 fc38 	bl	8016d18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	2005      	movs	r0, #5
 80104ac:	f7f6 fb96 	bl	8006bdc <memp_free>
}
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	0801a574 	.word	0x0801a574
 80104bc:	0801a72c 	.word	0x0801a72c
 80104c0:	0801a5bc 	.word	0x0801a5bc

080104c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d106      	bne.n	80104e4 <ipfrag_free_pbuf_custom+0x20>
 80104d6:	4b11      	ldr	r3, [pc, #68]	; (801051c <ipfrag_free_pbuf_custom+0x58>)
 80104d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80104dc:	4910      	ldr	r1, [pc, #64]	; (8010520 <ipfrag_free_pbuf_custom+0x5c>)
 80104de:	4811      	ldr	r0, [pc, #68]	; (8010524 <ipfrag_free_pbuf_custom+0x60>)
 80104e0:	f006 fc1a 	bl	8016d18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d006      	beq.n	80104fa <ipfrag_free_pbuf_custom+0x36>
 80104ec:	4b0b      	ldr	r3, [pc, #44]	; (801051c <ipfrag_free_pbuf_custom+0x58>)
 80104ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80104f2:	490d      	ldr	r1, [pc, #52]	; (8010528 <ipfrag_free_pbuf_custom+0x64>)
 80104f4:	480b      	ldr	r0, [pc, #44]	; (8010524 <ipfrag_free_pbuf_custom+0x60>)
 80104f6:	f006 fc0f 	bl	8016d18 <iprintf>
  if (pcr->original != NULL) {
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d004      	beq.n	801050c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	4618      	mov	r0, r3
 8010508:	f7f7 f97a 	bl	8007800 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff ffbd 	bl	801048c <ip_frag_free_pbuf_custom_ref>
}
 8010512:	bf00      	nop
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	0801a574 	.word	0x0801a574
 8010520:	0801a738 	.word	0x0801a738
 8010524:	0801a5bc 	.word	0x0801a5bc
 8010528:	0801a744 	.word	0x0801a744

0801052c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b094      	sub	sp, #80	; 0x50
 8010530:	af02      	add	r7, sp, #8
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010542:	3b14      	subs	r3, #20
 8010544:	2b00      	cmp	r3, #0
 8010546:	da00      	bge.n	801054a <ip4_frag+0x1e>
 8010548:	3307      	adds	r3, #7
 801054a:	10db      	asrs	r3, r3, #3
 801054c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801054e:	2314      	movs	r3, #20
 8010550:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	f003 030f 	and.w	r3, r3, #15
 8010564:	b2db      	uxtb	r3, r3
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	b2db      	uxtb	r3, r3
 801056a:	2b14      	cmp	r3, #20
 801056c:	d002      	beq.n	8010574 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801056e:	f06f 0305 	mvn.w	r3, #5
 8010572:	e110      	b.n	8010796 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	895b      	ldrh	r3, [r3, #10]
 8010578:	2b13      	cmp	r3, #19
 801057a:	d809      	bhi.n	8010590 <ip4_frag+0x64>
 801057c:	4b88      	ldr	r3, [pc, #544]	; (80107a0 <ip4_frag+0x274>)
 801057e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010582:	4988      	ldr	r1, [pc, #544]	; (80107a4 <ip4_frag+0x278>)
 8010584:	4888      	ldr	r0, [pc, #544]	; (80107a8 <ip4_frag+0x27c>)
 8010586:	f006 fbc7 	bl	8016d18 <iprintf>
 801058a:	f06f 0305 	mvn.w	r3, #5
 801058e:	e102      	b.n	8010796 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010592:	88db      	ldrh	r3, [r3, #6]
 8010594:	b29b      	uxth	r3, r3
 8010596:	4618      	mov	r0, r3
 8010598:	f7f5 fe7e 	bl	8006298 <lwip_htons>
 801059c:	4603      	mov	r3, r0
 801059e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80105a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80105aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80105b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	891b      	ldrh	r3, [r3, #8]
 80105b6:	3b14      	subs	r3, #20
 80105b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80105bc:	e0e1      	b.n	8010782 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80105be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105c8:	4293      	cmp	r3, r2
 80105ca:	bf28      	it	cs
 80105cc:	4613      	movcs	r3, r2
 80105ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80105d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105d4:	2114      	movs	r1, #20
 80105d6:	200e      	movs	r0, #14
 80105d8:	f7f6 fe2e 	bl	8007238 <pbuf_alloc>
 80105dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 80d5 	beq.w	8010790 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80105e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e8:	895b      	ldrh	r3, [r3, #10]
 80105ea:	2b13      	cmp	r3, #19
 80105ec:	d806      	bhi.n	80105fc <ip4_frag+0xd0>
 80105ee:	4b6c      	ldr	r3, [pc, #432]	; (80107a0 <ip4_frag+0x274>)
 80105f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80105f4:	496d      	ldr	r1, [pc, #436]	; (80107ac <ip4_frag+0x280>)
 80105f6:	486c      	ldr	r0, [pc, #432]	; (80107a8 <ip4_frag+0x27c>)
 80105f8:	f006 fb8e 	bl	8016d18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	2214      	movs	r2, #20
 8010602:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010604:	4618      	mov	r0, r3
 8010606:	f006 fb71 	bl	8016cec <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010612:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010616:	e064      	b.n	80106e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	895a      	ldrh	r2, [r3, #10]
 801061c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801061e:	1ad3      	subs	r3, r2, r3
 8010620:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	895b      	ldrh	r3, [r3, #10]
 8010626:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010628:	429a      	cmp	r2, r3
 801062a:	d906      	bls.n	801063a <ip4_frag+0x10e>
 801062c:	4b5c      	ldr	r3, [pc, #368]	; (80107a0 <ip4_frag+0x274>)
 801062e:	f240 322d 	movw	r2, #813	; 0x32d
 8010632:	495f      	ldr	r1, [pc, #380]	; (80107b0 <ip4_frag+0x284>)
 8010634:	485c      	ldr	r0, [pc, #368]	; (80107a8 <ip4_frag+0x27c>)
 8010636:	f006 fb6f 	bl	8016d18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801063a:	8bfa      	ldrh	r2, [r7, #30]
 801063c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010640:	4293      	cmp	r3, r2
 8010642:	bf28      	it	cs
 8010644:	4613      	movcs	r3, r2
 8010646:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801064a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801064e:	2b00      	cmp	r3, #0
 8010650:	d105      	bne.n	801065e <ip4_frag+0x132>
        poff = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]
        continue;
 801065c:	e041      	b.n	80106e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801065e:	f7ff ff0d 	bl	801047c <ip_frag_alloc_pbuf_custom_ref>
 8010662:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d103      	bne.n	8010672 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801066a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801066c:	f7f7 f8c8 	bl	8007800 <pbuf_free>
        goto memerr;
 8010670:	e08f      	b.n	8010792 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010672:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010678:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801067a:	4413      	add	r3, r2
 801067c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010680:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010684:	9201      	str	r2, [sp, #4]
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	4603      	mov	r3, r0
 801068a:	2241      	movs	r2, #65	; 0x41
 801068c:	2000      	movs	r0, #0
 801068e:	f7f6 fefd 	bl	800748c <pbuf_alloced_custom>
 8010692:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d106      	bne.n	80106a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801069a:	69b8      	ldr	r0, [r7, #24]
 801069c:	f7ff fef6 	bl	801048c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80106a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106a2:	f7f7 f8ad 	bl	8007800 <pbuf_free>
        goto memerr;
 80106a6:	e074      	b.n	8010792 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7f7 f949 	bl	8007940 <pbuf_ref>
      pcr->original = p;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	4a3f      	ldr	r2, [pc, #252]	; (80107b4 <ip4_frag+0x288>)
 80106b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80106ba:	6979      	ldr	r1, [r7, #20]
 80106bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106be:	f7f7 f961 	bl	8007984 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80106c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80106c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80106d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d004      	beq.n	80106e2 <ip4_frag+0x1b6>
        poff = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80106e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d196      	bne.n	8010618 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80106ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80106ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80106f0:	4413      	add	r3, r2
 80106f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80106f8:	f1a3 0213 	sub.w	r2, r3, #19
 80106fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010700:	429a      	cmp	r2, r3
 8010702:	bfcc      	ite	gt
 8010704:	2301      	movgt	r3, #1
 8010706:	2300      	movle	r3, #0
 8010708:	b2db      	uxtb	r3, r3
 801070a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801070c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010714:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <ip4_frag+0x1f6>
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	2b00      	cmp	r3, #0
 8010720:	d003      	beq.n	801072a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010728:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801072a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801072c:	4618      	mov	r0, r3
 801072e:	f7f5 fdb3 	bl	8006298 <lwip_htons>
 8010732:	4603      	mov	r3, r0
 8010734:	461a      	mov	r2, r3
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801073a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801073c:	3314      	adds	r3, #20
 801073e:	b29b      	uxth	r3, r3
 8010740:	4618      	mov	r0, r3
 8010742:	f7f5 fda9 	bl	8006298 <lwip_htons>
 8010746:	4603      	mov	r3, r0
 8010748:	461a      	mov	r2, r3
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801074e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010750:	2200      	movs	r2, #0
 8010752:	729a      	strb	r2, [r3, #10]
 8010754:	2200      	movs	r2, #0
 8010756:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	695b      	ldr	r3, [r3, #20]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010760:	68b8      	ldr	r0, [r7, #8]
 8010762:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010766:	f7f7 f84b 	bl	8007800 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801076a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801076e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010776:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801077a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801077c:	4413      	add	r3, r2
 801077e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010782:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010786:	2b00      	cmp	r3, #0
 8010788:	f47f af19 	bne.w	80105be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	e002      	b.n	8010796 <ip4_frag+0x26a>
      goto memerr;
 8010790:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010796:	4618      	mov	r0, r3
 8010798:	3748      	adds	r7, #72	; 0x48
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	0801a574 	.word	0x0801a574
 80107a4:	0801a750 	.word	0x0801a750
 80107a8:	0801a5bc 	.word	0x0801a5bc
 80107ac:	0801a76c 	.word	0x0801a76c
 80107b0:	0801a78c 	.word	0x0801a78c
 80107b4:	080104c5 	.word	0x080104c5

080107b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80107c2:	230e      	movs	r3, #14
 80107c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	895b      	ldrh	r3, [r3, #10]
 80107ca:	2b0e      	cmp	r3, #14
 80107cc:	d96e      	bls.n	80108ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	7bdb      	ldrb	r3, [r3, #15]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d106      	bne.n	80107e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107dc:	3301      	adds	r3, #1
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	7b1a      	ldrb	r2, [r3, #12]
 80107ee:	7b5b      	ldrb	r3, [r3, #13]
 80107f0:	021b      	lsls	r3, r3, #8
 80107f2:	4313      	orrs	r3, r2
 80107f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	f003 0301 	and.w	r3, r3, #1
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d023      	beq.n	801084a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d10f      	bne.n	801082a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	785b      	ldrb	r3, [r3, #1]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d11b      	bne.n	801084a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010816:	2b5e      	cmp	r3, #94	; 0x5e
 8010818:	d117      	bne.n	801084a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	7b5b      	ldrb	r3, [r3, #13]
 801081e:	f043 0310 	orr.w	r3, r3, #16
 8010822:	b2da      	uxtb	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	735a      	strb	r2, [r3, #13]
 8010828:	e00f      	b.n	801084a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	2206      	movs	r2, #6
 801082e:	4928      	ldr	r1, [pc, #160]	; (80108d0 <ethernet_input+0x118>)
 8010830:	4618      	mov	r0, r3
 8010832:	f006 fa4d 	bl	8016cd0 <memcmp>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d106      	bne.n	801084a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	7b5b      	ldrb	r3, [r3, #13]
 8010840:	f043 0308 	orr.w	r3, r3, #8
 8010844:	b2da      	uxtb	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801084a:	89fb      	ldrh	r3, [r7, #14]
 801084c:	2b08      	cmp	r3, #8
 801084e:	d003      	beq.n	8010858 <ethernet_input+0xa0>
 8010850:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010854:	d014      	beq.n	8010880 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010856:	e032      	b.n	80108be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801085e:	f003 0308 	and.w	r3, r3, #8
 8010862:	2b00      	cmp	r3, #0
 8010864:	d024      	beq.n	80108b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010866:	8afb      	ldrh	r3, [r7, #22]
 8010868:	4619      	mov	r1, r3
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7f6 ff42 	bl	80076f4 <pbuf_remove_header>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d11e      	bne.n	80108b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010876:	6839      	ldr	r1, [r7, #0]
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7fe ff27 	bl	800f6cc <ip4_input>
      break;
 801087e:	e013      	b.n	80108a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010886:	f003 0308 	and.w	r3, r3, #8
 801088a:	2b00      	cmp	r3, #0
 801088c:	d014      	beq.n	80108b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801088e:	8afb      	ldrh	r3, [r7, #22]
 8010890:	4619      	mov	r1, r3
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7f6 ff2e 	bl	80076f4 <pbuf_remove_header>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10e      	bne.n	80108bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7fe f8c7 	bl	800ea34 <etharp_input>
      break;
 80108a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	e00c      	b.n	80108c6 <ethernet_input+0x10e>
    goto free_and_return;
 80108ac:	bf00      	nop
 80108ae:	e006      	b.n	80108be <ethernet_input+0x106>
        goto free_and_return;
 80108b0:	bf00      	nop
 80108b2:	e004      	b.n	80108be <ethernet_input+0x106>
        goto free_and_return;
 80108b4:	bf00      	nop
 80108b6:	e002      	b.n	80108be <ethernet_input+0x106>
        goto free_and_return;
 80108b8:	bf00      	nop
 80108ba:	e000      	b.n	80108be <ethernet_input+0x106>
        goto free_and_return;
 80108bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f7f6 ff9e 	bl	8007800 <pbuf_free>
  return ERR_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3718      	adds	r7, #24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	0801a9a8 	.word	0x0801a9a8

080108d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
 80108e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80108e2:	8c3b      	ldrh	r3, [r7, #32]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7f5 fcd7 	bl	8006298 <lwip_htons>
 80108ea:	4603      	mov	r3, r0
 80108ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80108ee:	210e      	movs	r1, #14
 80108f0:	68b8      	ldr	r0, [r7, #8]
 80108f2:	f7f6 feef 	bl	80076d4 <pbuf_add_header>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d125      	bne.n	8010948 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	8afa      	ldrh	r2, [r7, #22]
 8010906:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	2206      	movs	r2, #6
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	4618      	mov	r0, r3
 8010910:	f006 f9ec 	bl	8016cec <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	3306      	adds	r3, #6
 8010918:	2206      	movs	r2, #6
 801091a:	6879      	ldr	r1, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	f006 f9e5 	bl	8016cec <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010928:	2b06      	cmp	r3, #6
 801092a:	d006      	beq.n	801093a <ethernet_output+0x66>
 801092c:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <ethernet_output+0x84>)
 801092e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010932:	490a      	ldr	r1, [pc, #40]	; (801095c <ethernet_output+0x88>)
 8010934:	480a      	ldr	r0, [pc, #40]	; (8010960 <ethernet_output+0x8c>)
 8010936:	f006 f9ef 	bl	8016d18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	68b9      	ldr	r1, [r7, #8]
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	4798      	blx	r3
 8010944:	4603      	mov	r3, r0
 8010946:	e002      	b.n	801094e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010948:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801094a:	f06f 0301 	mvn.w	r3, #1
}
 801094e:	4618      	mov	r0, r3
 8010950:	3718      	adds	r7, #24
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	0801a79c 	.word	0x0801a79c
 801095c:	0801a7d4 	.word	0x0801a7d4
 8010960:	0801a808 	.word	0x0801a808

08010964 <tcp_server_init>:
  * @brief  Initializes the tcp  server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_server_pcb = tcp_new();
 801096a:	f7f8 fd91 	bl	8009490 <tcp_new>
 801096e:	4603      	mov	r3, r0
 8010970:	4a19      	ldr	r2, [pc, #100]	; (80109d8 <tcp_server_init+0x74>)
 8010972:	6013      	str	r3, [r2, #0]

  if (tcp_server_pcb != NULL)
 8010974:	4b18      	ldr	r3, [pc, #96]	; (80109d8 <tcp_server_init+0x74>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d025      	beq.n	80109c8 <tcp_server_init+0x64>
  {
    err_t err;
    ip4_addr_t ipAddress;
    IP4_ADDR(&ipAddress, 192, 168, 100, 1);
 801097c:	4b17      	ldr	r3, [pc, #92]	; (80109dc <tcp_server_init+0x78>)
 801097e:	603b      	str	r3, [r7, #0]
    uint16_t port = 8000;
 8010980:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010984:	80fb      	strh	r3, [r7, #6]

    /* bind _pcb to port 7 ( protocol) */
    //err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 7);

    err = tcp_bind(tcp_server_pcb, &ipAddress, port);
 8010986:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <tcp_server_init+0x74>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	88fa      	ldrh	r2, [r7, #6]
 801098c:	4639      	mov	r1, r7
 801098e:	4618      	mov	r0, r3
 8010990:	f7f7 fcda 	bl	8008348 <tcp_bind>
 8010994:	4603      	mov	r3, r0
 8010996:	717b      	strb	r3, [r7, #5]

    if (err == ERR_OK)
 8010998:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d10f      	bne.n	80109c0 <tcp_server_init+0x5c>
    {
      /* start tcp listening for _pcb */
      tcp_server_pcb = tcp_listen(tcp_server_pcb);
 80109a0:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <tcp_server_init+0x74>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	21ff      	movs	r1, #255	; 0xff
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7f7 fd86 	bl	80084b8 <tcp_listen_with_backlog>
 80109ac:	4603      	mov	r3, r0
 80109ae:	4a0a      	ldr	r2, [pc, #40]	; (80109d8 <tcp_server_init+0x74>)
 80109b0:	6013      	str	r3, [r2, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_server_pcb, tcp_server_accept);
 80109b2:	4b09      	ldr	r3, [pc, #36]	; (80109d8 <tcp_server_init+0x74>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	490a      	ldr	r1, [pc, #40]	; (80109e0 <tcp_server_init+0x7c>)
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7f8 fde9 	bl	8009590 <tcp_accept>
  }
  else
  {
    printf("Can not create new pcb\n");
  }
}
 80109be:	e006      	b.n	80109ce <tcp_server_init+0x6a>
      printf("Can not bind pcb\n");
 80109c0:	4808      	ldr	r0, [pc, #32]	; (80109e4 <tcp_server_init+0x80>)
 80109c2:	f006 fa2f 	bl	8016e24 <puts>
}
 80109c6:	e002      	b.n	80109ce <tcp_server_init+0x6a>
    printf("Can not create new pcb\n");
 80109c8:	4807      	ldr	r0, [pc, #28]	; (80109e8 <tcp_server_init+0x84>)
 80109ca:	f006 fa2b 	bl	8016e24 <puts>
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2000020c 	.word	0x2000020c
 80109dc:	0164a8c0 	.word	0x0164a8c0
 80109e0:	080109ed 	.word	0x080109ed
 80109e4:	0801a830 	.word	0x0801a830
 80109e8:	0801a844 	.word	0x0801a844

080109ec <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b086      	sub	sp, #24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	4613      	mov	r3, r2
 80109f8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80109fa:	2101      	movs	r1, #1
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f7f8 fb55 	bl	80090ac <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8010a02:	200c      	movs	r0, #12
 8010a04:	f7f5 ff30 	bl	8006868 <mem_malloc>
 8010a08:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d01c      	beq.n	8010a4a <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	2201      	movs	r2, #1
 8010a14:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8010a22:	6939      	ldr	r1, [r7, #16]
 8010a24:	68b8      	ldr	r0, [r7, #8]
 8010a26:	f7f8 fd3b 	bl	80094a0 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8010a2a:	490c      	ldr	r1, [pc, #48]	; (8010a5c <tcp_server_accept+0x70>)
 8010a2c:	68b8      	ldr	r0, [r7, #8]
 8010a2e:	f7f8 fd49 	bl	80094c4 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8010a32:	490b      	ldr	r1, [pc, #44]	; (8010a60 <tcp_server_accept+0x74>)
 8010a34:	68b8      	ldr	r0, [r7, #8]
 8010a36:	f7f8 fd89 	bl	800954c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	4909      	ldr	r1, [pc, #36]	; (8010a64 <tcp_server_accept+0x78>)
 8010a3e:	68b8      	ldr	r0, [r7, #8]
 8010a40:	f7f8 fdbe 	bl	80095c0 <tcp_poll>

    ret_err = ERR_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	75fb      	strb	r3, [r7, #23]
 8010a48:	e001      	b.n	8010a4e <tcp_server_accept+0x62>
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
 8010a4a:	23ff      	movs	r3, #255	; 0xff
 8010a4c:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8010a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	08010a69 	.word	0x08010a69
 8010a60:	08010b79 	.word	0x08010b79
 8010a64:	08010b9d 	.word	0x08010b9d

08010a68 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b088      	sub	sp, #32
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d105      	bne.n	8010a88 <tcp_server_recv+0x20>
 8010a7c:	4b3a      	ldr	r3, [pc, #232]	; (8010b68 <tcp_server_recv+0x100>)
 8010a7e:	227b      	movs	r2, #123	; 0x7b
 8010a80:	493a      	ldr	r1, [pc, #232]	; (8010b6c <tcp_server_recv+0x104>)
 8010a82:	483b      	ldr	r0, [pc, #236]	; (8010b70 <tcp_server_recv+0x108>)
 8010a84:	f006 f948 	bl	8016d18 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d116      	bne.n	8010ac0 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	2203      	movs	r2, #3
 8010a96:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d104      	bne.n	8010aaa <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8010aa0:	69b9      	ldr	r1, [r7, #24]
 8010aa2:	68b8      	ldr	r0, [r7, #8]
 8010aa4:	f000 f92c 	bl	8010d00 <tcp_server_connection_close>
 8010aa8:	e007      	b.n	8010aba <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8010aaa:	4932      	ldr	r1, [pc, #200]	; (8010b74 <tcp_server_recv+0x10c>)
 8010aac:	68b8      	ldr	r0, [r7, #8]
 8010aae:	f7f8 fd2b 	bl	8009508 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8010ab2:	69b9      	ldr	r1, [r7, #24]
 8010ab4:	68b8      	ldr	r0, [r7, #8]
 8010ab6:	f000 f8b9 	bl	8010c2c <tcp_server_send>
    }
    ret_err = ERR_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	77fb      	strb	r3, [r7, #31]
 8010abe:	e04c      	b.n	8010b5a <tcp_server_recv+0xf2>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8010ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00b      	beq.n	8010ae0 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d005      	beq.n	8010ada <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7f6 fe93 	bl	8007800 <pbuf_free>
    }
    ret_err = err;
 8010ada:	78fb      	ldrb	r3, [r7, #3]
 8010adc:	77fb      	strb	r3, [r7, #31]
 8010ade:	e03c      	b.n	8010b5a <tcp_server_recv+0xf2>
  }
  else if(es->state == ES_ACCEPTED)
 8010ae0:	69bb      	ldr	r3, [r7, #24]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d110      	bne.n	8010b0a <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	2202      	movs	r2, #2
 8010aec:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8010af4:	491f      	ldr	r1, [pc, #124]	; (8010b74 <tcp_server_recv+0x10c>)
 8010af6:	68b8      	ldr	r0, [r7, #8]
 8010af8:	f7f8 fd06 	bl	8009508 <tcp_sent>

    /* send back the received data () */
    tcp_server_send(tpcb, es);
 8010afc:	69b9      	ldr	r1, [r7, #24]
 8010afe:	68b8      	ldr	r0, [r7, #8]
 8010b00:	f000 f894 	bl	8010c2c <tcp_server_send>

    ret_err = ERR_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	77fb      	strb	r3, [r7, #31]
 8010b08:	e027      	b.n	8010b5a <tcp_server_recv+0xf2>
  }
  else if (es->state == ES_RECEIVED)
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	d115      	bne.n	8010b3e <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8010b12:	69bb      	ldr	r3, [r7, #24]
 8010b14:	689b      	ldr	r3, [r3, #8]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d107      	bne.n	8010b2a <tcp_server_recv+0xc2>
    {
      es->p = p;
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 8010b20:	69b9      	ldr	r1, [r7, #24]
 8010b22:	68b8      	ldr	r0, [r7, #8]
 8010b24:	f000 f882 	bl	8010c2c <tcp_server_send>
 8010b28:	e006      	b.n	8010b38 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8010b30:	6879      	ldr	r1, [r7, #4]
 8010b32:	6978      	ldr	r0, [r7, #20]
 8010b34:	f7f6 ff7c 	bl	8007a30 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	77fb      	strb	r3, [r7, #31]
 8010b3c:	e00d      	b.n	8010b5a <tcp_server_recv+0xf2>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	891b      	ldrh	r3, [r3, #8]
 8010b42:	4619      	mov	r1, r3
 8010b44:	68b8      	ldr	r0, [r7, #8]
 8010b46:	f7f7 fdcd 	bl	80086e4 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7f6 fe55 	bl	8007800 <pbuf_free>
    ret_err = ERR_OK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8010b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3720      	adds	r7, #32
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	0801a85c 	.word	0x0801a85c
 8010b6c:	0801a878 	.word	0x0801a878
 8010b70:	0801a884 	.word	0x0801a884
 8010b74:	08010bef 	.word	0x08010bef

08010b78 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7f5 fd04 	bl	800659c <mem_free>
  }
}
 8010b94:	bf00      	nop
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d013      	beq.n	8010bd8 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d004      	beq.n	8010bc2 <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	6838      	ldr	r0, [r7, #0]
 8010bbc:	f000 f836 	bl	8010c2c <tcp_server_send>
 8010bc0:	e007      	b.n	8010bd2 <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	2b03      	cmp	r3, #3
 8010bc8:	d103      	bne.n	8010bd2 <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8010bca:	68b9      	ldr	r1, [r7, #8]
 8010bcc:	6838      	ldr	r0, [r7, #0]
 8010bce:	f000 f897 	bl	8010d00 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	73fb      	strb	r3, [r7, #15]
 8010bd6:	e004      	b.n	8010be2 <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8010bd8:	6838      	ldr	r0, [r7, #0]
 8010bda:	f7f7 fba9 	bl	8008330 <tcp_abort>
    ret_err = ERR_ABRT;
 8010bde:	23f3      	movs	r3, #243	; 0xf3
 8010be0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8010be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b086      	sub	sp, #24
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	60f8      	str	r0, [r7, #12]
 8010bf6:	60b9      	str	r1, [r7, #8]
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8010c08:	6979      	ldr	r1, [r7, #20]
 8010c0a:	68b8      	ldr	r0, [r7, #8]
 8010c0c:	f000 f80e 	bl	8010c2c <tcp_server_send>
 8010c10:	e007      	b.n	8010c22 <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d103      	bne.n	8010c22 <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 8010c1a:	6979      	ldr	r1, [r7, #20]
 8010c1c:	68b8      	ldr	r0, [r7, #8]
 8010c1e:	f000 f86f 	bl	8010d00 <tcp_server_connection_close>
  }
  return ERR_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8010c3a:	e04d      	b.n	8010cd8 <tcp_server_send+0xac>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	6859      	ldr	r1, [r3, #4]
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	895a      	ldrh	r2, [r3, #10]
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7fb fb65 	bl	800c31c <tcp_write>
 8010c52:	4603      	mov	r3, r0
 8010c54:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8010c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d134      	bne.n	8010cc8 <tcp_server_send+0x9c>
    {
      u16_t plen;

      plen = ptr->len;
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	895b      	ldrh	r3, [r3, #10]
 8010c62:	81fb      	strh	r3, [r7, #14]

      char *pReceived = (char*)mem_malloc((size_t)(plen + 1));
 8010c64:	89fb      	ldrh	r3, [r7, #14]
 8010c66:	3301      	adds	r3, #1
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7f5 fdfc 	bl	8006868 <mem_malloc>
 8010c70:	60b8      	str	r0, [r7, #8]
      memcpy(pReceived, ptr->payload, plen);
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	89fa      	ldrh	r2, [r7, #14]
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68b8      	ldr	r0, [r7, #8]
 8010c7c:	f006 f836 	bl	8016cec <memcpy>
      memset(pReceived + plen, 0, 1);
 8010c80:	89fb      	ldrh	r3, [r7, #14]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	4413      	add	r3, r2
 8010c86:	2201      	movs	r2, #1
 8010c88:	2100      	movs	r1, #0
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f006 f83c 	bl	8016d08 <memset>
      printf("%s\n", pReceived);
 8010c90:	68b8      	ldr	r0, [r7, #8]
 8010c92:	f006 f8c7 	bl	8016e24 <puts>
      mem_free(pReceived);
 8010c96:	68b8      	ldr	r0, [r7, #8]
 8010c98:	f7f5 fc80 	bl	800659c <mem_free>

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d004      	beq.n	8010cb6 <tcp_server_send+0x8a>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7f6 fe45 	bl	8007940 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8010cb6:	6938      	ldr	r0, [r7, #16]
 8010cb8:	f7f6 fda2 	bl	8007800 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8010cbc:	89fb      	ldrh	r3, [r7, #14]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7f7 fd0f 	bl	80086e4 <tcp_recved>
 8010cc6:	e007      	b.n	8010cd8 <tcp_server_send+0xac>
   }
   else if(wr_err == ERR_MEM)
 8010cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd0:	d102      	bne.n	8010cd8 <tcp_server_send+0xac>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	693a      	ldr	r2, [r7, #16]
 8010cd6:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8010cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10b      	bne.n	8010cf8 <tcp_server_send+0xcc>
         (es->p != NULL) &&
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d007      	beq.n	8010cf8 <tcp_server_send+0xcc>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	895a      	ldrh	r2, [r3, #10]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d9a1      	bls.n	8010c3c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8010cf8:	bf00      	nop
 8010cfa:	3718      	adds	r7, #24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f7f8 fbc7 	bl	80094a0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8010d12:	2100      	movs	r1, #0
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7f8 fbf7 	bl	8009508 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f8 fbd1 	bl	80094c4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8010d22:	2100      	movs	r1, #0
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7f8 fc11 	bl	800954c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7f8 fc46 	bl	80095c0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d002      	beq.n	8010d40 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8010d3a:	6838      	ldr	r0, [r7, #0]
 8010d3c:	f7f5 fc2e 	bl	800659c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7f7 fa0b 	bl	800815c <tcp_close>
}
 8010d46:	bf00      	nop
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <snake_control>:
/* Needed for getch - no*/

static uint32_t gPrgCycle = 0;

void snake_control(snake_t* snake)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b082      	sub	sp, #8
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
	platform_get_control(snake);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 fc82 	bl	8011660 <platform_get_control>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <snake_hw_init>:


void snake_hw_init(void)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	af00      	add	r7, sp, #0
	platform_init();
 8010d68:	f000 fc36 	bl	80115d8 <platform_init>
}
 8010d6c:	bf00      	nop
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <snake_init>:

void snake_init(snake_t* snake)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
	snake->length = SNAKE_INIT_LNG;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2203      	movs	r2, #3
 8010d7c:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	snake->direction = PAUSE;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2250      	movs	r2, #80	; 0x50
 8010d84:	701a      	strb	r2, [r3, #0]
	snake->state = PLAYING;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	snake->ghost.x = INVALID_COORDS;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d94:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	snake->ghost.y = INVALID_COORDS;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d9e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

	memset(&snake->body[0], 0, SNAKE_MAX_LNG*sizeof(coord_t));
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3302      	adds	r3, #2
 8010da6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010daa:	2100      	movs	r1, #0
 8010dac:	4618      	mov	r0, r3
 8010dae:	f005 ffab 	bl	8016d08 <memset>

	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8010db2:	2300      	movs	r3, #0
 8010db4:	60fb      	str	r3, [r7, #12]
 8010db6:	e012      	b.n	8010dde <snake_init+0x6e>
	{
		snake->body[idx].x = SNAKE_INIT_X_CORD + idx;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	b299      	uxth	r1, r3
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	460a      	mov	r2, r1
 8010dca:	805a      	strh	r2, [r3, #2]
		snake->body[idx].y = SNAKE_INIT_Y_CORD;
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4413      	add	r3, r2
 8010dd4:	220a      	movs	r2, #10
 8010dd6:	809a      	strh	r2, [r3, #4]
	for (int idx = 0; idx < SNAKE_INIT_LNG; idx++)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	60fb      	str	r3, [r7, #12]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	dde9      	ble.n	8010db8 <snake_init+0x48>
	}

	platform_refresh_hw();
 8010de4:	f000 fb5c 	bl	80114a0 <platform_refresh_hw>

}
 8010de8:	bf00      	nop
 8010dea:	3710      	adds	r7, #16
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <snake_display>:

void snake_display(snake_t* snake)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
	if (INVALID_COORDS != snake->ghost.x && INVALID_COORDS != snake->ghost.y)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8010dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d010      	beq.n	8010e28 <snake_display+0x38>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d009      	beq.n	8010e28 <snake_display+0x38>
	{
		platform_eraseCell(snake->ghost.x, snake->ghost.y);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8010e20:	4619      	mov	r1, r3
 8010e22:	4610      	mov	r0, r2
 8010e24:	f000 fb89 	bl	801153a <platform_eraseCell>
	}
	for (int idx = 0; idx < snake->length; idx++)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]
 8010e2c:	e00f      	b.n	8010e4e <snake_display+0x5e>
	{
		platform_drawCell(snake->body[idx].x, snake->body[idx].y);
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	4413      	add	r3, r2
 8010e36:	8858      	ldrh	r0, [r3, #2]
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	4413      	add	r3, r2
 8010e40:	889b      	ldrh	r3, [r3, #4]
 8010e42:	4619      	mov	r1, r3
 8010e44:	f000 fb33 	bl	80114ae <platform_drawCell>
	for (int idx = 0; idx < snake->length; idx++)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	60fb      	str	r3, [r7, #12]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010e54:	461a      	mov	r2, r3
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	dbe8      	blt.n	8010e2e <snake_display+0x3e>
	}
}
 8010e5c:	bf00      	nop
 8010e5e:	bf00      	nop
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
	...

08010e68 <snake_move>:
void snake_diplay_borders(void)
{
}

void snake_move(snake_t* snake)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
	if (NULL == snake || PAUSE == snake->direction)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 8196 	beq.w	80111a4 <snake_move+0x33c>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b50      	cmp	r3, #80	; 0x50
 8010e7e:	f000 8191 	beq.w	80111a4 <snake_move+0x33c>
	{
		return;
	}
	snake->ghost = snake->body[0];
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8010e8a:	3202      	adds	r2, #2
 8010e8c:	6812      	ldr	r2, [r2, #0]
 8010e8e:	601a      	str	r2, [r3, #0]
	memcpy(&snake->body[0], &snake->body[1], sizeof(coord_t) * (snake->length - 1));
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	1c98      	adds	r0, r3, #2
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	1d99      	adds	r1, r3, #6
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	f005 ff22 	bl	8016cec <memcpy>

	switch (snake->direction)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	3b41      	subs	r3, #65	; 0x41
 8010eae:	2b16      	cmp	r3, #22
 8010eb0:	f200 816e 	bhi.w	8011190 <snake_move+0x328>
 8010eb4:	a201      	add	r2, pc, #4	; (adr r2, 8010ebc <snake_move+0x54>)
 8010eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eba:	bf00      	nop
 8010ebc:	080110f3 	.word	0x080110f3
 8010ec0:	08011191 	.word	0x08011191
 8010ec4:	08011191 	.word	0x08011191
 8010ec8:	08011055 	.word	0x08011055
 8010ecc:	08011191 	.word	0x08011191
 8010ed0:	08011191 	.word	0x08011191
 8010ed4:	08011191 	.word	0x08011191
 8010ed8:	08011191 	.word	0x08011191
 8010edc:	08011191 	.word	0x08011191
 8010ee0:	08011191 	.word	0x08011191
 8010ee4:	08011191 	.word	0x08011191
 8010ee8:	08011191 	.word	0x08011191
 8010eec:	08011191 	.word	0x08011191
 8010ef0:	08011191 	.word	0x08011191
 8010ef4:	08011191 	.word	0x08011191
 8010ef8:	08011191 	.word	0x08011191
 8010efc:	08011191 	.word	0x08011191
 8010f00:	08011191 	.word	0x08011191
 8010f04:	08010fb7 	.word	0x08010fb7
 8010f08:	08011191 	.word	0x08011191
 8010f0c:	08011191 	.word	0x08011191
 8010f10:	08011191 	.word	0x08011191
 8010f14:	08010f19 	.word	0x08010f19
	{
	case UP:
	{
		if ((snake->body[snake->length - 1].y - 1) == ARENA_MIN_Y)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	889b      	ldrh	r3, [r3, #4]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d104      	bne.n	8010f36 <snake_move+0xce>
		{
			snake->state = CRASHED;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010f34:	e12c      	b.n	8011190 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8010f36:	2300      	movs	r3, #0
 8010f38:	617b      	str	r3, [r7, #20]
 8010f3a:	e025      	b.n	8010f88 <snake_move+0x120>
		{
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f42:	3b01      	subs	r3, #1
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	889b      	ldrh	r3, [r3, #4]
 8010f4c:	1e5a      	subs	r2, r3, #1
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	440b      	add	r3, r1
 8010f56:	889b      	ldrh	r3, [r3, #4]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d112      	bne.n	8010f82 <snake_move+0x11a>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f62:	3b01      	subs	r3, #1
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	4413      	add	r3, r2
 8010f6a:	885a      	ldrh	r2, [r3, #2]
 8010f6c:	6879      	ldr	r1, [r7, #4]
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	440b      	add	r3, r1
 8010f74:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y - 1) == snake->body[idx].y) &&
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d103      	bne.n	8010f82 <snake_move+0x11a>
			{
				snake->state = CRASHED;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	3301      	adds	r3, #1
 8010f86:	617b      	str	r3, [r7, #20]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f8e:	461a      	mov	r2, r3
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	4293      	cmp	r3, r2
 8010f94:	dbd2      	blt.n	8010f3c <snake_move+0xd4>
			}
		}
		snake->body[snake->length - 1].y--;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010f9c:	1e5a      	subs	r2, r3, #1
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	0093      	lsls	r3, r2, #2
 8010fa2:	440b      	add	r3, r1
 8010fa4:	889b      	ldrh	r3, [r3, #4]
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	b298      	uxth	r0, r3
 8010faa:	6879      	ldr	r1, [r7, #4]
 8010fac:	0093      	lsls	r3, r2, #2
 8010fae:	440b      	add	r3, r1
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	809a      	strh	r2, [r3, #4]
	}
	break;
 8010fb4:	e0ec      	b.n	8011190 <snake_move+0x328>
	case DOWN:
	{
		if ((snake->body[snake->length - 1].y + 1) == ARENA_MAX_Y)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	889b      	ldrh	r3, [r3, #4]
 8010fc6:	2b14      	cmp	r3, #20
 8010fc8:	d104      	bne.n	8010fd4 <snake_move+0x16c>
		{
			snake->state = CRASHED;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8010fd2:	e0dd      	b.n	8011190 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	613b      	str	r3, [r7, #16]
 8010fd8:	e025      	b.n	8011026 <snake_move+0x1be>
		{
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	4413      	add	r3, r2
 8010fe8:	889b      	ldrh	r3, [r3, #4]
 8010fea:	1c5a      	adds	r2, r3, #1
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	440b      	add	r3, r1
 8010ff4:	889b      	ldrh	r3, [r3, #4]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d112      	bne.n	8011020 <snake_move+0x1b8>
				((snake->body[snake->length - 1].x) == snake->body[idx].x))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011000:	3b01      	subs	r3, #1
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	885a      	ldrh	r2, [r3, #2]
 801100a:	6879      	ldr	r1, [r7, #4]
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	440b      	add	r3, r1
 8011012:	885b      	ldrh	r3, [r3, #2]
			if (((snake->body[snake->length - 1].y + 1) == snake->body[idx].y) &&
 8011014:	429a      	cmp	r2, r3
 8011016:	d103      	bne.n	8011020 <snake_move+0x1b8>
			{
				snake->state = CRASHED;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2201      	movs	r2, #1
 801101c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	3301      	adds	r3, #1
 8011024:	613b      	str	r3, [r7, #16]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801102c:	461a      	mov	r2, r3
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	4293      	cmp	r3, r2
 8011032:	dbd2      	blt.n	8010fda <snake_move+0x172>
			}
		}

		snake->body[snake->length - 1].y++;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801103a:	1e5a      	subs	r2, r3, #1
 801103c:	6879      	ldr	r1, [r7, #4]
 801103e:	0093      	lsls	r3, r2, #2
 8011040:	440b      	add	r3, r1
 8011042:	889b      	ldrh	r3, [r3, #4]
 8011044:	3301      	adds	r3, #1
 8011046:	b298      	uxth	r0, r3
 8011048:	6879      	ldr	r1, [r7, #4]
 801104a:	0093      	lsls	r3, r2, #2
 801104c:	440b      	add	r3, r1
 801104e:	4602      	mov	r2, r0
 8011050:	809a      	strh	r2, [r3, #4]
	}
	break;
 8011052:	e09d      	b.n	8011190 <snake_move+0x328>
	case RIGHT:
	{
		if ((snake->body[snake->length - 1].x + 1) == ARENA_MAX_X)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801105a:	3b01      	subs	r3, #1
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	4413      	add	r3, r2
 8011062:	885b      	ldrh	r3, [r3, #2]
 8011064:	2b0d      	cmp	r3, #13
 8011066:	d104      	bne.n	8011072 <snake_move+0x20a>
		{
			snake->state = CRASHED;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 8011070:	e08e      	b.n	8011190 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8011072:	2300      	movs	r3, #0
 8011074:	60fb      	str	r3, [r7, #12]
 8011076:	e025      	b.n	80110c4 <snake_move+0x25c>
		{
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801107e:	3b01      	subs	r3, #1
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	4413      	add	r3, r2
 8011086:	885b      	ldrh	r3, [r3, #2]
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	440b      	add	r3, r1
 8011092:	885b      	ldrh	r3, [r3, #2]
 8011094:	429a      	cmp	r2, r3
 8011096:	d112      	bne.n	80110be <snake_move+0x256>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801109e:	3b01      	subs	r3, #1
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4413      	add	r3, r2
 80110a6:	889a      	ldrh	r2, [r3, #4]
 80110a8:	6879      	ldr	r1, [r7, #4]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	440b      	add	r3, r1
 80110b0:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x + 1) == snake->body[idx].x) &&
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d103      	bne.n	80110be <snake_move+0x256>
			{
				snake->state = CRASHED;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2201      	movs	r2, #1
 80110ba:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	3301      	adds	r3, #1
 80110c2:	60fb      	str	r3, [r7, #12]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110ca:	461a      	mov	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	4293      	cmp	r3, r2
 80110d0:	dbd2      	blt.n	8011078 <snake_move+0x210>
			}
		}
		snake->body[snake->length - 1].x++;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110d8:	1e5a      	subs	r2, r3, #1
 80110da:	6879      	ldr	r1, [r7, #4]
 80110dc:	0093      	lsls	r3, r2, #2
 80110de:	440b      	add	r3, r1
 80110e0:	885b      	ldrh	r3, [r3, #2]
 80110e2:	3301      	adds	r3, #1
 80110e4:	b298      	uxth	r0, r3
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	0093      	lsls	r3, r2, #2
 80110ea:	440b      	add	r3, r1
 80110ec:	4602      	mov	r2, r0
 80110ee:	805a      	strh	r2, [r3, #2]
	}
	break;
 80110f0:	e04e      	b.n	8011190 <snake_move+0x328>
	case LEFT:
	{
		if ((snake->body[snake->length - 1].x - 1) == ARENA_MIN_X)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80110f8:	3b01      	subs	r3, #1
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	4413      	add	r3, r2
 8011100:	885b      	ldrh	r3, [r3, #2]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d104      	bne.n	8011110 <snake_move+0x2a8>
		{
			snake->state = CRASHED;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2201      	movs	r2, #1
 801110a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
			break;
 801110e:	e03f      	b.n	8011190 <snake_move+0x328>
		}
		for (int idx = 0; idx < snake->length; idx++)
 8011110:	2300      	movs	r3, #0
 8011112:	60bb      	str	r3, [r7, #8]
 8011114:	e025      	b.n	8011162 <snake_move+0x2fa>
		{
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801111c:	3b01      	subs	r3, #1
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4413      	add	r3, r2
 8011124:	885b      	ldrh	r3, [r3, #2]
 8011126:	1e5a      	subs	r2, r3, #1
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	440b      	add	r3, r1
 8011130:	885b      	ldrh	r3, [r3, #2]
 8011132:	429a      	cmp	r2, r3
 8011134:	d112      	bne.n	801115c <snake_move+0x2f4>
				((snake->body[snake->length - 1].y) == snake->body[idx].y))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 801113c:	3b01      	subs	r3, #1
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4413      	add	r3, r2
 8011144:	889a      	ldrh	r2, [r3, #4]
 8011146:	6879      	ldr	r1, [r7, #4]
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	440b      	add	r3, r1
 801114e:	889b      	ldrh	r3, [r3, #4]
			if (((snake->body[snake->length - 1].x - 1) == snake->body[idx].x) &&
 8011150:	429a      	cmp	r2, r3
 8011152:	d103      	bne.n	801115c <snake_move+0x2f4>
			{
				snake->state = CRASHED;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		for (int idx = 0; idx < snake->length; idx++)
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	3301      	adds	r3, #1
 8011160:	60bb      	str	r3, [r7, #8]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011168:	461a      	mov	r2, r3
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	4293      	cmp	r3, r2
 801116e:	dbd2      	blt.n	8011116 <snake_move+0x2ae>
			}
		}
		snake->body[snake->length - 1].x--;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011176:	1e5a      	subs	r2, r3, #1
 8011178:	6879      	ldr	r1, [r7, #4]
 801117a:	0093      	lsls	r3, r2, #2
 801117c:	440b      	add	r3, r1
 801117e:	885b      	ldrh	r3, [r3, #2]
 8011180:	3b01      	subs	r3, #1
 8011182:	b298      	uxth	r0, r3
 8011184:	6879      	ldr	r1, [r7, #4]
 8011186:	0093      	lsls	r3, r2, #2
 8011188:	440b      	add	r3, r1
 801118a:	4602      	mov	r2, r0
 801118c:	805a      	strh	r2, [r3, #2]
	}
	break;
 801118e:	bf00      	nop
	default:
	{
	}
	}

	if (snake->length == SNAKE_WON_LIMIT)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011196:	2b63      	cmp	r3, #99	; 0x63
 8011198:	d105      	bne.n	80111a6 <snake_move+0x33e>
	{
		snake->state = WON;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2202      	movs	r2, #2
 801119e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80111a2:	e000      	b.n	80111a6 <snake_move+0x33e>
		return;
 80111a4:	bf00      	nop
	}
}
 80111a6:	3718      	adds	r7, #24
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <generate_food>:

uint16_t generate_food(snake_t* snake, food_t *food)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
	uint16_t isInvalid = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	82fb      	strh	r3, [r7, #22]
	uint16_t iter = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	81fb      	strh	r3, [r7, #14]

	do
	{
		food->coord.x = (uint16_t)((platform_randomize() % (FOOD_MAX_X - FOOD_MIN_X + 1)) + FOOD_MIN_X);
 80111be:	f000 fa21 	bl	8011604 <platform_randomize>
 80111c2:	4603      	mov	r3, r0
 80111c4:	4619      	mov	r1, r3
 80111c6:	4b2e      	ldr	r3, [pc, #184]	; (8011280 <generate_food+0xd4>)
 80111c8:	fba3 2301 	umull	r2, r3, r3, r1
 80111cc:	089a      	lsrs	r2, r3, #2
 80111ce:	4613      	mov	r3, r2
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	4413      	add	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4413      	add	r3, r2
 80111d8:	1acb      	subs	r3, r1, r3
 80111da:	b29b      	uxth	r3, r3
 80111dc:	3301      	adds	r3, #1
 80111de:	b29a      	uxth	r2, r3
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	801a      	strh	r2, [r3, #0]
		food->coord.y = (uint16_t)((platform_randomize() % (FOOD_MAX_Y - FOOD_MIN_Y + 1)) + FOOD_MIN_Y);
 80111e4:	f000 fa0e 	bl	8011604 <platform_randomize>
 80111e8:	4603      	mov	r3, r0
 80111ea:	461a      	mov	r2, r3
 80111ec:	4b25      	ldr	r3, [pc, #148]	; (8011284 <generate_food+0xd8>)
 80111ee:	fba3 1302 	umull	r1, r3, r3, r2
 80111f2:	0919      	lsrs	r1, r3, #4
 80111f4:	460b      	mov	r3, r1
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	440b      	add	r3, r1
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	3301      	adds	r3, #1
 8011202:	b29a      	uxth	r2, r3
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	805a      	strh	r2, [r3, #2]

		for (int idx = 0; idx < snake->length; idx++)
 8011208:	2300      	movs	r3, #0
 801120a:	613b      	str	r3, [r7, #16]
 801120c:	e018      	b.n	8011240 <generate_food+0x94>
		{
			if ((snake->body[idx].x == food->coord.x) &&
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4413      	add	r3, r2
 8011216:	885a      	ldrh	r2, [r3, #2]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	d10c      	bne.n	801123a <generate_food+0x8e>
				(snake->body[idx].y == food->coord.y))
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	4413      	add	r3, r2
 8011228:	889a      	ldrh	r2, [r3, #4]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	885b      	ldrh	r3, [r3, #2]
			if ((snake->body[idx].x == food->coord.x) &&
 801122e:	429a      	cmp	r2, r3
 8011230:	d103      	bne.n	801123a <generate_food+0x8e>
			{
				isInvalid = GENERAL_ERROR;
 8011232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011236:	82fb      	strh	r3, [r7, #22]
				break;
 8011238:	e009      	b.n	801124e <generate_food+0xa2>
		for (int idx = 0; idx < snake->length; idx++)
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	3301      	adds	r3, #1
 801123e:	613b      	str	r3, [r7, #16]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011246:	461a      	mov	r2, r3
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	4293      	cmp	r3, r2
 801124c:	dbdf      	blt.n	801120e <generate_food+0x62>
			}
		}
		if (iter > FOOD_MAX_ITER)
 801124e:	89fb      	ldrh	r3, [r7, #14]
 8011250:	2b64      	cmp	r3, #100	; 0x64
 8011252:	d803      	bhi.n	801125c <generate_food+0xb0>
		{
			break;
		}

	} while (isInvalid);
 8011254:	8afb      	ldrh	r3, [r7, #22]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d1b1      	bne.n	80111be <generate_food+0x12>
 801125a:	e000      	b.n	801125e <generate_food+0xb2>
			break;
 801125c:	bf00      	nop

	if (!isInvalid)
 801125e:	8afb      	ldrh	r3, [r7, #22]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d107      	bne.n	8011274 <generate_food+0xc8>
	{
		platform_drawFood(food->coord.x, food->coord.y);
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	881a      	ldrh	r2, [r3, #0]
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	885b      	ldrh	r3, [r3, #2]
 801126c:	4619      	mov	r1, r3
 801126e:	4610      	mov	r0, r2
 8011270:	f000 f98b 	bl	801158a <platform_drawFood>
	}

	return isInvalid;
 8011274:	8afb      	ldrh	r3, [r7, #22]

}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	4ec4ec4f 	.word	0x4ec4ec4f
 8011284:	cccccccd 	.word	0xcccccccd

08011288 <snake_place_food>:


void snake_place_food(snake_t* snake, food_t* food, uint32_t tick)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
	if (0 == gPrgCycle % 10 || food->time_elapsed)
 8011294:	4b17      	ldr	r3, [pc, #92]	; (80112f4 <snake_place_food+0x6c>)
 8011296:	6819      	ldr	r1, [r3, #0]
 8011298:	4b17      	ldr	r3, [pc, #92]	; (80112f8 <snake_place_food+0x70>)
 801129a:	fba3 2301 	umull	r2, r3, r3, r1
 801129e:	08da      	lsrs	r2, r3, #3
 80112a0:	4613      	mov	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	1aca      	subs	r2, r1, r3
 80112aa:	2a00      	cmp	r2, #0
 80112ac:	d003      	beq.n	80112b6 <snake_place_food+0x2e>
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	88db      	ldrh	r3, [r3, #6]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d01a      	beq.n	80112ec <snake_place_food+0x64>
	{
		if (food->state != PLACED)
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	791b      	ldrb	r3, [r3, #4]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d013      	beq.n	80112e6 <snake_place_food+0x5e>
		{
			if (GENERAL_ERROR == generate_food(snake, food))
 80112be:	68b9      	ldr	r1, [r7, #8]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f7ff ff73 	bl	80111ac <generate_food>
 80112c6:	4603      	mov	r3, r0
 80112c8:	461a      	mov	r2, r3
 80112ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d102      	bne.n	80112d8 <snake_place_food+0x50>
			{
				platform_fatal();
 80112d2:	f000 f9bb 	bl	801164c <platform_fatal>
			food->time_elapsed = 1;
		}

	}

}
 80112d6:	e009      	b.n	80112ec <snake_place_food+0x64>
				food->time_elapsed = 0;
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2200      	movs	r2, #0
 80112dc:	80da      	strh	r2, [r3, #6]
				food->state = PLACED;
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2201      	movs	r2, #1
 80112e2:	711a      	strb	r2, [r3, #4]
}
 80112e4:	e002      	b.n	80112ec <snake_place_food+0x64>
			food->time_elapsed = 1;
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2201      	movs	r2, #1
 80112ea:	80da      	strh	r2, [r3, #6]
}
 80112ec:	bf00      	nop
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20000210 	.word	0x20000210
 80112f8:	cccccccd 	.word	0xcccccccd

080112fc <snake_haseaten>:
void snake_haseaten(snake_t* snake, food_t* food)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b0e6      	sub	sp, #408	; 0x198
 8011300:	af00      	add	r7, sp, #0
 8011302:	1d3b      	adds	r3, r7, #4
 8011304:	6018      	str	r0, [r3, #0]
 8011306:	463b      	mov	r3, r7
 8011308:	6019      	str	r1, [r3, #0]


	if ((snake->body[snake->length - 1].x == food->coord.x)
 801130a:	1d3b      	adds	r3, r7, #4
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011312:	3b01      	subs	r3, #1
 8011314:	1d3a      	adds	r2, r7, #4
 8011316:	6812      	ldr	r2, [r2, #0]
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	4413      	add	r3, r2
 801131c:	885a      	ldrh	r2, [r3, #2]
 801131e:	463b      	mov	r3, r7
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	429a      	cmp	r2, r3
 8011326:	d154      	bne.n	80113d2 <snake_haseaten+0xd6>
		&& (snake->body[snake->length - 1].y == food->coord.y))
 8011328:	1d3b      	adds	r3, r7, #4
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011330:	3b01      	subs	r3, #1
 8011332:	1d3a      	adds	r2, r7, #4
 8011334:	6812      	ldr	r2, [r2, #0]
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	889a      	ldrh	r2, [r3, #4]
 801133c:	463b      	mov	r3, r7
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	429a      	cmp	r2, r3
 8011344:	d145      	bne.n	80113d2 <snake_haseaten+0xd6>
	{
		/* Needed temporary copy for shifting the whole array right - for embedded*/
		coord_t tempSnake[SNAKE_MAX_LNG] = {0};
 8011346:	f107 0308 	add.w	r3, r7, #8
 801134a:	4618      	mov	r0, r3
 801134c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011350:	461a      	mov	r2, r3
 8011352:	2100      	movs	r1, #0
 8011354:	f005 fcd8 	bl	8016d08 <memset>
		memcpy(tempSnake, &(snake->body[0]), (size_t)snake->length*sizeof(coord_t));
 8011358:	1d3b      	adds	r3, r7, #4
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	1c99      	adds	r1, r3, #2
 801135e:	1d3b      	adds	r3, r7, #4
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011366:	009a      	lsls	r2, r3, #2
 8011368:	f107 0308 	add.w	r3, r7, #8
 801136c:	4618      	mov	r0, r3
 801136e:	f005 fcbd 	bl	8016cec <memcpy>

		/* Just append the ghost to the end, increment length and disable ghost*/
		memcpy(&(snake->body[1]), tempSnake, (size_t)snake->length*sizeof(coord_t));
 8011372:	1d3b      	adds	r3, r7, #4
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	1d98      	adds	r0, r3, #6
 8011378:	1d3b      	adds	r3, r7, #4
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8011380:	009a      	lsls	r2, r3, #2
 8011382:	f107 0308 	add.w	r3, r7, #8
 8011386:	4619      	mov	r1, r3
 8011388:	f005 fcb0 	bl	8016cec <memcpy>
		snake->body[0] = snake->ghost;
 801138c:	1d3b      	adds	r3, r7, #4
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	1d3a      	adds	r2, r7, #4
 8011392:	6812      	ldr	r2, [r2, #0]
 8011394:	3302      	adds	r3, #2
 8011396:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 801139a:	6812      	ldr	r2, [r2, #0]
 801139c:	601a      	str	r2, [r3, #0]
		snake->ghost.x = INVALID_COORDS;
 801139e:	1d3b      	adds	r3, r7, #4
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113a6:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		snake->ghost.y = INVALID_COORDS;
 80113aa:	1d3b      	adds	r3, r7, #4
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113b2:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
		snake->length++;
 80113b6:	1d3b      	adds	r3, r7, #4
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80113be:	3301      	adds	r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	1d3b      	adds	r3, r7, #4
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

		food->state = EATEN;
 80113ca:	463b      	mov	r3, r7
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2202      	movs	r2, #2
 80113d0:	711a      	strb	r2, [r3, #4]
	}
}
 80113d2:	bf00      	nop
 80113d4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <HAL_UART_RxCpltCallback>:
char extKeyBoardButton;
UART_HandleTypeDef huart3;
char sUartChar = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4a09      	ldr	r2, [pc, #36]	; (8011410 <HAL_UART_RxCpltCallback+0x34>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d10b      	bne.n	8011406 <HAL_UART_RxCpltCallback+0x2a>
	{
		extKeyBoardButton = sUartChar;
 80113ee:	4b09      	ldr	r3, [pc, #36]	; (8011414 <HAL_UART_RxCpltCallback+0x38>)
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	4b09      	ldr	r3, [pc, #36]	; (8011418 <HAL_UART_RxCpltCallback+0x3c>)
 80113f4:	701a      	strb	r2, [r3, #0]
		sUartChar = 0;
 80113f6:	4b07      	ldr	r3, [pc, #28]	; (8011414 <HAL_UART_RxCpltCallback+0x38>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&sUartChar, 1);
 80113fc:	2201      	movs	r2, #1
 80113fe:	4905      	ldr	r1, [pc, #20]	; (8011414 <HAL_UART_RxCpltCallback+0x38>)
 8011400:	4806      	ldr	r0, [pc, #24]	; (801141c <HAL_UART_RxCpltCallback+0x40>)
 8011402:	f7f3 f842 	bl	800448a <HAL_UART_Receive_IT>
	}
}
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	40004800 	.word	0x40004800
 8011414:	20000216 	.word	0x20000216
 8011418:	20006988 	.word	0x20006988
 801141c:	2000026c 	.word	0x2000026c

08011420 <platform_control_init>:

static void platform_control_init(void)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&sUartChar, 1);
 8011424:	2201      	movs	r2, #1
 8011426:	4903      	ldr	r1, [pc, #12]	; (8011434 <platform_control_init+0x14>)
 8011428:	4803      	ldr	r0, [pc, #12]	; (8011438 <platform_control_init+0x18>)
 801142a:	f7f3 f82e 	bl	800448a <HAL_UART_Receive_IT>
}
 801142e:	bf00      	nop
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	20000216 	.word	0x20000216
 8011438:	2000026c 	.word	0x2000026c

0801143c <platform_init_randomizer>:
static void platform_init_randomizer(void)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	af00      	add	r7, sp, #0
	/* This randomizer is based on ADC noise
	 * as a LFSR seed number */
	HAL_ADC_Start(&hadc1);
 8011440:	4810      	ldr	r0, [pc, #64]	; (8011484 <platform_init_randomizer+0x48>)
 8011442:	f7ef fdb1 	bl	8000fa8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8011446:	f04f 31ff 	mov.w	r1, #4294967295
 801144a:	480e      	ldr	r0, [pc, #56]	; (8011484 <platform_init_randomizer+0x48>)
 801144c:	f7ef feae 	bl	80011ac <HAL_ADC_PollForConversion>
	gRandSeed = HAL_ADC_GetValue(&hadc1);
 8011450:	480c      	ldr	r0, [pc, #48]	; (8011484 <platform_init_randomizer+0x48>)
 8011452:	f7ef ff36 	bl	80012c2 <HAL_ADC_GetValue>
 8011456:	4603      	mov	r3, r0
 8011458:	b29a      	uxth	r2, r3
 801145a:	4b0b      	ldr	r3, [pc, #44]	; (8011488 <platform_init_randomizer+0x4c>)
 801145c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 801145e:	4809      	ldr	r0, [pc, #36]	; (8011484 <platform_init_randomizer+0x48>)
 8011460:	f7ef fe70 	bl	8001144 <HAL_ADC_Stop>
	while(gRandSeed < 0x8000) gRandSeed += gRandSeed;
 8011464:	e005      	b.n	8011472 <platform_init_randomizer+0x36>
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <platform_init_randomizer+0x4c>)
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	b29a      	uxth	r2, r3
 801146e:	4b06      	ldr	r3, [pc, #24]	; (8011488 <platform_init_randomizer+0x4c>)
 8011470:	801a      	strh	r2, [r3, #0]
 8011472:	4b05      	ldr	r3, [pc, #20]	; (8011488 <platform_init_randomizer+0x4c>)
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	b21b      	sxth	r3, r3
 8011478:	2b00      	cmp	r3, #0
 801147a:	daf4      	bge.n	8011466 <platform_init_randomizer+0x2a>
}
 801147c:	bf00      	nop
 801147e:	bf00      	nop
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20000224 	.word	0x20000224
 8011488:	20000214 	.word	0x20000214

0801148c <platform_display_init>:

static void platform_display_init(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	af00      	add	r7, sp, #0
    tft_init(readID());
 8011490:	f002 fa66 	bl	8013960 <readID>
 8011494:	4603      	mov	r3, r0
 8011496:	4618      	mov	r0, r3
 8011498:	f001 fedc 	bl	8013254 <tft_init>
}
 801149c:	bf00      	nop
 801149e:	bd80      	pop	{r7, pc}

080114a0 <platform_refresh_hw>:


void platform_refresh_hw(void)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 80114a4:	2000      	movs	r0, #0
 80114a6:	f004 fea7 	bl	80161f8 <fillScreen>
}
 80114aa:	bf00      	nop
 80114ac:	bd80      	pop	{r7, pc}

080114ae <platform_drawCell>:

void platform_drawCell(uint16_t x, uint16_t y)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b084      	sub	sp, #16
 80114b2:	af02      	add	r7, sp, #8
 80114b4:	4603      	mov	r3, r0
 80114b6:	460a      	mov	r2, r1
 80114b8:	80fb      	strh	r3, [r7, #6]
 80114ba:	4613      	mov	r3, r2
 80114bc:	80bb      	strh	r3, [r7, #4]

	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 80114be:	88fb      	ldrh	r3, [r7, #6]
 80114c0:	461a      	mov	r2, r3
 80114c2:	0092      	lsls	r2, r2, #2
 80114c4:	441a      	add	r2, r3
 80114c6:	0052      	lsls	r2, r2, #1
 80114c8:	4413      	add	r3, r2
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	3306      	adds	r3, #6
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 80114d4:	88bb      	ldrh	r3, [r7, #4]
 80114d6:	461a      	mov	r2, r3
 80114d8:	0092      	lsls	r2, r2, #2
 80114da:	441a      	add	r2, r3
 80114dc:	0052      	lsls	r2, r2, #1
 80114de:	4413      	add	r3, r2
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	3309      	adds	r3, #9
 80114e6:	b29b      	uxth	r3, r3
	drawRect(ARENA_OFFSET_X + CELL_SIZE*x,
 80114e8:	b219      	sxth	r1, r3
 80114ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	2316      	movs	r3, #22
 80114f2:	2216      	movs	r2, #22
 80114f4:	f005 f87b 	bl	80165ee <drawRect>
			CELL_SIZE,
			CELL_SIZE,
			WHITE);

	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 80114f8:	88fb      	ldrh	r3, [r7, #6]
 80114fa:	461a      	mov	r2, r3
 80114fc:	0092      	lsls	r2, r2, #2
 80114fe:	441a      	add	r2, r3
 8011500:	0052      	lsls	r2, r2, #1
 8011502:	4413      	add	r3, r2
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	b29b      	uxth	r3, r3
 8011508:	3307      	adds	r3, #7
 801150a:	b29b      	uxth	r3, r3
 801150c:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y + 1,
 801150e:	88bb      	ldrh	r3, [r7, #4]
 8011510:	461a      	mov	r2, r3
 8011512:	0092      	lsls	r2, r2, #2
 8011514:	441a      	add	r2, r3
 8011516:	0052      	lsls	r2, r2, #1
 8011518:	4413      	add	r3, r2
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	b29b      	uxth	r3, r3
 801151e:	330a      	adds	r3, #10
 8011520:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x + 1,
 8011522:	b219      	sxth	r1, r3
 8011524:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	2314      	movs	r3, #20
 801152c:	2214      	movs	r2, #20
 801152e:	f005 f89f 	bl	8016670 <fillRect>
			CELL_SIZE - 2,
			CELL_SIZE - 2,
			MAGENTA);
}
 8011532:	bf00      	nop
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <platform_eraseCell>:

void platform_eraseCell(uint16_t x, uint16_t y)
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b084      	sub	sp, #16
 801153e:	af02      	add	r7, sp, #8
 8011540:	4603      	mov	r3, r0
 8011542:	460a      	mov	r2, r1
 8011544:	80fb      	strh	r3, [r7, #6]
 8011546:	4613      	mov	r3, r2
 8011548:	80bb      	strh	r3, [r7, #4]
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	461a      	mov	r2, r3
 801154e:	0092      	lsls	r2, r2, #2
 8011550:	441a      	add	r2, r3
 8011552:	0052      	lsls	r2, r2, #1
 8011554:	4413      	add	r3, r2
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	b29b      	uxth	r3, r3
 801155a:	3306      	adds	r3, #6
 801155c:	b29b      	uxth	r3, r3
 801155e:	b218      	sxth	r0, r3
			ARENA_OFFSET_Y + CELL_SIZE*y,
 8011560:	88bb      	ldrh	r3, [r7, #4]
 8011562:	461a      	mov	r2, r3
 8011564:	0092      	lsls	r2, r2, #2
 8011566:	441a      	add	r2, r3
 8011568:	0052      	lsls	r2, r2, #1
 801156a:	4413      	add	r3, r2
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	b29b      	uxth	r3, r3
 8011570:	3309      	adds	r3, #9
 8011572:	b29b      	uxth	r3, r3
	fillRect(ARENA_OFFSET_X + CELL_SIZE*x,
 8011574:	b219      	sxth	r1, r3
 8011576:	2300      	movs	r3, #0
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	2316      	movs	r3, #22
 801157c:	2216      	movs	r2, #22
 801157e:	f005 f877 	bl	8016670 <fillRect>
			CELL_SIZE,
			CELL_SIZE,
			BLACK);
}
 8011582:	bf00      	nop
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <platform_drawFood>:

void platform_drawFood(uint16_t x, uint16_t y)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b082      	sub	sp, #8
 801158e:	af00      	add	r7, sp, #0
 8011590:	4603      	mov	r3, r0
 8011592:	460a      	mov	r2, r1
 8011594:	80fb      	strh	r3, [r7, #6]
 8011596:	4613      	mov	r3, r2
 8011598:	80bb      	strh	r3, [r7, #4]
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 801159a:	88fb      	ldrh	r3, [r7, #6]
 801159c:	461a      	mov	r2, r3
 801159e:	0092      	lsls	r2, r2, #2
 80115a0:	441a      	add	r2, r3
 80115a2:	0052      	lsls	r2, r2, #1
 80115a4:	4413      	add	r3, r2
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	3311      	adds	r3, #17
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	b218      	sxth	r0, r3
			   ARENA_OFFSET_Y + CELL_SIZE*y + CELL_SIZE/2,
 80115b0:	88bb      	ldrh	r3, [r7, #4]
 80115b2:	461a      	mov	r2, r3
 80115b4:	0092      	lsls	r2, r2, #2
 80115b6:	441a      	add	r2, r3
 80115b8:	0052      	lsls	r2, r2, #1
 80115ba:	4413      	add	r3, r2
 80115bc:	005b      	lsls	r3, r3, #1
 80115be:	b29b      	uxth	r3, r3
 80115c0:	3314      	adds	r3, #20
 80115c2:	b29b      	uxth	r3, r3
	fillCircle(ARENA_OFFSET_X + CELL_SIZE*x + CELL_SIZE/2,
 80115c4:	b219      	sxth	r1, r3
 80115c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80115ca:	2207      	movs	r2, #7
 80115cc:	f004 ff11 	bl	80163f2 <fillCircle>
			   CELL_SIZE/3,
			   GREEN);
}
 80115d0:	bf00      	nop
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <platform_init>:
			   CELL_SIZE/3,
			   BLACK);
}

void platform_init(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0
	platform_init_randomizer();
 80115dc:	f7ff ff2e 	bl	801143c <platform_init_randomizer>
	platform_control_init();
 80115e0:	f7ff ff1e 	bl	8011420 <platform_control_init>
	platform_display_init();
 80115e4:	f7ff ff52 	bl	801148c <platform_display_init>
}
 80115e8:	bf00      	nop
 80115ea:	bd80      	pop	{r7, pc}

080115ec <platform_showInformal>:

void platform_showInformal(char* str, uint16_t length)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	807b      	strh	r3, [r7, #2]
}
 80115f8:	bf00      	nop
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <platform_randomize>:

uint16_t platform_randomize(void)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
  uint16_t lsb;

  lsb = gRandSeed & 1;
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <platform_randomize+0x40>)
 801160c:	881b      	ldrh	r3, [r3, #0]
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	80fb      	strh	r3, [r7, #6]
  gRandSeed >>= 1;
 8011614:	4b0b      	ldr	r3, [pc, #44]	; (8011644 <platform_randomize+0x40>)
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	085b      	lsrs	r3, r3, #1
 801161a:	b29a      	uxth	r2, r3
 801161c:	4b09      	ldr	r3, [pc, #36]	; (8011644 <platform_randomize+0x40>)
 801161e:	801a      	strh	r2, [r3, #0]
  if (lsb == 1)
 8011620:	88fb      	ldrh	r3, [r7, #6]
 8011622:	2b01      	cmp	r3, #1
 8011624:	d106      	bne.n	8011634 <platform_randomize+0x30>
  {
	  gRandSeed ^= 0xB400u;
 8011626:	4b07      	ldr	r3, [pc, #28]	; (8011644 <platform_randomize+0x40>)
 8011628:	881a      	ldrh	r2, [r3, #0]
 801162a:	4b07      	ldr	r3, [pc, #28]	; (8011648 <platform_randomize+0x44>)
 801162c:	4053      	eors	r3, r2
 801162e:	b29a      	uxth	r2, r3
 8011630:	4b04      	ldr	r3, [pc, #16]	; (8011644 <platform_randomize+0x40>)
 8011632:	801a      	strh	r2, [r3, #0]
  }

  return gRandSeed;
 8011634:	4b03      	ldr	r3, [pc, #12]	; (8011644 <platform_randomize+0x40>)
 8011636:	881b      	ldrh	r3, [r3, #0]
}
 8011638:	4618      	mov	r0, r3
 801163a:	370c      	adds	r7, #12
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	20000214 	.word	0x20000214
 8011648:	ffffb400 	.word	0xffffb400

0801164c <platform_fatal>:
{
	return;
}

void platform_fatal(void)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	af00      	add	r7, sp, #0

	platform_showInformal("FatalError\n", strlen("FatalError\n"));
 8011650:	210b      	movs	r1, #11
 8011652:	4802      	ldr	r0, [pc, #8]	; (801165c <platform_fatal+0x10>)
 8011654:	f7ff ffca 	bl	80115ec <platform_showInformal>
	while (1);
 8011658:	e7fe      	b.n	8011658 <platform_fatal+0xc>
 801165a:	bf00      	nop
 801165c:	0801a8ac 	.word	0x0801a8ac

08011660 <platform_get_control>:
}

void platform_get_control(snake_t * snake)
{
 8011660:	b480      	push	{r7}
 8011662:	b085      	sub	sp, #20
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	snake_dir_e direction = 0;
 8011668:	2300      	movs	r3, #0
 801166a:	73fb      	strb	r3, [r7, #15]
	static snake_dir_e prev_direction = RIGHT;

	direction = (snake_dir_e)extKeyBoardButton;
 801166c:	4b30      	ldr	r3, [pc, #192]	; (8011730 <platform_get_control+0xd0>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	73fb      	strb	r3, [r7, #15]

	if (direction == 0)
 8011672:	7bfb      	ldrb	r3, [r7, #15]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d054      	beq.n	8011722 <platform_get_control+0xc2>
	{
		return;
	}

	extKeyBoardButton = 0;
 8011678:	4b2d      	ldr	r3, [pc, #180]	; (8011730 <platform_get_control+0xd0>)
 801167a:	2200      	movs	r2, #0
 801167c:	701a      	strb	r2, [r3, #0]

	if ((direction != LEFT) && (direction != RIGHT) && (direction != UP) &&
 801167e:	7bfb      	ldrb	r3, [r7, #15]
 8011680:	2b41      	cmp	r3, #65	; 0x41
 8011682:	d016      	beq.n	80116b2 <platform_get_control+0x52>
 8011684:	7bfb      	ldrb	r3, [r7, #15]
 8011686:	2b44      	cmp	r3, #68	; 0x44
 8011688:	d013      	beq.n	80116b2 <platform_get_control+0x52>
 801168a:	7bfb      	ldrb	r3, [r7, #15]
 801168c:	2b57      	cmp	r3, #87	; 0x57
 801168e:	d010      	beq.n	80116b2 <platform_get_control+0x52>
 8011690:	7bfb      	ldrb	r3, [r7, #15]
 8011692:	2b53      	cmp	r3, #83	; 0x53
 8011694:	d00d      	beq.n	80116b2 <platform_get_control+0x52>
		(direction != DOWN) && (direction != PAUSE) && (direction != QUIT))
 8011696:	7bfb      	ldrb	r3, [r7, #15]
 8011698:	2b50      	cmp	r3, #80	; 0x50
 801169a:	d00a      	beq.n	80116b2 <platform_get_control+0x52>
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	2b51      	cmp	r3, #81	; 0x51
 80116a0:	d007      	beq.n	80116b2 <platform_get_control+0x52>
	{
		prev_direction = snake->direction;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	781a      	ldrb	r2, [r3, #0]
 80116a6:	4b23      	ldr	r3, [pc, #140]	; (8011734 <platform_get_control+0xd4>)
 80116a8:	701a      	strb	r2, [r3, #0]
		snake->direction = PAUSE;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2250      	movs	r2, #80	; 0x50
 80116ae:	701a      	strb	r2, [r3, #0]
 80116b0:	e038      	b.n	8011724 <platform_get_control+0xc4>
	}
	else
	{
		if (direction == PAUSE)
 80116b2:	7bfb      	ldrb	r3, [r7, #15]
 80116b4:	2b50      	cmp	r3, #80	; 0x50
 80116b6:	d110      	bne.n	80116da <platform_get_control+0x7a>
		{
			if (snake->direction != PAUSE)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b50      	cmp	r3, #80	; 0x50
 80116be:	d007      	beq.n	80116d0 <platform_get_control+0x70>
			{
				prev_direction = snake->direction;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	781a      	ldrb	r2, [r3, #0]
 80116c4:	4b1b      	ldr	r3, [pc, #108]	; (8011734 <platform_get_control+0xd4>)
 80116c6:	701a      	strb	r2, [r3, #0]
				snake->direction = PAUSE;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2250      	movs	r2, #80	; 0x50
 80116cc:	701a      	strb	r2, [r3, #0]
 80116ce:	e029      	b.n	8011724 <platform_get_control+0xc4>
			}
			else
			{
				snake->direction = prev_direction;
 80116d0:	4b18      	ldr	r3, [pc, #96]	; (8011734 <platform_get_control+0xd4>)
 80116d2:	781a      	ldrb	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	701a      	strb	r2, [r3, #0]
 80116d8:	e024      	b.n	8011724 <platform_get_control+0xc4>
			}
		}

		else
		{
			if ((snake->direction != PAUSE) &&
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	2b50      	cmp	r3, #80	; 0x50
 80116e0:	d020      	beq.n	8011724 <platform_get_control+0xc4>
				!(snake->direction == LEFT && direction == RIGHT) &&
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	781b      	ldrb	r3, [r3, #0]
			if ((snake->direction != PAUSE) &&
 80116e6:	2b41      	cmp	r3, #65	; 0x41
 80116e8:	d102      	bne.n	80116f0 <platform_get_control+0x90>
				!(snake->direction == LEFT && direction == RIGHT) &&
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	2b44      	cmp	r3, #68	; 0x44
 80116ee:	d019      	beq.n	8011724 <platform_get_control+0xc4>
				!(snake->direction == RIGHT && direction == LEFT) &&
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == LEFT && direction == RIGHT) &&
 80116f4:	2b44      	cmp	r3, #68	; 0x44
 80116f6:	d102      	bne.n	80116fe <platform_get_control+0x9e>
				!(snake->direction == RIGHT && direction == LEFT) &&
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
 80116fa:	2b41      	cmp	r3, #65	; 0x41
 80116fc:	d012      	beq.n	8011724 <platform_get_control+0xc4>
				!(snake->direction == UP && direction == DOWN) &&
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == RIGHT && direction == LEFT) &&
 8011702:	2b57      	cmp	r3, #87	; 0x57
 8011704:	d102      	bne.n	801170c <platform_get_control+0xac>
				!(snake->direction == UP && direction == DOWN) &&
 8011706:	7bfb      	ldrb	r3, [r7, #15]
 8011708:	2b53      	cmp	r3, #83	; 0x53
 801170a:	d00b      	beq.n	8011724 <platform_get_control+0xc4>
				!(snake->direction == DOWN && direction == UP))
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	781b      	ldrb	r3, [r3, #0]
				!(snake->direction == UP && direction == DOWN) &&
 8011710:	2b53      	cmp	r3, #83	; 0x53
 8011712:	d102      	bne.n	801171a <platform_get_control+0xba>
				!(snake->direction == DOWN && direction == UP))
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	2b57      	cmp	r3, #87	; 0x57
 8011718:	d004      	beq.n	8011724 <platform_get_control+0xc4>
			{
				snake->direction = direction;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	7bfa      	ldrb	r2, [r7, #15]
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	e000      	b.n	8011724 <platform_get_control+0xc4>
		return;
 8011722:	bf00      	nop
			}
		}
	}
}
 8011724:	3714      	adds	r7, #20
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	20006988 	.word	0x20006988
 8011734:	20000012 	.word	0x20000012

08011738 <delay>:


/********************************************** NO CHNAGES AFTER THIS ************************************************/

void delay (uint32_t time)
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	for(uint32_t a = 0; a < time; a++)
 8011740:	2300      	movs	r3, #0
 8011742:	60fb      	str	r3, [r7, #12]
 8011744:	e00c      	b.n	8011760 <delay+0x28>
	{
		for(uint32_t b = 0; b < 108; b++)
 8011746:	2300      	movs	r3, #0
 8011748:	60bb      	str	r3, [r7, #8]
 801174a:	e003      	b.n	8011754 <delay+0x1c>
		{
			__NOP();
 801174c:	bf00      	nop
		for(uint32_t b = 0; b < 108; b++)
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	3301      	adds	r3, #1
 8011752:	60bb      	str	r3, [r7, #8]
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	2b6b      	cmp	r3, #107	; 0x6b
 8011758:	d9f8      	bls.n	801174c <delay+0x14>
	for(uint32_t a = 0; a < time; a++)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	3301      	adds	r3, #1
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	429a      	cmp	r2, r3
 8011766:	d3ee      	bcc.n	8011746 <delay+0xe>
		}
	}

}
 8011768:	bf00      	nop
 801176a:	bf00      	nop
 801176c:	3714      	adds	r7, #20
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <PIN_LOW>:

void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	b082      	sub	sp, #8
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
 801177e:	460b      	mov	r3, r1
 8011780:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8011782:	887b      	ldrh	r3, [r7, #2]
 8011784:	2200      	movs	r2, #0
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7f1 fc4b 	bl	8003024 <HAL_GPIO_WritePin>
}
 801178e:	bf00      	nop
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	460b      	mov	r3, r1
 80117a0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80117a2:	887b      	ldrh	r3, [r7, #2]
 80117a4:	2201      	movs	r2, #1
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7f1 fc3b 	bl	8003024 <HAL_GPIO_WritePin>
}
 80117ae:	bf00      	nop
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b088      	sub	sp, #32
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	460b      	mov	r3, r1
 80117c0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80117c2:	887b      	ldrh	r3, [r7, #2]
 80117c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80117c6:	2300      	movs	r3, #0
 80117c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80117ca:	2301      	movs	r3, #1
 80117cc:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80117ce:	f107 030c 	add.w	r3, r7, #12
 80117d2:	4619      	mov	r1, r3
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f7f1 fa79 	bl	8002ccc <HAL_GPIO_Init>
}
 80117da:	bf00      	nop
 80117dc:	3720      	adds	r7, #32
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b088      	sub	sp, #32
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	460b      	mov	r3, r1
 80117ec:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80117ee:	887b      	ldrh	r3, [r7, #2]
 80117f0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80117f2:	2301      	movs	r3, #1
 80117f4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117f6:	2300      	movs	r3, #0
 80117f8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80117fa:	2302      	movs	r3, #2
 80117fc:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80117fe:	f107 030c 	add.w	r3, r7, #12
 8011802:	4619      	mov	r1, r3
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7f1 fa61 	bl	8002ccc <HAL_GPIO_Init>
}
 801180a:	bf00      	nop
 801180c:	3720      	adds	r7, #32
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
	...

08011814 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8011814:	b480      	push	{r7}
 8011816:	af00      	add	r7, sp, #0
 8011818:	4b03      	ldr	r3, [pc, #12]	; (8011828 <width+0x14>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	4618      	mov	r0, r3
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop
 8011828:	20000014 	.word	0x20000014

0801182c <height>:

uint16_t height(void)
{ return _height; }
 801182c:	b480      	push	{r7}
 801182e:	af00      	add	r7, sp, #0
 8011830:	4b03      	ldr	r3, [pc, #12]	; (8011840 <height+0x14>)
 8011832:	881b      	ldrh	r3, [r3, #0]
 8011834:	4618      	mov	r0, r3
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop
 8011840:	20000016 	.word	0x20000016

08011844 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	4603      	mov	r3, r0
 801184c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 801184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011852:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011856:	b21a      	sxth	r2, r3
 8011858:	88fb      	ldrh	r3, [r7, #6]
 801185a:	005b      	lsls	r3, r3, #1
 801185c:	b21b      	sxth	r3, r3
 801185e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011862:	b21b      	sxth	r3, r3
 8011864:	4313      	orrs	r3, r2
 8011866:	b21a      	sxth	r2, r3
 8011868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	b21b      	sxth	r3, r3
 8011872:	4313      	orrs	r3, r2
 8011874:	b21b      	sxth	r3, r3
 8011876:	b29b      	uxth	r3, r3
}
 8011878:	4618      	mov	r0, r3
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	4603      	mov	r3, r0
 801188c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 801188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011896:	b21a      	sxth	r2, r3
 8011898:	88fb      	ldrh	r3, [r7, #6]
 801189a:	115b      	asrs	r3, r3, #5
 801189c:	b21b      	sxth	r3, r3
 801189e:	f003 0320 	and.w	r3, r3, #32
 80118a2:	b21b      	sxth	r3, r3
 80118a4:	4313      	orrs	r3, r2
 80118a6:	b21a      	sxth	r2, r3
 80118a8:	88fb      	ldrh	r3, [r7, #6]
 80118aa:	105b      	asrs	r3, r3, #1
 80118ac:	b21b      	sxth	r3, r3
 80118ae:	f003 031f 	and.w	r3, r3, #31
 80118b2:	b21b      	sxth	r3, r3
 80118b4:	4313      	orrs	r3, r2
 80118b6:	b21b      	sxth	r3, r3
 80118b8:	b29b      	uxth	r3, r3
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	370c      	adds	r7, #12
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr

080118c6 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 80118c6:	b480      	push	{r7}
 80118c8:	b083      	sub	sp, #12
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	4603      	mov	r3, r0
 80118ce:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80118d0:	88fb      	ldrh	r3, [r7, #6]
 80118d2:	121b      	asrs	r3, r3, #8
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	f023 0307 	bic.w	r3, r3, #7
 80118da:	b2db      	uxtb	r3, r3
}
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	4603      	mov	r3, r0
 80118f0:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 80118f2:	88fb      	ldrh	r3, [r7, #6]
 80118f4:	10db      	asrs	r3, r3, #3
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	f023 0303 	bic.w	r3, r3, #3
 80118fc:	b2db      	uxtb	r3, r3
}
 80118fe:	4618      	mov	r0, r3
 8011900:	370c      	adds	r7, #12
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 801190a:	b480      	push	{r7}
 801190c:	b083      	sub	sp, #12
 801190e:	af00      	add	r7, sp, #0
 8011910:	4603      	mov	r3, r0
 8011912:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8011914:	88fb      	ldrh	r3, [r7, #6]
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	b2db      	uxtb	r3, r3
}
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr
	...

08011928 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	4603      	mov	r3, r0
 8011930:	71fb      	strb	r3, [r7, #7]
 8011932:	460b      	mov	r3, r1
 8011934:	71bb      	strb	r3, [r7, #6]
 8011936:	4613      	mov	r3, r2
 8011938:	717b      	strb	r3, [r7, #5]
 801193a:	79fb      	ldrb	r3, [r7, #7]
 801193c:	021b      	lsls	r3, r3, #8
 801193e:	b21a      	sxth	r2, r3
 8011940:	4b0b      	ldr	r3, [pc, #44]	; (8011970 <color565+0x48>)
 8011942:	4013      	ands	r3, r2
 8011944:	b21a      	sxth	r2, r3
 8011946:	79bb      	ldrb	r3, [r7, #6]
 8011948:	00db      	lsls	r3, r3, #3
 801194a:	b21b      	sxth	r3, r3
 801194c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011950:	b21b      	sxth	r3, r3
 8011952:	4313      	orrs	r3, r2
 8011954:	b21a      	sxth	r2, r3
 8011956:	797b      	ldrb	r3, [r7, #5]
 8011958:	08db      	lsrs	r3, r3, #3
 801195a:	b2db      	uxtb	r3, r3
 801195c:	b21b      	sxth	r3, r3
 801195e:	4313      	orrs	r3, r2
 8011960:	b21b      	sxth	r3, r3
 8011962:	b29b      	uxth	r3, r3
 8011964:	4618      	mov	r0, r3
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	fffff800 	.word	0xfffff800

08011974 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af02      	add	r7, sp, #8
 801197a:	4603      	mov	r3, r0
 801197c:	460a      	mov	r2, r1
 801197e:	80fb      	strh	r3, [r7, #6]
 8011980:	4613      	mov	r3, r2
 8011982:	80bb      	strh	r3, [r7, #4]
 8011984:	f107 020e 	add.w	r2, r7, #14
 8011988:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801198c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011990:	2301      	movs	r3, #1
 8011992:	9300      	str	r3, [sp, #0]
 8011994:	2301      	movs	r3, #1
 8011996:	f002 f923 	bl	8013be0 <readGRAM>
 801199a:	89fb      	ldrh	r3, [r7, #14]
 801199c:	4618      	mov	r0, r3
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	4603      	mov	r3, r0
 80119ac:	460a      	mov	r2, r1
 80119ae:	80fb      	strh	r3, [r7, #6]
 80119b0:	4613      	mov	r3, r2
 80119b2:	80bb      	strh	r3, [r7, #4]
 80119b4:	88ba      	ldrh	r2, [r7, #4]
 80119b6:	88fb      	ldrh	r3, [r7, #6]
 80119b8:	4611      	mov	r1, r2
 80119ba:	4618      	mov	r0, r3
 80119bc:	f000 fa2c 	bl	8011e18 <writecmddata>
 80119c0:	bf00      	nop
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	4603      	mov	r3, r0
 80119d0:	6039      	str	r1, [r7, #0]
 80119d2:	80fb      	strh	r3, [r7, #6]
 80119d4:	4613      	mov	r3, r2
 80119d6:	717b      	strb	r3, [r7, #5]
 80119d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	683a      	ldr	r2, [r7, #0]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 fc5f 	bl	80122a4 <WriteCmdParamN>
 80119e6:	bf00      	nop
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
	...

080119f0 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 80119f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119f8:	4813      	ldr	r0, [pc, #76]	; (8011a48 <setReadDir+0x58>)
 80119fa:	f7ff fedc 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 80119fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a02:	4812      	ldr	r0, [pc, #72]	; (8011a4c <setReadDir+0x5c>)
 8011a04:	f7ff fed7 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8011a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a0c:	480e      	ldr	r0, [pc, #56]	; (8011a48 <setReadDir+0x58>)
 8011a0e:	f7ff fed2 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8011a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a16:	480e      	ldr	r0, [pc, #56]	; (8011a50 <setReadDir+0x60>)
 8011a18:	f7ff fecd 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8011a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011a20:	4809      	ldr	r0, [pc, #36]	; (8011a48 <setReadDir+0x58>)
 8011a22:	f7ff fec8 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8011a26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a2a:	4809      	ldr	r0, [pc, #36]	; (8011a50 <setReadDir+0x60>)
 8011a2c:	f7ff fec3 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8011a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a34:	4806      	ldr	r0, [pc, #24]	; (8011a50 <setReadDir+0x60>)
 8011a36:	f7ff febe 	bl	80117b6 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8011a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a3e:	4802      	ldr	r0, [pc, #8]	; (8011a48 <setReadDir+0x58>)
 8011a40:	f7ff feb9 	bl	80117b6 <PIN_INPUT>
}
 8011a44:	bf00      	nop
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	40021400 	.word	0x40021400
 8011a4c:	40020c00 	.word	0x40020c00
 8011a50:	40021000 	.word	0x40021000

08011a54 <setWriteDir>:

void setWriteDir (void)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8011a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a5c:	4813      	ldr	r0, [pc, #76]	; (8011aac <setWriteDir+0x58>)
 8011a5e:	f7ff fec0 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8011a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a66:	4812      	ldr	r0, [pc, #72]	; (8011ab0 <setWriteDir+0x5c>)
 8011a68:	f7ff febb 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8011a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011a70:	480e      	ldr	r0, [pc, #56]	; (8011aac <setWriteDir+0x58>)
 8011a72:	f7ff feb6 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8011a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a7a:	480e      	ldr	r0, [pc, #56]	; (8011ab4 <setWriteDir+0x60>)
 8011a7c:	f7ff feb1 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8011a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011a84:	4809      	ldr	r0, [pc, #36]	; (8011aac <setWriteDir+0x58>)
 8011a86:	f7ff feac 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8011a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a8e:	4809      	ldr	r0, [pc, #36]	; (8011ab4 <setWriteDir+0x60>)
 8011a90:	f7ff fea7 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8011a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a98:	4806      	ldr	r0, [pc, #24]	; (8011ab4 <setWriteDir+0x60>)
 8011a9a:	f7ff fea2 	bl	80117e2 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8011a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011aa2:	4802      	ldr	r0, [pc, #8]	; (8011aac <setWriteDir+0x58>)
 8011aa4:	f7ff fe9d 	bl	80117e2 <PIN_OUTPUT>
}
 8011aa8:	bf00      	nop
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	40021400 	.word	0x40021400
 8011ab0:	40020c00 	.word	0x40020c00
 8011ab4:	40021000 	.word	0x40021000

08011ab8 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	4603      	mov	r3, r0
 8011ac0:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8011ac2:	88fb      	ldrh	r3, [r7, #6]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fefe 	bl	80118c6 <color565_to_r>
 8011aca:	4603      	mov	r3, r0
 8011acc:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8011ace:	88fb      	ldrh	r3, [r7, #6]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff ff09 	bl	80118e8 <color565_to_g>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8011ada:	88fb      	ldrh	r3, [r7, #6]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff ff14 	bl	801190a <color565_to_b>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	737b      	strb	r3, [r7, #13]
    write8(r);
 8011ae6:	4bc3      	ldr	r3, [pc, #780]	; (8011df4 <write24+0x33c>)
 8011ae8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011aec:	619a      	str	r2, [r3, #24]
 8011aee:	4bc2      	ldr	r3, [pc, #776]	; (8011df8 <write24+0x340>)
 8011af0:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011af4:	619a      	str	r2, [r3, #24]
 8011af6:	4bc1      	ldr	r3, [pc, #772]	; (8011dfc <write24+0x344>)
 8011af8:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011afc:	619a      	str	r2, [r3, #24]
 8011afe:	7bfb      	ldrb	r3, [r7, #15]
 8011b00:	039b      	lsls	r3, r3, #14
 8011b02:	4abc      	ldr	r2, [pc, #752]	; (8011df4 <write24+0x33c>)
 8011b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b08:	6193      	str	r3, [r2, #24]
 8011b0a:	7bfb      	ldrb	r3, [r7, #15]
 8011b0c:	029b      	lsls	r3, r3, #10
 8011b0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
 8011b14:	019b      	lsls	r3, r3, #6
 8011b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b1a:	431a      	orrs	r2, r3
 8011b1c:	7bfb      	ldrb	r3, [r7, #15]
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b24:	431a      	orrs	r2, r3
 8011b26:	4bb4      	ldr	r3, [pc, #720]	; (8011df8 <write24+0x340>)
 8011b28:	619a      	str	r2, [r3, #24]
 8011b2a:	7bfb      	ldrb	r3, [r7, #15]
 8011b2c:	031b      	lsls	r3, r3, #12
 8011b2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
 8011b34:	035b      	lsls	r3, r3, #13
 8011b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b3a:	431a      	orrs	r2, r3
 8011b3c:	7bfb      	ldrb	r3, [r7, #15]
 8011b3e:	029b      	lsls	r3, r3, #10
 8011b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b44:	431a      	orrs	r2, r3
 8011b46:	7bfb      	ldrb	r3, [r7, #15]
 8011b48:	019b      	lsls	r3, r3, #6
 8011b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011b4e:	431a      	orrs	r2, r3
 8011b50:	4baa      	ldr	r3, [pc, #680]	; (8011dfc <write24+0x344>)
 8011b52:	619a      	str	r2, [r3, #24]
 8011b54:	2101      	movs	r1, #1
 8011b56:	48aa      	ldr	r0, [pc, #680]	; (8011e00 <write24+0x348>)
 8011b58:	f7ff fe0d 	bl	8011776 <PIN_LOW>
 8011b5c:	2101      	movs	r1, #1
 8011b5e:	48a8      	ldr	r0, [pc, #672]	; (8011e00 <write24+0x348>)
 8011b60:	f7ff fe09 	bl	8011776 <PIN_LOW>
 8011b64:	2101      	movs	r1, #1
 8011b66:	48a6      	ldr	r0, [pc, #664]	; (8011e00 <write24+0x348>)
 8011b68:	f7ff fe05 	bl	8011776 <PIN_LOW>
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	48a4      	ldr	r0, [pc, #656]	; (8011e00 <write24+0x348>)
 8011b70:	f7ff fe01 	bl	8011776 <PIN_LOW>
 8011b74:	2101      	movs	r1, #1
 8011b76:	48a2      	ldr	r0, [pc, #648]	; (8011e00 <write24+0x348>)
 8011b78:	f7ff fdfd 	bl	8011776 <PIN_LOW>
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	48a0      	ldr	r0, [pc, #640]	; (8011e00 <write24+0x348>)
 8011b80:	f7ff fdf9 	bl	8011776 <PIN_LOW>
 8011b84:	2101      	movs	r1, #1
 8011b86:	489e      	ldr	r0, [pc, #632]	; (8011e00 <write24+0x348>)
 8011b88:	f7ff fdf5 	bl	8011776 <PIN_LOW>
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	489c      	ldr	r0, [pc, #624]	; (8011e00 <write24+0x348>)
 8011b90:	f7ff fdf1 	bl	8011776 <PIN_LOW>
 8011b94:	2101      	movs	r1, #1
 8011b96:	489a      	ldr	r0, [pc, #616]	; (8011e00 <write24+0x348>)
 8011b98:	f7ff fded 	bl	8011776 <PIN_LOW>
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	4898      	ldr	r0, [pc, #608]	; (8011e00 <write24+0x348>)
 8011ba0:	f7ff fde9 	bl	8011776 <PIN_LOW>
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	4896      	ldr	r0, [pc, #600]	; (8011e00 <write24+0x348>)
 8011ba8:	f7ff fde5 	bl	8011776 <PIN_LOW>
 8011bac:	2101      	movs	r1, #1
 8011bae:	4894      	ldr	r0, [pc, #592]	; (8011e00 <write24+0x348>)
 8011bb0:	f7ff fde1 	bl	8011776 <PIN_LOW>
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	4892      	ldr	r0, [pc, #584]	; (8011e00 <write24+0x348>)
 8011bb8:	f7ff fddd 	bl	8011776 <PIN_LOW>
 8011bbc:	2101      	movs	r1, #1
 8011bbe:	4890      	ldr	r0, [pc, #576]	; (8011e00 <write24+0x348>)
 8011bc0:	f7ff fdd9 	bl	8011776 <PIN_LOW>
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	488e      	ldr	r0, [pc, #568]	; (8011e00 <write24+0x348>)
 8011bc8:	f7ff fdd5 	bl	8011776 <PIN_LOW>
 8011bcc:	2101      	movs	r1, #1
 8011bce:	488c      	ldr	r0, [pc, #560]	; (8011e00 <write24+0x348>)
 8011bd0:	f7ff fdd1 	bl	8011776 <PIN_LOW>
 8011bd4:	2101      	movs	r1, #1
 8011bd6:	488a      	ldr	r0, [pc, #552]	; (8011e00 <write24+0x348>)
 8011bd8:	f7ff fdcd 	bl	8011776 <PIN_LOW>
 8011bdc:	2101      	movs	r1, #1
 8011bde:	4888      	ldr	r0, [pc, #544]	; (8011e00 <write24+0x348>)
 8011be0:	f7ff fdd9 	bl	8011796 <PIN_HIGH>
 8011be4:	2101      	movs	r1, #1
 8011be6:	4886      	ldr	r0, [pc, #536]	; (8011e00 <write24+0x348>)
 8011be8:	f7ff fdd5 	bl	8011796 <PIN_HIGH>
    write8(g);
 8011bec:	4b81      	ldr	r3, [pc, #516]	; (8011df4 <write24+0x33c>)
 8011bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011bf2:	619a      	str	r2, [r3, #24]
 8011bf4:	4b80      	ldr	r3, [pc, #512]	; (8011df8 <write24+0x340>)
 8011bf6:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011bfa:	619a      	str	r2, [r3, #24]
 8011bfc:	4b7f      	ldr	r3, [pc, #508]	; (8011dfc <write24+0x344>)
 8011bfe:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011c02:	619a      	str	r2, [r3, #24]
 8011c04:	7bbb      	ldrb	r3, [r7, #14]
 8011c06:	039b      	lsls	r3, r3, #14
 8011c08:	4a7a      	ldr	r2, [pc, #488]	; (8011df4 <write24+0x33c>)
 8011c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c0e:	6193      	str	r3, [r2, #24]
 8011c10:	7bbb      	ldrb	r3, [r7, #14]
 8011c12:	029b      	lsls	r3, r3, #10
 8011c14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011c18:	7bbb      	ldrb	r3, [r7, #14]
 8011c1a:	019b      	lsls	r3, r3, #6
 8011c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c20:	431a      	orrs	r2, r3
 8011c22:	7bbb      	ldrb	r3, [r7, #14]
 8011c24:	00db      	lsls	r3, r3, #3
 8011c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c2a:	431a      	orrs	r2, r3
 8011c2c:	4b72      	ldr	r3, [pc, #456]	; (8011df8 <write24+0x340>)
 8011c2e:	619a      	str	r2, [r3, #24]
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
 8011c32:	031b      	lsls	r3, r3, #12
 8011c34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	035b      	lsls	r3, r3, #13
 8011c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c40:	431a      	orrs	r2, r3
 8011c42:	7bbb      	ldrb	r3, [r7, #14]
 8011c44:	029b      	lsls	r3, r3, #10
 8011c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c4a:	431a      	orrs	r2, r3
 8011c4c:	7bbb      	ldrb	r3, [r7, #14]
 8011c4e:	019b      	lsls	r3, r3, #6
 8011c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c54:	431a      	orrs	r2, r3
 8011c56:	4b69      	ldr	r3, [pc, #420]	; (8011dfc <write24+0x344>)
 8011c58:	619a      	str	r2, [r3, #24]
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	4868      	ldr	r0, [pc, #416]	; (8011e00 <write24+0x348>)
 8011c5e:	f7ff fd8a 	bl	8011776 <PIN_LOW>
 8011c62:	2101      	movs	r1, #1
 8011c64:	4866      	ldr	r0, [pc, #408]	; (8011e00 <write24+0x348>)
 8011c66:	f7ff fd86 	bl	8011776 <PIN_LOW>
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	4864      	ldr	r0, [pc, #400]	; (8011e00 <write24+0x348>)
 8011c6e:	f7ff fd82 	bl	8011776 <PIN_LOW>
 8011c72:	2101      	movs	r1, #1
 8011c74:	4862      	ldr	r0, [pc, #392]	; (8011e00 <write24+0x348>)
 8011c76:	f7ff fd7e 	bl	8011776 <PIN_LOW>
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	4860      	ldr	r0, [pc, #384]	; (8011e00 <write24+0x348>)
 8011c7e:	f7ff fd7a 	bl	8011776 <PIN_LOW>
 8011c82:	2101      	movs	r1, #1
 8011c84:	485e      	ldr	r0, [pc, #376]	; (8011e00 <write24+0x348>)
 8011c86:	f7ff fd76 	bl	8011776 <PIN_LOW>
 8011c8a:	2101      	movs	r1, #1
 8011c8c:	485c      	ldr	r0, [pc, #368]	; (8011e00 <write24+0x348>)
 8011c8e:	f7ff fd72 	bl	8011776 <PIN_LOW>
 8011c92:	2101      	movs	r1, #1
 8011c94:	485a      	ldr	r0, [pc, #360]	; (8011e00 <write24+0x348>)
 8011c96:	f7ff fd6e 	bl	8011776 <PIN_LOW>
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	4858      	ldr	r0, [pc, #352]	; (8011e00 <write24+0x348>)
 8011c9e:	f7ff fd6a 	bl	8011776 <PIN_LOW>
 8011ca2:	2101      	movs	r1, #1
 8011ca4:	4856      	ldr	r0, [pc, #344]	; (8011e00 <write24+0x348>)
 8011ca6:	f7ff fd66 	bl	8011776 <PIN_LOW>
 8011caa:	2101      	movs	r1, #1
 8011cac:	4854      	ldr	r0, [pc, #336]	; (8011e00 <write24+0x348>)
 8011cae:	f7ff fd62 	bl	8011776 <PIN_LOW>
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	4852      	ldr	r0, [pc, #328]	; (8011e00 <write24+0x348>)
 8011cb6:	f7ff fd5e 	bl	8011776 <PIN_LOW>
 8011cba:	2101      	movs	r1, #1
 8011cbc:	4850      	ldr	r0, [pc, #320]	; (8011e00 <write24+0x348>)
 8011cbe:	f7ff fd5a 	bl	8011776 <PIN_LOW>
 8011cc2:	2101      	movs	r1, #1
 8011cc4:	484e      	ldr	r0, [pc, #312]	; (8011e00 <write24+0x348>)
 8011cc6:	f7ff fd56 	bl	8011776 <PIN_LOW>
 8011cca:	2101      	movs	r1, #1
 8011ccc:	484c      	ldr	r0, [pc, #304]	; (8011e00 <write24+0x348>)
 8011cce:	f7ff fd52 	bl	8011776 <PIN_LOW>
 8011cd2:	2101      	movs	r1, #1
 8011cd4:	484a      	ldr	r0, [pc, #296]	; (8011e00 <write24+0x348>)
 8011cd6:	f7ff fd4e 	bl	8011776 <PIN_LOW>
 8011cda:	2101      	movs	r1, #1
 8011cdc:	4848      	ldr	r0, [pc, #288]	; (8011e00 <write24+0x348>)
 8011cde:	f7ff fd4a 	bl	8011776 <PIN_LOW>
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	4846      	ldr	r0, [pc, #280]	; (8011e00 <write24+0x348>)
 8011ce6:	f7ff fd56 	bl	8011796 <PIN_HIGH>
 8011cea:	2101      	movs	r1, #1
 8011cec:	4844      	ldr	r0, [pc, #272]	; (8011e00 <write24+0x348>)
 8011cee:	f7ff fd52 	bl	8011796 <PIN_HIGH>
    write8(b);
 8011cf2:	4b40      	ldr	r3, [pc, #256]	; (8011df4 <write24+0x33c>)
 8011cf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011cf8:	619a      	str	r2, [r3, #24]
 8011cfa:	4b3f      	ldr	r3, [pc, #252]	; (8011df8 <write24+0x340>)
 8011cfc:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011d00:	619a      	str	r2, [r3, #24]
 8011d02:	4b3e      	ldr	r3, [pc, #248]	; (8011dfc <write24+0x344>)
 8011d04:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011d08:	619a      	str	r2, [r3, #24]
 8011d0a:	7b7b      	ldrb	r3, [r7, #13]
 8011d0c:	039b      	lsls	r3, r3, #14
 8011d0e:	4a39      	ldr	r2, [pc, #228]	; (8011df4 <write24+0x33c>)
 8011d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d14:	6193      	str	r3, [r2, #24]
 8011d16:	7b7b      	ldrb	r3, [r7, #13]
 8011d18:	029b      	lsls	r3, r3, #10
 8011d1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011d1e:	7b7b      	ldrb	r3, [r7, #13]
 8011d20:	019b      	lsls	r3, r3, #6
 8011d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d26:	431a      	orrs	r2, r3
 8011d28:	7b7b      	ldrb	r3, [r7, #13]
 8011d2a:	00db      	lsls	r3, r3, #3
 8011d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011d30:	431a      	orrs	r2, r3
 8011d32:	4b31      	ldr	r3, [pc, #196]	; (8011df8 <write24+0x340>)
 8011d34:	619a      	str	r2, [r3, #24]
 8011d36:	7b7b      	ldrb	r3, [r7, #13]
 8011d38:	031b      	lsls	r3, r3, #12
 8011d3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011d3e:	7b7b      	ldrb	r3, [r7, #13]
 8011d40:	035b      	lsls	r3, r3, #13
 8011d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d46:	431a      	orrs	r2, r3
 8011d48:	7b7b      	ldrb	r3, [r7, #13]
 8011d4a:	029b      	lsls	r3, r3, #10
 8011d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d50:	431a      	orrs	r2, r3
 8011d52:	7b7b      	ldrb	r3, [r7, #13]
 8011d54:	019b      	lsls	r3, r3, #6
 8011d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d5a:	431a      	orrs	r2, r3
 8011d5c:	4b27      	ldr	r3, [pc, #156]	; (8011dfc <write24+0x344>)
 8011d5e:	619a      	str	r2, [r3, #24]
 8011d60:	2101      	movs	r1, #1
 8011d62:	4827      	ldr	r0, [pc, #156]	; (8011e00 <write24+0x348>)
 8011d64:	f7ff fd07 	bl	8011776 <PIN_LOW>
 8011d68:	2101      	movs	r1, #1
 8011d6a:	4825      	ldr	r0, [pc, #148]	; (8011e00 <write24+0x348>)
 8011d6c:	f7ff fd03 	bl	8011776 <PIN_LOW>
 8011d70:	2101      	movs	r1, #1
 8011d72:	4823      	ldr	r0, [pc, #140]	; (8011e00 <write24+0x348>)
 8011d74:	f7ff fcff 	bl	8011776 <PIN_LOW>
 8011d78:	2101      	movs	r1, #1
 8011d7a:	4821      	ldr	r0, [pc, #132]	; (8011e00 <write24+0x348>)
 8011d7c:	f7ff fcfb 	bl	8011776 <PIN_LOW>
 8011d80:	2101      	movs	r1, #1
 8011d82:	481f      	ldr	r0, [pc, #124]	; (8011e00 <write24+0x348>)
 8011d84:	f7ff fcf7 	bl	8011776 <PIN_LOW>
 8011d88:	2101      	movs	r1, #1
 8011d8a:	481d      	ldr	r0, [pc, #116]	; (8011e00 <write24+0x348>)
 8011d8c:	f7ff fcf3 	bl	8011776 <PIN_LOW>
 8011d90:	2101      	movs	r1, #1
 8011d92:	481b      	ldr	r0, [pc, #108]	; (8011e00 <write24+0x348>)
 8011d94:	f7ff fcef 	bl	8011776 <PIN_LOW>
 8011d98:	2101      	movs	r1, #1
 8011d9a:	4819      	ldr	r0, [pc, #100]	; (8011e00 <write24+0x348>)
 8011d9c:	f7ff fceb 	bl	8011776 <PIN_LOW>
 8011da0:	2101      	movs	r1, #1
 8011da2:	4817      	ldr	r0, [pc, #92]	; (8011e00 <write24+0x348>)
 8011da4:	f7ff fce7 	bl	8011776 <PIN_LOW>
 8011da8:	2101      	movs	r1, #1
 8011daa:	4815      	ldr	r0, [pc, #84]	; (8011e00 <write24+0x348>)
 8011dac:	f7ff fce3 	bl	8011776 <PIN_LOW>
 8011db0:	2101      	movs	r1, #1
 8011db2:	4813      	ldr	r0, [pc, #76]	; (8011e00 <write24+0x348>)
 8011db4:	f7ff fcdf 	bl	8011776 <PIN_LOW>
 8011db8:	2101      	movs	r1, #1
 8011dba:	4811      	ldr	r0, [pc, #68]	; (8011e00 <write24+0x348>)
 8011dbc:	f7ff fcdb 	bl	8011776 <PIN_LOW>
 8011dc0:	2101      	movs	r1, #1
 8011dc2:	480f      	ldr	r0, [pc, #60]	; (8011e00 <write24+0x348>)
 8011dc4:	f7ff fcd7 	bl	8011776 <PIN_LOW>
 8011dc8:	2101      	movs	r1, #1
 8011dca:	480d      	ldr	r0, [pc, #52]	; (8011e00 <write24+0x348>)
 8011dcc:	f7ff fcd3 	bl	8011776 <PIN_LOW>
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	480b      	ldr	r0, [pc, #44]	; (8011e00 <write24+0x348>)
 8011dd4:	f7ff fccf 	bl	8011776 <PIN_LOW>
 8011dd8:	2101      	movs	r1, #1
 8011dda:	4809      	ldr	r0, [pc, #36]	; (8011e00 <write24+0x348>)
 8011ddc:	f7ff fccb 	bl	8011776 <PIN_LOW>
 8011de0:	2101      	movs	r1, #1
 8011de2:	4807      	ldr	r0, [pc, #28]	; (8011e00 <write24+0x348>)
 8011de4:	f7ff fcc7 	bl	8011776 <PIN_LOW>
 8011de8:	2101      	movs	r1, #1
 8011dea:	4805      	ldr	r0, [pc, #20]	; (8011e00 <write24+0x348>)
 8011dec:	f7ff fcd3 	bl	8011796 <PIN_HIGH>
 8011df0:	2101      	movs	r1, #1
 8011df2:	e007      	b.n	8011e04 <write24+0x34c>
 8011df4:	40020c00 	.word	0x40020c00
 8011df8:	40021000 	.word	0x40021000
 8011dfc:	40021400 	.word	0x40021400
 8011e00:	40020800 	.word	0x40020800
 8011e04:	4803      	ldr	r0, [pc, #12]	; (8011e14 <write24+0x35c>)
 8011e06:	f7ff fcc6 	bl	8011796 <PIN_HIGH>
}
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	40020800 	.word	0x40020800

08011e18 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	4603      	mov	r3, r0
 8011e20:	460a      	mov	r2, r1
 8011e22:	80fb      	strh	r3, [r7, #6]
 8011e24:	4613      	mov	r3, r2
 8011e26:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8011e28:	2108      	movs	r1, #8
 8011e2a:	48c3      	ldr	r0, [pc, #780]	; (8012138 <writecmddata+0x320>)
 8011e2c:	f7ff fca3 	bl	8011776 <PIN_LOW>
    WriteCmd(cmd);
 8011e30:	2120      	movs	r1, #32
 8011e32:	48c2      	ldr	r0, [pc, #776]	; (801213c <writecmddata+0x324>)
 8011e34:	f7ff fc9f 	bl	8011776 <PIN_LOW>
 8011e38:	88fb      	ldrh	r3, [r7, #6]
 8011e3a:	0a1b      	lsrs	r3, r3, #8
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	73fb      	strb	r3, [r7, #15]
 8011e40:	88fb      	ldrh	r3, [r7, #6]
 8011e42:	73bb      	strb	r3, [r7, #14]
 8011e44:	4bbd      	ldr	r3, [pc, #756]	; (801213c <writecmddata+0x324>)
 8011e46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011e4a:	619a      	str	r2, [r3, #24]
 8011e4c:	4bbc      	ldr	r3, [pc, #752]	; (8012140 <writecmddata+0x328>)
 8011e4e:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011e52:	619a      	str	r2, [r3, #24]
 8011e54:	4bb8      	ldr	r3, [pc, #736]	; (8012138 <writecmddata+0x320>)
 8011e56:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011e5a:	619a      	str	r2, [r3, #24]
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
 8011e5e:	039b      	lsls	r3, r3, #14
 8011e60:	4ab6      	ldr	r2, [pc, #728]	; (801213c <writecmddata+0x324>)
 8011e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e66:	6193      	str	r3, [r2, #24]
 8011e68:	7bfb      	ldrb	r3, [r7, #15]
 8011e6a:	029b      	lsls	r3, r3, #10
 8011e6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
 8011e72:	019b      	lsls	r3, r3, #6
 8011e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e78:	431a      	orrs	r2, r3
 8011e7a:	7bfb      	ldrb	r3, [r7, #15]
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e82:	431a      	orrs	r2, r3
 8011e84:	4bae      	ldr	r3, [pc, #696]	; (8012140 <writecmddata+0x328>)
 8011e86:	619a      	str	r2, [r3, #24]
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	031b      	lsls	r3, r3, #12
 8011e8c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011e90:	7bfb      	ldrb	r3, [r7, #15]
 8011e92:	035b      	lsls	r3, r3, #13
 8011e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e98:	431a      	orrs	r2, r3
 8011e9a:	7bfb      	ldrb	r3, [r7, #15]
 8011e9c:	029b      	lsls	r3, r3, #10
 8011e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ea2:	431a      	orrs	r2, r3
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
 8011ea6:	019b      	lsls	r3, r3, #6
 8011ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011eac:	431a      	orrs	r2, r3
 8011eae:	4ba2      	ldr	r3, [pc, #648]	; (8012138 <writecmddata+0x320>)
 8011eb0:	619a      	str	r2, [r3, #24]
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	48a3      	ldr	r0, [pc, #652]	; (8012144 <writecmddata+0x32c>)
 8011eb6:	f7ff fc5e 	bl	8011776 <PIN_LOW>
 8011eba:	2101      	movs	r1, #1
 8011ebc:	48a1      	ldr	r0, [pc, #644]	; (8012144 <writecmddata+0x32c>)
 8011ebe:	f7ff fc5a 	bl	8011776 <PIN_LOW>
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	489f      	ldr	r0, [pc, #636]	; (8012144 <writecmddata+0x32c>)
 8011ec6:	f7ff fc56 	bl	8011776 <PIN_LOW>
 8011eca:	2101      	movs	r1, #1
 8011ecc:	489d      	ldr	r0, [pc, #628]	; (8012144 <writecmddata+0x32c>)
 8011ece:	f7ff fc52 	bl	8011776 <PIN_LOW>
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	489b      	ldr	r0, [pc, #620]	; (8012144 <writecmddata+0x32c>)
 8011ed6:	f7ff fc4e 	bl	8011776 <PIN_LOW>
 8011eda:	2101      	movs	r1, #1
 8011edc:	4899      	ldr	r0, [pc, #612]	; (8012144 <writecmddata+0x32c>)
 8011ede:	f7ff fc4a 	bl	8011776 <PIN_LOW>
 8011ee2:	2101      	movs	r1, #1
 8011ee4:	4897      	ldr	r0, [pc, #604]	; (8012144 <writecmddata+0x32c>)
 8011ee6:	f7ff fc46 	bl	8011776 <PIN_LOW>
 8011eea:	2101      	movs	r1, #1
 8011eec:	4895      	ldr	r0, [pc, #596]	; (8012144 <writecmddata+0x32c>)
 8011eee:	f7ff fc42 	bl	8011776 <PIN_LOW>
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	4893      	ldr	r0, [pc, #588]	; (8012144 <writecmddata+0x32c>)
 8011ef6:	f7ff fc3e 	bl	8011776 <PIN_LOW>
 8011efa:	2101      	movs	r1, #1
 8011efc:	4891      	ldr	r0, [pc, #580]	; (8012144 <writecmddata+0x32c>)
 8011efe:	f7ff fc3a 	bl	8011776 <PIN_LOW>
 8011f02:	2101      	movs	r1, #1
 8011f04:	488f      	ldr	r0, [pc, #572]	; (8012144 <writecmddata+0x32c>)
 8011f06:	f7ff fc36 	bl	8011776 <PIN_LOW>
 8011f0a:	2101      	movs	r1, #1
 8011f0c:	488d      	ldr	r0, [pc, #564]	; (8012144 <writecmddata+0x32c>)
 8011f0e:	f7ff fc32 	bl	8011776 <PIN_LOW>
 8011f12:	2101      	movs	r1, #1
 8011f14:	488b      	ldr	r0, [pc, #556]	; (8012144 <writecmddata+0x32c>)
 8011f16:	f7ff fc2e 	bl	8011776 <PIN_LOW>
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	4889      	ldr	r0, [pc, #548]	; (8012144 <writecmddata+0x32c>)
 8011f1e:	f7ff fc2a 	bl	8011776 <PIN_LOW>
 8011f22:	2101      	movs	r1, #1
 8011f24:	4887      	ldr	r0, [pc, #540]	; (8012144 <writecmddata+0x32c>)
 8011f26:	f7ff fc26 	bl	8011776 <PIN_LOW>
 8011f2a:	2101      	movs	r1, #1
 8011f2c:	4885      	ldr	r0, [pc, #532]	; (8012144 <writecmddata+0x32c>)
 8011f2e:	f7ff fc22 	bl	8011776 <PIN_LOW>
 8011f32:	2101      	movs	r1, #1
 8011f34:	4883      	ldr	r0, [pc, #524]	; (8012144 <writecmddata+0x32c>)
 8011f36:	f7ff fc1e 	bl	8011776 <PIN_LOW>
 8011f3a:	2101      	movs	r1, #1
 8011f3c:	4881      	ldr	r0, [pc, #516]	; (8012144 <writecmddata+0x32c>)
 8011f3e:	f7ff fc2a 	bl	8011796 <PIN_HIGH>
 8011f42:	2101      	movs	r1, #1
 8011f44:	487f      	ldr	r0, [pc, #508]	; (8012144 <writecmddata+0x32c>)
 8011f46:	f7ff fc26 	bl	8011796 <PIN_HIGH>
 8011f4a:	4b7c      	ldr	r3, [pc, #496]	; (801213c <writecmddata+0x324>)
 8011f4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f50:	619a      	str	r2, [r3, #24]
 8011f52:	4b7b      	ldr	r3, [pc, #492]	; (8012140 <writecmddata+0x328>)
 8011f54:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8011f58:	619a      	str	r2, [r3, #24]
 8011f5a:	4b77      	ldr	r3, [pc, #476]	; (8012138 <writecmddata+0x320>)
 8011f5c:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8011f60:	619a      	str	r2, [r3, #24]
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	039b      	lsls	r3, r3, #14
 8011f66:	4a75      	ldr	r2, [pc, #468]	; (801213c <writecmddata+0x324>)
 8011f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f6c:	6193      	str	r3, [r2, #24]
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
 8011f70:	029b      	lsls	r3, r3, #10
 8011f72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011f76:	7bbb      	ldrb	r3, [r7, #14]
 8011f78:	019b      	lsls	r3, r3, #6
 8011f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f7e:	431a      	orrs	r2, r3
 8011f80:	7bbb      	ldrb	r3, [r7, #14]
 8011f82:	00db      	lsls	r3, r3, #3
 8011f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011f88:	431a      	orrs	r2, r3
 8011f8a:	4b6d      	ldr	r3, [pc, #436]	; (8012140 <writecmddata+0x328>)
 8011f8c:	619a      	str	r2, [r3, #24]
 8011f8e:	7bbb      	ldrb	r3, [r7, #14]
 8011f90:	031b      	lsls	r3, r3, #12
 8011f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011f96:	7bbb      	ldrb	r3, [r7, #14]
 8011f98:	035b      	lsls	r3, r3, #13
 8011f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f9e:	431a      	orrs	r2, r3
 8011fa0:	7bbb      	ldrb	r3, [r7, #14]
 8011fa2:	029b      	lsls	r3, r3, #10
 8011fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fa8:	431a      	orrs	r2, r3
 8011faa:	7bbb      	ldrb	r3, [r7, #14]
 8011fac:	019b      	lsls	r3, r3, #6
 8011fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011fb2:	431a      	orrs	r2, r3
 8011fb4:	4b60      	ldr	r3, [pc, #384]	; (8012138 <writecmddata+0x320>)
 8011fb6:	619a      	str	r2, [r3, #24]
 8011fb8:	2101      	movs	r1, #1
 8011fba:	4862      	ldr	r0, [pc, #392]	; (8012144 <writecmddata+0x32c>)
 8011fbc:	f7ff fbdb 	bl	8011776 <PIN_LOW>
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4860      	ldr	r0, [pc, #384]	; (8012144 <writecmddata+0x32c>)
 8011fc4:	f7ff fbd7 	bl	8011776 <PIN_LOW>
 8011fc8:	2101      	movs	r1, #1
 8011fca:	485e      	ldr	r0, [pc, #376]	; (8012144 <writecmddata+0x32c>)
 8011fcc:	f7ff fbd3 	bl	8011776 <PIN_LOW>
 8011fd0:	2101      	movs	r1, #1
 8011fd2:	485c      	ldr	r0, [pc, #368]	; (8012144 <writecmddata+0x32c>)
 8011fd4:	f7ff fbcf 	bl	8011776 <PIN_LOW>
 8011fd8:	2101      	movs	r1, #1
 8011fda:	485a      	ldr	r0, [pc, #360]	; (8012144 <writecmddata+0x32c>)
 8011fdc:	f7ff fbcb 	bl	8011776 <PIN_LOW>
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	4858      	ldr	r0, [pc, #352]	; (8012144 <writecmddata+0x32c>)
 8011fe4:	f7ff fbc7 	bl	8011776 <PIN_LOW>
 8011fe8:	2101      	movs	r1, #1
 8011fea:	4856      	ldr	r0, [pc, #344]	; (8012144 <writecmddata+0x32c>)
 8011fec:	f7ff fbc3 	bl	8011776 <PIN_LOW>
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	4854      	ldr	r0, [pc, #336]	; (8012144 <writecmddata+0x32c>)
 8011ff4:	f7ff fbbf 	bl	8011776 <PIN_LOW>
 8011ff8:	2101      	movs	r1, #1
 8011ffa:	4852      	ldr	r0, [pc, #328]	; (8012144 <writecmddata+0x32c>)
 8011ffc:	f7ff fbbb 	bl	8011776 <PIN_LOW>
 8012000:	2101      	movs	r1, #1
 8012002:	4850      	ldr	r0, [pc, #320]	; (8012144 <writecmddata+0x32c>)
 8012004:	f7ff fbb7 	bl	8011776 <PIN_LOW>
 8012008:	2101      	movs	r1, #1
 801200a:	484e      	ldr	r0, [pc, #312]	; (8012144 <writecmddata+0x32c>)
 801200c:	f7ff fbb3 	bl	8011776 <PIN_LOW>
 8012010:	2101      	movs	r1, #1
 8012012:	484c      	ldr	r0, [pc, #304]	; (8012144 <writecmddata+0x32c>)
 8012014:	f7ff fbaf 	bl	8011776 <PIN_LOW>
 8012018:	2101      	movs	r1, #1
 801201a:	484a      	ldr	r0, [pc, #296]	; (8012144 <writecmddata+0x32c>)
 801201c:	f7ff fbab 	bl	8011776 <PIN_LOW>
 8012020:	2101      	movs	r1, #1
 8012022:	4848      	ldr	r0, [pc, #288]	; (8012144 <writecmddata+0x32c>)
 8012024:	f7ff fba7 	bl	8011776 <PIN_LOW>
 8012028:	2101      	movs	r1, #1
 801202a:	4846      	ldr	r0, [pc, #280]	; (8012144 <writecmddata+0x32c>)
 801202c:	f7ff fba3 	bl	8011776 <PIN_LOW>
 8012030:	2101      	movs	r1, #1
 8012032:	4844      	ldr	r0, [pc, #272]	; (8012144 <writecmddata+0x32c>)
 8012034:	f7ff fb9f 	bl	8011776 <PIN_LOW>
 8012038:	2101      	movs	r1, #1
 801203a:	4842      	ldr	r0, [pc, #264]	; (8012144 <writecmddata+0x32c>)
 801203c:	f7ff fb9b 	bl	8011776 <PIN_LOW>
 8012040:	2101      	movs	r1, #1
 8012042:	4840      	ldr	r0, [pc, #256]	; (8012144 <writecmddata+0x32c>)
 8012044:	f7ff fba7 	bl	8011796 <PIN_HIGH>
 8012048:	2101      	movs	r1, #1
 801204a:	483e      	ldr	r0, [pc, #248]	; (8012144 <writecmddata+0x32c>)
 801204c:	f7ff fba3 	bl	8011796 <PIN_HIGH>
 8012050:	2120      	movs	r1, #32
 8012052:	483a      	ldr	r0, [pc, #232]	; (801213c <writecmddata+0x324>)
 8012054:	f7ff fb9f 	bl	8011796 <PIN_HIGH>
    WriteData(dat);
 8012058:	88bb      	ldrh	r3, [r7, #4]
 801205a:	0a1b      	lsrs	r3, r3, #8
 801205c:	b29b      	uxth	r3, r3
 801205e:	737b      	strb	r3, [r7, #13]
 8012060:	88bb      	ldrh	r3, [r7, #4]
 8012062:	733b      	strb	r3, [r7, #12]
 8012064:	4b35      	ldr	r3, [pc, #212]	; (801213c <writecmddata+0x324>)
 8012066:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801206a:	619a      	str	r2, [r3, #24]
 801206c:	4b34      	ldr	r3, [pc, #208]	; (8012140 <writecmddata+0x328>)
 801206e:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012072:	619a      	str	r2, [r3, #24]
 8012074:	4b30      	ldr	r3, [pc, #192]	; (8012138 <writecmddata+0x320>)
 8012076:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801207a:	619a      	str	r2, [r3, #24]
 801207c:	7b7b      	ldrb	r3, [r7, #13]
 801207e:	039b      	lsls	r3, r3, #14
 8012080:	4a2e      	ldr	r2, [pc, #184]	; (801213c <writecmddata+0x324>)
 8012082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012086:	6193      	str	r3, [r2, #24]
 8012088:	7b7b      	ldrb	r3, [r7, #13]
 801208a:	029b      	lsls	r3, r3, #10
 801208c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012090:	7b7b      	ldrb	r3, [r7, #13]
 8012092:	019b      	lsls	r3, r3, #6
 8012094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012098:	431a      	orrs	r2, r3
 801209a:	7b7b      	ldrb	r3, [r7, #13]
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80120a2:	431a      	orrs	r2, r3
 80120a4:	4b26      	ldr	r3, [pc, #152]	; (8012140 <writecmddata+0x328>)
 80120a6:	619a      	str	r2, [r3, #24]
 80120a8:	7b7b      	ldrb	r3, [r7, #13]
 80120aa:	031b      	lsls	r3, r3, #12
 80120ac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80120b0:	7b7b      	ldrb	r3, [r7, #13]
 80120b2:	035b      	lsls	r3, r3, #13
 80120b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120b8:	431a      	orrs	r2, r3
 80120ba:	7b7b      	ldrb	r3, [r7, #13]
 80120bc:	029b      	lsls	r3, r3, #10
 80120be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120c2:	431a      	orrs	r2, r3
 80120c4:	7b7b      	ldrb	r3, [r7, #13]
 80120c6:	019b      	lsls	r3, r3, #6
 80120c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80120cc:	431a      	orrs	r2, r3
 80120ce:	4b1a      	ldr	r3, [pc, #104]	; (8012138 <writecmddata+0x320>)
 80120d0:	619a      	str	r2, [r3, #24]
 80120d2:	2101      	movs	r1, #1
 80120d4:	481b      	ldr	r0, [pc, #108]	; (8012144 <writecmddata+0x32c>)
 80120d6:	f7ff fb4e 	bl	8011776 <PIN_LOW>
 80120da:	2101      	movs	r1, #1
 80120dc:	4819      	ldr	r0, [pc, #100]	; (8012144 <writecmddata+0x32c>)
 80120de:	f7ff fb4a 	bl	8011776 <PIN_LOW>
 80120e2:	2101      	movs	r1, #1
 80120e4:	4817      	ldr	r0, [pc, #92]	; (8012144 <writecmddata+0x32c>)
 80120e6:	f7ff fb46 	bl	8011776 <PIN_LOW>
 80120ea:	2101      	movs	r1, #1
 80120ec:	4815      	ldr	r0, [pc, #84]	; (8012144 <writecmddata+0x32c>)
 80120ee:	f7ff fb42 	bl	8011776 <PIN_LOW>
 80120f2:	2101      	movs	r1, #1
 80120f4:	4813      	ldr	r0, [pc, #76]	; (8012144 <writecmddata+0x32c>)
 80120f6:	f7ff fb3e 	bl	8011776 <PIN_LOW>
 80120fa:	2101      	movs	r1, #1
 80120fc:	4811      	ldr	r0, [pc, #68]	; (8012144 <writecmddata+0x32c>)
 80120fe:	f7ff fb3a 	bl	8011776 <PIN_LOW>
 8012102:	2101      	movs	r1, #1
 8012104:	480f      	ldr	r0, [pc, #60]	; (8012144 <writecmddata+0x32c>)
 8012106:	f7ff fb36 	bl	8011776 <PIN_LOW>
 801210a:	2101      	movs	r1, #1
 801210c:	480d      	ldr	r0, [pc, #52]	; (8012144 <writecmddata+0x32c>)
 801210e:	f7ff fb32 	bl	8011776 <PIN_LOW>
 8012112:	2101      	movs	r1, #1
 8012114:	480b      	ldr	r0, [pc, #44]	; (8012144 <writecmddata+0x32c>)
 8012116:	f7ff fb2e 	bl	8011776 <PIN_LOW>
 801211a:	2101      	movs	r1, #1
 801211c:	4809      	ldr	r0, [pc, #36]	; (8012144 <writecmddata+0x32c>)
 801211e:	f7ff fb2a 	bl	8011776 <PIN_LOW>
 8012122:	2101      	movs	r1, #1
 8012124:	4807      	ldr	r0, [pc, #28]	; (8012144 <writecmddata+0x32c>)
 8012126:	f7ff fb26 	bl	8011776 <PIN_LOW>
 801212a:	2101      	movs	r1, #1
 801212c:	4805      	ldr	r0, [pc, #20]	; (8012144 <writecmddata+0x32c>)
 801212e:	f7ff fb22 	bl	8011776 <PIN_LOW>
 8012132:	2101      	movs	r1, #1
 8012134:	e008      	b.n	8012148 <writecmddata+0x330>
 8012136:	bf00      	nop
 8012138:	40021400 	.word	0x40021400
 801213c:	40020c00 	.word	0x40020c00
 8012140:	40021000 	.word	0x40021000
 8012144:	40020800 	.word	0x40020800
 8012148:	4852      	ldr	r0, [pc, #328]	; (8012294 <writecmddata+0x47c>)
 801214a:	f7ff fb14 	bl	8011776 <PIN_LOW>
 801214e:	2101      	movs	r1, #1
 8012150:	4850      	ldr	r0, [pc, #320]	; (8012294 <writecmddata+0x47c>)
 8012152:	f7ff fb10 	bl	8011776 <PIN_LOW>
 8012156:	2101      	movs	r1, #1
 8012158:	484e      	ldr	r0, [pc, #312]	; (8012294 <writecmddata+0x47c>)
 801215a:	f7ff fb0c 	bl	8011776 <PIN_LOW>
 801215e:	2101      	movs	r1, #1
 8012160:	484c      	ldr	r0, [pc, #304]	; (8012294 <writecmddata+0x47c>)
 8012162:	f7ff fb08 	bl	8011776 <PIN_LOW>
 8012166:	2101      	movs	r1, #1
 8012168:	484a      	ldr	r0, [pc, #296]	; (8012294 <writecmddata+0x47c>)
 801216a:	f7ff fb04 	bl	8011776 <PIN_LOW>
 801216e:	2101      	movs	r1, #1
 8012170:	4848      	ldr	r0, [pc, #288]	; (8012294 <writecmddata+0x47c>)
 8012172:	f7ff fb10 	bl	8011796 <PIN_HIGH>
 8012176:	2101      	movs	r1, #1
 8012178:	4846      	ldr	r0, [pc, #280]	; (8012294 <writecmddata+0x47c>)
 801217a:	f7ff fb0c 	bl	8011796 <PIN_HIGH>
 801217e:	4b46      	ldr	r3, [pc, #280]	; (8012298 <writecmddata+0x480>)
 8012180:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012184:	619a      	str	r2, [r3, #24]
 8012186:	4b45      	ldr	r3, [pc, #276]	; (801229c <writecmddata+0x484>)
 8012188:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801218c:	619a      	str	r2, [r3, #24]
 801218e:	4b44      	ldr	r3, [pc, #272]	; (80122a0 <writecmddata+0x488>)
 8012190:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012194:	619a      	str	r2, [r3, #24]
 8012196:	7b3b      	ldrb	r3, [r7, #12]
 8012198:	039b      	lsls	r3, r3, #14
 801219a:	4a3f      	ldr	r2, [pc, #252]	; (8012298 <writecmddata+0x480>)
 801219c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121a0:	6193      	str	r3, [r2, #24]
 80121a2:	7b3b      	ldrb	r3, [r7, #12]
 80121a4:	029b      	lsls	r3, r3, #10
 80121a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80121aa:	7b3b      	ldrb	r3, [r7, #12]
 80121ac:	019b      	lsls	r3, r3, #6
 80121ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121b2:	431a      	orrs	r2, r3
 80121b4:	7b3b      	ldrb	r3, [r7, #12]
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80121bc:	431a      	orrs	r2, r3
 80121be:	4b37      	ldr	r3, [pc, #220]	; (801229c <writecmddata+0x484>)
 80121c0:	619a      	str	r2, [r3, #24]
 80121c2:	7b3b      	ldrb	r3, [r7, #12]
 80121c4:	031b      	lsls	r3, r3, #12
 80121c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80121ca:	7b3b      	ldrb	r3, [r7, #12]
 80121cc:	035b      	lsls	r3, r3, #13
 80121ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121d2:	431a      	orrs	r2, r3
 80121d4:	7b3b      	ldrb	r3, [r7, #12]
 80121d6:	029b      	lsls	r3, r3, #10
 80121d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121dc:	431a      	orrs	r2, r3
 80121de:	7b3b      	ldrb	r3, [r7, #12]
 80121e0:	019b      	lsls	r3, r3, #6
 80121e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121e6:	431a      	orrs	r2, r3
 80121e8:	4b2d      	ldr	r3, [pc, #180]	; (80122a0 <writecmddata+0x488>)
 80121ea:	619a      	str	r2, [r3, #24]
 80121ec:	2101      	movs	r1, #1
 80121ee:	4829      	ldr	r0, [pc, #164]	; (8012294 <writecmddata+0x47c>)
 80121f0:	f7ff fac1 	bl	8011776 <PIN_LOW>
 80121f4:	2101      	movs	r1, #1
 80121f6:	4827      	ldr	r0, [pc, #156]	; (8012294 <writecmddata+0x47c>)
 80121f8:	f7ff fabd 	bl	8011776 <PIN_LOW>
 80121fc:	2101      	movs	r1, #1
 80121fe:	4825      	ldr	r0, [pc, #148]	; (8012294 <writecmddata+0x47c>)
 8012200:	f7ff fab9 	bl	8011776 <PIN_LOW>
 8012204:	2101      	movs	r1, #1
 8012206:	4823      	ldr	r0, [pc, #140]	; (8012294 <writecmddata+0x47c>)
 8012208:	f7ff fab5 	bl	8011776 <PIN_LOW>
 801220c:	2101      	movs	r1, #1
 801220e:	4821      	ldr	r0, [pc, #132]	; (8012294 <writecmddata+0x47c>)
 8012210:	f7ff fab1 	bl	8011776 <PIN_LOW>
 8012214:	2101      	movs	r1, #1
 8012216:	481f      	ldr	r0, [pc, #124]	; (8012294 <writecmddata+0x47c>)
 8012218:	f7ff faad 	bl	8011776 <PIN_LOW>
 801221c:	2101      	movs	r1, #1
 801221e:	481d      	ldr	r0, [pc, #116]	; (8012294 <writecmddata+0x47c>)
 8012220:	f7ff faa9 	bl	8011776 <PIN_LOW>
 8012224:	2101      	movs	r1, #1
 8012226:	481b      	ldr	r0, [pc, #108]	; (8012294 <writecmddata+0x47c>)
 8012228:	f7ff faa5 	bl	8011776 <PIN_LOW>
 801222c:	2101      	movs	r1, #1
 801222e:	4819      	ldr	r0, [pc, #100]	; (8012294 <writecmddata+0x47c>)
 8012230:	f7ff faa1 	bl	8011776 <PIN_LOW>
 8012234:	2101      	movs	r1, #1
 8012236:	4817      	ldr	r0, [pc, #92]	; (8012294 <writecmddata+0x47c>)
 8012238:	f7ff fa9d 	bl	8011776 <PIN_LOW>
 801223c:	2101      	movs	r1, #1
 801223e:	4815      	ldr	r0, [pc, #84]	; (8012294 <writecmddata+0x47c>)
 8012240:	f7ff fa99 	bl	8011776 <PIN_LOW>
 8012244:	2101      	movs	r1, #1
 8012246:	4813      	ldr	r0, [pc, #76]	; (8012294 <writecmddata+0x47c>)
 8012248:	f7ff fa95 	bl	8011776 <PIN_LOW>
 801224c:	2101      	movs	r1, #1
 801224e:	4811      	ldr	r0, [pc, #68]	; (8012294 <writecmddata+0x47c>)
 8012250:	f7ff fa91 	bl	8011776 <PIN_LOW>
 8012254:	2101      	movs	r1, #1
 8012256:	480f      	ldr	r0, [pc, #60]	; (8012294 <writecmddata+0x47c>)
 8012258:	f7ff fa8d 	bl	8011776 <PIN_LOW>
 801225c:	2101      	movs	r1, #1
 801225e:	480d      	ldr	r0, [pc, #52]	; (8012294 <writecmddata+0x47c>)
 8012260:	f7ff fa89 	bl	8011776 <PIN_LOW>
 8012264:	2101      	movs	r1, #1
 8012266:	480b      	ldr	r0, [pc, #44]	; (8012294 <writecmddata+0x47c>)
 8012268:	f7ff fa85 	bl	8011776 <PIN_LOW>
 801226c:	2101      	movs	r1, #1
 801226e:	4809      	ldr	r0, [pc, #36]	; (8012294 <writecmddata+0x47c>)
 8012270:	f7ff fa81 	bl	8011776 <PIN_LOW>
 8012274:	2101      	movs	r1, #1
 8012276:	4807      	ldr	r0, [pc, #28]	; (8012294 <writecmddata+0x47c>)
 8012278:	f7ff fa8d 	bl	8011796 <PIN_HIGH>
 801227c:	2101      	movs	r1, #1
 801227e:	4805      	ldr	r0, [pc, #20]	; (8012294 <writecmddata+0x47c>)
 8012280:	f7ff fa89 	bl	8011796 <PIN_HIGH>
    CS_IDLE;
 8012284:	2108      	movs	r1, #8
 8012286:	4806      	ldr	r0, [pc, #24]	; (80122a0 <writecmddata+0x488>)
 8012288:	f7ff fa85 	bl	8011796 <PIN_HIGH>
}
 801228c:	bf00      	nop
 801228e:	3710      	adds	r7, #16
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	40020800 	.word	0x40020800
 8012298:	40020c00 	.word	0x40020c00
 801229c:	40021000 	.word	0x40021000
 80122a0:	40021400 	.word	0x40021400

080122a4 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	4603      	mov	r3, r0
 80122ac:	603a      	str	r2, [r7, #0]
 80122ae:	80fb      	strh	r3, [r7, #6]
 80122b0:	460b      	mov	r3, r1
 80122b2:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80122b4:	2108      	movs	r1, #8
 80122b6:	488c      	ldr	r0, [pc, #560]	; (80124e8 <WriteCmdParamN+0x244>)
 80122b8:	f7ff fa5d 	bl	8011776 <PIN_LOW>
    WriteCmd(cmd);
 80122bc:	2120      	movs	r1, #32
 80122be:	488b      	ldr	r0, [pc, #556]	; (80124ec <WriteCmdParamN+0x248>)
 80122c0:	f7ff fa59 	bl	8011776 <PIN_LOW>
 80122c4:	88fb      	ldrh	r3, [r7, #6]
 80122c6:	0a1b      	lsrs	r3, r3, #8
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	73fb      	strb	r3, [r7, #15]
 80122cc:	88fb      	ldrh	r3, [r7, #6]
 80122ce:	73bb      	strb	r3, [r7, #14]
 80122d0:	4b86      	ldr	r3, [pc, #536]	; (80124ec <WriteCmdParamN+0x248>)
 80122d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80122d6:	619a      	str	r2, [r3, #24]
 80122d8:	4b85      	ldr	r3, [pc, #532]	; (80124f0 <WriteCmdParamN+0x24c>)
 80122da:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80122de:	619a      	str	r2, [r3, #24]
 80122e0:	4b81      	ldr	r3, [pc, #516]	; (80124e8 <WriteCmdParamN+0x244>)
 80122e2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80122e6:	619a      	str	r2, [r3, #24]
 80122e8:	7bfb      	ldrb	r3, [r7, #15]
 80122ea:	039b      	lsls	r3, r3, #14
 80122ec:	4a7f      	ldr	r2, [pc, #508]	; (80124ec <WriteCmdParamN+0x248>)
 80122ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122f2:	6193      	str	r3, [r2, #24]
 80122f4:	7bfb      	ldrb	r3, [r7, #15]
 80122f6:	029b      	lsls	r3, r3, #10
 80122f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80122fc:	7bfb      	ldrb	r3, [r7, #15]
 80122fe:	019b      	lsls	r3, r3, #6
 8012300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012304:	431a      	orrs	r2, r3
 8012306:	7bfb      	ldrb	r3, [r7, #15]
 8012308:	00db      	lsls	r3, r3, #3
 801230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801230e:	431a      	orrs	r2, r3
 8012310:	4b77      	ldr	r3, [pc, #476]	; (80124f0 <WriteCmdParamN+0x24c>)
 8012312:	619a      	str	r2, [r3, #24]
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	031b      	lsls	r3, r3, #12
 8012318:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801231c:	7bfb      	ldrb	r3, [r7, #15]
 801231e:	035b      	lsls	r3, r3, #13
 8012320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012324:	431a      	orrs	r2, r3
 8012326:	7bfb      	ldrb	r3, [r7, #15]
 8012328:	029b      	lsls	r3, r3, #10
 801232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801232e:	431a      	orrs	r2, r3
 8012330:	7bfb      	ldrb	r3, [r7, #15]
 8012332:	019b      	lsls	r3, r3, #6
 8012334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012338:	431a      	orrs	r2, r3
 801233a:	4b6b      	ldr	r3, [pc, #428]	; (80124e8 <WriteCmdParamN+0x244>)
 801233c:	619a      	str	r2, [r3, #24]
 801233e:	2101      	movs	r1, #1
 8012340:	486c      	ldr	r0, [pc, #432]	; (80124f4 <WriteCmdParamN+0x250>)
 8012342:	f7ff fa18 	bl	8011776 <PIN_LOW>
 8012346:	2101      	movs	r1, #1
 8012348:	486a      	ldr	r0, [pc, #424]	; (80124f4 <WriteCmdParamN+0x250>)
 801234a:	f7ff fa14 	bl	8011776 <PIN_LOW>
 801234e:	2101      	movs	r1, #1
 8012350:	4868      	ldr	r0, [pc, #416]	; (80124f4 <WriteCmdParamN+0x250>)
 8012352:	f7ff fa10 	bl	8011776 <PIN_LOW>
 8012356:	2101      	movs	r1, #1
 8012358:	4866      	ldr	r0, [pc, #408]	; (80124f4 <WriteCmdParamN+0x250>)
 801235a:	f7ff fa0c 	bl	8011776 <PIN_LOW>
 801235e:	2101      	movs	r1, #1
 8012360:	4864      	ldr	r0, [pc, #400]	; (80124f4 <WriteCmdParamN+0x250>)
 8012362:	f7ff fa08 	bl	8011776 <PIN_LOW>
 8012366:	2101      	movs	r1, #1
 8012368:	4862      	ldr	r0, [pc, #392]	; (80124f4 <WriteCmdParamN+0x250>)
 801236a:	f7ff fa04 	bl	8011776 <PIN_LOW>
 801236e:	2101      	movs	r1, #1
 8012370:	4860      	ldr	r0, [pc, #384]	; (80124f4 <WriteCmdParamN+0x250>)
 8012372:	f7ff fa00 	bl	8011776 <PIN_LOW>
 8012376:	2101      	movs	r1, #1
 8012378:	485e      	ldr	r0, [pc, #376]	; (80124f4 <WriteCmdParamN+0x250>)
 801237a:	f7ff f9fc 	bl	8011776 <PIN_LOW>
 801237e:	2101      	movs	r1, #1
 8012380:	485c      	ldr	r0, [pc, #368]	; (80124f4 <WriteCmdParamN+0x250>)
 8012382:	f7ff f9f8 	bl	8011776 <PIN_LOW>
 8012386:	2101      	movs	r1, #1
 8012388:	485a      	ldr	r0, [pc, #360]	; (80124f4 <WriteCmdParamN+0x250>)
 801238a:	f7ff f9f4 	bl	8011776 <PIN_LOW>
 801238e:	2101      	movs	r1, #1
 8012390:	4858      	ldr	r0, [pc, #352]	; (80124f4 <WriteCmdParamN+0x250>)
 8012392:	f7ff f9f0 	bl	8011776 <PIN_LOW>
 8012396:	2101      	movs	r1, #1
 8012398:	4856      	ldr	r0, [pc, #344]	; (80124f4 <WriteCmdParamN+0x250>)
 801239a:	f7ff f9ec 	bl	8011776 <PIN_LOW>
 801239e:	2101      	movs	r1, #1
 80123a0:	4854      	ldr	r0, [pc, #336]	; (80124f4 <WriteCmdParamN+0x250>)
 80123a2:	f7ff f9e8 	bl	8011776 <PIN_LOW>
 80123a6:	2101      	movs	r1, #1
 80123a8:	4852      	ldr	r0, [pc, #328]	; (80124f4 <WriteCmdParamN+0x250>)
 80123aa:	f7ff f9e4 	bl	8011776 <PIN_LOW>
 80123ae:	2101      	movs	r1, #1
 80123b0:	4850      	ldr	r0, [pc, #320]	; (80124f4 <WriteCmdParamN+0x250>)
 80123b2:	f7ff f9e0 	bl	8011776 <PIN_LOW>
 80123b6:	2101      	movs	r1, #1
 80123b8:	484e      	ldr	r0, [pc, #312]	; (80124f4 <WriteCmdParamN+0x250>)
 80123ba:	f7ff f9dc 	bl	8011776 <PIN_LOW>
 80123be:	2101      	movs	r1, #1
 80123c0:	484c      	ldr	r0, [pc, #304]	; (80124f4 <WriteCmdParamN+0x250>)
 80123c2:	f7ff f9d8 	bl	8011776 <PIN_LOW>
 80123c6:	2101      	movs	r1, #1
 80123c8:	484a      	ldr	r0, [pc, #296]	; (80124f4 <WriteCmdParamN+0x250>)
 80123ca:	f7ff f9e4 	bl	8011796 <PIN_HIGH>
 80123ce:	2101      	movs	r1, #1
 80123d0:	4848      	ldr	r0, [pc, #288]	; (80124f4 <WriteCmdParamN+0x250>)
 80123d2:	f7ff f9e0 	bl	8011796 <PIN_HIGH>
 80123d6:	4b45      	ldr	r3, [pc, #276]	; (80124ec <WriteCmdParamN+0x248>)
 80123d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80123dc:	619a      	str	r2, [r3, #24]
 80123de:	4b44      	ldr	r3, [pc, #272]	; (80124f0 <WriteCmdParamN+0x24c>)
 80123e0:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80123e4:	619a      	str	r2, [r3, #24]
 80123e6:	4b40      	ldr	r3, [pc, #256]	; (80124e8 <WriteCmdParamN+0x244>)
 80123e8:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80123ec:	619a      	str	r2, [r3, #24]
 80123ee:	7bbb      	ldrb	r3, [r7, #14]
 80123f0:	039b      	lsls	r3, r3, #14
 80123f2:	4a3e      	ldr	r2, [pc, #248]	; (80124ec <WriteCmdParamN+0x248>)
 80123f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123f8:	6193      	str	r3, [r2, #24]
 80123fa:	7bbb      	ldrb	r3, [r7, #14]
 80123fc:	029b      	lsls	r3, r3, #10
 80123fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012402:	7bbb      	ldrb	r3, [r7, #14]
 8012404:	019b      	lsls	r3, r3, #6
 8012406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801240a:	431a      	orrs	r2, r3
 801240c:	7bbb      	ldrb	r3, [r7, #14]
 801240e:	00db      	lsls	r3, r3, #3
 8012410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012414:	431a      	orrs	r2, r3
 8012416:	4b36      	ldr	r3, [pc, #216]	; (80124f0 <WriteCmdParamN+0x24c>)
 8012418:	619a      	str	r2, [r3, #24]
 801241a:	7bbb      	ldrb	r3, [r7, #14]
 801241c:	031b      	lsls	r3, r3, #12
 801241e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012422:	7bbb      	ldrb	r3, [r7, #14]
 8012424:	035b      	lsls	r3, r3, #13
 8012426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801242a:	431a      	orrs	r2, r3
 801242c:	7bbb      	ldrb	r3, [r7, #14]
 801242e:	029b      	lsls	r3, r3, #10
 8012430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012434:	431a      	orrs	r2, r3
 8012436:	7bbb      	ldrb	r3, [r7, #14]
 8012438:	019b      	lsls	r3, r3, #6
 801243a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801243e:	431a      	orrs	r2, r3
 8012440:	4b29      	ldr	r3, [pc, #164]	; (80124e8 <WriteCmdParamN+0x244>)
 8012442:	619a      	str	r2, [r3, #24]
 8012444:	2101      	movs	r1, #1
 8012446:	482b      	ldr	r0, [pc, #172]	; (80124f4 <WriteCmdParamN+0x250>)
 8012448:	f7ff f995 	bl	8011776 <PIN_LOW>
 801244c:	2101      	movs	r1, #1
 801244e:	4829      	ldr	r0, [pc, #164]	; (80124f4 <WriteCmdParamN+0x250>)
 8012450:	f7ff f991 	bl	8011776 <PIN_LOW>
 8012454:	2101      	movs	r1, #1
 8012456:	4827      	ldr	r0, [pc, #156]	; (80124f4 <WriteCmdParamN+0x250>)
 8012458:	f7ff f98d 	bl	8011776 <PIN_LOW>
 801245c:	2101      	movs	r1, #1
 801245e:	4825      	ldr	r0, [pc, #148]	; (80124f4 <WriteCmdParamN+0x250>)
 8012460:	f7ff f989 	bl	8011776 <PIN_LOW>
 8012464:	2101      	movs	r1, #1
 8012466:	4823      	ldr	r0, [pc, #140]	; (80124f4 <WriteCmdParamN+0x250>)
 8012468:	f7ff f985 	bl	8011776 <PIN_LOW>
 801246c:	2101      	movs	r1, #1
 801246e:	4821      	ldr	r0, [pc, #132]	; (80124f4 <WriteCmdParamN+0x250>)
 8012470:	f7ff f981 	bl	8011776 <PIN_LOW>
 8012474:	2101      	movs	r1, #1
 8012476:	481f      	ldr	r0, [pc, #124]	; (80124f4 <WriteCmdParamN+0x250>)
 8012478:	f7ff f97d 	bl	8011776 <PIN_LOW>
 801247c:	2101      	movs	r1, #1
 801247e:	481d      	ldr	r0, [pc, #116]	; (80124f4 <WriteCmdParamN+0x250>)
 8012480:	f7ff f979 	bl	8011776 <PIN_LOW>
 8012484:	2101      	movs	r1, #1
 8012486:	481b      	ldr	r0, [pc, #108]	; (80124f4 <WriteCmdParamN+0x250>)
 8012488:	f7ff f975 	bl	8011776 <PIN_LOW>
 801248c:	2101      	movs	r1, #1
 801248e:	4819      	ldr	r0, [pc, #100]	; (80124f4 <WriteCmdParamN+0x250>)
 8012490:	f7ff f971 	bl	8011776 <PIN_LOW>
 8012494:	2101      	movs	r1, #1
 8012496:	4817      	ldr	r0, [pc, #92]	; (80124f4 <WriteCmdParamN+0x250>)
 8012498:	f7ff f96d 	bl	8011776 <PIN_LOW>
 801249c:	2101      	movs	r1, #1
 801249e:	4815      	ldr	r0, [pc, #84]	; (80124f4 <WriteCmdParamN+0x250>)
 80124a0:	f7ff f969 	bl	8011776 <PIN_LOW>
 80124a4:	2101      	movs	r1, #1
 80124a6:	4813      	ldr	r0, [pc, #76]	; (80124f4 <WriteCmdParamN+0x250>)
 80124a8:	f7ff f965 	bl	8011776 <PIN_LOW>
 80124ac:	2101      	movs	r1, #1
 80124ae:	4811      	ldr	r0, [pc, #68]	; (80124f4 <WriteCmdParamN+0x250>)
 80124b0:	f7ff f961 	bl	8011776 <PIN_LOW>
 80124b4:	2101      	movs	r1, #1
 80124b6:	480f      	ldr	r0, [pc, #60]	; (80124f4 <WriteCmdParamN+0x250>)
 80124b8:	f7ff f95d 	bl	8011776 <PIN_LOW>
 80124bc:	2101      	movs	r1, #1
 80124be:	480d      	ldr	r0, [pc, #52]	; (80124f4 <WriteCmdParamN+0x250>)
 80124c0:	f7ff f959 	bl	8011776 <PIN_LOW>
 80124c4:	2101      	movs	r1, #1
 80124c6:	480b      	ldr	r0, [pc, #44]	; (80124f4 <WriteCmdParamN+0x250>)
 80124c8:	f7ff f955 	bl	8011776 <PIN_LOW>
 80124cc:	2101      	movs	r1, #1
 80124ce:	4809      	ldr	r0, [pc, #36]	; (80124f4 <WriteCmdParamN+0x250>)
 80124d0:	f7ff f961 	bl	8011796 <PIN_HIGH>
 80124d4:	2101      	movs	r1, #1
 80124d6:	4807      	ldr	r0, [pc, #28]	; (80124f4 <WriteCmdParamN+0x250>)
 80124d8:	f7ff f95d 	bl	8011796 <PIN_HIGH>
 80124dc:	2120      	movs	r1, #32
 80124de:	4803      	ldr	r0, [pc, #12]	; (80124ec <WriteCmdParamN+0x248>)
 80124e0:	f7ff f959 	bl	8011796 <PIN_HIGH>
    while (N-- > 0) {
 80124e4:	e1bd      	b.n	8012862 <WriteCmdParamN+0x5be>
 80124e6:	bf00      	nop
 80124e8:	40021400 	.word	0x40021400
 80124ec:	40020c00 	.word	0x40020c00
 80124f0:	40021000 	.word	0x40021000
 80124f4:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	603a      	str	r2, [r7, #0]
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8012502:	4bc3      	ldr	r3, [pc, #780]	; (8012810 <WriteCmdParamN+0x56c>)
 8012504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012508:	619a      	str	r2, [r3, #24]
 801250a:	4bc2      	ldr	r3, [pc, #776]	; (8012814 <WriteCmdParamN+0x570>)
 801250c:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012510:	619a      	str	r2, [r3, #24]
 8012512:	4bc1      	ldr	r3, [pc, #772]	; (8012818 <WriteCmdParamN+0x574>)
 8012514:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012518:	619a      	str	r2, [r3, #24]
 801251a:	7b7b      	ldrb	r3, [r7, #13]
 801251c:	039b      	lsls	r3, r3, #14
 801251e:	4abc      	ldr	r2, [pc, #752]	; (8012810 <WriteCmdParamN+0x56c>)
 8012520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012524:	6193      	str	r3, [r2, #24]
 8012526:	7b7b      	ldrb	r3, [r7, #13]
 8012528:	029b      	lsls	r3, r3, #10
 801252a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801252e:	7b7b      	ldrb	r3, [r7, #13]
 8012530:	019b      	lsls	r3, r3, #6
 8012532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012536:	431a      	orrs	r2, r3
 8012538:	7b7b      	ldrb	r3, [r7, #13]
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012540:	431a      	orrs	r2, r3
 8012542:	4bb4      	ldr	r3, [pc, #720]	; (8012814 <WriteCmdParamN+0x570>)
 8012544:	619a      	str	r2, [r3, #24]
 8012546:	7b7b      	ldrb	r3, [r7, #13]
 8012548:	031b      	lsls	r3, r3, #12
 801254a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801254e:	7b7b      	ldrb	r3, [r7, #13]
 8012550:	035b      	lsls	r3, r3, #13
 8012552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012556:	431a      	orrs	r2, r3
 8012558:	7b7b      	ldrb	r3, [r7, #13]
 801255a:	029b      	lsls	r3, r3, #10
 801255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012560:	431a      	orrs	r2, r3
 8012562:	7b7b      	ldrb	r3, [r7, #13]
 8012564:	019b      	lsls	r3, r3, #6
 8012566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801256a:	431a      	orrs	r2, r3
 801256c:	4baa      	ldr	r3, [pc, #680]	; (8012818 <WriteCmdParamN+0x574>)
 801256e:	619a      	str	r2, [r3, #24]
 8012570:	2101      	movs	r1, #1
 8012572:	48aa      	ldr	r0, [pc, #680]	; (801281c <WriteCmdParamN+0x578>)
 8012574:	f7ff f8ff 	bl	8011776 <PIN_LOW>
 8012578:	2101      	movs	r1, #1
 801257a:	48a8      	ldr	r0, [pc, #672]	; (801281c <WriteCmdParamN+0x578>)
 801257c:	f7ff f8fb 	bl	8011776 <PIN_LOW>
 8012580:	2101      	movs	r1, #1
 8012582:	48a6      	ldr	r0, [pc, #664]	; (801281c <WriteCmdParamN+0x578>)
 8012584:	f7ff f8f7 	bl	8011776 <PIN_LOW>
 8012588:	2101      	movs	r1, #1
 801258a:	48a4      	ldr	r0, [pc, #656]	; (801281c <WriteCmdParamN+0x578>)
 801258c:	f7ff f8f3 	bl	8011776 <PIN_LOW>
 8012590:	2101      	movs	r1, #1
 8012592:	48a2      	ldr	r0, [pc, #648]	; (801281c <WriteCmdParamN+0x578>)
 8012594:	f7ff f8ef 	bl	8011776 <PIN_LOW>
 8012598:	2101      	movs	r1, #1
 801259a:	48a0      	ldr	r0, [pc, #640]	; (801281c <WriteCmdParamN+0x578>)
 801259c:	f7ff f8eb 	bl	8011776 <PIN_LOW>
 80125a0:	2101      	movs	r1, #1
 80125a2:	489e      	ldr	r0, [pc, #632]	; (801281c <WriteCmdParamN+0x578>)
 80125a4:	f7ff f8e7 	bl	8011776 <PIN_LOW>
 80125a8:	2101      	movs	r1, #1
 80125aa:	489c      	ldr	r0, [pc, #624]	; (801281c <WriteCmdParamN+0x578>)
 80125ac:	f7ff f8e3 	bl	8011776 <PIN_LOW>
 80125b0:	2101      	movs	r1, #1
 80125b2:	489a      	ldr	r0, [pc, #616]	; (801281c <WriteCmdParamN+0x578>)
 80125b4:	f7ff f8df 	bl	8011776 <PIN_LOW>
 80125b8:	2101      	movs	r1, #1
 80125ba:	4898      	ldr	r0, [pc, #608]	; (801281c <WriteCmdParamN+0x578>)
 80125bc:	f7ff f8db 	bl	8011776 <PIN_LOW>
 80125c0:	2101      	movs	r1, #1
 80125c2:	4896      	ldr	r0, [pc, #600]	; (801281c <WriteCmdParamN+0x578>)
 80125c4:	f7ff f8d7 	bl	8011776 <PIN_LOW>
 80125c8:	2101      	movs	r1, #1
 80125ca:	4894      	ldr	r0, [pc, #592]	; (801281c <WriteCmdParamN+0x578>)
 80125cc:	f7ff f8d3 	bl	8011776 <PIN_LOW>
 80125d0:	2101      	movs	r1, #1
 80125d2:	4892      	ldr	r0, [pc, #584]	; (801281c <WriteCmdParamN+0x578>)
 80125d4:	f7ff f8cf 	bl	8011776 <PIN_LOW>
 80125d8:	2101      	movs	r1, #1
 80125da:	4890      	ldr	r0, [pc, #576]	; (801281c <WriteCmdParamN+0x578>)
 80125dc:	f7ff f8cb 	bl	8011776 <PIN_LOW>
 80125e0:	2101      	movs	r1, #1
 80125e2:	488e      	ldr	r0, [pc, #568]	; (801281c <WriteCmdParamN+0x578>)
 80125e4:	f7ff f8c7 	bl	8011776 <PIN_LOW>
 80125e8:	2101      	movs	r1, #1
 80125ea:	488c      	ldr	r0, [pc, #560]	; (801281c <WriteCmdParamN+0x578>)
 80125ec:	f7ff f8c3 	bl	8011776 <PIN_LOW>
 80125f0:	2101      	movs	r1, #1
 80125f2:	488a      	ldr	r0, [pc, #552]	; (801281c <WriteCmdParamN+0x578>)
 80125f4:	f7ff f8bf 	bl	8011776 <PIN_LOW>
 80125f8:	2101      	movs	r1, #1
 80125fa:	4888      	ldr	r0, [pc, #544]	; (801281c <WriteCmdParamN+0x578>)
 80125fc:	f7ff f8cb 	bl	8011796 <PIN_HIGH>
 8012600:	2101      	movs	r1, #1
 8012602:	4886      	ldr	r0, [pc, #536]	; (801281c <WriteCmdParamN+0x578>)
 8012604:	f7ff f8c7 	bl	8011796 <PIN_HIGH>
        if (N && is8347) {
 8012608:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801260c:	2b00      	cmp	r3, #0
 801260e:	f000 8128 	beq.w	8012862 <WriteCmdParamN+0x5be>
 8012612:	4b83      	ldr	r3, [pc, #524]	; (8012820 <WriteCmdParamN+0x57c>)
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 8123 	beq.w	8012862 <WriteCmdParamN+0x5be>
            cmd++;
 801261c:	88fb      	ldrh	r3, [r7, #6]
 801261e:	3301      	adds	r3, #1
 8012620:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8012622:	2120      	movs	r1, #32
 8012624:	487a      	ldr	r0, [pc, #488]	; (8012810 <WriteCmdParamN+0x56c>)
 8012626:	f7ff f8a6 	bl	8011776 <PIN_LOW>
 801262a:	88fb      	ldrh	r3, [r7, #6]
 801262c:	0a1b      	lsrs	r3, r3, #8
 801262e:	b29b      	uxth	r3, r3
 8012630:	733b      	strb	r3, [r7, #12]
 8012632:	88fb      	ldrh	r3, [r7, #6]
 8012634:	72fb      	strb	r3, [r7, #11]
 8012636:	4b76      	ldr	r3, [pc, #472]	; (8012810 <WriteCmdParamN+0x56c>)
 8012638:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801263c:	619a      	str	r2, [r3, #24]
 801263e:	4b75      	ldr	r3, [pc, #468]	; (8012814 <WriteCmdParamN+0x570>)
 8012640:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012644:	619a      	str	r2, [r3, #24]
 8012646:	4b74      	ldr	r3, [pc, #464]	; (8012818 <WriteCmdParamN+0x574>)
 8012648:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801264c:	619a      	str	r2, [r3, #24]
 801264e:	7b3b      	ldrb	r3, [r7, #12]
 8012650:	039b      	lsls	r3, r3, #14
 8012652:	4a6f      	ldr	r2, [pc, #444]	; (8012810 <WriteCmdParamN+0x56c>)
 8012654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012658:	6193      	str	r3, [r2, #24]
 801265a:	7b3b      	ldrb	r3, [r7, #12]
 801265c:	029b      	lsls	r3, r3, #10
 801265e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012662:	7b3b      	ldrb	r3, [r7, #12]
 8012664:	019b      	lsls	r3, r3, #6
 8012666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801266a:	431a      	orrs	r2, r3
 801266c:	7b3b      	ldrb	r3, [r7, #12]
 801266e:	00db      	lsls	r3, r3, #3
 8012670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012674:	431a      	orrs	r2, r3
 8012676:	4b67      	ldr	r3, [pc, #412]	; (8012814 <WriteCmdParamN+0x570>)
 8012678:	619a      	str	r2, [r3, #24]
 801267a:	7b3b      	ldrb	r3, [r7, #12]
 801267c:	031b      	lsls	r3, r3, #12
 801267e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012682:	7b3b      	ldrb	r3, [r7, #12]
 8012684:	035b      	lsls	r3, r3, #13
 8012686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801268a:	431a      	orrs	r2, r3
 801268c:	7b3b      	ldrb	r3, [r7, #12]
 801268e:	029b      	lsls	r3, r3, #10
 8012690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012694:	431a      	orrs	r2, r3
 8012696:	7b3b      	ldrb	r3, [r7, #12]
 8012698:	019b      	lsls	r3, r3, #6
 801269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801269e:	431a      	orrs	r2, r3
 80126a0:	4b5d      	ldr	r3, [pc, #372]	; (8012818 <WriteCmdParamN+0x574>)
 80126a2:	619a      	str	r2, [r3, #24]
 80126a4:	2101      	movs	r1, #1
 80126a6:	485d      	ldr	r0, [pc, #372]	; (801281c <WriteCmdParamN+0x578>)
 80126a8:	f7ff f865 	bl	8011776 <PIN_LOW>
 80126ac:	2101      	movs	r1, #1
 80126ae:	485b      	ldr	r0, [pc, #364]	; (801281c <WriteCmdParamN+0x578>)
 80126b0:	f7ff f861 	bl	8011776 <PIN_LOW>
 80126b4:	2101      	movs	r1, #1
 80126b6:	4859      	ldr	r0, [pc, #356]	; (801281c <WriteCmdParamN+0x578>)
 80126b8:	f7ff f85d 	bl	8011776 <PIN_LOW>
 80126bc:	2101      	movs	r1, #1
 80126be:	4857      	ldr	r0, [pc, #348]	; (801281c <WriteCmdParamN+0x578>)
 80126c0:	f7ff f859 	bl	8011776 <PIN_LOW>
 80126c4:	2101      	movs	r1, #1
 80126c6:	4855      	ldr	r0, [pc, #340]	; (801281c <WriteCmdParamN+0x578>)
 80126c8:	f7ff f855 	bl	8011776 <PIN_LOW>
 80126cc:	2101      	movs	r1, #1
 80126ce:	4853      	ldr	r0, [pc, #332]	; (801281c <WriteCmdParamN+0x578>)
 80126d0:	f7ff f851 	bl	8011776 <PIN_LOW>
 80126d4:	2101      	movs	r1, #1
 80126d6:	4851      	ldr	r0, [pc, #324]	; (801281c <WriteCmdParamN+0x578>)
 80126d8:	f7ff f84d 	bl	8011776 <PIN_LOW>
 80126dc:	2101      	movs	r1, #1
 80126de:	484f      	ldr	r0, [pc, #316]	; (801281c <WriteCmdParamN+0x578>)
 80126e0:	f7ff f849 	bl	8011776 <PIN_LOW>
 80126e4:	2101      	movs	r1, #1
 80126e6:	484d      	ldr	r0, [pc, #308]	; (801281c <WriteCmdParamN+0x578>)
 80126e8:	f7ff f845 	bl	8011776 <PIN_LOW>
 80126ec:	2101      	movs	r1, #1
 80126ee:	484b      	ldr	r0, [pc, #300]	; (801281c <WriteCmdParamN+0x578>)
 80126f0:	f7ff f841 	bl	8011776 <PIN_LOW>
 80126f4:	2101      	movs	r1, #1
 80126f6:	4849      	ldr	r0, [pc, #292]	; (801281c <WriteCmdParamN+0x578>)
 80126f8:	f7ff f83d 	bl	8011776 <PIN_LOW>
 80126fc:	2101      	movs	r1, #1
 80126fe:	4847      	ldr	r0, [pc, #284]	; (801281c <WriteCmdParamN+0x578>)
 8012700:	f7ff f839 	bl	8011776 <PIN_LOW>
 8012704:	2101      	movs	r1, #1
 8012706:	4845      	ldr	r0, [pc, #276]	; (801281c <WriteCmdParamN+0x578>)
 8012708:	f7ff f835 	bl	8011776 <PIN_LOW>
 801270c:	2101      	movs	r1, #1
 801270e:	4843      	ldr	r0, [pc, #268]	; (801281c <WriteCmdParamN+0x578>)
 8012710:	f7ff f831 	bl	8011776 <PIN_LOW>
 8012714:	2101      	movs	r1, #1
 8012716:	4841      	ldr	r0, [pc, #260]	; (801281c <WriteCmdParamN+0x578>)
 8012718:	f7ff f82d 	bl	8011776 <PIN_LOW>
 801271c:	2101      	movs	r1, #1
 801271e:	483f      	ldr	r0, [pc, #252]	; (801281c <WriteCmdParamN+0x578>)
 8012720:	f7ff f829 	bl	8011776 <PIN_LOW>
 8012724:	2101      	movs	r1, #1
 8012726:	483d      	ldr	r0, [pc, #244]	; (801281c <WriteCmdParamN+0x578>)
 8012728:	f7ff f825 	bl	8011776 <PIN_LOW>
 801272c:	2101      	movs	r1, #1
 801272e:	483b      	ldr	r0, [pc, #236]	; (801281c <WriteCmdParamN+0x578>)
 8012730:	f7ff f831 	bl	8011796 <PIN_HIGH>
 8012734:	2101      	movs	r1, #1
 8012736:	4839      	ldr	r0, [pc, #228]	; (801281c <WriteCmdParamN+0x578>)
 8012738:	f7ff f82d 	bl	8011796 <PIN_HIGH>
 801273c:	4b34      	ldr	r3, [pc, #208]	; (8012810 <WriteCmdParamN+0x56c>)
 801273e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012742:	619a      	str	r2, [r3, #24]
 8012744:	4b33      	ldr	r3, [pc, #204]	; (8012814 <WriteCmdParamN+0x570>)
 8012746:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801274a:	619a      	str	r2, [r3, #24]
 801274c:	4b32      	ldr	r3, [pc, #200]	; (8012818 <WriteCmdParamN+0x574>)
 801274e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012752:	619a      	str	r2, [r3, #24]
 8012754:	7afb      	ldrb	r3, [r7, #11]
 8012756:	039b      	lsls	r3, r3, #14
 8012758:	4a2d      	ldr	r2, [pc, #180]	; (8012810 <WriteCmdParamN+0x56c>)
 801275a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801275e:	6193      	str	r3, [r2, #24]
 8012760:	7afb      	ldrb	r3, [r7, #11]
 8012762:	029b      	lsls	r3, r3, #10
 8012764:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012768:	7afb      	ldrb	r3, [r7, #11]
 801276a:	019b      	lsls	r3, r3, #6
 801276c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012770:	431a      	orrs	r2, r3
 8012772:	7afb      	ldrb	r3, [r7, #11]
 8012774:	00db      	lsls	r3, r3, #3
 8012776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801277a:	431a      	orrs	r2, r3
 801277c:	4b25      	ldr	r3, [pc, #148]	; (8012814 <WriteCmdParamN+0x570>)
 801277e:	619a      	str	r2, [r3, #24]
 8012780:	7afb      	ldrb	r3, [r7, #11]
 8012782:	031b      	lsls	r3, r3, #12
 8012784:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012788:	7afb      	ldrb	r3, [r7, #11]
 801278a:	035b      	lsls	r3, r3, #13
 801278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012790:	431a      	orrs	r2, r3
 8012792:	7afb      	ldrb	r3, [r7, #11]
 8012794:	029b      	lsls	r3, r3, #10
 8012796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801279a:	431a      	orrs	r2, r3
 801279c:	7afb      	ldrb	r3, [r7, #11]
 801279e:	019b      	lsls	r3, r3, #6
 80127a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127a4:	431a      	orrs	r2, r3
 80127a6:	4b1c      	ldr	r3, [pc, #112]	; (8012818 <WriteCmdParamN+0x574>)
 80127a8:	619a      	str	r2, [r3, #24]
 80127aa:	2101      	movs	r1, #1
 80127ac:	481b      	ldr	r0, [pc, #108]	; (801281c <WriteCmdParamN+0x578>)
 80127ae:	f7fe ffe2 	bl	8011776 <PIN_LOW>
 80127b2:	2101      	movs	r1, #1
 80127b4:	4819      	ldr	r0, [pc, #100]	; (801281c <WriteCmdParamN+0x578>)
 80127b6:	f7fe ffde 	bl	8011776 <PIN_LOW>
 80127ba:	2101      	movs	r1, #1
 80127bc:	4817      	ldr	r0, [pc, #92]	; (801281c <WriteCmdParamN+0x578>)
 80127be:	f7fe ffda 	bl	8011776 <PIN_LOW>
 80127c2:	2101      	movs	r1, #1
 80127c4:	4815      	ldr	r0, [pc, #84]	; (801281c <WriteCmdParamN+0x578>)
 80127c6:	f7fe ffd6 	bl	8011776 <PIN_LOW>
 80127ca:	2101      	movs	r1, #1
 80127cc:	4813      	ldr	r0, [pc, #76]	; (801281c <WriteCmdParamN+0x578>)
 80127ce:	f7fe ffd2 	bl	8011776 <PIN_LOW>
 80127d2:	2101      	movs	r1, #1
 80127d4:	4811      	ldr	r0, [pc, #68]	; (801281c <WriteCmdParamN+0x578>)
 80127d6:	f7fe ffce 	bl	8011776 <PIN_LOW>
 80127da:	2101      	movs	r1, #1
 80127dc:	480f      	ldr	r0, [pc, #60]	; (801281c <WriteCmdParamN+0x578>)
 80127de:	f7fe ffca 	bl	8011776 <PIN_LOW>
 80127e2:	2101      	movs	r1, #1
 80127e4:	480d      	ldr	r0, [pc, #52]	; (801281c <WriteCmdParamN+0x578>)
 80127e6:	f7fe ffc6 	bl	8011776 <PIN_LOW>
 80127ea:	2101      	movs	r1, #1
 80127ec:	480b      	ldr	r0, [pc, #44]	; (801281c <WriteCmdParamN+0x578>)
 80127ee:	f7fe ffc2 	bl	8011776 <PIN_LOW>
 80127f2:	2101      	movs	r1, #1
 80127f4:	4809      	ldr	r0, [pc, #36]	; (801281c <WriteCmdParamN+0x578>)
 80127f6:	f7fe ffbe 	bl	8011776 <PIN_LOW>
 80127fa:	2101      	movs	r1, #1
 80127fc:	4807      	ldr	r0, [pc, #28]	; (801281c <WriteCmdParamN+0x578>)
 80127fe:	f7fe ffba 	bl	8011776 <PIN_LOW>
 8012802:	2101      	movs	r1, #1
 8012804:	4805      	ldr	r0, [pc, #20]	; (801281c <WriteCmdParamN+0x578>)
 8012806:	f7fe ffb6 	bl	8011776 <PIN_LOW>
 801280a:	2101      	movs	r1, #1
 801280c:	e00a      	b.n	8012824 <WriteCmdParamN+0x580>
 801280e:	bf00      	nop
 8012810:	40020c00 	.word	0x40020c00
 8012814:	40021000 	.word	0x40021000
 8012818:	40021400 	.word	0x40021400
 801281c:	40020800 	.word	0x40020800
 8012820:	20000218 	.word	0x20000218
 8012824:	4817      	ldr	r0, [pc, #92]	; (8012884 <WriteCmdParamN+0x5e0>)
 8012826:	f7fe ffa6 	bl	8011776 <PIN_LOW>
 801282a:	2101      	movs	r1, #1
 801282c:	4815      	ldr	r0, [pc, #84]	; (8012884 <WriteCmdParamN+0x5e0>)
 801282e:	f7fe ffa2 	bl	8011776 <PIN_LOW>
 8012832:	2101      	movs	r1, #1
 8012834:	4813      	ldr	r0, [pc, #76]	; (8012884 <WriteCmdParamN+0x5e0>)
 8012836:	f7fe ff9e 	bl	8011776 <PIN_LOW>
 801283a:	2101      	movs	r1, #1
 801283c:	4811      	ldr	r0, [pc, #68]	; (8012884 <WriteCmdParamN+0x5e0>)
 801283e:	f7fe ff9a 	bl	8011776 <PIN_LOW>
 8012842:	2101      	movs	r1, #1
 8012844:	480f      	ldr	r0, [pc, #60]	; (8012884 <WriteCmdParamN+0x5e0>)
 8012846:	f7fe ff96 	bl	8011776 <PIN_LOW>
 801284a:	2101      	movs	r1, #1
 801284c:	480d      	ldr	r0, [pc, #52]	; (8012884 <WriteCmdParamN+0x5e0>)
 801284e:	f7fe ffa2 	bl	8011796 <PIN_HIGH>
 8012852:	2101      	movs	r1, #1
 8012854:	480b      	ldr	r0, [pc, #44]	; (8012884 <WriteCmdParamN+0x5e0>)
 8012856:	f7fe ff9e 	bl	8011796 <PIN_HIGH>
 801285a:	2120      	movs	r1, #32
 801285c:	480a      	ldr	r0, [pc, #40]	; (8012888 <WriteCmdParamN+0x5e4>)
 801285e:	f7fe ff9a 	bl	8011796 <PIN_HIGH>
    while (N-- > 0) {
 8012862:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012866:	b2da      	uxtb	r2, r3
 8012868:	3a01      	subs	r2, #1
 801286a:	b2d2      	uxtb	r2, r2
 801286c:	717a      	strb	r2, [r7, #5]
 801286e:	2b00      	cmp	r3, #0
 8012870:	f73f ae42 	bgt.w	80124f8 <WriteCmdParamN+0x254>
        }
    }
    CS_IDLE;
 8012874:	2108      	movs	r1, #8
 8012876:	4805      	ldr	r0, [pc, #20]	; (801288c <WriteCmdParamN+0x5e8>)
 8012878:	f7fe ff8d 	bl	8011796 <PIN_HIGH>
}
 801287c:	bf00      	nop
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	40020800 	.word	0x40020800
 8012888:	40020c00 	.word	0x40020c00
 801288c:	40021400 	.word	0x40021400

08012890 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
 8012896:	4604      	mov	r4, r0
 8012898:	4608      	mov	r0, r1
 801289a:	4611      	mov	r1, r2
 801289c:	461a      	mov	r2, r3
 801289e:	4623      	mov	r3, r4
 80128a0:	71fb      	strb	r3, [r7, #7]
 80128a2:	4603      	mov	r3, r0
 80128a4:	71bb      	strb	r3, [r7, #6]
 80128a6:	460b      	mov	r3, r1
 80128a8:	717b      	strb	r3, [r7, #5]
 80128aa:	4613      	mov	r3, r2
 80128ac:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 80128ae:	79bb      	ldrb	r3, [r7, #6]
 80128b0:	733b      	strb	r3, [r7, #12]
 80128b2:	797b      	ldrb	r3, [r7, #5]
 80128b4:	737b      	strb	r3, [r7, #13]
 80128b6:	793b      	ldrb	r3, [r7, #4]
 80128b8:	73bb      	strb	r3, [r7, #14]
 80128ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80128be:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80128c0:	79fb      	ldrb	r3, [r7, #7]
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	f107 020c 	add.w	r2, r7, #12
 80128c8:	2104      	movs	r1, #4
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff fcea 	bl	80122a4 <WriteCmdParamN>
}
 80128d0:	bf00      	nop
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd90      	pop	{r4, r7, pc}

080128d8 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b08a      	sub	sp, #40	; 0x28
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80128e8:	e046      	b.n	8012978 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80128ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ec:	1c5a      	adds	r2, r3, #1
 80128ee:	627a      	str	r2, [r7, #36]	; 0x24
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80128f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f8:	1c5a      	adds	r2, r3, #1
 80128fa:	627a      	str	r2, [r7, #36]	; 0x24
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8012902:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012906:	2b7f      	cmp	r3, #127	; 0x7f
 8012908:	d108      	bne.n	801291c <init_table+0x44>
        {
            delay(len);
 801290a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801290e:	4618      	mov	r0, r3
 8012910:	f7fe ff12 	bl	8011738 <delay>
            len = 0;
 8012914:	2300      	movs	r3, #0
 8012916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801291a:	e024      	b.n	8012966 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 801291c:	2300      	movs	r3, #0
 801291e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012922:	e010      	b.n	8012946 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8012924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012926:	1c5a      	adds	r2, r3, #1
 8012928:	627a      	str	r2, [r7, #36]	; 0x24
 801292a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801292e:	7819      	ldrb	r1, [r3, #0]
 8012930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012934:	4413      	add	r3, r2
 8012936:	460a      	mov	r2, r1
 8012938:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 801293c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012940:	3301      	adds	r3, #1
 8012942:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012946:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801294a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801294e:	429a      	cmp	r2, r3
 8012950:	d3e8      	bcc.n	8012924 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8012952:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012956:	b29b      	uxth	r3, r3
 8012958:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801295c:	f107 0208 	add.w	r2, r7, #8
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff fc9f 	bl	80122a4 <WriteCmdParamN>
        }
        size -= len + 2;
 8012966:	887a      	ldrh	r2, [r7, #2]
 8012968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801296c:	b29b      	uxth	r3, r3
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	b29b      	uxth	r3, r3
 8012972:	3b02      	subs	r3, #2
 8012974:	b29b      	uxth	r3, r3
 8012976:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8012978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801297c:	2b00      	cmp	r3, #0
 801297e:	dcb4      	bgt.n	80128ea <init_table+0x12>
    }
}
 8012980:	bf00      	nop
 8012982:	bf00      	nop
 8012984:	3728      	adds	r7, #40	; 0x28
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b084      	sub	sp, #16
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	460b      	mov	r3, r1
 8012994:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 801299a:	e01d      	b.n	80129d8 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	1c9a      	adds	r2, r3, #2
 80129a0:	60fa      	str	r2, [r7, #12]
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	1c9a      	adds	r2, r3, #2
 80129aa:	60fa      	str	r2, [r7, #12]
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 80129b0:	897b      	ldrh	r3, [r7, #10]
 80129b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d104      	bne.n	80129c4 <init_table16+0x3a>
            delay(d);
 80129ba:	893b      	ldrh	r3, [r7, #8]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fe febb 	bl	8011738 <delay>
 80129c2:	e005      	b.n	80129d0 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 80129c4:	893a      	ldrh	r2, [r7, #8]
 80129c6:	897b      	ldrh	r3, [r7, #10]
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff fa24 	bl	8011e18 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80129d0:	887b      	ldrh	r3, [r7, #2]
 80129d2:	3b04      	subs	r3, #4
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80129d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dcdd      	bgt.n	801299c <init_table16+0x12>
    }
}
 80129e0:	bf00      	nop
 80129e2:	bf00      	nop
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <reset>:



void reset(void)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
    done_reset = 1;
 80129f0:	4b1f      	ldr	r3, [pc, #124]	; (8012a70 <reset+0x84>)
 80129f2:	2201      	movs	r2, #1
 80129f4:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80129f6:	f7ff f82d 	bl	8011a54 <setWriteDir>
    CTL_INIT();
 80129fa:	2180      	movs	r1, #128	; 0x80
 80129fc:	481d      	ldr	r0, [pc, #116]	; (8012a74 <reset+0x88>)
 80129fe:	f7fe fef0 	bl	80117e2 <PIN_OUTPUT>
 8012a02:	2101      	movs	r1, #1
 8012a04:	481c      	ldr	r0, [pc, #112]	; (8012a78 <reset+0x8c>)
 8012a06:	f7fe feec 	bl	80117e2 <PIN_OUTPUT>
 8012a0a:	2120      	movs	r1, #32
 8012a0c:	4819      	ldr	r0, [pc, #100]	; (8012a74 <reset+0x88>)
 8012a0e:	f7fe fee8 	bl	80117e2 <PIN_OUTPUT>
 8012a12:	2108      	movs	r1, #8
 8012a14:	4819      	ldr	r0, [pc, #100]	; (8012a7c <reset+0x90>)
 8012a16:	f7fe fee4 	bl	80117e2 <PIN_OUTPUT>
 8012a1a:	2120      	movs	r1, #32
 8012a1c:	4817      	ldr	r0, [pc, #92]	; (8012a7c <reset+0x90>)
 8012a1e:	f7fe fee0 	bl	80117e2 <PIN_OUTPUT>
    CS_IDLE;
 8012a22:	2108      	movs	r1, #8
 8012a24:	4815      	ldr	r0, [pc, #84]	; (8012a7c <reset+0x90>)
 8012a26:	f7fe feb6 	bl	8011796 <PIN_HIGH>
    RD_IDLE;
 8012a2a:	2180      	movs	r1, #128	; 0x80
 8012a2c:	4811      	ldr	r0, [pc, #68]	; (8012a74 <reset+0x88>)
 8012a2e:	f7fe feb2 	bl	8011796 <PIN_HIGH>
    WR_IDLE;
 8012a32:	2101      	movs	r1, #1
 8012a34:	4810      	ldr	r0, [pc, #64]	; (8012a78 <reset+0x8c>)
 8012a36:	f7fe feae 	bl	8011796 <PIN_HIGH>
    RESET_IDLE;
 8012a3a:	2120      	movs	r1, #32
 8012a3c:	480f      	ldr	r0, [pc, #60]	; (8012a7c <reset+0x90>)
 8012a3e:	f7fe feaa 	bl	8011796 <PIN_HIGH>
    delay(50);
 8012a42:	2032      	movs	r0, #50	; 0x32
 8012a44:	f7fe fe78 	bl	8011738 <delay>
    RESET_ACTIVE;
 8012a48:	2120      	movs	r1, #32
 8012a4a:	480c      	ldr	r0, [pc, #48]	; (8012a7c <reset+0x90>)
 8012a4c:	f7fe fe93 	bl	8011776 <PIN_LOW>
    delay(100);
 8012a50:	2064      	movs	r0, #100	; 0x64
 8012a52:	f7fe fe71 	bl	8011738 <delay>
    RESET_IDLE;
 8012a56:	2120      	movs	r1, #32
 8012a58:	4808      	ldr	r0, [pc, #32]	; (8012a7c <reset+0x90>)
 8012a5a:	f7fe fe9c 	bl	8011796 <PIN_HIGH>
    delay(100);
 8012a5e:	2064      	movs	r0, #100	; 0x64
 8012a60:	f7fe fe6a 	bl	8011738 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8012a64:	2100      	movs	r1, #0
 8012a66:	20b0      	movs	r0, #176	; 0xb0
 8012a68:	f7fe ff9c 	bl	80119a4 <WriteCmdData>
}
 8012a6c:	bf00      	nop
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	20000217 	.word	0x20000217
 8012a74:	40020c00 	.word	0x40020c00
 8012a78:	40020800 	.word	0x40020800
 8012a7c:	40021400 	.word	0x40021400

08012a80 <read16bits>:

static uint16_t read16bits(void)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8012a86:	2180      	movs	r1, #128	; 0x80
 8012a88:	48c2      	ldr	r0, [pc, #776]	; (8012d94 <read16bits+0x314>)
 8012a8a:	f7fe fe84 	bl	8011796 <PIN_HIGH>
 8012a8e:	2180      	movs	r1, #128	; 0x80
 8012a90:	48c0      	ldr	r0, [pc, #768]	; (8012d94 <read16bits+0x314>)
 8012a92:	f7fe fe70 	bl	8011776 <PIN_LOW>
 8012a96:	2180      	movs	r1, #128	; 0x80
 8012a98:	48be      	ldr	r0, [pc, #760]	; (8012d94 <read16bits+0x314>)
 8012a9a:	f7fe fe6c 	bl	8011776 <PIN_LOW>
 8012a9e:	2180      	movs	r1, #128	; 0x80
 8012aa0:	48bc      	ldr	r0, [pc, #752]	; (8012d94 <read16bits+0x314>)
 8012aa2:	f7fe fe68 	bl	8011776 <PIN_LOW>
 8012aa6:	2180      	movs	r1, #128	; 0x80
 8012aa8:	48ba      	ldr	r0, [pc, #744]	; (8012d94 <read16bits+0x314>)
 8012aaa:	f7fe fe64 	bl	8011776 <PIN_LOW>
 8012aae:	2180      	movs	r1, #128	; 0x80
 8012ab0:	48b8      	ldr	r0, [pc, #736]	; (8012d94 <read16bits+0x314>)
 8012ab2:	f7fe fe60 	bl	8011776 <PIN_LOW>
 8012ab6:	2180      	movs	r1, #128	; 0x80
 8012ab8:	48b6      	ldr	r0, [pc, #728]	; (8012d94 <read16bits+0x314>)
 8012aba:	f7fe fe5c 	bl	8011776 <PIN_LOW>
 8012abe:	2180      	movs	r1, #128	; 0x80
 8012ac0:	48b4      	ldr	r0, [pc, #720]	; (8012d94 <read16bits+0x314>)
 8012ac2:	f7fe fe58 	bl	8011776 <PIN_LOW>
 8012ac6:	2180      	movs	r1, #128	; 0x80
 8012ac8:	48b2      	ldr	r0, [pc, #712]	; (8012d94 <read16bits+0x314>)
 8012aca:	f7fe fe54 	bl	8011776 <PIN_LOW>
 8012ace:	2180      	movs	r1, #128	; 0x80
 8012ad0:	48b0      	ldr	r0, [pc, #704]	; (8012d94 <read16bits+0x314>)
 8012ad2:	f7fe fe50 	bl	8011776 <PIN_LOW>
 8012ad6:	2180      	movs	r1, #128	; 0x80
 8012ad8:	48ae      	ldr	r0, [pc, #696]	; (8012d94 <read16bits+0x314>)
 8012ada:	f7fe fe4c 	bl	8011776 <PIN_LOW>
 8012ade:	2180      	movs	r1, #128	; 0x80
 8012ae0:	48ac      	ldr	r0, [pc, #688]	; (8012d94 <read16bits+0x314>)
 8012ae2:	f7fe fe48 	bl	8011776 <PIN_LOW>
 8012ae6:	2180      	movs	r1, #128	; 0x80
 8012ae8:	48aa      	ldr	r0, [pc, #680]	; (8012d94 <read16bits+0x314>)
 8012aea:	f7fe fe44 	bl	8011776 <PIN_LOW>
 8012aee:	2180      	movs	r1, #128	; 0x80
 8012af0:	48a8      	ldr	r0, [pc, #672]	; (8012d94 <read16bits+0x314>)
 8012af2:	f7fe fe40 	bl	8011776 <PIN_LOW>
 8012af6:	2180      	movs	r1, #128	; 0x80
 8012af8:	48a6      	ldr	r0, [pc, #664]	; (8012d94 <read16bits+0x314>)
 8012afa:	f7fe fe3c 	bl	8011776 <PIN_LOW>
 8012afe:	2180      	movs	r1, #128	; 0x80
 8012b00:	48a4      	ldr	r0, [pc, #656]	; (8012d94 <read16bits+0x314>)
 8012b02:	f7fe fe38 	bl	8011776 <PIN_LOW>
 8012b06:	2180      	movs	r1, #128	; 0x80
 8012b08:	48a2      	ldr	r0, [pc, #648]	; (8012d94 <read16bits+0x314>)
 8012b0a:	f7fe fe34 	bl	8011776 <PIN_LOW>
 8012b0e:	2180      	movs	r1, #128	; 0x80
 8012b10:	48a0      	ldr	r0, [pc, #640]	; (8012d94 <read16bits+0x314>)
 8012b12:	f7fe fe30 	bl	8011776 <PIN_LOW>
 8012b16:	2180      	movs	r1, #128	; 0x80
 8012b18:	489e      	ldr	r0, [pc, #632]	; (8012d94 <read16bits+0x314>)
 8012b1a:	f7fe fe2c 	bl	8011776 <PIN_LOW>
 8012b1e:	2180      	movs	r1, #128	; 0x80
 8012b20:	489c      	ldr	r0, [pc, #624]	; (8012d94 <read16bits+0x314>)
 8012b22:	f7fe fe28 	bl	8011776 <PIN_LOW>
 8012b26:	2180      	movs	r1, #128	; 0x80
 8012b28:	489a      	ldr	r0, [pc, #616]	; (8012d94 <read16bits+0x314>)
 8012b2a:	f7fe fe24 	bl	8011776 <PIN_LOW>
 8012b2e:	2180      	movs	r1, #128	; 0x80
 8012b30:	4898      	ldr	r0, [pc, #608]	; (8012d94 <read16bits+0x314>)
 8012b32:	f7fe fe20 	bl	8011776 <PIN_LOW>
 8012b36:	2180      	movs	r1, #128	; 0x80
 8012b38:	4896      	ldr	r0, [pc, #600]	; (8012d94 <read16bits+0x314>)
 8012b3a:	f7fe fe1c 	bl	8011776 <PIN_LOW>
 8012b3e:	2180      	movs	r1, #128	; 0x80
 8012b40:	4894      	ldr	r0, [pc, #592]	; (8012d94 <read16bits+0x314>)
 8012b42:	f7fe fe18 	bl	8011776 <PIN_LOW>
 8012b46:	2180      	movs	r1, #128	; 0x80
 8012b48:	4892      	ldr	r0, [pc, #584]	; (8012d94 <read16bits+0x314>)
 8012b4a:	f7fe fe14 	bl	8011776 <PIN_LOW>
 8012b4e:	2180      	movs	r1, #128	; 0x80
 8012b50:	4890      	ldr	r0, [pc, #576]	; (8012d94 <read16bits+0x314>)
 8012b52:	f7fe fe10 	bl	8011776 <PIN_LOW>
 8012b56:	2180      	movs	r1, #128	; 0x80
 8012b58:	488e      	ldr	r0, [pc, #568]	; (8012d94 <read16bits+0x314>)
 8012b5a:	f7fe fe0c 	bl	8011776 <PIN_LOW>
 8012b5e:	2180      	movs	r1, #128	; 0x80
 8012b60:	488c      	ldr	r0, [pc, #560]	; (8012d94 <read16bits+0x314>)
 8012b62:	f7fe fe08 	bl	8011776 <PIN_LOW>
 8012b66:	2180      	movs	r1, #128	; 0x80
 8012b68:	488a      	ldr	r0, [pc, #552]	; (8012d94 <read16bits+0x314>)
 8012b6a:	f7fe fe04 	bl	8011776 <PIN_LOW>
 8012b6e:	2180      	movs	r1, #128	; 0x80
 8012b70:	4888      	ldr	r0, [pc, #544]	; (8012d94 <read16bits+0x314>)
 8012b72:	f7fe fe00 	bl	8011776 <PIN_LOW>
 8012b76:	2180      	movs	r1, #128	; 0x80
 8012b78:	4886      	ldr	r0, [pc, #536]	; (8012d94 <read16bits+0x314>)
 8012b7a:	f7fe fdfc 	bl	8011776 <PIN_LOW>
 8012b7e:	2180      	movs	r1, #128	; 0x80
 8012b80:	4884      	ldr	r0, [pc, #528]	; (8012d94 <read16bits+0x314>)
 8012b82:	f7fe fdf8 	bl	8011776 <PIN_LOW>
 8012b86:	2180      	movs	r1, #128	; 0x80
 8012b88:	4882      	ldr	r0, [pc, #520]	; (8012d94 <read16bits+0x314>)
 8012b8a:	f7fe fdf4 	bl	8011776 <PIN_LOW>
 8012b8e:	2180      	movs	r1, #128	; 0x80
 8012b90:	4880      	ldr	r0, [pc, #512]	; (8012d94 <read16bits+0x314>)
 8012b92:	f7fe fdf0 	bl	8011776 <PIN_LOW>
 8012b96:	2180      	movs	r1, #128	; 0x80
 8012b98:	487e      	ldr	r0, [pc, #504]	; (8012d94 <read16bits+0x314>)
 8012b9a:	f7fe fdec 	bl	8011776 <PIN_LOW>
 8012b9e:	2180      	movs	r1, #128	; 0x80
 8012ba0:	487c      	ldr	r0, [pc, #496]	; (8012d94 <read16bits+0x314>)
 8012ba2:	f7fe fde8 	bl	8011776 <PIN_LOW>
 8012ba6:	2180      	movs	r1, #128	; 0x80
 8012ba8:	487a      	ldr	r0, [pc, #488]	; (8012d94 <read16bits+0x314>)
 8012baa:	f7fe fde4 	bl	8011776 <PIN_LOW>
 8012bae:	2180      	movs	r1, #128	; 0x80
 8012bb0:	4878      	ldr	r0, [pc, #480]	; (8012d94 <read16bits+0x314>)
 8012bb2:	f7fe fde0 	bl	8011776 <PIN_LOW>
 8012bb6:	2180      	movs	r1, #128	; 0x80
 8012bb8:	4876      	ldr	r0, [pc, #472]	; (8012d94 <read16bits+0x314>)
 8012bba:	f7fe fddc 	bl	8011776 <PIN_LOW>
 8012bbe:	2180      	movs	r1, #128	; 0x80
 8012bc0:	4874      	ldr	r0, [pc, #464]	; (8012d94 <read16bits+0x314>)
 8012bc2:	f7fe fdd8 	bl	8011776 <PIN_LOW>
 8012bc6:	2180      	movs	r1, #128	; 0x80
 8012bc8:	4872      	ldr	r0, [pc, #456]	; (8012d94 <read16bits+0x314>)
 8012bca:	f7fe fdd4 	bl	8011776 <PIN_LOW>
 8012bce:	2180      	movs	r1, #128	; 0x80
 8012bd0:	4870      	ldr	r0, [pc, #448]	; (8012d94 <read16bits+0x314>)
 8012bd2:	f7fe fdd0 	bl	8011776 <PIN_LOW>
 8012bd6:	2180      	movs	r1, #128	; 0x80
 8012bd8:	486e      	ldr	r0, [pc, #440]	; (8012d94 <read16bits+0x314>)
 8012bda:	f7fe fdcc 	bl	8011776 <PIN_LOW>
 8012bde:	2180      	movs	r1, #128	; 0x80
 8012be0:	486c      	ldr	r0, [pc, #432]	; (8012d94 <read16bits+0x314>)
 8012be2:	f7fe fdc8 	bl	8011776 <PIN_LOW>
 8012be6:	2180      	movs	r1, #128	; 0x80
 8012be8:	486a      	ldr	r0, [pc, #424]	; (8012d94 <read16bits+0x314>)
 8012bea:	f7fe fdc4 	bl	8011776 <PIN_LOW>
 8012bee:	2180      	movs	r1, #128	; 0x80
 8012bf0:	4868      	ldr	r0, [pc, #416]	; (8012d94 <read16bits+0x314>)
 8012bf2:	f7fe fdc0 	bl	8011776 <PIN_LOW>
 8012bf6:	2180      	movs	r1, #128	; 0x80
 8012bf8:	4866      	ldr	r0, [pc, #408]	; (8012d94 <read16bits+0x314>)
 8012bfa:	f7fe fdbc 	bl	8011776 <PIN_LOW>
 8012bfe:	2180      	movs	r1, #128	; 0x80
 8012c00:	4864      	ldr	r0, [pc, #400]	; (8012d94 <read16bits+0x314>)
 8012c02:	f7fe fdb8 	bl	8011776 <PIN_LOW>
 8012c06:	2180      	movs	r1, #128	; 0x80
 8012c08:	4862      	ldr	r0, [pc, #392]	; (8012d94 <read16bits+0x314>)
 8012c0a:	f7fe fdb4 	bl	8011776 <PIN_LOW>
 8012c0e:	2180      	movs	r1, #128	; 0x80
 8012c10:	4860      	ldr	r0, [pc, #384]	; (8012d94 <read16bits+0x314>)
 8012c12:	f7fe fdb0 	bl	8011776 <PIN_LOW>
 8012c16:	2180      	movs	r1, #128	; 0x80
 8012c18:	485e      	ldr	r0, [pc, #376]	; (8012d94 <read16bits+0x314>)
 8012c1a:	f7fe fdac 	bl	8011776 <PIN_LOW>
 8012c1e:	2180      	movs	r1, #128	; 0x80
 8012c20:	485c      	ldr	r0, [pc, #368]	; (8012d94 <read16bits+0x314>)
 8012c22:	f7fe fda8 	bl	8011776 <PIN_LOW>
 8012c26:	4b5c      	ldr	r3, [pc, #368]	; (8012d98 <read16bits+0x318>)
 8012c28:	691b      	ldr	r3, [r3, #16]
 8012c2a:	0b1b      	lsrs	r3, r3, #12
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	f003 0301 	and.w	r3, r3, #1
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	4b57      	ldr	r3, [pc, #348]	; (8012d94 <read16bits+0x314>)
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	0b9b      	lsrs	r3, r3, #14
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	f003 0302 	and.w	r3, r3, #2
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	4313      	orrs	r3, r2
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	4b54      	ldr	r3, [pc, #336]	; (8012d98 <read16bits+0x318>)
 8012c48:	691b      	ldr	r3, [r3, #16]
 8012c4a:	0b5b      	lsrs	r3, r3, #13
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	f003 0304 	and.w	r3, r3, #4
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	4313      	orrs	r3, r2
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	4b50      	ldr	r3, [pc, #320]	; (8012d9c <read16bits+0x31c>)
 8012c5a:	691b      	ldr	r3, [r3, #16]
 8012c5c:	0a9b      	lsrs	r3, r3, #10
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	f003 0308 	and.w	r3, r3, #8
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	4313      	orrs	r3, r2
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	4b4b      	ldr	r3, [pc, #300]	; (8012d98 <read16bits+0x318>)
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	0a9b      	lsrs	r3, r3, #10
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	f003 0310 	and.w	r3, r3, #16
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	4b47      	ldr	r3, [pc, #284]	; (8012d9c <read16bits+0x31c>)
 8012c7e:	691b      	ldr	r3, [r3, #16]
 8012c80:	099b      	lsrs	r3, r3, #6
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	f003 0320 	and.w	r3, r3, #32
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	4b43      	ldr	r3, [pc, #268]	; (8012d9c <read16bits+0x31c>)
 8012c90:	691b      	ldr	r3, [r3, #16]
 8012c92:	08db      	lsrs	r3, r3, #3
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	4b3d      	ldr	r3, [pc, #244]	; (8012d98 <read16bits+0x318>)
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	099b      	lsrs	r3, r3, #6
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	80fb      	strh	r3, [r7, #6]
 8012cb2:	2180      	movs	r1, #128	; 0x80
 8012cb4:	4837      	ldr	r0, [pc, #220]	; (8012d94 <read16bits+0x314>)
 8012cb6:	f7fe fd6e 	bl	8011796 <PIN_HIGH>
 8012cba:	2180      	movs	r1, #128	; 0x80
 8012cbc:	4835      	ldr	r0, [pc, #212]	; (8012d94 <read16bits+0x314>)
 8012cbe:	f7fe fd6a 	bl	8011796 <PIN_HIGH>
    READ_8(lo);
 8012cc2:	2180      	movs	r1, #128	; 0x80
 8012cc4:	4833      	ldr	r0, [pc, #204]	; (8012d94 <read16bits+0x314>)
 8012cc6:	f7fe fd66 	bl	8011796 <PIN_HIGH>
 8012cca:	2180      	movs	r1, #128	; 0x80
 8012ccc:	4831      	ldr	r0, [pc, #196]	; (8012d94 <read16bits+0x314>)
 8012cce:	f7fe fd52 	bl	8011776 <PIN_LOW>
 8012cd2:	2180      	movs	r1, #128	; 0x80
 8012cd4:	482f      	ldr	r0, [pc, #188]	; (8012d94 <read16bits+0x314>)
 8012cd6:	f7fe fd4e 	bl	8011776 <PIN_LOW>
 8012cda:	2180      	movs	r1, #128	; 0x80
 8012cdc:	482d      	ldr	r0, [pc, #180]	; (8012d94 <read16bits+0x314>)
 8012cde:	f7fe fd4a 	bl	8011776 <PIN_LOW>
 8012ce2:	2180      	movs	r1, #128	; 0x80
 8012ce4:	482b      	ldr	r0, [pc, #172]	; (8012d94 <read16bits+0x314>)
 8012ce6:	f7fe fd46 	bl	8011776 <PIN_LOW>
 8012cea:	2180      	movs	r1, #128	; 0x80
 8012cec:	4829      	ldr	r0, [pc, #164]	; (8012d94 <read16bits+0x314>)
 8012cee:	f7fe fd42 	bl	8011776 <PIN_LOW>
 8012cf2:	2180      	movs	r1, #128	; 0x80
 8012cf4:	4827      	ldr	r0, [pc, #156]	; (8012d94 <read16bits+0x314>)
 8012cf6:	f7fe fd3e 	bl	8011776 <PIN_LOW>
 8012cfa:	2180      	movs	r1, #128	; 0x80
 8012cfc:	4825      	ldr	r0, [pc, #148]	; (8012d94 <read16bits+0x314>)
 8012cfe:	f7fe fd3a 	bl	8011776 <PIN_LOW>
 8012d02:	2180      	movs	r1, #128	; 0x80
 8012d04:	4823      	ldr	r0, [pc, #140]	; (8012d94 <read16bits+0x314>)
 8012d06:	f7fe fd36 	bl	8011776 <PIN_LOW>
 8012d0a:	2180      	movs	r1, #128	; 0x80
 8012d0c:	4821      	ldr	r0, [pc, #132]	; (8012d94 <read16bits+0x314>)
 8012d0e:	f7fe fd32 	bl	8011776 <PIN_LOW>
 8012d12:	2180      	movs	r1, #128	; 0x80
 8012d14:	481f      	ldr	r0, [pc, #124]	; (8012d94 <read16bits+0x314>)
 8012d16:	f7fe fd2e 	bl	8011776 <PIN_LOW>
 8012d1a:	2180      	movs	r1, #128	; 0x80
 8012d1c:	481d      	ldr	r0, [pc, #116]	; (8012d94 <read16bits+0x314>)
 8012d1e:	f7fe fd2a 	bl	8011776 <PIN_LOW>
 8012d22:	2180      	movs	r1, #128	; 0x80
 8012d24:	481b      	ldr	r0, [pc, #108]	; (8012d94 <read16bits+0x314>)
 8012d26:	f7fe fd26 	bl	8011776 <PIN_LOW>
 8012d2a:	2180      	movs	r1, #128	; 0x80
 8012d2c:	4819      	ldr	r0, [pc, #100]	; (8012d94 <read16bits+0x314>)
 8012d2e:	f7fe fd22 	bl	8011776 <PIN_LOW>
 8012d32:	2180      	movs	r1, #128	; 0x80
 8012d34:	4817      	ldr	r0, [pc, #92]	; (8012d94 <read16bits+0x314>)
 8012d36:	f7fe fd1e 	bl	8011776 <PIN_LOW>
 8012d3a:	2180      	movs	r1, #128	; 0x80
 8012d3c:	4815      	ldr	r0, [pc, #84]	; (8012d94 <read16bits+0x314>)
 8012d3e:	f7fe fd1a 	bl	8011776 <PIN_LOW>
 8012d42:	2180      	movs	r1, #128	; 0x80
 8012d44:	4813      	ldr	r0, [pc, #76]	; (8012d94 <read16bits+0x314>)
 8012d46:	f7fe fd16 	bl	8011776 <PIN_LOW>
 8012d4a:	2180      	movs	r1, #128	; 0x80
 8012d4c:	4811      	ldr	r0, [pc, #68]	; (8012d94 <read16bits+0x314>)
 8012d4e:	f7fe fd12 	bl	8011776 <PIN_LOW>
 8012d52:	2180      	movs	r1, #128	; 0x80
 8012d54:	480f      	ldr	r0, [pc, #60]	; (8012d94 <read16bits+0x314>)
 8012d56:	f7fe fd0e 	bl	8011776 <PIN_LOW>
 8012d5a:	2180      	movs	r1, #128	; 0x80
 8012d5c:	480d      	ldr	r0, [pc, #52]	; (8012d94 <read16bits+0x314>)
 8012d5e:	f7fe fd0a 	bl	8011776 <PIN_LOW>
 8012d62:	2180      	movs	r1, #128	; 0x80
 8012d64:	480b      	ldr	r0, [pc, #44]	; (8012d94 <read16bits+0x314>)
 8012d66:	f7fe fd06 	bl	8011776 <PIN_LOW>
 8012d6a:	2180      	movs	r1, #128	; 0x80
 8012d6c:	4809      	ldr	r0, [pc, #36]	; (8012d94 <read16bits+0x314>)
 8012d6e:	f7fe fd02 	bl	8011776 <PIN_LOW>
 8012d72:	2180      	movs	r1, #128	; 0x80
 8012d74:	4807      	ldr	r0, [pc, #28]	; (8012d94 <read16bits+0x314>)
 8012d76:	f7fe fcfe 	bl	8011776 <PIN_LOW>
 8012d7a:	2180      	movs	r1, #128	; 0x80
 8012d7c:	4805      	ldr	r0, [pc, #20]	; (8012d94 <read16bits+0x314>)
 8012d7e:	f7fe fcfa 	bl	8011776 <PIN_LOW>
 8012d82:	2180      	movs	r1, #128	; 0x80
 8012d84:	4803      	ldr	r0, [pc, #12]	; (8012d94 <read16bits+0x314>)
 8012d86:	f7fe fcf6 	bl	8011776 <PIN_LOW>
 8012d8a:	2180      	movs	r1, #128	; 0x80
 8012d8c:	4801      	ldr	r0, [pc, #4]	; (8012d94 <read16bits+0x314>)
 8012d8e:	f7fe fcf2 	bl	8011776 <PIN_LOW>
 8012d92:	e005      	b.n	8012da0 <read16bits+0x320>
 8012d94:	40020c00 	.word	0x40020c00
 8012d98:	40021400 	.word	0x40021400
 8012d9c:	40021000 	.word	0x40021000
 8012da0:	2180      	movs	r1, #128	; 0x80
 8012da2:	4860      	ldr	r0, [pc, #384]	; (8012f24 <read16bits+0x4a4>)
 8012da4:	f7fe fce7 	bl	8011776 <PIN_LOW>
 8012da8:	2180      	movs	r1, #128	; 0x80
 8012daa:	485e      	ldr	r0, [pc, #376]	; (8012f24 <read16bits+0x4a4>)
 8012dac:	f7fe fce3 	bl	8011776 <PIN_LOW>
 8012db0:	2180      	movs	r1, #128	; 0x80
 8012db2:	485c      	ldr	r0, [pc, #368]	; (8012f24 <read16bits+0x4a4>)
 8012db4:	f7fe fcdf 	bl	8011776 <PIN_LOW>
 8012db8:	2180      	movs	r1, #128	; 0x80
 8012dba:	485a      	ldr	r0, [pc, #360]	; (8012f24 <read16bits+0x4a4>)
 8012dbc:	f7fe fcdb 	bl	8011776 <PIN_LOW>
 8012dc0:	2180      	movs	r1, #128	; 0x80
 8012dc2:	4858      	ldr	r0, [pc, #352]	; (8012f24 <read16bits+0x4a4>)
 8012dc4:	f7fe fcd7 	bl	8011776 <PIN_LOW>
 8012dc8:	2180      	movs	r1, #128	; 0x80
 8012dca:	4856      	ldr	r0, [pc, #344]	; (8012f24 <read16bits+0x4a4>)
 8012dcc:	f7fe fcd3 	bl	8011776 <PIN_LOW>
 8012dd0:	2180      	movs	r1, #128	; 0x80
 8012dd2:	4854      	ldr	r0, [pc, #336]	; (8012f24 <read16bits+0x4a4>)
 8012dd4:	f7fe fccf 	bl	8011776 <PIN_LOW>
 8012dd8:	2180      	movs	r1, #128	; 0x80
 8012dda:	4852      	ldr	r0, [pc, #328]	; (8012f24 <read16bits+0x4a4>)
 8012ddc:	f7fe fccb 	bl	8011776 <PIN_LOW>
 8012de0:	2180      	movs	r1, #128	; 0x80
 8012de2:	4850      	ldr	r0, [pc, #320]	; (8012f24 <read16bits+0x4a4>)
 8012de4:	f7fe fcc7 	bl	8011776 <PIN_LOW>
 8012de8:	2180      	movs	r1, #128	; 0x80
 8012dea:	484e      	ldr	r0, [pc, #312]	; (8012f24 <read16bits+0x4a4>)
 8012dec:	f7fe fcc3 	bl	8011776 <PIN_LOW>
 8012df0:	2180      	movs	r1, #128	; 0x80
 8012df2:	484c      	ldr	r0, [pc, #304]	; (8012f24 <read16bits+0x4a4>)
 8012df4:	f7fe fcbf 	bl	8011776 <PIN_LOW>
 8012df8:	2180      	movs	r1, #128	; 0x80
 8012dfa:	484a      	ldr	r0, [pc, #296]	; (8012f24 <read16bits+0x4a4>)
 8012dfc:	f7fe fcbb 	bl	8011776 <PIN_LOW>
 8012e00:	2180      	movs	r1, #128	; 0x80
 8012e02:	4848      	ldr	r0, [pc, #288]	; (8012f24 <read16bits+0x4a4>)
 8012e04:	f7fe fcb7 	bl	8011776 <PIN_LOW>
 8012e08:	2180      	movs	r1, #128	; 0x80
 8012e0a:	4846      	ldr	r0, [pc, #280]	; (8012f24 <read16bits+0x4a4>)
 8012e0c:	f7fe fcb3 	bl	8011776 <PIN_LOW>
 8012e10:	2180      	movs	r1, #128	; 0x80
 8012e12:	4844      	ldr	r0, [pc, #272]	; (8012f24 <read16bits+0x4a4>)
 8012e14:	f7fe fcaf 	bl	8011776 <PIN_LOW>
 8012e18:	2180      	movs	r1, #128	; 0x80
 8012e1a:	4842      	ldr	r0, [pc, #264]	; (8012f24 <read16bits+0x4a4>)
 8012e1c:	f7fe fcab 	bl	8011776 <PIN_LOW>
 8012e20:	2180      	movs	r1, #128	; 0x80
 8012e22:	4840      	ldr	r0, [pc, #256]	; (8012f24 <read16bits+0x4a4>)
 8012e24:	f7fe fca7 	bl	8011776 <PIN_LOW>
 8012e28:	2180      	movs	r1, #128	; 0x80
 8012e2a:	483e      	ldr	r0, [pc, #248]	; (8012f24 <read16bits+0x4a4>)
 8012e2c:	f7fe fca3 	bl	8011776 <PIN_LOW>
 8012e30:	2180      	movs	r1, #128	; 0x80
 8012e32:	483c      	ldr	r0, [pc, #240]	; (8012f24 <read16bits+0x4a4>)
 8012e34:	f7fe fc9f 	bl	8011776 <PIN_LOW>
 8012e38:	2180      	movs	r1, #128	; 0x80
 8012e3a:	483a      	ldr	r0, [pc, #232]	; (8012f24 <read16bits+0x4a4>)
 8012e3c:	f7fe fc9b 	bl	8011776 <PIN_LOW>
 8012e40:	2180      	movs	r1, #128	; 0x80
 8012e42:	4838      	ldr	r0, [pc, #224]	; (8012f24 <read16bits+0x4a4>)
 8012e44:	f7fe fc97 	bl	8011776 <PIN_LOW>
 8012e48:	2180      	movs	r1, #128	; 0x80
 8012e4a:	4836      	ldr	r0, [pc, #216]	; (8012f24 <read16bits+0x4a4>)
 8012e4c:	f7fe fc93 	bl	8011776 <PIN_LOW>
 8012e50:	2180      	movs	r1, #128	; 0x80
 8012e52:	4834      	ldr	r0, [pc, #208]	; (8012f24 <read16bits+0x4a4>)
 8012e54:	f7fe fc8f 	bl	8011776 <PIN_LOW>
 8012e58:	2180      	movs	r1, #128	; 0x80
 8012e5a:	4832      	ldr	r0, [pc, #200]	; (8012f24 <read16bits+0x4a4>)
 8012e5c:	f7fe fc8b 	bl	8011776 <PIN_LOW>
 8012e60:	2180      	movs	r1, #128	; 0x80
 8012e62:	4830      	ldr	r0, [pc, #192]	; (8012f24 <read16bits+0x4a4>)
 8012e64:	f7fe fc87 	bl	8011776 <PIN_LOW>
 8012e68:	2180      	movs	r1, #128	; 0x80
 8012e6a:	482e      	ldr	r0, [pc, #184]	; (8012f24 <read16bits+0x4a4>)
 8012e6c:	f7fe fc83 	bl	8011776 <PIN_LOW>
 8012e70:	4b2d      	ldr	r3, [pc, #180]	; (8012f28 <read16bits+0x4a8>)
 8012e72:	691b      	ldr	r3, [r3, #16]
 8012e74:	0b1b      	lsrs	r3, r3, #12
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	f003 0301 	and.w	r3, r3, #1
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	4b29      	ldr	r3, [pc, #164]	; (8012f24 <read16bits+0x4a4>)
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	0b9b      	lsrs	r3, r3, #14
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	f003 0302 	and.w	r3, r3, #2
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	b2da      	uxtb	r2, r3
 8012e90:	4b25      	ldr	r3, [pc, #148]	; (8012f28 <read16bits+0x4a8>)
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	0b5b      	lsrs	r3, r3, #13
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	f003 0304 	and.w	r3, r3, #4
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	b2da      	uxtb	r2, r3
 8012ea2:	4b22      	ldr	r3, [pc, #136]	; (8012f2c <read16bits+0x4ac>)
 8012ea4:	691b      	ldr	r3, [r3, #16]
 8012ea6:	0a9b      	lsrs	r3, r3, #10
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	f003 0308 	and.w	r3, r3, #8
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	4b1c      	ldr	r3, [pc, #112]	; (8012f28 <read16bits+0x4a8>)
 8012eb6:	691b      	ldr	r3, [r3, #16]
 8012eb8:	0a9b      	lsrs	r3, r3, #10
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	f003 0310 	and.w	r3, r3, #16
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	4b19      	ldr	r3, [pc, #100]	; (8012f2c <read16bits+0x4ac>)
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	099b      	lsrs	r3, r3, #6
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	f003 0320 	and.w	r3, r3, #32
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	4313      	orrs	r3, r2
 8012ed6:	b2da      	uxtb	r2, r3
 8012ed8:	4b14      	ldr	r3, [pc, #80]	; (8012f2c <read16bits+0x4ac>)
 8012eda:	691b      	ldr	r3, [r3, #16]
 8012edc:	08db      	lsrs	r3, r3, #3
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	4313      	orrs	r3, r2
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	4b0f      	ldr	r3, [pc, #60]	; (8012f28 <read16bits+0x4a8>)
 8012eec:	691b      	ldr	r3, [r3, #16]
 8012eee:	099b      	lsrs	r3, r3, #6
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	4313      	orrs	r3, r2
 8012efa:	717b      	strb	r3, [r7, #5]
 8012efc:	2180      	movs	r1, #128	; 0x80
 8012efe:	4809      	ldr	r0, [pc, #36]	; (8012f24 <read16bits+0x4a4>)
 8012f00:	f7fe fc49 	bl	8011796 <PIN_HIGH>
 8012f04:	2180      	movs	r1, #128	; 0x80
 8012f06:	4807      	ldr	r0, [pc, #28]	; (8012f24 <read16bits+0x4a4>)
 8012f08:	f7fe fc45 	bl	8011796 <PIN_HIGH>
    return (ret << 8) | lo;
 8012f0c:	88fb      	ldrh	r3, [r7, #6]
 8012f0e:	021b      	lsls	r3, r3, #8
 8012f10:	b21a      	sxth	r2, r3
 8012f12:	797b      	ldrb	r3, [r7, #5]
 8012f14:	b21b      	sxth	r3, r3
 8012f16:	4313      	orrs	r3, r2
 8012f18:	b21b      	sxth	r3, r3
 8012f1a:	b29b      	uxth	r3, r3
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3708      	adds	r7, #8
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	40020c00 	.word	0x40020c00
 8012f28:	40021400 	.word	0x40021400
 8012f2c:	40021000 	.word	0x40021000

08012f30 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	4603      	mov	r3, r0
 8012f38:	460a      	mov	r2, r1
 8012f3a:	80fb      	strh	r3, [r7, #6]
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8012f40:	4b9e      	ldr	r3, [pc, #632]	; (80131bc <readReg+0x28c>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d101      	bne.n	8012f4c <readReg+0x1c>
        reset();
 8012f48:	f7ff fd50 	bl	80129ec <reset>
    CS_ACTIVE;
 8012f4c:	2108      	movs	r1, #8
 8012f4e:	489c      	ldr	r0, [pc, #624]	; (80131c0 <readReg+0x290>)
 8012f50:	f7fe fc11 	bl	8011776 <PIN_LOW>
    WriteCmd(reg);
 8012f54:	2120      	movs	r1, #32
 8012f56:	489b      	ldr	r0, [pc, #620]	; (80131c4 <readReg+0x294>)
 8012f58:	f7fe fc0d 	bl	8011776 <PIN_LOW>
 8012f5c:	88fb      	ldrh	r3, [r7, #6]
 8012f5e:	0a1b      	lsrs	r3, r3, #8
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	73fb      	strb	r3, [r7, #15]
 8012f64:	88fb      	ldrh	r3, [r7, #6]
 8012f66:	73bb      	strb	r3, [r7, #14]
 8012f68:	4b96      	ldr	r3, [pc, #600]	; (80131c4 <readReg+0x294>)
 8012f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012f6e:	619a      	str	r2, [r3, #24]
 8012f70:	4b95      	ldr	r3, [pc, #596]	; (80131c8 <readReg+0x298>)
 8012f72:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8012f76:	619a      	str	r2, [r3, #24]
 8012f78:	4b91      	ldr	r3, [pc, #580]	; (80131c0 <readReg+0x290>)
 8012f7a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8012f7e:	619a      	str	r2, [r3, #24]
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
 8012f82:	039b      	lsls	r3, r3, #14
 8012f84:	4a8f      	ldr	r2, [pc, #572]	; (80131c4 <readReg+0x294>)
 8012f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f8a:	6193      	str	r3, [r2, #24]
 8012f8c:	7bfb      	ldrb	r3, [r7, #15]
 8012f8e:	029b      	lsls	r3, r3, #10
 8012f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012f94:	7bfb      	ldrb	r3, [r7, #15]
 8012f96:	019b      	lsls	r3, r3, #6
 8012f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f9c:	431a      	orrs	r2, r3
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
 8012fa0:	00db      	lsls	r3, r3, #3
 8012fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012fa6:	431a      	orrs	r2, r3
 8012fa8:	4b87      	ldr	r3, [pc, #540]	; (80131c8 <readReg+0x298>)
 8012faa:	619a      	str	r2, [r3, #24]
 8012fac:	7bfb      	ldrb	r3, [r7, #15]
 8012fae:	031b      	lsls	r3, r3, #12
 8012fb0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012fb4:	7bfb      	ldrb	r3, [r7, #15]
 8012fb6:	035b      	lsls	r3, r3, #13
 8012fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fbc:	431a      	orrs	r2, r3
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
 8012fc0:	029b      	lsls	r3, r3, #10
 8012fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012fc6:	431a      	orrs	r2, r3
 8012fc8:	7bfb      	ldrb	r3, [r7, #15]
 8012fca:	019b      	lsls	r3, r3, #6
 8012fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012fd0:	431a      	orrs	r2, r3
 8012fd2:	4b7b      	ldr	r3, [pc, #492]	; (80131c0 <readReg+0x290>)
 8012fd4:	619a      	str	r2, [r3, #24]
 8012fd6:	2101      	movs	r1, #1
 8012fd8:	487c      	ldr	r0, [pc, #496]	; (80131cc <readReg+0x29c>)
 8012fda:	f7fe fbcc 	bl	8011776 <PIN_LOW>
 8012fde:	2101      	movs	r1, #1
 8012fe0:	487a      	ldr	r0, [pc, #488]	; (80131cc <readReg+0x29c>)
 8012fe2:	f7fe fbc8 	bl	8011776 <PIN_LOW>
 8012fe6:	2101      	movs	r1, #1
 8012fe8:	4878      	ldr	r0, [pc, #480]	; (80131cc <readReg+0x29c>)
 8012fea:	f7fe fbc4 	bl	8011776 <PIN_LOW>
 8012fee:	2101      	movs	r1, #1
 8012ff0:	4876      	ldr	r0, [pc, #472]	; (80131cc <readReg+0x29c>)
 8012ff2:	f7fe fbc0 	bl	8011776 <PIN_LOW>
 8012ff6:	2101      	movs	r1, #1
 8012ff8:	4874      	ldr	r0, [pc, #464]	; (80131cc <readReg+0x29c>)
 8012ffa:	f7fe fbbc 	bl	8011776 <PIN_LOW>
 8012ffe:	2101      	movs	r1, #1
 8013000:	4872      	ldr	r0, [pc, #456]	; (80131cc <readReg+0x29c>)
 8013002:	f7fe fbb8 	bl	8011776 <PIN_LOW>
 8013006:	2101      	movs	r1, #1
 8013008:	4870      	ldr	r0, [pc, #448]	; (80131cc <readReg+0x29c>)
 801300a:	f7fe fbb4 	bl	8011776 <PIN_LOW>
 801300e:	2101      	movs	r1, #1
 8013010:	486e      	ldr	r0, [pc, #440]	; (80131cc <readReg+0x29c>)
 8013012:	f7fe fbb0 	bl	8011776 <PIN_LOW>
 8013016:	2101      	movs	r1, #1
 8013018:	486c      	ldr	r0, [pc, #432]	; (80131cc <readReg+0x29c>)
 801301a:	f7fe fbac 	bl	8011776 <PIN_LOW>
 801301e:	2101      	movs	r1, #1
 8013020:	486a      	ldr	r0, [pc, #424]	; (80131cc <readReg+0x29c>)
 8013022:	f7fe fba8 	bl	8011776 <PIN_LOW>
 8013026:	2101      	movs	r1, #1
 8013028:	4868      	ldr	r0, [pc, #416]	; (80131cc <readReg+0x29c>)
 801302a:	f7fe fba4 	bl	8011776 <PIN_LOW>
 801302e:	2101      	movs	r1, #1
 8013030:	4866      	ldr	r0, [pc, #408]	; (80131cc <readReg+0x29c>)
 8013032:	f7fe fba0 	bl	8011776 <PIN_LOW>
 8013036:	2101      	movs	r1, #1
 8013038:	4864      	ldr	r0, [pc, #400]	; (80131cc <readReg+0x29c>)
 801303a:	f7fe fb9c 	bl	8011776 <PIN_LOW>
 801303e:	2101      	movs	r1, #1
 8013040:	4862      	ldr	r0, [pc, #392]	; (80131cc <readReg+0x29c>)
 8013042:	f7fe fb98 	bl	8011776 <PIN_LOW>
 8013046:	2101      	movs	r1, #1
 8013048:	4860      	ldr	r0, [pc, #384]	; (80131cc <readReg+0x29c>)
 801304a:	f7fe fb94 	bl	8011776 <PIN_LOW>
 801304e:	2101      	movs	r1, #1
 8013050:	485e      	ldr	r0, [pc, #376]	; (80131cc <readReg+0x29c>)
 8013052:	f7fe fb90 	bl	8011776 <PIN_LOW>
 8013056:	2101      	movs	r1, #1
 8013058:	485c      	ldr	r0, [pc, #368]	; (80131cc <readReg+0x29c>)
 801305a:	f7fe fb8c 	bl	8011776 <PIN_LOW>
 801305e:	2101      	movs	r1, #1
 8013060:	485a      	ldr	r0, [pc, #360]	; (80131cc <readReg+0x29c>)
 8013062:	f7fe fb98 	bl	8011796 <PIN_HIGH>
 8013066:	2101      	movs	r1, #1
 8013068:	4858      	ldr	r0, [pc, #352]	; (80131cc <readReg+0x29c>)
 801306a:	f7fe fb94 	bl	8011796 <PIN_HIGH>
 801306e:	4b55      	ldr	r3, [pc, #340]	; (80131c4 <readReg+0x294>)
 8013070:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013074:	619a      	str	r2, [r3, #24]
 8013076:	4b54      	ldr	r3, [pc, #336]	; (80131c8 <readReg+0x298>)
 8013078:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801307c:	619a      	str	r2, [r3, #24]
 801307e:	4b50      	ldr	r3, [pc, #320]	; (80131c0 <readReg+0x290>)
 8013080:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013084:	619a      	str	r2, [r3, #24]
 8013086:	7bbb      	ldrb	r3, [r7, #14]
 8013088:	039b      	lsls	r3, r3, #14
 801308a:	4a4e      	ldr	r2, [pc, #312]	; (80131c4 <readReg+0x294>)
 801308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013090:	6193      	str	r3, [r2, #24]
 8013092:	7bbb      	ldrb	r3, [r7, #14]
 8013094:	029b      	lsls	r3, r3, #10
 8013096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	019b      	lsls	r3, r3, #6
 801309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130a2:	431a      	orrs	r2, r3
 80130a4:	7bbb      	ldrb	r3, [r7, #14]
 80130a6:	00db      	lsls	r3, r3, #3
 80130a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80130ac:	431a      	orrs	r2, r3
 80130ae:	4b46      	ldr	r3, [pc, #280]	; (80131c8 <readReg+0x298>)
 80130b0:	619a      	str	r2, [r3, #24]
 80130b2:	7bbb      	ldrb	r3, [r7, #14]
 80130b4:	031b      	lsls	r3, r3, #12
 80130b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80130ba:	7bbb      	ldrb	r3, [r7, #14]
 80130bc:	035b      	lsls	r3, r3, #13
 80130be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80130c2:	431a      	orrs	r2, r3
 80130c4:	7bbb      	ldrb	r3, [r7, #14]
 80130c6:	029b      	lsls	r3, r3, #10
 80130c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130cc:	431a      	orrs	r2, r3
 80130ce:	7bbb      	ldrb	r3, [r7, #14]
 80130d0:	019b      	lsls	r3, r3, #6
 80130d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80130d6:	431a      	orrs	r2, r3
 80130d8:	4b39      	ldr	r3, [pc, #228]	; (80131c0 <readReg+0x290>)
 80130da:	619a      	str	r2, [r3, #24]
 80130dc:	2101      	movs	r1, #1
 80130de:	483b      	ldr	r0, [pc, #236]	; (80131cc <readReg+0x29c>)
 80130e0:	f7fe fb49 	bl	8011776 <PIN_LOW>
 80130e4:	2101      	movs	r1, #1
 80130e6:	4839      	ldr	r0, [pc, #228]	; (80131cc <readReg+0x29c>)
 80130e8:	f7fe fb45 	bl	8011776 <PIN_LOW>
 80130ec:	2101      	movs	r1, #1
 80130ee:	4837      	ldr	r0, [pc, #220]	; (80131cc <readReg+0x29c>)
 80130f0:	f7fe fb41 	bl	8011776 <PIN_LOW>
 80130f4:	2101      	movs	r1, #1
 80130f6:	4835      	ldr	r0, [pc, #212]	; (80131cc <readReg+0x29c>)
 80130f8:	f7fe fb3d 	bl	8011776 <PIN_LOW>
 80130fc:	2101      	movs	r1, #1
 80130fe:	4833      	ldr	r0, [pc, #204]	; (80131cc <readReg+0x29c>)
 8013100:	f7fe fb39 	bl	8011776 <PIN_LOW>
 8013104:	2101      	movs	r1, #1
 8013106:	4831      	ldr	r0, [pc, #196]	; (80131cc <readReg+0x29c>)
 8013108:	f7fe fb35 	bl	8011776 <PIN_LOW>
 801310c:	2101      	movs	r1, #1
 801310e:	482f      	ldr	r0, [pc, #188]	; (80131cc <readReg+0x29c>)
 8013110:	f7fe fb31 	bl	8011776 <PIN_LOW>
 8013114:	2101      	movs	r1, #1
 8013116:	482d      	ldr	r0, [pc, #180]	; (80131cc <readReg+0x29c>)
 8013118:	f7fe fb2d 	bl	8011776 <PIN_LOW>
 801311c:	2101      	movs	r1, #1
 801311e:	482b      	ldr	r0, [pc, #172]	; (80131cc <readReg+0x29c>)
 8013120:	f7fe fb29 	bl	8011776 <PIN_LOW>
 8013124:	2101      	movs	r1, #1
 8013126:	4829      	ldr	r0, [pc, #164]	; (80131cc <readReg+0x29c>)
 8013128:	f7fe fb25 	bl	8011776 <PIN_LOW>
 801312c:	2101      	movs	r1, #1
 801312e:	4827      	ldr	r0, [pc, #156]	; (80131cc <readReg+0x29c>)
 8013130:	f7fe fb21 	bl	8011776 <PIN_LOW>
 8013134:	2101      	movs	r1, #1
 8013136:	4825      	ldr	r0, [pc, #148]	; (80131cc <readReg+0x29c>)
 8013138:	f7fe fb1d 	bl	8011776 <PIN_LOW>
 801313c:	2101      	movs	r1, #1
 801313e:	4823      	ldr	r0, [pc, #140]	; (80131cc <readReg+0x29c>)
 8013140:	f7fe fb19 	bl	8011776 <PIN_LOW>
 8013144:	2101      	movs	r1, #1
 8013146:	4821      	ldr	r0, [pc, #132]	; (80131cc <readReg+0x29c>)
 8013148:	f7fe fb15 	bl	8011776 <PIN_LOW>
 801314c:	2101      	movs	r1, #1
 801314e:	481f      	ldr	r0, [pc, #124]	; (80131cc <readReg+0x29c>)
 8013150:	f7fe fb11 	bl	8011776 <PIN_LOW>
 8013154:	2101      	movs	r1, #1
 8013156:	481d      	ldr	r0, [pc, #116]	; (80131cc <readReg+0x29c>)
 8013158:	f7fe fb0d 	bl	8011776 <PIN_LOW>
 801315c:	2101      	movs	r1, #1
 801315e:	481b      	ldr	r0, [pc, #108]	; (80131cc <readReg+0x29c>)
 8013160:	f7fe fb09 	bl	8011776 <PIN_LOW>
 8013164:	2101      	movs	r1, #1
 8013166:	4819      	ldr	r0, [pc, #100]	; (80131cc <readReg+0x29c>)
 8013168:	f7fe fb15 	bl	8011796 <PIN_HIGH>
 801316c:	2101      	movs	r1, #1
 801316e:	4817      	ldr	r0, [pc, #92]	; (80131cc <readReg+0x29c>)
 8013170:	f7fe fb11 	bl	8011796 <PIN_HIGH>
 8013174:	2120      	movs	r1, #32
 8013176:	4813      	ldr	r0, [pc, #76]	; (80131c4 <readReg+0x294>)
 8013178:	f7fe fb0d 	bl	8011796 <PIN_HIGH>
    setReadDir();
 801317c:	f7fe fc38 	bl	80119f0 <setReadDir>
    delay(1);    //1us should be adequate
 8013180:	2001      	movs	r0, #1
 8013182:	f7fe fad9 	bl	8011738 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8013186:	f7ff fc7b 	bl	8012a80 <read16bits>
 801318a:	4603      	mov	r3, r0
 801318c:	81bb      	strh	r3, [r7, #12]
 801318e:	797b      	ldrb	r3, [r7, #5]
 8013190:	3b01      	subs	r3, #1
 8013192:	b2db      	uxtb	r3, r3
 8013194:	717b      	strb	r3, [r7, #5]
 8013196:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801319a:	2b00      	cmp	r3, #0
 801319c:	daf3      	bge.n	8013186 <readReg+0x256>
    RD_IDLE;
 801319e:	2180      	movs	r1, #128	; 0x80
 80131a0:	4808      	ldr	r0, [pc, #32]	; (80131c4 <readReg+0x294>)
 80131a2:	f7fe faf8 	bl	8011796 <PIN_HIGH>
    CS_IDLE;
 80131a6:	2108      	movs	r1, #8
 80131a8:	4805      	ldr	r0, [pc, #20]	; (80131c0 <readReg+0x290>)
 80131aa:	f7fe faf4 	bl	8011796 <PIN_HIGH>
    setWriteDir();
 80131ae:	f7fe fc51 	bl	8011a54 <setWriteDir>
    return ret;
 80131b2:	89bb      	ldrh	r3, [r7, #12]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20000217 	.word	0x20000217
 80131c0:	40021400 	.word	0x40021400
 80131c4:	40020c00 	.word	0x40020c00
 80131c8:	40021000 	.word	0x40021000
 80131cc:	40020800 	.word	0x40020800

080131d0 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	4603      	mov	r3, r0
 80131d8:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80131da:	88fb      	ldrh	r3, [r7, #6]
 80131dc:	2100      	movs	r1, #0
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff fea6 	bl	8012f30 <readReg>
 80131e4:	4603      	mov	r3, r0
 80131e6:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80131e8:	88fb      	ldrh	r3, [r7, #6]
 80131ea:	2101      	movs	r1, #1
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ff fe9f 	bl	8012f30 <readReg>
 80131f2:	4603      	mov	r3, r0
 80131f4:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80131f6:	89fb      	ldrh	r3, [r7, #14]
 80131f8:	041a      	lsls	r2, r3, #16
 80131fa:	89bb      	ldrh	r3, [r7, #12]
 80131fc:	4313      	orrs	r3, r2
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b084      	sub	sp, #16
 801320a:	af00      	add	r7, sp, #0
 801320c:	4603      	mov	r3, r0
 801320e:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8013210:	88fb      	ldrh	r3, [r7, #6]
 8013212:	2100      	movs	r1, #0
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff fe8b 	bl	8012f30 <readReg>
 801321a:	4603      	mov	r3, r0
 801321c:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 801321e:	88fb      	ldrh	r3, [r7, #6]
 8013220:	2101      	movs	r1, #1
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fe84 	bl	8012f30 <readReg>
 8013228:	4603      	mov	r3, r0
 801322a:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 801322c:	88fb      	ldrh	r3, [r7, #6]
 801322e:	2102      	movs	r1, #2
 8013230:	4618      	mov	r0, r3
 8013232:	f7ff fe7d 	bl	8012f30 <readReg>
 8013236:	4603      	mov	r3, r0
 8013238:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 801323a:	89fb      	ldrh	r3, [r7, #14]
 801323c:	061b      	lsls	r3, r3, #24
 801323e:	89ba      	ldrh	r2, [r7, #12]
 8013240:	0212      	lsls	r2, r2, #8
 8013242:	4313      	orrs	r3, r2
 8013244:	897a      	ldrh	r2, [r7, #10]
 8013246:	0a12      	lsrs	r2, r2, #8
 8013248:	b292      	uxth	r2, r2
 801324a:	4313      	orrs	r3, r2
}
 801324c:	4618      	mov	r0, r3
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <tft_init>:


void tft_init(uint16_t ID)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af00      	add	r7, sp, #0
 801325a:	4603      	mov	r3, r0
 801325c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 801325e:	2300      	movs	r3, #0
 8013260:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8013262:	2300      	movs	r3, #0
 8013264:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8013266:	4be0      	ldr	r3, [pc, #896]	; (80135e8 <tft_init+0x394>)
 8013268:	2200      	movs	r2, #0
 801326a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 801326c:	4adf      	ldr	r2, [pc, #892]	; (80135ec <tft_init+0x398>)
 801326e:	88fb      	ldrh	r3, [r7, #6]
 8013270:	8013      	strh	r3, [r2, #0]
 8013272:	4bde      	ldr	r3, [pc, #888]	; (80135ec <tft_init+0x398>)
 8013274:	881b      	ldrh	r3, [r3, #0]
 8013276:	f24c 5205 	movw	r2, #50437	; 0xc505
 801327a:	4293      	cmp	r3, r2
 801327c:	f000 82cc 	beq.w	8013818 <tft_init+0x5c4>
 8013280:	f24c 5205 	movw	r2, #50437	; 0xc505
 8013284:	4293      	cmp	r3, r2
 8013286:	f300 8303 	bgt.w	8013890 <tft_init+0x63c>
 801328a:	f24b 5209 	movw	r2, #46345	; 0xb509
 801328e:	4293      	cmp	r3, r2
 8013290:	f000 82cb 	beq.w	801382a <tft_init+0x5d6>
 8013294:	f24b 5209 	movw	r2, #46345	; 0xb509
 8013298:	4293      	cmp	r3, r2
 801329a:	f300 82f9 	bgt.w	8013890 <tft_init+0x63c>
 801329e:	f24b 5205 	movw	r2, #46341	; 0xb505
 80132a2:	4293      	cmp	r3, r2
 80132a4:	f000 82b8 	beq.w	8013818 <tft_init+0x5c4>
 80132a8:	f24b 5205 	movw	r2, #46341	; 0xb505
 80132ac:	4293      	cmp	r3, r2
 80132ae:	f300 82ef 	bgt.w	8013890 <tft_init+0x63c>
 80132b2:	f64a 4211 	movw	r2, #44049	; 0xac11
 80132b6:	4293      	cmp	r3, r2
 80132b8:	f000 8239 	beq.w	801372e <tft_init+0x4da>
 80132bc:	f64a 4211 	movw	r2, #44049	; 0xac11
 80132c0:	4293      	cmp	r3, r2
 80132c2:	f300 82e5 	bgt.w	8013890 <tft_init+0x63c>
 80132c6:	f249 4288 	movw	r2, #38024	; 0x9488
 80132ca:	4293      	cmp	r3, r2
 80132cc:	f300 82e0 	bgt.w	8013890 <tft_init+0x63c>
 80132d0:	f249 4287 	movw	r2, #38023	; 0x9487
 80132d4:	4293      	cmp	r3, r2
 80132d6:	f280 8288 	bge.w	80137ea <tft_init+0x596>
 80132da:	f249 4286 	movw	r2, #38022	; 0x9486
 80132de:	4293      	cmp	r3, r2
 80132e0:	f000 8269 	beq.w	80137b6 <tft_init+0x562>
 80132e4:	f249 4286 	movw	r2, #38022	; 0x9486
 80132e8:	4293      	cmp	r3, r2
 80132ea:	f300 82d1 	bgt.w	8013890 <tft_init+0x63c>
 80132ee:	f249 4281 	movw	r2, #38017	; 0x9481
 80132f2:	4293      	cmp	r3, r2
 80132f4:	f000 8248 	beq.w	8013788 <tft_init+0x534>
 80132f8:	f249 4281 	movw	r2, #38017	; 0x9481
 80132fc:	4293      	cmp	r3, r2
 80132fe:	f300 82c7 	bgt.w	8013890 <tft_init+0x63c>
 8013302:	f249 3241 	movw	r2, #37697	; 0x9341
 8013306:	4293      	cmp	r3, r2
 8013308:	f300 82c2 	bgt.w	8013890 <tft_init+0x63c>
 801330c:	f249 3202 	movw	r2, #37634	; 0x9302
 8013310:	4293      	cmp	r3, r2
 8013312:	f280 80a5 	bge.w	8013460 <tft_init+0x20c>
 8013316:	f249 0290 	movw	r2, #37008	; 0x9090
 801331a:	4293      	cmp	r3, r2
 801331c:	f000 818f 	beq.w	801363e <tft_init+0x3ea>
 8013320:	f249 0290 	movw	r2, #37008	; 0x9090
 8013324:	4293      	cmp	r3, r2
 8013326:	f300 82b3 	bgt.w	8013890 <tft_init+0x63c>
 801332a:	f248 3257 	movw	r2, #33623	; 0x8357
 801332e:	4293      	cmp	r3, r2
 8013330:	f000 8180 	beq.w	8013634 <tft_init+0x3e0>
 8013334:	f248 3257 	movw	r2, #33623	; 0x8357
 8013338:	4293      	cmp	r3, r2
 801333a:	f300 82a9 	bgt.w	8013890 <tft_init+0x63c>
 801333e:	f248 0231 	movw	r2, #32817	; 0x8031
 8013342:	4293      	cmp	r3, r2
 8013344:	f000 816d 	beq.w	8013622 <tft_init+0x3ce>
 8013348:	f248 0231 	movw	r2, #32817	; 0x8031
 801334c:	4293      	cmp	r3, r2
 801334e:	f300 829f 	bgt.w	8013890 <tft_init+0x63c>
 8013352:	f247 7296 	movw	r2, #30614	; 0x7796
 8013356:	4293      	cmp	r3, r2
 8013358:	f000 8242 	beq.w	80137e0 <tft_init+0x58c>
 801335c:	f247 7296 	movw	r2, #30614	; 0x7796
 8013360:	4293      	cmp	r3, r2
 8013362:	f300 8295 	bgt.w	8013890 <tft_init+0x63c>
 8013366:	f247 7293 	movw	r2, #30611	; 0x7793
 801336a:	4293      	cmp	r3, r2
 801336c:	f000 825d 	beq.w	801382a <tft_init+0x5d6>
 8013370:	f247 7293 	movw	r2, #30611	; 0x7793
 8013374:	4293      	cmp	r3, r2
 8013376:	f300 828b 	bgt.w	8013890 <tft_init+0x63c>
 801337a:	f247 7289 	movw	r2, #30601	; 0x7789
 801337e:	4293      	cmp	r3, r2
 8013380:	f000 8146 	beq.w	8013610 <tft_init+0x3bc>
 8013384:	f247 7289 	movw	r2, #30601	; 0x7789
 8013388:	4293      	cmp	r3, r2
 801338a:	f300 8281 	bgt.w	8013890 <tft_init+0x63c>
 801338e:	f646 0209 	movw	r2, #26633	; 0x6809
 8013392:	4293      	cmp	r3, r2
 8013394:	f000 8194 	beq.w	80136c0 <tft_init+0x46c>
 8013398:	f646 0209 	movw	r2, #26633	; 0x6809
 801339c:	4293      	cmp	r3, r2
 801339e:	f300 8277 	bgt.w	8013890 <tft_init+0x63c>
 80133a2:	f245 4208 	movw	r2, #21512	; 0x5408
 80133a6:	4293      	cmp	r3, r2
 80133a8:	f000 817a 	beq.w	80136a0 <tft_init+0x44c>
 80133ac:	f245 4208 	movw	r2, #21512	; 0x5408
 80133b0:	4293      	cmp	r3, r2
 80133b2:	f300 826d 	bgt.w	8013890 <tft_init+0x63c>
 80133b6:	f245 3210 	movw	r2, #21264	; 0x5310
 80133ba:	4293      	cmp	r3, r2
 80133bc:	f000 80fe 	beq.w	80135bc <tft_init+0x368>
 80133c0:	f245 3210 	movw	r2, #21264	; 0x5310
 80133c4:	4293      	cmp	r3, r2
 80133c6:	f300 8263 	bgt.w	8013890 <tft_init+0x63c>
 80133ca:	f242 0253 	movw	r2, #8275	; 0x2053
 80133ce:	4293      	cmp	r3, r2
 80133d0:	f000 81a8 	beq.w	8013724 <tft_init+0x4d0>
 80133d4:	f242 0253 	movw	r2, #8275	; 0x2053
 80133d8:	4293      	cmp	r3, r2
 80133da:	f300 8259 	bgt.w	8013890 <tft_init+0x63c>
 80133de:	f241 6202 	movw	r2, #5634	; 0x1602
 80133e2:	4293      	cmp	r3, r2
 80133e4:	f000 8195 	beq.w	8013712 <tft_init+0x4be>
 80133e8:	f241 6202 	movw	r2, #5634	; 0x1602
 80133ec:	4293      	cmp	r3, r2
 80133ee:	f300 824f 	bgt.w	8013890 <tft_init+0x63c>
 80133f2:	f241 5281 	movw	r2, #5505	; 0x1581
 80133f6:	4293      	cmp	r3, r2
 80133f8:	f000 81c1 	beq.w	801377e <tft_init+0x52a>
 80133fc:	f241 5281 	movw	r2, #5505	; 0x1581
 8013400:	4293      	cmp	r3, r2
 8013402:	f300 8245 	bgt.w	8013890 <tft_init+0x63c>
 8013406:	f241 5226 	movw	r2, #5414	; 0x1526
 801340a:	4293      	cmp	r3, r2
 801340c:	f000 80cd 	beq.w	80135aa <tft_init+0x356>
 8013410:	f241 5226 	movw	r2, #5414	; 0x1526
 8013414:	4293      	cmp	r3, r2
 8013416:	f300 823b 	bgt.w	8013890 <tft_init+0x63c>
 801341a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 801341e:	f000 80bb 	beq.w	8013598 <tft_init+0x344>
 8013422:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8013426:	f300 8233 	bgt.w	8013890 <tft_init+0x63c>
 801342a:	f241 5211 	movw	r2, #5393	; 0x1511
 801342e:	4293      	cmp	r3, r2
 8013430:	f000 809e 	beq.w	8013570 <tft_init+0x31c>
 8013434:	f241 5211 	movw	r2, #5393	; 0x1511
 8013438:	4293      	cmp	r3, r2
 801343a:	f300 8229 	bgt.w	8013890 <tft_init+0x63c>
 801343e:	f241 5205 	movw	r2, #5381	; 0x1505
 8013442:	4293      	cmp	r3, r2
 8013444:	f000 8131 	beq.w	80136aa <tft_init+0x456>
 8013448:	f241 5205 	movw	r2, #5381	; 0x1505
 801344c:	4293      	cmp	r3, r2
 801344e:	f300 821f 	bgt.w	8013890 <tft_init+0x63c>
 8013452:	2b01      	cmp	r3, #1
 8013454:	f000 811f 	beq.w	8013696 <tft_init+0x442>
 8013458:	2b99      	cmp	r3, #153	; 0x99
 801345a:	f000 8107 	beq.w	801366c <tft_init+0x418>
 801345e:	e217      	b.n	8013890 <tft_init+0x63c>
 8013460:	4a63      	ldr	r2, [pc, #396]	; (80135f0 <tft_init+0x39c>)
 8013462:	441a      	add	r2, r3
 8013464:	2a3f      	cmp	r2, #63	; 0x3f
 8013466:	f200 8213 	bhi.w	8013890 <tft_init+0x63c>
 801346a:	a301      	add	r3, pc, #4	; (adr r3, 8013470 <tft_init+0x21c>)
 801346c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8013470:	08013739 	.word	0x08013739
 8013474:	08013891 	.word	0x08013891
 8013478:	08013891 	.word	0x08013891
 801347c:	08013891 	.word	0x08013891
 8013480:	08013891 	.word	0x08013891
 8013484:	08013891 	.word	0x08013891
 8013488:	08013891 	.word	0x08013891
 801348c:	08013891 	.word	0x08013891
 8013490:	08013891 	.word	0x08013891
 8013494:	08013891 	.word	0x08013891
 8013498:	08013891 	.word	0x08013891
 801349c:	08013891 	.word	0x08013891
 80134a0:	08013891 	.word	0x08013891
 80134a4:	08013891 	.word	0x08013891
 80134a8:	08013891 	.word	0x08013891
 80134ac:	08013891 	.word	0x08013891
 80134b0:	08013891 	.word	0x08013891
 80134b4:	08013891 	.word	0x08013891
 80134b8:	08013891 	.word	0x08013891
 80134bc:	08013891 	.word	0x08013891
 80134c0:	08013891 	.word	0x08013891
 80134c4:	08013891 	.word	0x08013891
 80134c8:	08013891 	.word	0x08013891
 80134cc:	08013891 	.word	0x08013891
 80134d0:	08013891 	.word	0x08013891
 80134d4:	08013891 	.word	0x08013891
 80134d8:	08013891 	.word	0x08013891
 80134dc:	08013891 	.word	0x08013891
 80134e0:	08013891 	.word	0x08013891
 80134e4:	08013891 	.word	0x08013891
 80134e8:	080136ab 	.word	0x080136ab
 80134ec:	08013891 	.word	0x08013891
 80134f0:	08013891 	.word	0x08013891
 80134f4:	08013891 	.word	0x08013891
 80134f8:	08013891 	.word	0x08013891
 80134fc:	080136cb 	.word	0x080136cb
 8013500:	08013891 	.word	0x08013891
 8013504:	080136eb 	.word	0x080136eb
 8013508:	080136cb 	.word	0x080136cb
 801350c:	0801374d 	.word	0x0801374d
 8013510:	08013891 	.word	0x08013891
 8013514:	08013891 	.word	0x08013891
 8013518:	08013891 	.word	0x08013891
 801351c:	08013891 	.word	0x08013891
 8013520:	08013891 	.word	0x08013891
 8013524:	08013891 	.word	0x08013891
 8013528:	08013891 	.word	0x08013891
 801352c:	080136d5 	.word	0x080136d5
 8013530:	08013891 	.word	0x08013891
 8013534:	08013891 	.word	0x08013891
 8013538:	08013891 	.word	0x08013891
 801353c:	080136d5 	.word	0x080136d5
 8013540:	08013891 	.word	0x08013891
 8013544:	08013891 	.word	0x08013891
 8013548:	08013743 	.word	0x08013743
 801354c:	08013891 	.word	0x08013891
 8013550:	08013891 	.word	0x08013891
 8013554:	08013891 	.word	0x08013891
 8013558:	08013891 	.word	0x08013891
 801355c:	08013891 	.word	0x08013891
 8013560:	08013891 	.word	0x08013891
 8013564:	08013891 	.word	0x08013891
 8013568:	08013763 	.word	0x08013763
 801356c:	0801376d 	.word	0x0801376d
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8013570:	4b20      	ldr	r3, [pc, #128]	; (80135f4 <tft_init+0x3a0>)
 8013572:	2203      	movs	r2, #3
 8013574:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8013576:	4b20      	ldr	r3, [pc, #128]	; (80135f8 <tft_init+0x3a4>)
 8013578:	61fb      	str	r3, [r7, #28]
 801357a:	2303      	movs	r3, #3
 801357c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 801357e:	4b1f      	ldr	r3, [pc, #124]	; (80135fc <tft_init+0x3a8>)
 8013580:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013588:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 801358a:	4b1d      	ldr	r3, [pc, #116]	; (8013600 <tft_init+0x3ac>)
 801358c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013594:	801a      	strh	r2, [r3, #0]
        break;
 8013596:	e181      	b.n	801389c <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013598:	4b16      	ldr	r3, [pc, #88]	; (80135f4 <tft_init+0x3a0>)
 801359a:	f240 4213 	movw	r2, #1043	; 0x413
 801359e:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80135a0:	4b18      	ldr	r3, [pc, #96]	; (8013604 <tft_init+0x3b0>)
 80135a2:	61fb      	str	r3, [r7, #28]
 80135a4:	2306      	movs	r3, #6
 80135a6:	837b      	strh	r3, [r7, #26]
        break;
 80135a8:	e178      	b.n	801389c <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80135aa:	4b12      	ldr	r3, [pc, #72]	; (80135f4 <tft_init+0x3a0>)
 80135ac:	f240 4213 	movw	r2, #1043	; 0x413
 80135b0:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80135b2:	4b15      	ldr	r3, [pc, #84]	; (8013608 <tft_init+0x3b4>)
 80135b4:	61fb      	str	r3, [r7, #28]
 80135b6:	230c      	movs	r3, #12
 80135b8:	837b      	strh	r3, [r7, #26]
        break;
 80135ba:	e16f      	b.n	801389c <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 80135bc:	4b0d      	ldr	r3, [pc, #52]	; (80135f4 <tft_init+0x3a0>)
 80135be:	f640 6213 	movw	r2, #3603	; 0xe13
 80135c2:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80135c4:	4b11      	ldr	r3, [pc, #68]	; (801360c <tft_init+0x3b8>)
 80135c6:	61fb      	str	r3, [r7, #28]
 80135c8:	2302      	movs	r3, #2
 80135ca:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80135cc:	4b0b      	ldr	r3, [pc, #44]	; (80135fc <tft_init+0x3a8>)
 80135ce:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80135d6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80135d8:	4b09      	ldr	r3, [pc, #36]	; (8013600 <tft_init+0x3ac>)
 80135da:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80135e2:	801a      	strh	r2, [r3, #0]
        break;
 80135e4:	e15a      	b.n	801389c <tft_init+0x648>
 80135e6:	bf00      	nop
 80135e8:	2000699e 	.word	0x2000699e
 80135ec:	2000699c 	.word	0x2000699c
 80135f0:	ffff6cfe 	.word	0xffff6cfe
 80135f4:	2000698e 	.word	0x2000698e
 80135f8:	0801a9b8 	.word	0x0801a9b8
 80135fc:	0801182d 	.word	0x0801182d
 8013600:	08011815 	.word	0x08011815
 8013604:	0801a9bc 	.word	0x0801a9bc
 8013608:	0801a9c4 	.word	0x0801a9c4
 801360c:	0801a9d0 	.word	0x0801a9d0
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013610:	4b8d      	ldr	r3, [pc, #564]	; (8013848 <tft_init+0x5f4>)
 8013612:	f240 4213 	movw	r2, #1043	; 0x413
 8013616:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8013618:	4b8c      	ldr	r3, [pc, #560]	; (801384c <tft_init+0x5f8>)
 801361a:	61fb      	str	r3, [r7, #28]
 801361c:	2341      	movs	r3, #65	; 0x41
 801361e:	837b      	strh	r3, [r7, #26]
        break;
 8013620:	e13c      	b.n	801389c <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8013622:	4b89      	ldr	r3, [pc, #548]	; (8013848 <tft_init+0x5f4>)
 8013624:	f241 4213 	movw	r2, #5139	; 0x1413
 8013628:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 801362a:	4b89      	ldr	r3, [pc, #548]	; (8013850 <tft_init+0x5fc>)
 801362c:	61fb      	str	r3, [r7, #28]
 801362e:	2312      	movs	r3, #18
 8013630:	837b      	strh	r3, [r7, #26]
        break;
 8013632:	e133      	b.n	801389c <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8013634:	4b84      	ldr	r3, [pc, #528]	; (8013848 <tft_init+0x5f4>)
 8013636:	f241 4203 	movw	r2, #5123	; 0x1403
 801363a:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 801363c:	e003      	b.n	8013646 <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 801363e:	4b82      	ldr	r3, [pc, #520]	; (8013848 <tft_init+0x5f4>)
 8013640:	f241 4213 	movw	r2, #5139	; 0x1413
 8013644:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8013646:	2301      	movs	r3, #1
 8013648:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 801364a:	4b82      	ldr	r3, [pc, #520]	; (8013854 <tft_init+0x600>)
 801364c:	61fb      	str	r3, [r7, #28]
 801364e:	2302      	movs	r3, #2
 8013650:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8013652:	4b81      	ldr	r3, [pc, #516]	; (8013858 <tft_init+0x604>)
 8013654:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801365c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 801365e:	4b7f      	ldr	r3, [pc, #508]	; (801385c <tft_init+0x608>)
 8013660:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013668:	801a      	strh	r2, [r3, #0]
        break;
 801366a:	e117      	b.n	801389c <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 801366c:	4b76      	ldr	r3, [pc, #472]	; (8013848 <tft_init+0x5f4>)
 801366e:	f241 4213 	movw	r2, #5139	; 0x1413
 8013672:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8013674:	4b7a      	ldr	r3, [pc, #488]	; (8013860 <tft_init+0x60c>)
 8013676:	61fb      	str	r3, [r7, #28]
 8013678:	231d      	movs	r3, #29
 801367a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 801367c:	4b76      	ldr	r3, [pc, #472]	; (8013858 <tft_init+0x604>)
 801367e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013686:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013688:	4b74      	ldr	r3, [pc, #464]	; (801385c <tft_init+0x608>)
 801368a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013692:	801a      	strh	r2, [r3, #0]
        break;
 8013694:	e102      	b.n	801389c <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8013696:	4b6c      	ldr	r3, [pc, #432]	; (8013848 <tft_init+0x5f4>)
 8013698:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801369c:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 801369e:	e008      	b.n	80136b2 <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80136a0:	4b69      	ldr	r3, [pc, #420]	; (8013848 <tft_init+0x5f4>)
 80136a2:	f241 0204 	movw	r2, #4100	; 0x1004
 80136a6:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80136a8:	e003      	b.n	80136b2 <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80136aa:	4b67      	ldr	r3, [pc, #412]	; (8013848 <tft_init+0x5f4>)
 80136ac:	f241 0204 	movw	r2, #4100	; 0x1004
 80136b0:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80136b2:	2301      	movs	r3, #1
 80136b4:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80136b6:	21d8      	movs	r1, #216	; 0xd8
 80136b8:	486a      	ldr	r0, [pc, #424]	; (8013864 <tft_init+0x610>)
 80136ba:	f7ff f966 	bl	801298a <init_table16>
        break;
 80136be:	e0ed      	b.n	801389c <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80136c0:	4b61      	ldr	r3, [pc, #388]	; (8013848 <tft_init+0x5f4>)
 80136c2:	f241 1202 	movw	r2, #4354	; 0x1102
 80136c6:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80136c8:	e008      	b.n	80136dc <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80136ca:	4b5f      	ldr	r3, [pc, #380]	; (8013848 <tft_init+0x5f4>)
 80136cc:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80136d0:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80136d2:	e003      	b.n	80136dc <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 80136d4:	4b5c      	ldr	r3, [pc, #368]	; (8013848 <tft_init+0x5f4>)
 80136d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136da:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80136dc:	2301      	movs	r3, #1
 80136de:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80136e0:	21cc      	movs	r1, #204	; 0xcc
 80136e2:	4861      	ldr	r0, [pc, #388]	; (8013868 <tft_init+0x614>)
 80136e4:	f7ff f951 	bl	801298a <init_table16>
        break;
 80136e8:	e0d8      	b.n	801389c <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80136ea:	4b57      	ldr	r3, [pc, #348]	; (8013848 <tft_init+0x5f4>)
 80136ec:	f240 4203 	movw	r2, #1027	; 0x403
 80136f0:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80136f2:	4b5e      	ldr	r3, [pc, #376]	; (801386c <tft_init+0x618>)
 80136f4:	61fb      	str	r3, [r7, #28]
 80136f6:	231e      	movs	r3, #30
 80136f8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80136fa:	4b57      	ldr	r3, [pc, #348]	; (8013858 <tft_init+0x604>)
 80136fc:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013704:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8013706:	4b55      	ldr	r3, [pc, #340]	; (801385c <tft_init+0x608>)
 8013708:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	22f0      	movs	r2, #240	; 0xf0
 801370e:	801a      	strh	r2, [r3, #0]
        break;
 8013710:	e0c4      	b.n	801389c <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8013712:	4b4d      	ldr	r3, [pc, #308]	; (8013848 <tft_init+0x5f4>)
 8013714:	f240 4203 	movw	r2, #1027	; 0x403
 8013718:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 801371a:	4b55      	ldr	r3, [pc, #340]	; (8013870 <tft_init+0x61c>)
 801371c:	61fb      	str	r3, [r7, #28]
 801371e:	2306      	movs	r3, #6
 8013720:	837b      	strh	r3, [r7, #26]
        break;
 8013722:	e0bb      	b.n	801389c <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8013724:	4b48      	ldr	r3, [pc, #288]	; (8013848 <tft_init+0x5f4>)
 8013726:	f241 4217 	movw	r2, #5143	; 0x1417
 801372a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 801372c:	e012      	b.n	8013754 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 801372e:	4b46      	ldr	r3, [pc, #280]	; (8013848 <tft_init+0x5f4>)
 8013730:	f241 4213 	movw	r2, #5139	; 0x1413
 8013734:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8013736:	e00d      	b.n	8013754 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8013738:	4b43      	ldr	r3, [pc, #268]	; (8013848 <tft_init+0x5f4>)
 801373a:	f240 4203 	movw	r2, #1027	; 0x403
 801373e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8013740:	e008      	b.n	8013754 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8013742:	4b41      	ldr	r3, [pc, #260]	; (8013848 <tft_init+0x5f4>)
 8013744:	f240 4213 	movw	r2, #1043	; 0x413
 8013748:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 801374a:	e003      	b.n	8013754 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 801374c:	4b3e      	ldr	r3, [pc, #248]	; (8013848 <tft_init+0x5f4>)
 801374e:	f241 6203 	movw	r2, #5635	; 0x1603
 8013752:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8013754:	2301      	movs	r3, #1
 8013756:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8013758:	4b46      	ldr	r3, [pc, #280]	; (8013874 <tft_init+0x620>)
 801375a:	61fb      	str	r3, [r7, #28]
 801375c:	2303      	movs	r3, #3
 801375e:	837b      	strh	r3, [r7, #26]
        break;
 8013760:	e09c      	b.n	801389c <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8013762:	4b39      	ldr	r3, [pc, #228]	; (8013848 <tft_init+0x5f4>)
 8013764:	f241 4213 	movw	r2, #5139	; 0x1413
 8013768:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 801376a:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 801376c:	4b36      	ldr	r3, [pc, #216]	; (8013848 <tft_init+0x5f4>)
 801376e:	f240 4213 	movw	r2, #1043	; 0x413
 8013772:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8013774:	4b40      	ldr	r3, [pc, #256]	; (8013878 <tft_init+0x624>)
 8013776:	61fb      	str	r3, [r7, #28]
 8013778:	2365      	movs	r3, #101	; 0x65
 801377a:	837b      	strh	r3, [r7, #26]
        break;
 801377c:	e08e      	b.n	801389c <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 801377e:	4b32      	ldr	r3, [pc, #200]	; (8013848 <tft_init+0x5f4>)
 8013780:	f240 4213 	movw	r2, #1043	; 0x413
 8013784:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8013786:	e003      	b.n	8013790 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8013788:	4b2f      	ldr	r3, [pc, #188]	; (8013848 <tft_init+0x5f4>)
 801378a:	f240 4207 	movw	r2, #1031	; 0x407
 801378e:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8013790:	2301      	movs	r3, #1
 8013792:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8013794:	4b39      	ldr	r3, [pc, #228]	; (801387c <tft_init+0x628>)
 8013796:	61fb      	str	r3, [r7, #28]
 8013798:	2345      	movs	r3, #69	; 0x45
 801379a:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 801379c:	4b2e      	ldr	r3, [pc, #184]	; (8013858 <tft_init+0x604>)
 801379e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80137a6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80137a8:	4b2c      	ldr	r3, [pc, #176]	; (801385c <tft_init+0x608>)
 80137aa:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80137b2:	801a      	strh	r2, [r3, #0]
        break;
 80137b4:	e072      	b.n	801389c <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80137b6:	4b24      	ldr	r3, [pc, #144]	; (8013848 <tft_init+0x5f4>)
 80137b8:	f240 4203 	movw	r2, #1027	; 0x403
 80137bc:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80137be:	4b30      	ldr	r3, [pc, #192]	; (8013880 <tft_init+0x62c>)
 80137c0:	61fb      	str	r3, [r7, #28]
 80137c2:	233b      	movs	r3, #59	; 0x3b
 80137c4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80137c6:	4b24      	ldr	r3, [pc, #144]	; (8013858 <tft_init+0x604>)
 80137c8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80137d0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80137d2:	4b22      	ldr	r3, [pc, #136]	; (801385c <tft_init+0x608>)
 80137d4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80137dc:	801a      	strh	r2, [r3, #0]
        break;
 80137de:	e05d      	b.n	801389c <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80137e0:	4b19      	ldr	r3, [pc, #100]	; (8013848 <tft_init+0x5f4>)
 80137e2:	f240 4203 	movw	r2, #1027	; 0x403
 80137e6:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80137e8:	e003      	b.n	80137f2 <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80137ea:	4b17      	ldr	r3, [pc, #92]	; (8013848 <tft_init+0x5f4>)
 80137ec:	f240 4213 	movw	r2, #1043	; 0x413
 80137f0:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80137f2:	2301      	movs	r3, #1
 80137f4:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80137f6:	4b23      	ldr	r3, [pc, #140]	; (8013884 <tft_init+0x630>)
 80137f8:	61fb      	str	r3, [r7, #28]
 80137fa:	232b      	movs	r3, #43	; 0x2b
 80137fc:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80137fe:	4b16      	ldr	r3, [pc, #88]	; (8013858 <tft_init+0x604>)
 8013800:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013808:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 801380a:	4b14      	ldr	r3, [pc, #80]	; (801385c <tft_init+0x608>)
 801380c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8013814:	801a      	strh	r2, [r3, #0]
        break;
 8013816:	e041      	b.n	801389c <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8013818:	4b0b      	ldr	r3, [pc, #44]	; (8013848 <tft_init+0x5f4>)
 801381a:	f241 0208 	movw	r2, #4104	; 0x1008
 801381e:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8013820:	21b0      	movs	r1, #176	; 0xb0
 8013822:	4819      	ldr	r0, [pc, #100]	; (8013888 <tft_init+0x634>)
 8013824:	f7ff f8b1 	bl	801298a <init_table16>
        break;
 8013828:	e038      	b.n	801389c <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 801382a:	4b07      	ldr	r3, [pc, #28]	; (8013848 <tft_init+0x5f4>)
 801382c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013830:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8013832:	21c0      	movs	r1, #192	; 0xc0
 8013834:	4815      	ldr	r0, [pc, #84]	; (801388c <tft_init+0x638>)
 8013836:	f7ff f8a8 	bl	801298a <init_table16>
        p16 = (int16_t *) & height;
 801383a:	4b07      	ldr	r3, [pc, #28]	; (8013858 <tft_init+0x604>)
 801383c:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013844:	801a      	strh	r2, [r3, #0]
        break;
 8013846:	e029      	b.n	801389c <tft_init+0x648>
 8013848:	2000698e 	.word	0x2000698e
 801384c:	0801a9d4 	.word	0x0801a9d4
 8013850:	0801aa18 	.word	0x0801aa18
 8013854:	0801aa2c 	.word	0x0801aa2c
 8013858:	0801182d 	.word	0x0801182d
 801385c:	08011815 	.word	0x08011815
 8013860:	0801aa30 	.word	0x0801aa30
 8013864:	0801aa50 	.word	0x0801aa50
 8013868:	0801ab28 	.word	0x0801ab28
 801386c:	0801abf4 	.word	0x0801abf4
 8013870:	0801ac14 	.word	0x0801ac14
 8013874:	0801ac1c 	.word	0x0801ac1c
 8013878:	0801ac20 	.word	0x0801ac20
 801387c:	0801ac88 	.word	0x0801ac88
 8013880:	0801acd0 	.word	0x0801acd0
 8013884:	0801ad0c 	.word	0x0801ad0c
 8013888:	0801ad38 	.word	0x0801ad38
 801388c:	0801ade8 	.word	0x0801ade8
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8013890:	4b2c      	ldr	r3, [pc, #176]	; (8013944 <tft_init+0x6f0>)
 8013892:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	2200      	movs	r2, #0
 8013898:	801a      	strh	r2, [r3, #0]
        break;
 801389a:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 801389c:	4b2a      	ldr	r3, [pc, #168]	; (8013948 <tft_init+0x6f4>)
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	bf14      	ite	ne
 80138a8:	2301      	movne	r3, #1
 80138aa:	2300      	moveq	r3, #0
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	4b26      	ldr	r3, [pc, #152]	; (801394c <tft_init+0x6f8>)
 80138b2:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00d      	beq.n	80138d6 <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80138ba:	2109      	movs	r1, #9
 80138bc:	4824      	ldr	r0, [pc, #144]	; (8013950 <tft_init+0x6fc>)
 80138be:	f7ff f80b 	bl	80128d8 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80138c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80138c6:	4619      	mov	r1, r3
 80138c8:	69f8      	ldr	r0, [r7, #28]
 80138ca:	f7ff f805 	bl	80128d8 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80138ce:	2106      	movs	r1, #6
 80138d0:	4820      	ldr	r0, [pc, #128]	; (8013954 <tft_init+0x700>)
 80138d2:	f7ff f801 	bl	80128d8 <init_table>
    }
    setRotation(0);             //PORTRAIT
 80138d6:	2000      	movs	r0, #0
 80138d8:	f001 fe42 	bl	8015560 <setRotation>
    invertDisplay(false);
 80138dc:	2000      	movs	r0, #0
 80138de:	f002 fca5 	bl	801622c <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80138e2:	4b1d      	ldr	r3, [pc, #116]	; (8013958 <tft_init+0x704>)
 80138e4:	881b      	ldrh	r3, [r3, #0]
 80138e6:	f249 4288 	movw	r2, #38024	; 0x9488
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d125      	bne.n	801393a <tft_init+0x6e6>
		is555 = 0;
 80138ee:	4b1b      	ldr	r3, [pc, #108]	; (801395c <tft_init+0x708>)
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80138f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80138f8:	2100      	movs	r1, #0
 80138fa:	2000      	movs	r0, #0
 80138fc:	f002 f8b8 	bl	8015a70 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8013900:	2100      	movs	r1, #0
 8013902:	2000      	movs	r0, #0
 8013904:	f7fe f836 	bl	8011974 <readPixel>
 8013908:	4603      	mov	r3, r0
 801390a:	461a      	mov	r2, r3
 801390c:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8013910:	429a      	cmp	r2, r3
 8013912:	d112      	bne.n	801393a <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8013914:	2306      	movs	r3, #6
 8013916:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8013918:	f107 030f 	add.w	r3, r7, #15
 801391c:	2201      	movs	r2, #1
 801391e:	4619      	mov	r1, r3
 8013920:	203a      	movs	r0, #58	; 0x3a
 8013922:	f7fe f851 	bl	80119c8 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8013926:	4b08      	ldr	r3, [pc, #32]	; (8013948 <tft_init+0x6f4>)
 8013928:	881b      	ldrh	r3, [r3, #0]
 801392a:	f023 0310 	bic.w	r3, r3, #16
 801392e:	b29a      	uxth	r2, r3
 8013930:	4b05      	ldr	r3, [pc, #20]	; (8013948 <tft_init+0x6f4>)
 8013932:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8013934:	4b09      	ldr	r3, [pc, #36]	; (801395c <tft_init+0x708>)
 8013936:	2201      	movs	r2, #1
 8013938:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 801393a:	bf00      	nop
 801393c:	3720      	adds	r7, #32
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	08011815 	.word	0x08011815
 8013948:	2000698e 	.word	0x2000698e
 801394c:	20006992 	.word	0x20006992
 8013950:	0801aea8 	.word	0x0801aea8
 8013954:	0801aeb4 	.word	0x0801aeb4
 8013958:	2000699c 	.word	0x2000699c
 801395c:	20000219 	.word	0x20000219

08013960 <readID>:




uint16_t readID(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8013966:	2100      	movs	r1, #0
 8013968:	2000      	movs	r0, #0
 801396a:	f7ff fae1 	bl	8012f30 <readReg>
 801396e:	4603      	mov	r3, r0
 8013970:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8013972:	89fb      	ldrh	r3, [r7, #14]
 8013974:	f245 4208 	movw	r2, #21512	; 0x5408
 8013978:	4293      	cmp	r3, r2
 801397a:	d102      	bne.n	8013982 <readID+0x22>
        return 0x5408;
 801397c:	f245 4308 	movw	r3, #21512	; 0x5408
 8013980:	e128      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8013982:	89fb      	ldrh	r3, [r7, #14]
 8013984:	f245 4220 	movw	r2, #21536	; 0x5420
 8013988:	4293      	cmp	r3, r2
 801398a:	d102      	bne.n	8013992 <readID+0x32>
        return 0x5420;
 801398c:	f245 4320 	movw	r3, #21536	; 0x5420
 8013990:	e120      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8013992:	89fb      	ldrh	r3, [r7, #14]
 8013994:	f648 1289 	movw	r2, #35209	; 0x8989
 8013998:	4293      	cmp	r3, r2
 801399a:	d102      	bne.n	80139a2 <readID+0x42>
        return 0x1289;
 801399c:	f241 2389 	movw	r3, #4745	; 0x1289
 80139a0:	e118      	b.n	8013bd4 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 80139a2:	2100      	movs	r1, #0
 80139a4:	2067      	movs	r0, #103	; 0x67
 80139a6:	f7ff fac3 	bl	8012f30 <readReg>
 80139aa:	4603      	mov	r3, r0
 80139ac:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80139ae:	89fb      	ldrh	r3, [r7, #14]
 80139b0:	f244 7247 	movw	r2, #18247	; 0x4747
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d102      	bne.n	80139be <readID+0x5e>
        return 0x8347;
 80139b8:	f248 3347 	movw	r3, #33607	; 0x8347
 80139bc:	e10a      	b.n	8013bd4 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80139be:	20a1      	movs	r0, #161	; 0xa1
 80139c0:	f7ff fc06 	bl	80131d0 <readReg32>
 80139c4:	4603      	mov	r3, r0
 80139c6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80139c8:	89fb      	ldrh	r3, [r7, #14]
 80139ca:	f246 1201 	movw	r2, #24833	; 0x6101
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d102      	bne.n	80139d8 <readID+0x78>
        return 0x1963;
 80139d2:	f641 1363 	movw	r3, #6499	; 0x1963
 80139d6:	e0fd      	b.n	8013bd4 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80139d8:	89fb      	ldrh	r3, [r7, #14]
 80139da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139de:	4293      	cmp	r3, r2
 80139e0:	d102      	bne.n	80139e8 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80139e2:	f241 5326 	movw	r3, #5414	; 0x1526
 80139e6:	e0f5      	b.n	8013bd4 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80139e8:	20bf      	movs	r0, #191	; 0xbf
 80139ea:	f7ff fc0c 	bl	8013206 <readReg40>
 80139ee:	4603      	mov	r3, r0
 80139f0:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80139f2:	89fb      	ldrh	r3, [r7, #14]
 80139f4:	f248 3257 	movw	r2, #33623	; 0x8357
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d102      	bne.n	8013a02 <readID+0xa2>
        return 0x8357;
 80139fc:	f248 3357 	movw	r3, #33623	; 0x8357
 8013a00:	e0e8      	b.n	8013bd4 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8013a02:	89fb      	ldrh	r3, [r7, #14]
 8013a04:	f249 4281 	movw	r2, #38017	; 0x9481
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d102      	bne.n	8013a12 <readID+0xb2>
        return 0x9481;
 8013a0c:	f249 4381 	movw	r3, #38017	; 0x9481
 8013a10:	e0e0      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8013a12:	89fb      	ldrh	r3, [r7, #14]
 8013a14:	f241 5211 	movw	r2, #5393	; 0x1511
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d102      	bne.n	8013a22 <readID+0xc2>
        return 0x1511;
 8013a1c:	f241 5311 	movw	r3, #5393	; 0x1511
 8013a20:	e0d8      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8013a22:	89fb      	ldrh	r3, [r7, #14]
 8013a24:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8013a28:	d102      	bne.n	8013a30 <readID+0xd0>
        return 0x1520;
 8013a2a:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8013a2e:	e0d1      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8013a30:	89fb      	ldrh	r3, [r7, #14]
 8013a32:	f241 5226 	movw	r2, #5414	; 0x1526
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d102      	bne.n	8013a40 <readID+0xe0>
        return 0x1526;
 8013a3a:	f241 5326 	movw	r3, #5414	; 0x1526
 8013a3e:	e0c9      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8013a40:	89fb      	ldrh	r3, [r7, #14]
 8013a42:	f241 5281 	movw	r2, #5505	; 0x1581
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d102      	bne.n	8013a50 <readID+0xf0>
        return 0x1581;
 8013a4a:	f241 5381 	movw	r3, #5505	; 0x1581
 8013a4e:	e0c1      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8013a50:	89fb      	ldrh	r3, [r7, #14]
 8013a52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8013a56:	d102      	bne.n	8013a5e <readID+0xfe>
        return 0x6814;
 8013a58:	f646 0314 	movw	r3, #26644	; 0x6814
 8013a5c:	e0ba      	b.n	8013bd4 <readID+0x274>
    ret = readReg32(0xD4);
 8013a5e:	20d4      	movs	r0, #212	; 0xd4
 8013a60:	f7ff fbb6 	bl	80131d0 <readReg32>
 8013a64:	4603      	mov	r3, r0
 8013a66:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8013a68:	89fb      	ldrh	r3, [r7, #14]
 8013a6a:	f245 3210 	movw	r2, #21264	; 0x5310
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d102      	bne.n	8013a78 <readID+0x118>
        return 0x5310;
 8013a72:	f245 3310 	movw	r3, #21264	; 0x5310
 8013a76:	e0ad      	b.n	8013bd4 <readID+0x274>
    ret = readReg32(0xD7);
 8013a78:	20d7      	movs	r0, #215	; 0xd7
 8013a7a:	f7ff fba9 	bl	80131d0 <readReg32>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8013a82:	89fb      	ldrh	r3, [r7, #14]
 8013a84:	f248 0231 	movw	r2, #32817	; 0x8031
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d102      	bne.n	8013a92 <readID+0x132>
        return 0x8031;
 8013a8c:	f248 0331 	movw	r3, #32817	; 0x8031
 8013a90:	e0a0      	b.n	8013bd4 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8013a92:	20ef      	movs	r0, #239	; 0xef
 8013a94:	f7ff fbb7 	bl	8013206 <readReg40>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	f249 3227 	movw	r2, #37671	; 0x9327
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d102      	bne.n	8013aac <readID+0x14c>
        return 0x9327;
 8013aa6:	f249 3327 	movw	r3, #37671	; 0x9327
 8013aaa:	e093      	b.n	8013bd4 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8013aac:	20fe      	movs	r0, #254	; 0xfe
 8013aae:	f7ff fb8f 	bl	80131d0 <readReg32>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	0a1b      	lsrs	r3, r3, #8
 8013ab6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8013ab8:	89fb      	ldrh	r3, [r7, #14]
 8013aba:	f242 0253 	movw	r2, #8275	; 0x2053
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d102      	bne.n	8013ac8 <readID+0x168>
        return 0x2053;
 8013ac2:	f242 0353 	movw	r3, #8275	; 0x2053
 8013ac6:	e085      	b.n	8013bd4 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8013ac8:	2004      	movs	r0, #4
 8013aca:	f7ff fb81 	bl	80131d0 <readReg32>
 8013ace:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	0c1b      	lsrs	r3, r3, #16
 8013ad4:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8013ada:	79fb      	ldrb	r3, [r7, #7]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d122      	bne.n	8013b26 <readID+0x1c6>
 8013ae0:	89fb      	ldrh	r3, [r7, #14]
 8013ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ae6:	d11e      	bne.n	8013b26 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8013ae8:	4a3c      	ldr	r2, [pc, #240]	; (8013bdc <readID+0x27c>)
 8013aea:	1d3b      	adds	r3, r7, #4
 8013aec:	6812      	ldr	r2, [r2, #0]
 8013aee:	4611      	mov	r1, r2
 8013af0:	8019      	strh	r1, [r3, #0]
 8013af2:	3302      	adds	r3, #2
 8013af4:	0c12      	lsrs	r2, r2, #16
 8013af6:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8013af8:	1d3b      	adds	r3, r7, #4
 8013afa:	2203      	movs	r2, #3
 8013afc:	4619      	mov	r1, r3
 8013afe:	20b9      	movs	r0, #185	; 0xb9
 8013b00:	f7fd ff62 	bl	80119c8 <pushCommand>
        msb = readReg(0xD0,0);
 8013b04:	2100      	movs	r1, #0
 8013b06:	20d0      	movs	r0, #208	; 0xd0
 8013b08:	f7ff fa12 	bl	8012f30 <readReg>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8013b10:	79fb      	ldrb	r3, [r7, #7]
 8013b12:	2b99      	cmp	r3, #153	; 0x99
 8013b14:	d101      	bne.n	8013b1a <readID+0x1ba>
 8013b16:	2399      	movs	r3, #153	; 0x99
 8013b18:	e05c      	b.n	8013bd4 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8013b1a:	79fb      	ldrb	r3, [r7, #7]
 8013b1c:	2b90      	cmp	r3, #144	; 0x90
 8013b1e:	d102      	bne.n	8013b26 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8013b20:	f249 0390 	movw	r3, #37008	; 0x9090
 8013b24:	e056      	b.n	8013bd4 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8013b26:	89fb      	ldrh	r3, [r7, #14]
 8013b28:	f241 5226 	movw	r2, #5414	; 0x1526
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d102      	bne.n	8013b36 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8013b30:	f241 5326 	movw	r3, #5414	; 0x1526
 8013b34:	e04e      	b.n	8013bd4 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8013b36:	89fb      	ldrh	r3, [r7, #14]
 8013b38:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	d102      	bne.n	8013b46 <readID+0x1e6>
        return 0x7735;
 8013b40:	f247 7335 	movw	r3, #30517	; 0x7735
 8013b44:	e046      	b.n	8013bd4 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8013b46:	89fb      	ldrh	r3, [r7, #14]
 8013b48:	f248 5252 	movw	r2, #34130	; 0x8552
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d102      	bne.n	8013b56 <readID+0x1f6>
        return 0x7789;
 8013b50:	f247 7389 	movw	r3, #30601	; 0x7789
 8013b54:	e03e      	b.n	8013bd4 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8013b56:	89fb      	ldrh	r3, [r7, #14]
 8013b58:	f64a 4211 	movw	r2, #44049	; 0xac11
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d102      	bne.n	8013b66 <readID+0x206>
        return 0xAC11;
 8013b60:	f64a 4311 	movw	r3, #44049	; 0xac11
 8013b64:	e036      	b.n	8013bd4 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8013b66:	20d3      	movs	r0, #211	; 0xd3
 8013b68:	f7ff fb32 	bl	80131d0 <readReg32>
 8013b6c:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	0a1b      	lsrs	r3, r3, #8
 8013b72:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8013b74:	89fb      	ldrh	r3, [r7, #14]
 8013b76:	f249 1263 	movw	r2, #37219	; 0x9163
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d101      	bne.n	8013b82 <readID+0x222>
 8013b7e:	89fb      	ldrh	r3, [r7, #14]
 8013b80:	e028      	b.n	8013bd4 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8013b82:	20d3      	movs	r0, #211	; 0xd3
 8013b84:	f7ff fb24 	bl	80131d0 <readReg32>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8013b8c:	89fb      	ldrh	r3, [r7, #14]
 8013b8e:	0a1b      	lsrs	r3, r3, #8
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8013b94:	79fb      	ldrb	r3, [r7, #7]
 8013b96:	2b93      	cmp	r3, #147	; 0x93
 8013b98:	d00b      	beq.n	8013bb2 <readID+0x252>
 8013b9a:	79fb      	ldrb	r3, [r7, #7]
 8013b9c:	2b94      	cmp	r3, #148	; 0x94
 8013b9e:	d008      	beq.n	8013bb2 <readID+0x252>
 8013ba0:	79fb      	ldrb	r3, [r7, #7]
 8013ba2:	2b98      	cmp	r3, #152	; 0x98
 8013ba4:	d005      	beq.n	8013bb2 <readID+0x252>
 8013ba6:	79fb      	ldrb	r3, [r7, #7]
 8013ba8:	2b77      	cmp	r3, #119	; 0x77
 8013baa:	d002      	beq.n	8013bb2 <readID+0x252>
 8013bac:	79fb      	ldrb	r3, [r7, #7]
 8013bae:	2b16      	cmp	r3, #22
 8013bb0:	d101      	bne.n	8013bb6 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
 8013bb4:	e00e      	b.n	8013bd4 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8013bb6:	89fb      	ldrh	r3, [r7, #14]
 8013bb8:	2bd3      	cmp	r3, #211	; 0xd3
 8013bba:	d004      	beq.n	8013bc6 <readID+0x266>
 8013bbc:	89fb      	ldrh	r3, [r7, #14]
 8013bbe:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d101      	bne.n	8013bca <readID+0x26a>
        return ret;             //16-bit write-only bus
 8013bc6:	89fb      	ldrh	r3, [r7, #14]
 8013bc8:	e004      	b.n	8013bd4 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8013bca:	2100      	movs	r1, #0
 8013bcc:	2000      	movs	r0, #0
 8013bce:	f7ff f9af 	bl	8012f30 <readReg>
 8013bd2:	4603      	mov	r3, r0
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3710      	adds	r7, #16
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	0801a8b8 	.word	0x0801a8b8

08013be0 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b08b      	sub	sp, #44	; 0x2c
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60ba      	str	r2, [r7, #8]
 8013be8:	461a      	mov	r2, r3
 8013bea:	4603      	mov	r3, r0
 8013bec:	81fb      	strh	r3, [r7, #14]
 8013bee:	460b      	mov	r3, r1
 8013bf0:	81bb      	strh	r3, [r7, #12]
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8013bf6:	4b1c      	ldr	r3, [pc, #112]	; (8013c68 <readGRAM+0x88>)
 8013bf8:	881b      	ldrh	r3, [r3, #0]
 8013bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8013bfc:	88fa      	ldrh	r2, [r7, #6]
 8013bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013c00:	fb12 f303 	smulbb	r3, r2, r3
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8013c08:	2300      	movs	r3, #0
 8013c0a:	843b      	strh	r3, [r7, #32]
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8013c10:	4b16      	ldr	r3, [pc, #88]	; (8013c6c <readGRAM+0x8c>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d107      	bne.n	8013c28 <readGRAM+0x48>
 8013c18:	4b15      	ldr	r3, [pc, #84]	; (8013c70 <readGRAM+0x90>)
 8013c1a:	881b      	ldrh	r3, [r3, #0]
 8013c1c:	f003 0301 	and.w	r3, r3, #1
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <readGRAM+0x48>
        _MR = 0x2E;
 8013c24:	232e      	movs	r3, #46	; 0x2e
 8013c26:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8013c28:	4b12      	ldr	r3, [pc, #72]	; (8013c74 <readGRAM+0x94>)
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	f241 6202 	movw	r2, #5634	; 0x1602
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d101      	bne.n	8013c38 <readGRAM+0x58>
 8013c34:	232e      	movs	r3, #46	; 0x2e
 8013c36:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8013c38:	89fa      	ldrh	r2, [r7, #14]
 8013c3a:	88fb      	ldrh	r3, [r7, #6]
 8013c3c:	4413      	add	r3, r2
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	3b01      	subs	r3, #1
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	b21c      	sxth	r4, r3
 8013c46:	89ba      	ldrh	r2, [r7, #12]
 8013c48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013c4a:	4413      	add	r3, r2
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	b21b      	sxth	r3, r3
 8013c54:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8013c58:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8013c5c:	4622      	mov	r2, r4
 8013c5e:	f002 f881 	bl	8015d64 <setAddrWindow>
    while (n > 0) {
 8013c62:	f001 bc51 	b.w	8015508 <readGRAM+0x1928>
 8013c66:	bf00      	nop
 8013c68:	2000698c 	.word	0x2000698c
 8013c6c:	20000218 	.word	0x20000218
 8013c70:	2000698e 	.word	0x2000698e
 8013c74:	2000699c 	.word	0x2000699c
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8013c78:	4bc1      	ldr	r3, [pc, #772]	; (8013f80 <readGRAM+0x3a0>)
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d111      	bne.n	8013ca8 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8013c84:	4bbf      	ldr	r3, [pc, #764]	; (8013f84 <readGRAM+0x3a4>)
 8013c86:	8818      	ldrh	r0, [r3, #0]
 8013c88:	89fa      	ldrh	r2, [r7, #14]
 8013c8a:	8bfb      	ldrh	r3, [r7, #30]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	4619      	mov	r1, r3
 8013c92:	f7fd fe87 	bl	80119a4 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8013c96:	4bbc      	ldr	r3, [pc, #752]	; (8013f88 <readGRAM+0x3a8>)
 8013c98:	8818      	ldrh	r0, [r3, #0]
 8013c9a:	89ba      	ldrh	r2, [r7, #12]
 8013c9c:	8c3b      	ldrh	r3, [r7, #32]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	f7fd fe7e 	bl	80119a4 <WriteCmdData>
        }
        CS_ACTIVE;
 8013ca8:	2108      	movs	r1, #8
 8013caa:	48b8      	ldr	r0, [pc, #736]	; (8013f8c <readGRAM+0x3ac>)
 8013cac:	f7fd fd63 	bl	8011776 <PIN_LOW>
        WriteCmd(_MR);
 8013cb0:	2120      	movs	r1, #32
 8013cb2:	48b7      	ldr	r0, [pc, #732]	; (8013f90 <readGRAM+0x3b0>)
 8013cb4:	f7fd fd5f 	bl	8011776 <PIN_LOW>
 8013cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cba:	0a1b      	lsrs	r3, r3, #8
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	777b      	strb	r3, [r7, #29]
 8013cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cc2:	773b      	strb	r3, [r7, #28]
 8013cc4:	4bb2      	ldr	r3, [pc, #712]	; (8013f90 <readGRAM+0x3b0>)
 8013cc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013cca:	619a      	str	r2, [r3, #24]
 8013ccc:	4bb1      	ldr	r3, [pc, #708]	; (8013f94 <readGRAM+0x3b4>)
 8013cce:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8013cd2:	619a      	str	r2, [r3, #24]
 8013cd4:	4bad      	ldr	r3, [pc, #692]	; (8013f8c <readGRAM+0x3ac>)
 8013cd6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013cda:	619a      	str	r2, [r3, #24]
 8013cdc:	7f7b      	ldrb	r3, [r7, #29]
 8013cde:	039b      	lsls	r3, r3, #14
 8013ce0:	4aab      	ldr	r2, [pc, #684]	; (8013f90 <readGRAM+0x3b0>)
 8013ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ce6:	6193      	str	r3, [r2, #24]
 8013ce8:	7f7b      	ldrb	r3, [r7, #29]
 8013cea:	029b      	lsls	r3, r3, #10
 8013cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013cf0:	7f7b      	ldrb	r3, [r7, #29]
 8013cf2:	019b      	lsls	r3, r3, #6
 8013cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013cf8:	431a      	orrs	r2, r3
 8013cfa:	7f7b      	ldrb	r3, [r7, #29]
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d02:	431a      	orrs	r2, r3
 8013d04:	4ba3      	ldr	r3, [pc, #652]	; (8013f94 <readGRAM+0x3b4>)
 8013d06:	619a      	str	r2, [r3, #24]
 8013d08:	7f7b      	ldrb	r3, [r7, #29]
 8013d0a:	031b      	lsls	r3, r3, #12
 8013d0c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013d10:	7f7b      	ldrb	r3, [r7, #29]
 8013d12:	035b      	lsls	r3, r3, #13
 8013d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d18:	431a      	orrs	r2, r3
 8013d1a:	7f7b      	ldrb	r3, [r7, #29]
 8013d1c:	029b      	lsls	r3, r3, #10
 8013d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013d22:	431a      	orrs	r2, r3
 8013d24:	7f7b      	ldrb	r3, [r7, #29]
 8013d26:	019b      	lsls	r3, r3, #6
 8013d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d2c:	431a      	orrs	r2, r3
 8013d2e:	4b97      	ldr	r3, [pc, #604]	; (8013f8c <readGRAM+0x3ac>)
 8013d30:	619a      	str	r2, [r3, #24]
 8013d32:	2101      	movs	r1, #1
 8013d34:	4898      	ldr	r0, [pc, #608]	; (8013f98 <readGRAM+0x3b8>)
 8013d36:	f7fd fd1e 	bl	8011776 <PIN_LOW>
 8013d3a:	2101      	movs	r1, #1
 8013d3c:	4896      	ldr	r0, [pc, #600]	; (8013f98 <readGRAM+0x3b8>)
 8013d3e:	f7fd fd1a 	bl	8011776 <PIN_LOW>
 8013d42:	2101      	movs	r1, #1
 8013d44:	4894      	ldr	r0, [pc, #592]	; (8013f98 <readGRAM+0x3b8>)
 8013d46:	f7fd fd16 	bl	8011776 <PIN_LOW>
 8013d4a:	2101      	movs	r1, #1
 8013d4c:	4892      	ldr	r0, [pc, #584]	; (8013f98 <readGRAM+0x3b8>)
 8013d4e:	f7fd fd12 	bl	8011776 <PIN_LOW>
 8013d52:	2101      	movs	r1, #1
 8013d54:	4890      	ldr	r0, [pc, #576]	; (8013f98 <readGRAM+0x3b8>)
 8013d56:	f7fd fd0e 	bl	8011776 <PIN_LOW>
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	488e      	ldr	r0, [pc, #568]	; (8013f98 <readGRAM+0x3b8>)
 8013d5e:	f7fd fd0a 	bl	8011776 <PIN_LOW>
 8013d62:	2101      	movs	r1, #1
 8013d64:	488c      	ldr	r0, [pc, #560]	; (8013f98 <readGRAM+0x3b8>)
 8013d66:	f7fd fd06 	bl	8011776 <PIN_LOW>
 8013d6a:	2101      	movs	r1, #1
 8013d6c:	488a      	ldr	r0, [pc, #552]	; (8013f98 <readGRAM+0x3b8>)
 8013d6e:	f7fd fd02 	bl	8011776 <PIN_LOW>
 8013d72:	2101      	movs	r1, #1
 8013d74:	4888      	ldr	r0, [pc, #544]	; (8013f98 <readGRAM+0x3b8>)
 8013d76:	f7fd fcfe 	bl	8011776 <PIN_LOW>
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	4886      	ldr	r0, [pc, #536]	; (8013f98 <readGRAM+0x3b8>)
 8013d7e:	f7fd fcfa 	bl	8011776 <PIN_LOW>
 8013d82:	2101      	movs	r1, #1
 8013d84:	4884      	ldr	r0, [pc, #528]	; (8013f98 <readGRAM+0x3b8>)
 8013d86:	f7fd fcf6 	bl	8011776 <PIN_LOW>
 8013d8a:	2101      	movs	r1, #1
 8013d8c:	4882      	ldr	r0, [pc, #520]	; (8013f98 <readGRAM+0x3b8>)
 8013d8e:	f7fd fcf2 	bl	8011776 <PIN_LOW>
 8013d92:	2101      	movs	r1, #1
 8013d94:	4880      	ldr	r0, [pc, #512]	; (8013f98 <readGRAM+0x3b8>)
 8013d96:	f7fd fcee 	bl	8011776 <PIN_LOW>
 8013d9a:	2101      	movs	r1, #1
 8013d9c:	487e      	ldr	r0, [pc, #504]	; (8013f98 <readGRAM+0x3b8>)
 8013d9e:	f7fd fcea 	bl	8011776 <PIN_LOW>
 8013da2:	2101      	movs	r1, #1
 8013da4:	487c      	ldr	r0, [pc, #496]	; (8013f98 <readGRAM+0x3b8>)
 8013da6:	f7fd fce6 	bl	8011776 <PIN_LOW>
 8013daa:	2101      	movs	r1, #1
 8013dac:	487a      	ldr	r0, [pc, #488]	; (8013f98 <readGRAM+0x3b8>)
 8013dae:	f7fd fce2 	bl	8011776 <PIN_LOW>
 8013db2:	2101      	movs	r1, #1
 8013db4:	4878      	ldr	r0, [pc, #480]	; (8013f98 <readGRAM+0x3b8>)
 8013db6:	f7fd fcde 	bl	8011776 <PIN_LOW>
 8013dba:	2101      	movs	r1, #1
 8013dbc:	4876      	ldr	r0, [pc, #472]	; (8013f98 <readGRAM+0x3b8>)
 8013dbe:	f7fd fcea 	bl	8011796 <PIN_HIGH>
 8013dc2:	2101      	movs	r1, #1
 8013dc4:	4874      	ldr	r0, [pc, #464]	; (8013f98 <readGRAM+0x3b8>)
 8013dc6:	f7fd fce6 	bl	8011796 <PIN_HIGH>
 8013dca:	4b71      	ldr	r3, [pc, #452]	; (8013f90 <readGRAM+0x3b0>)
 8013dcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013dd0:	619a      	str	r2, [r3, #24]
 8013dd2:	4b70      	ldr	r3, [pc, #448]	; (8013f94 <readGRAM+0x3b4>)
 8013dd4:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8013dd8:	619a      	str	r2, [r3, #24]
 8013dda:	4b6c      	ldr	r3, [pc, #432]	; (8013f8c <readGRAM+0x3ac>)
 8013ddc:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8013de0:	619a      	str	r2, [r3, #24]
 8013de2:	7f3b      	ldrb	r3, [r7, #28]
 8013de4:	039b      	lsls	r3, r3, #14
 8013de6:	4a6a      	ldr	r2, [pc, #424]	; (8013f90 <readGRAM+0x3b0>)
 8013de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013dec:	6193      	str	r3, [r2, #24]
 8013dee:	7f3b      	ldrb	r3, [r7, #28]
 8013df0:	029b      	lsls	r3, r3, #10
 8013df2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013df6:	7f3b      	ldrb	r3, [r7, #28]
 8013df8:	019b      	lsls	r3, r3, #6
 8013dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013dfe:	431a      	orrs	r2, r3
 8013e00:	7f3b      	ldrb	r3, [r7, #28]
 8013e02:	00db      	lsls	r3, r3, #3
 8013e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013e08:	431a      	orrs	r2, r3
 8013e0a:	4b62      	ldr	r3, [pc, #392]	; (8013f94 <readGRAM+0x3b4>)
 8013e0c:	619a      	str	r2, [r3, #24]
 8013e0e:	7f3b      	ldrb	r3, [r7, #28]
 8013e10:	031b      	lsls	r3, r3, #12
 8013e12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013e16:	7f3b      	ldrb	r3, [r7, #28]
 8013e18:	035b      	lsls	r3, r3, #13
 8013e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e1e:	431a      	orrs	r2, r3
 8013e20:	7f3b      	ldrb	r3, [r7, #28]
 8013e22:	029b      	lsls	r3, r3, #10
 8013e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e28:	431a      	orrs	r2, r3
 8013e2a:	7f3b      	ldrb	r3, [r7, #28]
 8013e2c:	019b      	lsls	r3, r3, #6
 8013e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e32:	431a      	orrs	r2, r3
 8013e34:	4b55      	ldr	r3, [pc, #340]	; (8013f8c <readGRAM+0x3ac>)
 8013e36:	619a      	str	r2, [r3, #24]
 8013e38:	2101      	movs	r1, #1
 8013e3a:	4857      	ldr	r0, [pc, #348]	; (8013f98 <readGRAM+0x3b8>)
 8013e3c:	f7fd fc9b 	bl	8011776 <PIN_LOW>
 8013e40:	2101      	movs	r1, #1
 8013e42:	4855      	ldr	r0, [pc, #340]	; (8013f98 <readGRAM+0x3b8>)
 8013e44:	f7fd fc97 	bl	8011776 <PIN_LOW>
 8013e48:	2101      	movs	r1, #1
 8013e4a:	4853      	ldr	r0, [pc, #332]	; (8013f98 <readGRAM+0x3b8>)
 8013e4c:	f7fd fc93 	bl	8011776 <PIN_LOW>
 8013e50:	2101      	movs	r1, #1
 8013e52:	4851      	ldr	r0, [pc, #324]	; (8013f98 <readGRAM+0x3b8>)
 8013e54:	f7fd fc8f 	bl	8011776 <PIN_LOW>
 8013e58:	2101      	movs	r1, #1
 8013e5a:	484f      	ldr	r0, [pc, #316]	; (8013f98 <readGRAM+0x3b8>)
 8013e5c:	f7fd fc8b 	bl	8011776 <PIN_LOW>
 8013e60:	2101      	movs	r1, #1
 8013e62:	484d      	ldr	r0, [pc, #308]	; (8013f98 <readGRAM+0x3b8>)
 8013e64:	f7fd fc87 	bl	8011776 <PIN_LOW>
 8013e68:	2101      	movs	r1, #1
 8013e6a:	484b      	ldr	r0, [pc, #300]	; (8013f98 <readGRAM+0x3b8>)
 8013e6c:	f7fd fc83 	bl	8011776 <PIN_LOW>
 8013e70:	2101      	movs	r1, #1
 8013e72:	4849      	ldr	r0, [pc, #292]	; (8013f98 <readGRAM+0x3b8>)
 8013e74:	f7fd fc7f 	bl	8011776 <PIN_LOW>
 8013e78:	2101      	movs	r1, #1
 8013e7a:	4847      	ldr	r0, [pc, #284]	; (8013f98 <readGRAM+0x3b8>)
 8013e7c:	f7fd fc7b 	bl	8011776 <PIN_LOW>
 8013e80:	2101      	movs	r1, #1
 8013e82:	4845      	ldr	r0, [pc, #276]	; (8013f98 <readGRAM+0x3b8>)
 8013e84:	f7fd fc77 	bl	8011776 <PIN_LOW>
 8013e88:	2101      	movs	r1, #1
 8013e8a:	4843      	ldr	r0, [pc, #268]	; (8013f98 <readGRAM+0x3b8>)
 8013e8c:	f7fd fc73 	bl	8011776 <PIN_LOW>
 8013e90:	2101      	movs	r1, #1
 8013e92:	4841      	ldr	r0, [pc, #260]	; (8013f98 <readGRAM+0x3b8>)
 8013e94:	f7fd fc6f 	bl	8011776 <PIN_LOW>
 8013e98:	2101      	movs	r1, #1
 8013e9a:	483f      	ldr	r0, [pc, #252]	; (8013f98 <readGRAM+0x3b8>)
 8013e9c:	f7fd fc6b 	bl	8011776 <PIN_LOW>
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	483d      	ldr	r0, [pc, #244]	; (8013f98 <readGRAM+0x3b8>)
 8013ea4:	f7fd fc67 	bl	8011776 <PIN_LOW>
 8013ea8:	2101      	movs	r1, #1
 8013eaa:	483b      	ldr	r0, [pc, #236]	; (8013f98 <readGRAM+0x3b8>)
 8013eac:	f7fd fc63 	bl	8011776 <PIN_LOW>
 8013eb0:	2101      	movs	r1, #1
 8013eb2:	4839      	ldr	r0, [pc, #228]	; (8013f98 <readGRAM+0x3b8>)
 8013eb4:	f7fd fc5f 	bl	8011776 <PIN_LOW>
 8013eb8:	2101      	movs	r1, #1
 8013eba:	4837      	ldr	r0, [pc, #220]	; (8013f98 <readGRAM+0x3b8>)
 8013ebc:	f7fd fc5b 	bl	8011776 <PIN_LOW>
 8013ec0:	2101      	movs	r1, #1
 8013ec2:	4835      	ldr	r0, [pc, #212]	; (8013f98 <readGRAM+0x3b8>)
 8013ec4:	f7fd fc67 	bl	8011796 <PIN_HIGH>
 8013ec8:	2101      	movs	r1, #1
 8013eca:	4833      	ldr	r0, [pc, #204]	; (8013f98 <readGRAM+0x3b8>)
 8013ecc:	f7fd fc63 	bl	8011796 <PIN_HIGH>
 8013ed0:	2120      	movs	r1, #32
 8013ed2:	482f      	ldr	r0, [pc, #188]	; (8013f90 <readGRAM+0x3b0>)
 8013ed4:	f7fd fc5f 	bl	8011796 <PIN_HIGH>
        setReadDir();
 8013ed8:	f7fd fd8a 	bl	80119f0 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8013edc:	4b28      	ldr	r3, [pc, #160]	; (8013f80 <readGRAM+0x3a0>)
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f040 838e 	bne.w	8014606 <readGRAM+0xa26>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8013eea:	4b25      	ldr	r3, [pc, #148]	; (8013f80 <readGRAM+0x3a0>)
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	f003 0301 	and.w	r3, r3, #1
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d106      	bne.n	8013f04 <readGRAM+0x324>
 8013ef6:	4b29      	ldr	r3, [pc, #164]	; (8013f9c <readGRAM+0x3bc>)
 8013ef8:	881b      	ldrh	r3, [r3, #0]
 8013efa:	f241 2289 	movw	r2, #4745	; 0x1289
 8013efe:	4293      	cmp	r3, r2
 8013f00:	f040 8136 	bne.w	8014170 <readGRAM+0x590>
            READ_8(r);
 8013f04:	2180      	movs	r1, #128	; 0x80
 8013f06:	4822      	ldr	r0, [pc, #136]	; (8013f90 <readGRAM+0x3b0>)
 8013f08:	f7fd fc45 	bl	8011796 <PIN_HIGH>
 8013f0c:	2180      	movs	r1, #128	; 0x80
 8013f0e:	4820      	ldr	r0, [pc, #128]	; (8013f90 <readGRAM+0x3b0>)
 8013f10:	f7fd fc31 	bl	8011776 <PIN_LOW>
 8013f14:	2180      	movs	r1, #128	; 0x80
 8013f16:	481e      	ldr	r0, [pc, #120]	; (8013f90 <readGRAM+0x3b0>)
 8013f18:	f7fd fc2d 	bl	8011776 <PIN_LOW>
 8013f1c:	2180      	movs	r1, #128	; 0x80
 8013f1e:	481c      	ldr	r0, [pc, #112]	; (8013f90 <readGRAM+0x3b0>)
 8013f20:	f7fd fc29 	bl	8011776 <PIN_LOW>
 8013f24:	2180      	movs	r1, #128	; 0x80
 8013f26:	481a      	ldr	r0, [pc, #104]	; (8013f90 <readGRAM+0x3b0>)
 8013f28:	f7fd fc25 	bl	8011776 <PIN_LOW>
 8013f2c:	2180      	movs	r1, #128	; 0x80
 8013f2e:	4818      	ldr	r0, [pc, #96]	; (8013f90 <readGRAM+0x3b0>)
 8013f30:	f7fd fc21 	bl	8011776 <PIN_LOW>
 8013f34:	2180      	movs	r1, #128	; 0x80
 8013f36:	4816      	ldr	r0, [pc, #88]	; (8013f90 <readGRAM+0x3b0>)
 8013f38:	f7fd fc1d 	bl	8011776 <PIN_LOW>
 8013f3c:	2180      	movs	r1, #128	; 0x80
 8013f3e:	4814      	ldr	r0, [pc, #80]	; (8013f90 <readGRAM+0x3b0>)
 8013f40:	f7fd fc19 	bl	8011776 <PIN_LOW>
 8013f44:	2180      	movs	r1, #128	; 0x80
 8013f46:	4812      	ldr	r0, [pc, #72]	; (8013f90 <readGRAM+0x3b0>)
 8013f48:	f7fd fc15 	bl	8011776 <PIN_LOW>
 8013f4c:	2180      	movs	r1, #128	; 0x80
 8013f4e:	4810      	ldr	r0, [pc, #64]	; (8013f90 <readGRAM+0x3b0>)
 8013f50:	f7fd fc11 	bl	8011776 <PIN_LOW>
 8013f54:	2180      	movs	r1, #128	; 0x80
 8013f56:	480e      	ldr	r0, [pc, #56]	; (8013f90 <readGRAM+0x3b0>)
 8013f58:	f7fd fc0d 	bl	8011776 <PIN_LOW>
 8013f5c:	2180      	movs	r1, #128	; 0x80
 8013f5e:	480c      	ldr	r0, [pc, #48]	; (8013f90 <readGRAM+0x3b0>)
 8013f60:	f7fd fc09 	bl	8011776 <PIN_LOW>
 8013f64:	2180      	movs	r1, #128	; 0x80
 8013f66:	480a      	ldr	r0, [pc, #40]	; (8013f90 <readGRAM+0x3b0>)
 8013f68:	f7fd fc05 	bl	8011776 <PIN_LOW>
 8013f6c:	2180      	movs	r1, #128	; 0x80
 8013f6e:	4808      	ldr	r0, [pc, #32]	; (8013f90 <readGRAM+0x3b0>)
 8013f70:	f7fd fc01 	bl	8011776 <PIN_LOW>
 8013f74:	2180      	movs	r1, #128	; 0x80
 8013f76:	4806      	ldr	r0, [pc, #24]	; (8013f90 <readGRAM+0x3b0>)
 8013f78:	f7fd fbfd 	bl	8011776 <PIN_LOW>
 8013f7c:	2180      	movs	r1, #128	; 0x80
 8013f7e:	e00f      	b.n	8013fa0 <readGRAM+0x3c0>
 8013f80:	2000698e 	.word	0x2000698e
 8013f84:	20006996 	.word	0x20006996
 8013f88:	20006994 	.word	0x20006994
 8013f8c:	40021400 	.word	0x40021400
 8013f90:	40020c00 	.word	0x40020c00
 8013f94:	40021000 	.word	0x40021000
 8013f98:	40020800 	.word	0x40020800
 8013f9c:	2000699c 	.word	0x2000699c
 8013fa0:	4870      	ldr	r0, [pc, #448]	; (8014164 <readGRAM+0x584>)
 8013fa2:	f7fd fbe8 	bl	8011776 <PIN_LOW>
 8013fa6:	2180      	movs	r1, #128	; 0x80
 8013fa8:	486e      	ldr	r0, [pc, #440]	; (8014164 <readGRAM+0x584>)
 8013faa:	f7fd fbe4 	bl	8011776 <PIN_LOW>
 8013fae:	2180      	movs	r1, #128	; 0x80
 8013fb0:	486c      	ldr	r0, [pc, #432]	; (8014164 <readGRAM+0x584>)
 8013fb2:	f7fd fbe0 	bl	8011776 <PIN_LOW>
 8013fb6:	2180      	movs	r1, #128	; 0x80
 8013fb8:	486a      	ldr	r0, [pc, #424]	; (8014164 <readGRAM+0x584>)
 8013fba:	f7fd fbdc 	bl	8011776 <PIN_LOW>
 8013fbe:	2180      	movs	r1, #128	; 0x80
 8013fc0:	4868      	ldr	r0, [pc, #416]	; (8014164 <readGRAM+0x584>)
 8013fc2:	f7fd fbd8 	bl	8011776 <PIN_LOW>
 8013fc6:	2180      	movs	r1, #128	; 0x80
 8013fc8:	4866      	ldr	r0, [pc, #408]	; (8014164 <readGRAM+0x584>)
 8013fca:	f7fd fbd4 	bl	8011776 <PIN_LOW>
 8013fce:	2180      	movs	r1, #128	; 0x80
 8013fd0:	4864      	ldr	r0, [pc, #400]	; (8014164 <readGRAM+0x584>)
 8013fd2:	f7fd fbd0 	bl	8011776 <PIN_LOW>
 8013fd6:	2180      	movs	r1, #128	; 0x80
 8013fd8:	4862      	ldr	r0, [pc, #392]	; (8014164 <readGRAM+0x584>)
 8013fda:	f7fd fbcc 	bl	8011776 <PIN_LOW>
 8013fde:	2180      	movs	r1, #128	; 0x80
 8013fe0:	4860      	ldr	r0, [pc, #384]	; (8014164 <readGRAM+0x584>)
 8013fe2:	f7fd fbc8 	bl	8011776 <PIN_LOW>
 8013fe6:	2180      	movs	r1, #128	; 0x80
 8013fe8:	485e      	ldr	r0, [pc, #376]	; (8014164 <readGRAM+0x584>)
 8013fea:	f7fd fbc4 	bl	8011776 <PIN_LOW>
 8013fee:	2180      	movs	r1, #128	; 0x80
 8013ff0:	485c      	ldr	r0, [pc, #368]	; (8014164 <readGRAM+0x584>)
 8013ff2:	f7fd fbc0 	bl	8011776 <PIN_LOW>
 8013ff6:	2180      	movs	r1, #128	; 0x80
 8013ff8:	485a      	ldr	r0, [pc, #360]	; (8014164 <readGRAM+0x584>)
 8013ffa:	f7fd fbbc 	bl	8011776 <PIN_LOW>
 8013ffe:	2180      	movs	r1, #128	; 0x80
 8014000:	4858      	ldr	r0, [pc, #352]	; (8014164 <readGRAM+0x584>)
 8014002:	f7fd fbb8 	bl	8011776 <PIN_LOW>
 8014006:	2180      	movs	r1, #128	; 0x80
 8014008:	4856      	ldr	r0, [pc, #344]	; (8014164 <readGRAM+0x584>)
 801400a:	f7fd fbb4 	bl	8011776 <PIN_LOW>
 801400e:	2180      	movs	r1, #128	; 0x80
 8014010:	4854      	ldr	r0, [pc, #336]	; (8014164 <readGRAM+0x584>)
 8014012:	f7fd fbb0 	bl	8011776 <PIN_LOW>
 8014016:	2180      	movs	r1, #128	; 0x80
 8014018:	4852      	ldr	r0, [pc, #328]	; (8014164 <readGRAM+0x584>)
 801401a:	f7fd fbac 	bl	8011776 <PIN_LOW>
 801401e:	2180      	movs	r1, #128	; 0x80
 8014020:	4850      	ldr	r0, [pc, #320]	; (8014164 <readGRAM+0x584>)
 8014022:	f7fd fba8 	bl	8011776 <PIN_LOW>
 8014026:	2180      	movs	r1, #128	; 0x80
 8014028:	484e      	ldr	r0, [pc, #312]	; (8014164 <readGRAM+0x584>)
 801402a:	f7fd fba4 	bl	8011776 <PIN_LOW>
 801402e:	2180      	movs	r1, #128	; 0x80
 8014030:	484c      	ldr	r0, [pc, #304]	; (8014164 <readGRAM+0x584>)
 8014032:	f7fd fba0 	bl	8011776 <PIN_LOW>
 8014036:	2180      	movs	r1, #128	; 0x80
 8014038:	484a      	ldr	r0, [pc, #296]	; (8014164 <readGRAM+0x584>)
 801403a:	f7fd fb9c 	bl	8011776 <PIN_LOW>
 801403e:	2180      	movs	r1, #128	; 0x80
 8014040:	4848      	ldr	r0, [pc, #288]	; (8014164 <readGRAM+0x584>)
 8014042:	f7fd fb98 	bl	8011776 <PIN_LOW>
 8014046:	2180      	movs	r1, #128	; 0x80
 8014048:	4846      	ldr	r0, [pc, #280]	; (8014164 <readGRAM+0x584>)
 801404a:	f7fd fb94 	bl	8011776 <PIN_LOW>
 801404e:	2180      	movs	r1, #128	; 0x80
 8014050:	4844      	ldr	r0, [pc, #272]	; (8014164 <readGRAM+0x584>)
 8014052:	f7fd fb90 	bl	8011776 <PIN_LOW>
 8014056:	2180      	movs	r1, #128	; 0x80
 8014058:	4842      	ldr	r0, [pc, #264]	; (8014164 <readGRAM+0x584>)
 801405a:	f7fd fb8c 	bl	8011776 <PIN_LOW>
 801405e:	2180      	movs	r1, #128	; 0x80
 8014060:	4840      	ldr	r0, [pc, #256]	; (8014164 <readGRAM+0x584>)
 8014062:	f7fd fb88 	bl	8011776 <PIN_LOW>
 8014066:	2180      	movs	r1, #128	; 0x80
 8014068:	483e      	ldr	r0, [pc, #248]	; (8014164 <readGRAM+0x584>)
 801406a:	f7fd fb84 	bl	8011776 <PIN_LOW>
 801406e:	2180      	movs	r1, #128	; 0x80
 8014070:	483c      	ldr	r0, [pc, #240]	; (8014164 <readGRAM+0x584>)
 8014072:	f7fd fb80 	bl	8011776 <PIN_LOW>
 8014076:	2180      	movs	r1, #128	; 0x80
 8014078:	483a      	ldr	r0, [pc, #232]	; (8014164 <readGRAM+0x584>)
 801407a:	f7fd fb7c 	bl	8011776 <PIN_LOW>
 801407e:	2180      	movs	r1, #128	; 0x80
 8014080:	4838      	ldr	r0, [pc, #224]	; (8014164 <readGRAM+0x584>)
 8014082:	f7fd fb78 	bl	8011776 <PIN_LOW>
 8014086:	2180      	movs	r1, #128	; 0x80
 8014088:	4836      	ldr	r0, [pc, #216]	; (8014164 <readGRAM+0x584>)
 801408a:	f7fd fb74 	bl	8011776 <PIN_LOW>
 801408e:	2180      	movs	r1, #128	; 0x80
 8014090:	4834      	ldr	r0, [pc, #208]	; (8014164 <readGRAM+0x584>)
 8014092:	f7fd fb70 	bl	8011776 <PIN_LOW>
 8014096:	2180      	movs	r1, #128	; 0x80
 8014098:	4832      	ldr	r0, [pc, #200]	; (8014164 <readGRAM+0x584>)
 801409a:	f7fd fb6c 	bl	8011776 <PIN_LOW>
 801409e:	2180      	movs	r1, #128	; 0x80
 80140a0:	4830      	ldr	r0, [pc, #192]	; (8014164 <readGRAM+0x584>)
 80140a2:	f7fd fb68 	bl	8011776 <PIN_LOW>
 80140a6:	2180      	movs	r1, #128	; 0x80
 80140a8:	482e      	ldr	r0, [pc, #184]	; (8014164 <readGRAM+0x584>)
 80140aa:	f7fd fb64 	bl	8011776 <PIN_LOW>
 80140ae:	2180      	movs	r1, #128	; 0x80
 80140b0:	482c      	ldr	r0, [pc, #176]	; (8014164 <readGRAM+0x584>)
 80140b2:	f7fd fb60 	bl	8011776 <PIN_LOW>
 80140b6:	2180      	movs	r1, #128	; 0x80
 80140b8:	482a      	ldr	r0, [pc, #168]	; (8014164 <readGRAM+0x584>)
 80140ba:	f7fd fb5c 	bl	8011776 <PIN_LOW>
 80140be:	2180      	movs	r1, #128	; 0x80
 80140c0:	4828      	ldr	r0, [pc, #160]	; (8014164 <readGRAM+0x584>)
 80140c2:	f7fd fb58 	bl	8011776 <PIN_LOW>
 80140c6:	4b28      	ldr	r3, [pc, #160]	; (8014168 <readGRAM+0x588>)
 80140c8:	691b      	ldr	r3, [r3, #16]
 80140ca:	0b1b      	lsrs	r3, r3, #12
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	f003 0301 	and.w	r3, r3, #1
 80140d2:	b2da      	uxtb	r2, r3
 80140d4:	4b23      	ldr	r3, [pc, #140]	; (8014164 <readGRAM+0x584>)
 80140d6:	691b      	ldr	r3, [r3, #16]
 80140d8:	0b9b      	lsrs	r3, r3, #14
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	f003 0302 	and.w	r3, r3, #2
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	4313      	orrs	r3, r2
 80140e4:	b2da      	uxtb	r2, r3
 80140e6:	4b20      	ldr	r3, [pc, #128]	; (8014168 <readGRAM+0x588>)
 80140e8:	691b      	ldr	r3, [r3, #16]
 80140ea:	0b5b      	lsrs	r3, r3, #13
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	f003 0304 	and.w	r3, r3, #4
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	4313      	orrs	r3, r2
 80140f6:	b2da      	uxtb	r2, r3
 80140f8:	4b1c      	ldr	r3, [pc, #112]	; (801416c <readGRAM+0x58c>)
 80140fa:	691b      	ldr	r3, [r3, #16]
 80140fc:	0a9b      	lsrs	r3, r3, #10
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	f003 0308 	and.w	r3, r3, #8
 8014104:	b2db      	uxtb	r3, r3
 8014106:	4313      	orrs	r3, r2
 8014108:	b2da      	uxtb	r2, r3
 801410a:	4b17      	ldr	r3, [pc, #92]	; (8014168 <readGRAM+0x588>)
 801410c:	691b      	ldr	r3, [r3, #16]
 801410e:	0a9b      	lsrs	r3, r3, #10
 8014110:	b2db      	uxtb	r3, r3
 8014112:	f003 0310 	and.w	r3, r3, #16
 8014116:	b2db      	uxtb	r3, r3
 8014118:	4313      	orrs	r3, r2
 801411a:	b2da      	uxtb	r2, r3
 801411c:	4b13      	ldr	r3, [pc, #76]	; (801416c <readGRAM+0x58c>)
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	099b      	lsrs	r3, r3, #6
 8014122:	b2db      	uxtb	r3, r3
 8014124:	f003 0320 	and.w	r3, r3, #32
 8014128:	b2db      	uxtb	r3, r3
 801412a:	4313      	orrs	r3, r2
 801412c:	b2da      	uxtb	r2, r3
 801412e:	4b0f      	ldr	r3, [pc, #60]	; (801416c <readGRAM+0x58c>)
 8014130:	691b      	ldr	r3, [r3, #16]
 8014132:	08db      	lsrs	r3, r3, #3
 8014134:	b2db      	uxtb	r3, r3
 8014136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801413a:	b2db      	uxtb	r3, r3
 801413c:	4313      	orrs	r3, r2
 801413e:	b2da      	uxtb	r2, r3
 8014140:	4b09      	ldr	r3, [pc, #36]	; (8014168 <readGRAM+0x588>)
 8014142:	691b      	ldr	r3, [r3, #16]
 8014144:	099b      	lsrs	r3, r3, #6
 8014146:	b2db      	uxtb	r3, r3
 8014148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801414c:	b2db      	uxtb	r3, r3
 801414e:	4313      	orrs	r3, r2
 8014150:	75fb      	strb	r3, [r7, #23]
 8014152:	2180      	movs	r1, #128	; 0x80
 8014154:	4803      	ldr	r0, [pc, #12]	; (8014164 <readGRAM+0x584>)
 8014156:	f7fd fb1e 	bl	8011796 <PIN_HIGH>
 801415a:	2180      	movs	r1, #128	; 0x80
 801415c:	4801      	ldr	r0, [pc, #4]	; (8014164 <readGRAM+0x584>)
 801415e:	f7fd fb1a 	bl	8011796 <PIN_HIGH>
 8014162:	e250      	b.n	8014606 <readGRAM+0xa26>
 8014164:	40020c00 	.word	0x40020c00
 8014168:	40021400 	.word	0x40021400
 801416c:	40021000 	.word	0x40021000
        } else {
            READ_16(dummy);
 8014170:	2180      	movs	r1, #128	; 0x80
 8014172:	48c3      	ldr	r0, [pc, #780]	; (8014480 <readGRAM+0x8a0>)
 8014174:	f7fd fb0f 	bl	8011796 <PIN_HIGH>
 8014178:	2180      	movs	r1, #128	; 0x80
 801417a:	48c1      	ldr	r0, [pc, #772]	; (8014480 <readGRAM+0x8a0>)
 801417c:	f7fd fafb 	bl	8011776 <PIN_LOW>
 8014180:	2180      	movs	r1, #128	; 0x80
 8014182:	48bf      	ldr	r0, [pc, #764]	; (8014480 <readGRAM+0x8a0>)
 8014184:	f7fd faf7 	bl	8011776 <PIN_LOW>
 8014188:	2180      	movs	r1, #128	; 0x80
 801418a:	48bd      	ldr	r0, [pc, #756]	; (8014480 <readGRAM+0x8a0>)
 801418c:	f7fd faf3 	bl	8011776 <PIN_LOW>
 8014190:	2180      	movs	r1, #128	; 0x80
 8014192:	48bb      	ldr	r0, [pc, #748]	; (8014480 <readGRAM+0x8a0>)
 8014194:	f7fd faef 	bl	8011776 <PIN_LOW>
 8014198:	2180      	movs	r1, #128	; 0x80
 801419a:	48b9      	ldr	r0, [pc, #740]	; (8014480 <readGRAM+0x8a0>)
 801419c:	f7fd faeb 	bl	8011776 <PIN_LOW>
 80141a0:	2180      	movs	r1, #128	; 0x80
 80141a2:	48b7      	ldr	r0, [pc, #732]	; (8014480 <readGRAM+0x8a0>)
 80141a4:	f7fd fae7 	bl	8011776 <PIN_LOW>
 80141a8:	2180      	movs	r1, #128	; 0x80
 80141aa:	48b5      	ldr	r0, [pc, #724]	; (8014480 <readGRAM+0x8a0>)
 80141ac:	f7fd fae3 	bl	8011776 <PIN_LOW>
 80141b0:	2180      	movs	r1, #128	; 0x80
 80141b2:	48b3      	ldr	r0, [pc, #716]	; (8014480 <readGRAM+0x8a0>)
 80141b4:	f7fd fadf 	bl	8011776 <PIN_LOW>
 80141b8:	2180      	movs	r1, #128	; 0x80
 80141ba:	48b1      	ldr	r0, [pc, #708]	; (8014480 <readGRAM+0x8a0>)
 80141bc:	f7fd fadb 	bl	8011776 <PIN_LOW>
 80141c0:	2180      	movs	r1, #128	; 0x80
 80141c2:	48af      	ldr	r0, [pc, #700]	; (8014480 <readGRAM+0x8a0>)
 80141c4:	f7fd fad7 	bl	8011776 <PIN_LOW>
 80141c8:	2180      	movs	r1, #128	; 0x80
 80141ca:	48ad      	ldr	r0, [pc, #692]	; (8014480 <readGRAM+0x8a0>)
 80141cc:	f7fd fad3 	bl	8011776 <PIN_LOW>
 80141d0:	2180      	movs	r1, #128	; 0x80
 80141d2:	48ab      	ldr	r0, [pc, #684]	; (8014480 <readGRAM+0x8a0>)
 80141d4:	f7fd facf 	bl	8011776 <PIN_LOW>
 80141d8:	2180      	movs	r1, #128	; 0x80
 80141da:	48a9      	ldr	r0, [pc, #676]	; (8014480 <readGRAM+0x8a0>)
 80141dc:	f7fd facb 	bl	8011776 <PIN_LOW>
 80141e0:	2180      	movs	r1, #128	; 0x80
 80141e2:	48a7      	ldr	r0, [pc, #668]	; (8014480 <readGRAM+0x8a0>)
 80141e4:	f7fd fac7 	bl	8011776 <PIN_LOW>
 80141e8:	2180      	movs	r1, #128	; 0x80
 80141ea:	48a5      	ldr	r0, [pc, #660]	; (8014480 <readGRAM+0x8a0>)
 80141ec:	f7fd fac3 	bl	8011776 <PIN_LOW>
 80141f0:	2180      	movs	r1, #128	; 0x80
 80141f2:	48a3      	ldr	r0, [pc, #652]	; (8014480 <readGRAM+0x8a0>)
 80141f4:	f7fd fabf 	bl	8011776 <PIN_LOW>
 80141f8:	2180      	movs	r1, #128	; 0x80
 80141fa:	48a1      	ldr	r0, [pc, #644]	; (8014480 <readGRAM+0x8a0>)
 80141fc:	f7fd fabb 	bl	8011776 <PIN_LOW>
 8014200:	2180      	movs	r1, #128	; 0x80
 8014202:	489f      	ldr	r0, [pc, #636]	; (8014480 <readGRAM+0x8a0>)
 8014204:	f7fd fab7 	bl	8011776 <PIN_LOW>
 8014208:	2180      	movs	r1, #128	; 0x80
 801420a:	489d      	ldr	r0, [pc, #628]	; (8014480 <readGRAM+0x8a0>)
 801420c:	f7fd fab3 	bl	8011776 <PIN_LOW>
 8014210:	2180      	movs	r1, #128	; 0x80
 8014212:	489b      	ldr	r0, [pc, #620]	; (8014480 <readGRAM+0x8a0>)
 8014214:	f7fd faaf 	bl	8011776 <PIN_LOW>
 8014218:	2180      	movs	r1, #128	; 0x80
 801421a:	4899      	ldr	r0, [pc, #612]	; (8014480 <readGRAM+0x8a0>)
 801421c:	f7fd faab 	bl	8011776 <PIN_LOW>
 8014220:	2180      	movs	r1, #128	; 0x80
 8014222:	4897      	ldr	r0, [pc, #604]	; (8014480 <readGRAM+0x8a0>)
 8014224:	f7fd faa7 	bl	8011776 <PIN_LOW>
 8014228:	2180      	movs	r1, #128	; 0x80
 801422a:	4895      	ldr	r0, [pc, #596]	; (8014480 <readGRAM+0x8a0>)
 801422c:	f7fd faa3 	bl	8011776 <PIN_LOW>
 8014230:	2180      	movs	r1, #128	; 0x80
 8014232:	4893      	ldr	r0, [pc, #588]	; (8014480 <readGRAM+0x8a0>)
 8014234:	f7fd fa9f 	bl	8011776 <PIN_LOW>
 8014238:	2180      	movs	r1, #128	; 0x80
 801423a:	4891      	ldr	r0, [pc, #580]	; (8014480 <readGRAM+0x8a0>)
 801423c:	f7fd fa9b 	bl	8011776 <PIN_LOW>
 8014240:	2180      	movs	r1, #128	; 0x80
 8014242:	488f      	ldr	r0, [pc, #572]	; (8014480 <readGRAM+0x8a0>)
 8014244:	f7fd fa97 	bl	8011776 <PIN_LOW>
 8014248:	2180      	movs	r1, #128	; 0x80
 801424a:	488d      	ldr	r0, [pc, #564]	; (8014480 <readGRAM+0x8a0>)
 801424c:	f7fd fa93 	bl	8011776 <PIN_LOW>
 8014250:	2180      	movs	r1, #128	; 0x80
 8014252:	488b      	ldr	r0, [pc, #556]	; (8014480 <readGRAM+0x8a0>)
 8014254:	f7fd fa8f 	bl	8011776 <PIN_LOW>
 8014258:	2180      	movs	r1, #128	; 0x80
 801425a:	4889      	ldr	r0, [pc, #548]	; (8014480 <readGRAM+0x8a0>)
 801425c:	f7fd fa8b 	bl	8011776 <PIN_LOW>
 8014260:	2180      	movs	r1, #128	; 0x80
 8014262:	4887      	ldr	r0, [pc, #540]	; (8014480 <readGRAM+0x8a0>)
 8014264:	f7fd fa87 	bl	8011776 <PIN_LOW>
 8014268:	2180      	movs	r1, #128	; 0x80
 801426a:	4885      	ldr	r0, [pc, #532]	; (8014480 <readGRAM+0x8a0>)
 801426c:	f7fd fa83 	bl	8011776 <PIN_LOW>
 8014270:	2180      	movs	r1, #128	; 0x80
 8014272:	4883      	ldr	r0, [pc, #524]	; (8014480 <readGRAM+0x8a0>)
 8014274:	f7fd fa7f 	bl	8011776 <PIN_LOW>
 8014278:	2180      	movs	r1, #128	; 0x80
 801427a:	4881      	ldr	r0, [pc, #516]	; (8014480 <readGRAM+0x8a0>)
 801427c:	f7fd fa7b 	bl	8011776 <PIN_LOW>
 8014280:	2180      	movs	r1, #128	; 0x80
 8014282:	487f      	ldr	r0, [pc, #508]	; (8014480 <readGRAM+0x8a0>)
 8014284:	f7fd fa77 	bl	8011776 <PIN_LOW>
 8014288:	2180      	movs	r1, #128	; 0x80
 801428a:	487d      	ldr	r0, [pc, #500]	; (8014480 <readGRAM+0x8a0>)
 801428c:	f7fd fa73 	bl	8011776 <PIN_LOW>
 8014290:	2180      	movs	r1, #128	; 0x80
 8014292:	487b      	ldr	r0, [pc, #492]	; (8014480 <readGRAM+0x8a0>)
 8014294:	f7fd fa6f 	bl	8011776 <PIN_LOW>
 8014298:	2180      	movs	r1, #128	; 0x80
 801429a:	4879      	ldr	r0, [pc, #484]	; (8014480 <readGRAM+0x8a0>)
 801429c:	f7fd fa6b 	bl	8011776 <PIN_LOW>
 80142a0:	2180      	movs	r1, #128	; 0x80
 80142a2:	4877      	ldr	r0, [pc, #476]	; (8014480 <readGRAM+0x8a0>)
 80142a4:	f7fd fa67 	bl	8011776 <PIN_LOW>
 80142a8:	2180      	movs	r1, #128	; 0x80
 80142aa:	4875      	ldr	r0, [pc, #468]	; (8014480 <readGRAM+0x8a0>)
 80142ac:	f7fd fa63 	bl	8011776 <PIN_LOW>
 80142b0:	2180      	movs	r1, #128	; 0x80
 80142b2:	4873      	ldr	r0, [pc, #460]	; (8014480 <readGRAM+0x8a0>)
 80142b4:	f7fd fa5f 	bl	8011776 <PIN_LOW>
 80142b8:	2180      	movs	r1, #128	; 0x80
 80142ba:	4871      	ldr	r0, [pc, #452]	; (8014480 <readGRAM+0x8a0>)
 80142bc:	f7fd fa5b 	bl	8011776 <PIN_LOW>
 80142c0:	2180      	movs	r1, #128	; 0x80
 80142c2:	486f      	ldr	r0, [pc, #444]	; (8014480 <readGRAM+0x8a0>)
 80142c4:	f7fd fa57 	bl	8011776 <PIN_LOW>
 80142c8:	2180      	movs	r1, #128	; 0x80
 80142ca:	486d      	ldr	r0, [pc, #436]	; (8014480 <readGRAM+0x8a0>)
 80142cc:	f7fd fa53 	bl	8011776 <PIN_LOW>
 80142d0:	2180      	movs	r1, #128	; 0x80
 80142d2:	486b      	ldr	r0, [pc, #428]	; (8014480 <readGRAM+0x8a0>)
 80142d4:	f7fd fa4f 	bl	8011776 <PIN_LOW>
 80142d8:	2180      	movs	r1, #128	; 0x80
 80142da:	4869      	ldr	r0, [pc, #420]	; (8014480 <readGRAM+0x8a0>)
 80142dc:	f7fd fa4b 	bl	8011776 <PIN_LOW>
 80142e0:	2180      	movs	r1, #128	; 0x80
 80142e2:	4867      	ldr	r0, [pc, #412]	; (8014480 <readGRAM+0x8a0>)
 80142e4:	f7fd fa47 	bl	8011776 <PIN_LOW>
 80142e8:	2180      	movs	r1, #128	; 0x80
 80142ea:	4865      	ldr	r0, [pc, #404]	; (8014480 <readGRAM+0x8a0>)
 80142ec:	f7fd fa43 	bl	8011776 <PIN_LOW>
 80142f0:	2180      	movs	r1, #128	; 0x80
 80142f2:	4863      	ldr	r0, [pc, #396]	; (8014480 <readGRAM+0x8a0>)
 80142f4:	f7fd fa3f 	bl	8011776 <PIN_LOW>
 80142f8:	2180      	movs	r1, #128	; 0x80
 80142fa:	4861      	ldr	r0, [pc, #388]	; (8014480 <readGRAM+0x8a0>)
 80142fc:	f7fd fa3b 	bl	8011776 <PIN_LOW>
 8014300:	2180      	movs	r1, #128	; 0x80
 8014302:	485f      	ldr	r0, [pc, #380]	; (8014480 <readGRAM+0x8a0>)
 8014304:	f7fd fa37 	bl	8011776 <PIN_LOW>
 8014308:	2180      	movs	r1, #128	; 0x80
 801430a:	485d      	ldr	r0, [pc, #372]	; (8014480 <readGRAM+0x8a0>)
 801430c:	f7fd fa33 	bl	8011776 <PIN_LOW>
 8014310:	4b5c      	ldr	r3, [pc, #368]	; (8014484 <readGRAM+0x8a4>)
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	0b1b      	lsrs	r3, r3, #12
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	b2da      	uxtb	r2, r3
 801431e:	4b58      	ldr	r3, [pc, #352]	; (8014480 <readGRAM+0x8a0>)
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	0b9b      	lsrs	r3, r3, #14
 8014324:	b2db      	uxtb	r3, r3
 8014326:	f003 0302 	and.w	r3, r3, #2
 801432a:	b2db      	uxtb	r3, r3
 801432c:	4313      	orrs	r3, r2
 801432e:	b2da      	uxtb	r2, r3
 8014330:	4b54      	ldr	r3, [pc, #336]	; (8014484 <readGRAM+0x8a4>)
 8014332:	691b      	ldr	r3, [r3, #16]
 8014334:	0b5b      	lsrs	r3, r3, #13
 8014336:	b2db      	uxtb	r3, r3
 8014338:	f003 0304 	and.w	r3, r3, #4
 801433c:	b2db      	uxtb	r3, r3
 801433e:	4313      	orrs	r3, r2
 8014340:	b2da      	uxtb	r2, r3
 8014342:	4b51      	ldr	r3, [pc, #324]	; (8014488 <readGRAM+0x8a8>)
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	0a9b      	lsrs	r3, r3, #10
 8014348:	b2db      	uxtb	r3, r3
 801434a:	f003 0308 	and.w	r3, r3, #8
 801434e:	b2db      	uxtb	r3, r3
 8014350:	4313      	orrs	r3, r2
 8014352:	b2da      	uxtb	r2, r3
 8014354:	4b4b      	ldr	r3, [pc, #300]	; (8014484 <readGRAM+0x8a4>)
 8014356:	691b      	ldr	r3, [r3, #16]
 8014358:	0a9b      	lsrs	r3, r3, #10
 801435a:	b2db      	uxtb	r3, r3
 801435c:	f003 0310 	and.w	r3, r3, #16
 8014360:	b2db      	uxtb	r3, r3
 8014362:	4313      	orrs	r3, r2
 8014364:	b2da      	uxtb	r2, r3
 8014366:	4b48      	ldr	r3, [pc, #288]	; (8014488 <readGRAM+0x8a8>)
 8014368:	691b      	ldr	r3, [r3, #16]
 801436a:	099b      	lsrs	r3, r3, #6
 801436c:	b2db      	uxtb	r3, r3
 801436e:	f003 0320 	and.w	r3, r3, #32
 8014372:	b2db      	uxtb	r3, r3
 8014374:	4313      	orrs	r3, r2
 8014376:	b2da      	uxtb	r2, r3
 8014378:	4b43      	ldr	r3, [pc, #268]	; (8014488 <readGRAM+0x8a8>)
 801437a:	691b      	ldr	r3, [r3, #16]
 801437c:	08db      	lsrs	r3, r3, #3
 801437e:	b2db      	uxtb	r3, r3
 8014380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014384:	b2db      	uxtb	r3, r3
 8014386:	4313      	orrs	r3, r2
 8014388:	b2da      	uxtb	r2, r3
 801438a:	4b3e      	ldr	r3, [pc, #248]	; (8014484 <readGRAM+0x8a4>)
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	099b      	lsrs	r3, r3, #6
 8014390:	b2db      	uxtb	r3, r3
 8014392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014396:	b2db      	uxtb	r3, r3
 8014398:	4313      	orrs	r3, r2
 801439a:	76fb      	strb	r3, [r7, #27]
 801439c:	2180      	movs	r1, #128	; 0x80
 801439e:	4838      	ldr	r0, [pc, #224]	; (8014480 <readGRAM+0x8a0>)
 80143a0:	f7fd f9f9 	bl	8011796 <PIN_HIGH>
 80143a4:	2180      	movs	r1, #128	; 0x80
 80143a6:	4836      	ldr	r0, [pc, #216]	; (8014480 <readGRAM+0x8a0>)
 80143a8:	f7fd f9f5 	bl	8011796 <PIN_HIGH>
 80143ac:	2180      	movs	r1, #128	; 0x80
 80143ae:	4834      	ldr	r0, [pc, #208]	; (8014480 <readGRAM+0x8a0>)
 80143b0:	f7fd f9f1 	bl	8011796 <PIN_HIGH>
 80143b4:	2180      	movs	r1, #128	; 0x80
 80143b6:	4832      	ldr	r0, [pc, #200]	; (8014480 <readGRAM+0x8a0>)
 80143b8:	f7fd f9dd 	bl	8011776 <PIN_LOW>
 80143bc:	2180      	movs	r1, #128	; 0x80
 80143be:	4830      	ldr	r0, [pc, #192]	; (8014480 <readGRAM+0x8a0>)
 80143c0:	f7fd f9d9 	bl	8011776 <PIN_LOW>
 80143c4:	2180      	movs	r1, #128	; 0x80
 80143c6:	482e      	ldr	r0, [pc, #184]	; (8014480 <readGRAM+0x8a0>)
 80143c8:	f7fd f9d5 	bl	8011776 <PIN_LOW>
 80143cc:	2180      	movs	r1, #128	; 0x80
 80143ce:	482c      	ldr	r0, [pc, #176]	; (8014480 <readGRAM+0x8a0>)
 80143d0:	f7fd f9d1 	bl	8011776 <PIN_LOW>
 80143d4:	2180      	movs	r1, #128	; 0x80
 80143d6:	482a      	ldr	r0, [pc, #168]	; (8014480 <readGRAM+0x8a0>)
 80143d8:	f7fd f9cd 	bl	8011776 <PIN_LOW>
 80143dc:	2180      	movs	r1, #128	; 0x80
 80143de:	4828      	ldr	r0, [pc, #160]	; (8014480 <readGRAM+0x8a0>)
 80143e0:	f7fd f9c9 	bl	8011776 <PIN_LOW>
 80143e4:	2180      	movs	r1, #128	; 0x80
 80143e6:	4826      	ldr	r0, [pc, #152]	; (8014480 <readGRAM+0x8a0>)
 80143e8:	f7fd f9c5 	bl	8011776 <PIN_LOW>
 80143ec:	2180      	movs	r1, #128	; 0x80
 80143ee:	4824      	ldr	r0, [pc, #144]	; (8014480 <readGRAM+0x8a0>)
 80143f0:	f7fd f9c1 	bl	8011776 <PIN_LOW>
 80143f4:	2180      	movs	r1, #128	; 0x80
 80143f6:	4822      	ldr	r0, [pc, #136]	; (8014480 <readGRAM+0x8a0>)
 80143f8:	f7fd f9bd 	bl	8011776 <PIN_LOW>
 80143fc:	2180      	movs	r1, #128	; 0x80
 80143fe:	4820      	ldr	r0, [pc, #128]	; (8014480 <readGRAM+0x8a0>)
 8014400:	f7fd f9b9 	bl	8011776 <PIN_LOW>
 8014404:	2180      	movs	r1, #128	; 0x80
 8014406:	481e      	ldr	r0, [pc, #120]	; (8014480 <readGRAM+0x8a0>)
 8014408:	f7fd f9b5 	bl	8011776 <PIN_LOW>
 801440c:	2180      	movs	r1, #128	; 0x80
 801440e:	481c      	ldr	r0, [pc, #112]	; (8014480 <readGRAM+0x8a0>)
 8014410:	f7fd f9b1 	bl	8011776 <PIN_LOW>
 8014414:	2180      	movs	r1, #128	; 0x80
 8014416:	481a      	ldr	r0, [pc, #104]	; (8014480 <readGRAM+0x8a0>)
 8014418:	f7fd f9ad 	bl	8011776 <PIN_LOW>
 801441c:	2180      	movs	r1, #128	; 0x80
 801441e:	4818      	ldr	r0, [pc, #96]	; (8014480 <readGRAM+0x8a0>)
 8014420:	f7fd f9a9 	bl	8011776 <PIN_LOW>
 8014424:	2180      	movs	r1, #128	; 0x80
 8014426:	4816      	ldr	r0, [pc, #88]	; (8014480 <readGRAM+0x8a0>)
 8014428:	f7fd f9a5 	bl	8011776 <PIN_LOW>
 801442c:	2180      	movs	r1, #128	; 0x80
 801442e:	4814      	ldr	r0, [pc, #80]	; (8014480 <readGRAM+0x8a0>)
 8014430:	f7fd f9a1 	bl	8011776 <PIN_LOW>
 8014434:	2180      	movs	r1, #128	; 0x80
 8014436:	4812      	ldr	r0, [pc, #72]	; (8014480 <readGRAM+0x8a0>)
 8014438:	f7fd f99d 	bl	8011776 <PIN_LOW>
 801443c:	2180      	movs	r1, #128	; 0x80
 801443e:	4810      	ldr	r0, [pc, #64]	; (8014480 <readGRAM+0x8a0>)
 8014440:	f7fd f999 	bl	8011776 <PIN_LOW>
 8014444:	2180      	movs	r1, #128	; 0x80
 8014446:	480e      	ldr	r0, [pc, #56]	; (8014480 <readGRAM+0x8a0>)
 8014448:	f7fd f995 	bl	8011776 <PIN_LOW>
 801444c:	2180      	movs	r1, #128	; 0x80
 801444e:	480c      	ldr	r0, [pc, #48]	; (8014480 <readGRAM+0x8a0>)
 8014450:	f7fd f991 	bl	8011776 <PIN_LOW>
 8014454:	2180      	movs	r1, #128	; 0x80
 8014456:	480a      	ldr	r0, [pc, #40]	; (8014480 <readGRAM+0x8a0>)
 8014458:	f7fd f98d 	bl	8011776 <PIN_LOW>
 801445c:	2180      	movs	r1, #128	; 0x80
 801445e:	4808      	ldr	r0, [pc, #32]	; (8014480 <readGRAM+0x8a0>)
 8014460:	f7fd f989 	bl	8011776 <PIN_LOW>
 8014464:	2180      	movs	r1, #128	; 0x80
 8014466:	4806      	ldr	r0, [pc, #24]	; (8014480 <readGRAM+0x8a0>)
 8014468:	f7fd f985 	bl	8011776 <PIN_LOW>
 801446c:	2180      	movs	r1, #128	; 0x80
 801446e:	4804      	ldr	r0, [pc, #16]	; (8014480 <readGRAM+0x8a0>)
 8014470:	f7fd f981 	bl	8011776 <PIN_LOW>
 8014474:	2180      	movs	r1, #128	; 0x80
 8014476:	4802      	ldr	r0, [pc, #8]	; (8014480 <readGRAM+0x8a0>)
 8014478:	f7fd f97d 	bl	8011776 <PIN_LOW>
 801447c:	2180      	movs	r1, #128	; 0x80
 801447e:	e005      	b.n	801448c <readGRAM+0x8ac>
 8014480:	40020c00 	.word	0x40020c00
 8014484:	40021400 	.word	0x40021400
 8014488:	40021000 	.word	0x40021000
 801448c:	48c0      	ldr	r0, [pc, #768]	; (8014790 <readGRAM+0xbb0>)
 801448e:	f7fd f972 	bl	8011776 <PIN_LOW>
 8014492:	2180      	movs	r1, #128	; 0x80
 8014494:	48be      	ldr	r0, [pc, #760]	; (8014790 <readGRAM+0xbb0>)
 8014496:	f7fd f96e 	bl	8011776 <PIN_LOW>
 801449a:	2180      	movs	r1, #128	; 0x80
 801449c:	48bc      	ldr	r0, [pc, #752]	; (8014790 <readGRAM+0xbb0>)
 801449e:	f7fd f96a 	bl	8011776 <PIN_LOW>
 80144a2:	2180      	movs	r1, #128	; 0x80
 80144a4:	48ba      	ldr	r0, [pc, #744]	; (8014790 <readGRAM+0xbb0>)
 80144a6:	f7fd f966 	bl	8011776 <PIN_LOW>
 80144aa:	2180      	movs	r1, #128	; 0x80
 80144ac:	48b8      	ldr	r0, [pc, #736]	; (8014790 <readGRAM+0xbb0>)
 80144ae:	f7fd f962 	bl	8011776 <PIN_LOW>
 80144b2:	2180      	movs	r1, #128	; 0x80
 80144b4:	48b6      	ldr	r0, [pc, #728]	; (8014790 <readGRAM+0xbb0>)
 80144b6:	f7fd f95e 	bl	8011776 <PIN_LOW>
 80144ba:	2180      	movs	r1, #128	; 0x80
 80144bc:	48b4      	ldr	r0, [pc, #720]	; (8014790 <readGRAM+0xbb0>)
 80144be:	f7fd f95a 	bl	8011776 <PIN_LOW>
 80144c2:	2180      	movs	r1, #128	; 0x80
 80144c4:	48b2      	ldr	r0, [pc, #712]	; (8014790 <readGRAM+0xbb0>)
 80144c6:	f7fd f956 	bl	8011776 <PIN_LOW>
 80144ca:	2180      	movs	r1, #128	; 0x80
 80144cc:	48b0      	ldr	r0, [pc, #704]	; (8014790 <readGRAM+0xbb0>)
 80144ce:	f7fd f952 	bl	8011776 <PIN_LOW>
 80144d2:	2180      	movs	r1, #128	; 0x80
 80144d4:	48ae      	ldr	r0, [pc, #696]	; (8014790 <readGRAM+0xbb0>)
 80144d6:	f7fd f94e 	bl	8011776 <PIN_LOW>
 80144da:	2180      	movs	r1, #128	; 0x80
 80144dc:	48ac      	ldr	r0, [pc, #688]	; (8014790 <readGRAM+0xbb0>)
 80144de:	f7fd f94a 	bl	8011776 <PIN_LOW>
 80144e2:	2180      	movs	r1, #128	; 0x80
 80144e4:	48aa      	ldr	r0, [pc, #680]	; (8014790 <readGRAM+0xbb0>)
 80144e6:	f7fd f946 	bl	8011776 <PIN_LOW>
 80144ea:	2180      	movs	r1, #128	; 0x80
 80144ec:	48a8      	ldr	r0, [pc, #672]	; (8014790 <readGRAM+0xbb0>)
 80144ee:	f7fd f942 	bl	8011776 <PIN_LOW>
 80144f2:	2180      	movs	r1, #128	; 0x80
 80144f4:	48a6      	ldr	r0, [pc, #664]	; (8014790 <readGRAM+0xbb0>)
 80144f6:	f7fd f93e 	bl	8011776 <PIN_LOW>
 80144fa:	2180      	movs	r1, #128	; 0x80
 80144fc:	48a4      	ldr	r0, [pc, #656]	; (8014790 <readGRAM+0xbb0>)
 80144fe:	f7fd f93a 	bl	8011776 <PIN_LOW>
 8014502:	2180      	movs	r1, #128	; 0x80
 8014504:	48a2      	ldr	r0, [pc, #648]	; (8014790 <readGRAM+0xbb0>)
 8014506:	f7fd f936 	bl	8011776 <PIN_LOW>
 801450a:	2180      	movs	r1, #128	; 0x80
 801450c:	48a0      	ldr	r0, [pc, #640]	; (8014790 <readGRAM+0xbb0>)
 801450e:	f7fd f932 	bl	8011776 <PIN_LOW>
 8014512:	2180      	movs	r1, #128	; 0x80
 8014514:	489e      	ldr	r0, [pc, #632]	; (8014790 <readGRAM+0xbb0>)
 8014516:	f7fd f92e 	bl	8011776 <PIN_LOW>
 801451a:	2180      	movs	r1, #128	; 0x80
 801451c:	489c      	ldr	r0, [pc, #624]	; (8014790 <readGRAM+0xbb0>)
 801451e:	f7fd f92a 	bl	8011776 <PIN_LOW>
 8014522:	2180      	movs	r1, #128	; 0x80
 8014524:	489a      	ldr	r0, [pc, #616]	; (8014790 <readGRAM+0xbb0>)
 8014526:	f7fd f926 	bl	8011776 <PIN_LOW>
 801452a:	2180      	movs	r1, #128	; 0x80
 801452c:	4898      	ldr	r0, [pc, #608]	; (8014790 <readGRAM+0xbb0>)
 801452e:	f7fd f922 	bl	8011776 <PIN_LOW>
 8014532:	2180      	movs	r1, #128	; 0x80
 8014534:	4896      	ldr	r0, [pc, #600]	; (8014790 <readGRAM+0xbb0>)
 8014536:	f7fd f91e 	bl	8011776 <PIN_LOW>
 801453a:	2180      	movs	r1, #128	; 0x80
 801453c:	4894      	ldr	r0, [pc, #592]	; (8014790 <readGRAM+0xbb0>)
 801453e:	f7fd f91a 	bl	8011776 <PIN_LOW>
 8014542:	2180      	movs	r1, #128	; 0x80
 8014544:	4892      	ldr	r0, [pc, #584]	; (8014790 <readGRAM+0xbb0>)
 8014546:	f7fd f916 	bl	8011776 <PIN_LOW>
 801454a:	2180      	movs	r1, #128	; 0x80
 801454c:	4890      	ldr	r0, [pc, #576]	; (8014790 <readGRAM+0xbb0>)
 801454e:	f7fd f912 	bl	8011776 <PIN_LOW>
 8014552:	2180      	movs	r1, #128	; 0x80
 8014554:	488e      	ldr	r0, [pc, #568]	; (8014790 <readGRAM+0xbb0>)
 8014556:	f7fd f90e 	bl	8011776 <PIN_LOW>
 801455a:	4b8e      	ldr	r3, [pc, #568]	; (8014794 <readGRAM+0xbb4>)
 801455c:	691b      	ldr	r3, [r3, #16]
 801455e:	0b1b      	lsrs	r3, r3, #12
 8014560:	b29b      	uxth	r3, r3
 8014562:	f003 0301 	and.w	r3, r3, #1
 8014566:	b29a      	uxth	r2, r3
 8014568:	4b89      	ldr	r3, [pc, #548]	; (8014790 <readGRAM+0xbb0>)
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	0b9b      	lsrs	r3, r3, #14
 801456e:	b29b      	uxth	r3, r3
 8014570:	f003 0302 	and.w	r3, r3, #2
 8014574:	b29b      	uxth	r3, r3
 8014576:	4313      	orrs	r3, r2
 8014578:	b29a      	uxth	r2, r3
 801457a:	4b86      	ldr	r3, [pc, #536]	; (8014794 <readGRAM+0xbb4>)
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	0b5b      	lsrs	r3, r3, #13
 8014580:	b29b      	uxth	r3, r3
 8014582:	f003 0304 	and.w	r3, r3, #4
 8014586:	b29b      	uxth	r3, r3
 8014588:	4313      	orrs	r3, r2
 801458a:	b29a      	uxth	r2, r3
 801458c:	4b82      	ldr	r3, [pc, #520]	; (8014798 <readGRAM+0xbb8>)
 801458e:	691b      	ldr	r3, [r3, #16]
 8014590:	0a9b      	lsrs	r3, r3, #10
 8014592:	b29b      	uxth	r3, r3
 8014594:	f003 0308 	and.w	r3, r3, #8
 8014598:	b29b      	uxth	r3, r3
 801459a:	4313      	orrs	r3, r2
 801459c:	b29a      	uxth	r2, r3
 801459e:	4b7d      	ldr	r3, [pc, #500]	; (8014794 <readGRAM+0xbb4>)
 80145a0:	691b      	ldr	r3, [r3, #16]
 80145a2:	0a9b      	lsrs	r3, r3, #10
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	f003 0310 	and.w	r3, r3, #16
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	4313      	orrs	r3, r2
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	4b79      	ldr	r3, [pc, #484]	; (8014798 <readGRAM+0xbb8>)
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	099b      	lsrs	r3, r3, #6
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	f003 0320 	and.w	r3, r3, #32
 80145bc:	b29b      	uxth	r3, r3
 80145be:	4313      	orrs	r3, r2
 80145c0:	b29a      	uxth	r2, r3
 80145c2:	4b75      	ldr	r3, [pc, #468]	; (8014798 <readGRAM+0xbb8>)
 80145c4:	691b      	ldr	r3, [r3, #16]
 80145c6:	08db      	lsrs	r3, r3, #3
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	4313      	orrs	r3, r2
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	4b6f      	ldr	r3, [pc, #444]	; (8014794 <readGRAM+0xbb4>)
 80145d6:	691b      	ldr	r3, [r3, #16]
 80145d8:	099b      	lsrs	r3, r3, #6
 80145da:	b29b      	uxth	r3, r3
 80145dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4313      	orrs	r3, r2
 80145e4:	833b      	strh	r3, [r7, #24]
 80145e6:	2180      	movs	r1, #128	; 0x80
 80145e8:	4869      	ldr	r0, [pc, #420]	; (8014790 <readGRAM+0xbb0>)
 80145ea:	f7fd f8d4 	bl	8011796 <PIN_HIGH>
 80145ee:	2180      	movs	r1, #128	; 0x80
 80145f0:	4867      	ldr	r0, [pc, #412]	; (8014790 <readGRAM+0xbb0>)
 80145f2:	f7fd f8d0 	bl	8011796 <PIN_HIGH>
 80145f6:	7efb      	ldrb	r3, [r7, #27]
 80145f8:	021b      	lsls	r3, r3, #8
 80145fa:	b21a      	sxth	r2, r3
 80145fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8014600:	4313      	orrs	r3, r2
 8014602:	b21b      	sxth	r3, r3
 8014604:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8014606:	4b65      	ldr	r3, [pc, #404]	; (801479c <readGRAM+0xbbc>)
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	f241 5211 	movw	r2, #5393	; 0x1511
 801460e:	4293      	cmp	r3, r2
 8014610:	f040 8751 	bne.w	80154b6 <readGRAM+0x18d6>
 8014614:	2180      	movs	r1, #128	; 0x80
 8014616:	485e      	ldr	r0, [pc, #376]	; (8014790 <readGRAM+0xbb0>)
 8014618:	f7fd f8bd 	bl	8011796 <PIN_HIGH>
 801461c:	2180      	movs	r1, #128	; 0x80
 801461e:	485c      	ldr	r0, [pc, #368]	; (8014790 <readGRAM+0xbb0>)
 8014620:	f7fd f8a9 	bl	8011776 <PIN_LOW>
 8014624:	2180      	movs	r1, #128	; 0x80
 8014626:	485a      	ldr	r0, [pc, #360]	; (8014790 <readGRAM+0xbb0>)
 8014628:	f7fd f8a5 	bl	8011776 <PIN_LOW>
 801462c:	2180      	movs	r1, #128	; 0x80
 801462e:	4858      	ldr	r0, [pc, #352]	; (8014790 <readGRAM+0xbb0>)
 8014630:	f7fd f8a1 	bl	8011776 <PIN_LOW>
 8014634:	2180      	movs	r1, #128	; 0x80
 8014636:	4856      	ldr	r0, [pc, #344]	; (8014790 <readGRAM+0xbb0>)
 8014638:	f7fd f89d 	bl	8011776 <PIN_LOW>
 801463c:	2180      	movs	r1, #128	; 0x80
 801463e:	4854      	ldr	r0, [pc, #336]	; (8014790 <readGRAM+0xbb0>)
 8014640:	f7fd f899 	bl	8011776 <PIN_LOW>
 8014644:	2180      	movs	r1, #128	; 0x80
 8014646:	4852      	ldr	r0, [pc, #328]	; (8014790 <readGRAM+0xbb0>)
 8014648:	f7fd f895 	bl	8011776 <PIN_LOW>
 801464c:	2180      	movs	r1, #128	; 0x80
 801464e:	4850      	ldr	r0, [pc, #320]	; (8014790 <readGRAM+0xbb0>)
 8014650:	f7fd f891 	bl	8011776 <PIN_LOW>
 8014654:	2180      	movs	r1, #128	; 0x80
 8014656:	484e      	ldr	r0, [pc, #312]	; (8014790 <readGRAM+0xbb0>)
 8014658:	f7fd f88d 	bl	8011776 <PIN_LOW>
 801465c:	2180      	movs	r1, #128	; 0x80
 801465e:	484c      	ldr	r0, [pc, #304]	; (8014790 <readGRAM+0xbb0>)
 8014660:	f7fd f889 	bl	8011776 <PIN_LOW>
 8014664:	2180      	movs	r1, #128	; 0x80
 8014666:	484a      	ldr	r0, [pc, #296]	; (8014790 <readGRAM+0xbb0>)
 8014668:	f7fd f885 	bl	8011776 <PIN_LOW>
 801466c:	2180      	movs	r1, #128	; 0x80
 801466e:	4848      	ldr	r0, [pc, #288]	; (8014790 <readGRAM+0xbb0>)
 8014670:	f7fd f881 	bl	8011776 <PIN_LOW>
 8014674:	2180      	movs	r1, #128	; 0x80
 8014676:	4846      	ldr	r0, [pc, #280]	; (8014790 <readGRAM+0xbb0>)
 8014678:	f7fd f87d 	bl	8011776 <PIN_LOW>
 801467c:	2180      	movs	r1, #128	; 0x80
 801467e:	4844      	ldr	r0, [pc, #272]	; (8014790 <readGRAM+0xbb0>)
 8014680:	f7fd f879 	bl	8011776 <PIN_LOW>
 8014684:	2180      	movs	r1, #128	; 0x80
 8014686:	4842      	ldr	r0, [pc, #264]	; (8014790 <readGRAM+0xbb0>)
 8014688:	f7fd f875 	bl	8011776 <PIN_LOW>
 801468c:	2180      	movs	r1, #128	; 0x80
 801468e:	4840      	ldr	r0, [pc, #256]	; (8014790 <readGRAM+0xbb0>)
 8014690:	f7fd f871 	bl	8011776 <PIN_LOW>
 8014694:	2180      	movs	r1, #128	; 0x80
 8014696:	483e      	ldr	r0, [pc, #248]	; (8014790 <readGRAM+0xbb0>)
 8014698:	f7fd f86d 	bl	8011776 <PIN_LOW>
 801469c:	2180      	movs	r1, #128	; 0x80
 801469e:	483c      	ldr	r0, [pc, #240]	; (8014790 <readGRAM+0xbb0>)
 80146a0:	f7fd f869 	bl	8011776 <PIN_LOW>
 80146a4:	2180      	movs	r1, #128	; 0x80
 80146a6:	483a      	ldr	r0, [pc, #232]	; (8014790 <readGRAM+0xbb0>)
 80146a8:	f7fd f865 	bl	8011776 <PIN_LOW>
 80146ac:	2180      	movs	r1, #128	; 0x80
 80146ae:	4838      	ldr	r0, [pc, #224]	; (8014790 <readGRAM+0xbb0>)
 80146b0:	f7fd f861 	bl	8011776 <PIN_LOW>
 80146b4:	2180      	movs	r1, #128	; 0x80
 80146b6:	4836      	ldr	r0, [pc, #216]	; (8014790 <readGRAM+0xbb0>)
 80146b8:	f7fd f85d 	bl	8011776 <PIN_LOW>
 80146bc:	2180      	movs	r1, #128	; 0x80
 80146be:	4834      	ldr	r0, [pc, #208]	; (8014790 <readGRAM+0xbb0>)
 80146c0:	f7fd f859 	bl	8011776 <PIN_LOW>
 80146c4:	2180      	movs	r1, #128	; 0x80
 80146c6:	4832      	ldr	r0, [pc, #200]	; (8014790 <readGRAM+0xbb0>)
 80146c8:	f7fd f855 	bl	8011776 <PIN_LOW>
 80146cc:	2180      	movs	r1, #128	; 0x80
 80146ce:	4830      	ldr	r0, [pc, #192]	; (8014790 <readGRAM+0xbb0>)
 80146d0:	f7fd f851 	bl	8011776 <PIN_LOW>
 80146d4:	2180      	movs	r1, #128	; 0x80
 80146d6:	482e      	ldr	r0, [pc, #184]	; (8014790 <readGRAM+0xbb0>)
 80146d8:	f7fd f84d 	bl	8011776 <PIN_LOW>
 80146dc:	2180      	movs	r1, #128	; 0x80
 80146de:	482c      	ldr	r0, [pc, #176]	; (8014790 <readGRAM+0xbb0>)
 80146e0:	f7fd f849 	bl	8011776 <PIN_LOW>
 80146e4:	2180      	movs	r1, #128	; 0x80
 80146e6:	482a      	ldr	r0, [pc, #168]	; (8014790 <readGRAM+0xbb0>)
 80146e8:	f7fd f845 	bl	8011776 <PIN_LOW>
 80146ec:	2180      	movs	r1, #128	; 0x80
 80146ee:	4828      	ldr	r0, [pc, #160]	; (8014790 <readGRAM+0xbb0>)
 80146f0:	f7fd f841 	bl	8011776 <PIN_LOW>
 80146f4:	2180      	movs	r1, #128	; 0x80
 80146f6:	4826      	ldr	r0, [pc, #152]	; (8014790 <readGRAM+0xbb0>)
 80146f8:	f7fd f83d 	bl	8011776 <PIN_LOW>
 80146fc:	2180      	movs	r1, #128	; 0x80
 80146fe:	4824      	ldr	r0, [pc, #144]	; (8014790 <readGRAM+0xbb0>)
 8014700:	f7fd f839 	bl	8011776 <PIN_LOW>
 8014704:	2180      	movs	r1, #128	; 0x80
 8014706:	4822      	ldr	r0, [pc, #136]	; (8014790 <readGRAM+0xbb0>)
 8014708:	f7fd f835 	bl	8011776 <PIN_LOW>
 801470c:	2180      	movs	r1, #128	; 0x80
 801470e:	4820      	ldr	r0, [pc, #128]	; (8014790 <readGRAM+0xbb0>)
 8014710:	f7fd f831 	bl	8011776 <PIN_LOW>
 8014714:	2180      	movs	r1, #128	; 0x80
 8014716:	481e      	ldr	r0, [pc, #120]	; (8014790 <readGRAM+0xbb0>)
 8014718:	f7fd f82d 	bl	8011776 <PIN_LOW>
 801471c:	2180      	movs	r1, #128	; 0x80
 801471e:	481c      	ldr	r0, [pc, #112]	; (8014790 <readGRAM+0xbb0>)
 8014720:	f7fd f829 	bl	8011776 <PIN_LOW>
 8014724:	2180      	movs	r1, #128	; 0x80
 8014726:	481a      	ldr	r0, [pc, #104]	; (8014790 <readGRAM+0xbb0>)
 8014728:	f7fd f825 	bl	8011776 <PIN_LOW>
 801472c:	2180      	movs	r1, #128	; 0x80
 801472e:	4818      	ldr	r0, [pc, #96]	; (8014790 <readGRAM+0xbb0>)
 8014730:	f7fd f821 	bl	8011776 <PIN_LOW>
 8014734:	2180      	movs	r1, #128	; 0x80
 8014736:	4816      	ldr	r0, [pc, #88]	; (8014790 <readGRAM+0xbb0>)
 8014738:	f7fd f81d 	bl	8011776 <PIN_LOW>
 801473c:	2180      	movs	r1, #128	; 0x80
 801473e:	4814      	ldr	r0, [pc, #80]	; (8014790 <readGRAM+0xbb0>)
 8014740:	f7fd f819 	bl	8011776 <PIN_LOW>
 8014744:	2180      	movs	r1, #128	; 0x80
 8014746:	4812      	ldr	r0, [pc, #72]	; (8014790 <readGRAM+0xbb0>)
 8014748:	f7fd f815 	bl	8011776 <PIN_LOW>
 801474c:	2180      	movs	r1, #128	; 0x80
 801474e:	4810      	ldr	r0, [pc, #64]	; (8014790 <readGRAM+0xbb0>)
 8014750:	f7fd f811 	bl	8011776 <PIN_LOW>
 8014754:	2180      	movs	r1, #128	; 0x80
 8014756:	480e      	ldr	r0, [pc, #56]	; (8014790 <readGRAM+0xbb0>)
 8014758:	f7fd f80d 	bl	8011776 <PIN_LOW>
 801475c:	2180      	movs	r1, #128	; 0x80
 801475e:	480c      	ldr	r0, [pc, #48]	; (8014790 <readGRAM+0xbb0>)
 8014760:	f7fd f809 	bl	8011776 <PIN_LOW>
 8014764:	2180      	movs	r1, #128	; 0x80
 8014766:	480a      	ldr	r0, [pc, #40]	; (8014790 <readGRAM+0xbb0>)
 8014768:	f7fd f805 	bl	8011776 <PIN_LOW>
 801476c:	2180      	movs	r1, #128	; 0x80
 801476e:	4808      	ldr	r0, [pc, #32]	; (8014790 <readGRAM+0xbb0>)
 8014770:	f7fd f801 	bl	8011776 <PIN_LOW>
 8014774:	2180      	movs	r1, #128	; 0x80
 8014776:	4806      	ldr	r0, [pc, #24]	; (8014790 <readGRAM+0xbb0>)
 8014778:	f7fc fffd 	bl	8011776 <PIN_LOW>
 801477c:	2180      	movs	r1, #128	; 0x80
 801477e:	4804      	ldr	r0, [pc, #16]	; (8014790 <readGRAM+0xbb0>)
 8014780:	f7fc fff9 	bl	8011776 <PIN_LOW>
 8014784:	2180      	movs	r1, #128	; 0x80
 8014786:	4802      	ldr	r0, [pc, #8]	; (8014790 <readGRAM+0xbb0>)
 8014788:	f7fc fff5 	bl	8011776 <PIN_LOW>
 801478c:	2180      	movs	r1, #128	; 0x80
 801478e:	e007      	b.n	80147a0 <readGRAM+0xbc0>
 8014790:	40020c00 	.word	0x40020c00
 8014794:	40021400 	.word	0x40021400
 8014798:	40021000 	.word	0x40021000
 801479c:	2000699c 	.word	0x2000699c
 80147a0:	4831      	ldr	r0, [pc, #196]	; (8014868 <readGRAM+0xc88>)
 80147a2:	f7fc ffe8 	bl	8011776 <PIN_LOW>
 80147a6:	2180      	movs	r1, #128	; 0x80
 80147a8:	482f      	ldr	r0, [pc, #188]	; (8014868 <readGRAM+0xc88>)
 80147aa:	f7fc ffe4 	bl	8011776 <PIN_LOW>
 80147ae:	2180      	movs	r1, #128	; 0x80
 80147b0:	482d      	ldr	r0, [pc, #180]	; (8014868 <readGRAM+0xc88>)
 80147b2:	f7fc ffe0 	bl	8011776 <PIN_LOW>
 80147b6:	2180      	movs	r1, #128	; 0x80
 80147b8:	482b      	ldr	r0, [pc, #172]	; (8014868 <readGRAM+0xc88>)
 80147ba:	f7fc ffdc 	bl	8011776 <PIN_LOW>
 80147be:	2180      	movs	r1, #128	; 0x80
 80147c0:	4829      	ldr	r0, [pc, #164]	; (8014868 <readGRAM+0xc88>)
 80147c2:	f7fc ffd8 	bl	8011776 <PIN_LOW>
 80147c6:	4b29      	ldr	r3, [pc, #164]	; (801486c <readGRAM+0xc8c>)
 80147c8:	691b      	ldr	r3, [r3, #16]
 80147ca:	0b1b      	lsrs	r3, r3, #12
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	f003 0301 	and.w	r3, r3, #1
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	4b24      	ldr	r3, [pc, #144]	; (8014868 <readGRAM+0xc88>)
 80147d6:	691b      	ldr	r3, [r3, #16]
 80147d8:	0b9b      	lsrs	r3, r3, #14
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	f003 0302 	and.w	r3, r3, #2
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	4313      	orrs	r3, r2
 80147e4:	b2da      	uxtb	r2, r3
 80147e6:	4b21      	ldr	r3, [pc, #132]	; (801486c <readGRAM+0xc8c>)
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	0b5b      	lsrs	r3, r3, #13
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	f003 0304 	and.w	r3, r3, #4
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	4313      	orrs	r3, r2
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	4b1d      	ldr	r3, [pc, #116]	; (8014870 <readGRAM+0xc90>)
 80147fa:	691b      	ldr	r3, [r3, #16]
 80147fc:	0a9b      	lsrs	r3, r3, #10
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	f003 0308 	and.w	r3, r3, #8
 8014804:	b2db      	uxtb	r3, r3
 8014806:	4313      	orrs	r3, r2
 8014808:	b2da      	uxtb	r2, r3
 801480a:	4b18      	ldr	r3, [pc, #96]	; (801486c <readGRAM+0xc8c>)
 801480c:	691b      	ldr	r3, [r3, #16]
 801480e:	0a9b      	lsrs	r3, r3, #10
 8014810:	b2db      	uxtb	r3, r3
 8014812:	f003 0310 	and.w	r3, r3, #16
 8014816:	b2db      	uxtb	r3, r3
 8014818:	4313      	orrs	r3, r2
 801481a:	b2da      	uxtb	r2, r3
 801481c:	4b14      	ldr	r3, [pc, #80]	; (8014870 <readGRAM+0xc90>)
 801481e:	691b      	ldr	r3, [r3, #16]
 8014820:	099b      	lsrs	r3, r3, #6
 8014822:	b2db      	uxtb	r3, r3
 8014824:	f003 0320 	and.w	r3, r3, #32
 8014828:	b2db      	uxtb	r3, r3
 801482a:	4313      	orrs	r3, r2
 801482c:	b2da      	uxtb	r2, r3
 801482e:	4b10      	ldr	r3, [pc, #64]	; (8014870 <readGRAM+0xc90>)
 8014830:	691b      	ldr	r3, [r3, #16]
 8014832:	08db      	lsrs	r3, r3, #3
 8014834:	b2db      	uxtb	r3, r3
 8014836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801483a:	b2db      	uxtb	r3, r3
 801483c:	4313      	orrs	r3, r2
 801483e:	b2da      	uxtb	r2, r3
 8014840:	4b0a      	ldr	r3, [pc, #40]	; (801486c <readGRAM+0xc8c>)
 8014842:	691b      	ldr	r3, [r3, #16]
 8014844:	099b      	lsrs	r3, r3, #6
 8014846:	b2db      	uxtb	r3, r3
 8014848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801484c:	b2db      	uxtb	r3, r3
 801484e:	4313      	orrs	r3, r2
 8014850:	75fb      	strb	r3, [r7, #23]
 8014852:	2180      	movs	r1, #128	; 0x80
 8014854:	4804      	ldr	r0, [pc, #16]	; (8014868 <readGRAM+0xc88>)
 8014856:	f7fc ff9e 	bl	8011796 <PIN_HIGH>
 801485a:	2180      	movs	r1, #128	; 0x80
 801485c:	4802      	ldr	r0, [pc, #8]	; (8014868 <readGRAM+0xc88>)
 801485e:	f7fc ff9a 	bl	8011796 <PIN_HIGH>
        while (n)
 8014862:	f000 be28 	b.w	80154b6 <readGRAM+0x18d6>
 8014866:	bf00      	nop
 8014868:	40020c00 	.word	0x40020c00
 801486c:	40021400 	.word	0x40021400
 8014870:	40021000 	.word	0x40021000
        {
            if (_lcd_capable & READ_24BITS)
 8014874:	4bc3      	ldr	r3, [pc, #780]	; (8014b84 <readGRAM+0xfa4>)
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	f003 0310 	and.w	r3, r3, #16
 801487c:	2b00      	cmp	r3, #0
 801487e:	f000 838d 	beq.w	8014f9c <readGRAM+0x13bc>
            {
                READ_8(r);
 8014882:	2180      	movs	r1, #128	; 0x80
 8014884:	48c0      	ldr	r0, [pc, #768]	; (8014b88 <readGRAM+0xfa8>)
 8014886:	f7fc ff86 	bl	8011796 <PIN_HIGH>
 801488a:	2180      	movs	r1, #128	; 0x80
 801488c:	48be      	ldr	r0, [pc, #760]	; (8014b88 <readGRAM+0xfa8>)
 801488e:	f7fc ff72 	bl	8011776 <PIN_LOW>
 8014892:	2180      	movs	r1, #128	; 0x80
 8014894:	48bc      	ldr	r0, [pc, #752]	; (8014b88 <readGRAM+0xfa8>)
 8014896:	f7fc ff6e 	bl	8011776 <PIN_LOW>
 801489a:	2180      	movs	r1, #128	; 0x80
 801489c:	48ba      	ldr	r0, [pc, #744]	; (8014b88 <readGRAM+0xfa8>)
 801489e:	f7fc ff6a 	bl	8011776 <PIN_LOW>
 80148a2:	2180      	movs	r1, #128	; 0x80
 80148a4:	48b8      	ldr	r0, [pc, #736]	; (8014b88 <readGRAM+0xfa8>)
 80148a6:	f7fc ff66 	bl	8011776 <PIN_LOW>
 80148aa:	2180      	movs	r1, #128	; 0x80
 80148ac:	48b6      	ldr	r0, [pc, #728]	; (8014b88 <readGRAM+0xfa8>)
 80148ae:	f7fc ff62 	bl	8011776 <PIN_LOW>
 80148b2:	2180      	movs	r1, #128	; 0x80
 80148b4:	48b4      	ldr	r0, [pc, #720]	; (8014b88 <readGRAM+0xfa8>)
 80148b6:	f7fc ff5e 	bl	8011776 <PIN_LOW>
 80148ba:	2180      	movs	r1, #128	; 0x80
 80148bc:	48b2      	ldr	r0, [pc, #712]	; (8014b88 <readGRAM+0xfa8>)
 80148be:	f7fc ff5a 	bl	8011776 <PIN_LOW>
 80148c2:	2180      	movs	r1, #128	; 0x80
 80148c4:	48b0      	ldr	r0, [pc, #704]	; (8014b88 <readGRAM+0xfa8>)
 80148c6:	f7fc ff56 	bl	8011776 <PIN_LOW>
 80148ca:	2180      	movs	r1, #128	; 0x80
 80148cc:	48ae      	ldr	r0, [pc, #696]	; (8014b88 <readGRAM+0xfa8>)
 80148ce:	f7fc ff52 	bl	8011776 <PIN_LOW>
 80148d2:	2180      	movs	r1, #128	; 0x80
 80148d4:	48ac      	ldr	r0, [pc, #688]	; (8014b88 <readGRAM+0xfa8>)
 80148d6:	f7fc ff4e 	bl	8011776 <PIN_LOW>
 80148da:	2180      	movs	r1, #128	; 0x80
 80148dc:	48aa      	ldr	r0, [pc, #680]	; (8014b88 <readGRAM+0xfa8>)
 80148de:	f7fc ff4a 	bl	8011776 <PIN_LOW>
 80148e2:	2180      	movs	r1, #128	; 0x80
 80148e4:	48a8      	ldr	r0, [pc, #672]	; (8014b88 <readGRAM+0xfa8>)
 80148e6:	f7fc ff46 	bl	8011776 <PIN_LOW>
 80148ea:	2180      	movs	r1, #128	; 0x80
 80148ec:	48a6      	ldr	r0, [pc, #664]	; (8014b88 <readGRAM+0xfa8>)
 80148ee:	f7fc ff42 	bl	8011776 <PIN_LOW>
 80148f2:	2180      	movs	r1, #128	; 0x80
 80148f4:	48a4      	ldr	r0, [pc, #656]	; (8014b88 <readGRAM+0xfa8>)
 80148f6:	f7fc ff3e 	bl	8011776 <PIN_LOW>
 80148fa:	2180      	movs	r1, #128	; 0x80
 80148fc:	48a2      	ldr	r0, [pc, #648]	; (8014b88 <readGRAM+0xfa8>)
 80148fe:	f7fc ff3a 	bl	8011776 <PIN_LOW>
 8014902:	2180      	movs	r1, #128	; 0x80
 8014904:	48a0      	ldr	r0, [pc, #640]	; (8014b88 <readGRAM+0xfa8>)
 8014906:	f7fc ff36 	bl	8011776 <PIN_LOW>
 801490a:	2180      	movs	r1, #128	; 0x80
 801490c:	489e      	ldr	r0, [pc, #632]	; (8014b88 <readGRAM+0xfa8>)
 801490e:	f7fc ff32 	bl	8011776 <PIN_LOW>
 8014912:	2180      	movs	r1, #128	; 0x80
 8014914:	489c      	ldr	r0, [pc, #624]	; (8014b88 <readGRAM+0xfa8>)
 8014916:	f7fc ff2e 	bl	8011776 <PIN_LOW>
 801491a:	2180      	movs	r1, #128	; 0x80
 801491c:	489a      	ldr	r0, [pc, #616]	; (8014b88 <readGRAM+0xfa8>)
 801491e:	f7fc ff2a 	bl	8011776 <PIN_LOW>
 8014922:	2180      	movs	r1, #128	; 0x80
 8014924:	4898      	ldr	r0, [pc, #608]	; (8014b88 <readGRAM+0xfa8>)
 8014926:	f7fc ff26 	bl	8011776 <PIN_LOW>
 801492a:	2180      	movs	r1, #128	; 0x80
 801492c:	4896      	ldr	r0, [pc, #600]	; (8014b88 <readGRAM+0xfa8>)
 801492e:	f7fc ff22 	bl	8011776 <PIN_LOW>
 8014932:	2180      	movs	r1, #128	; 0x80
 8014934:	4894      	ldr	r0, [pc, #592]	; (8014b88 <readGRAM+0xfa8>)
 8014936:	f7fc ff1e 	bl	8011776 <PIN_LOW>
 801493a:	2180      	movs	r1, #128	; 0x80
 801493c:	4892      	ldr	r0, [pc, #584]	; (8014b88 <readGRAM+0xfa8>)
 801493e:	f7fc ff1a 	bl	8011776 <PIN_LOW>
 8014942:	2180      	movs	r1, #128	; 0x80
 8014944:	4890      	ldr	r0, [pc, #576]	; (8014b88 <readGRAM+0xfa8>)
 8014946:	f7fc ff16 	bl	8011776 <PIN_LOW>
 801494a:	2180      	movs	r1, #128	; 0x80
 801494c:	488e      	ldr	r0, [pc, #568]	; (8014b88 <readGRAM+0xfa8>)
 801494e:	f7fc ff12 	bl	8011776 <PIN_LOW>
 8014952:	2180      	movs	r1, #128	; 0x80
 8014954:	488c      	ldr	r0, [pc, #560]	; (8014b88 <readGRAM+0xfa8>)
 8014956:	f7fc ff0e 	bl	8011776 <PIN_LOW>
 801495a:	2180      	movs	r1, #128	; 0x80
 801495c:	488a      	ldr	r0, [pc, #552]	; (8014b88 <readGRAM+0xfa8>)
 801495e:	f7fc ff0a 	bl	8011776 <PIN_LOW>
 8014962:	2180      	movs	r1, #128	; 0x80
 8014964:	4888      	ldr	r0, [pc, #544]	; (8014b88 <readGRAM+0xfa8>)
 8014966:	f7fc ff06 	bl	8011776 <PIN_LOW>
 801496a:	2180      	movs	r1, #128	; 0x80
 801496c:	4886      	ldr	r0, [pc, #536]	; (8014b88 <readGRAM+0xfa8>)
 801496e:	f7fc ff02 	bl	8011776 <PIN_LOW>
 8014972:	2180      	movs	r1, #128	; 0x80
 8014974:	4884      	ldr	r0, [pc, #528]	; (8014b88 <readGRAM+0xfa8>)
 8014976:	f7fc fefe 	bl	8011776 <PIN_LOW>
 801497a:	2180      	movs	r1, #128	; 0x80
 801497c:	4882      	ldr	r0, [pc, #520]	; (8014b88 <readGRAM+0xfa8>)
 801497e:	f7fc fefa 	bl	8011776 <PIN_LOW>
 8014982:	2180      	movs	r1, #128	; 0x80
 8014984:	4880      	ldr	r0, [pc, #512]	; (8014b88 <readGRAM+0xfa8>)
 8014986:	f7fc fef6 	bl	8011776 <PIN_LOW>
 801498a:	2180      	movs	r1, #128	; 0x80
 801498c:	487e      	ldr	r0, [pc, #504]	; (8014b88 <readGRAM+0xfa8>)
 801498e:	f7fc fef2 	bl	8011776 <PIN_LOW>
 8014992:	2180      	movs	r1, #128	; 0x80
 8014994:	487c      	ldr	r0, [pc, #496]	; (8014b88 <readGRAM+0xfa8>)
 8014996:	f7fc feee 	bl	8011776 <PIN_LOW>
 801499a:	2180      	movs	r1, #128	; 0x80
 801499c:	487a      	ldr	r0, [pc, #488]	; (8014b88 <readGRAM+0xfa8>)
 801499e:	f7fc feea 	bl	8011776 <PIN_LOW>
 80149a2:	2180      	movs	r1, #128	; 0x80
 80149a4:	4878      	ldr	r0, [pc, #480]	; (8014b88 <readGRAM+0xfa8>)
 80149a6:	f7fc fee6 	bl	8011776 <PIN_LOW>
 80149aa:	2180      	movs	r1, #128	; 0x80
 80149ac:	4876      	ldr	r0, [pc, #472]	; (8014b88 <readGRAM+0xfa8>)
 80149ae:	f7fc fee2 	bl	8011776 <PIN_LOW>
 80149b2:	2180      	movs	r1, #128	; 0x80
 80149b4:	4874      	ldr	r0, [pc, #464]	; (8014b88 <readGRAM+0xfa8>)
 80149b6:	f7fc fede 	bl	8011776 <PIN_LOW>
 80149ba:	2180      	movs	r1, #128	; 0x80
 80149bc:	4872      	ldr	r0, [pc, #456]	; (8014b88 <readGRAM+0xfa8>)
 80149be:	f7fc feda 	bl	8011776 <PIN_LOW>
 80149c2:	2180      	movs	r1, #128	; 0x80
 80149c4:	4870      	ldr	r0, [pc, #448]	; (8014b88 <readGRAM+0xfa8>)
 80149c6:	f7fc fed6 	bl	8011776 <PIN_LOW>
 80149ca:	2180      	movs	r1, #128	; 0x80
 80149cc:	486e      	ldr	r0, [pc, #440]	; (8014b88 <readGRAM+0xfa8>)
 80149ce:	f7fc fed2 	bl	8011776 <PIN_LOW>
 80149d2:	2180      	movs	r1, #128	; 0x80
 80149d4:	486c      	ldr	r0, [pc, #432]	; (8014b88 <readGRAM+0xfa8>)
 80149d6:	f7fc fece 	bl	8011776 <PIN_LOW>
 80149da:	2180      	movs	r1, #128	; 0x80
 80149dc:	486a      	ldr	r0, [pc, #424]	; (8014b88 <readGRAM+0xfa8>)
 80149de:	f7fc feca 	bl	8011776 <PIN_LOW>
 80149e2:	2180      	movs	r1, #128	; 0x80
 80149e4:	4868      	ldr	r0, [pc, #416]	; (8014b88 <readGRAM+0xfa8>)
 80149e6:	f7fc fec6 	bl	8011776 <PIN_LOW>
 80149ea:	2180      	movs	r1, #128	; 0x80
 80149ec:	4866      	ldr	r0, [pc, #408]	; (8014b88 <readGRAM+0xfa8>)
 80149ee:	f7fc fec2 	bl	8011776 <PIN_LOW>
 80149f2:	2180      	movs	r1, #128	; 0x80
 80149f4:	4864      	ldr	r0, [pc, #400]	; (8014b88 <readGRAM+0xfa8>)
 80149f6:	f7fc febe 	bl	8011776 <PIN_LOW>
 80149fa:	2180      	movs	r1, #128	; 0x80
 80149fc:	4862      	ldr	r0, [pc, #392]	; (8014b88 <readGRAM+0xfa8>)
 80149fe:	f7fc feba 	bl	8011776 <PIN_LOW>
 8014a02:	2180      	movs	r1, #128	; 0x80
 8014a04:	4860      	ldr	r0, [pc, #384]	; (8014b88 <readGRAM+0xfa8>)
 8014a06:	f7fc feb6 	bl	8011776 <PIN_LOW>
 8014a0a:	2180      	movs	r1, #128	; 0x80
 8014a0c:	485e      	ldr	r0, [pc, #376]	; (8014b88 <readGRAM+0xfa8>)
 8014a0e:	f7fc feb2 	bl	8011776 <PIN_LOW>
 8014a12:	2180      	movs	r1, #128	; 0x80
 8014a14:	485c      	ldr	r0, [pc, #368]	; (8014b88 <readGRAM+0xfa8>)
 8014a16:	f7fc feae 	bl	8011776 <PIN_LOW>
 8014a1a:	2180      	movs	r1, #128	; 0x80
 8014a1c:	485a      	ldr	r0, [pc, #360]	; (8014b88 <readGRAM+0xfa8>)
 8014a1e:	f7fc feaa 	bl	8011776 <PIN_LOW>
 8014a22:	4b5a      	ldr	r3, [pc, #360]	; (8014b8c <readGRAM+0xfac>)
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	0b1b      	lsrs	r3, r3, #12
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	f003 0301 	and.w	r3, r3, #1
 8014a2e:	b2da      	uxtb	r2, r3
 8014a30:	4b55      	ldr	r3, [pc, #340]	; (8014b88 <readGRAM+0xfa8>)
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	0b9b      	lsrs	r3, r3, #14
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	f003 0302 	and.w	r3, r3, #2
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	4b52      	ldr	r3, [pc, #328]	; (8014b8c <readGRAM+0xfac>)
 8014a44:	691b      	ldr	r3, [r3, #16]
 8014a46:	0b5b      	lsrs	r3, r3, #13
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	f003 0304 	and.w	r3, r3, #4
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	4313      	orrs	r3, r2
 8014a52:	b2da      	uxtb	r2, r3
 8014a54:	4b4e      	ldr	r3, [pc, #312]	; (8014b90 <readGRAM+0xfb0>)
 8014a56:	691b      	ldr	r3, [r3, #16]
 8014a58:	0a9b      	lsrs	r3, r3, #10
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	f003 0308 	and.w	r3, r3, #8
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	4313      	orrs	r3, r2
 8014a64:	b2da      	uxtb	r2, r3
 8014a66:	4b49      	ldr	r3, [pc, #292]	; (8014b8c <readGRAM+0xfac>)
 8014a68:	691b      	ldr	r3, [r3, #16]
 8014a6a:	0a9b      	lsrs	r3, r3, #10
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	f003 0310 	and.w	r3, r3, #16
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	4313      	orrs	r3, r2
 8014a76:	b2da      	uxtb	r2, r3
 8014a78:	4b45      	ldr	r3, [pc, #276]	; (8014b90 <readGRAM+0xfb0>)
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	099b      	lsrs	r3, r3, #6
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	f003 0320 	and.w	r3, r3, #32
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	4313      	orrs	r3, r2
 8014a88:	b2da      	uxtb	r2, r3
 8014a8a:	4b41      	ldr	r3, [pc, #260]	; (8014b90 <readGRAM+0xfb0>)
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	08db      	lsrs	r3, r3, #3
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	4313      	orrs	r3, r2
 8014a9a:	b2da      	uxtb	r2, r3
 8014a9c:	4b3b      	ldr	r3, [pc, #236]	; (8014b8c <readGRAM+0xfac>)
 8014a9e:	691b      	ldr	r3, [r3, #16]
 8014aa0:	099b      	lsrs	r3, r3, #6
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014aa8:	b2db      	uxtb	r3, r3
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	75fb      	strb	r3, [r7, #23]
 8014aae:	2180      	movs	r1, #128	; 0x80
 8014ab0:	4835      	ldr	r0, [pc, #212]	; (8014b88 <readGRAM+0xfa8>)
 8014ab2:	f7fc fe70 	bl	8011796 <PIN_HIGH>
 8014ab6:	2180      	movs	r1, #128	; 0x80
 8014ab8:	4833      	ldr	r0, [pc, #204]	; (8014b88 <readGRAM+0xfa8>)
 8014aba:	f7fc fe6c 	bl	8011796 <PIN_HIGH>
                READ_8(g);
 8014abe:	2180      	movs	r1, #128	; 0x80
 8014ac0:	4831      	ldr	r0, [pc, #196]	; (8014b88 <readGRAM+0xfa8>)
 8014ac2:	f7fc fe68 	bl	8011796 <PIN_HIGH>
 8014ac6:	2180      	movs	r1, #128	; 0x80
 8014ac8:	482f      	ldr	r0, [pc, #188]	; (8014b88 <readGRAM+0xfa8>)
 8014aca:	f7fc fe54 	bl	8011776 <PIN_LOW>
 8014ace:	2180      	movs	r1, #128	; 0x80
 8014ad0:	482d      	ldr	r0, [pc, #180]	; (8014b88 <readGRAM+0xfa8>)
 8014ad2:	f7fc fe50 	bl	8011776 <PIN_LOW>
 8014ad6:	2180      	movs	r1, #128	; 0x80
 8014ad8:	482b      	ldr	r0, [pc, #172]	; (8014b88 <readGRAM+0xfa8>)
 8014ada:	f7fc fe4c 	bl	8011776 <PIN_LOW>
 8014ade:	2180      	movs	r1, #128	; 0x80
 8014ae0:	4829      	ldr	r0, [pc, #164]	; (8014b88 <readGRAM+0xfa8>)
 8014ae2:	f7fc fe48 	bl	8011776 <PIN_LOW>
 8014ae6:	2180      	movs	r1, #128	; 0x80
 8014ae8:	4827      	ldr	r0, [pc, #156]	; (8014b88 <readGRAM+0xfa8>)
 8014aea:	f7fc fe44 	bl	8011776 <PIN_LOW>
 8014aee:	2180      	movs	r1, #128	; 0x80
 8014af0:	4825      	ldr	r0, [pc, #148]	; (8014b88 <readGRAM+0xfa8>)
 8014af2:	f7fc fe40 	bl	8011776 <PIN_LOW>
 8014af6:	2180      	movs	r1, #128	; 0x80
 8014af8:	4823      	ldr	r0, [pc, #140]	; (8014b88 <readGRAM+0xfa8>)
 8014afa:	f7fc fe3c 	bl	8011776 <PIN_LOW>
 8014afe:	2180      	movs	r1, #128	; 0x80
 8014b00:	4821      	ldr	r0, [pc, #132]	; (8014b88 <readGRAM+0xfa8>)
 8014b02:	f7fc fe38 	bl	8011776 <PIN_LOW>
 8014b06:	2180      	movs	r1, #128	; 0x80
 8014b08:	481f      	ldr	r0, [pc, #124]	; (8014b88 <readGRAM+0xfa8>)
 8014b0a:	f7fc fe34 	bl	8011776 <PIN_LOW>
 8014b0e:	2180      	movs	r1, #128	; 0x80
 8014b10:	481d      	ldr	r0, [pc, #116]	; (8014b88 <readGRAM+0xfa8>)
 8014b12:	f7fc fe30 	bl	8011776 <PIN_LOW>
 8014b16:	2180      	movs	r1, #128	; 0x80
 8014b18:	481b      	ldr	r0, [pc, #108]	; (8014b88 <readGRAM+0xfa8>)
 8014b1a:	f7fc fe2c 	bl	8011776 <PIN_LOW>
 8014b1e:	2180      	movs	r1, #128	; 0x80
 8014b20:	4819      	ldr	r0, [pc, #100]	; (8014b88 <readGRAM+0xfa8>)
 8014b22:	f7fc fe28 	bl	8011776 <PIN_LOW>
 8014b26:	2180      	movs	r1, #128	; 0x80
 8014b28:	4817      	ldr	r0, [pc, #92]	; (8014b88 <readGRAM+0xfa8>)
 8014b2a:	f7fc fe24 	bl	8011776 <PIN_LOW>
 8014b2e:	2180      	movs	r1, #128	; 0x80
 8014b30:	4815      	ldr	r0, [pc, #84]	; (8014b88 <readGRAM+0xfa8>)
 8014b32:	f7fc fe20 	bl	8011776 <PIN_LOW>
 8014b36:	2180      	movs	r1, #128	; 0x80
 8014b38:	4813      	ldr	r0, [pc, #76]	; (8014b88 <readGRAM+0xfa8>)
 8014b3a:	f7fc fe1c 	bl	8011776 <PIN_LOW>
 8014b3e:	2180      	movs	r1, #128	; 0x80
 8014b40:	4811      	ldr	r0, [pc, #68]	; (8014b88 <readGRAM+0xfa8>)
 8014b42:	f7fc fe18 	bl	8011776 <PIN_LOW>
 8014b46:	2180      	movs	r1, #128	; 0x80
 8014b48:	480f      	ldr	r0, [pc, #60]	; (8014b88 <readGRAM+0xfa8>)
 8014b4a:	f7fc fe14 	bl	8011776 <PIN_LOW>
 8014b4e:	2180      	movs	r1, #128	; 0x80
 8014b50:	480d      	ldr	r0, [pc, #52]	; (8014b88 <readGRAM+0xfa8>)
 8014b52:	f7fc fe10 	bl	8011776 <PIN_LOW>
 8014b56:	2180      	movs	r1, #128	; 0x80
 8014b58:	480b      	ldr	r0, [pc, #44]	; (8014b88 <readGRAM+0xfa8>)
 8014b5a:	f7fc fe0c 	bl	8011776 <PIN_LOW>
 8014b5e:	2180      	movs	r1, #128	; 0x80
 8014b60:	4809      	ldr	r0, [pc, #36]	; (8014b88 <readGRAM+0xfa8>)
 8014b62:	f7fc fe08 	bl	8011776 <PIN_LOW>
 8014b66:	2180      	movs	r1, #128	; 0x80
 8014b68:	4807      	ldr	r0, [pc, #28]	; (8014b88 <readGRAM+0xfa8>)
 8014b6a:	f7fc fe04 	bl	8011776 <PIN_LOW>
 8014b6e:	2180      	movs	r1, #128	; 0x80
 8014b70:	4805      	ldr	r0, [pc, #20]	; (8014b88 <readGRAM+0xfa8>)
 8014b72:	f7fc fe00 	bl	8011776 <PIN_LOW>
 8014b76:	2180      	movs	r1, #128	; 0x80
 8014b78:	4803      	ldr	r0, [pc, #12]	; (8014b88 <readGRAM+0xfa8>)
 8014b7a:	f7fc fdfc 	bl	8011776 <PIN_LOW>
 8014b7e:	2180      	movs	r1, #128	; 0x80
 8014b80:	e008      	b.n	8014b94 <readGRAM+0xfb4>
 8014b82:	bf00      	nop
 8014b84:	2000698e 	.word	0x2000698e
 8014b88:	40020c00 	.word	0x40020c00
 8014b8c:	40021400 	.word	0x40021400
 8014b90:	40021000 	.word	0x40021000
 8014b94:	48c3      	ldr	r0, [pc, #780]	; (8014ea4 <readGRAM+0x12c4>)
 8014b96:	f7fc fdee 	bl	8011776 <PIN_LOW>
 8014b9a:	2180      	movs	r1, #128	; 0x80
 8014b9c:	48c1      	ldr	r0, [pc, #772]	; (8014ea4 <readGRAM+0x12c4>)
 8014b9e:	f7fc fdea 	bl	8011776 <PIN_LOW>
 8014ba2:	2180      	movs	r1, #128	; 0x80
 8014ba4:	48bf      	ldr	r0, [pc, #764]	; (8014ea4 <readGRAM+0x12c4>)
 8014ba6:	f7fc fde6 	bl	8011776 <PIN_LOW>
 8014baa:	2180      	movs	r1, #128	; 0x80
 8014bac:	48bd      	ldr	r0, [pc, #756]	; (8014ea4 <readGRAM+0x12c4>)
 8014bae:	f7fc fde2 	bl	8011776 <PIN_LOW>
 8014bb2:	2180      	movs	r1, #128	; 0x80
 8014bb4:	48bb      	ldr	r0, [pc, #748]	; (8014ea4 <readGRAM+0x12c4>)
 8014bb6:	f7fc fdde 	bl	8011776 <PIN_LOW>
 8014bba:	2180      	movs	r1, #128	; 0x80
 8014bbc:	48b9      	ldr	r0, [pc, #740]	; (8014ea4 <readGRAM+0x12c4>)
 8014bbe:	f7fc fdda 	bl	8011776 <PIN_LOW>
 8014bc2:	2180      	movs	r1, #128	; 0x80
 8014bc4:	48b7      	ldr	r0, [pc, #732]	; (8014ea4 <readGRAM+0x12c4>)
 8014bc6:	f7fc fdd6 	bl	8011776 <PIN_LOW>
 8014bca:	2180      	movs	r1, #128	; 0x80
 8014bcc:	48b5      	ldr	r0, [pc, #724]	; (8014ea4 <readGRAM+0x12c4>)
 8014bce:	f7fc fdd2 	bl	8011776 <PIN_LOW>
 8014bd2:	2180      	movs	r1, #128	; 0x80
 8014bd4:	48b3      	ldr	r0, [pc, #716]	; (8014ea4 <readGRAM+0x12c4>)
 8014bd6:	f7fc fdce 	bl	8011776 <PIN_LOW>
 8014bda:	2180      	movs	r1, #128	; 0x80
 8014bdc:	48b1      	ldr	r0, [pc, #708]	; (8014ea4 <readGRAM+0x12c4>)
 8014bde:	f7fc fdca 	bl	8011776 <PIN_LOW>
 8014be2:	2180      	movs	r1, #128	; 0x80
 8014be4:	48af      	ldr	r0, [pc, #700]	; (8014ea4 <readGRAM+0x12c4>)
 8014be6:	f7fc fdc6 	bl	8011776 <PIN_LOW>
 8014bea:	2180      	movs	r1, #128	; 0x80
 8014bec:	48ad      	ldr	r0, [pc, #692]	; (8014ea4 <readGRAM+0x12c4>)
 8014bee:	f7fc fdc2 	bl	8011776 <PIN_LOW>
 8014bf2:	2180      	movs	r1, #128	; 0x80
 8014bf4:	48ab      	ldr	r0, [pc, #684]	; (8014ea4 <readGRAM+0x12c4>)
 8014bf6:	f7fc fdbe 	bl	8011776 <PIN_LOW>
 8014bfa:	2180      	movs	r1, #128	; 0x80
 8014bfc:	48a9      	ldr	r0, [pc, #676]	; (8014ea4 <readGRAM+0x12c4>)
 8014bfe:	f7fc fdba 	bl	8011776 <PIN_LOW>
 8014c02:	2180      	movs	r1, #128	; 0x80
 8014c04:	48a7      	ldr	r0, [pc, #668]	; (8014ea4 <readGRAM+0x12c4>)
 8014c06:	f7fc fdb6 	bl	8011776 <PIN_LOW>
 8014c0a:	2180      	movs	r1, #128	; 0x80
 8014c0c:	48a5      	ldr	r0, [pc, #660]	; (8014ea4 <readGRAM+0x12c4>)
 8014c0e:	f7fc fdb2 	bl	8011776 <PIN_LOW>
 8014c12:	2180      	movs	r1, #128	; 0x80
 8014c14:	48a3      	ldr	r0, [pc, #652]	; (8014ea4 <readGRAM+0x12c4>)
 8014c16:	f7fc fdae 	bl	8011776 <PIN_LOW>
 8014c1a:	2180      	movs	r1, #128	; 0x80
 8014c1c:	48a1      	ldr	r0, [pc, #644]	; (8014ea4 <readGRAM+0x12c4>)
 8014c1e:	f7fc fdaa 	bl	8011776 <PIN_LOW>
 8014c22:	2180      	movs	r1, #128	; 0x80
 8014c24:	489f      	ldr	r0, [pc, #636]	; (8014ea4 <readGRAM+0x12c4>)
 8014c26:	f7fc fda6 	bl	8011776 <PIN_LOW>
 8014c2a:	2180      	movs	r1, #128	; 0x80
 8014c2c:	489d      	ldr	r0, [pc, #628]	; (8014ea4 <readGRAM+0x12c4>)
 8014c2e:	f7fc fda2 	bl	8011776 <PIN_LOW>
 8014c32:	2180      	movs	r1, #128	; 0x80
 8014c34:	489b      	ldr	r0, [pc, #620]	; (8014ea4 <readGRAM+0x12c4>)
 8014c36:	f7fc fd9e 	bl	8011776 <PIN_LOW>
 8014c3a:	2180      	movs	r1, #128	; 0x80
 8014c3c:	4899      	ldr	r0, [pc, #612]	; (8014ea4 <readGRAM+0x12c4>)
 8014c3e:	f7fc fd9a 	bl	8011776 <PIN_LOW>
 8014c42:	2180      	movs	r1, #128	; 0x80
 8014c44:	4897      	ldr	r0, [pc, #604]	; (8014ea4 <readGRAM+0x12c4>)
 8014c46:	f7fc fd96 	bl	8011776 <PIN_LOW>
 8014c4a:	2180      	movs	r1, #128	; 0x80
 8014c4c:	4895      	ldr	r0, [pc, #596]	; (8014ea4 <readGRAM+0x12c4>)
 8014c4e:	f7fc fd92 	bl	8011776 <PIN_LOW>
 8014c52:	2180      	movs	r1, #128	; 0x80
 8014c54:	4893      	ldr	r0, [pc, #588]	; (8014ea4 <readGRAM+0x12c4>)
 8014c56:	f7fc fd8e 	bl	8011776 <PIN_LOW>
 8014c5a:	2180      	movs	r1, #128	; 0x80
 8014c5c:	4891      	ldr	r0, [pc, #580]	; (8014ea4 <readGRAM+0x12c4>)
 8014c5e:	f7fc fd8a 	bl	8011776 <PIN_LOW>
 8014c62:	2180      	movs	r1, #128	; 0x80
 8014c64:	488f      	ldr	r0, [pc, #572]	; (8014ea4 <readGRAM+0x12c4>)
 8014c66:	f7fc fd86 	bl	8011776 <PIN_LOW>
 8014c6a:	2180      	movs	r1, #128	; 0x80
 8014c6c:	488d      	ldr	r0, [pc, #564]	; (8014ea4 <readGRAM+0x12c4>)
 8014c6e:	f7fc fd82 	bl	8011776 <PIN_LOW>
 8014c72:	4b8d      	ldr	r3, [pc, #564]	; (8014ea8 <readGRAM+0x12c8>)
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	0b1b      	lsrs	r3, r3, #12
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	f003 0301 	and.w	r3, r3, #1
 8014c7e:	b2da      	uxtb	r2, r3
 8014c80:	4b88      	ldr	r3, [pc, #544]	; (8014ea4 <readGRAM+0x12c4>)
 8014c82:	691b      	ldr	r3, [r3, #16]
 8014c84:	0b9b      	lsrs	r3, r3, #14
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	4313      	orrs	r3, r2
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	4b85      	ldr	r3, [pc, #532]	; (8014ea8 <readGRAM+0x12c8>)
 8014c94:	691b      	ldr	r3, [r3, #16]
 8014c96:	0b5b      	lsrs	r3, r3, #13
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	f003 0304 	and.w	r3, r3, #4
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	4313      	orrs	r3, r2
 8014ca2:	b2da      	uxtb	r2, r3
 8014ca4:	4b81      	ldr	r3, [pc, #516]	; (8014eac <readGRAM+0x12cc>)
 8014ca6:	691b      	ldr	r3, [r3, #16]
 8014ca8:	0a9b      	lsrs	r3, r3, #10
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	f003 0308 	and.w	r3, r3, #8
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	4313      	orrs	r3, r2
 8014cb4:	b2da      	uxtb	r2, r3
 8014cb6:	4b7c      	ldr	r3, [pc, #496]	; (8014ea8 <readGRAM+0x12c8>)
 8014cb8:	691b      	ldr	r3, [r3, #16]
 8014cba:	0a9b      	lsrs	r3, r3, #10
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	f003 0310 	and.w	r3, r3, #16
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	4313      	orrs	r3, r2
 8014cc6:	b2da      	uxtb	r2, r3
 8014cc8:	4b78      	ldr	r3, [pc, #480]	; (8014eac <readGRAM+0x12cc>)
 8014cca:	691b      	ldr	r3, [r3, #16]
 8014ccc:	099b      	lsrs	r3, r3, #6
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	f003 0320 	and.w	r3, r3, #32
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	4313      	orrs	r3, r2
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	4b74      	ldr	r3, [pc, #464]	; (8014eac <readGRAM+0x12cc>)
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	08db      	lsrs	r3, r3, #3
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	4313      	orrs	r3, r2
 8014cea:	b2da      	uxtb	r2, r3
 8014cec:	4b6e      	ldr	r3, [pc, #440]	; (8014ea8 <readGRAM+0x12c8>)
 8014cee:	691b      	ldr	r3, [r3, #16]
 8014cf0:	099b      	lsrs	r3, r3, #6
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	757b      	strb	r3, [r7, #21]
 8014cfe:	2180      	movs	r1, #128	; 0x80
 8014d00:	4868      	ldr	r0, [pc, #416]	; (8014ea4 <readGRAM+0x12c4>)
 8014d02:	f7fc fd48 	bl	8011796 <PIN_HIGH>
 8014d06:	2180      	movs	r1, #128	; 0x80
 8014d08:	4866      	ldr	r0, [pc, #408]	; (8014ea4 <readGRAM+0x12c4>)
 8014d0a:	f7fc fd44 	bl	8011796 <PIN_HIGH>
                READ_8(b);
 8014d0e:	2180      	movs	r1, #128	; 0x80
 8014d10:	4864      	ldr	r0, [pc, #400]	; (8014ea4 <readGRAM+0x12c4>)
 8014d12:	f7fc fd40 	bl	8011796 <PIN_HIGH>
 8014d16:	2180      	movs	r1, #128	; 0x80
 8014d18:	4862      	ldr	r0, [pc, #392]	; (8014ea4 <readGRAM+0x12c4>)
 8014d1a:	f7fc fd2c 	bl	8011776 <PIN_LOW>
 8014d1e:	2180      	movs	r1, #128	; 0x80
 8014d20:	4860      	ldr	r0, [pc, #384]	; (8014ea4 <readGRAM+0x12c4>)
 8014d22:	f7fc fd28 	bl	8011776 <PIN_LOW>
 8014d26:	2180      	movs	r1, #128	; 0x80
 8014d28:	485e      	ldr	r0, [pc, #376]	; (8014ea4 <readGRAM+0x12c4>)
 8014d2a:	f7fc fd24 	bl	8011776 <PIN_LOW>
 8014d2e:	2180      	movs	r1, #128	; 0x80
 8014d30:	485c      	ldr	r0, [pc, #368]	; (8014ea4 <readGRAM+0x12c4>)
 8014d32:	f7fc fd20 	bl	8011776 <PIN_LOW>
 8014d36:	2180      	movs	r1, #128	; 0x80
 8014d38:	485a      	ldr	r0, [pc, #360]	; (8014ea4 <readGRAM+0x12c4>)
 8014d3a:	f7fc fd1c 	bl	8011776 <PIN_LOW>
 8014d3e:	2180      	movs	r1, #128	; 0x80
 8014d40:	4858      	ldr	r0, [pc, #352]	; (8014ea4 <readGRAM+0x12c4>)
 8014d42:	f7fc fd18 	bl	8011776 <PIN_LOW>
 8014d46:	2180      	movs	r1, #128	; 0x80
 8014d48:	4856      	ldr	r0, [pc, #344]	; (8014ea4 <readGRAM+0x12c4>)
 8014d4a:	f7fc fd14 	bl	8011776 <PIN_LOW>
 8014d4e:	2180      	movs	r1, #128	; 0x80
 8014d50:	4854      	ldr	r0, [pc, #336]	; (8014ea4 <readGRAM+0x12c4>)
 8014d52:	f7fc fd10 	bl	8011776 <PIN_LOW>
 8014d56:	2180      	movs	r1, #128	; 0x80
 8014d58:	4852      	ldr	r0, [pc, #328]	; (8014ea4 <readGRAM+0x12c4>)
 8014d5a:	f7fc fd0c 	bl	8011776 <PIN_LOW>
 8014d5e:	2180      	movs	r1, #128	; 0x80
 8014d60:	4850      	ldr	r0, [pc, #320]	; (8014ea4 <readGRAM+0x12c4>)
 8014d62:	f7fc fd08 	bl	8011776 <PIN_LOW>
 8014d66:	2180      	movs	r1, #128	; 0x80
 8014d68:	484e      	ldr	r0, [pc, #312]	; (8014ea4 <readGRAM+0x12c4>)
 8014d6a:	f7fc fd04 	bl	8011776 <PIN_LOW>
 8014d6e:	2180      	movs	r1, #128	; 0x80
 8014d70:	484c      	ldr	r0, [pc, #304]	; (8014ea4 <readGRAM+0x12c4>)
 8014d72:	f7fc fd00 	bl	8011776 <PIN_LOW>
 8014d76:	2180      	movs	r1, #128	; 0x80
 8014d78:	484a      	ldr	r0, [pc, #296]	; (8014ea4 <readGRAM+0x12c4>)
 8014d7a:	f7fc fcfc 	bl	8011776 <PIN_LOW>
 8014d7e:	2180      	movs	r1, #128	; 0x80
 8014d80:	4848      	ldr	r0, [pc, #288]	; (8014ea4 <readGRAM+0x12c4>)
 8014d82:	f7fc fcf8 	bl	8011776 <PIN_LOW>
 8014d86:	2180      	movs	r1, #128	; 0x80
 8014d88:	4846      	ldr	r0, [pc, #280]	; (8014ea4 <readGRAM+0x12c4>)
 8014d8a:	f7fc fcf4 	bl	8011776 <PIN_LOW>
 8014d8e:	2180      	movs	r1, #128	; 0x80
 8014d90:	4844      	ldr	r0, [pc, #272]	; (8014ea4 <readGRAM+0x12c4>)
 8014d92:	f7fc fcf0 	bl	8011776 <PIN_LOW>
 8014d96:	2180      	movs	r1, #128	; 0x80
 8014d98:	4842      	ldr	r0, [pc, #264]	; (8014ea4 <readGRAM+0x12c4>)
 8014d9a:	f7fc fcec 	bl	8011776 <PIN_LOW>
 8014d9e:	2180      	movs	r1, #128	; 0x80
 8014da0:	4840      	ldr	r0, [pc, #256]	; (8014ea4 <readGRAM+0x12c4>)
 8014da2:	f7fc fce8 	bl	8011776 <PIN_LOW>
 8014da6:	2180      	movs	r1, #128	; 0x80
 8014da8:	483e      	ldr	r0, [pc, #248]	; (8014ea4 <readGRAM+0x12c4>)
 8014daa:	f7fc fce4 	bl	8011776 <PIN_LOW>
 8014dae:	2180      	movs	r1, #128	; 0x80
 8014db0:	483c      	ldr	r0, [pc, #240]	; (8014ea4 <readGRAM+0x12c4>)
 8014db2:	f7fc fce0 	bl	8011776 <PIN_LOW>
 8014db6:	2180      	movs	r1, #128	; 0x80
 8014db8:	483a      	ldr	r0, [pc, #232]	; (8014ea4 <readGRAM+0x12c4>)
 8014dba:	f7fc fcdc 	bl	8011776 <PIN_LOW>
 8014dbe:	2180      	movs	r1, #128	; 0x80
 8014dc0:	4838      	ldr	r0, [pc, #224]	; (8014ea4 <readGRAM+0x12c4>)
 8014dc2:	f7fc fcd8 	bl	8011776 <PIN_LOW>
 8014dc6:	2180      	movs	r1, #128	; 0x80
 8014dc8:	4836      	ldr	r0, [pc, #216]	; (8014ea4 <readGRAM+0x12c4>)
 8014dca:	f7fc fcd4 	bl	8011776 <PIN_LOW>
 8014dce:	2180      	movs	r1, #128	; 0x80
 8014dd0:	4834      	ldr	r0, [pc, #208]	; (8014ea4 <readGRAM+0x12c4>)
 8014dd2:	f7fc fcd0 	bl	8011776 <PIN_LOW>
 8014dd6:	2180      	movs	r1, #128	; 0x80
 8014dd8:	4832      	ldr	r0, [pc, #200]	; (8014ea4 <readGRAM+0x12c4>)
 8014dda:	f7fc fccc 	bl	8011776 <PIN_LOW>
 8014dde:	2180      	movs	r1, #128	; 0x80
 8014de0:	4830      	ldr	r0, [pc, #192]	; (8014ea4 <readGRAM+0x12c4>)
 8014de2:	f7fc fcc8 	bl	8011776 <PIN_LOW>
 8014de6:	2180      	movs	r1, #128	; 0x80
 8014de8:	482e      	ldr	r0, [pc, #184]	; (8014ea4 <readGRAM+0x12c4>)
 8014dea:	f7fc fcc4 	bl	8011776 <PIN_LOW>
 8014dee:	2180      	movs	r1, #128	; 0x80
 8014df0:	482c      	ldr	r0, [pc, #176]	; (8014ea4 <readGRAM+0x12c4>)
 8014df2:	f7fc fcc0 	bl	8011776 <PIN_LOW>
 8014df6:	2180      	movs	r1, #128	; 0x80
 8014df8:	482a      	ldr	r0, [pc, #168]	; (8014ea4 <readGRAM+0x12c4>)
 8014dfa:	f7fc fcbc 	bl	8011776 <PIN_LOW>
 8014dfe:	2180      	movs	r1, #128	; 0x80
 8014e00:	4828      	ldr	r0, [pc, #160]	; (8014ea4 <readGRAM+0x12c4>)
 8014e02:	f7fc fcb8 	bl	8011776 <PIN_LOW>
 8014e06:	2180      	movs	r1, #128	; 0x80
 8014e08:	4826      	ldr	r0, [pc, #152]	; (8014ea4 <readGRAM+0x12c4>)
 8014e0a:	f7fc fcb4 	bl	8011776 <PIN_LOW>
 8014e0e:	2180      	movs	r1, #128	; 0x80
 8014e10:	4824      	ldr	r0, [pc, #144]	; (8014ea4 <readGRAM+0x12c4>)
 8014e12:	f7fc fcb0 	bl	8011776 <PIN_LOW>
 8014e16:	2180      	movs	r1, #128	; 0x80
 8014e18:	4822      	ldr	r0, [pc, #136]	; (8014ea4 <readGRAM+0x12c4>)
 8014e1a:	f7fc fcac 	bl	8011776 <PIN_LOW>
 8014e1e:	2180      	movs	r1, #128	; 0x80
 8014e20:	4820      	ldr	r0, [pc, #128]	; (8014ea4 <readGRAM+0x12c4>)
 8014e22:	f7fc fca8 	bl	8011776 <PIN_LOW>
 8014e26:	2180      	movs	r1, #128	; 0x80
 8014e28:	481e      	ldr	r0, [pc, #120]	; (8014ea4 <readGRAM+0x12c4>)
 8014e2a:	f7fc fca4 	bl	8011776 <PIN_LOW>
 8014e2e:	2180      	movs	r1, #128	; 0x80
 8014e30:	481c      	ldr	r0, [pc, #112]	; (8014ea4 <readGRAM+0x12c4>)
 8014e32:	f7fc fca0 	bl	8011776 <PIN_LOW>
 8014e36:	2180      	movs	r1, #128	; 0x80
 8014e38:	481a      	ldr	r0, [pc, #104]	; (8014ea4 <readGRAM+0x12c4>)
 8014e3a:	f7fc fc9c 	bl	8011776 <PIN_LOW>
 8014e3e:	2180      	movs	r1, #128	; 0x80
 8014e40:	4818      	ldr	r0, [pc, #96]	; (8014ea4 <readGRAM+0x12c4>)
 8014e42:	f7fc fc98 	bl	8011776 <PIN_LOW>
 8014e46:	2180      	movs	r1, #128	; 0x80
 8014e48:	4816      	ldr	r0, [pc, #88]	; (8014ea4 <readGRAM+0x12c4>)
 8014e4a:	f7fc fc94 	bl	8011776 <PIN_LOW>
 8014e4e:	2180      	movs	r1, #128	; 0x80
 8014e50:	4814      	ldr	r0, [pc, #80]	; (8014ea4 <readGRAM+0x12c4>)
 8014e52:	f7fc fc90 	bl	8011776 <PIN_LOW>
 8014e56:	2180      	movs	r1, #128	; 0x80
 8014e58:	4812      	ldr	r0, [pc, #72]	; (8014ea4 <readGRAM+0x12c4>)
 8014e5a:	f7fc fc8c 	bl	8011776 <PIN_LOW>
 8014e5e:	2180      	movs	r1, #128	; 0x80
 8014e60:	4810      	ldr	r0, [pc, #64]	; (8014ea4 <readGRAM+0x12c4>)
 8014e62:	f7fc fc88 	bl	8011776 <PIN_LOW>
 8014e66:	2180      	movs	r1, #128	; 0x80
 8014e68:	480e      	ldr	r0, [pc, #56]	; (8014ea4 <readGRAM+0x12c4>)
 8014e6a:	f7fc fc84 	bl	8011776 <PIN_LOW>
 8014e6e:	2180      	movs	r1, #128	; 0x80
 8014e70:	480c      	ldr	r0, [pc, #48]	; (8014ea4 <readGRAM+0x12c4>)
 8014e72:	f7fc fc80 	bl	8011776 <PIN_LOW>
 8014e76:	2180      	movs	r1, #128	; 0x80
 8014e78:	480a      	ldr	r0, [pc, #40]	; (8014ea4 <readGRAM+0x12c4>)
 8014e7a:	f7fc fc7c 	bl	8011776 <PIN_LOW>
 8014e7e:	2180      	movs	r1, #128	; 0x80
 8014e80:	4808      	ldr	r0, [pc, #32]	; (8014ea4 <readGRAM+0x12c4>)
 8014e82:	f7fc fc78 	bl	8011776 <PIN_LOW>
 8014e86:	2180      	movs	r1, #128	; 0x80
 8014e88:	4806      	ldr	r0, [pc, #24]	; (8014ea4 <readGRAM+0x12c4>)
 8014e8a:	f7fc fc74 	bl	8011776 <PIN_LOW>
 8014e8e:	2180      	movs	r1, #128	; 0x80
 8014e90:	4804      	ldr	r0, [pc, #16]	; (8014ea4 <readGRAM+0x12c4>)
 8014e92:	f7fc fc70 	bl	8011776 <PIN_LOW>
 8014e96:	2180      	movs	r1, #128	; 0x80
 8014e98:	4802      	ldr	r0, [pc, #8]	; (8014ea4 <readGRAM+0x12c4>)
 8014e9a:	f7fc fc6c 	bl	8011776 <PIN_LOW>
 8014e9e:	2180      	movs	r1, #128	; 0x80
 8014ea0:	e006      	b.n	8014eb0 <readGRAM+0x12d0>
 8014ea2:	bf00      	nop
 8014ea4:	40020c00 	.word	0x40020c00
 8014ea8:	40021400 	.word	0x40021400
 8014eac:	40021000 	.word	0x40021000
 8014eb0:	4836      	ldr	r0, [pc, #216]	; (8014f8c <readGRAM+0x13ac>)
 8014eb2:	f7fc fc60 	bl	8011776 <PIN_LOW>
 8014eb6:	2180      	movs	r1, #128	; 0x80
 8014eb8:	4834      	ldr	r0, [pc, #208]	; (8014f8c <readGRAM+0x13ac>)
 8014eba:	f7fc fc5c 	bl	8011776 <PIN_LOW>
 8014ebe:	4b34      	ldr	r3, [pc, #208]	; (8014f90 <readGRAM+0x13b0>)
 8014ec0:	691b      	ldr	r3, [r3, #16]
 8014ec2:	0b1b      	lsrs	r3, r3, #12
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	f003 0301 	and.w	r3, r3, #1
 8014eca:	b2da      	uxtb	r2, r3
 8014ecc:	4b2f      	ldr	r3, [pc, #188]	; (8014f8c <readGRAM+0x13ac>)
 8014ece:	691b      	ldr	r3, [r3, #16]
 8014ed0:	0b9b      	lsrs	r3, r3, #14
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	f003 0302 	and.w	r3, r3, #2
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	4313      	orrs	r3, r2
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	4b2c      	ldr	r3, [pc, #176]	; (8014f90 <readGRAM+0x13b0>)
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	0b5b      	lsrs	r3, r3, #13
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	f003 0304 	and.w	r3, r3, #4
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	4313      	orrs	r3, r2
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	4b28      	ldr	r3, [pc, #160]	; (8014f94 <readGRAM+0x13b4>)
 8014ef2:	691b      	ldr	r3, [r3, #16]
 8014ef4:	0a9b      	lsrs	r3, r3, #10
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	f003 0308 	and.w	r3, r3, #8
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	4313      	orrs	r3, r2
 8014f00:	b2da      	uxtb	r2, r3
 8014f02:	4b23      	ldr	r3, [pc, #140]	; (8014f90 <readGRAM+0x13b0>)
 8014f04:	691b      	ldr	r3, [r3, #16]
 8014f06:	0a9b      	lsrs	r3, r3, #10
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	f003 0310 	and.w	r3, r3, #16
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	4313      	orrs	r3, r2
 8014f12:	b2da      	uxtb	r2, r3
 8014f14:	4b1f      	ldr	r3, [pc, #124]	; (8014f94 <readGRAM+0x13b4>)
 8014f16:	691b      	ldr	r3, [r3, #16]
 8014f18:	099b      	lsrs	r3, r3, #6
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	f003 0320 	and.w	r3, r3, #32
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	4313      	orrs	r3, r2
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	4b1b      	ldr	r3, [pc, #108]	; (8014f94 <readGRAM+0x13b4>)
 8014f28:	691b      	ldr	r3, [r3, #16]
 8014f2a:	08db      	lsrs	r3, r3, #3
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	4313      	orrs	r3, r2
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	4b15      	ldr	r3, [pc, #84]	; (8014f90 <readGRAM+0x13b0>)
 8014f3a:	691b      	ldr	r3, [r3, #16]
 8014f3c:	099b      	lsrs	r3, r3, #6
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	4313      	orrs	r3, r2
 8014f48:	753b      	strb	r3, [r7, #20]
 8014f4a:	2180      	movs	r1, #128	; 0x80
 8014f4c:	480f      	ldr	r0, [pc, #60]	; (8014f8c <readGRAM+0x13ac>)
 8014f4e:	f7fc fc22 	bl	8011796 <PIN_HIGH>
 8014f52:	2180      	movs	r1, #128	; 0x80
 8014f54:	480d      	ldr	r0, [pc, #52]	; (8014f8c <readGRAM+0x13ac>)
 8014f56:	f7fc fc1e 	bl	8011796 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8014f5a:	4b0f      	ldr	r3, [pc, #60]	; (8014f98 <readGRAM+0x13b8>)
 8014f5c:	881b      	ldrh	r3, [r3, #0]
 8014f5e:	f003 0304 	and.w	r3, r3, #4
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d008      	beq.n	8014f78 <readGRAM+0x1398>
                    ret = color565(b, g, r);
 8014f66:	7dfa      	ldrb	r2, [r7, #23]
 8014f68:	7d79      	ldrb	r1, [r7, #21]
 8014f6a:	7d3b      	ldrb	r3, [r7, #20]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fc fcdb 	bl	8011928 <color565>
 8014f72:	4603      	mov	r3, r0
 8014f74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f76:	e283      	b.n	8015480 <readGRAM+0x18a0>
                else
                    ret = color565(r, g, b);
 8014f78:	7d3a      	ldrb	r2, [r7, #20]
 8014f7a:	7d79      	ldrb	r1, [r7, #21]
 8014f7c:	7dfb      	ldrb	r3, [r7, #23]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7fc fcd2 	bl	8011928 <color565>
 8014f84:	4603      	mov	r3, r0
 8014f86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f88:	e27a      	b.n	8015480 <readGRAM+0x18a0>
 8014f8a:	bf00      	nop
 8014f8c:	40020c00 	.word	0x40020c00
 8014f90:	40021400 	.word	0x40021400
 8014f94:	40021000 	.word	0x40021000
 8014f98:	2000698e 	.word	0x2000698e
            } else
            {
                READ_16(ret);
 8014f9c:	2180      	movs	r1, #128	; 0x80
 8014f9e:	48c3      	ldr	r0, [pc, #780]	; (80152ac <readGRAM+0x16cc>)
 8014fa0:	f7fc fbf9 	bl	8011796 <PIN_HIGH>
 8014fa4:	2180      	movs	r1, #128	; 0x80
 8014fa6:	48c1      	ldr	r0, [pc, #772]	; (80152ac <readGRAM+0x16cc>)
 8014fa8:	f7fc fbe5 	bl	8011776 <PIN_LOW>
 8014fac:	2180      	movs	r1, #128	; 0x80
 8014fae:	48bf      	ldr	r0, [pc, #764]	; (80152ac <readGRAM+0x16cc>)
 8014fb0:	f7fc fbe1 	bl	8011776 <PIN_LOW>
 8014fb4:	2180      	movs	r1, #128	; 0x80
 8014fb6:	48bd      	ldr	r0, [pc, #756]	; (80152ac <readGRAM+0x16cc>)
 8014fb8:	f7fc fbdd 	bl	8011776 <PIN_LOW>
 8014fbc:	2180      	movs	r1, #128	; 0x80
 8014fbe:	48bb      	ldr	r0, [pc, #748]	; (80152ac <readGRAM+0x16cc>)
 8014fc0:	f7fc fbd9 	bl	8011776 <PIN_LOW>
 8014fc4:	2180      	movs	r1, #128	; 0x80
 8014fc6:	48b9      	ldr	r0, [pc, #740]	; (80152ac <readGRAM+0x16cc>)
 8014fc8:	f7fc fbd5 	bl	8011776 <PIN_LOW>
 8014fcc:	2180      	movs	r1, #128	; 0x80
 8014fce:	48b7      	ldr	r0, [pc, #732]	; (80152ac <readGRAM+0x16cc>)
 8014fd0:	f7fc fbd1 	bl	8011776 <PIN_LOW>
 8014fd4:	2180      	movs	r1, #128	; 0x80
 8014fd6:	48b5      	ldr	r0, [pc, #724]	; (80152ac <readGRAM+0x16cc>)
 8014fd8:	f7fc fbcd 	bl	8011776 <PIN_LOW>
 8014fdc:	2180      	movs	r1, #128	; 0x80
 8014fde:	48b3      	ldr	r0, [pc, #716]	; (80152ac <readGRAM+0x16cc>)
 8014fe0:	f7fc fbc9 	bl	8011776 <PIN_LOW>
 8014fe4:	2180      	movs	r1, #128	; 0x80
 8014fe6:	48b1      	ldr	r0, [pc, #708]	; (80152ac <readGRAM+0x16cc>)
 8014fe8:	f7fc fbc5 	bl	8011776 <PIN_LOW>
 8014fec:	2180      	movs	r1, #128	; 0x80
 8014fee:	48af      	ldr	r0, [pc, #700]	; (80152ac <readGRAM+0x16cc>)
 8014ff0:	f7fc fbc1 	bl	8011776 <PIN_LOW>
 8014ff4:	2180      	movs	r1, #128	; 0x80
 8014ff6:	48ad      	ldr	r0, [pc, #692]	; (80152ac <readGRAM+0x16cc>)
 8014ff8:	f7fc fbbd 	bl	8011776 <PIN_LOW>
 8014ffc:	2180      	movs	r1, #128	; 0x80
 8014ffe:	48ab      	ldr	r0, [pc, #684]	; (80152ac <readGRAM+0x16cc>)
 8015000:	f7fc fbb9 	bl	8011776 <PIN_LOW>
 8015004:	2180      	movs	r1, #128	; 0x80
 8015006:	48a9      	ldr	r0, [pc, #676]	; (80152ac <readGRAM+0x16cc>)
 8015008:	f7fc fbb5 	bl	8011776 <PIN_LOW>
 801500c:	2180      	movs	r1, #128	; 0x80
 801500e:	48a7      	ldr	r0, [pc, #668]	; (80152ac <readGRAM+0x16cc>)
 8015010:	f7fc fbb1 	bl	8011776 <PIN_LOW>
 8015014:	2180      	movs	r1, #128	; 0x80
 8015016:	48a5      	ldr	r0, [pc, #660]	; (80152ac <readGRAM+0x16cc>)
 8015018:	f7fc fbad 	bl	8011776 <PIN_LOW>
 801501c:	2180      	movs	r1, #128	; 0x80
 801501e:	48a3      	ldr	r0, [pc, #652]	; (80152ac <readGRAM+0x16cc>)
 8015020:	f7fc fba9 	bl	8011776 <PIN_LOW>
 8015024:	2180      	movs	r1, #128	; 0x80
 8015026:	48a1      	ldr	r0, [pc, #644]	; (80152ac <readGRAM+0x16cc>)
 8015028:	f7fc fba5 	bl	8011776 <PIN_LOW>
 801502c:	2180      	movs	r1, #128	; 0x80
 801502e:	489f      	ldr	r0, [pc, #636]	; (80152ac <readGRAM+0x16cc>)
 8015030:	f7fc fba1 	bl	8011776 <PIN_LOW>
 8015034:	2180      	movs	r1, #128	; 0x80
 8015036:	489d      	ldr	r0, [pc, #628]	; (80152ac <readGRAM+0x16cc>)
 8015038:	f7fc fb9d 	bl	8011776 <PIN_LOW>
 801503c:	2180      	movs	r1, #128	; 0x80
 801503e:	489b      	ldr	r0, [pc, #620]	; (80152ac <readGRAM+0x16cc>)
 8015040:	f7fc fb99 	bl	8011776 <PIN_LOW>
 8015044:	2180      	movs	r1, #128	; 0x80
 8015046:	4899      	ldr	r0, [pc, #612]	; (80152ac <readGRAM+0x16cc>)
 8015048:	f7fc fb95 	bl	8011776 <PIN_LOW>
 801504c:	2180      	movs	r1, #128	; 0x80
 801504e:	4897      	ldr	r0, [pc, #604]	; (80152ac <readGRAM+0x16cc>)
 8015050:	f7fc fb91 	bl	8011776 <PIN_LOW>
 8015054:	2180      	movs	r1, #128	; 0x80
 8015056:	4895      	ldr	r0, [pc, #596]	; (80152ac <readGRAM+0x16cc>)
 8015058:	f7fc fb8d 	bl	8011776 <PIN_LOW>
 801505c:	2180      	movs	r1, #128	; 0x80
 801505e:	4893      	ldr	r0, [pc, #588]	; (80152ac <readGRAM+0x16cc>)
 8015060:	f7fc fb89 	bl	8011776 <PIN_LOW>
 8015064:	2180      	movs	r1, #128	; 0x80
 8015066:	4891      	ldr	r0, [pc, #580]	; (80152ac <readGRAM+0x16cc>)
 8015068:	f7fc fb85 	bl	8011776 <PIN_LOW>
 801506c:	2180      	movs	r1, #128	; 0x80
 801506e:	488f      	ldr	r0, [pc, #572]	; (80152ac <readGRAM+0x16cc>)
 8015070:	f7fc fb81 	bl	8011776 <PIN_LOW>
 8015074:	2180      	movs	r1, #128	; 0x80
 8015076:	488d      	ldr	r0, [pc, #564]	; (80152ac <readGRAM+0x16cc>)
 8015078:	f7fc fb7d 	bl	8011776 <PIN_LOW>
 801507c:	2180      	movs	r1, #128	; 0x80
 801507e:	488b      	ldr	r0, [pc, #556]	; (80152ac <readGRAM+0x16cc>)
 8015080:	f7fc fb79 	bl	8011776 <PIN_LOW>
 8015084:	2180      	movs	r1, #128	; 0x80
 8015086:	4889      	ldr	r0, [pc, #548]	; (80152ac <readGRAM+0x16cc>)
 8015088:	f7fc fb75 	bl	8011776 <PIN_LOW>
 801508c:	2180      	movs	r1, #128	; 0x80
 801508e:	4887      	ldr	r0, [pc, #540]	; (80152ac <readGRAM+0x16cc>)
 8015090:	f7fc fb71 	bl	8011776 <PIN_LOW>
 8015094:	2180      	movs	r1, #128	; 0x80
 8015096:	4885      	ldr	r0, [pc, #532]	; (80152ac <readGRAM+0x16cc>)
 8015098:	f7fc fb6d 	bl	8011776 <PIN_LOW>
 801509c:	2180      	movs	r1, #128	; 0x80
 801509e:	4883      	ldr	r0, [pc, #524]	; (80152ac <readGRAM+0x16cc>)
 80150a0:	f7fc fb69 	bl	8011776 <PIN_LOW>
 80150a4:	2180      	movs	r1, #128	; 0x80
 80150a6:	4881      	ldr	r0, [pc, #516]	; (80152ac <readGRAM+0x16cc>)
 80150a8:	f7fc fb65 	bl	8011776 <PIN_LOW>
 80150ac:	2180      	movs	r1, #128	; 0x80
 80150ae:	487f      	ldr	r0, [pc, #508]	; (80152ac <readGRAM+0x16cc>)
 80150b0:	f7fc fb61 	bl	8011776 <PIN_LOW>
 80150b4:	2180      	movs	r1, #128	; 0x80
 80150b6:	487d      	ldr	r0, [pc, #500]	; (80152ac <readGRAM+0x16cc>)
 80150b8:	f7fc fb5d 	bl	8011776 <PIN_LOW>
 80150bc:	2180      	movs	r1, #128	; 0x80
 80150be:	487b      	ldr	r0, [pc, #492]	; (80152ac <readGRAM+0x16cc>)
 80150c0:	f7fc fb59 	bl	8011776 <PIN_LOW>
 80150c4:	2180      	movs	r1, #128	; 0x80
 80150c6:	4879      	ldr	r0, [pc, #484]	; (80152ac <readGRAM+0x16cc>)
 80150c8:	f7fc fb55 	bl	8011776 <PIN_LOW>
 80150cc:	2180      	movs	r1, #128	; 0x80
 80150ce:	4877      	ldr	r0, [pc, #476]	; (80152ac <readGRAM+0x16cc>)
 80150d0:	f7fc fb51 	bl	8011776 <PIN_LOW>
 80150d4:	2180      	movs	r1, #128	; 0x80
 80150d6:	4875      	ldr	r0, [pc, #468]	; (80152ac <readGRAM+0x16cc>)
 80150d8:	f7fc fb4d 	bl	8011776 <PIN_LOW>
 80150dc:	2180      	movs	r1, #128	; 0x80
 80150de:	4873      	ldr	r0, [pc, #460]	; (80152ac <readGRAM+0x16cc>)
 80150e0:	f7fc fb49 	bl	8011776 <PIN_LOW>
 80150e4:	2180      	movs	r1, #128	; 0x80
 80150e6:	4871      	ldr	r0, [pc, #452]	; (80152ac <readGRAM+0x16cc>)
 80150e8:	f7fc fb45 	bl	8011776 <PIN_LOW>
 80150ec:	2180      	movs	r1, #128	; 0x80
 80150ee:	486f      	ldr	r0, [pc, #444]	; (80152ac <readGRAM+0x16cc>)
 80150f0:	f7fc fb41 	bl	8011776 <PIN_LOW>
 80150f4:	2180      	movs	r1, #128	; 0x80
 80150f6:	486d      	ldr	r0, [pc, #436]	; (80152ac <readGRAM+0x16cc>)
 80150f8:	f7fc fb3d 	bl	8011776 <PIN_LOW>
 80150fc:	2180      	movs	r1, #128	; 0x80
 80150fe:	486b      	ldr	r0, [pc, #428]	; (80152ac <readGRAM+0x16cc>)
 8015100:	f7fc fb39 	bl	8011776 <PIN_LOW>
 8015104:	2180      	movs	r1, #128	; 0x80
 8015106:	4869      	ldr	r0, [pc, #420]	; (80152ac <readGRAM+0x16cc>)
 8015108:	f7fc fb35 	bl	8011776 <PIN_LOW>
 801510c:	2180      	movs	r1, #128	; 0x80
 801510e:	4867      	ldr	r0, [pc, #412]	; (80152ac <readGRAM+0x16cc>)
 8015110:	f7fc fb31 	bl	8011776 <PIN_LOW>
 8015114:	2180      	movs	r1, #128	; 0x80
 8015116:	4865      	ldr	r0, [pc, #404]	; (80152ac <readGRAM+0x16cc>)
 8015118:	f7fc fb2d 	bl	8011776 <PIN_LOW>
 801511c:	2180      	movs	r1, #128	; 0x80
 801511e:	4863      	ldr	r0, [pc, #396]	; (80152ac <readGRAM+0x16cc>)
 8015120:	f7fc fb29 	bl	8011776 <PIN_LOW>
 8015124:	2180      	movs	r1, #128	; 0x80
 8015126:	4861      	ldr	r0, [pc, #388]	; (80152ac <readGRAM+0x16cc>)
 8015128:	f7fc fb25 	bl	8011776 <PIN_LOW>
 801512c:	2180      	movs	r1, #128	; 0x80
 801512e:	485f      	ldr	r0, [pc, #380]	; (80152ac <readGRAM+0x16cc>)
 8015130:	f7fc fb21 	bl	8011776 <PIN_LOW>
 8015134:	2180      	movs	r1, #128	; 0x80
 8015136:	485d      	ldr	r0, [pc, #372]	; (80152ac <readGRAM+0x16cc>)
 8015138:	f7fc fb1d 	bl	8011776 <PIN_LOW>
 801513c:	4b5c      	ldr	r3, [pc, #368]	; (80152b0 <readGRAM+0x16d0>)
 801513e:	691b      	ldr	r3, [r3, #16]
 8015140:	0b1b      	lsrs	r3, r3, #12
 8015142:	b2db      	uxtb	r3, r3
 8015144:	f003 0301 	and.w	r3, r3, #1
 8015148:	b2da      	uxtb	r2, r3
 801514a:	4b58      	ldr	r3, [pc, #352]	; (80152ac <readGRAM+0x16cc>)
 801514c:	691b      	ldr	r3, [r3, #16]
 801514e:	0b9b      	lsrs	r3, r3, #14
 8015150:	b2db      	uxtb	r3, r3
 8015152:	f003 0302 	and.w	r3, r3, #2
 8015156:	b2db      	uxtb	r3, r3
 8015158:	4313      	orrs	r3, r2
 801515a:	b2da      	uxtb	r2, r3
 801515c:	4b54      	ldr	r3, [pc, #336]	; (80152b0 <readGRAM+0x16d0>)
 801515e:	691b      	ldr	r3, [r3, #16]
 8015160:	0b5b      	lsrs	r3, r3, #13
 8015162:	b2db      	uxtb	r3, r3
 8015164:	f003 0304 	and.w	r3, r3, #4
 8015168:	b2db      	uxtb	r3, r3
 801516a:	4313      	orrs	r3, r2
 801516c:	b2da      	uxtb	r2, r3
 801516e:	4b51      	ldr	r3, [pc, #324]	; (80152b4 <readGRAM+0x16d4>)
 8015170:	691b      	ldr	r3, [r3, #16]
 8015172:	0a9b      	lsrs	r3, r3, #10
 8015174:	b2db      	uxtb	r3, r3
 8015176:	f003 0308 	and.w	r3, r3, #8
 801517a:	b2db      	uxtb	r3, r3
 801517c:	4313      	orrs	r3, r2
 801517e:	b2da      	uxtb	r2, r3
 8015180:	4b4b      	ldr	r3, [pc, #300]	; (80152b0 <readGRAM+0x16d0>)
 8015182:	691b      	ldr	r3, [r3, #16]
 8015184:	0a9b      	lsrs	r3, r3, #10
 8015186:	b2db      	uxtb	r3, r3
 8015188:	f003 0310 	and.w	r3, r3, #16
 801518c:	b2db      	uxtb	r3, r3
 801518e:	4313      	orrs	r3, r2
 8015190:	b2da      	uxtb	r2, r3
 8015192:	4b48      	ldr	r3, [pc, #288]	; (80152b4 <readGRAM+0x16d4>)
 8015194:	691b      	ldr	r3, [r3, #16]
 8015196:	099b      	lsrs	r3, r3, #6
 8015198:	b2db      	uxtb	r3, r3
 801519a:	f003 0320 	and.w	r3, r3, #32
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	4313      	orrs	r3, r2
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	4b43      	ldr	r3, [pc, #268]	; (80152b4 <readGRAM+0x16d4>)
 80151a6:	691b      	ldr	r3, [r3, #16]
 80151a8:	08db      	lsrs	r3, r3, #3
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	4313      	orrs	r3, r2
 80151b4:	b2da      	uxtb	r2, r3
 80151b6:	4b3e      	ldr	r3, [pc, #248]	; (80152b0 <readGRAM+0x16d0>)
 80151b8:	691b      	ldr	r3, [r3, #16]
 80151ba:	099b      	lsrs	r3, r3, #6
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	4313      	orrs	r3, r2
 80151c6:	75bb      	strb	r3, [r7, #22]
 80151c8:	2180      	movs	r1, #128	; 0x80
 80151ca:	4838      	ldr	r0, [pc, #224]	; (80152ac <readGRAM+0x16cc>)
 80151cc:	f7fc fae3 	bl	8011796 <PIN_HIGH>
 80151d0:	2180      	movs	r1, #128	; 0x80
 80151d2:	4836      	ldr	r0, [pc, #216]	; (80152ac <readGRAM+0x16cc>)
 80151d4:	f7fc fadf 	bl	8011796 <PIN_HIGH>
 80151d8:	2180      	movs	r1, #128	; 0x80
 80151da:	4834      	ldr	r0, [pc, #208]	; (80152ac <readGRAM+0x16cc>)
 80151dc:	f7fc fadb 	bl	8011796 <PIN_HIGH>
 80151e0:	2180      	movs	r1, #128	; 0x80
 80151e2:	4832      	ldr	r0, [pc, #200]	; (80152ac <readGRAM+0x16cc>)
 80151e4:	f7fc fac7 	bl	8011776 <PIN_LOW>
 80151e8:	2180      	movs	r1, #128	; 0x80
 80151ea:	4830      	ldr	r0, [pc, #192]	; (80152ac <readGRAM+0x16cc>)
 80151ec:	f7fc fac3 	bl	8011776 <PIN_LOW>
 80151f0:	2180      	movs	r1, #128	; 0x80
 80151f2:	482e      	ldr	r0, [pc, #184]	; (80152ac <readGRAM+0x16cc>)
 80151f4:	f7fc fabf 	bl	8011776 <PIN_LOW>
 80151f8:	2180      	movs	r1, #128	; 0x80
 80151fa:	482c      	ldr	r0, [pc, #176]	; (80152ac <readGRAM+0x16cc>)
 80151fc:	f7fc fabb 	bl	8011776 <PIN_LOW>
 8015200:	2180      	movs	r1, #128	; 0x80
 8015202:	482a      	ldr	r0, [pc, #168]	; (80152ac <readGRAM+0x16cc>)
 8015204:	f7fc fab7 	bl	8011776 <PIN_LOW>
 8015208:	2180      	movs	r1, #128	; 0x80
 801520a:	4828      	ldr	r0, [pc, #160]	; (80152ac <readGRAM+0x16cc>)
 801520c:	f7fc fab3 	bl	8011776 <PIN_LOW>
 8015210:	2180      	movs	r1, #128	; 0x80
 8015212:	4826      	ldr	r0, [pc, #152]	; (80152ac <readGRAM+0x16cc>)
 8015214:	f7fc faaf 	bl	8011776 <PIN_LOW>
 8015218:	2180      	movs	r1, #128	; 0x80
 801521a:	4824      	ldr	r0, [pc, #144]	; (80152ac <readGRAM+0x16cc>)
 801521c:	f7fc faab 	bl	8011776 <PIN_LOW>
 8015220:	2180      	movs	r1, #128	; 0x80
 8015222:	4822      	ldr	r0, [pc, #136]	; (80152ac <readGRAM+0x16cc>)
 8015224:	f7fc faa7 	bl	8011776 <PIN_LOW>
 8015228:	2180      	movs	r1, #128	; 0x80
 801522a:	4820      	ldr	r0, [pc, #128]	; (80152ac <readGRAM+0x16cc>)
 801522c:	f7fc faa3 	bl	8011776 <PIN_LOW>
 8015230:	2180      	movs	r1, #128	; 0x80
 8015232:	481e      	ldr	r0, [pc, #120]	; (80152ac <readGRAM+0x16cc>)
 8015234:	f7fc fa9f 	bl	8011776 <PIN_LOW>
 8015238:	2180      	movs	r1, #128	; 0x80
 801523a:	481c      	ldr	r0, [pc, #112]	; (80152ac <readGRAM+0x16cc>)
 801523c:	f7fc fa9b 	bl	8011776 <PIN_LOW>
 8015240:	2180      	movs	r1, #128	; 0x80
 8015242:	481a      	ldr	r0, [pc, #104]	; (80152ac <readGRAM+0x16cc>)
 8015244:	f7fc fa97 	bl	8011776 <PIN_LOW>
 8015248:	2180      	movs	r1, #128	; 0x80
 801524a:	4818      	ldr	r0, [pc, #96]	; (80152ac <readGRAM+0x16cc>)
 801524c:	f7fc fa93 	bl	8011776 <PIN_LOW>
 8015250:	2180      	movs	r1, #128	; 0x80
 8015252:	4816      	ldr	r0, [pc, #88]	; (80152ac <readGRAM+0x16cc>)
 8015254:	f7fc fa8f 	bl	8011776 <PIN_LOW>
 8015258:	2180      	movs	r1, #128	; 0x80
 801525a:	4814      	ldr	r0, [pc, #80]	; (80152ac <readGRAM+0x16cc>)
 801525c:	f7fc fa8b 	bl	8011776 <PIN_LOW>
 8015260:	2180      	movs	r1, #128	; 0x80
 8015262:	4812      	ldr	r0, [pc, #72]	; (80152ac <readGRAM+0x16cc>)
 8015264:	f7fc fa87 	bl	8011776 <PIN_LOW>
 8015268:	2180      	movs	r1, #128	; 0x80
 801526a:	4810      	ldr	r0, [pc, #64]	; (80152ac <readGRAM+0x16cc>)
 801526c:	f7fc fa83 	bl	8011776 <PIN_LOW>
 8015270:	2180      	movs	r1, #128	; 0x80
 8015272:	480e      	ldr	r0, [pc, #56]	; (80152ac <readGRAM+0x16cc>)
 8015274:	f7fc fa7f 	bl	8011776 <PIN_LOW>
 8015278:	2180      	movs	r1, #128	; 0x80
 801527a:	480c      	ldr	r0, [pc, #48]	; (80152ac <readGRAM+0x16cc>)
 801527c:	f7fc fa7b 	bl	8011776 <PIN_LOW>
 8015280:	2180      	movs	r1, #128	; 0x80
 8015282:	480a      	ldr	r0, [pc, #40]	; (80152ac <readGRAM+0x16cc>)
 8015284:	f7fc fa77 	bl	8011776 <PIN_LOW>
 8015288:	2180      	movs	r1, #128	; 0x80
 801528a:	4808      	ldr	r0, [pc, #32]	; (80152ac <readGRAM+0x16cc>)
 801528c:	f7fc fa73 	bl	8011776 <PIN_LOW>
 8015290:	2180      	movs	r1, #128	; 0x80
 8015292:	4806      	ldr	r0, [pc, #24]	; (80152ac <readGRAM+0x16cc>)
 8015294:	f7fc fa6f 	bl	8011776 <PIN_LOW>
 8015298:	2180      	movs	r1, #128	; 0x80
 801529a:	4804      	ldr	r0, [pc, #16]	; (80152ac <readGRAM+0x16cc>)
 801529c:	f7fc fa6b 	bl	8011776 <PIN_LOW>
 80152a0:	2180      	movs	r1, #128	; 0x80
 80152a2:	4802      	ldr	r0, [pc, #8]	; (80152ac <readGRAM+0x16cc>)
 80152a4:	f7fc fa67 	bl	8011776 <PIN_LOW>
 80152a8:	2180      	movs	r1, #128	; 0x80
 80152aa:	e005      	b.n	80152b8 <readGRAM+0x16d8>
 80152ac:	40020c00 	.word	0x40020c00
 80152b0:	40021400 	.word	0x40021400
 80152b4:	40021000 	.word	0x40021000
 80152b8:	48a4      	ldr	r0, [pc, #656]	; (801554c <readGRAM+0x196c>)
 80152ba:	f7fc fa5c 	bl	8011776 <PIN_LOW>
 80152be:	2180      	movs	r1, #128	; 0x80
 80152c0:	48a2      	ldr	r0, [pc, #648]	; (801554c <readGRAM+0x196c>)
 80152c2:	f7fc fa58 	bl	8011776 <PIN_LOW>
 80152c6:	2180      	movs	r1, #128	; 0x80
 80152c8:	48a0      	ldr	r0, [pc, #640]	; (801554c <readGRAM+0x196c>)
 80152ca:	f7fc fa54 	bl	8011776 <PIN_LOW>
 80152ce:	2180      	movs	r1, #128	; 0x80
 80152d0:	489e      	ldr	r0, [pc, #632]	; (801554c <readGRAM+0x196c>)
 80152d2:	f7fc fa50 	bl	8011776 <PIN_LOW>
 80152d6:	2180      	movs	r1, #128	; 0x80
 80152d8:	489c      	ldr	r0, [pc, #624]	; (801554c <readGRAM+0x196c>)
 80152da:	f7fc fa4c 	bl	8011776 <PIN_LOW>
 80152de:	2180      	movs	r1, #128	; 0x80
 80152e0:	489a      	ldr	r0, [pc, #616]	; (801554c <readGRAM+0x196c>)
 80152e2:	f7fc fa48 	bl	8011776 <PIN_LOW>
 80152e6:	2180      	movs	r1, #128	; 0x80
 80152e8:	4898      	ldr	r0, [pc, #608]	; (801554c <readGRAM+0x196c>)
 80152ea:	f7fc fa44 	bl	8011776 <PIN_LOW>
 80152ee:	2180      	movs	r1, #128	; 0x80
 80152f0:	4896      	ldr	r0, [pc, #600]	; (801554c <readGRAM+0x196c>)
 80152f2:	f7fc fa40 	bl	8011776 <PIN_LOW>
 80152f6:	2180      	movs	r1, #128	; 0x80
 80152f8:	4894      	ldr	r0, [pc, #592]	; (801554c <readGRAM+0x196c>)
 80152fa:	f7fc fa3c 	bl	8011776 <PIN_LOW>
 80152fe:	2180      	movs	r1, #128	; 0x80
 8015300:	4892      	ldr	r0, [pc, #584]	; (801554c <readGRAM+0x196c>)
 8015302:	f7fc fa38 	bl	8011776 <PIN_LOW>
 8015306:	2180      	movs	r1, #128	; 0x80
 8015308:	4890      	ldr	r0, [pc, #576]	; (801554c <readGRAM+0x196c>)
 801530a:	f7fc fa34 	bl	8011776 <PIN_LOW>
 801530e:	2180      	movs	r1, #128	; 0x80
 8015310:	488e      	ldr	r0, [pc, #568]	; (801554c <readGRAM+0x196c>)
 8015312:	f7fc fa30 	bl	8011776 <PIN_LOW>
 8015316:	2180      	movs	r1, #128	; 0x80
 8015318:	488c      	ldr	r0, [pc, #560]	; (801554c <readGRAM+0x196c>)
 801531a:	f7fc fa2c 	bl	8011776 <PIN_LOW>
 801531e:	2180      	movs	r1, #128	; 0x80
 8015320:	488a      	ldr	r0, [pc, #552]	; (801554c <readGRAM+0x196c>)
 8015322:	f7fc fa28 	bl	8011776 <PIN_LOW>
 8015326:	2180      	movs	r1, #128	; 0x80
 8015328:	4888      	ldr	r0, [pc, #544]	; (801554c <readGRAM+0x196c>)
 801532a:	f7fc fa24 	bl	8011776 <PIN_LOW>
 801532e:	2180      	movs	r1, #128	; 0x80
 8015330:	4886      	ldr	r0, [pc, #536]	; (801554c <readGRAM+0x196c>)
 8015332:	f7fc fa20 	bl	8011776 <PIN_LOW>
 8015336:	2180      	movs	r1, #128	; 0x80
 8015338:	4884      	ldr	r0, [pc, #528]	; (801554c <readGRAM+0x196c>)
 801533a:	f7fc fa1c 	bl	8011776 <PIN_LOW>
 801533e:	2180      	movs	r1, #128	; 0x80
 8015340:	4882      	ldr	r0, [pc, #520]	; (801554c <readGRAM+0x196c>)
 8015342:	f7fc fa18 	bl	8011776 <PIN_LOW>
 8015346:	2180      	movs	r1, #128	; 0x80
 8015348:	4880      	ldr	r0, [pc, #512]	; (801554c <readGRAM+0x196c>)
 801534a:	f7fc fa14 	bl	8011776 <PIN_LOW>
 801534e:	2180      	movs	r1, #128	; 0x80
 8015350:	487e      	ldr	r0, [pc, #504]	; (801554c <readGRAM+0x196c>)
 8015352:	f7fc fa10 	bl	8011776 <PIN_LOW>
 8015356:	2180      	movs	r1, #128	; 0x80
 8015358:	487c      	ldr	r0, [pc, #496]	; (801554c <readGRAM+0x196c>)
 801535a:	f7fc fa0c 	bl	8011776 <PIN_LOW>
 801535e:	2180      	movs	r1, #128	; 0x80
 8015360:	487a      	ldr	r0, [pc, #488]	; (801554c <readGRAM+0x196c>)
 8015362:	f7fc fa08 	bl	8011776 <PIN_LOW>
 8015366:	2180      	movs	r1, #128	; 0x80
 8015368:	4878      	ldr	r0, [pc, #480]	; (801554c <readGRAM+0x196c>)
 801536a:	f7fc fa04 	bl	8011776 <PIN_LOW>
 801536e:	2180      	movs	r1, #128	; 0x80
 8015370:	4876      	ldr	r0, [pc, #472]	; (801554c <readGRAM+0x196c>)
 8015372:	f7fc fa00 	bl	8011776 <PIN_LOW>
 8015376:	2180      	movs	r1, #128	; 0x80
 8015378:	4874      	ldr	r0, [pc, #464]	; (801554c <readGRAM+0x196c>)
 801537a:	f7fc f9fc 	bl	8011776 <PIN_LOW>
 801537e:	2180      	movs	r1, #128	; 0x80
 8015380:	4872      	ldr	r0, [pc, #456]	; (801554c <readGRAM+0x196c>)
 8015382:	f7fc f9f8 	bl	8011776 <PIN_LOW>
 8015386:	4b72      	ldr	r3, [pc, #456]	; (8015550 <readGRAM+0x1970>)
 8015388:	691b      	ldr	r3, [r3, #16]
 801538a:	0b1b      	lsrs	r3, r3, #12
 801538c:	b29b      	uxth	r3, r3
 801538e:	f003 0301 	and.w	r3, r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	4b6d      	ldr	r3, [pc, #436]	; (801554c <readGRAM+0x196c>)
 8015396:	691b      	ldr	r3, [r3, #16]
 8015398:	0b9b      	lsrs	r3, r3, #14
 801539a:	b29b      	uxth	r3, r3
 801539c:	f003 0302 	and.w	r3, r3, #2
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	4313      	orrs	r3, r2
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	4b6a      	ldr	r3, [pc, #424]	; (8015550 <readGRAM+0x1970>)
 80153a8:	691b      	ldr	r3, [r3, #16]
 80153aa:	0b5b      	lsrs	r3, r3, #13
 80153ac:	b29b      	uxth	r3, r3
 80153ae:	f003 0304 	and.w	r3, r3, #4
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4313      	orrs	r3, r2
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	4b66      	ldr	r3, [pc, #408]	; (8015554 <readGRAM+0x1974>)
 80153ba:	691b      	ldr	r3, [r3, #16]
 80153bc:	0a9b      	lsrs	r3, r3, #10
 80153be:	b29b      	uxth	r3, r3
 80153c0:	f003 0308 	and.w	r3, r3, #8
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	4313      	orrs	r3, r2
 80153c8:	b29a      	uxth	r2, r3
 80153ca:	4b61      	ldr	r3, [pc, #388]	; (8015550 <readGRAM+0x1970>)
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	0a9b      	lsrs	r3, r3, #10
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	f003 0310 	and.w	r3, r3, #16
 80153d6:	b29b      	uxth	r3, r3
 80153d8:	4313      	orrs	r3, r2
 80153da:	b29a      	uxth	r2, r3
 80153dc:	4b5d      	ldr	r3, [pc, #372]	; (8015554 <readGRAM+0x1974>)
 80153de:	691b      	ldr	r3, [r3, #16]
 80153e0:	099b      	lsrs	r3, r3, #6
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	f003 0320 	and.w	r3, r3, #32
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	4313      	orrs	r3, r2
 80153ec:	b29a      	uxth	r2, r3
 80153ee:	4b59      	ldr	r3, [pc, #356]	; (8015554 <readGRAM+0x1974>)
 80153f0:	691b      	ldr	r3, [r3, #16]
 80153f2:	08db      	lsrs	r3, r3, #3
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	4313      	orrs	r3, r2
 80153fe:	b29a      	uxth	r2, r3
 8015400:	4b53      	ldr	r3, [pc, #332]	; (8015550 <readGRAM+0x1970>)
 8015402:	691b      	ldr	r3, [r3, #16]
 8015404:	099b      	lsrs	r3, r3, #6
 8015406:	b29b      	uxth	r3, r3
 8015408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801540c:	b29b      	uxth	r3, r3
 801540e:	4313      	orrs	r3, r2
 8015410:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015412:	2180      	movs	r1, #128	; 0x80
 8015414:	484d      	ldr	r0, [pc, #308]	; (801554c <readGRAM+0x196c>)
 8015416:	f7fc f9be 	bl	8011796 <PIN_HIGH>
 801541a:	2180      	movs	r1, #128	; 0x80
 801541c:	484b      	ldr	r0, [pc, #300]	; (801554c <readGRAM+0x196c>)
 801541e:	f7fc f9ba 	bl	8011796 <PIN_HIGH>
 8015422:	7dbb      	ldrb	r3, [r7, #22]
 8015424:	021b      	lsls	r3, r3, #8
 8015426:	b21a      	sxth	r2, r3
 8015428:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801542c:	4313      	orrs	r3, r2
 801542e:	b21b      	sxth	r3, r3
 8015430:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8015432:	4b49      	ldr	r3, [pc, #292]	; (8015558 <readGRAM+0x1978>)
 8015434:	881b      	ldrh	r3, [r3, #0]
 8015436:	f003 0308 	and.w	r3, r3, #8
 801543a:	2b00      	cmp	r3, #0
 801543c:	d009      	beq.n	8015452 <readGRAM+0x1872>
                    ret = (ret >> 8) | (ret << 8);
 801543e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015440:	0a1b      	lsrs	r3, r3, #8
 8015442:	b29b      	uxth	r3, r3
 8015444:	b21a      	sxth	r2, r3
 8015446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015448:	021b      	lsls	r3, r3, #8
 801544a:	b21b      	sxth	r3, r3
 801544c:	4313      	orrs	r3, r2
 801544e:	b21b      	sxth	r3, r3
 8015450:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8015452:	4b41      	ldr	r3, [pc, #260]	; (8015558 <readGRAM+0x1978>)
 8015454:	881b      	ldrh	r3, [r3, #0]
 8015456:	f003 0304 	and.w	r3, r3, #4
 801545a:	2b00      	cmp	r3, #0
 801545c:	d010      	beq.n	8015480 <readGRAM+0x18a0>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 801545e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015462:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015466:	b21a      	sxth	r2, r3
 8015468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801546a:	0adb      	lsrs	r3, r3, #11
 801546c:	b29b      	uxth	r3, r3
 801546e:	b21b      	sxth	r3, r3
 8015470:	4313      	orrs	r3, r2
 8015472:	b21a      	sxth	r2, r3
 8015474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015476:	02db      	lsls	r3, r3, #11
 8015478:	b21b      	sxth	r3, r3
 801547a:	4313      	orrs	r3, r2
 801547c:	b21b      	sxth	r3, r3
 801547e:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8015480:	4b36      	ldr	r3, [pc, #216]	; (801555c <readGRAM+0x197c>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d005      	beq.n	8015494 <readGRAM+0x18b4>
 8015488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801548a:	4618      	mov	r0, r3
 801548c:	f7fc f9fa 	bl	8011884 <color555_to_565>
 8015490:	4603      	mov	r3, r0
 8015492:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	1c9a      	adds	r2, r3, #2
 8015498:	60ba      	str	r2, [r7, #8]
 801549a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801549c:	801a      	strh	r2, [r3, #0]
            n--;
 801549e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	3b01      	subs	r3, #1
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80154aa:	4b2b      	ldr	r3, [pc, #172]	; (8015558 <readGRAM+0x1978>)
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	f003 0302 	and.w	r3, r3, #2
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d005      	beq.n	80154c2 <readGRAM+0x18e2>
        while (n)
 80154b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	f47f a9da 	bne.w	8014874 <readGRAM+0xc94>
 80154c0:	e000      	b.n	80154c4 <readGRAM+0x18e4>
                break;
 80154c2:	bf00      	nop
        }
        if (++col >= w) {
 80154c4:	8bfb      	ldrh	r3, [r7, #30]
 80154c6:	3301      	adds	r3, #1
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	83fb      	strh	r3, [r7, #30]
 80154cc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80154d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	db0d      	blt.n	80154f4 <readGRAM+0x1914>
            col = 0;
 80154d8:	2300      	movs	r3, #0
 80154da:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 80154dc:	8c3b      	ldrh	r3, [r7, #32]
 80154de:	3301      	adds	r3, #1
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	843b      	strh	r3, [r7, #32]
 80154e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154e8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80154ec:	429a      	cmp	r2, r3
 80154ee:	db01      	blt.n	80154f4 <readGRAM+0x1914>
                row = 0;
 80154f0:	2300      	movs	r3, #0
 80154f2:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 80154f4:	2180      	movs	r1, #128	; 0x80
 80154f6:	4815      	ldr	r0, [pc, #84]	; (801554c <readGRAM+0x196c>)
 80154f8:	f7fc f94d 	bl	8011796 <PIN_HIGH>
        CS_IDLE;
 80154fc:	2108      	movs	r1, #8
 80154fe:	4814      	ldr	r0, [pc, #80]	; (8015550 <readGRAM+0x1970>)
 8015500:	f7fc f949 	bl	8011796 <PIN_HIGH>
        setWriteDir();
 8015504:	f7fc faa6 	bl	8011a54 <setWriteDir>
    while (n > 0) {
 8015508:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801550c:	2b00      	cmp	r3, #0
 801550e:	f73e abb3 	bgt.w	8013c78 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8015512:	4b11      	ldr	r3, [pc, #68]	; (8015558 <readGRAM+0x1978>)
 8015514:	881b      	ldrh	r3, [r3, #0]
 8015516:	f003 0301 	and.w	r3, r3, #1
 801551a:	2b00      	cmp	r3, #0
 801551c:	d110      	bne.n	8015540 <readGRAM+0x1960>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 801551e:	f7fc f979 	bl	8011814 <width>
 8015522:	4603      	mov	r3, r0
 8015524:	3b01      	subs	r3, #1
 8015526:	b29b      	uxth	r3, r3
 8015528:	b21c      	sxth	r4, r3
 801552a:	f7fc f97f 	bl	801182c <height>
 801552e:	4603      	mov	r3, r0
 8015530:	3b01      	subs	r3, #1
 8015532:	b29b      	uxth	r3, r3
 8015534:	b21b      	sxth	r3, r3
 8015536:	4622      	mov	r2, r4
 8015538:	2100      	movs	r1, #0
 801553a:	2000      	movs	r0, #0
 801553c:	f000 fc12 	bl	8015d64 <setAddrWindow>
    return 0;
 8015540:	2300      	movs	r3, #0
}
 8015542:	4618      	mov	r0, r3
 8015544:	372c      	adds	r7, #44	; 0x2c
 8015546:	46bd      	mov	sp, r7
 8015548:	bd90      	pop	{r4, r7, pc}
 801554a:	bf00      	nop
 801554c:	40020c00 	.word	0x40020c00
 8015550:	40021400 	.word	0x40021400
 8015554:	40021000 	.word	0x40021000
 8015558:	2000698e 	.word	0x2000698e
 801555c:	20000219 	.word	0x20000219

08015560 <setRotation>:

void setRotation(uint8_t r)
{
 8015560:	b590      	push	{r4, r7, lr}
 8015562:	b087      	sub	sp, #28
 8015564:	af00      	add	r7, sp, #0
 8015566:	4603      	mov	r3, r0
 8015568:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 801556a:	4ba9      	ldr	r3, [pc, #676]	; (8015810 <setRotation+0x2b0>)
 801556c:	881b      	ldrh	r3, [r3, #0]
 801556e:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8015570:	79fb      	ldrb	r3, [r7, #7]
 8015572:	f003 0303 	and.w	r3, r3, #3
 8015576:	b2da      	uxtb	r2, r3
 8015578:	4ba6      	ldr	r3, [pc, #664]	; (8015814 <setRotation+0x2b4>)
 801557a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 801557c:	4ba5      	ldr	r3, [pc, #660]	; (8015814 <setRotation+0x2b4>)
 801557e:	781b      	ldrb	r3, [r3, #0]
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	2b00      	cmp	r3, #0
 8015586:	d002      	beq.n	801558e <setRotation+0x2e>
 8015588:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801558c:	e001      	b.n	8015592 <setRotation+0x32>
 801558e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015592:	4ba1      	ldr	r3, [pc, #644]	; (8015818 <setRotation+0x2b8>)
 8015594:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8015596:	4b9f      	ldr	r3, [pc, #636]	; (8015814 <setRotation+0x2b4>)
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	f003 0301 	and.w	r3, r3, #1
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d002      	beq.n	80155a8 <setRotation+0x48>
 80155a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80155a6:	e001      	b.n	80155ac <setRotation+0x4c>
 80155a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80155ac:	4b9b      	ldr	r3, [pc, #620]	; (801581c <setRotation+0x2bc>)
 80155ae:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80155b0:	4b98      	ldr	r3, [pc, #608]	; (8015814 <setRotation+0x2b4>)
 80155b2:	781b      	ldrb	r3, [r3, #0]
 80155b4:	2b03      	cmp	r3, #3
 80155b6:	d817      	bhi.n	80155e8 <setRotation+0x88>
 80155b8:	a201      	add	r2, pc, #4	; (adr r2, 80155c0 <setRotation+0x60>)
 80155ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155be:	bf00      	nop
 80155c0:	080155d1 	.word	0x080155d1
 80155c4:	080155d7 	.word	0x080155d7
 80155c8:	080155dd 	.word	0x080155dd
 80155cc:	080155e3 	.word	0x080155e3
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80155d0:	2348      	movs	r3, #72	; 0x48
 80155d2:	72fb      	strb	r3, [r7, #11]
       break;
 80155d4:	e008      	b.n	80155e8 <setRotation+0x88>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80155d6:	2328      	movs	r3, #40	; 0x28
 80155d8:	72fb      	strb	r3, [r7, #11]
       break;
 80155da:	e005      	b.n	80155e8 <setRotation+0x88>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80155dc:	2398      	movs	r3, #152	; 0x98
 80155de:	72fb      	strb	r3, [r7, #11]
       break;
 80155e0:	e002      	b.n	80155e8 <setRotation+0x88>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80155e2:	23f8      	movs	r3, #248	; 0xf8
 80155e4:	72fb      	strb	r3, [r7, #11]
       break;
 80155e6:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 80155e8:	4b8d      	ldr	r3, [pc, #564]	; (8015820 <setRotation+0x2c0>)
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d005      	beq.n	8015600 <setRotation+0xa0>
       val ^= 0x80;
 80155f4:	7afa      	ldrb	r2, [r7, #11]
 80155f6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80155fa:	4053      	eors	r3, r2
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8015600:	4b87      	ldr	r3, [pc, #540]	; (8015820 <setRotation+0x2c0>)
 8015602:	881b      	ldrh	r3, [r3, #0]
 8015604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015608:	2b00      	cmp	r3, #0
 801560a:	d004      	beq.n	8015616 <setRotation+0xb6>
       val ^= 0x40;
 801560c:	7afb      	ldrb	r3, [r7, #11]
 801560e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8015612:	b2db      	uxtb	r3, r3
 8015614:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8015616:	4b82      	ldr	r3, [pc, #520]	; (8015820 <setRotation+0x2c0>)
 8015618:	881b      	ldrh	r3, [r3, #0]
 801561a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801561e:	2b00      	cmp	r3, #0
 8015620:	d004      	beq.n	801562c <setRotation+0xcc>
       val ^= 0x08;
 8015622:	7afb      	ldrb	r3, [r7, #11]
 8015624:	f083 0308 	eor.w	r3, r3, #8
 8015628:	b2db      	uxtb	r3, r3
 801562a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 801562c:	4b7c      	ldr	r3, [pc, #496]	; (8015820 <setRotation+0x2c0>)
 801562e:	881b      	ldrh	r3, [r3, #0]
 8015630:	f003 0301 	and.w	r3, r3, #1
 8015634:	2b00      	cmp	r3, #0
 8015636:	f000 811a 	beq.w	801586e <setRotation+0x30e>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 801563a:	4b7a      	ldr	r3, [pc, #488]	; (8015824 <setRotation+0x2c4>)
 801563c:	881b      	ldrh	r3, [r3, #0]
 801563e:	f646 0214 	movw	r2, #26644	; 0x6814
 8015642:	4293      	cmp	r3, r2
 8015644:	d128      	bne.n	8015698 <setRotation+0x138>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8015646:	7afb      	ldrb	r3, [r7, #11]
 8015648:	b25b      	sxtb	r3, r3
 801564a:	105b      	asrs	r3, r3, #1
 801564c:	b25b      	sxtb	r3, r3
 801564e:	b29b      	uxth	r3, r3
 8015650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015654:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8015656:	7afb      	ldrb	r3, [r7, #11]
 8015658:	105b      	asrs	r3, r3, #1
 801565a:	b29b      	uxth	r3, r3
 801565c:	f003 0320 	and.w	r3, r3, #32
 8015660:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8015662:	7afb      	ldrb	r3, [r7, #11]
 8015664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015668:	b2db      	uxtb	r3, r3
 801566a:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 801566c:	2300      	movs	r3, #0
 801566e:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8015670:	8a3b      	ldrh	r3, [r7, #16]
 8015672:	b2da      	uxtb	r2, r3
 8015674:	89fb      	ldrh	r3, [r7, #14]
 8015676:	b2db      	uxtb	r3, r3
 8015678:	4313      	orrs	r3, r2
 801567a:	b2db      	uxtb	r3, r3
 801567c:	f043 0302 	orr.w	r3, r3, #2
 8015680:	b2db      	uxtb	r3, r3
 8015682:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8015684:	233b      	movs	r3, #59	; 0x3b
 8015686:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8015688:	f107 0308 	add.w	r3, r7, #8
 801568c:	461a      	mov	r2, r3
 801568e:	2103      	movs	r1, #3
 8015690:	20b6      	movs	r0, #182	; 0xb6
 8015692:	f7fc fe07 	bl	80122a4 <WriteCmdParamN>
           goto common_MC;
 8015696:	e0a4      	b.n	80157e2 <setRotation+0x282>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8015698:	4b62      	ldr	r3, [pc, #392]	; (8015824 <setRotation+0x2c4>)
 801569a:	881b      	ldrh	r3, [r3, #0]
 801569c:	f641 1263 	movw	r2, #6499	; 0x1963
 80156a0:	4293      	cmp	r3, r2
 80156a2:	d00b      	beq.n	80156bc <setRotation+0x15c>
 80156a4:	4b5f      	ldr	r3, [pc, #380]	; (8015824 <setRotation+0x2c4>)
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	f249 4281 	movw	r2, #38017	; 0x9481
 80156ac:	4293      	cmp	r3, r2
 80156ae:	d005      	beq.n	80156bc <setRotation+0x15c>
 80156b0:	4b5c      	ldr	r3, [pc, #368]	; (8015824 <setRotation+0x2c4>)
 80156b2:	881b      	ldrh	r3, [r3, #0]
 80156b4:	f241 5211 	movw	r2, #5393	; 0x1511
 80156b8:	4293      	cmp	r3, r2
 80156ba:	d139      	bne.n	8015730 <setRotation+0x1d0>
           if (val & 0x80)
 80156bc:	7afb      	ldrb	r3, [r7, #11]
 80156be:	b25b      	sxtb	r3, r3
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	da04      	bge.n	80156ce <setRotation+0x16e>
               val |= 0x01;    //GS
 80156c4:	7afb      	ldrb	r3, [r7, #11]
 80156c6:	f043 0301 	orr.w	r3, r3, #1
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80156ce:	7afb      	ldrb	r3, [r7, #11]
 80156d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d004      	beq.n	80156e2 <setRotation+0x182>
               val |= 0x02;    //SS
 80156d8:	7afb      	ldrb	r3, [r7, #11]
 80156da:	f043 0302 	orr.w	r3, r3, #2
 80156de:	b2db      	uxtb	r3, r3
 80156e0:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 80156e2:	4b50      	ldr	r3, [pc, #320]	; (8015824 <setRotation+0x2c4>)
 80156e4:	881b      	ldrh	r3, [r3, #0]
 80156e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d104      	bne.n	80156f8 <setRotation+0x198>
 80156ee:	7afb      	ldrb	r3, [r7, #11]
 80156f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 80156f8:	4b4a      	ldr	r3, [pc, #296]	; (8015824 <setRotation+0x2c4>)
 80156fa:	881b      	ldrh	r3, [r3, #0]
 80156fc:	f249 4281 	movw	r2, #38017	; 0x9481
 8015700:	4293      	cmp	r3, r2
 8015702:	d104      	bne.n	801570e <setRotation+0x1ae>
 8015704:	7afb      	ldrb	r3, [r7, #11]
 8015706:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 801570a:	b2db      	uxtb	r3, r3
 801570c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 801570e:	4b45      	ldr	r3, [pc, #276]	; (8015824 <setRotation+0x2c4>)
 8015710:	881b      	ldrh	r3, [r3, #0]
 8015712:	f241 5211 	movw	r2, #5393	; 0x1511
 8015716:	4293      	cmp	r3, r2
 8015718:	d160      	bne.n	80157dc <setRotation+0x27c>
               val &= ~0x10;   //remove ML
 801571a:	7afb      	ldrb	r3, [r7, #11]
 801571c:	f023 0310 	bic.w	r3, r3, #16
 8015720:	b2db      	uxtb	r3, r3
 8015722:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8015724:	7afb      	ldrb	r3, [r7, #11]
 8015726:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801572a:	b2db      	uxtb	r3, r3
 801572c:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 801572e:	e055      	b.n	80157dc <setRotation+0x27c>
      }
       else if (is8347) {
 8015730:	4b3d      	ldr	r3, [pc, #244]	; (8015828 <setRotation+0x2c8>)
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d053      	beq.n	80157e0 <setRotation+0x280>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8015738:	4b3c      	ldr	r3, [pc, #240]	; (801582c <setRotation+0x2cc>)
 801573a:	2202      	movs	r2, #2
 801573c:	801a      	strh	r2, [r3, #0]
 801573e:	4b3c      	ldr	r3, [pc, #240]	; (8015830 <setRotation+0x2d0>)
 8015740:	2206      	movs	r2, #6
 8015742:	801a      	strh	r2, [r3, #0]
 8015744:	4b3b      	ldr	r3, [pc, #236]	; (8015834 <setRotation+0x2d4>)
 8015746:	2222      	movs	r2, #34	; 0x22
 8015748:	801a      	strh	r2, [r3, #0]
 801574a:	4b3b      	ldr	r3, [pc, #236]	; (8015838 <setRotation+0x2d8>)
 801574c:	2202      	movs	r2, #2
 801574e:	801a      	strh	r2, [r3, #0]
 8015750:	4b3a      	ldr	r3, [pc, #232]	; (801583c <setRotation+0x2dc>)
 8015752:	2204      	movs	r2, #4
 8015754:	801a      	strh	r2, [r3, #0]
 8015756:	4b3a      	ldr	r3, [pc, #232]	; (8015840 <setRotation+0x2e0>)
 8015758:	2206      	movs	r2, #6
 801575a:	801a      	strh	r2, [r3, #0]
 801575c:	4b39      	ldr	r3, [pc, #228]	; (8015844 <setRotation+0x2e4>)
 801575e:	2208      	movs	r2, #8
 8015760:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8015762:	4b30      	ldr	r3, [pc, #192]	; (8015824 <setRotation+0x2c4>)
 8015764:	881b      	ldrh	r3, [r3, #0]
 8015766:	2b65      	cmp	r3, #101	; 0x65
 8015768:	d121      	bne.n	80157ae <setRotation+0x24e>
               val |= 0x01;    //GS=1
 801576a:	7afb      	ldrb	r3, [r7, #11]
 801576c:	f043 0301 	orr.w	r3, r3, #1
 8015770:	b2db      	uxtb	r3, r3
 8015772:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8015774:	7afb      	ldrb	r3, [r7, #11]
 8015776:	f003 0310 	and.w	r3, r3, #16
 801577a:	2b00      	cmp	r3, #0
 801577c:	d005      	beq.n	801578a <setRotation+0x22a>
 801577e:	7afa      	ldrb	r2, [r7, #11]
 8015780:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8015784:	4053      	eors	r3, r2
 8015786:	b2db      	uxtb	r3, r3
 8015788:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 801578a:	79fb      	ldrb	r3, [r7, #7]
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	d006      	beq.n	80157a2 <setRotation+0x242>
 8015794:	4b25      	ldr	r3, [pc, #148]	; (801582c <setRotation+0x2cc>)
 8015796:	2282      	movs	r2, #130	; 0x82
 8015798:	801a      	strh	r2, [r3, #0]
 801579a:	4b25      	ldr	r3, [pc, #148]	; (8015830 <setRotation+0x2d0>)
 801579c:	2280      	movs	r2, #128	; 0x80
 801579e:	801a      	strh	r2, [r3, #0]
 80157a0:	e005      	b.n	80157ae <setRotation+0x24e>
               else _MC = 0x80, _MP = 0x82;
 80157a2:	4b22      	ldr	r3, [pc, #136]	; (801582c <setRotation+0x2cc>)
 80157a4:	2280      	movs	r2, #128	; 0x80
 80157a6:	801a      	strh	r2, [r3, #0]
 80157a8:	4b21      	ldr	r3, [pc, #132]	; (8015830 <setRotation+0x2d0>)
 80157aa:	2282      	movs	r2, #130	; 0x82
 80157ac:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80157ae:	4b1d      	ldr	r3, [pc, #116]	; (8015824 <setRotation+0x2c4>)
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	f245 2252 	movw	r2, #21074	; 0x5252
 80157b6:	4293      	cmp	r3, r2
 80157b8:	d146      	bne.n	8015848 <setRotation+0x2e8>
               val |= 0x02;   //VERT_SCROLLON
 80157ba:	7afb      	ldrb	r3, [r7, #11]
 80157bc:	f043 0302 	orr.w	r3, r3, #2
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80157c4:	7afb      	ldrb	r3, [r7, #11]
 80157c6:	f003 0310 	and.w	r3, r3, #16
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d03c      	beq.n	8015848 <setRotation+0x2e8>
 80157ce:	7afa      	ldrb	r2, [r7, #11]
 80157d0:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80157d4:	4053      	eors	r3, r2
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80157da:	e035      	b.n	8015848 <setRotation+0x2e8>
           goto common_MC;
 80157dc:	bf00      	nop
 80157de:	e000      	b.n	80157e2 <setRotation+0x282>
       }
     common_MC:
 80157e0:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80157e2:	4b12      	ldr	r3, [pc, #72]	; (801582c <setRotation+0x2cc>)
 80157e4:	222a      	movs	r2, #42	; 0x2a
 80157e6:	801a      	strh	r2, [r3, #0]
 80157e8:	4b11      	ldr	r3, [pc, #68]	; (8015830 <setRotation+0x2d0>)
 80157ea:	222b      	movs	r2, #43	; 0x2b
 80157ec:	801a      	strh	r2, [r3, #0]
 80157ee:	4b11      	ldr	r3, [pc, #68]	; (8015834 <setRotation+0x2d4>)
 80157f0:	222c      	movs	r2, #44	; 0x2c
 80157f2:	801a      	strh	r2, [r3, #0]
 80157f4:	4b10      	ldr	r3, [pc, #64]	; (8015838 <setRotation+0x2d8>)
 80157f6:	222a      	movs	r2, #42	; 0x2a
 80157f8:	801a      	strh	r2, [r3, #0]
 80157fa:	4b10      	ldr	r3, [pc, #64]	; (801583c <setRotation+0x2dc>)
 80157fc:	222a      	movs	r2, #42	; 0x2a
 80157fe:	801a      	strh	r2, [r3, #0]
 8015800:	4b0f      	ldr	r3, [pc, #60]	; (8015840 <setRotation+0x2e0>)
 8015802:	222b      	movs	r2, #43	; 0x2b
 8015804:	801a      	strh	r2, [r3, #0]
 8015806:	4b0f      	ldr	r3, [pc, #60]	; (8015844 <setRotation+0x2e4>)
 8015808:	222b      	movs	r2, #43	; 0x2b
 801580a:	801a      	strh	r2, [r3, #0]
 801580c:	e01d      	b.n	801584a <setRotation+0x2ea>
 801580e:	bf00      	nop
 8015810:	20006992 	.word	0x20006992
 8015814:	2000021b 	.word	0x2000021b
 8015818:	20000014 	.word	0x20000014
 801581c:	20000016 	.word	0x20000016
 8015820:	2000698e 	.word	0x2000698e
 8015824:	2000699c 	.word	0x2000699c
 8015828:	20000218 	.word	0x20000218
 801582c:	20006996 	.word	0x20006996
 8015830:	20006994 	.word	0x20006994
 8015834:	2000698c 	.word	0x2000698c
 8015838:	20006998 	.word	0x20006998
 801583c:	200069a0 	.word	0x200069a0
 8015840:	20006990 	.word	0x20006990
 8015844:	2000699a 	.word	0x2000699a
			goto common_BGR;
 8015848:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 801584a:	4b7c      	ldr	r3, [pc, #496]	; (8015a3c <setRotation+0x4dc>)
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d001      	beq.n	8015856 <setRotation+0x2f6>
 8015852:	2316      	movs	r3, #22
 8015854:	e000      	b.n	8015858 <setRotation+0x2f8>
 8015856:	2336      	movs	r3, #54	; 0x36
 8015858:	f107 020b 	add.w	r2, r7, #11
 801585c:	2101      	movs	r1, #1
 801585e:	4618      	mov	r0, r3
 8015860:	f7fc fd20 	bl	80122a4 <WriteCmdParamN>
       _lcd_madctl = val;
 8015864:	7afb      	ldrb	r3, [r7, #11]
 8015866:	b29a      	uxth	r2, r3
 8015868:	4b75      	ldr	r3, [pc, #468]	; (8015a40 <setRotation+0x4e0>)
 801586a:	801a      	strh	r2, [r3, #0]
 801586c:	e0a1      	b.n	80159b2 <setRotation+0x452>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 801586e:	4b75      	ldr	r3, [pc, #468]	; (8015a44 <setRotation+0x4e4>)
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	f24b 5209 	movw	r2, #46345	; 0xb509
 8015876:	4293      	cmp	r3, r2
 8015878:	d013      	beq.n	80158a2 <setRotation+0x342>
 801587a:	f24b 5209 	movw	r2, #46345	; 0xb509
 801587e:	4293      	cmp	r3, r2
 8015880:	dc4d      	bgt.n	801591e <setRotation+0x3be>
 8015882:	f249 3226 	movw	r2, #37670	; 0x9326
 8015886:	4293      	cmp	r3, r2
 8015888:	d00b      	beq.n	80158a2 <setRotation+0x342>
 801588a:	f249 3226 	movw	r2, #37670	; 0x9326
 801588e:	4293      	cmp	r3, r2
 8015890:	dc45      	bgt.n	801591e <setRotation+0x3be>
 8015892:	f245 4220 	movw	r2, #21536	; 0x5420
 8015896:	4293      	cmp	r3, r2
 8015898:	d003      	beq.n	80158a2 <setRotation+0x342>
 801589a:	f247 7293 	movw	r2, #30611	; 0x7793
 801589e:	4293      	cmp	r3, r2
 80158a0:	d13d      	bne.n	801591e <setRotation+0x3be>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80158a2:	4b69      	ldr	r3, [pc, #420]	; (8015a48 <setRotation+0x4e8>)
 80158a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80158a8:	801a      	strh	r2, [r3, #0]
 80158aa:	4b68      	ldr	r3, [pc, #416]	; (8015a4c <setRotation+0x4ec>)
 80158ac:	f240 2201 	movw	r2, #513	; 0x201
 80158b0:	801a      	strh	r2, [r3, #0]
 80158b2:	4b67      	ldr	r3, [pc, #412]	; (8015a50 <setRotation+0x4f0>)
 80158b4:	f240 2202 	movw	r2, #514	; 0x202
 80158b8:	801a      	strh	r2, [r3, #0]
 80158ba:	4b66      	ldr	r3, [pc, #408]	; (8015a54 <setRotation+0x4f4>)
 80158bc:	f44f 7204 	mov.w	r2, #528	; 0x210
 80158c0:	801a      	strh	r2, [r3, #0]
 80158c2:	4b65      	ldr	r3, [pc, #404]	; (8015a58 <setRotation+0x4f8>)
 80158c4:	f240 2211 	movw	r2, #529	; 0x211
 80158c8:	801a      	strh	r2, [r3, #0]
 80158ca:	4b64      	ldr	r3, [pc, #400]	; (8015a5c <setRotation+0x4fc>)
 80158cc:	f240 2212 	movw	r2, #530	; 0x212
 80158d0:	801a      	strh	r2, [r3, #0]
 80158d2:	4b63      	ldr	r3, [pc, #396]	; (8015a60 <setRotation+0x500>)
 80158d4:	f240 2213 	movw	r2, #531	; 0x213
 80158d8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80158da:	7afb      	ldrb	r3, [r7, #11]
 80158dc:	b25b      	sxtb	r3, r3
 80158de:	b29a      	uxth	r2, r3
 80158e0:	4b60      	ldr	r3, [pc, #384]	; (8015a64 <setRotation+0x504>)
 80158e2:	4013      	ands	r3, r2
 80158e4:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80158e6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80158ea:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80158ec:	4b55      	ldr	r3, [pc, #340]	; (8015a44 <setRotation+0x4e4>)
 80158ee:	881b      	ldrh	r3, [r3, #0]
 80158f0:	f249 3226 	movw	r2, #37670	; 0x9326
 80158f4:	4293      	cmp	r3, r2
 80158f6:	d005      	beq.n	8015904 <setRotation+0x3a4>
 80158f8:	4b52      	ldr	r3, [pc, #328]	; (8015a44 <setRotation+0x4e4>)
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	f245 4220 	movw	r2, #21536	; 0x5420
 8015900:	4293      	cmp	r3, r2
 8015902:	d102      	bne.n	801590a <setRotation+0x3aa>
 8015904:	8abb      	ldrh	r3, [r7, #20]
 8015906:	085b      	lsrs	r3, r3, #1
 8015908:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 801590a:	8a3a      	ldrh	r2, [r7, #16]
 801590c:	8abb      	ldrh	r3, [r7, #20]
 801590e:	4313      	orrs	r3, r2
 8015910:	b29b      	uxth	r3, r3
 8015912:	4619      	mov	r1, r3
 8015914:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015918:	f7fc f844 	bl	80119a4 <WriteCmdData>
           goto common_SS;
 801591c:	e022      	b.n	8015964 <setRotation+0x404>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 801591e:	4b4a      	ldr	r3, [pc, #296]	; (8015a48 <setRotation+0x4e8>)
 8015920:	2220      	movs	r2, #32
 8015922:	801a      	strh	r2, [r3, #0]
 8015924:	4b49      	ldr	r3, [pc, #292]	; (8015a4c <setRotation+0x4ec>)
 8015926:	2221      	movs	r2, #33	; 0x21
 8015928:	801a      	strh	r2, [r3, #0]
 801592a:	4b49      	ldr	r3, [pc, #292]	; (8015a50 <setRotation+0x4f0>)
 801592c:	2222      	movs	r2, #34	; 0x22
 801592e:	801a      	strh	r2, [r3, #0]
 8015930:	4b48      	ldr	r3, [pc, #288]	; (8015a54 <setRotation+0x4f4>)
 8015932:	2250      	movs	r2, #80	; 0x50
 8015934:	801a      	strh	r2, [r3, #0]
 8015936:	4b48      	ldr	r3, [pc, #288]	; (8015a58 <setRotation+0x4f8>)
 8015938:	2251      	movs	r2, #81	; 0x51
 801593a:	801a      	strh	r2, [r3, #0]
 801593c:	4b47      	ldr	r3, [pc, #284]	; (8015a5c <setRotation+0x4fc>)
 801593e:	2252      	movs	r2, #82	; 0x52
 8015940:	801a      	strh	r2, [r3, #0]
 8015942:	4b47      	ldr	r3, [pc, #284]	; (8015a60 <setRotation+0x500>)
 8015944:	2253      	movs	r2, #83	; 0x53
 8015946:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8015948:	7afb      	ldrb	r3, [r7, #11]
 801594a:	b25b      	sxtb	r3, r3
 801594c:	b29a      	uxth	r2, r3
 801594e:	4b45      	ldr	r3, [pc, #276]	; (8015a64 <setRotation+0x504>)
 8015950:	4013      	ands	r3, r2
 8015952:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8015954:	8a3b      	ldrh	r3, [r7, #16]
 8015956:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 801595a:	b29b      	uxth	r3, r3
 801595c:	4619      	mov	r1, r3
 801595e:	2060      	movs	r0, #96	; 0x60
 8015960:	f7fc f820 	bl	80119a4 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8015964:	7afb      	ldrb	r3, [r7, #11]
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	b29b      	uxth	r3, r3
 801596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801596e:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8015970:	89fb      	ldrh	r3, [r7, #14]
 8015972:	4619      	mov	r1, r3
 8015974:	2001      	movs	r0, #1
 8015976:	f7fc f815 	bl	80119a4 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 801597a:	7afb      	ldrb	r3, [r7, #11]
 801597c:	109b      	asrs	r3, r3, #2
 801597e:	b29b      	uxth	r3, r3
 8015980:	f003 0308 	and.w	r3, r3, #8
 8015984:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8015986:	7afb      	ldrb	r3, [r7, #11]
 8015988:	f003 0308 	and.w	r3, r3, #8
 801598c:	2b00      	cmp	r3, #0
 801598e:	d003      	beq.n	8015998 <setRotation+0x438>
               ORG |= 0x1000;  //BGR
 8015990:	8afb      	ldrh	r3, [r7, #22]
 8015992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015996:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8015998:	8afb      	ldrh	r3, [r7, #22]
 801599a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801599e:	b29a      	uxth	r2, r3
 80159a0:	4b27      	ldr	r3, [pc, #156]	; (8015a40 <setRotation+0x4e0>)
 80159a2:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80159a4:	4b26      	ldr	r3, [pc, #152]	; (8015a40 <setRotation+0x4e0>)
 80159a6:	881b      	ldrh	r3, [r3, #0]
 80159a8:	4619      	mov	r1, r3
 80159aa:	2003      	movs	r0, #3
 80159ac:	f7fb fffa 	bl	80119a4 <WriteCmdData>
           break;
 80159b0:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80159b2:	4b2d      	ldr	r3, [pc, #180]	; (8015a68 <setRotation+0x508>)
 80159b4:	781b      	ldrb	r3, [r3, #0]
 80159b6:	f003 0301 	and.w	r3, r3, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d023      	beq.n	8015a06 <setRotation+0x4a6>
 80159be:	4b2b      	ldr	r3, [pc, #172]	; (8015a6c <setRotation+0x50c>)
 80159c0:	881b      	ldrh	r3, [r3, #0]
 80159c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d11d      	bne.n	8015a06 <setRotation+0x4a6>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80159ca:	4b1f      	ldr	r3, [pc, #124]	; (8015a48 <setRotation+0x4e8>)
 80159cc:	881b      	ldrh	r3, [r3, #0]
 80159ce:	81bb      	strh	r3, [r7, #12]
 80159d0:	4b1e      	ldr	r3, [pc, #120]	; (8015a4c <setRotation+0x4ec>)
 80159d2:	881a      	ldrh	r2, [r3, #0]
 80159d4:	4b1c      	ldr	r3, [pc, #112]	; (8015a48 <setRotation+0x4e8>)
 80159d6:	801a      	strh	r2, [r3, #0]
 80159d8:	4a1c      	ldr	r2, [pc, #112]	; (8015a4c <setRotation+0x4ec>)
 80159da:	89bb      	ldrh	r3, [r7, #12]
 80159dc:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80159de:	4b1d      	ldr	r3, [pc, #116]	; (8015a54 <setRotation+0x4f4>)
 80159e0:	881b      	ldrh	r3, [r3, #0]
 80159e2:	81bb      	strh	r3, [r7, #12]
 80159e4:	4b1d      	ldr	r3, [pc, #116]	; (8015a5c <setRotation+0x4fc>)
 80159e6:	881a      	ldrh	r2, [r3, #0]
 80159e8:	4b1a      	ldr	r3, [pc, #104]	; (8015a54 <setRotation+0x4f4>)
 80159ea:	801a      	strh	r2, [r3, #0]
 80159ec:	4a1b      	ldr	r2, [pc, #108]	; (8015a5c <setRotation+0x4fc>)
 80159ee:	89bb      	ldrh	r3, [r7, #12]
 80159f0:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80159f2:	4b19      	ldr	r3, [pc, #100]	; (8015a58 <setRotation+0x4f8>)
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	81bb      	strh	r3, [r7, #12]
 80159f8:	4b19      	ldr	r3, [pc, #100]	; (8015a60 <setRotation+0x500>)
 80159fa:	881a      	ldrh	r2, [r3, #0]
 80159fc:	4b16      	ldr	r3, [pc, #88]	; (8015a58 <setRotation+0x4f8>)
 80159fe:	801a      	strh	r2, [r3, #0]
 8015a00:	4a17      	ldr	r2, [pc, #92]	; (8015a60 <setRotation+0x500>)
 8015a02:	89bb      	ldrh	r3, [r7, #12]
 8015a04:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8015a06:	f7fb ff05 	bl	8011814 <width>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	b21c      	sxth	r4, r3
 8015a12:	f7fb ff0b 	bl	801182c <height>
 8015a16:	4603      	mov	r3, r0
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	b21b      	sxth	r3, r3
 8015a1e:	4622      	mov	r2, r4
 8015a20:	2100      	movs	r1, #0
 8015a22:	2000      	movs	r0, #0
 8015a24:	f000 f99e 	bl	8015d64 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8015a28:	2200      	movs	r2, #0
 8015a2a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8015a2e:	2000      	movs	r0, #0
 8015a30:	f000 fabc 	bl	8015fac <vertScroll>
}
 8015a34:	bf00      	nop
 8015a36:	371c      	adds	r7, #28
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd90      	pop	{r4, r7, pc}
 8015a3c:	20000218 	.word	0x20000218
 8015a40:	200069a2 	.word	0x200069a2
 8015a44:	2000699c 	.word	0x2000699c
 8015a48:	20006996 	.word	0x20006996
 8015a4c:	20006994 	.word	0x20006994
 8015a50:	2000698c 	.word	0x2000698c
 8015a54:	20006998 	.word	0x20006998
 8015a58:	200069a0 	.word	0x200069a0
 8015a5c:	20006990 	.word	0x20006990
 8015a60:	2000699a 	.word	0x2000699a
 8015a64:	ffff8000 	.word	0xffff8000
 8015a68:	2000021b 	.word	0x2000021b
 8015a6c:	2000698e 	.word	0x2000698e

08015a70 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	80fb      	strh	r3, [r7, #6]
 8015a7a:	460b      	mov	r3, r1
 8015a7c:	80bb      	strh	r3, [r7, #4]
 8015a7e:	4613      	mov	r3, r2
 8015a80:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8015a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f2c0 8159 	blt.w	8015d3e <drawPixel+0x2ce>
 8015a8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f2c0 8154 	blt.w	8015d3e <drawPixel+0x2ce>
 8015a96:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015a9a:	f7fb febb 	bl	8011814 <width>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	429c      	cmp	r4, r3
 8015aa2:	f280 814c 	bge.w	8015d3e <drawPixel+0x2ce>
 8015aa6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8015aaa:	f7fb febf 	bl	801182c <height>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	429c      	cmp	r4, r3
 8015ab2:	f280 8144 	bge.w	8015d3e <drawPixel+0x2ce>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8015ab6:	4ba4      	ldr	r3, [pc, #656]	; (8015d48 <drawPixel+0x2d8>)
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d005      	beq.n	8015aca <drawPixel+0x5a>
 8015abe:	887b      	ldrh	r3, [r7, #2]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7fb febf 	bl	8011844 <color565_to_555>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8015aca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015ace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015ad2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015ad6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8015ada:	f000 f943 	bl	8015d64 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8015ade:	4b9b      	ldr	r3, [pc, #620]	; (8015d4c <drawPixel+0x2dc>)
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f000 8123 	beq.w	8015d2e <drawPixel+0x2be>
 8015ae8:	2108      	movs	r1, #8
 8015aea:	4899      	ldr	r0, [pc, #612]	; (8015d50 <drawPixel+0x2e0>)
 8015aec:	f7fb fe43 	bl	8011776 <PIN_LOW>
 8015af0:	2120      	movs	r1, #32
 8015af2:	4898      	ldr	r0, [pc, #608]	; (8015d54 <drawPixel+0x2e4>)
 8015af4:	f7fb fe3f 	bl	8011776 <PIN_LOW>
 8015af8:	4b97      	ldr	r3, [pc, #604]	; (8015d58 <drawPixel+0x2e8>)
 8015afa:	881b      	ldrh	r3, [r3, #0]
 8015afc:	0a1b      	lsrs	r3, r3, #8
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	73fb      	strb	r3, [r7, #15]
 8015b02:	4b95      	ldr	r3, [pc, #596]	; (8015d58 <drawPixel+0x2e8>)
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	73bb      	strb	r3, [r7, #14]
 8015b08:	4b92      	ldr	r3, [pc, #584]	; (8015d54 <drawPixel+0x2e4>)
 8015b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015b0e:	619a      	str	r2, [r3, #24]
 8015b10:	4b92      	ldr	r3, [pc, #584]	; (8015d5c <drawPixel+0x2ec>)
 8015b12:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8015b16:	619a      	str	r2, [r3, #24]
 8015b18:	4b8d      	ldr	r3, [pc, #564]	; (8015d50 <drawPixel+0x2e0>)
 8015b1a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8015b1e:	619a      	str	r2, [r3, #24]
 8015b20:	7bfb      	ldrb	r3, [r7, #15]
 8015b22:	039b      	lsls	r3, r3, #14
 8015b24:	4a8b      	ldr	r2, [pc, #556]	; (8015d54 <drawPixel+0x2e4>)
 8015b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b2a:	6193      	str	r3, [r2, #24]
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
 8015b2e:	029b      	lsls	r3, r3, #10
 8015b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
 8015b36:	019b      	lsls	r3, r3, #6
 8015b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015b3c:	431a      	orrs	r2, r3
 8015b3e:	7bfb      	ldrb	r3, [r7, #15]
 8015b40:	00db      	lsls	r3, r3, #3
 8015b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015b46:	431a      	orrs	r2, r3
 8015b48:	4b84      	ldr	r3, [pc, #528]	; (8015d5c <drawPixel+0x2ec>)
 8015b4a:	619a      	str	r2, [r3, #24]
 8015b4c:	7bfb      	ldrb	r3, [r7, #15]
 8015b4e:	031b      	lsls	r3, r3, #12
 8015b50:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015b54:	7bfb      	ldrb	r3, [r7, #15]
 8015b56:	035b      	lsls	r3, r3, #13
 8015b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b5c:	431a      	orrs	r2, r3
 8015b5e:	7bfb      	ldrb	r3, [r7, #15]
 8015b60:	029b      	lsls	r3, r3, #10
 8015b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b66:	431a      	orrs	r2, r3
 8015b68:	7bfb      	ldrb	r3, [r7, #15]
 8015b6a:	019b      	lsls	r3, r3, #6
 8015b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015b70:	431a      	orrs	r2, r3
 8015b72:	4b77      	ldr	r3, [pc, #476]	; (8015d50 <drawPixel+0x2e0>)
 8015b74:	619a      	str	r2, [r3, #24]
 8015b76:	2101      	movs	r1, #1
 8015b78:	4879      	ldr	r0, [pc, #484]	; (8015d60 <drawPixel+0x2f0>)
 8015b7a:	f7fb fdfc 	bl	8011776 <PIN_LOW>
 8015b7e:	2101      	movs	r1, #1
 8015b80:	4877      	ldr	r0, [pc, #476]	; (8015d60 <drawPixel+0x2f0>)
 8015b82:	f7fb fdf8 	bl	8011776 <PIN_LOW>
 8015b86:	2101      	movs	r1, #1
 8015b88:	4875      	ldr	r0, [pc, #468]	; (8015d60 <drawPixel+0x2f0>)
 8015b8a:	f7fb fdf4 	bl	8011776 <PIN_LOW>
 8015b8e:	2101      	movs	r1, #1
 8015b90:	4873      	ldr	r0, [pc, #460]	; (8015d60 <drawPixel+0x2f0>)
 8015b92:	f7fb fdf0 	bl	8011776 <PIN_LOW>
 8015b96:	2101      	movs	r1, #1
 8015b98:	4871      	ldr	r0, [pc, #452]	; (8015d60 <drawPixel+0x2f0>)
 8015b9a:	f7fb fdec 	bl	8011776 <PIN_LOW>
 8015b9e:	2101      	movs	r1, #1
 8015ba0:	486f      	ldr	r0, [pc, #444]	; (8015d60 <drawPixel+0x2f0>)
 8015ba2:	f7fb fde8 	bl	8011776 <PIN_LOW>
 8015ba6:	2101      	movs	r1, #1
 8015ba8:	486d      	ldr	r0, [pc, #436]	; (8015d60 <drawPixel+0x2f0>)
 8015baa:	f7fb fde4 	bl	8011776 <PIN_LOW>
 8015bae:	2101      	movs	r1, #1
 8015bb0:	486b      	ldr	r0, [pc, #428]	; (8015d60 <drawPixel+0x2f0>)
 8015bb2:	f7fb fde0 	bl	8011776 <PIN_LOW>
 8015bb6:	2101      	movs	r1, #1
 8015bb8:	4869      	ldr	r0, [pc, #420]	; (8015d60 <drawPixel+0x2f0>)
 8015bba:	f7fb fddc 	bl	8011776 <PIN_LOW>
 8015bbe:	2101      	movs	r1, #1
 8015bc0:	4867      	ldr	r0, [pc, #412]	; (8015d60 <drawPixel+0x2f0>)
 8015bc2:	f7fb fdd8 	bl	8011776 <PIN_LOW>
 8015bc6:	2101      	movs	r1, #1
 8015bc8:	4865      	ldr	r0, [pc, #404]	; (8015d60 <drawPixel+0x2f0>)
 8015bca:	f7fb fdd4 	bl	8011776 <PIN_LOW>
 8015bce:	2101      	movs	r1, #1
 8015bd0:	4863      	ldr	r0, [pc, #396]	; (8015d60 <drawPixel+0x2f0>)
 8015bd2:	f7fb fdd0 	bl	8011776 <PIN_LOW>
 8015bd6:	2101      	movs	r1, #1
 8015bd8:	4861      	ldr	r0, [pc, #388]	; (8015d60 <drawPixel+0x2f0>)
 8015bda:	f7fb fdcc 	bl	8011776 <PIN_LOW>
 8015bde:	2101      	movs	r1, #1
 8015be0:	485f      	ldr	r0, [pc, #380]	; (8015d60 <drawPixel+0x2f0>)
 8015be2:	f7fb fdc8 	bl	8011776 <PIN_LOW>
 8015be6:	2101      	movs	r1, #1
 8015be8:	485d      	ldr	r0, [pc, #372]	; (8015d60 <drawPixel+0x2f0>)
 8015bea:	f7fb fdc4 	bl	8011776 <PIN_LOW>
 8015bee:	2101      	movs	r1, #1
 8015bf0:	485b      	ldr	r0, [pc, #364]	; (8015d60 <drawPixel+0x2f0>)
 8015bf2:	f7fb fdc0 	bl	8011776 <PIN_LOW>
 8015bf6:	2101      	movs	r1, #1
 8015bf8:	4859      	ldr	r0, [pc, #356]	; (8015d60 <drawPixel+0x2f0>)
 8015bfa:	f7fb fdbc 	bl	8011776 <PIN_LOW>
 8015bfe:	2101      	movs	r1, #1
 8015c00:	4857      	ldr	r0, [pc, #348]	; (8015d60 <drawPixel+0x2f0>)
 8015c02:	f7fb fdc8 	bl	8011796 <PIN_HIGH>
 8015c06:	2101      	movs	r1, #1
 8015c08:	4855      	ldr	r0, [pc, #340]	; (8015d60 <drawPixel+0x2f0>)
 8015c0a:	f7fb fdc4 	bl	8011796 <PIN_HIGH>
 8015c0e:	4b51      	ldr	r3, [pc, #324]	; (8015d54 <drawPixel+0x2e4>)
 8015c10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015c14:	619a      	str	r2, [r3, #24]
 8015c16:	4b51      	ldr	r3, [pc, #324]	; (8015d5c <drawPixel+0x2ec>)
 8015c18:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8015c1c:	619a      	str	r2, [r3, #24]
 8015c1e:	4b4c      	ldr	r3, [pc, #304]	; (8015d50 <drawPixel+0x2e0>)
 8015c20:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8015c24:	619a      	str	r2, [r3, #24]
 8015c26:	7bbb      	ldrb	r3, [r7, #14]
 8015c28:	039b      	lsls	r3, r3, #14
 8015c2a:	4a4a      	ldr	r2, [pc, #296]	; (8015d54 <drawPixel+0x2e4>)
 8015c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c30:	6193      	str	r3, [r2, #24]
 8015c32:	7bbb      	ldrb	r3, [r7, #14]
 8015c34:	029b      	lsls	r3, r3, #10
 8015c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8015c3a:	7bbb      	ldrb	r3, [r7, #14]
 8015c3c:	019b      	lsls	r3, r3, #6
 8015c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c42:	431a      	orrs	r2, r3
 8015c44:	7bbb      	ldrb	r3, [r7, #14]
 8015c46:	00db      	lsls	r3, r3, #3
 8015c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015c4c:	431a      	orrs	r2, r3
 8015c4e:	4b43      	ldr	r3, [pc, #268]	; (8015d5c <drawPixel+0x2ec>)
 8015c50:	619a      	str	r2, [r3, #24]
 8015c52:	7bbb      	ldrb	r3, [r7, #14]
 8015c54:	031b      	lsls	r3, r3, #12
 8015c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015c5a:	7bbb      	ldrb	r3, [r7, #14]
 8015c5c:	035b      	lsls	r3, r3, #13
 8015c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c62:	431a      	orrs	r2, r3
 8015c64:	7bbb      	ldrb	r3, [r7, #14]
 8015c66:	029b      	lsls	r3, r3, #10
 8015c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c6c:	431a      	orrs	r2, r3
 8015c6e:	7bbb      	ldrb	r3, [r7, #14]
 8015c70:	019b      	lsls	r3, r3, #6
 8015c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015c76:	431a      	orrs	r2, r3
 8015c78:	4b35      	ldr	r3, [pc, #212]	; (8015d50 <drawPixel+0x2e0>)
 8015c7a:	619a      	str	r2, [r3, #24]
 8015c7c:	2101      	movs	r1, #1
 8015c7e:	4838      	ldr	r0, [pc, #224]	; (8015d60 <drawPixel+0x2f0>)
 8015c80:	f7fb fd79 	bl	8011776 <PIN_LOW>
 8015c84:	2101      	movs	r1, #1
 8015c86:	4836      	ldr	r0, [pc, #216]	; (8015d60 <drawPixel+0x2f0>)
 8015c88:	f7fb fd75 	bl	8011776 <PIN_LOW>
 8015c8c:	2101      	movs	r1, #1
 8015c8e:	4834      	ldr	r0, [pc, #208]	; (8015d60 <drawPixel+0x2f0>)
 8015c90:	f7fb fd71 	bl	8011776 <PIN_LOW>
 8015c94:	2101      	movs	r1, #1
 8015c96:	4832      	ldr	r0, [pc, #200]	; (8015d60 <drawPixel+0x2f0>)
 8015c98:	f7fb fd6d 	bl	8011776 <PIN_LOW>
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	4830      	ldr	r0, [pc, #192]	; (8015d60 <drawPixel+0x2f0>)
 8015ca0:	f7fb fd69 	bl	8011776 <PIN_LOW>
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	482e      	ldr	r0, [pc, #184]	; (8015d60 <drawPixel+0x2f0>)
 8015ca8:	f7fb fd65 	bl	8011776 <PIN_LOW>
 8015cac:	2101      	movs	r1, #1
 8015cae:	482c      	ldr	r0, [pc, #176]	; (8015d60 <drawPixel+0x2f0>)
 8015cb0:	f7fb fd61 	bl	8011776 <PIN_LOW>
 8015cb4:	2101      	movs	r1, #1
 8015cb6:	482a      	ldr	r0, [pc, #168]	; (8015d60 <drawPixel+0x2f0>)
 8015cb8:	f7fb fd5d 	bl	8011776 <PIN_LOW>
 8015cbc:	2101      	movs	r1, #1
 8015cbe:	4828      	ldr	r0, [pc, #160]	; (8015d60 <drawPixel+0x2f0>)
 8015cc0:	f7fb fd59 	bl	8011776 <PIN_LOW>
 8015cc4:	2101      	movs	r1, #1
 8015cc6:	4826      	ldr	r0, [pc, #152]	; (8015d60 <drawPixel+0x2f0>)
 8015cc8:	f7fb fd55 	bl	8011776 <PIN_LOW>
 8015ccc:	2101      	movs	r1, #1
 8015cce:	4824      	ldr	r0, [pc, #144]	; (8015d60 <drawPixel+0x2f0>)
 8015cd0:	f7fb fd51 	bl	8011776 <PIN_LOW>
 8015cd4:	2101      	movs	r1, #1
 8015cd6:	4822      	ldr	r0, [pc, #136]	; (8015d60 <drawPixel+0x2f0>)
 8015cd8:	f7fb fd4d 	bl	8011776 <PIN_LOW>
 8015cdc:	2101      	movs	r1, #1
 8015cde:	4820      	ldr	r0, [pc, #128]	; (8015d60 <drawPixel+0x2f0>)
 8015ce0:	f7fb fd49 	bl	8011776 <PIN_LOW>
 8015ce4:	2101      	movs	r1, #1
 8015ce6:	481e      	ldr	r0, [pc, #120]	; (8015d60 <drawPixel+0x2f0>)
 8015ce8:	f7fb fd45 	bl	8011776 <PIN_LOW>
 8015cec:	2101      	movs	r1, #1
 8015cee:	481c      	ldr	r0, [pc, #112]	; (8015d60 <drawPixel+0x2f0>)
 8015cf0:	f7fb fd41 	bl	8011776 <PIN_LOW>
 8015cf4:	2101      	movs	r1, #1
 8015cf6:	481a      	ldr	r0, [pc, #104]	; (8015d60 <drawPixel+0x2f0>)
 8015cf8:	f7fb fd3d 	bl	8011776 <PIN_LOW>
 8015cfc:	2101      	movs	r1, #1
 8015cfe:	4818      	ldr	r0, [pc, #96]	; (8015d60 <drawPixel+0x2f0>)
 8015d00:	f7fb fd39 	bl	8011776 <PIN_LOW>
 8015d04:	2101      	movs	r1, #1
 8015d06:	4816      	ldr	r0, [pc, #88]	; (8015d60 <drawPixel+0x2f0>)
 8015d08:	f7fb fd45 	bl	8011796 <PIN_HIGH>
 8015d0c:	2101      	movs	r1, #1
 8015d0e:	4814      	ldr	r0, [pc, #80]	; (8015d60 <drawPixel+0x2f0>)
 8015d10:	f7fb fd41 	bl	8011796 <PIN_HIGH>
 8015d14:	2120      	movs	r1, #32
 8015d16:	480f      	ldr	r0, [pc, #60]	; (8015d54 <drawPixel+0x2e4>)
 8015d18:	f7fb fd3d 	bl	8011796 <PIN_HIGH>
 8015d1c:	887b      	ldrh	r3, [r7, #2]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7fb feca 	bl	8011ab8 <write24>
 8015d24:	2108      	movs	r1, #8
 8015d26:	480a      	ldr	r0, [pc, #40]	; (8015d50 <drawPixel+0x2e0>)
 8015d28:	f7fb fd35 	bl	8011796 <PIN_HIGH>
 8015d2c:	e008      	b.n	8015d40 <drawPixel+0x2d0>
   WriteCmdData(_MW, color);
 8015d2e:	4b0a      	ldr	r3, [pc, #40]	; (8015d58 <drawPixel+0x2e8>)
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	887a      	ldrh	r2, [r7, #2]
 8015d34:	4611      	mov	r1, r2
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7fb fe34 	bl	80119a4 <WriteCmdData>
 8015d3c:	e000      	b.n	8015d40 <drawPixel+0x2d0>
       return;
 8015d3e:	bf00      	nop
}
 8015d40:	3714      	adds	r7, #20
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd90      	pop	{r4, r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20000219 	.word	0x20000219
 8015d4c:	2000021a 	.word	0x2000021a
 8015d50:	40021400 	.word	0x40021400
 8015d54:	40020c00 	.word	0x40020c00
 8015d58:	2000698c 	.word	0x2000698c
 8015d5c:	40021000 	.word	0x40021000
 8015d60:	40020800 	.word	0x40020800

08015d64 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8015d64:	b590      	push	{r4, r7, lr}
 8015d66:	b087      	sub	sp, #28
 8015d68:	af02      	add	r7, sp, #8
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	4608      	mov	r0, r1
 8015d6e:	4611      	mov	r1, r2
 8015d70:	461a      	mov	r2, r3
 8015d72:	4623      	mov	r3, r4
 8015d74:	80fb      	strh	r3, [r7, #6]
 8015d76:	4603      	mov	r3, r0
 8015d78:	80bb      	strh	r3, [r7, #4]
 8015d7a:	460b      	mov	r3, r1
 8015d7c:	807b      	strh	r3, [r7, #2]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8015d82:	4b80      	ldr	r3, [pc, #512]	; (8015f84 <setAddrWindow+0x220>)
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	f249 3227 	movw	r2, #37671	; 0x9327
 8015d8a:	4293      	cmp	r3, r2
 8015d8c:	d117      	bne.n	8015dbe <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8015d8e:	4b7e      	ldr	r3, [pc, #504]	; (8015f88 <setAddrWindow+0x224>)
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	2b02      	cmp	r3, #2
 8015d94:	d107      	bne.n	8015da6 <setAddrWindow+0x42>
 8015d96:	88bb      	ldrh	r3, [r7, #4]
 8015d98:	3320      	adds	r3, #32
 8015d9a:	b29b      	uxth	r3, r3
 8015d9c:	80bb      	strh	r3, [r7, #4]
 8015d9e:	883b      	ldrh	r3, [r7, #0]
 8015da0:	3320      	adds	r3, #32
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8015da6:	4b78      	ldr	r3, [pc, #480]	; (8015f88 <setAddrWindow+0x224>)
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b03      	cmp	r3, #3
 8015dac:	d107      	bne.n	8015dbe <setAddrWindow+0x5a>
 8015dae:	88fb      	ldrh	r3, [r7, #6]
 8015db0:	3320      	adds	r3, #32
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	80fb      	strh	r3, [r7, #6]
 8015db6:	887b      	ldrh	r3, [r7, #2]
 8015db8:	3320      	adds	r3, #32
 8015dba:	b29b      	uxth	r3, r3
 8015dbc:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8015dbe:	4b71      	ldr	r3, [pc, #452]	; (8015f84 <setAddrWindow+0x220>)
 8015dc0:	881b      	ldrh	r3, [r3, #0]
 8015dc2:	f241 5226 	movw	r2, #5414	; 0x1526
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d128      	bne.n	8015e1c <setAddrWindow+0xb8>
 8015dca:	4b6f      	ldr	r3, [pc, #444]	; (8015f88 <setAddrWindow+0x224>)
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	f003 0301 	and.w	r3, r3, #1
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d022      	beq.n	8015e1c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8015dd6:	887a      	ldrh	r2, [r7, #2]
 8015dd8:	88fb      	ldrh	r3, [r7, #6]
 8015dda:	1ad3      	subs	r3, r2, r3
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	81fb      	strh	r3, [r7, #14]
 8015de0:	883a      	ldrh	r2, [r7, #0]
 8015de2:	88bb      	ldrh	r3, [r7, #4]
 8015de4:	1ad3      	subs	r3, r2, r3
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8015dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d106      	bne.n	8015e00 <setAddrWindow+0x9c>
 8015df2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015df6:	b29b      	uxth	r3, r3
 8015df8:	3301      	adds	r3, #1
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	803b      	strh	r3, [r7, #0]
 8015dfe:	e00d      	b.n	8015e1c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8015e00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d109      	bne.n	8015e1c <setAddrWindow+0xb8>
 8015e08:	887a      	ldrh	r2, [r7, #2]
 8015e0a:	89bb      	ldrh	r3, [r7, #12]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	807b      	strh	r3, [r7, #2]
 8015e12:	883a      	ldrh	r2, [r7, #0]
 8015e14:	89bb      	ldrh	r3, [r7, #12]
 8015e16:	1ad3      	subs	r3, r2, r3
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8015e1c:	4b5b      	ldr	r3, [pc, #364]	; (8015f8c <setAddrWindow+0x228>)
 8015e1e:	881b      	ldrh	r3, [r3, #0]
 8015e20:	f003 0301 	and.w	r3, r3, #1
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d054      	beq.n	8015ed2 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8015e28:	4b59      	ldr	r3, [pc, #356]	; (8015f90 <setAddrWindow+0x22c>)
 8015e2a:	881b      	ldrh	r3, [r3, #0]
 8015e2c:	b2d8      	uxtb	r0, r3
 8015e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e32:	121b      	asrs	r3, r3, #8
 8015e34:	b21b      	sxth	r3, r3
 8015e36:	b2d9      	uxtb	r1, r3
 8015e38:	88fb      	ldrh	r3, [r7, #6]
 8015e3a:	b2da      	uxtb	r2, r3
 8015e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e40:	121b      	asrs	r3, r3, #8
 8015e42:	b21b      	sxth	r3, r3
 8015e44:	b2dc      	uxtb	r4, r3
 8015e46:	887b      	ldrh	r3, [r7, #2]
 8015e48:	b2db      	uxtb	r3, r3
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	4623      	mov	r3, r4
 8015e4e:	f7fc fd1f 	bl	8012890 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8015e52:	4b50      	ldr	r3, [pc, #320]	; (8015f94 <setAddrWindow+0x230>)
 8015e54:	881b      	ldrh	r3, [r3, #0]
 8015e56:	b2d8      	uxtb	r0, r3
 8015e58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015e5c:	121b      	asrs	r3, r3, #8
 8015e5e:	b21b      	sxth	r3, r3
 8015e60:	b2d9      	uxtb	r1, r3
 8015e62:	88bb      	ldrh	r3, [r7, #4]
 8015e64:	b2da      	uxtb	r2, r3
 8015e66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015e6a:	121b      	asrs	r3, r3, #8
 8015e6c:	b21b      	sxth	r3, r3
 8015e6e:	b2dc      	uxtb	r4, r3
 8015e70:	883b      	ldrh	r3, [r7, #0]
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	4623      	mov	r3, r4
 8015e78:	f7fc fd0a 	bl	8012890 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8015e7c:	4b46      	ldr	r3, [pc, #280]	; (8015f98 <setAddrWindow+0x234>)
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d07b      	beq.n	8015f7c <setAddrWindow+0x218>
 8015e84:	4b3f      	ldr	r3, [pc, #252]	; (8015f84 <setAddrWindow+0x220>)
 8015e86:	881b      	ldrh	r3, [r3, #0]
 8015e88:	2b65      	cmp	r3, #101	; 0x65
 8015e8a:	d177      	bne.n	8015f7c <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8015e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e90:	121b      	asrs	r3, r3, #8
 8015e92:	b21b      	sxth	r3, r3
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	723b      	strb	r3, [r7, #8]
 8015e98:	88fb      	ldrh	r3, [r7, #6]
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8015e9e:	4b3f      	ldr	r3, [pc, #252]	; (8015f9c <setAddrWindow+0x238>)
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	f107 0208 	add.w	r2, r7, #8
 8015ea6:	2102      	movs	r1, #2
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fc f9fb 	bl	80122a4 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8015eae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015eb2:	121b      	asrs	r3, r3, #8
 8015eb4:	b21b      	sxth	r3, r3
 8015eb6:	b2db      	uxtb	r3, r3
 8015eb8:	723b      	strb	r3, [r7, #8]
 8015eba:	88bb      	ldrh	r3, [r7, #4]
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8015ec0:	4b37      	ldr	r3, [pc, #220]	; (8015fa0 <setAddrWindow+0x23c>)
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	f107 0208 	add.w	r2, r7, #8
 8015ec8:	2102      	movs	r1, #2
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fc f9ea 	bl	80122a4 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8015ed0:	e054      	b.n	8015f7c <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8015ed2:	4b32      	ldr	r3, [pc, #200]	; (8015f9c <setAddrWindow+0x238>)
 8015ed4:	881b      	ldrh	r3, [r3, #0]
 8015ed6:	88fa      	ldrh	r2, [r7, #6]
 8015ed8:	4611      	mov	r1, r2
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7fb fd62 	bl	80119a4 <WriteCmdData>
       WriteCmdData(_MP, y);
 8015ee0:	4b2f      	ldr	r3, [pc, #188]	; (8015fa0 <setAddrWindow+0x23c>)
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	88ba      	ldrh	r2, [r7, #4]
 8015ee6:	4611      	mov	r1, r2
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7fb fd5b 	bl	80119a4 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8015eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015ef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d105      	bne.n	8015f06 <setAddrWindow+0x1a2>
 8015efa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015efe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d03a      	beq.n	8015f7c <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8015f06:	4b21      	ldr	r3, [pc, #132]	; (8015f8c <setAddrWindow+0x228>)
 8015f08:	881b      	ldrh	r3, [r3, #0]
 8015f0a:	f003 0320 	and.w	r3, r3, #32
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d018      	beq.n	8015f44 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8015f12:	4b1d      	ldr	r3, [pc, #116]	; (8015f88 <setAddrWindow+0x224>)
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	f003 0301 	and.w	r3, r3, #1
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d009      	beq.n	8015f32 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8015f1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015f22:	021b      	lsls	r3, r3, #8
 8015f24:	b21a      	sxth	r2, r3
 8015f26:	88bb      	ldrh	r3, [r7, #4]
 8015f28:	4313      	orrs	r3, r2
 8015f2a:	80bb      	strh	r3, [r7, #4]
 8015f2c:	88bb      	ldrh	r3, [r7, #4]
 8015f2e:	803b      	strh	r3, [r7, #0]
 8015f30:	e008      	b.n	8015f44 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8015f32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f36:	021b      	lsls	r3, r3, #8
 8015f38:	b21a      	sxth	r2, r3
 8015f3a:	88fb      	ldrh	r3, [r7, #6]
 8015f3c:	4313      	orrs	r3, r2
 8015f3e:	80fb      	strh	r3, [r7, #6]
 8015f40:	88fb      	ldrh	r3, [r7, #6]
 8015f42:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8015f44:	4b12      	ldr	r3, [pc, #72]	; (8015f90 <setAddrWindow+0x22c>)
 8015f46:	881b      	ldrh	r3, [r3, #0]
 8015f48:	88fa      	ldrh	r2, [r7, #6]
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fb fd29 	bl	80119a4 <WriteCmdData>
           WriteCmdData(_SP, y);
 8015f52:	4b10      	ldr	r3, [pc, #64]	; (8015f94 <setAddrWindow+0x230>)
 8015f54:	881b      	ldrh	r3, [r3, #0]
 8015f56:	88ba      	ldrh	r2, [r7, #4]
 8015f58:	4611      	mov	r1, r2
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fb fd22 	bl	80119a4 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8015f60:	4b10      	ldr	r3, [pc, #64]	; (8015fa4 <setAddrWindow+0x240>)
 8015f62:	881b      	ldrh	r3, [r3, #0]
 8015f64:	887a      	ldrh	r2, [r7, #2]
 8015f66:	4611      	mov	r1, r2
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7fb fd1b 	bl	80119a4 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8015f6e:	4b0e      	ldr	r3, [pc, #56]	; (8015fa8 <setAddrWindow+0x244>)
 8015f70:	881b      	ldrh	r3, [r3, #0]
 8015f72:	883a      	ldrh	r2, [r7, #0]
 8015f74:	4611      	mov	r1, r2
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7fb fd14 	bl	80119a4 <WriteCmdData>
}
 8015f7c:	bf00      	nop
 8015f7e:	3714      	adds	r7, #20
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd90      	pop	{r4, r7, pc}
 8015f84:	2000699c 	.word	0x2000699c
 8015f88:	2000021b 	.word	0x2000021b
 8015f8c:	2000698e 	.word	0x2000698e
 8015f90:	20006998 	.word	0x20006998
 8015f94:	20006990 	.word	0x20006990
 8015f98:	20000218 	.word	0x20000218
 8015f9c:	20006996 	.word	0x20006996
 8015fa0:	20006994 	.word	0x20006994
 8015fa4:	200069a0 	.word	0x200069a0
 8015fa8:	2000699a 	.word	0x2000699a

08015fac <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b086      	sub	sp, #24
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	80fb      	strh	r3, [r7, #6]
 8015fb6:	460b      	mov	r3, r1
 8015fb8:	80bb      	strh	r3, [r7, #4]
 8015fba:	4613      	mov	r3, r2
 8015fbc:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8015fbe:	4b89      	ldr	r3, [pc, #548]	; (80161e4 <vertScroll+0x238>)
 8015fc0:	881b      	ldrh	r3, [r3, #0]
 8015fc2:	f249 3227 	movw	r2, #37671	; 0x9327
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d10b      	bne.n	8015fe2 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8015fca:	4b87      	ldr	r3, [pc, #540]	; (80161e8 <vertScroll+0x23c>)
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	2b02      	cmp	r3, #2
 8015fd0:	d003      	beq.n	8015fda <vertScroll+0x2e>
 8015fd2:	4b85      	ldr	r3, [pc, #532]	; (80161e8 <vertScroll+0x23c>)
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	2b03      	cmp	r3, #3
 8015fd8:	d103      	bne.n	8015fe2 <vertScroll+0x36>
 8015fda:	88fb      	ldrh	r3, [r7, #6]
 8015fdc:	3320      	adds	r3, #32
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8015fe2:	88fa      	ldrh	r2, [r7, #6]
 8015fe4:	88bb      	ldrh	r3, [r7, #4]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8015ff2:	88fb      	ldrh	r3, [r7, #6]
 8015ff4:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8015ff6:	4b7b      	ldr	r3, [pc, #492]	; (80161e4 <vertScroll+0x238>)
 8015ff8:	881b      	ldrh	r3, [r3, #0]
 8015ffa:	f249 3227 	movw	r2, #37671	; 0x9327
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d103      	bne.n	801600a <vertScroll+0x5e>
 8016002:	8afb      	ldrh	r3, [r7, #22]
 8016004:	3320      	adds	r3, #32
 8016006:	b29b      	uxth	r3, r3
 8016008:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 801600a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801600e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016012:	425b      	negs	r3, r3
 8016014:	429a      	cmp	r2, r3
 8016016:	dd05      	ble.n	8016024 <vertScroll+0x78>
 8016018:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801601c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016020:	429a      	cmp	r2, r3
 8016022:	db01      	blt.n	8016028 <vertScroll+0x7c>
 8016024:	2300      	movs	r3, #0
 8016026:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8016028:	88fa      	ldrh	r2, [r7, #6]
 801602a:	887b      	ldrh	r3, [r7, #2]
 801602c:	4413      	add	r3, r2
 801602e:	b29b      	uxth	r3, r3
 8016030:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8016032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016036:	2b00      	cmp	r3, #0
 8016038:	da04      	bge.n	8016044 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 801603a:	8aba      	ldrh	r2, [r7, #20]
 801603c:	88bb      	ldrh	r3, [r7, #4]
 801603e:	4413      	add	r3, r2
 8016040:	b29b      	uxth	r3, r3
 8016042:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8016044:	88fa      	ldrh	r2, [r7, #6]
 8016046:	88bb      	ldrh	r3, [r7, #4]
 8016048:	4413      	add	r3, r2
 801604a:	b29b      	uxth	r3, r3
 801604c:	3b01      	subs	r3, #1
 801604e:	b29b      	uxth	r3, r3
 8016050:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8016052:	4b66      	ldr	r3, [pc, #408]	; (80161ec <vertScroll+0x240>)
 8016054:	881b      	ldrh	r3, [r3, #0]
 8016056:	f003 0301 	and.w	r3, r3, #1
 801605a:	2b00      	cmp	r3, #0
 801605c:	d071      	beq.n	8016142 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 801605e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016062:	121b      	asrs	r3, r3, #8
 8016064:	b21b      	sxth	r3, r3
 8016066:	b2db      	uxtb	r3, r3
 8016068:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 801606a:	88fb      	ldrh	r3, [r7, #6]
 801606c:	b2db      	uxtb	r3, r3
 801606e:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8016070:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016074:	121b      	asrs	r3, r3, #8
 8016076:	b21b      	sxth	r3, r3
 8016078:	b2db      	uxtb	r3, r3
 801607a:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 801607c:	88bb      	ldrh	r3, [r7, #4]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8016082:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016086:	121b      	asrs	r3, r3, #8
 8016088:	b21b      	sxth	r3, r3
 801608a:	b2db      	uxtb	r3, r3
 801608c:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 801608e:	8afb      	ldrh	r3, [r7, #22]
 8016090:	b2db      	uxtb	r3, r3
 8016092:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8016094:	4b56      	ldr	r3, [pc, #344]	; (80161f0 <vertScroll+0x244>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d001      	beq.n	80160a0 <vertScroll+0xf4>
 801609c:	230e      	movs	r3, #14
 801609e:	e000      	b.n	80160a2 <vertScroll+0xf6>
 80160a0:	2333      	movs	r3, #51	; 0x33
 80160a2:	f107 020c 	add.w	r2, r7, #12
 80160a6:	2106      	movs	r1, #6
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7fc f8fb 	bl	80122a4 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80160ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80160b2:	121b      	asrs	r3, r3, #8
 80160b4:	b21b      	sxth	r3, r3
 80160b6:	b2db      	uxtb	r3, r3
 80160b8:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80160ba:	8abb      	ldrh	r3, [r7, #20]
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80160c0:	4b4b      	ldr	r3, [pc, #300]	; (80161f0 <vertScroll+0x244>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <vertScroll+0x120>
 80160c8:	2314      	movs	r3, #20
 80160ca:	e000      	b.n	80160ce <vertScroll+0x122>
 80160cc:	2337      	movs	r3, #55	; 0x37
 80160ce:	f107 020c 	add.w	r2, r7, #12
 80160d2:	2102      	movs	r1, #2
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7fc f8e5 	bl	80122a4 <WriteCmdParamN>
		if (is8347) {
 80160da:	4b45      	ldr	r3, [pc, #276]	; (80161f0 <vertScroll+0x244>)
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d01f      	beq.n	8016122 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 80160e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d009      	beq.n	80160fe <vertScroll+0x152>
 80160ea:	4b3e      	ldr	r3, [pc, #248]	; (80161e4 <vertScroll+0x238>)
 80160ec:	881b      	ldrh	r3, [r3, #0]
 80160ee:	f248 3247 	movw	r2, #33607	; 0x8347
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d101      	bne.n	80160fa <vertScroll+0x14e>
 80160f6:	2302      	movs	r3, #2
 80160f8:	e002      	b.n	8016100 <vertScroll+0x154>
 80160fa:	2308      	movs	r3, #8
 80160fc:	e000      	b.n	8016100 <vertScroll+0x154>
 80160fe:	2300      	movs	r3, #0
 8016100:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8016102:	4b38      	ldr	r3, [pc, #224]	; (80161e4 <vertScroll+0x238>)
 8016104:	881b      	ldrh	r3, [r3, #0]
 8016106:	f248 3247 	movw	r2, #33607	; 0x8347
 801610a:	4293      	cmp	r3, r2
 801610c:	d101      	bne.n	8016112 <vertScroll+0x166>
 801610e:	2318      	movs	r3, #24
 8016110:	e000      	b.n	8016114 <vertScroll+0x168>
 8016112:	2301      	movs	r3, #1
 8016114:	f107 020c 	add.w	r2, r7, #12
 8016118:	2101      	movs	r1, #1
 801611a:	4618      	mov	r0, r3
 801611c:	f7fc f8c2 	bl	80122a4 <WriteCmdParamN>
 8016120:	e05d      	b.n	80161de <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8016122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d159      	bne.n	80161de <vertScroll+0x232>
 801612a:	4b30      	ldr	r3, [pc, #192]	; (80161ec <vertScroll+0x240>)
 801612c:	881b      	ldrh	r3, [r3, #0]
 801612e:	f003 0301 	and.w	r3, r3, #1
 8016132:	2b00      	cmp	r3, #0
 8016134:	d053      	beq.n	80161de <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8016136:	2200      	movs	r2, #0
 8016138:	2100      	movs	r1, #0
 801613a:	2013      	movs	r0, #19
 801613c:	f7fc f8b2 	bl	80122a4 <WriteCmdParamN>
 8016140:	e04d      	b.n	80161de <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8016142:	4b28      	ldr	r3, [pc, #160]	; (80161e4 <vertScroll+0x238>)
 8016144:	881b      	ldrh	r3, [r3, #0]
 8016146:	f24b 5209 	movw	r2, #46345	; 0xb509
 801614a:	4293      	cmp	r3, r2
 801614c:	d027      	beq.n	801619e <vertScroll+0x1f2>
 801614e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8016152:	4293      	cmp	r3, r2
 8016154:	dc34      	bgt.n	80161c0 <vertScroll+0x214>
 8016156:	f249 3226 	movw	r2, #37670	; 0x9326
 801615a:	4293      	cmp	r3, r2
 801615c:	d01f      	beq.n	801619e <vertScroll+0x1f2>
 801615e:	f249 3226 	movw	r2, #37670	; 0x9326
 8016162:	4293      	cmp	r3, r2
 8016164:	dc2c      	bgt.n	80161c0 <vertScroll+0x214>
 8016166:	f247 7293 	movw	r2, #30611	; 0x7793
 801616a:	4293      	cmp	r3, r2
 801616c:	d017      	beq.n	801619e <vertScroll+0x1f2>
 801616e:	f247 7293 	movw	r2, #30611	; 0x7793
 8016172:	4293      	cmp	r3, r2
 8016174:	dc24      	bgt.n	80161c0 <vertScroll+0x214>
 8016176:	f245 4220 	movw	r2, #21536	; 0x5420
 801617a:	4293      	cmp	r3, r2
 801617c:	d00f      	beq.n	801619e <vertScroll+0x1f2>
 801617e:	f247 7283 	movw	r2, #30595	; 0x7783
 8016182:	4293      	cmp	r3, r2
 8016184:	d11c      	bne.n	80161c0 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8016186:	4b1b      	ldr	r3, [pc, #108]	; (80161f4 <vertScroll+0x248>)
 8016188:	881b      	ldrh	r3, [r3, #0]
 801618a:	4619      	mov	r1, r3
 801618c:	2061      	movs	r0, #97	; 0x61
 801618e:	f7fb fc09 	bl	80119a4 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8016192:	8abb      	ldrh	r3, [r7, #20]
 8016194:	4619      	mov	r1, r3
 8016196:	206a      	movs	r0, #106	; 0x6a
 8016198:	f7fb fc04 	bl	80119a4 <WriteCmdData>
        break;
 801619c:	e01f      	b.n	80161de <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 801619e:	4b15      	ldr	r3, [pc, #84]	; (80161f4 <vertScroll+0x248>)
 80161a0:	881b      	ldrh	r3, [r3, #0]
 80161a2:	f043 0302 	orr.w	r3, r3, #2
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	4619      	mov	r1, r3
 80161aa:	f240 4001 	movw	r0, #1025	; 0x401
 80161ae:	f7fb fbf9 	bl	80119a4 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80161b2:	8abb      	ldrh	r3, [r7, #20]
 80161b4:	4619      	mov	r1, r3
 80161b6:	f240 4004 	movw	r0, #1028	; 0x404
 80161ba:	f7fb fbf3 	bl	80119a4 <WriteCmdData>
        break;
 80161be:	e00e      	b.n	80161de <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80161c0:	4b0c      	ldr	r3, [pc, #48]	; (80161f4 <vertScroll+0x248>)
 80161c2:	881b      	ldrh	r3, [r3, #0]
 80161c4:	f043 0302 	orr.w	r3, r3, #2
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	4619      	mov	r1, r3
 80161cc:	2061      	movs	r0, #97	; 0x61
 80161ce:	f7fb fbe9 	bl	80119a4 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80161d2:	8abb      	ldrh	r3, [r7, #20]
 80161d4:	4619      	mov	r1, r3
 80161d6:	206a      	movs	r0, #106	; 0x6a
 80161d8:	f7fb fbe4 	bl	80119a4 <WriteCmdData>
        break;
 80161dc:	bf00      	nop
    }
}
 80161de:	3718      	adds	r7, #24
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}
 80161e4:	2000699c 	.word	0x2000699c
 80161e8:	2000021b 	.word	0x2000021b
 80161ec:	2000698e 	.word	0x2000698e
 80161f0:	20000218 	.word	0x20000218
 80161f4:	20006992 	.word	0x20006992

080161f8 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af02      	add	r7, sp, #8
 80161fe:	4603      	mov	r3, r0
 8016200:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8016202:	4b08      	ldr	r3, [pc, #32]	; (8016224 <fillScreen+0x2c>)
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	b21a      	sxth	r2, r3
 8016208:	4b07      	ldr	r3, [pc, #28]	; (8016228 <fillScreen+0x30>)
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	b219      	sxth	r1, r3
 801620e:	88fb      	ldrh	r3, [r7, #6]
 8016210:	9300      	str	r3, [sp, #0]
 8016212:	460b      	mov	r3, r1
 8016214:	2100      	movs	r1, #0
 8016216:	2000      	movs	r0, #0
 8016218:	f000 fa2a 	bl	8016670 <fillRect>
}
 801621c:	bf00      	nop
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	20000014 	.word	0x20000014
 8016228:	20000016 	.word	0x20000016

0801622c <invertDisplay>:

void invertDisplay(uint8_t i)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	4603      	mov	r3, r0
 8016234:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8016236:	4b4c      	ldr	r3, [pc, #304]	; (8016368 <invertDisplay+0x13c>)
 8016238:	881b      	ldrh	r3, [r3, #0]
 801623a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801623e:	2b00      	cmp	r3, #0
 8016240:	bf14      	ite	ne
 8016242:	2301      	movne	r3, #1
 8016244:	2300      	moveq	r3, #0
 8016246:	b2db      	uxtb	r3, r3
 8016248:	b21a      	sxth	r2, r3
 801624a:	79fb      	ldrb	r3, [r7, #7]
 801624c:	b21b      	sxth	r3, r3
 801624e:	4053      	eors	r3, r2
 8016250:	b21b      	sxth	r3, r3
 8016252:	b29a      	uxth	r2, r3
 8016254:	4b45      	ldr	r3, [pc, #276]	; (801636c <invertDisplay+0x140>)
 8016256:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8016258:	4b43      	ldr	r3, [pc, #268]	; (8016368 <invertDisplay+0x13c>)
 801625a:	881b      	ldrh	r3, [r3, #0]
 801625c:	f003 0301 	and.w	r3, r3, #1
 8016260:	2b00      	cmp	r3, #0
 8016262:	d035      	beq.n	80162d0 <invertDisplay+0xa4>
        if (is8347) {
 8016264:	4b42      	ldr	r3, [pc, #264]	; (8016370 <invertDisplay+0x144>)
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d024      	beq.n	80162b6 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 801626c:	4b41      	ldr	r3, [pc, #260]	; (8016374 <invertDisplay+0x148>)
 801626e:	881b      	ldrh	r3, [r3, #0]
 8016270:	f248 3247 	movw	r2, #33607	; 0x8347
 8016274:	4293      	cmp	r3, r2
 8016276:	d005      	beq.n	8016284 <invertDisplay+0x58>
 8016278:	4b3e      	ldr	r3, [pc, #248]	; (8016374 <invertDisplay+0x148>)
 801627a:	881b      	ldrh	r3, [r3, #0]
 801627c:	f245 2252 	movw	r2, #21074	; 0x5252
 8016280:	4293      	cmp	r3, r2
 8016282:	d108      	bne.n	8016296 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8016284:	4b39      	ldr	r3, [pc, #228]	; (801636c <invertDisplay+0x140>)
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d001      	beq.n	8016290 <invertDisplay+0x64>
 801628c:	2306      	movs	r3, #6
 801628e:	e000      	b.n	8016292 <invertDisplay+0x66>
 8016290:	2302      	movs	r3, #2
 8016292:	73fb      	strb	r3, [r7, #15]
 8016294:	e007      	b.n	80162a6 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8016296:	4b35      	ldr	r3, [pc, #212]	; (801636c <invertDisplay+0x140>)
 8016298:	881b      	ldrh	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <invertDisplay+0x76>
 801629e:	2308      	movs	r3, #8
 80162a0:	e000      	b.n	80162a4 <invertDisplay+0x78>
 80162a2:	230a      	movs	r3, #10
 80162a4:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80162a6:	f107 030f 	add.w	r3, r7, #15
 80162aa:	461a      	mov	r2, r3
 80162ac:	2101      	movs	r1, #1
 80162ae:	2001      	movs	r0, #1
 80162b0:	f7fb fff8 	bl	80122a4 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80162b4:	e055      	b.n	8016362 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80162b6:	4b2d      	ldr	r3, [pc, #180]	; (801636c <invertDisplay+0x140>)
 80162b8:	881b      	ldrh	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d001      	beq.n	80162c2 <invertDisplay+0x96>
 80162be:	2321      	movs	r3, #33	; 0x21
 80162c0:	e000      	b.n	80162c4 <invertDisplay+0x98>
 80162c2:	2320      	movs	r3, #32
 80162c4:	2200      	movs	r2, #0
 80162c6:	2100      	movs	r1, #0
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7fb ffeb 	bl	80122a4 <WriteCmdParamN>
 80162ce:	e048      	b.n	8016362 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80162d0:	4b28      	ldr	r3, [pc, #160]	; (8016374 <invertDisplay+0x148>)
 80162d2:	881b      	ldrh	r3, [r3, #0]
 80162d4:	f24b 5209 	movw	r2, #46345	; 0xb509
 80162d8:	4293      	cmp	r3, r2
 80162da:	d030      	beq.n	801633e <invertDisplay+0x112>
 80162dc:	f24b 5209 	movw	r2, #46345	; 0xb509
 80162e0:	4293      	cmp	r3, r2
 80162e2:	dc37      	bgt.n	8016354 <invertDisplay+0x128>
 80162e4:	f249 3226 	movw	r2, #37670	; 0x9326
 80162e8:	4293      	cmp	r3, r2
 80162ea:	d028      	beq.n	801633e <invertDisplay+0x112>
 80162ec:	f249 3226 	movw	r2, #37670	; 0x9326
 80162f0:	4293      	cmp	r3, r2
 80162f2:	dc2f      	bgt.n	8016354 <invertDisplay+0x128>
 80162f4:	f249 2225 	movw	r2, #37413	; 0x9225
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d013      	beq.n	8016324 <invertDisplay+0xf8>
 80162fc:	f249 2225 	movw	r2, #37413	; 0x9225
 8016300:	4293      	cmp	r3, r2
 8016302:	dc27      	bgt.n	8016354 <invertDisplay+0x128>
 8016304:	f247 7293 	movw	r2, #30611	; 0x7793
 8016308:	4293      	cmp	r3, r2
 801630a:	d018      	beq.n	801633e <invertDisplay+0x112>
 801630c:	f247 7293 	movw	r2, #30611	; 0x7793
 8016310:	4293      	cmp	r3, r2
 8016312:	dc1f      	bgt.n	8016354 <invertDisplay+0x128>
 8016314:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016318:	d004      	beq.n	8016324 <invertDisplay+0xf8>
 801631a:	f245 4220 	movw	r2, #21536	; 0x5420
 801631e:	4293      	cmp	r3, r2
 8016320:	d00d      	beq.n	801633e <invertDisplay+0x112>
 8016322:	e017      	b.n	8016354 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8016324:	4b11      	ldr	r3, [pc, #68]	; (801636c <invertDisplay+0x140>)
 8016326:	881b      	ldrh	r3, [r3, #0]
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	b21b      	sxth	r3, r3
 801632c:	f043 0313 	orr.w	r3, r3, #19
 8016330:	b21b      	sxth	r3, r3
 8016332:	b29b      	uxth	r3, r3
 8016334:	4619      	mov	r1, r3
 8016336:	2007      	movs	r0, #7
 8016338:	f7fb fb34 	bl	80119a4 <WriteCmdData>
        break;
 801633c:	e011      	b.n	8016362 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 801633e:	4b0b      	ldr	r3, [pc, #44]	; (801636c <invertDisplay+0x140>)
 8016340:	881b      	ldrh	r3, [r3, #0]
 8016342:	f043 0302 	orr.w	r3, r3, #2
 8016346:	b29b      	uxth	r3, r3
 8016348:	4619      	mov	r1, r3
 801634a:	f240 4001 	movw	r0, #1025	; 0x401
 801634e:	f7fb fb29 	bl	80119a4 <WriteCmdData>
        break;
 8016352:	e006      	b.n	8016362 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8016354:	4b05      	ldr	r3, [pc, #20]	; (801636c <invertDisplay+0x140>)
 8016356:	881b      	ldrh	r3, [r3, #0]
 8016358:	4619      	mov	r1, r3
 801635a:	2061      	movs	r0, #97	; 0x61
 801635c:	f7fb fb22 	bl	80119a4 <WriteCmdData>
        break;
 8016360:	bf00      	nop
    }
}
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	2000698e 	.word	0x2000698e
 801636c:	20006992 	.word	0x20006992
 8016370:	20000218 	.word	0x20000218
 8016374:	2000699c 	.word	0x2000699c

08016378 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8016378:	b590      	push	{r4, r7, lr}
 801637a:	b085      	sub	sp, #20
 801637c:	af02      	add	r7, sp, #8
 801637e:	4604      	mov	r4, r0
 8016380:	4608      	mov	r0, r1
 8016382:	4611      	mov	r1, r2
 8016384:	461a      	mov	r2, r3
 8016386:	4623      	mov	r3, r4
 8016388:	80fb      	strh	r3, [r7, #6]
 801638a:	4603      	mov	r3, r0
 801638c:	80bb      	strh	r3, [r7, #4]
 801638e:	460b      	mov	r3, r1
 8016390:	807b      	strh	r3, [r7, #2]
 8016392:	4613      	mov	r3, r2
 8016394:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8016396:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801639a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801639e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80163a2:	883b      	ldrh	r3, [r7, #0]
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	4613      	mov	r3, r2
 80163a8:	2201      	movs	r2, #1
 80163aa:	f000 f961 	bl	8016670 <fillRect>
}
 80163ae:	bf00      	nop
 80163b0:	370c      	adds	r7, #12
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd90      	pop	{r4, r7, pc}

080163b6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80163b6:	b590      	push	{r4, r7, lr}
 80163b8:	b085      	sub	sp, #20
 80163ba:	af02      	add	r7, sp, #8
 80163bc:	4604      	mov	r4, r0
 80163be:	4608      	mov	r0, r1
 80163c0:	4611      	mov	r1, r2
 80163c2:	461a      	mov	r2, r3
 80163c4:	4623      	mov	r3, r4
 80163c6:	80fb      	strh	r3, [r7, #6]
 80163c8:	4603      	mov	r3, r0
 80163ca:	80bb      	strh	r3, [r7, #4]
 80163cc:	460b      	mov	r3, r1
 80163ce:	807b      	strh	r3, [r7, #2]
 80163d0:	4613      	mov	r3, r2
 80163d2:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 80163d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80163d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80163dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80163e0:	883b      	ldrh	r3, [r7, #0]
 80163e2:	9300      	str	r3, [sp, #0]
 80163e4:	2301      	movs	r3, #1
 80163e6:	f000 f943 	bl	8016670 <fillRect>
}
 80163ea:	bf00      	nop
 80163ec:	370c      	adds	r7, #12
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd90      	pop	{r4, r7, pc}

080163f2 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80163f2:	b590      	push	{r4, r7, lr}
 80163f4:	b085      	sub	sp, #20
 80163f6:	af02      	add	r7, sp, #8
 80163f8:	4604      	mov	r4, r0
 80163fa:	4608      	mov	r0, r1
 80163fc:	4611      	mov	r1, r2
 80163fe:	461a      	mov	r2, r3
 8016400:	4623      	mov	r3, r4
 8016402:	80fb      	strh	r3, [r7, #6]
 8016404:	4603      	mov	r3, r0
 8016406:	80bb      	strh	r3, [r7, #4]
 8016408:	460b      	mov	r3, r1
 801640a:	807b      	strh	r3, [r7, #2]
 801640c:	4613      	mov	r3, r2
 801640e:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8016410:	88ba      	ldrh	r2, [r7, #4]
 8016412:	887b      	ldrh	r3, [r7, #2]
 8016414:	1ad3      	subs	r3, r2, r3
 8016416:	b29b      	uxth	r3, r3
 8016418:	b219      	sxth	r1, r3
 801641a:	887b      	ldrh	r3, [r7, #2]
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	b29b      	uxth	r3, r3
 8016420:	3301      	adds	r3, #1
 8016422:	b29b      	uxth	r3, r3
 8016424:	b21a      	sxth	r2, r3
 8016426:	883b      	ldrh	r3, [r7, #0]
 8016428:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801642c:	f7ff ffa4 	bl	8016378 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8016430:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016434:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016438:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801643c:	883b      	ldrh	r3, [r7, #0]
 801643e:	9301      	str	r3, [sp, #4]
 8016440:	2300      	movs	r3, #0
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	2303      	movs	r3, #3
 8016446:	f000 f804 	bl	8016452 <fillCircleHelper>
}
 801644a:	bf00      	nop
 801644c:	370c      	adds	r7, #12
 801644e:	46bd      	mov	sp, r7
 8016450:	bd90      	pop	{r4, r7, pc}

08016452 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8016452:	b590      	push	{r4, r7, lr}
 8016454:	b087      	sub	sp, #28
 8016456:	af00      	add	r7, sp, #0
 8016458:	4604      	mov	r4, r0
 801645a:	4608      	mov	r0, r1
 801645c:	4611      	mov	r1, r2
 801645e:	461a      	mov	r2, r3
 8016460:	4623      	mov	r3, r4
 8016462:	80fb      	strh	r3, [r7, #6]
 8016464:	4603      	mov	r3, r0
 8016466:	80bb      	strh	r3, [r7, #4]
 8016468:	460b      	mov	r3, r1
 801646a:	807b      	strh	r3, [r7, #2]
 801646c:	4613      	mov	r3, r2
 801646e:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8016470:	887b      	ldrh	r3, [r7, #2]
 8016472:	f1c3 0301 	rsb	r3, r3, #1
 8016476:	b29b      	uxth	r3, r3
 8016478:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 801647a:	2301      	movs	r3, #1
 801647c:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 801647e:	887b      	ldrh	r3, [r7, #2]
 8016480:	461a      	mov	r2, r3
 8016482:	03d2      	lsls	r2, r2, #15
 8016484:	1ad3      	subs	r3, r2, r3
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	b29b      	uxth	r3, r3
 801648a:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 801648c:	2300      	movs	r3, #0
 801648e:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8016490:	887b      	ldrh	r3, [r7, #2]
 8016492:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8016494:	8a3b      	ldrh	r3, [r7, #16]
 8016496:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8016498:	89fb      	ldrh	r3, [r7, #14]
 801649a:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 801649c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80164a0:	b29b      	uxth	r3, r3
 80164a2:	3301      	adds	r3, #1
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 80164a8:	e095      	b.n	80165d6 <fillCircleHelper+0x184>
        if (f >= 0) {
 80164aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	db0e      	blt.n	80164d0 <fillCircleHelper+0x7e>
            y--;
 80164b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	3b01      	subs	r3, #1
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80164be:	8a7b      	ldrh	r3, [r7, #18]
 80164c0:	3302      	adds	r3, #2
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80164c6:	8afa      	ldrh	r2, [r7, #22]
 80164c8:	8a7b      	ldrh	r3, [r7, #18]
 80164ca:	4413      	add	r3, r2
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80164d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	3301      	adds	r3, #1
 80164d8:	b29b      	uxth	r3, r3
 80164da:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80164dc:	8abb      	ldrh	r3, [r7, #20]
 80164de:	3302      	adds	r3, #2
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80164e4:	8afa      	ldrh	r2, [r7, #22]
 80164e6:	8abb      	ldrh	r3, [r7, #20]
 80164e8:	4413      	add	r3, r2
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80164ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80164f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80164f6:	429a      	cmp	r2, r3
 80164f8:	db31      	blt.n	801655e <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80164fa:	787b      	ldrb	r3, [r7, #1]
 80164fc:	f003 0301 	and.w	r3, r3, #1
 8016500:	2b00      	cmp	r3, #0
 8016502:	d013      	beq.n	801652c <fillCircleHelper+0xda>
 8016504:	88fa      	ldrh	r2, [r7, #6]
 8016506:	8a3b      	ldrh	r3, [r7, #16]
 8016508:	4413      	add	r3, r2
 801650a:	b29b      	uxth	r3, r3
 801650c:	b218      	sxth	r0, r3
 801650e:	88ba      	ldrh	r2, [r7, #4]
 8016510:	89fb      	ldrh	r3, [r7, #14]
 8016512:	1ad3      	subs	r3, r2, r3
 8016514:	b29b      	uxth	r3, r3
 8016516:	b219      	sxth	r1, r3
 8016518:	89fb      	ldrh	r3, [r7, #14]
 801651a:	005b      	lsls	r3, r3, #1
 801651c:	b29a      	uxth	r2, r3
 801651e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016520:	4413      	add	r3, r2
 8016522:	b29b      	uxth	r3, r3
 8016524:	b21a      	sxth	r2, r3
 8016526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016528:	f7ff ff26 	bl	8016378 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 801652c:	787b      	ldrb	r3, [r7, #1]
 801652e:	f003 0302 	and.w	r3, r3, #2
 8016532:	2b00      	cmp	r3, #0
 8016534:	d013      	beq.n	801655e <fillCircleHelper+0x10c>
 8016536:	88fa      	ldrh	r2, [r7, #6]
 8016538:	8a3b      	ldrh	r3, [r7, #16]
 801653a:	1ad3      	subs	r3, r2, r3
 801653c:	b29b      	uxth	r3, r3
 801653e:	b218      	sxth	r0, r3
 8016540:	88ba      	ldrh	r2, [r7, #4]
 8016542:	89fb      	ldrh	r3, [r7, #14]
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	b29b      	uxth	r3, r3
 8016548:	b219      	sxth	r1, r3
 801654a:	89fb      	ldrh	r3, [r7, #14]
 801654c:	005b      	lsls	r3, r3, #1
 801654e:	b29a      	uxth	r2, r3
 8016550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016552:	4413      	add	r3, r2
 8016554:	b29b      	uxth	r3, r3
 8016556:	b21a      	sxth	r2, r3
 8016558:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801655a:	f7ff ff0d 	bl	8016378 <drawFastVLine>
        }
        if(y != py) {
 801655e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016562:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016566:	429a      	cmp	r2, r3
 8016568:	d033      	beq.n	80165d2 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 801656a:	787b      	ldrb	r3, [r7, #1]
 801656c:	f003 0301 	and.w	r3, r3, #1
 8016570:	2b00      	cmp	r3, #0
 8016572:	d013      	beq.n	801659c <fillCircleHelper+0x14a>
 8016574:	88fa      	ldrh	r2, [r7, #6]
 8016576:	897b      	ldrh	r3, [r7, #10]
 8016578:	4413      	add	r3, r2
 801657a:	b29b      	uxth	r3, r3
 801657c:	b218      	sxth	r0, r3
 801657e:	88ba      	ldrh	r2, [r7, #4]
 8016580:	89bb      	ldrh	r3, [r7, #12]
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	b29b      	uxth	r3, r3
 8016586:	b219      	sxth	r1, r3
 8016588:	89bb      	ldrh	r3, [r7, #12]
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	b29a      	uxth	r2, r3
 801658e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016590:	4413      	add	r3, r2
 8016592:	b29b      	uxth	r3, r3
 8016594:	b21a      	sxth	r2, r3
 8016596:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016598:	f7ff feee 	bl	8016378 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 801659c:	787b      	ldrb	r3, [r7, #1]
 801659e:	f003 0302 	and.w	r3, r3, #2
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d013      	beq.n	80165ce <fillCircleHelper+0x17c>
 80165a6:	88fa      	ldrh	r2, [r7, #6]
 80165a8:	897b      	ldrh	r3, [r7, #10]
 80165aa:	1ad3      	subs	r3, r2, r3
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	b218      	sxth	r0, r3
 80165b0:	88ba      	ldrh	r2, [r7, #4]
 80165b2:	89bb      	ldrh	r3, [r7, #12]
 80165b4:	1ad3      	subs	r3, r2, r3
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	b219      	sxth	r1, r3
 80165ba:	89bb      	ldrh	r3, [r7, #12]
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	b29a      	uxth	r2, r3
 80165c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80165c2:	4413      	add	r3, r2
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	b21a      	sxth	r2, r3
 80165c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80165ca:	f7ff fed5 	bl	8016378 <drawFastVLine>
            py = y;
 80165ce:	89fb      	ldrh	r3, [r7, #14]
 80165d0:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80165d2:	8a3b      	ldrh	r3, [r7, #16]
 80165d4:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80165d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80165da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80165de:	429a      	cmp	r2, r3
 80165e0:	f6ff af63 	blt.w	80164aa <fillCircleHelper+0x58>
    }
}
 80165e4:	bf00      	nop
 80165e6:	bf00      	nop
 80165e8:	371c      	adds	r7, #28
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd90      	pop	{r4, r7, pc}

080165ee <drawRect>:

void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80165ee:	b590      	push	{r4, r7, lr}
 80165f0:	b083      	sub	sp, #12
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	4604      	mov	r4, r0
 80165f6:	4608      	mov	r0, r1
 80165f8:	4611      	mov	r1, r2
 80165fa:	461a      	mov	r2, r3
 80165fc:	4623      	mov	r3, r4
 80165fe:	80fb      	strh	r3, [r7, #6]
 8016600:	4603      	mov	r3, r0
 8016602:	80bb      	strh	r3, [r7, #4]
 8016604:	460b      	mov	r3, r1
 8016606:	807b      	strh	r3, [r7, #2]
 8016608:	4613      	mov	r3, r2
 801660a:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 801660c:	8b3b      	ldrh	r3, [r7, #24]
 801660e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016612:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016616:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801661a:	f7ff fecc 	bl	80163b6 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 801661e:	88ba      	ldrh	r2, [r7, #4]
 8016620:	883b      	ldrh	r3, [r7, #0]
 8016622:	4413      	add	r3, r2
 8016624:	b29b      	uxth	r3, r3
 8016626:	3b01      	subs	r3, #1
 8016628:	b29b      	uxth	r3, r3
 801662a:	b219      	sxth	r1, r3
 801662c:	8b3b      	ldrh	r3, [r7, #24]
 801662e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016632:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8016636:	f7ff febe 	bl	80163b6 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 801663a:	8b3b      	ldrh	r3, [r7, #24]
 801663c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016640:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016644:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8016648:	f7ff fe96 	bl	8016378 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 801664c:	88fa      	ldrh	r2, [r7, #6]
 801664e:	887b      	ldrh	r3, [r7, #2]
 8016650:	4413      	add	r3, r2
 8016652:	b29b      	uxth	r3, r3
 8016654:	3b01      	subs	r3, #1
 8016656:	b29b      	uxth	r3, r3
 8016658:	b218      	sxth	r0, r3
 801665a:	8b3b      	ldrh	r3, [r7, #24]
 801665c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016660:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016664:	f7ff fe88 	bl	8016378 <drawFastVLine>
}
 8016668:	bf00      	nop
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	bd90      	pop	{r4, r7, pc}

08016670 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8016670:	b590      	push	{r4, r7, lr}
 8016672:	b085      	sub	sp, #20
 8016674:	af00      	add	r7, sp, #0
 8016676:	4604      	mov	r4, r0
 8016678:	4608      	mov	r0, r1
 801667a:	4611      	mov	r1, r2
 801667c:	461a      	mov	r2, r3
 801667e:	4623      	mov	r3, r4
 8016680:	80fb      	strh	r3, [r7, #6]
 8016682:	4603      	mov	r3, r0
 8016684:	80bb      	strh	r3, [r7, #4]
 8016686:	460b      	mov	r3, r1
 8016688:	807b      	strh	r3, [r7, #2]
 801668a:	4613      	mov	r3, r2
 801668c:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 801668e:	4bb9      	ldr	r3, [pc, #740]	; (8016974 <fillRect+0x304>)
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d005      	beq.n	80166a2 <fillRect+0x32>
 8016696:	8c3b      	ldrh	r3, [r7, #32]
 8016698:	4618      	mov	r0, r3
 801669a:	f7fb f8d3 	bl	8011844 <color565_to_555>
 801669e:	4603      	mov	r3, r0
 80166a0:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 80166a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	da08      	bge.n	80166bc <fillRect+0x4c>
        w = -w;
 80166aa:	887b      	ldrh	r3, [r7, #2]
 80166ac:	425b      	negs	r3, r3
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	807b      	strh	r3, [r7, #2]
        x -= w;
 80166b2:	88fa      	ldrh	r2, [r7, #6]
 80166b4:	887b      	ldrh	r3, [r7, #2]
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 80166bc:	88fa      	ldrh	r2, [r7, #6]
 80166be:	887b      	ldrh	r3, [r7, #2]
 80166c0:	4413      	add	r3, r2
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 80166c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	da01      	bge.n	80166d2 <fillRect+0x62>
        x = 0;
 80166ce:	2300      	movs	r3, #0
 80166d0:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 80166d2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80166d6:	f7fb f89d 	bl	8011814 <width>
 80166da:	4603      	mov	r3, r0
 80166dc:	429c      	cmp	r4, r3
 80166de:	dd03      	ble.n	80166e8 <fillRect+0x78>
        end = width();
 80166e0:	f7fb f898 	bl	8011814 <width>
 80166e4:	4603      	mov	r3, r0
 80166e6:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 80166e8:	89fa      	ldrh	r2, [r7, #14]
 80166ea:	88fb      	ldrh	r3, [r7, #6]
 80166ec:	1ad3      	subs	r3, r2, r3
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 80166f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	da08      	bge.n	801670c <fillRect+0x9c>
        h = -h;
 80166fa:	883b      	ldrh	r3, [r7, #0]
 80166fc:	425b      	negs	r3, r3
 80166fe:	b29b      	uxth	r3, r3
 8016700:	803b      	strh	r3, [r7, #0]
        y -= h;
 8016702:	88ba      	ldrh	r2, [r7, #4]
 8016704:	883b      	ldrh	r3, [r7, #0]
 8016706:	1ad3      	subs	r3, r2, r3
 8016708:	b29b      	uxth	r3, r3
 801670a:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 801670c:	88ba      	ldrh	r2, [r7, #4]
 801670e:	883b      	ldrh	r3, [r7, #0]
 8016710:	4413      	add	r3, r2
 8016712:	b29b      	uxth	r3, r3
 8016714:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8016716:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	da01      	bge.n	8016722 <fillRect+0xb2>
        y = 0;
 801671e:	2300      	movs	r3, #0
 8016720:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8016722:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8016726:	f7fb f881 	bl	801182c <height>
 801672a:	4603      	mov	r3, r0
 801672c:	429c      	cmp	r4, r3
 801672e:	dd03      	ble.n	8016738 <fillRect+0xc8>
        end = height();
 8016730:	f7fb f87c 	bl	801182c <height>
 8016734:	4603      	mov	r3, r0
 8016736:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8016738:	89fa      	ldrh	r2, [r7, #14]
 801673a:	88bb      	ldrh	r3, [r7, #4]
 801673c:	1ad3      	subs	r3, r2, r3
 801673e:	b29b      	uxth	r3, r3
 8016740:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8016742:	88fa      	ldrh	r2, [r7, #6]
 8016744:	887b      	ldrh	r3, [r7, #2]
 8016746:	4413      	add	r3, r2
 8016748:	b29b      	uxth	r3, r3
 801674a:	3b01      	subs	r3, #1
 801674c:	b29b      	uxth	r3, r3
 801674e:	b21c      	sxth	r4, r3
 8016750:	88ba      	ldrh	r2, [r7, #4]
 8016752:	883b      	ldrh	r3, [r7, #0]
 8016754:	4413      	add	r3, r2
 8016756:	b29b      	uxth	r3, r3
 8016758:	3b01      	subs	r3, #1
 801675a:	b29b      	uxth	r3, r3
 801675c:	b21b      	sxth	r3, r3
 801675e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8016762:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8016766:	4622      	mov	r2, r4
 8016768:	f7ff fafc 	bl	8015d64 <setAddrWindow>
    CS_ACTIVE;
 801676c:	2108      	movs	r1, #8
 801676e:	4882      	ldr	r0, [pc, #520]	; (8016978 <fillRect+0x308>)
 8016770:	f7fb f801 	bl	8011776 <PIN_LOW>
    WriteCmd(_MW);
 8016774:	2120      	movs	r1, #32
 8016776:	4881      	ldr	r0, [pc, #516]	; (801697c <fillRect+0x30c>)
 8016778:	f7fa fffd 	bl	8011776 <PIN_LOW>
 801677c:	4b80      	ldr	r3, [pc, #512]	; (8016980 <fillRect+0x310>)
 801677e:	881b      	ldrh	r3, [r3, #0]
 8016780:	0a1b      	lsrs	r3, r3, #8
 8016782:	b29b      	uxth	r3, r3
 8016784:	737b      	strb	r3, [r7, #13]
 8016786:	4b7e      	ldr	r3, [pc, #504]	; (8016980 <fillRect+0x310>)
 8016788:	881b      	ldrh	r3, [r3, #0]
 801678a:	733b      	strb	r3, [r7, #12]
 801678c:	4b7b      	ldr	r3, [pc, #492]	; (801697c <fillRect+0x30c>)
 801678e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016792:	619a      	str	r2, [r3, #24]
 8016794:	4b7b      	ldr	r3, [pc, #492]	; (8016984 <fillRect+0x314>)
 8016796:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 801679a:	619a      	str	r2, [r3, #24]
 801679c:	4b76      	ldr	r3, [pc, #472]	; (8016978 <fillRect+0x308>)
 801679e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80167a2:	619a      	str	r2, [r3, #24]
 80167a4:	7b7b      	ldrb	r3, [r7, #13]
 80167a6:	039b      	lsls	r3, r3, #14
 80167a8:	4a74      	ldr	r2, [pc, #464]	; (801697c <fillRect+0x30c>)
 80167aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80167ae:	6193      	str	r3, [r2, #24]
 80167b0:	7b7b      	ldrb	r3, [r7, #13]
 80167b2:	029b      	lsls	r3, r3, #10
 80167b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80167b8:	7b7b      	ldrb	r3, [r7, #13]
 80167ba:	019b      	lsls	r3, r3, #6
 80167bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80167c0:	431a      	orrs	r2, r3
 80167c2:	7b7b      	ldrb	r3, [r7, #13]
 80167c4:	00db      	lsls	r3, r3, #3
 80167c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80167ca:	431a      	orrs	r2, r3
 80167cc:	4b6d      	ldr	r3, [pc, #436]	; (8016984 <fillRect+0x314>)
 80167ce:	619a      	str	r2, [r3, #24]
 80167d0:	7b7b      	ldrb	r3, [r7, #13]
 80167d2:	031b      	lsls	r3, r3, #12
 80167d4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80167d8:	7b7b      	ldrb	r3, [r7, #13]
 80167da:	035b      	lsls	r3, r3, #13
 80167dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80167e0:	431a      	orrs	r2, r3
 80167e2:	7b7b      	ldrb	r3, [r7, #13]
 80167e4:	029b      	lsls	r3, r3, #10
 80167e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167ea:	431a      	orrs	r2, r3
 80167ec:	7b7b      	ldrb	r3, [r7, #13]
 80167ee:	019b      	lsls	r3, r3, #6
 80167f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80167f4:	431a      	orrs	r2, r3
 80167f6:	4b60      	ldr	r3, [pc, #384]	; (8016978 <fillRect+0x308>)
 80167f8:	619a      	str	r2, [r3, #24]
 80167fa:	2101      	movs	r1, #1
 80167fc:	4862      	ldr	r0, [pc, #392]	; (8016988 <fillRect+0x318>)
 80167fe:	f7fa ffba 	bl	8011776 <PIN_LOW>
 8016802:	2101      	movs	r1, #1
 8016804:	4860      	ldr	r0, [pc, #384]	; (8016988 <fillRect+0x318>)
 8016806:	f7fa ffb6 	bl	8011776 <PIN_LOW>
 801680a:	2101      	movs	r1, #1
 801680c:	485e      	ldr	r0, [pc, #376]	; (8016988 <fillRect+0x318>)
 801680e:	f7fa ffb2 	bl	8011776 <PIN_LOW>
 8016812:	2101      	movs	r1, #1
 8016814:	485c      	ldr	r0, [pc, #368]	; (8016988 <fillRect+0x318>)
 8016816:	f7fa ffae 	bl	8011776 <PIN_LOW>
 801681a:	2101      	movs	r1, #1
 801681c:	485a      	ldr	r0, [pc, #360]	; (8016988 <fillRect+0x318>)
 801681e:	f7fa ffaa 	bl	8011776 <PIN_LOW>
 8016822:	2101      	movs	r1, #1
 8016824:	4858      	ldr	r0, [pc, #352]	; (8016988 <fillRect+0x318>)
 8016826:	f7fa ffa6 	bl	8011776 <PIN_LOW>
 801682a:	2101      	movs	r1, #1
 801682c:	4856      	ldr	r0, [pc, #344]	; (8016988 <fillRect+0x318>)
 801682e:	f7fa ffa2 	bl	8011776 <PIN_LOW>
 8016832:	2101      	movs	r1, #1
 8016834:	4854      	ldr	r0, [pc, #336]	; (8016988 <fillRect+0x318>)
 8016836:	f7fa ff9e 	bl	8011776 <PIN_LOW>
 801683a:	2101      	movs	r1, #1
 801683c:	4852      	ldr	r0, [pc, #328]	; (8016988 <fillRect+0x318>)
 801683e:	f7fa ff9a 	bl	8011776 <PIN_LOW>
 8016842:	2101      	movs	r1, #1
 8016844:	4850      	ldr	r0, [pc, #320]	; (8016988 <fillRect+0x318>)
 8016846:	f7fa ff96 	bl	8011776 <PIN_LOW>
 801684a:	2101      	movs	r1, #1
 801684c:	484e      	ldr	r0, [pc, #312]	; (8016988 <fillRect+0x318>)
 801684e:	f7fa ff92 	bl	8011776 <PIN_LOW>
 8016852:	2101      	movs	r1, #1
 8016854:	484c      	ldr	r0, [pc, #304]	; (8016988 <fillRect+0x318>)
 8016856:	f7fa ff8e 	bl	8011776 <PIN_LOW>
 801685a:	2101      	movs	r1, #1
 801685c:	484a      	ldr	r0, [pc, #296]	; (8016988 <fillRect+0x318>)
 801685e:	f7fa ff8a 	bl	8011776 <PIN_LOW>
 8016862:	2101      	movs	r1, #1
 8016864:	4848      	ldr	r0, [pc, #288]	; (8016988 <fillRect+0x318>)
 8016866:	f7fa ff86 	bl	8011776 <PIN_LOW>
 801686a:	2101      	movs	r1, #1
 801686c:	4846      	ldr	r0, [pc, #280]	; (8016988 <fillRect+0x318>)
 801686e:	f7fa ff82 	bl	8011776 <PIN_LOW>
 8016872:	2101      	movs	r1, #1
 8016874:	4844      	ldr	r0, [pc, #272]	; (8016988 <fillRect+0x318>)
 8016876:	f7fa ff7e 	bl	8011776 <PIN_LOW>
 801687a:	2101      	movs	r1, #1
 801687c:	4842      	ldr	r0, [pc, #264]	; (8016988 <fillRect+0x318>)
 801687e:	f7fa ff7a 	bl	8011776 <PIN_LOW>
 8016882:	2101      	movs	r1, #1
 8016884:	4840      	ldr	r0, [pc, #256]	; (8016988 <fillRect+0x318>)
 8016886:	f7fa ff86 	bl	8011796 <PIN_HIGH>
 801688a:	2101      	movs	r1, #1
 801688c:	483e      	ldr	r0, [pc, #248]	; (8016988 <fillRect+0x318>)
 801688e:	f7fa ff82 	bl	8011796 <PIN_HIGH>
 8016892:	4b3a      	ldr	r3, [pc, #232]	; (801697c <fillRect+0x30c>)
 8016894:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016898:	619a      	str	r2, [r3, #24]
 801689a:	4b3a      	ldr	r3, [pc, #232]	; (8016984 <fillRect+0x314>)
 801689c:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80168a0:	619a      	str	r2, [r3, #24]
 80168a2:	4b35      	ldr	r3, [pc, #212]	; (8016978 <fillRect+0x308>)
 80168a4:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80168a8:	619a      	str	r2, [r3, #24]
 80168aa:	7b3b      	ldrb	r3, [r7, #12]
 80168ac:	039b      	lsls	r3, r3, #14
 80168ae:	4a33      	ldr	r2, [pc, #204]	; (801697c <fillRect+0x30c>)
 80168b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80168b4:	6193      	str	r3, [r2, #24]
 80168b6:	7b3b      	ldrb	r3, [r7, #12]
 80168b8:	029b      	lsls	r3, r3, #10
 80168ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80168be:	7b3b      	ldrb	r3, [r7, #12]
 80168c0:	019b      	lsls	r3, r3, #6
 80168c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80168c6:	431a      	orrs	r2, r3
 80168c8:	7b3b      	ldrb	r3, [r7, #12]
 80168ca:	00db      	lsls	r3, r3, #3
 80168cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168d0:	431a      	orrs	r2, r3
 80168d2:	4b2c      	ldr	r3, [pc, #176]	; (8016984 <fillRect+0x314>)
 80168d4:	619a      	str	r2, [r3, #24]
 80168d6:	7b3b      	ldrb	r3, [r7, #12]
 80168d8:	031b      	lsls	r3, r3, #12
 80168da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80168de:	7b3b      	ldrb	r3, [r7, #12]
 80168e0:	035b      	lsls	r3, r3, #13
 80168e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80168e6:	431a      	orrs	r2, r3
 80168e8:	7b3b      	ldrb	r3, [r7, #12]
 80168ea:	029b      	lsls	r3, r3, #10
 80168ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80168f0:	431a      	orrs	r2, r3
 80168f2:	7b3b      	ldrb	r3, [r7, #12]
 80168f4:	019b      	lsls	r3, r3, #6
 80168f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80168fa:	431a      	orrs	r2, r3
 80168fc:	4b1e      	ldr	r3, [pc, #120]	; (8016978 <fillRect+0x308>)
 80168fe:	619a      	str	r2, [r3, #24]
 8016900:	2101      	movs	r1, #1
 8016902:	4821      	ldr	r0, [pc, #132]	; (8016988 <fillRect+0x318>)
 8016904:	f7fa ff37 	bl	8011776 <PIN_LOW>
 8016908:	2101      	movs	r1, #1
 801690a:	481f      	ldr	r0, [pc, #124]	; (8016988 <fillRect+0x318>)
 801690c:	f7fa ff33 	bl	8011776 <PIN_LOW>
 8016910:	2101      	movs	r1, #1
 8016912:	481d      	ldr	r0, [pc, #116]	; (8016988 <fillRect+0x318>)
 8016914:	f7fa ff2f 	bl	8011776 <PIN_LOW>
 8016918:	2101      	movs	r1, #1
 801691a:	481b      	ldr	r0, [pc, #108]	; (8016988 <fillRect+0x318>)
 801691c:	f7fa ff2b 	bl	8011776 <PIN_LOW>
 8016920:	2101      	movs	r1, #1
 8016922:	4819      	ldr	r0, [pc, #100]	; (8016988 <fillRect+0x318>)
 8016924:	f7fa ff27 	bl	8011776 <PIN_LOW>
 8016928:	2101      	movs	r1, #1
 801692a:	4817      	ldr	r0, [pc, #92]	; (8016988 <fillRect+0x318>)
 801692c:	f7fa ff23 	bl	8011776 <PIN_LOW>
 8016930:	2101      	movs	r1, #1
 8016932:	4815      	ldr	r0, [pc, #84]	; (8016988 <fillRect+0x318>)
 8016934:	f7fa ff1f 	bl	8011776 <PIN_LOW>
 8016938:	2101      	movs	r1, #1
 801693a:	4813      	ldr	r0, [pc, #76]	; (8016988 <fillRect+0x318>)
 801693c:	f7fa ff1b 	bl	8011776 <PIN_LOW>
 8016940:	2101      	movs	r1, #1
 8016942:	4811      	ldr	r0, [pc, #68]	; (8016988 <fillRect+0x318>)
 8016944:	f7fa ff17 	bl	8011776 <PIN_LOW>
 8016948:	2101      	movs	r1, #1
 801694a:	480f      	ldr	r0, [pc, #60]	; (8016988 <fillRect+0x318>)
 801694c:	f7fa ff13 	bl	8011776 <PIN_LOW>
 8016950:	2101      	movs	r1, #1
 8016952:	480d      	ldr	r0, [pc, #52]	; (8016988 <fillRect+0x318>)
 8016954:	f7fa ff0f 	bl	8011776 <PIN_LOW>
 8016958:	2101      	movs	r1, #1
 801695a:	480b      	ldr	r0, [pc, #44]	; (8016988 <fillRect+0x318>)
 801695c:	f7fa ff0b 	bl	8011776 <PIN_LOW>
 8016960:	2101      	movs	r1, #1
 8016962:	4809      	ldr	r0, [pc, #36]	; (8016988 <fillRect+0x318>)
 8016964:	f7fa ff07 	bl	8011776 <PIN_LOW>
 8016968:	2101      	movs	r1, #1
 801696a:	4807      	ldr	r0, [pc, #28]	; (8016988 <fillRect+0x318>)
 801696c:	f7fa ff03 	bl	8011776 <PIN_LOW>
 8016970:	2101      	movs	r1, #1
 8016972:	e00b      	b.n	801698c <fillRect+0x31c>
 8016974:	20000219 	.word	0x20000219
 8016978:	40021400 	.word	0x40021400
 801697c:	40020c00 	.word	0x40020c00
 8016980:	2000698c 	.word	0x2000698c
 8016984:	40021000 	.word	0x40021000
 8016988:	40020800 	.word	0x40020800
 801698c:	48b7      	ldr	r0, [pc, #732]	; (8016c6c <fillRect+0x5fc>)
 801698e:	f7fa fef2 	bl	8011776 <PIN_LOW>
 8016992:	2101      	movs	r1, #1
 8016994:	48b5      	ldr	r0, [pc, #724]	; (8016c6c <fillRect+0x5fc>)
 8016996:	f7fa feee 	bl	8011776 <PIN_LOW>
 801699a:	2101      	movs	r1, #1
 801699c:	48b3      	ldr	r0, [pc, #716]	; (8016c6c <fillRect+0x5fc>)
 801699e:	f7fa feea 	bl	8011776 <PIN_LOW>
 80169a2:	2101      	movs	r1, #1
 80169a4:	48b1      	ldr	r0, [pc, #708]	; (8016c6c <fillRect+0x5fc>)
 80169a6:	f7fa fef6 	bl	8011796 <PIN_HIGH>
 80169aa:	2101      	movs	r1, #1
 80169ac:	48af      	ldr	r0, [pc, #700]	; (8016c6c <fillRect+0x5fc>)
 80169ae:	f7fa fef2 	bl	8011796 <PIN_HIGH>
 80169b2:	2120      	movs	r1, #32
 80169b4:	48ae      	ldr	r0, [pc, #696]	; (8016c70 <fillRect+0x600>)
 80169b6:	f7fa feee 	bl	8011796 <PIN_HIGH>
    if (h > w) {
 80169ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80169be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169c2:	429a      	cmp	r2, r3
 80169c4:	dd05      	ble.n	80169d2 <fillRect+0x362>
        end = h;
 80169c6:	883b      	ldrh	r3, [r7, #0]
 80169c8:	81fb      	strh	r3, [r7, #14]
        h = w;
 80169ca:	887b      	ldrh	r3, [r7, #2]
 80169cc:	803b      	strh	r3, [r7, #0]
        w = end;
 80169ce:	89fb      	ldrh	r3, [r7, #14]
 80169d0:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80169d2:	8c3b      	ldrh	r3, [r7, #32]
 80169d4:	0a1b      	lsrs	r3, r3, #8
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	72fb      	strb	r3, [r7, #11]
 80169da:	8c3b      	ldrh	r3, [r7, #32]
 80169dc:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 80169de:	e110      	b.n	8016c02 <fillRect+0x592>
        end = w;
 80169e0:	887b      	ldrh	r3, [r7, #2]
 80169e2:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 80169e4:	4ba2      	ldr	r3, [pc, #648]	; (8016c70 <fillRect+0x600>)
 80169e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80169ea:	619a      	str	r2, [r3, #24]
 80169ec:	4ba1      	ldr	r3, [pc, #644]	; (8016c74 <fillRect+0x604>)
 80169ee:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80169f2:	619a      	str	r2, [r3, #24]
 80169f4:	4ba0      	ldr	r3, [pc, #640]	; (8016c78 <fillRect+0x608>)
 80169f6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80169fa:	619a      	str	r2, [r3, #24]
 80169fc:	7afb      	ldrb	r3, [r7, #11]
 80169fe:	039b      	lsls	r3, r3, #14
 8016a00:	4a9b      	ldr	r2, [pc, #620]	; (8016c70 <fillRect+0x600>)
 8016a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016a06:	6193      	str	r3, [r2, #24]
 8016a08:	7afb      	ldrb	r3, [r7, #11]
 8016a0a:	029b      	lsls	r3, r3, #10
 8016a0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016a10:	7afb      	ldrb	r3, [r7, #11]
 8016a12:	019b      	lsls	r3, r3, #6
 8016a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a18:	431a      	orrs	r2, r3
 8016a1a:	7afb      	ldrb	r3, [r7, #11]
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016a22:	431a      	orrs	r2, r3
 8016a24:	4b93      	ldr	r3, [pc, #588]	; (8016c74 <fillRect+0x604>)
 8016a26:	619a      	str	r2, [r3, #24]
 8016a28:	7afb      	ldrb	r3, [r7, #11]
 8016a2a:	031b      	lsls	r3, r3, #12
 8016a2c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016a30:	7afb      	ldrb	r3, [r7, #11]
 8016a32:	035b      	lsls	r3, r3, #13
 8016a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016a38:	431a      	orrs	r2, r3
 8016a3a:	7afb      	ldrb	r3, [r7, #11]
 8016a3c:	029b      	lsls	r3, r3, #10
 8016a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016a42:	431a      	orrs	r2, r3
 8016a44:	7afb      	ldrb	r3, [r7, #11]
 8016a46:	019b      	lsls	r3, r3, #6
 8016a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a4c:	431a      	orrs	r2, r3
 8016a4e:	4b8a      	ldr	r3, [pc, #552]	; (8016c78 <fillRect+0x608>)
 8016a50:	619a      	str	r2, [r3, #24]
 8016a52:	2101      	movs	r1, #1
 8016a54:	4885      	ldr	r0, [pc, #532]	; (8016c6c <fillRect+0x5fc>)
 8016a56:	f7fa fe8e 	bl	8011776 <PIN_LOW>
 8016a5a:	2101      	movs	r1, #1
 8016a5c:	4883      	ldr	r0, [pc, #524]	; (8016c6c <fillRect+0x5fc>)
 8016a5e:	f7fa fe8a 	bl	8011776 <PIN_LOW>
 8016a62:	2101      	movs	r1, #1
 8016a64:	4881      	ldr	r0, [pc, #516]	; (8016c6c <fillRect+0x5fc>)
 8016a66:	f7fa fe86 	bl	8011776 <PIN_LOW>
 8016a6a:	2101      	movs	r1, #1
 8016a6c:	487f      	ldr	r0, [pc, #508]	; (8016c6c <fillRect+0x5fc>)
 8016a6e:	f7fa fe82 	bl	8011776 <PIN_LOW>
 8016a72:	2101      	movs	r1, #1
 8016a74:	487d      	ldr	r0, [pc, #500]	; (8016c6c <fillRect+0x5fc>)
 8016a76:	f7fa fe7e 	bl	8011776 <PIN_LOW>
 8016a7a:	2101      	movs	r1, #1
 8016a7c:	487b      	ldr	r0, [pc, #492]	; (8016c6c <fillRect+0x5fc>)
 8016a7e:	f7fa fe7a 	bl	8011776 <PIN_LOW>
 8016a82:	2101      	movs	r1, #1
 8016a84:	4879      	ldr	r0, [pc, #484]	; (8016c6c <fillRect+0x5fc>)
 8016a86:	f7fa fe76 	bl	8011776 <PIN_LOW>
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	4877      	ldr	r0, [pc, #476]	; (8016c6c <fillRect+0x5fc>)
 8016a8e:	f7fa fe72 	bl	8011776 <PIN_LOW>
 8016a92:	2101      	movs	r1, #1
 8016a94:	4875      	ldr	r0, [pc, #468]	; (8016c6c <fillRect+0x5fc>)
 8016a96:	f7fa fe6e 	bl	8011776 <PIN_LOW>
 8016a9a:	2101      	movs	r1, #1
 8016a9c:	4873      	ldr	r0, [pc, #460]	; (8016c6c <fillRect+0x5fc>)
 8016a9e:	f7fa fe6a 	bl	8011776 <PIN_LOW>
 8016aa2:	2101      	movs	r1, #1
 8016aa4:	4871      	ldr	r0, [pc, #452]	; (8016c6c <fillRect+0x5fc>)
 8016aa6:	f7fa fe66 	bl	8011776 <PIN_LOW>
 8016aaa:	2101      	movs	r1, #1
 8016aac:	486f      	ldr	r0, [pc, #444]	; (8016c6c <fillRect+0x5fc>)
 8016aae:	f7fa fe62 	bl	8011776 <PIN_LOW>
 8016ab2:	2101      	movs	r1, #1
 8016ab4:	486d      	ldr	r0, [pc, #436]	; (8016c6c <fillRect+0x5fc>)
 8016ab6:	f7fa fe5e 	bl	8011776 <PIN_LOW>
 8016aba:	2101      	movs	r1, #1
 8016abc:	486b      	ldr	r0, [pc, #428]	; (8016c6c <fillRect+0x5fc>)
 8016abe:	f7fa fe5a 	bl	8011776 <PIN_LOW>
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	4869      	ldr	r0, [pc, #420]	; (8016c6c <fillRect+0x5fc>)
 8016ac6:	f7fa fe56 	bl	8011776 <PIN_LOW>
 8016aca:	2101      	movs	r1, #1
 8016acc:	4867      	ldr	r0, [pc, #412]	; (8016c6c <fillRect+0x5fc>)
 8016ace:	f7fa fe52 	bl	8011776 <PIN_LOW>
 8016ad2:	2101      	movs	r1, #1
 8016ad4:	4865      	ldr	r0, [pc, #404]	; (8016c6c <fillRect+0x5fc>)
 8016ad6:	f7fa fe4e 	bl	8011776 <PIN_LOW>
 8016ada:	2101      	movs	r1, #1
 8016adc:	4863      	ldr	r0, [pc, #396]	; (8016c6c <fillRect+0x5fc>)
 8016ade:	f7fa fe5a 	bl	8011796 <PIN_HIGH>
 8016ae2:	2101      	movs	r1, #1
 8016ae4:	4861      	ldr	r0, [pc, #388]	; (8016c6c <fillRect+0x5fc>)
 8016ae6:	f7fa fe56 	bl	8011796 <PIN_HIGH>
            write8(lo);
 8016aea:	4b61      	ldr	r3, [pc, #388]	; (8016c70 <fillRect+0x600>)
 8016aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016af0:	619a      	str	r2, [r3, #24]
 8016af2:	4b60      	ldr	r3, [pc, #384]	; (8016c74 <fillRect+0x604>)
 8016af4:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 8016af8:	619a      	str	r2, [r3, #24]
 8016afa:	4b5f      	ldr	r3, [pc, #380]	; (8016c78 <fillRect+0x608>)
 8016afc:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8016b00:	619a      	str	r2, [r3, #24]
 8016b02:	7abb      	ldrb	r3, [r7, #10]
 8016b04:	039b      	lsls	r3, r3, #14
 8016b06:	4a5a      	ldr	r2, [pc, #360]	; (8016c70 <fillRect+0x600>)
 8016b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b0c:	6193      	str	r3, [r2, #24]
 8016b0e:	7abb      	ldrb	r3, [r7, #10]
 8016b10:	029b      	lsls	r3, r3, #10
 8016b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016b16:	7abb      	ldrb	r3, [r7, #10]
 8016b18:	019b      	lsls	r3, r3, #6
 8016b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016b1e:	431a      	orrs	r2, r3
 8016b20:	7abb      	ldrb	r3, [r7, #10]
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016b28:	431a      	orrs	r2, r3
 8016b2a:	4b52      	ldr	r3, [pc, #328]	; (8016c74 <fillRect+0x604>)
 8016b2c:	619a      	str	r2, [r3, #24]
 8016b2e:	7abb      	ldrb	r3, [r7, #10]
 8016b30:	031b      	lsls	r3, r3, #12
 8016b32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016b36:	7abb      	ldrb	r3, [r7, #10]
 8016b38:	035b      	lsls	r3, r3, #13
 8016b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b3e:	431a      	orrs	r2, r3
 8016b40:	7abb      	ldrb	r3, [r7, #10]
 8016b42:	029b      	lsls	r3, r3, #10
 8016b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016b48:	431a      	orrs	r2, r3
 8016b4a:	7abb      	ldrb	r3, [r7, #10]
 8016b4c:	019b      	lsls	r3, r3, #6
 8016b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016b52:	431a      	orrs	r2, r3
 8016b54:	4b48      	ldr	r3, [pc, #288]	; (8016c78 <fillRect+0x608>)
 8016b56:	619a      	str	r2, [r3, #24]
 8016b58:	2101      	movs	r1, #1
 8016b5a:	4844      	ldr	r0, [pc, #272]	; (8016c6c <fillRect+0x5fc>)
 8016b5c:	f7fa fe0b 	bl	8011776 <PIN_LOW>
 8016b60:	2101      	movs	r1, #1
 8016b62:	4842      	ldr	r0, [pc, #264]	; (8016c6c <fillRect+0x5fc>)
 8016b64:	f7fa fe07 	bl	8011776 <PIN_LOW>
 8016b68:	2101      	movs	r1, #1
 8016b6a:	4840      	ldr	r0, [pc, #256]	; (8016c6c <fillRect+0x5fc>)
 8016b6c:	f7fa fe03 	bl	8011776 <PIN_LOW>
 8016b70:	2101      	movs	r1, #1
 8016b72:	483e      	ldr	r0, [pc, #248]	; (8016c6c <fillRect+0x5fc>)
 8016b74:	f7fa fdff 	bl	8011776 <PIN_LOW>
 8016b78:	2101      	movs	r1, #1
 8016b7a:	483c      	ldr	r0, [pc, #240]	; (8016c6c <fillRect+0x5fc>)
 8016b7c:	f7fa fdfb 	bl	8011776 <PIN_LOW>
 8016b80:	2101      	movs	r1, #1
 8016b82:	483a      	ldr	r0, [pc, #232]	; (8016c6c <fillRect+0x5fc>)
 8016b84:	f7fa fdf7 	bl	8011776 <PIN_LOW>
 8016b88:	2101      	movs	r1, #1
 8016b8a:	4838      	ldr	r0, [pc, #224]	; (8016c6c <fillRect+0x5fc>)
 8016b8c:	f7fa fdf3 	bl	8011776 <PIN_LOW>
 8016b90:	2101      	movs	r1, #1
 8016b92:	4836      	ldr	r0, [pc, #216]	; (8016c6c <fillRect+0x5fc>)
 8016b94:	f7fa fdef 	bl	8011776 <PIN_LOW>
 8016b98:	2101      	movs	r1, #1
 8016b9a:	4834      	ldr	r0, [pc, #208]	; (8016c6c <fillRect+0x5fc>)
 8016b9c:	f7fa fdeb 	bl	8011776 <PIN_LOW>
 8016ba0:	2101      	movs	r1, #1
 8016ba2:	4832      	ldr	r0, [pc, #200]	; (8016c6c <fillRect+0x5fc>)
 8016ba4:	f7fa fde7 	bl	8011776 <PIN_LOW>
 8016ba8:	2101      	movs	r1, #1
 8016baa:	4830      	ldr	r0, [pc, #192]	; (8016c6c <fillRect+0x5fc>)
 8016bac:	f7fa fde3 	bl	8011776 <PIN_LOW>
 8016bb0:	2101      	movs	r1, #1
 8016bb2:	482e      	ldr	r0, [pc, #184]	; (8016c6c <fillRect+0x5fc>)
 8016bb4:	f7fa fddf 	bl	8011776 <PIN_LOW>
 8016bb8:	2101      	movs	r1, #1
 8016bba:	482c      	ldr	r0, [pc, #176]	; (8016c6c <fillRect+0x5fc>)
 8016bbc:	f7fa fddb 	bl	8011776 <PIN_LOW>
 8016bc0:	2101      	movs	r1, #1
 8016bc2:	482a      	ldr	r0, [pc, #168]	; (8016c6c <fillRect+0x5fc>)
 8016bc4:	f7fa fdd7 	bl	8011776 <PIN_LOW>
 8016bc8:	2101      	movs	r1, #1
 8016bca:	4828      	ldr	r0, [pc, #160]	; (8016c6c <fillRect+0x5fc>)
 8016bcc:	f7fa fdd3 	bl	8011776 <PIN_LOW>
 8016bd0:	2101      	movs	r1, #1
 8016bd2:	4826      	ldr	r0, [pc, #152]	; (8016c6c <fillRect+0x5fc>)
 8016bd4:	f7fa fdcf 	bl	8011776 <PIN_LOW>
 8016bd8:	2101      	movs	r1, #1
 8016bda:	4824      	ldr	r0, [pc, #144]	; (8016c6c <fillRect+0x5fc>)
 8016bdc:	f7fa fdcb 	bl	8011776 <PIN_LOW>
 8016be0:	2101      	movs	r1, #1
 8016be2:	4822      	ldr	r0, [pc, #136]	; (8016c6c <fillRect+0x5fc>)
 8016be4:	f7fa fdd7 	bl	8011796 <PIN_HIGH>
 8016be8:	2101      	movs	r1, #1
 8016bea:	4820      	ldr	r0, [pc, #128]	; (8016c6c <fillRect+0x5fc>)
 8016bec:	f7fa fdd3 	bl	8011796 <PIN_HIGH>
        } while (--end != 0);
 8016bf0:	89fb      	ldrh	r3, [r7, #14]
 8016bf2:	3b01      	subs	r3, #1
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	81fb      	strh	r3, [r7, #14]
 8016bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	f47f aef1 	bne.w	80169e4 <fillRect+0x374>
    while (h-- > 0) {
 8016c02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016c06:	b29a      	uxth	r2, r3
 8016c08:	3a01      	subs	r2, #1
 8016c0a:	b292      	uxth	r2, r2
 8016c0c:	803a      	strh	r2, [r7, #0]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f73f aee6 	bgt.w	80169e0 <fillRect+0x370>
#endif
    }
    CS_IDLE;
 8016c14:	2108      	movs	r1, #8
 8016c16:	4818      	ldr	r0, [pc, #96]	; (8016c78 <fillRect+0x608>)
 8016c18:	f7fa fdbd 	bl	8011796 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8016c1c:	4b17      	ldr	r3, [pc, #92]	; (8016c7c <fillRect+0x60c>)
 8016c1e:	881b      	ldrh	r3, [r3, #0]
 8016c20:	f003 0301 	and.w	r3, r3, #1
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d00b      	beq.n	8016c40 <fillRect+0x5d0>
 8016c28:	4b15      	ldr	r3, [pc, #84]	; (8016c80 <fillRect+0x610>)
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	f241 5226 	movw	r2, #5414	; 0x1526
 8016c30:	4293      	cmp	r3, r2
 8016c32:	d116      	bne.n	8016c62 <fillRect+0x5f2>
 8016c34:	4b13      	ldr	r3, [pc, #76]	; (8016c84 <fillRect+0x614>)
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	f003 0301 	and.w	r3, r3, #1
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d010      	beq.n	8016c62 <fillRect+0x5f2>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8016c40:	f7fa fde8 	bl	8011814 <width>
 8016c44:	4603      	mov	r3, r0
 8016c46:	3b01      	subs	r3, #1
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	b21c      	sxth	r4, r3
 8016c4c:	f7fa fdee 	bl	801182c <height>
 8016c50:	4603      	mov	r3, r0
 8016c52:	3b01      	subs	r3, #1
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	b21b      	sxth	r3, r3
 8016c58:	4622      	mov	r2, r4
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	2000      	movs	r0, #0
 8016c5e:	f7ff f881 	bl	8015d64 <setAddrWindow>
}
 8016c62:	bf00      	nop
 8016c64:	3714      	adds	r7, #20
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd90      	pop	{r4, r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	40020800 	.word	0x40020800
 8016c70:	40020c00 	.word	0x40020c00
 8016c74:	40021000 	.word	0x40021000
 8016c78:	40021400 	.word	0x40021400
 8016c7c:	2000698e 	.word	0x2000698e
 8016c80:	2000699c 	.word	0x2000699c
 8016c84:	2000021b 	.word	0x2000021b

08016c88 <__libc_init_array>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	4d0d      	ldr	r5, [pc, #52]	; (8016cc0 <__libc_init_array+0x38>)
 8016c8c:	4c0d      	ldr	r4, [pc, #52]	; (8016cc4 <__libc_init_array+0x3c>)
 8016c8e:	1b64      	subs	r4, r4, r5
 8016c90:	10a4      	asrs	r4, r4, #2
 8016c92:	2600      	movs	r6, #0
 8016c94:	42a6      	cmp	r6, r4
 8016c96:	d109      	bne.n	8016cac <__libc_init_array+0x24>
 8016c98:	4d0b      	ldr	r5, [pc, #44]	; (8016cc8 <__libc_init_array+0x40>)
 8016c9a:	4c0c      	ldr	r4, [pc, #48]	; (8016ccc <__libc_init_array+0x44>)
 8016c9c:	f001 f8cc 	bl	8017e38 <_init>
 8016ca0:	1b64      	subs	r4, r4, r5
 8016ca2:	10a4      	asrs	r4, r4, #2
 8016ca4:	2600      	movs	r6, #0
 8016ca6:	42a6      	cmp	r6, r4
 8016ca8:	d105      	bne.n	8016cb6 <__libc_init_array+0x2e>
 8016caa:	bd70      	pop	{r4, r5, r6, pc}
 8016cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cb0:	4798      	blx	r3
 8016cb2:	3601      	adds	r6, #1
 8016cb4:	e7ee      	b.n	8016c94 <__libc_init_array+0xc>
 8016cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cba:	4798      	blx	r3
 8016cbc:	3601      	adds	r6, #1
 8016cbe:	e7f2      	b.n	8016ca6 <__libc_init_array+0x1e>
 8016cc0:	0801b010 	.word	0x0801b010
 8016cc4:	0801b010 	.word	0x0801b010
 8016cc8:	0801b010 	.word	0x0801b010
 8016ccc:	0801b014 	.word	0x0801b014

08016cd0 <memcmp>:
 8016cd0:	b530      	push	{r4, r5, lr}
 8016cd2:	3901      	subs	r1, #1
 8016cd4:	2400      	movs	r4, #0
 8016cd6:	42a2      	cmp	r2, r4
 8016cd8:	d101      	bne.n	8016cde <memcmp+0xe>
 8016cda:	2000      	movs	r0, #0
 8016cdc:	e005      	b.n	8016cea <memcmp+0x1a>
 8016cde:	5d03      	ldrb	r3, [r0, r4]
 8016ce0:	3401      	adds	r4, #1
 8016ce2:	5d0d      	ldrb	r5, [r1, r4]
 8016ce4:	42ab      	cmp	r3, r5
 8016ce6:	d0f6      	beq.n	8016cd6 <memcmp+0x6>
 8016ce8:	1b58      	subs	r0, r3, r5
 8016cea:	bd30      	pop	{r4, r5, pc}

08016cec <memcpy>:
 8016cec:	440a      	add	r2, r1
 8016cee:	4291      	cmp	r1, r2
 8016cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8016cf4:	d100      	bne.n	8016cf8 <memcpy+0xc>
 8016cf6:	4770      	bx	lr
 8016cf8:	b510      	push	{r4, lr}
 8016cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d02:	4291      	cmp	r1, r2
 8016d04:	d1f9      	bne.n	8016cfa <memcpy+0xe>
 8016d06:	bd10      	pop	{r4, pc}

08016d08 <memset>:
 8016d08:	4402      	add	r2, r0
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d100      	bne.n	8016d12 <memset+0xa>
 8016d10:	4770      	bx	lr
 8016d12:	f803 1b01 	strb.w	r1, [r3], #1
 8016d16:	e7f9      	b.n	8016d0c <memset+0x4>

08016d18 <iprintf>:
 8016d18:	b40f      	push	{r0, r1, r2, r3}
 8016d1a:	4b0a      	ldr	r3, [pc, #40]	; (8016d44 <iprintf+0x2c>)
 8016d1c:	b513      	push	{r0, r1, r4, lr}
 8016d1e:	681c      	ldr	r4, [r3, #0]
 8016d20:	b124      	cbz	r4, 8016d2c <iprintf+0x14>
 8016d22:	69a3      	ldr	r3, [r4, #24]
 8016d24:	b913      	cbnz	r3, 8016d2c <iprintf+0x14>
 8016d26:	4620      	mov	r0, r4
 8016d28:	f000 fabc 	bl	80172a4 <__sinit>
 8016d2c:	ab05      	add	r3, sp, #20
 8016d2e:	9a04      	ldr	r2, [sp, #16]
 8016d30:	68a1      	ldr	r1, [r4, #8]
 8016d32:	9301      	str	r3, [sp, #4]
 8016d34:	4620      	mov	r0, r4
 8016d36:	f000 fca7 	bl	8017688 <_vfiprintf_r>
 8016d3a:	b002      	add	sp, #8
 8016d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d40:	b004      	add	sp, #16
 8016d42:	4770      	bx	lr
 8016d44:	20000018 	.word	0x20000018

08016d48 <_puts_r>:
 8016d48:	b570      	push	{r4, r5, r6, lr}
 8016d4a:	460e      	mov	r6, r1
 8016d4c:	4605      	mov	r5, r0
 8016d4e:	b118      	cbz	r0, 8016d58 <_puts_r+0x10>
 8016d50:	6983      	ldr	r3, [r0, #24]
 8016d52:	b90b      	cbnz	r3, 8016d58 <_puts_r+0x10>
 8016d54:	f000 faa6 	bl	80172a4 <__sinit>
 8016d58:	69ab      	ldr	r3, [r5, #24]
 8016d5a:	68ac      	ldr	r4, [r5, #8]
 8016d5c:	b913      	cbnz	r3, 8016d64 <_puts_r+0x1c>
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 faa0 	bl	80172a4 <__sinit>
 8016d64:	4b2c      	ldr	r3, [pc, #176]	; (8016e18 <_puts_r+0xd0>)
 8016d66:	429c      	cmp	r4, r3
 8016d68:	d120      	bne.n	8016dac <_puts_r+0x64>
 8016d6a:	686c      	ldr	r4, [r5, #4]
 8016d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d6e:	07db      	lsls	r3, r3, #31
 8016d70:	d405      	bmi.n	8016d7e <_puts_r+0x36>
 8016d72:	89a3      	ldrh	r3, [r4, #12]
 8016d74:	0598      	lsls	r0, r3, #22
 8016d76:	d402      	bmi.n	8016d7e <_puts_r+0x36>
 8016d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d7a:	f000 fb43 	bl	8017404 <__retarget_lock_acquire_recursive>
 8016d7e:	89a3      	ldrh	r3, [r4, #12]
 8016d80:	0719      	lsls	r1, r3, #28
 8016d82:	d51d      	bpl.n	8016dc0 <_puts_r+0x78>
 8016d84:	6923      	ldr	r3, [r4, #16]
 8016d86:	b1db      	cbz	r3, 8016dc0 <_puts_r+0x78>
 8016d88:	3e01      	subs	r6, #1
 8016d8a:	68a3      	ldr	r3, [r4, #8]
 8016d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d90:	3b01      	subs	r3, #1
 8016d92:	60a3      	str	r3, [r4, #8]
 8016d94:	bb39      	cbnz	r1, 8016de6 <_puts_r+0x9e>
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	da38      	bge.n	8016e0c <_puts_r+0xc4>
 8016d9a:	4622      	mov	r2, r4
 8016d9c:	210a      	movs	r1, #10
 8016d9e:	4628      	mov	r0, r5
 8016da0:	f000 f888 	bl	8016eb4 <__swbuf_r>
 8016da4:	3001      	adds	r0, #1
 8016da6:	d011      	beq.n	8016dcc <_puts_r+0x84>
 8016da8:	250a      	movs	r5, #10
 8016daa:	e011      	b.n	8016dd0 <_puts_r+0x88>
 8016dac:	4b1b      	ldr	r3, [pc, #108]	; (8016e1c <_puts_r+0xd4>)
 8016dae:	429c      	cmp	r4, r3
 8016db0:	d101      	bne.n	8016db6 <_puts_r+0x6e>
 8016db2:	68ac      	ldr	r4, [r5, #8]
 8016db4:	e7da      	b.n	8016d6c <_puts_r+0x24>
 8016db6:	4b1a      	ldr	r3, [pc, #104]	; (8016e20 <_puts_r+0xd8>)
 8016db8:	429c      	cmp	r4, r3
 8016dba:	bf08      	it	eq
 8016dbc:	68ec      	ldreq	r4, [r5, #12]
 8016dbe:	e7d5      	b.n	8016d6c <_puts_r+0x24>
 8016dc0:	4621      	mov	r1, r4
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	f000 f8c8 	bl	8016f58 <__swsetup_r>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	d0dd      	beq.n	8016d88 <_puts_r+0x40>
 8016dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8016dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016dd2:	07da      	lsls	r2, r3, #31
 8016dd4:	d405      	bmi.n	8016de2 <_puts_r+0x9a>
 8016dd6:	89a3      	ldrh	r3, [r4, #12]
 8016dd8:	059b      	lsls	r3, r3, #22
 8016dda:	d402      	bmi.n	8016de2 <_puts_r+0x9a>
 8016ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dde:	f000 fb12 	bl	8017406 <__retarget_lock_release_recursive>
 8016de2:	4628      	mov	r0, r5
 8016de4:	bd70      	pop	{r4, r5, r6, pc}
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	da04      	bge.n	8016df4 <_puts_r+0xac>
 8016dea:	69a2      	ldr	r2, [r4, #24]
 8016dec:	429a      	cmp	r2, r3
 8016dee:	dc06      	bgt.n	8016dfe <_puts_r+0xb6>
 8016df0:	290a      	cmp	r1, #10
 8016df2:	d004      	beq.n	8016dfe <_puts_r+0xb6>
 8016df4:	6823      	ldr	r3, [r4, #0]
 8016df6:	1c5a      	adds	r2, r3, #1
 8016df8:	6022      	str	r2, [r4, #0]
 8016dfa:	7019      	strb	r1, [r3, #0]
 8016dfc:	e7c5      	b.n	8016d8a <_puts_r+0x42>
 8016dfe:	4622      	mov	r2, r4
 8016e00:	4628      	mov	r0, r5
 8016e02:	f000 f857 	bl	8016eb4 <__swbuf_r>
 8016e06:	3001      	adds	r0, #1
 8016e08:	d1bf      	bne.n	8016d8a <_puts_r+0x42>
 8016e0a:	e7df      	b.n	8016dcc <_puts_r+0x84>
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	250a      	movs	r5, #10
 8016e10:	1c5a      	adds	r2, r3, #1
 8016e12:	6022      	str	r2, [r4, #0]
 8016e14:	701d      	strb	r5, [r3, #0]
 8016e16:	e7db      	b.n	8016dd0 <_puts_r+0x88>
 8016e18:	0801af94 	.word	0x0801af94
 8016e1c:	0801afb4 	.word	0x0801afb4
 8016e20:	0801af74 	.word	0x0801af74

08016e24 <puts>:
 8016e24:	4b02      	ldr	r3, [pc, #8]	; (8016e30 <puts+0xc>)
 8016e26:	4601      	mov	r1, r0
 8016e28:	6818      	ldr	r0, [r3, #0]
 8016e2a:	f7ff bf8d 	b.w	8016d48 <_puts_r>
 8016e2e:	bf00      	nop
 8016e30:	20000018 	.word	0x20000018

08016e34 <rand>:
 8016e34:	4b17      	ldr	r3, [pc, #92]	; (8016e94 <rand+0x60>)
 8016e36:	b510      	push	{r4, lr}
 8016e38:	681c      	ldr	r4, [r3, #0]
 8016e3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e3c:	b9b3      	cbnz	r3, 8016e6c <rand+0x38>
 8016e3e:	2018      	movs	r0, #24
 8016e40:	f000 fb46 	bl	80174d0 <malloc>
 8016e44:	63a0      	str	r0, [r4, #56]	; 0x38
 8016e46:	b928      	cbnz	r0, 8016e54 <rand+0x20>
 8016e48:	4602      	mov	r2, r0
 8016e4a:	4b13      	ldr	r3, [pc, #76]	; (8016e98 <rand+0x64>)
 8016e4c:	4813      	ldr	r0, [pc, #76]	; (8016e9c <rand+0x68>)
 8016e4e:	214e      	movs	r1, #78	; 0x4e
 8016e50:	f000 f8f0 	bl	8017034 <__assert_func>
 8016e54:	4a12      	ldr	r2, [pc, #72]	; (8016ea0 <rand+0x6c>)
 8016e56:	4b13      	ldr	r3, [pc, #76]	; (8016ea4 <rand+0x70>)
 8016e58:	e9c0 2300 	strd	r2, r3, [r0]
 8016e5c:	4b12      	ldr	r3, [pc, #72]	; (8016ea8 <rand+0x74>)
 8016e5e:	6083      	str	r3, [r0, #8]
 8016e60:	230b      	movs	r3, #11
 8016e62:	8183      	strh	r3, [r0, #12]
 8016e64:	2201      	movs	r2, #1
 8016e66:	2300      	movs	r3, #0
 8016e68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016e6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016e6e:	480f      	ldr	r0, [pc, #60]	; (8016eac <rand+0x78>)
 8016e70:	690a      	ldr	r2, [r1, #16]
 8016e72:	694b      	ldr	r3, [r1, #20]
 8016e74:	4c0e      	ldr	r4, [pc, #56]	; (8016eb0 <rand+0x7c>)
 8016e76:	4350      	muls	r0, r2
 8016e78:	fb04 0003 	mla	r0, r4, r3, r0
 8016e7c:	fba2 3404 	umull	r3, r4, r2, r4
 8016e80:	1c5a      	adds	r2, r3, #1
 8016e82:	4404      	add	r4, r0
 8016e84:	f144 0000 	adc.w	r0, r4, #0
 8016e88:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016e8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016e90:	bd10      	pop	{r4, pc}
 8016e92:	bf00      	nop
 8016e94:	20000018 	.word	0x20000018
 8016e98:	0801aec0 	.word	0x0801aec0
 8016e9c:	0801aed7 	.word	0x0801aed7
 8016ea0:	abcd330e 	.word	0xabcd330e
 8016ea4:	e66d1234 	.word	0xe66d1234
 8016ea8:	0005deec 	.word	0x0005deec
 8016eac:	5851f42d 	.word	0x5851f42d
 8016eb0:	4c957f2d 	.word	0x4c957f2d

08016eb4 <__swbuf_r>:
 8016eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb6:	460e      	mov	r6, r1
 8016eb8:	4614      	mov	r4, r2
 8016eba:	4605      	mov	r5, r0
 8016ebc:	b118      	cbz	r0, 8016ec6 <__swbuf_r+0x12>
 8016ebe:	6983      	ldr	r3, [r0, #24]
 8016ec0:	b90b      	cbnz	r3, 8016ec6 <__swbuf_r+0x12>
 8016ec2:	f000 f9ef 	bl	80172a4 <__sinit>
 8016ec6:	4b21      	ldr	r3, [pc, #132]	; (8016f4c <__swbuf_r+0x98>)
 8016ec8:	429c      	cmp	r4, r3
 8016eca:	d12b      	bne.n	8016f24 <__swbuf_r+0x70>
 8016ecc:	686c      	ldr	r4, [r5, #4]
 8016ece:	69a3      	ldr	r3, [r4, #24]
 8016ed0:	60a3      	str	r3, [r4, #8]
 8016ed2:	89a3      	ldrh	r3, [r4, #12]
 8016ed4:	071a      	lsls	r2, r3, #28
 8016ed6:	d52f      	bpl.n	8016f38 <__swbuf_r+0x84>
 8016ed8:	6923      	ldr	r3, [r4, #16]
 8016eda:	b36b      	cbz	r3, 8016f38 <__swbuf_r+0x84>
 8016edc:	6923      	ldr	r3, [r4, #16]
 8016ede:	6820      	ldr	r0, [r4, #0]
 8016ee0:	1ac0      	subs	r0, r0, r3
 8016ee2:	6963      	ldr	r3, [r4, #20]
 8016ee4:	b2f6      	uxtb	r6, r6
 8016ee6:	4283      	cmp	r3, r0
 8016ee8:	4637      	mov	r7, r6
 8016eea:	dc04      	bgt.n	8016ef6 <__swbuf_r+0x42>
 8016eec:	4621      	mov	r1, r4
 8016eee:	4628      	mov	r0, r5
 8016ef0:	f000 f944 	bl	801717c <_fflush_r>
 8016ef4:	bb30      	cbnz	r0, 8016f44 <__swbuf_r+0x90>
 8016ef6:	68a3      	ldr	r3, [r4, #8]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	60a3      	str	r3, [r4, #8]
 8016efc:	6823      	ldr	r3, [r4, #0]
 8016efe:	1c5a      	adds	r2, r3, #1
 8016f00:	6022      	str	r2, [r4, #0]
 8016f02:	701e      	strb	r6, [r3, #0]
 8016f04:	6963      	ldr	r3, [r4, #20]
 8016f06:	3001      	adds	r0, #1
 8016f08:	4283      	cmp	r3, r0
 8016f0a:	d004      	beq.n	8016f16 <__swbuf_r+0x62>
 8016f0c:	89a3      	ldrh	r3, [r4, #12]
 8016f0e:	07db      	lsls	r3, r3, #31
 8016f10:	d506      	bpl.n	8016f20 <__swbuf_r+0x6c>
 8016f12:	2e0a      	cmp	r6, #10
 8016f14:	d104      	bne.n	8016f20 <__swbuf_r+0x6c>
 8016f16:	4621      	mov	r1, r4
 8016f18:	4628      	mov	r0, r5
 8016f1a:	f000 f92f 	bl	801717c <_fflush_r>
 8016f1e:	b988      	cbnz	r0, 8016f44 <__swbuf_r+0x90>
 8016f20:	4638      	mov	r0, r7
 8016f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f24:	4b0a      	ldr	r3, [pc, #40]	; (8016f50 <__swbuf_r+0x9c>)
 8016f26:	429c      	cmp	r4, r3
 8016f28:	d101      	bne.n	8016f2e <__swbuf_r+0x7a>
 8016f2a:	68ac      	ldr	r4, [r5, #8]
 8016f2c:	e7cf      	b.n	8016ece <__swbuf_r+0x1a>
 8016f2e:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <__swbuf_r+0xa0>)
 8016f30:	429c      	cmp	r4, r3
 8016f32:	bf08      	it	eq
 8016f34:	68ec      	ldreq	r4, [r5, #12]
 8016f36:	e7ca      	b.n	8016ece <__swbuf_r+0x1a>
 8016f38:	4621      	mov	r1, r4
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	f000 f80c 	bl	8016f58 <__swsetup_r>
 8016f40:	2800      	cmp	r0, #0
 8016f42:	d0cb      	beq.n	8016edc <__swbuf_r+0x28>
 8016f44:	f04f 37ff 	mov.w	r7, #4294967295
 8016f48:	e7ea      	b.n	8016f20 <__swbuf_r+0x6c>
 8016f4a:	bf00      	nop
 8016f4c:	0801af94 	.word	0x0801af94
 8016f50:	0801afb4 	.word	0x0801afb4
 8016f54:	0801af74 	.word	0x0801af74

08016f58 <__swsetup_r>:
 8016f58:	4b32      	ldr	r3, [pc, #200]	; (8017024 <__swsetup_r+0xcc>)
 8016f5a:	b570      	push	{r4, r5, r6, lr}
 8016f5c:	681d      	ldr	r5, [r3, #0]
 8016f5e:	4606      	mov	r6, r0
 8016f60:	460c      	mov	r4, r1
 8016f62:	b125      	cbz	r5, 8016f6e <__swsetup_r+0x16>
 8016f64:	69ab      	ldr	r3, [r5, #24]
 8016f66:	b913      	cbnz	r3, 8016f6e <__swsetup_r+0x16>
 8016f68:	4628      	mov	r0, r5
 8016f6a:	f000 f99b 	bl	80172a4 <__sinit>
 8016f6e:	4b2e      	ldr	r3, [pc, #184]	; (8017028 <__swsetup_r+0xd0>)
 8016f70:	429c      	cmp	r4, r3
 8016f72:	d10f      	bne.n	8016f94 <__swsetup_r+0x3c>
 8016f74:	686c      	ldr	r4, [r5, #4]
 8016f76:	89a3      	ldrh	r3, [r4, #12]
 8016f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f7c:	0719      	lsls	r1, r3, #28
 8016f7e:	d42c      	bmi.n	8016fda <__swsetup_r+0x82>
 8016f80:	06dd      	lsls	r5, r3, #27
 8016f82:	d411      	bmi.n	8016fa8 <__swsetup_r+0x50>
 8016f84:	2309      	movs	r3, #9
 8016f86:	6033      	str	r3, [r6, #0]
 8016f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f8c:	81a3      	strh	r3, [r4, #12]
 8016f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f92:	e03e      	b.n	8017012 <__swsetup_r+0xba>
 8016f94:	4b25      	ldr	r3, [pc, #148]	; (801702c <__swsetup_r+0xd4>)
 8016f96:	429c      	cmp	r4, r3
 8016f98:	d101      	bne.n	8016f9e <__swsetup_r+0x46>
 8016f9a:	68ac      	ldr	r4, [r5, #8]
 8016f9c:	e7eb      	b.n	8016f76 <__swsetup_r+0x1e>
 8016f9e:	4b24      	ldr	r3, [pc, #144]	; (8017030 <__swsetup_r+0xd8>)
 8016fa0:	429c      	cmp	r4, r3
 8016fa2:	bf08      	it	eq
 8016fa4:	68ec      	ldreq	r4, [r5, #12]
 8016fa6:	e7e6      	b.n	8016f76 <__swsetup_r+0x1e>
 8016fa8:	0758      	lsls	r0, r3, #29
 8016faa:	d512      	bpl.n	8016fd2 <__swsetup_r+0x7a>
 8016fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fae:	b141      	cbz	r1, 8016fc2 <__swsetup_r+0x6a>
 8016fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fb4:	4299      	cmp	r1, r3
 8016fb6:	d002      	beq.n	8016fbe <__swsetup_r+0x66>
 8016fb8:	4630      	mov	r0, r6
 8016fba:	f000 fa91 	bl	80174e0 <_free_r>
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8016fc2:	89a3      	ldrh	r3, [r4, #12]
 8016fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fc8:	81a3      	strh	r3, [r4, #12]
 8016fca:	2300      	movs	r3, #0
 8016fcc:	6063      	str	r3, [r4, #4]
 8016fce:	6923      	ldr	r3, [r4, #16]
 8016fd0:	6023      	str	r3, [r4, #0]
 8016fd2:	89a3      	ldrh	r3, [r4, #12]
 8016fd4:	f043 0308 	orr.w	r3, r3, #8
 8016fd8:	81a3      	strh	r3, [r4, #12]
 8016fda:	6923      	ldr	r3, [r4, #16]
 8016fdc:	b94b      	cbnz	r3, 8016ff2 <__swsetup_r+0x9a>
 8016fde:	89a3      	ldrh	r3, [r4, #12]
 8016fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fe8:	d003      	beq.n	8016ff2 <__swsetup_r+0x9a>
 8016fea:	4621      	mov	r1, r4
 8016fec:	4630      	mov	r0, r6
 8016fee:	f000 fa2f 	bl	8017450 <__smakebuf_r>
 8016ff2:	89a0      	ldrh	r0, [r4, #12]
 8016ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ff8:	f010 0301 	ands.w	r3, r0, #1
 8016ffc:	d00a      	beq.n	8017014 <__swsetup_r+0xbc>
 8016ffe:	2300      	movs	r3, #0
 8017000:	60a3      	str	r3, [r4, #8]
 8017002:	6963      	ldr	r3, [r4, #20]
 8017004:	425b      	negs	r3, r3
 8017006:	61a3      	str	r3, [r4, #24]
 8017008:	6923      	ldr	r3, [r4, #16]
 801700a:	b943      	cbnz	r3, 801701e <__swsetup_r+0xc6>
 801700c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017010:	d1ba      	bne.n	8016f88 <__swsetup_r+0x30>
 8017012:	bd70      	pop	{r4, r5, r6, pc}
 8017014:	0781      	lsls	r1, r0, #30
 8017016:	bf58      	it	pl
 8017018:	6963      	ldrpl	r3, [r4, #20]
 801701a:	60a3      	str	r3, [r4, #8]
 801701c:	e7f4      	b.n	8017008 <__swsetup_r+0xb0>
 801701e:	2000      	movs	r0, #0
 8017020:	e7f7      	b.n	8017012 <__swsetup_r+0xba>
 8017022:	bf00      	nop
 8017024:	20000018 	.word	0x20000018
 8017028:	0801af94 	.word	0x0801af94
 801702c:	0801afb4 	.word	0x0801afb4
 8017030:	0801af74 	.word	0x0801af74

08017034 <__assert_func>:
 8017034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017036:	4614      	mov	r4, r2
 8017038:	461a      	mov	r2, r3
 801703a:	4b09      	ldr	r3, [pc, #36]	; (8017060 <__assert_func+0x2c>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	4605      	mov	r5, r0
 8017040:	68d8      	ldr	r0, [r3, #12]
 8017042:	b14c      	cbz	r4, 8017058 <__assert_func+0x24>
 8017044:	4b07      	ldr	r3, [pc, #28]	; (8017064 <__assert_func+0x30>)
 8017046:	9100      	str	r1, [sp, #0]
 8017048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801704c:	4906      	ldr	r1, [pc, #24]	; (8017068 <__assert_func+0x34>)
 801704e:	462b      	mov	r3, r5
 8017050:	f000 f9a6 	bl	80173a0 <fiprintf>
 8017054:	f000 fe42 	bl	8017cdc <abort>
 8017058:	4b04      	ldr	r3, [pc, #16]	; (801706c <__assert_func+0x38>)
 801705a:	461c      	mov	r4, r3
 801705c:	e7f3      	b.n	8017046 <__assert_func+0x12>
 801705e:	bf00      	nop
 8017060:	20000018 	.word	0x20000018
 8017064:	0801af36 	.word	0x0801af36
 8017068:	0801af43 	.word	0x0801af43
 801706c:	0801af71 	.word	0x0801af71

08017070 <__sflush_r>:
 8017070:	898a      	ldrh	r2, [r1, #12]
 8017072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017076:	4605      	mov	r5, r0
 8017078:	0710      	lsls	r0, r2, #28
 801707a:	460c      	mov	r4, r1
 801707c:	d458      	bmi.n	8017130 <__sflush_r+0xc0>
 801707e:	684b      	ldr	r3, [r1, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	dc05      	bgt.n	8017090 <__sflush_r+0x20>
 8017084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017086:	2b00      	cmp	r3, #0
 8017088:	dc02      	bgt.n	8017090 <__sflush_r+0x20>
 801708a:	2000      	movs	r0, #0
 801708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017092:	2e00      	cmp	r6, #0
 8017094:	d0f9      	beq.n	801708a <__sflush_r+0x1a>
 8017096:	2300      	movs	r3, #0
 8017098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801709c:	682f      	ldr	r7, [r5, #0]
 801709e:	602b      	str	r3, [r5, #0]
 80170a0:	d032      	beq.n	8017108 <__sflush_r+0x98>
 80170a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80170a4:	89a3      	ldrh	r3, [r4, #12]
 80170a6:	075a      	lsls	r2, r3, #29
 80170a8:	d505      	bpl.n	80170b6 <__sflush_r+0x46>
 80170aa:	6863      	ldr	r3, [r4, #4]
 80170ac:	1ac0      	subs	r0, r0, r3
 80170ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170b0:	b10b      	cbz	r3, 80170b6 <__sflush_r+0x46>
 80170b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170b4:	1ac0      	subs	r0, r0, r3
 80170b6:	2300      	movs	r3, #0
 80170b8:	4602      	mov	r2, r0
 80170ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170bc:	6a21      	ldr	r1, [r4, #32]
 80170be:	4628      	mov	r0, r5
 80170c0:	47b0      	blx	r6
 80170c2:	1c43      	adds	r3, r0, #1
 80170c4:	89a3      	ldrh	r3, [r4, #12]
 80170c6:	d106      	bne.n	80170d6 <__sflush_r+0x66>
 80170c8:	6829      	ldr	r1, [r5, #0]
 80170ca:	291d      	cmp	r1, #29
 80170cc:	d82c      	bhi.n	8017128 <__sflush_r+0xb8>
 80170ce:	4a2a      	ldr	r2, [pc, #168]	; (8017178 <__sflush_r+0x108>)
 80170d0:	40ca      	lsrs	r2, r1
 80170d2:	07d6      	lsls	r6, r2, #31
 80170d4:	d528      	bpl.n	8017128 <__sflush_r+0xb8>
 80170d6:	2200      	movs	r2, #0
 80170d8:	6062      	str	r2, [r4, #4]
 80170da:	04d9      	lsls	r1, r3, #19
 80170dc:	6922      	ldr	r2, [r4, #16]
 80170de:	6022      	str	r2, [r4, #0]
 80170e0:	d504      	bpl.n	80170ec <__sflush_r+0x7c>
 80170e2:	1c42      	adds	r2, r0, #1
 80170e4:	d101      	bne.n	80170ea <__sflush_r+0x7a>
 80170e6:	682b      	ldr	r3, [r5, #0]
 80170e8:	b903      	cbnz	r3, 80170ec <__sflush_r+0x7c>
 80170ea:	6560      	str	r0, [r4, #84]	; 0x54
 80170ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170ee:	602f      	str	r7, [r5, #0]
 80170f0:	2900      	cmp	r1, #0
 80170f2:	d0ca      	beq.n	801708a <__sflush_r+0x1a>
 80170f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170f8:	4299      	cmp	r1, r3
 80170fa:	d002      	beq.n	8017102 <__sflush_r+0x92>
 80170fc:	4628      	mov	r0, r5
 80170fe:	f000 f9ef 	bl	80174e0 <_free_r>
 8017102:	2000      	movs	r0, #0
 8017104:	6360      	str	r0, [r4, #52]	; 0x34
 8017106:	e7c1      	b.n	801708c <__sflush_r+0x1c>
 8017108:	6a21      	ldr	r1, [r4, #32]
 801710a:	2301      	movs	r3, #1
 801710c:	4628      	mov	r0, r5
 801710e:	47b0      	blx	r6
 8017110:	1c41      	adds	r1, r0, #1
 8017112:	d1c7      	bne.n	80170a4 <__sflush_r+0x34>
 8017114:	682b      	ldr	r3, [r5, #0]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d0c4      	beq.n	80170a4 <__sflush_r+0x34>
 801711a:	2b1d      	cmp	r3, #29
 801711c:	d001      	beq.n	8017122 <__sflush_r+0xb2>
 801711e:	2b16      	cmp	r3, #22
 8017120:	d101      	bne.n	8017126 <__sflush_r+0xb6>
 8017122:	602f      	str	r7, [r5, #0]
 8017124:	e7b1      	b.n	801708a <__sflush_r+0x1a>
 8017126:	89a3      	ldrh	r3, [r4, #12]
 8017128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801712c:	81a3      	strh	r3, [r4, #12]
 801712e:	e7ad      	b.n	801708c <__sflush_r+0x1c>
 8017130:	690f      	ldr	r7, [r1, #16]
 8017132:	2f00      	cmp	r7, #0
 8017134:	d0a9      	beq.n	801708a <__sflush_r+0x1a>
 8017136:	0793      	lsls	r3, r2, #30
 8017138:	680e      	ldr	r6, [r1, #0]
 801713a:	bf08      	it	eq
 801713c:	694b      	ldreq	r3, [r1, #20]
 801713e:	600f      	str	r7, [r1, #0]
 8017140:	bf18      	it	ne
 8017142:	2300      	movne	r3, #0
 8017144:	eba6 0807 	sub.w	r8, r6, r7
 8017148:	608b      	str	r3, [r1, #8]
 801714a:	f1b8 0f00 	cmp.w	r8, #0
 801714e:	dd9c      	ble.n	801708a <__sflush_r+0x1a>
 8017150:	6a21      	ldr	r1, [r4, #32]
 8017152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017154:	4643      	mov	r3, r8
 8017156:	463a      	mov	r2, r7
 8017158:	4628      	mov	r0, r5
 801715a:	47b0      	blx	r6
 801715c:	2800      	cmp	r0, #0
 801715e:	dc06      	bgt.n	801716e <__sflush_r+0xfe>
 8017160:	89a3      	ldrh	r3, [r4, #12]
 8017162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017166:	81a3      	strh	r3, [r4, #12]
 8017168:	f04f 30ff 	mov.w	r0, #4294967295
 801716c:	e78e      	b.n	801708c <__sflush_r+0x1c>
 801716e:	4407      	add	r7, r0
 8017170:	eba8 0800 	sub.w	r8, r8, r0
 8017174:	e7e9      	b.n	801714a <__sflush_r+0xda>
 8017176:	bf00      	nop
 8017178:	20400001 	.word	0x20400001

0801717c <_fflush_r>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	690b      	ldr	r3, [r1, #16]
 8017180:	4605      	mov	r5, r0
 8017182:	460c      	mov	r4, r1
 8017184:	b913      	cbnz	r3, 801718c <_fflush_r+0x10>
 8017186:	2500      	movs	r5, #0
 8017188:	4628      	mov	r0, r5
 801718a:	bd38      	pop	{r3, r4, r5, pc}
 801718c:	b118      	cbz	r0, 8017196 <_fflush_r+0x1a>
 801718e:	6983      	ldr	r3, [r0, #24]
 8017190:	b90b      	cbnz	r3, 8017196 <_fflush_r+0x1a>
 8017192:	f000 f887 	bl	80172a4 <__sinit>
 8017196:	4b14      	ldr	r3, [pc, #80]	; (80171e8 <_fflush_r+0x6c>)
 8017198:	429c      	cmp	r4, r3
 801719a:	d11b      	bne.n	80171d4 <_fflush_r+0x58>
 801719c:	686c      	ldr	r4, [r5, #4]
 801719e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d0ef      	beq.n	8017186 <_fflush_r+0xa>
 80171a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80171a8:	07d0      	lsls	r0, r2, #31
 80171aa:	d404      	bmi.n	80171b6 <_fflush_r+0x3a>
 80171ac:	0599      	lsls	r1, r3, #22
 80171ae:	d402      	bmi.n	80171b6 <_fflush_r+0x3a>
 80171b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171b2:	f000 f927 	bl	8017404 <__retarget_lock_acquire_recursive>
 80171b6:	4628      	mov	r0, r5
 80171b8:	4621      	mov	r1, r4
 80171ba:	f7ff ff59 	bl	8017070 <__sflush_r>
 80171be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80171c0:	07da      	lsls	r2, r3, #31
 80171c2:	4605      	mov	r5, r0
 80171c4:	d4e0      	bmi.n	8017188 <_fflush_r+0xc>
 80171c6:	89a3      	ldrh	r3, [r4, #12]
 80171c8:	059b      	lsls	r3, r3, #22
 80171ca:	d4dd      	bmi.n	8017188 <_fflush_r+0xc>
 80171cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171ce:	f000 f91a 	bl	8017406 <__retarget_lock_release_recursive>
 80171d2:	e7d9      	b.n	8017188 <_fflush_r+0xc>
 80171d4:	4b05      	ldr	r3, [pc, #20]	; (80171ec <_fflush_r+0x70>)
 80171d6:	429c      	cmp	r4, r3
 80171d8:	d101      	bne.n	80171de <_fflush_r+0x62>
 80171da:	68ac      	ldr	r4, [r5, #8]
 80171dc:	e7df      	b.n	801719e <_fflush_r+0x22>
 80171de:	4b04      	ldr	r3, [pc, #16]	; (80171f0 <_fflush_r+0x74>)
 80171e0:	429c      	cmp	r4, r3
 80171e2:	bf08      	it	eq
 80171e4:	68ec      	ldreq	r4, [r5, #12]
 80171e6:	e7da      	b.n	801719e <_fflush_r+0x22>
 80171e8:	0801af94 	.word	0x0801af94
 80171ec:	0801afb4 	.word	0x0801afb4
 80171f0:	0801af74 	.word	0x0801af74

080171f4 <std>:
 80171f4:	2300      	movs	r3, #0
 80171f6:	b510      	push	{r4, lr}
 80171f8:	4604      	mov	r4, r0
 80171fa:	e9c0 3300 	strd	r3, r3, [r0]
 80171fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017202:	6083      	str	r3, [r0, #8]
 8017204:	8181      	strh	r1, [r0, #12]
 8017206:	6643      	str	r3, [r0, #100]	; 0x64
 8017208:	81c2      	strh	r2, [r0, #14]
 801720a:	6183      	str	r3, [r0, #24]
 801720c:	4619      	mov	r1, r3
 801720e:	2208      	movs	r2, #8
 8017210:	305c      	adds	r0, #92	; 0x5c
 8017212:	f7ff fd79 	bl	8016d08 <memset>
 8017216:	4b05      	ldr	r3, [pc, #20]	; (801722c <std+0x38>)
 8017218:	6263      	str	r3, [r4, #36]	; 0x24
 801721a:	4b05      	ldr	r3, [pc, #20]	; (8017230 <std+0x3c>)
 801721c:	62a3      	str	r3, [r4, #40]	; 0x28
 801721e:	4b05      	ldr	r3, [pc, #20]	; (8017234 <std+0x40>)
 8017220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017222:	4b05      	ldr	r3, [pc, #20]	; (8017238 <std+0x44>)
 8017224:	6224      	str	r4, [r4, #32]
 8017226:	6323      	str	r3, [r4, #48]	; 0x30
 8017228:	bd10      	pop	{r4, pc}
 801722a:	bf00      	nop
 801722c:	08017c31 	.word	0x08017c31
 8017230:	08017c53 	.word	0x08017c53
 8017234:	08017c8b 	.word	0x08017c8b
 8017238:	08017caf 	.word	0x08017caf

0801723c <_cleanup_r>:
 801723c:	4901      	ldr	r1, [pc, #4]	; (8017244 <_cleanup_r+0x8>)
 801723e:	f000 b8c1 	b.w	80173c4 <_fwalk_reent>
 8017242:	bf00      	nop
 8017244:	0801717d 	.word	0x0801717d

08017248 <__sfmoreglue>:
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	1e4a      	subs	r2, r1, #1
 801724c:	2568      	movs	r5, #104	; 0x68
 801724e:	4355      	muls	r5, r2
 8017250:	460e      	mov	r6, r1
 8017252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017256:	f000 f993 	bl	8017580 <_malloc_r>
 801725a:	4604      	mov	r4, r0
 801725c:	b140      	cbz	r0, 8017270 <__sfmoreglue+0x28>
 801725e:	2100      	movs	r1, #0
 8017260:	e9c0 1600 	strd	r1, r6, [r0]
 8017264:	300c      	adds	r0, #12
 8017266:	60a0      	str	r0, [r4, #8]
 8017268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801726c:	f7ff fd4c 	bl	8016d08 <memset>
 8017270:	4620      	mov	r0, r4
 8017272:	bd70      	pop	{r4, r5, r6, pc}

08017274 <__sfp_lock_acquire>:
 8017274:	4801      	ldr	r0, [pc, #4]	; (801727c <__sfp_lock_acquire+0x8>)
 8017276:	f000 b8c5 	b.w	8017404 <__retarget_lock_acquire_recursive>
 801727a:	bf00      	nop
 801727c:	200069b0 	.word	0x200069b0

08017280 <__sfp_lock_release>:
 8017280:	4801      	ldr	r0, [pc, #4]	; (8017288 <__sfp_lock_release+0x8>)
 8017282:	f000 b8c0 	b.w	8017406 <__retarget_lock_release_recursive>
 8017286:	bf00      	nop
 8017288:	200069b0 	.word	0x200069b0

0801728c <__sinit_lock_acquire>:
 801728c:	4801      	ldr	r0, [pc, #4]	; (8017294 <__sinit_lock_acquire+0x8>)
 801728e:	f000 b8b9 	b.w	8017404 <__retarget_lock_acquire_recursive>
 8017292:	bf00      	nop
 8017294:	200069ab 	.word	0x200069ab

08017298 <__sinit_lock_release>:
 8017298:	4801      	ldr	r0, [pc, #4]	; (80172a0 <__sinit_lock_release+0x8>)
 801729a:	f000 b8b4 	b.w	8017406 <__retarget_lock_release_recursive>
 801729e:	bf00      	nop
 80172a0:	200069ab 	.word	0x200069ab

080172a4 <__sinit>:
 80172a4:	b510      	push	{r4, lr}
 80172a6:	4604      	mov	r4, r0
 80172a8:	f7ff fff0 	bl	801728c <__sinit_lock_acquire>
 80172ac:	69a3      	ldr	r3, [r4, #24]
 80172ae:	b11b      	cbz	r3, 80172b8 <__sinit+0x14>
 80172b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172b4:	f7ff bff0 	b.w	8017298 <__sinit_lock_release>
 80172b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80172bc:	6523      	str	r3, [r4, #80]	; 0x50
 80172be:	4b13      	ldr	r3, [pc, #76]	; (801730c <__sinit+0x68>)
 80172c0:	4a13      	ldr	r2, [pc, #76]	; (8017310 <__sinit+0x6c>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80172c6:	42a3      	cmp	r3, r4
 80172c8:	bf04      	itt	eq
 80172ca:	2301      	moveq	r3, #1
 80172cc:	61a3      	streq	r3, [r4, #24]
 80172ce:	4620      	mov	r0, r4
 80172d0:	f000 f820 	bl	8017314 <__sfp>
 80172d4:	6060      	str	r0, [r4, #4]
 80172d6:	4620      	mov	r0, r4
 80172d8:	f000 f81c 	bl	8017314 <__sfp>
 80172dc:	60a0      	str	r0, [r4, #8]
 80172de:	4620      	mov	r0, r4
 80172e0:	f000 f818 	bl	8017314 <__sfp>
 80172e4:	2200      	movs	r2, #0
 80172e6:	60e0      	str	r0, [r4, #12]
 80172e8:	2104      	movs	r1, #4
 80172ea:	6860      	ldr	r0, [r4, #4]
 80172ec:	f7ff ff82 	bl	80171f4 <std>
 80172f0:	68a0      	ldr	r0, [r4, #8]
 80172f2:	2201      	movs	r2, #1
 80172f4:	2109      	movs	r1, #9
 80172f6:	f7ff ff7d 	bl	80171f4 <std>
 80172fa:	68e0      	ldr	r0, [r4, #12]
 80172fc:	2202      	movs	r2, #2
 80172fe:	2112      	movs	r1, #18
 8017300:	f7ff ff78 	bl	80171f4 <std>
 8017304:	2301      	movs	r3, #1
 8017306:	61a3      	str	r3, [r4, #24]
 8017308:	e7d2      	b.n	80172b0 <__sinit+0xc>
 801730a:	bf00      	nop
 801730c:	0801aebc 	.word	0x0801aebc
 8017310:	0801723d 	.word	0x0801723d

08017314 <__sfp>:
 8017314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017316:	4607      	mov	r7, r0
 8017318:	f7ff ffac 	bl	8017274 <__sfp_lock_acquire>
 801731c:	4b1e      	ldr	r3, [pc, #120]	; (8017398 <__sfp+0x84>)
 801731e:	681e      	ldr	r6, [r3, #0]
 8017320:	69b3      	ldr	r3, [r6, #24]
 8017322:	b913      	cbnz	r3, 801732a <__sfp+0x16>
 8017324:	4630      	mov	r0, r6
 8017326:	f7ff ffbd 	bl	80172a4 <__sinit>
 801732a:	3648      	adds	r6, #72	; 0x48
 801732c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017330:	3b01      	subs	r3, #1
 8017332:	d503      	bpl.n	801733c <__sfp+0x28>
 8017334:	6833      	ldr	r3, [r6, #0]
 8017336:	b30b      	cbz	r3, 801737c <__sfp+0x68>
 8017338:	6836      	ldr	r6, [r6, #0]
 801733a:	e7f7      	b.n	801732c <__sfp+0x18>
 801733c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017340:	b9d5      	cbnz	r5, 8017378 <__sfp+0x64>
 8017342:	4b16      	ldr	r3, [pc, #88]	; (801739c <__sfp+0x88>)
 8017344:	60e3      	str	r3, [r4, #12]
 8017346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801734a:	6665      	str	r5, [r4, #100]	; 0x64
 801734c:	f000 f859 	bl	8017402 <__retarget_lock_init_recursive>
 8017350:	f7ff ff96 	bl	8017280 <__sfp_lock_release>
 8017354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801735c:	6025      	str	r5, [r4, #0]
 801735e:	61a5      	str	r5, [r4, #24]
 8017360:	2208      	movs	r2, #8
 8017362:	4629      	mov	r1, r5
 8017364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017368:	f7ff fcce 	bl	8016d08 <memset>
 801736c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017374:	4620      	mov	r0, r4
 8017376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017378:	3468      	adds	r4, #104	; 0x68
 801737a:	e7d9      	b.n	8017330 <__sfp+0x1c>
 801737c:	2104      	movs	r1, #4
 801737e:	4638      	mov	r0, r7
 8017380:	f7ff ff62 	bl	8017248 <__sfmoreglue>
 8017384:	4604      	mov	r4, r0
 8017386:	6030      	str	r0, [r6, #0]
 8017388:	2800      	cmp	r0, #0
 801738a:	d1d5      	bne.n	8017338 <__sfp+0x24>
 801738c:	f7ff ff78 	bl	8017280 <__sfp_lock_release>
 8017390:	230c      	movs	r3, #12
 8017392:	603b      	str	r3, [r7, #0]
 8017394:	e7ee      	b.n	8017374 <__sfp+0x60>
 8017396:	bf00      	nop
 8017398:	0801aebc 	.word	0x0801aebc
 801739c:	ffff0001 	.word	0xffff0001

080173a0 <fiprintf>:
 80173a0:	b40e      	push	{r1, r2, r3}
 80173a2:	b503      	push	{r0, r1, lr}
 80173a4:	4601      	mov	r1, r0
 80173a6:	ab03      	add	r3, sp, #12
 80173a8:	4805      	ldr	r0, [pc, #20]	; (80173c0 <fiprintf+0x20>)
 80173aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80173ae:	6800      	ldr	r0, [r0, #0]
 80173b0:	9301      	str	r3, [sp, #4]
 80173b2:	f000 f969 	bl	8017688 <_vfiprintf_r>
 80173b6:	b002      	add	sp, #8
 80173b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80173bc:	b003      	add	sp, #12
 80173be:	4770      	bx	lr
 80173c0:	20000018 	.word	0x20000018

080173c4 <_fwalk_reent>:
 80173c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173c8:	4606      	mov	r6, r0
 80173ca:	4688      	mov	r8, r1
 80173cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80173d0:	2700      	movs	r7, #0
 80173d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80173d6:	f1b9 0901 	subs.w	r9, r9, #1
 80173da:	d505      	bpl.n	80173e8 <_fwalk_reent+0x24>
 80173dc:	6824      	ldr	r4, [r4, #0]
 80173de:	2c00      	cmp	r4, #0
 80173e0:	d1f7      	bne.n	80173d2 <_fwalk_reent+0xe>
 80173e2:	4638      	mov	r0, r7
 80173e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173e8:	89ab      	ldrh	r3, [r5, #12]
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d907      	bls.n	80173fe <_fwalk_reent+0x3a>
 80173ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173f2:	3301      	adds	r3, #1
 80173f4:	d003      	beq.n	80173fe <_fwalk_reent+0x3a>
 80173f6:	4629      	mov	r1, r5
 80173f8:	4630      	mov	r0, r6
 80173fa:	47c0      	blx	r8
 80173fc:	4307      	orrs	r7, r0
 80173fe:	3568      	adds	r5, #104	; 0x68
 8017400:	e7e9      	b.n	80173d6 <_fwalk_reent+0x12>

08017402 <__retarget_lock_init_recursive>:
 8017402:	4770      	bx	lr

08017404 <__retarget_lock_acquire_recursive>:
 8017404:	4770      	bx	lr

08017406 <__retarget_lock_release_recursive>:
 8017406:	4770      	bx	lr

08017408 <__swhatbuf_r>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	460e      	mov	r6, r1
 801740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017410:	2900      	cmp	r1, #0
 8017412:	b096      	sub	sp, #88	; 0x58
 8017414:	4614      	mov	r4, r2
 8017416:	461d      	mov	r5, r3
 8017418:	da07      	bge.n	801742a <__swhatbuf_r+0x22>
 801741a:	2300      	movs	r3, #0
 801741c:	602b      	str	r3, [r5, #0]
 801741e:	89b3      	ldrh	r3, [r6, #12]
 8017420:	061a      	lsls	r2, r3, #24
 8017422:	d410      	bmi.n	8017446 <__swhatbuf_r+0x3e>
 8017424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017428:	e00e      	b.n	8017448 <__swhatbuf_r+0x40>
 801742a:	466a      	mov	r2, sp
 801742c:	f000 fc6e 	bl	8017d0c <_fstat_r>
 8017430:	2800      	cmp	r0, #0
 8017432:	dbf2      	blt.n	801741a <__swhatbuf_r+0x12>
 8017434:	9a01      	ldr	r2, [sp, #4]
 8017436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801743a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801743e:	425a      	negs	r2, r3
 8017440:	415a      	adcs	r2, r3
 8017442:	602a      	str	r2, [r5, #0]
 8017444:	e7ee      	b.n	8017424 <__swhatbuf_r+0x1c>
 8017446:	2340      	movs	r3, #64	; 0x40
 8017448:	2000      	movs	r0, #0
 801744a:	6023      	str	r3, [r4, #0]
 801744c:	b016      	add	sp, #88	; 0x58
 801744e:	bd70      	pop	{r4, r5, r6, pc}

08017450 <__smakebuf_r>:
 8017450:	898b      	ldrh	r3, [r1, #12]
 8017452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017454:	079d      	lsls	r5, r3, #30
 8017456:	4606      	mov	r6, r0
 8017458:	460c      	mov	r4, r1
 801745a:	d507      	bpl.n	801746c <__smakebuf_r+0x1c>
 801745c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017460:	6023      	str	r3, [r4, #0]
 8017462:	6123      	str	r3, [r4, #16]
 8017464:	2301      	movs	r3, #1
 8017466:	6163      	str	r3, [r4, #20]
 8017468:	b002      	add	sp, #8
 801746a:	bd70      	pop	{r4, r5, r6, pc}
 801746c:	ab01      	add	r3, sp, #4
 801746e:	466a      	mov	r2, sp
 8017470:	f7ff ffca 	bl	8017408 <__swhatbuf_r>
 8017474:	9900      	ldr	r1, [sp, #0]
 8017476:	4605      	mov	r5, r0
 8017478:	4630      	mov	r0, r6
 801747a:	f000 f881 	bl	8017580 <_malloc_r>
 801747e:	b948      	cbnz	r0, 8017494 <__smakebuf_r+0x44>
 8017480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017484:	059a      	lsls	r2, r3, #22
 8017486:	d4ef      	bmi.n	8017468 <__smakebuf_r+0x18>
 8017488:	f023 0303 	bic.w	r3, r3, #3
 801748c:	f043 0302 	orr.w	r3, r3, #2
 8017490:	81a3      	strh	r3, [r4, #12]
 8017492:	e7e3      	b.n	801745c <__smakebuf_r+0xc>
 8017494:	4b0d      	ldr	r3, [pc, #52]	; (80174cc <__smakebuf_r+0x7c>)
 8017496:	62b3      	str	r3, [r6, #40]	; 0x28
 8017498:	89a3      	ldrh	r3, [r4, #12]
 801749a:	6020      	str	r0, [r4, #0]
 801749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174a0:	81a3      	strh	r3, [r4, #12]
 80174a2:	9b00      	ldr	r3, [sp, #0]
 80174a4:	6163      	str	r3, [r4, #20]
 80174a6:	9b01      	ldr	r3, [sp, #4]
 80174a8:	6120      	str	r0, [r4, #16]
 80174aa:	b15b      	cbz	r3, 80174c4 <__smakebuf_r+0x74>
 80174ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174b0:	4630      	mov	r0, r6
 80174b2:	f000 fc3d 	bl	8017d30 <_isatty_r>
 80174b6:	b128      	cbz	r0, 80174c4 <__smakebuf_r+0x74>
 80174b8:	89a3      	ldrh	r3, [r4, #12]
 80174ba:	f023 0303 	bic.w	r3, r3, #3
 80174be:	f043 0301 	orr.w	r3, r3, #1
 80174c2:	81a3      	strh	r3, [r4, #12]
 80174c4:	89a0      	ldrh	r0, [r4, #12]
 80174c6:	4305      	orrs	r5, r0
 80174c8:	81a5      	strh	r5, [r4, #12]
 80174ca:	e7cd      	b.n	8017468 <__smakebuf_r+0x18>
 80174cc:	0801723d 	.word	0x0801723d

080174d0 <malloc>:
 80174d0:	4b02      	ldr	r3, [pc, #8]	; (80174dc <malloc+0xc>)
 80174d2:	4601      	mov	r1, r0
 80174d4:	6818      	ldr	r0, [r3, #0]
 80174d6:	f000 b853 	b.w	8017580 <_malloc_r>
 80174da:	bf00      	nop
 80174dc:	20000018 	.word	0x20000018

080174e0 <_free_r>:
 80174e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174e2:	2900      	cmp	r1, #0
 80174e4:	d048      	beq.n	8017578 <_free_r+0x98>
 80174e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174ea:	9001      	str	r0, [sp, #4]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	f1a1 0404 	sub.w	r4, r1, #4
 80174f2:	bfb8      	it	lt
 80174f4:	18e4      	addlt	r4, r4, r3
 80174f6:	f000 fc3d 	bl	8017d74 <__malloc_lock>
 80174fa:	4a20      	ldr	r2, [pc, #128]	; (801757c <_free_r+0x9c>)
 80174fc:	9801      	ldr	r0, [sp, #4]
 80174fe:	6813      	ldr	r3, [r2, #0]
 8017500:	4615      	mov	r5, r2
 8017502:	b933      	cbnz	r3, 8017512 <_free_r+0x32>
 8017504:	6063      	str	r3, [r4, #4]
 8017506:	6014      	str	r4, [r2, #0]
 8017508:	b003      	add	sp, #12
 801750a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801750e:	f000 bc37 	b.w	8017d80 <__malloc_unlock>
 8017512:	42a3      	cmp	r3, r4
 8017514:	d90b      	bls.n	801752e <_free_r+0x4e>
 8017516:	6821      	ldr	r1, [r4, #0]
 8017518:	1862      	adds	r2, r4, r1
 801751a:	4293      	cmp	r3, r2
 801751c:	bf04      	itt	eq
 801751e:	681a      	ldreq	r2, [r3, #0]
 8017520:	685b      	ldreq	r3, [r3, #4]
 8017522:	6063      	str	r3, [r4, #4]
 8017524:	bf04      	itt	eq
 8017526:	1852      	addeq	r2, r2, r1
 8017528:	6022      	streq	r2, [r4, #0]
 801752a:	602c      	str	r4, [r5, #0]
 801752c:	e7ec      	b.n	8017508 <_free_r+0x28>
 801752e:	461a      	mov	r2, r3
 8017530:	685b      	ldr	r3, [r3, #4]
 8017532:	b10b      	cbz	r3, 8017538 <_free_r+0x58>
 8017534:	42a3      	cmp	r3, r4
 8017536:	d9fa      	bls.n	801752e <_free_r+0x4e>
 8017538:	6811      	ldr	r1, [r2, #0]
 801753a:	1855      	adds	r5, r2, r1
 801753c:	42a5      	cmp	r5, r4
 801753e:	d10b      	bne.n	8017558 <_free_r+0x78>
 8017540:	6824      	ldr	r4, [r4, #0]
 8017542:	4421      	add	r1, r4
 8017544:	1854      	adds	r4, r2, r1
 8017546:	42a3      	cmp	r3, r4
 8017548:	6011      	str	r1, [r2, #0]
 801754a:	d1dd      	bne.n	8017508 <_free_r+0x28>
 801754c:	681c      	ldr	r4, [r3, #0]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	6053      	str	r3, [r2, #4]
 8017552:	4421      	add	r1, r4
 8017554:	6011      	str	r1, [r2, #0]
 8017556:	e7d7      	b.n	8017508 <_free_r+0x28>
 8017558:	d902      	bls.n	8017560 <_free_r+0x80>
 801755a:	230c      	movs	r3, #12
 801755c:	6003      	str	r3, [r0, #0]
 801755e:	e7d3      	b.n	8017508 <_free_r+0x28>
 8017560:	6825      	ldr	r5, [r4, #0]
 8017562:	1961      	adds	r1, r4, r5
 8017564:	428b      	cmp	r3, r1
 8017566:	bf04      	itt	eq
 8017568:	6819      	ldreq	r1, [r3, #0]
 801756a:	685b      	ldreq	r3, [r3, #4]
 801756c:	6063      	str	r3, [r4, #4]
 801756e:	bf04      	itt	eq
 8017570:	1949      	addeq	r1, r1, r5
 8017572:	6021      	streq	r1, [r4, #0]
 8017574:	6054      	str	r4, [r2, #4]
 8017576:	e7c7      	b.n	8017508 <_free_r+0x28>
 8017578:	b003      	add	sp, #12
 801757a:	bd30      	pop	{r4, r5, pc}
 801757c:	2000021c 	.word	0x2000021c

08017580 <_malloc_r>:
 8017580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017582:	1ccd      	adds	r5, r1, #3
 8017584:	f025 0503 	bic.w	r5, r5, #3
 8017588:	3508      	adds	r5, #8
 801758a:	2d0c      	cmp	r5, #12
 801758c:	bf38      	it	cc
 801758e:	250c      	movcc	r5, #12
 8017590:	2d00      	cmp	r5, #0
 8017592:	4606      	mov	r6, r0
 8017594:	db01      	blt.n	801759a <_malloc_r+0x1a>
 8017596:	42a9      	cmp	r1, r5
 8017598:	d903      	bls.n	80175a2 <_malloc_r+0x22>
 801759a:	230c      	movs	r3, #12
 801759c:	6033      	str	r3, [r6, #0]
 801759e:	2000      	movs	r0, #0
 80175a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a2:	f000 fbe7 	bl	8017d74 <__malloc_lock>
 80175a6:	4921      	ldr	r1, [pc, #132]	; (801762c <_malloc_r+0xac>)
 80175a8:	680a      	ldr	r2, [r1, #0]
 80175aa:	4614      	mov	r4, r2
 80175ac:	b99c      	cbnz	r4, 80175d6 <_malloc_r+0x56>
 80175ae:	4f20      	ldr	r7, [pc, #128]	; (8017630 <_malloc_r+0xb0>)
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	b923      	cbnz	r3, 80175be <_malloc_r+0x3e>
 80175b4:	4621      	mov	r1, r4
 80175b6:	4630      	mov	r0, r6
 80175b8:	f000 fb2a 	bl	8017c10 <_sbrk_r>
 80175bc:	6038      	str	r0, [r7, #0]
 80175be:	4629      	mov	r1, r5
 80175c0:	4630      	mov	r0, r6
 80175c2:	f000 fb25 	bl	8017c10 <_sbrk_r>
 80175c6:	1c43      	adds	r3, r0, #1
 80175c8:	d123      	bne.n	8017612 <_malloc_r+0x92>
 80175ca:	230c      	movs	r3, #12
 80175cc:	6033      	str	r3, [r6, #0]
 80175ce:	4630      	mov	r0, r6
 80175d0:	f000 fbd6 	bl	8017d80 <__malloc_unlock>
 80175d4:	e7e3      	b.n	801759e <_malloc_r+0x1e>
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	1b5b      	subs	r3, r3, r5
 80175da:	d417      	bmi.n	801760c <_malloc_r+0x8c>
 80175dc:	2b0b      	cmp	r3, #11
 80175de:	d903      	bls.n	80175e8 <_malloc_r+0x68>
 80175e0:	6023      	str	r3, [r4, #0]
 80175e2:	441c      	add	r4, r3
 80175e4:	6025      	str	r5, [r4, #0]
 80175e6:	e004      	b.n	80175f2 <_malloc_r+0x72>
 80175e8:	6863      	ldr	r3, [r4, #4]
 80175ea:	42a2      	cmp	r2, r4
 80175ec:	bf0c      	ite	eq
 80175ee:	600b      	streq	r3, [r1, #0]
 80175f0:	6053      	strne	r3, [r2, #4]
 80175f2:	4630      	mov	r0, r6
 80175f4:	f000 fbc4 	bl	8017d80 <__malloc_unlock>
 80175f8:	f104 000b 	add.w	r0, r4, #11
 80175fc:	1d23      	adds	r3, r4, #4
 80175fe:	f020 0007 	bic.w	r0, r0, #7
 8017602:	1ac2      	subs	r2, r0, r3
 8017604:	d0cc      	beq.n	80175a0 <_malloc_r+0x20>
 8017606:	1a1b      	subs	r3, r3, r0
 8017608:	50a3      	str	r3, [r4, r2]
 801760a:	e7c9      	b.n	80175a0 <_malloc_r+0x20>
 801760c:	4622      	mov	r2, r4
 801760e:	6864      	ldr	r4, [r4, #4]
 8017610:	e7cc      	b.n	80175ac <_malloc_r+0x2c>
 8017612:	1cc4      	adds	r4, r0, #3
 8017614:	f024 0403 	bic.w	r4, r4, #3
 8017618:	42a0      	cmp	r0, r4
 801761a:	d0e3      	beq.n	80175e4 <_malloc_r+0x64>
 801761c:	1a21      	subs	r1, r4, r0
 801761e:	4630      	mov	r0, r6
 8017620:	f000 faf6 	bl	8017c10 <_sbrk_r>
 8017624:	3001      	adds	r0, #1
 8017626:	d1dd      	bne.n	80175e4 <_malloc_r+0x64>
 8017628:	e7cf      	b.n	80175ca <_malloc_r+0x4a>
 801762a:	bf00      	nop
 801762c:	2000021c 	.word	0x2000021c
 8017630:	20000220 	.word	0x20000220

08017634 <__sfputc_r>:
 8017634:	6893      	ldr	r3, [r2, #8]
 8017636:	3b01      	subs	r3, #1
 8017638:	2b00      	cmp	r3, #0
 801763a:	b410      	push	{r4}
 801763c:	6093      	str	r3, [r2, #8]
 801763e:	da08      	bge.n	8017652 <__sfputc_r+0x1e>
 8017640:	6994      	ldr	r4, [r2, #24]
 8017642:	42a3      	cmp	r3, r4
 8017644:	db01      	blt.n	801764a <__sfputc_r+0x16>
 8017646:	290a      	cmp	r1, #10
 8017648:	d103      	bne.n	8017652 <__sfputc_r+0x1e>
 801764a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801764e:	f7ff bc31 	b.w	8016eb4 <__swbuf_r>
 8017652:	6813      	ldr	r3, [r2, #0]
 8017654:	1c58      	adds	r0, r3, #1
 8017656:	6010      	str	r0, [r2, #0]
 8017658:	7019      	strb	r1, [r3, #0]
 801765a:	4608      	mov	r0, r1
 801765c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017660:	4770      	bx	lr

08017662 <__sfputs_r>:
 8017662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017664:	4606      	mov	r6, r0
 8017666:	460f      	mov	r7, r1
 8017668:	4614      	mov	r4, r2
 801766a:	18d5      	adds	r5, r2, r3
 801766c:	42ac      	cmp	r4, r5
 801766e:	d101      	bne.n	8017674 <__sfputs_r+0x12>
 8017670:	2000      	movs	r0, #0
 8017672:	e007      	b.n	8017684 <__sfputs_r+0x22>
 8017674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017678:	463a      	mov	r2, r7
 801767a:	4630      	mov	r0, r6
 801767c:	f7ff ffda 	bl	8017634 <__sfputc_r>
 8017680:	1c43      	adds	r3, r0, #1
 8017682:	d1f3      	bne.n	801766c <__sfputs_r+0xa>
 8017684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017688 <_vfiprintf_r>:
 8017688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801768c:	460d      	mov	r5, r1
 801768e:	b09d      	sub	sp, #116	; 0x74
 8017690:	4614      	mov	r4, r2
 8017692:	4698      	mov	r8, r3
 8017694:	4606      	mov	r6, r0
 8017696:	b118      	cbz	r0, 80176a0 <_vfiprintf_r+0x18>
 8017698:	6983      	ldr	r3, [r0, #24]
 801769a:	b90b      	cbnz	r3, 80176a0 <_vfiprintf_r+0x18>
 801769c:	f7ff fe02 	bl	80172a4 <__sinit>
 80176a0:	4b89      	ldr	r3, [pc, #548]	; (80178c8 <_vfiprintf_r+0x240>)
 80176a2:	429d      	cmp	r5, r3
 80176a4:	d11b      	bne.n	80176de <_vfiprintf_r+0x56>
 80176a6:	6875      	ldr	r5, [r6, #4]
 80176a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176aa:	07d9      	lsls	r1, r3, #31
 80176ac:	d405      	bmi.n	80176ba <_vfiprintf_r+0x32>
 80176ae:	89ab      	ldrh	r3, [r5, #12]
 80176b0:	059a      	lsls	r2, r3, #22
 80176b2:	d402      	bmi.n	80176ba <_vfiprintf_r+0x32>
 80176b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176b6:	f7ff fea5 	bl	8017404 <__retarget_lock_acquire_recursive>
 80176ba:	89ab      	ldrh	r3, [r5, #12]
 80176bc:	071b      	lsls	r3, r3, #28
 80176be:	d501      	bpl.n	80176c4 <_vfiprintf_r+0x3c>
 80176c0:	692b      	ldr	r3, [r5, #16]
 80176c2:	b9eb      	cbnz	r3, 8017700 <_vfiprintf_r+0x78>
 80176c4:	4629      	mov	r1, r5
 80176c6:	4630      	mov	r0, r6
 80176c8:	f7ff fc46 	bl	8016f58 <__swsetup_r>
 80176cc:	b1c0      	cbz	r0, 8017700 <_vfiprintf_r+0x78>
 80176ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176d0:	07dc      	lsls	r4, r3, #31
 80176d2:	d50e      	bpl.n	80176f2 <_vfiprintf_r+0x6a>
 80176d4:	f04f 30ff 	mov.w	r0, #4294967295
 80176d8:	b01d      	add	sp, #116	; 0x74
 80176da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176de:	4b7b      	ldr	r3, [pc, #492]	; (80178cc <_vfiprintf_r+0x244>)
 80176e0:	429d      	cmp	r5, r3
 80176e2:	d101      	bne.n	80176e8 <_vfiprintf_r+0x60>
 80176e4:	68b5      	ldr	r5, [r6, #8]
 80176e6:	e7df      	b.n	80176a8 <_vfiprintf_r+0x20>
 80176e8:	4b79      	ldr	r3, [pc, #484]	; (80178d0 <_vfiprintf_r+0x248>)
 80176ea:	429d      	cmp	r5, r3
 80176ec:	bf08      	it	eq
 80176ee:	68f5      	ldreq	r5, [r6, #12]
 80176f0:	e7da      	b.n	80176a8 <_vfiprintf_r+0x20>
 80176f2:	89ab      	ldrh	r3, [r5, #12]
 80176f4:	0598      	lsls	r0, r3, #22
 80176f6:	d4ed      	bmi.n	80176d4 <_vfiprintf_r+0x4c>
 80176f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176fa:	f7ff fe84 	bl	8017406 <__retarget_lock_release_recursive>
 80176fe:	e7e9      	b.n	80176d4 <_vfiprintf_r+0x4c>
 8017700:	2300      	movs	r3, #0
 8017702:	9309      	str	r3, [sp, #36]	; 0x24
 8017704:	2320      	movs	r3, #32
 8017706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801770a:	f8cd 800c 	str.w	r8, [sp, #12]
 801770e:	2330      	movs	r3, #48	; 0x30
 8017710:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178d4 <_vfiprintf_r+0x24c>
 8017714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017718:	f04f 0901 	mov.w	r9, #1
 801771c:	4623      	mov	r3, r4
 801771e:	469a      	mov	sl, r3
 8017720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017724:	b10a      	cbz	r2, 801772a <_vfiprintf_r+0xa2>
 8017726:	2a25      	cmp	r2, #37	; 0x25
 8017728:	d1f9      	bne.n	801771e <_vfiprintf_r+0x96>
 801772a:	ebba 0b04 	subs.w	fp, sl, r4
 801772e:	d00b      	beq.n	8017748 <_vfiprintf_r+0xc0>
 8017730:	465b      	mov	r3, fp
 8017732:	4622      	mov	r2, r4
 8017734:	4629      	mov	r1, r5
 8017736:	4630      	mov	r0, r6
 8017738:	f7ff ff93 	bl	8017662 <__sfputs_r>
 801773c:	3001      	adds	r0, #1
 801773e:	f000 80aa 	beq.w	8017896 <_vfiprintf_r+0x20e>
 8017742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017744:	445a      	add	r2, fp
 8017746:	9209      	str	r2, [sp, #36]	; 0x24
 8017748:	f89a 3000 	ldrb.w	r3, [sl]
 801774c:	2b00      	cmp	r3, #0
 801774e:	f000 80a2 	beq.w	8017896 <_vfiprintf_r+0x20e>
 8017752:	2300      	movs	r3, #0
 8017754:	f04f 32ff 	mov.w	r2, #4294967295
 8017758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801775c:	f10a 0a01 	add.w	sl, sl, #1
 8017760:	9304      	str	r3, [sp, #16]
 8017762:	9307      	str	r3, [sp, #28]
 8017764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017768:	931a      	str	r3, [sp, #104]	; 0x68
 801776a:	4654      	mov	r4, sl
 801776c:	2205      	movs	r2, #5
 801776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017772:	4858      	ldr	r0, [pc, #352]	; (80178d4 <_vfiprintf_r+0x24c>)
 8017774:	f7e8 fd64 	bl	8000240 <memchr>
 8017778:	9a04      	ldr	r2, [sp, #16]
 801777a:	b9d8      	cbnz	r0, 80177b4 <_vfiprintf_r+0x12c>
 801777c:	06d1      	lsls	r1, r2, #27
 801777e:	bf44      	itt	mi
 8017780:	2320      	movmi	r3, #32
 8017782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017786:	0713      	lsls	r3, r2, #28
 8017788:	bf44      	itt	mi
 801778a:	232b      	movmi	r3, #43	; 0x2b
 801778c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017790:	f89a 3000 	ldrb.w	r3, [sl]
 8017794:	2b2a      	cmp	r3, #42	; 0x2a
 8017796:	d015      	beq.n	80177c4 <_vfiprintf_r+0x13c>
 8017798:	9a07      	ldr	r2, [sp, #28]
 801779a:	4654      	mov	r4, sl
 801779c:	2000      	movs	r0, #0
 801779e:	f04f 0c0a 	mov.w	ip, #10
 80177a2:	4621      	mov	r1, r4
 80177a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177a8:	3b30      	subs	r3, #48	; 0x30
 80177aa:	2b09      	cmp	r3, #9
 80177ac:	d94e      	bls.n	801784c <_vfiprintf_r+0x1c4>
 80177ae:	b1b0      	cbz	r0, 80177de <_vfiprintf_r+0x156>
 80177b0:	9207      	str	r2, [sp, #28]
 80177b2:	e014      	b.n	80177de <_vfiprintf_r+0x156>
 80177b4:	eba0 0308 	sub.w	r3, r0, r8
 80177b8:	fa09 f303 	lsl.w	r3, r9, r3
 80177bc:	4313      	orrs	r3, r2
 80177be:	9304      	str	r3, [sp, #16]
 80177c0:	46a2      	mov	sl, r4
 80177c2:	e7d2      	b.n	801776a <_vfiprintf_r+0xe2>
 80177c4:	9b03      	ldr	r3, [sp, #12]
 80177c6:	1d19      	adds	r1, r3, #4
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	9103      	str	r1, [sp, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	bfbb      	ittet	lt
 80177d0:	425b      	neglt	r3, r3
 80177d2:	f042 0202 	orrlt.w	r2, r2, #2
 80177d6:	9307      	strge	r3, [sp, #28]
 80177d8:	9307      	strlt	r3, [sp, #28]
 80177da:	bfb8      	it	lt
 80177dc:	9204      	strlt	r2, [sp, #16]
 80177de:	7823      	ldrb	r3, [r4, #0]
 80177e0:	2b2e      	cmp	r3, #46	; 0x2e
 80177e2:	d10c      	bne.n	80177fe <_vfiprintf_r+0x176>
 80177e4:	7863      	ldrb	r3, [r4, #1]
 80177e6:	2b2a      	cmp	r3, #42	; 0x2a
 80177e8:	d135      	bne.n	8017856 <_vfiprintf_r+0x1ce>
 80177ea:	9b03      	ldr	r3, [sp, #12]
 80177ec:	1d1a      	adds	r2, r3, #4
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	9203      	str	r2, [sp, #12]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	bfb8      	it	lt
 80177f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80177fa:	3402      	adds	r4, #2
 80177fc:	9305      	str	r3, [sp, #20]
 80177fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80178e4 <_vfiprintf_r+0x25c>
 8017802:	7821      	ldrb	r1, [r4, #0]
 8017804:	2203      	movs	r2, #3
 8017806:	4650      	mov	r0, sl
 8017808:	f7e8 fd1a 	bl	8000240 <memchr>
 801780c:	b140      	cbz	r0, 8017820 <_vfiprintf_r+0x198>
 801780e:	2340      	movs	r3, #64	; 0x40
 8017810:	eba0 000a 	sub.w	r0, r0, sl
 8017814:	fa03 f000 	lsl.w	r0, r3, r0
 8017818:	9b04      	ldr	r3, [sp, #16]
 801781a:	4303      	orrs	r3, r0
 801781c:	3401      	adds	r4, #1
 801781e:	9304      	str	r3, [sp, #16]
 8017820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017824:	482c      	ldr	r0, [pc, #176]	; (80178d8 <_vfiprintf_r+0x250>)
 8017826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801782a:	2206      	movs	r2, #6
 801782c:	f7e8 fd08 	bl	8000240 <memchr>
 8017830:	2800      	cmp	r0, #0
 8017832:	d03f      	beq.n	80178b4 <_vfiprintf_r+0x22c>
 8017834:	4b29      	ldr	r3, [pc, #164]	; (80178dc <_vfiprintf_r+0x254>)
 8017836:	bb1b      	cbnz	r3, 8017880 <_vfiprintf_r+0x1f8>
 8017838:	9b03      	ldr	r3, [sp, #12]
 801783a:	3307      	adds	r3, #7
 801783c:	f023 0307 	bic.w	r3, r3, #7
 8017840:	3308      	adds	r3, #8
 8017842:	9303      	str	r3, [sp, #12]
 8017844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017846:	443b      	add	r3, r7
 8017848:	9309      	str	r3, [sp, #36]	; 0x24
 801784a:	e767      	b.n	801771c <_vfiprintf_r+0x94>
 801784c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017850:	460c      	mov	r4, r1
 8017852:	2001      	movs	r0, #1
 8017854:	e7a5      	b.n	80177a2 <_vfiprintf_r+0x11a>
 8017856:	2300      	movs	r3, #0
 8017858:	3401      	adds	r4, #1
 801785a:	9305      	str	r3, [sp, #20]
 801785c:	4619      	mov	r1, r3
 801785e:	f04f 0c0a 	mov.w	ip, #10
 8017862:	4620      	mov	r0, r4
 8017864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017868:	3a30      	subs	r2, #48	; 0x30
 801786a:	2a09      	cmp	r2, #9
 801786c:	d903      	bls.n	8017876 <_vfiprintf_r+0x1ee>
 801786e:	2b00      	cmp	r3, #0
 8017870:	d0c5      	beq.n	80177fe <_vfiprintf_r+0x176>
 8017872:	9105      	str	r1, [sp, #20]
 8017874:	e7c3      	b.n	80177fe <_vfiprintf_r+0x176>
 8017876:	fb0c 2101 	mla	r1, ip, r1, r2
 801787a:	4604      	mov	r4, r0
 801787c:	2301      	movs	r3, #1
 801787e:	e7f0      	b.n	8017862 <_vfiprintf_r+0x1da>
 8017880:	ab03      	add	r3, sp, #12
 8017882:	9300      	str	r3, [sp, #0]
 8017884:	462a      	mov	r2, r5
 8017886:	4b16      	ldr	r3, [pc, #88]	; (80178e0 <_vfiprintf_r+0x258>)
 8017888:	a904      	add	r1, sp, #16
 801788a:	4630      	mov	r0, r6
 801788c:	f3af 8000 	nop.w
 8017890:	4607      	mov	r7, r0
 8017892:	1c78      	adds	r0, r7, #1
 8017894:	d1d6      	bne.n	8017844 <_vfiprintf_r+0x1bc>
 8017896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017898:	07d9      	lsls	r1, r3, #31
 801789a:	d405      	bmi.n	80178a8 <_vfiprintf_r+0x220>
 801789c:	89ab      	ldrh	r3, [r5, #12]
 801789e:	059a      	lsls	r2, r3, #22
 80178a0:	d402      	bmi.n	80178a8 <_vfiprintf_r+0x220>
 80178a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178a4:	f7ff fdaf 	bl	8017406 <__retarget_lock_release_recursive>
 80178a8:	89ab      	ldrh	r3, [r5, #12]
 80178aa:	065b      	lsls	r3, r3, #25
 80178ac:	f53f af12 	bmi.w	80176d4 <_vfiprintf_r+0x4c>
 80178b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178b2:	e711      	b.n	80176d8 <_vfiprintf_r+0x50>
 80178b4:	ab03      	add	r3, sp, #12
 80178b6:	9300      	str	r3, [sp, #0]
 80178b8:	462a      	mov	r2, r5
 80178ba:	4b09      	ldr	r3, [pc, #36]	; (80178e0 <_vfiprintf_r+0x258>)
 80178bc:	a904      	add	r1, sp, #16
 80178be:	4630      	mov	r0, r6
 80178c0:	f000 f880 	bl	80179c4 <_printf_i>
 80178c4:	e7e4      	b.n	8017890 <_vfiprintf_r+0x208>
 80178c6:	bf00      	nop
 80178c8:	0801af94 	.word	0x0801af94
 80178cc:	0801afb4 	.word	0x0801afb4
 80178d0:	0801af74 	.word	0x0801af74
 80178d4:	0801afd4 	.word	0x0801afd4
 80178d8:	0801afde 	.word	0x0801afde
 80178dc:	00000000 	.word	0x00000000
 80178e0:	08017663 	.word	0x08017663
 80178e4:	0801afda 	.word	0x0801afda

080178e8 <_printf_common>:
 80178e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178ec:	4616      	mov	r6, r2
 80178ee:	4699      	mov	r9, r3
 80178f0:	688a      	ldr	r2, [r1, #8]
 80178f2:	690b      	ldr	r3, [r1, #16]
 80178f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178f8:	4293      	cmp	r3, r2
 80178fa:	bfb8      	it	lt
 80178fc:	4613      	movlt	r3, r2
 80178fe:	6033      	str	r3, [r6, #0]
 8017900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017904:	4607      	mov	r7, r0
 8017906:	460c      	mov	r4, r1
 8017908:	b10a      	cbz	r2, 801790e <_printf_common+0x26>
 801790a:	3301      	adds	r3, #1
 801790c:	6033      	str	r3, [r6, #0]
 801790e:	6823      	ldr	r3, [r4, #0]
 8017910:	0699      	lsls	r1, r3, #26
 8017912:	bf42      	ittt	mi
 8017914:	6833      	ldrmi	r3, [r6, #0]
 8017916:	3302      	addmi	r3, #2
 8017918:	6033      	strmi	r3, [r6, #0]
 801791a:	6825      	ldr	r5, [r4, #0]
 801791c:	f015 0506 	ands.w	r5, r5, #6
 8017920:	d106      	bne.n	8017930 <_printf_common+0x48>
 8017922:	f104 0a19 	add.w	sl, r4, #25
 8017926:	68e3      	ldr	r3, [r4, #12]
 8017928:	6832      	ldr	r2, [r6, #0]
 801792a:	1a9b      	subs	r3, r3, r2
 801792c:	42ab      	cmp	r3, r5
 801792e:	dc26      	bgt.n	801797e <_printf_common+0x96>
 8017930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017934:	1e13      	subs	r3, r2, #0
 8017936:	6822      	ldr	r2, [r4, #0]
 8017938:	bf18      	it	ne
 801793a:	2301      	movne	r3, #1
 801793c:	0692      	lsls	r2, r2, #26
 801793e:	d42b      	bmi.n	8017998 <_printf_common+0xb0>
 8017940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017944:	4649      	mov	r1, r9
 8017946:	4638      	mov	r0, r7
 8017948:	47c0      	blx	r8
 801794a:	3001      	adds	r0, #1
 801794c:	d01e      	beq.n	801798c <_printf_common+0xa4>
 801794e:	6823      	ldr	r3, [r4, #0]
 8017950:	68e5      	ldr	r5, [r4, #12]
 8017952:	6832      	ldr	r2, [r6, #0]
 8017954:	f003 0306 	and.w	r3, r3, #6
 8017958:	2b04      	cmp	r3, #4
 801795a:	bf08      	it	eq
 801795c:	1aad      	subeq	r5, r5, r2
 801795e:	68a3      	ldr	r3, [r4, #8]
 8017960:	6922      	ldr	r2, [r4, #16]
 8017962:	bf0c      	ite	eq
 8017964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017968:	2500      	movne	r5, #0
 801796a:	4293      	cmp	r3, r2
 801796c:	bfc4      	itt	gt
 801796e:	1a9b      	subgt	r3, r3, r2
 8017970:	18ed      	addgt	r5, r5, r3
 8017972:	2600      	movs	r6, #0
 8017974:	341a      	adds	r4, #26
 8017976:	42b5      	cmp	r5, r6
 8017978:	d11a      	bne.n	80179b0 <_printf_common+0xc8>
 801797a:	2000      	movs	r0, #0
 801797c:	e008      	b.n	8017990 <_printf_common+0xa8>
 801797e:	2301      	movs	r3, #1
 8017980:	4652      	mov	r2, sl
 8017982:	4649      	mov	r1, r9
 8017984:	4638      	mov	r0, r7
 8017986:	47c0      	blx	r8
 8017988:	3001      	adds	r0, #1
 801798a:	d103      	bne.n	8017994 <_printf_common+0xac>
 801798c:	f04f 30ff 	mov.w	r0, #4294967295
 8017990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017994:	3501      	adds	r5, #1
 8017996:	e7c6      	b.n	8017926 <_printf_common+0x3e>
 8017998:	18e1      	adds	r1, r4, r3
 801799a:	1c5a      	adds	r2, r3, #1
 801799c:	2030      	movs	r0, #48	; 0x30
 801799e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179a2:	4422      	add	r2, r4
 80179a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179ac:	3302      	adds	r3, #2
 80179ae:	e7c7      	b.n	8017940 <_printf_common+0x58>
 80179b0:	2301      	movs	r3, #1
 80179b2:	4622      	mov	r2, r4
 80179b4:	4649      	mov	r1, r9
 80179b6:	4638      	mov	r0, r7
 80179b8:	47c0      	blx	r8
 80179ba:	3001      	adds	r0, #1
 80179bc:	d0e6      	beq.n	801798c <_printf_common+0xa4>
 80179be:	3601      	adds	r6, #1
 80179c0:	e7d9      	b.n	8017976 <_printf_common+0x8e>
	...

080179c4 <_printf_i>:
 80179c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179c8:	460c      	mov	r4, r1
 80179ca:	4691      	mov	r9, r2
 80179cc:	7e27      	ldrb	r7, [r4, #24]
 80179ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179d0:	2f78      	cmp	r7, #120	; 0x78
 80179d2:	4680      	mov	r8, r0
 80179d4:	469a      	mov	sl, r3
 80179d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179da:	d807      	bhi.n	80179ec <_printf_i+0x28>
 80179dc:	2f62      	cmp	r7, #98	; 0x62
 80179de:	d80a      	bhi.n	80179f6 <_printf_i+0x32>
 80179e0:	2f00      	cmp	r7, #0
 80179e2:	f000 80d8 	beq.w	8017b96 <_printf_i+0x1d2>
 80179e6:	2f58      	cmp	r7, #88	; 0x58
 80179e8:	f000 80a3 	beq.w	8017b32 <_printf_i+0x16e>
 80179ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80179f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80179f4:	e03a      	b.n	8017a6c <_printf_i+0xa8>
 80179f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179fa:	2b15      	cmp	r3, #21
 80179fc:	d8f6      	bhi.n	80179ec <_printf_i+0x28>
 80179fe:	a001      	add	r0, pc, #4	; (adr r0, 8017a04 <_printf_i+0x40>)
 8017a00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017a04:	08017a5d 	.word	0x08017a5d
 8017a08:	08017a71 	.word	0x08017a71
 8017a0c:	080179ed 	.word	0x080179ed
 8017a10:	080179ed 	.word	0x080179ed
 8017a14:	080179ed 	.word	0x080179ed
 8017a18:	080179ed 	.word	0x080179ed
 8017a1c:	08017a71 	.word	0x08017a71
 8017a20:	080179ed 	.word	0x080179ed
 8017a24:	080179ed 	.word	0x080179ed
 8017a28:	080179ed 	.word	0x080179ed
 8017a2c:	080179ed 	.word	0x080179ed
 8017a30:	08017b7d 	.word	0x08017b7d
 8017a34:	08017aa1 	.word	0x08017aa1
 8017a38:	08017b5f 	.word	0x08017b5f
 8017a3c:	080179ed 	.word	0x080179ed
 8017a40:	080179ed 	.word	0x080179ed
 8017a44:	08017b9f 	.word	0x08017b9f
 8017a48:	080179ed 	.word	0x080179ed
 8017a4c:	08017aa1 	.word	0x08017aa1
 8017a50:	080179ed 	.word	0x080179ed
 8017a54:	080179ed 	.word	0x080179ed
 8017a58:	08017b67 	.word	0x08017b67
 8017a5c:	680b      	ldr	r3, [r1, #0]
 8017a5e:	1d1a      	adds	r2, r3, #4
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	600a      	str	r2, [r1, #0]
 8017a64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	e0a3      	b.n	8017bb8 <_printf_i+0x1f4>
 8017a70:	6825      	ldr	r5, [r4, #0]
 8017a72:	6808      	ldr	r0, [r1, #0]
 8017a74:	062e      	lsls	r6, r5, #24
 8017a76:	f100 0304 	add.w	r3, r0, #4
 8017a7a:	d50a      	bpl.n	8017a92 <_printf_i+0xce>
 8017a7c:	6805      	ldr	r5, [r0, #0]
 8017a7e:	600b      	str	r3, [r1, #0]
 8017a80:	2d00      	cmp	r5, #0
 8017a82:	da03      	bge.n	8017a8c <_printf_i+0xc8>
 8017a84:	232d      	movs	r3, #45	; 0x2d
 8017a86:	426d      	negs	r5, r5
 8017a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a8c:	485e      	ldr	r0, [pc, #376]	; (8017c08 <_printf_i+0x244>)
 8017a8e:	230a      	movs	r3, #10
 8017a90:	e019      	b.n	8017ac6 <_printf_i+0x102>
 8017a92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017a96:	6805      	ldr	r5, [r0, #0]
 8017a98:	600b      	str	r3, [r1, #0]
 8017a9a:	bf18      	it	ne
 8017a9c:	b22d      	sxthne	r5, r5
 8017a9e:	e7ef      	b.n	8017a80 <_printf_i+0xbc>
 8017aa0:	680b      	ldr	r3, [r1, #0]
 8017aa2:	6825      	ldr	r5, [r4, #0]
 8017aa4:	1d18      	adds	r0, r3, #4
 8017aa6:	6008      	str	r0, [r1, #0]
 8017aa8:	0628      	lsls	r0, r5, #24
 8017aaa:	d501      	bpl.n	8017ab0 <_printf_i+0xec>
 8017aac:	681d      	ldr	r5, [r3, #0]
 8017aae:	e002      	b.n	8017ab6 <_printf_i+0xf2>
 8017ab0:	0669      	lsls	r1, r5, #25
 8017ab2:	d5fb      	bpl.n	8017aac <_printf_i+0xe8>
 8017ab4:	881d      	ldrh	r5, [r3, #0]
 8017ab6:	4854      	ldr	r0, [pc, #336]	; (8017c08 <_printf_i+0x244>)
 8017ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8017aba:	bf0c      	ite	eq
 8017abc:	2308      	moveq	r3, #8
 8017abe:	230a      	movne	r3, #10
 8017ac0:	2100      	movs	r1, #0
 8017ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017ac6:	6866      	ldr	r6, [r4, #4]
 8017ac8:	60a6      	str	r6, [r4, #8]
 8017aca:	2e00      	cmp	r6, #0
 8017acc:	bfa2      	ittt	ge
 8017ace:	6821      	ldrge	r1, [r4, #0]
 8017ad0:	f021 0104 	bicge.w	r1, r1, #4
 8017ad4:	6021      	strge	r1, [r4, #0]
 8017ad6:	b90d      	cbnz	r5, 8017adc <_printf_i+0x118>
 8017ad8:	2e00      	cmp	r6, #0
 8017ada:	d04d      	beq.n	8017b78 <_printf_i+0x1b4>
 8017adc:	4616      	mov	r6, r2
 8017ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8017ae6:	5dc7      	ldrb	r7, [r0, r7]
 8017ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017aec:	462f      	mov	r7, r5
 8017aee:	42bb      	cmp	r3, r7
 8017af0:	460d      	mov	r5, r1
 8017af2:	d9f4      	bls.n	8017ade <_printf_i+0x11a>
 8017af4:	2b08      	cmp	r3, #8
 8017af6:	d10b      	bne.n	8017b10 <_printf_i+0x14c>
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	07df      	lsls	r7, r3, #31
 8017afc:	d508      	bpl.n	8017b10 <_printf_i+0x14c>
 8017afe:	6923      	ldr	r3, [r4, #16]
 8017b00:	6861      	ldr	r1, [r4, #4]
 8017b02:	4299      	cmp	r1, r3
 8017b04:	bfde      	ittt	le
 8017b06:	2330      	movle	r3, #48	; 0x30
 8017b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b10:	1b92      	subs	r2, r2, r6
 8017b12:	6122      	str	r2, [r4, #16]
 8017b14:	f8cd a000 	str.w	sl, [sp]
 8017b18:	464b      	mov	r3, r9
 8017b1a:	aa03      	add	r2, sp, #12
 8017b1c:	4621      	mov	r1, r4
 8017b1e:	4640      	mov	r0, r8
 8017b20:	f7ff fee2 	bl	80178e8 <_printf_common>
 8017b24:	3001      	adds	r0, #1
 8017b26:	d14c      	bne.n	8017bc2 <_printf_i+0x1fe>
 8017b28:	f04f 30ff 	mov.w	r0, #4294967295
 8017b2c:	b004      	add	sp, #16
 8017b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b32:	4835      	ldr	r0, [pc, #212]	; (8017c08 <_printf_i+0x244>)
 8017b34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b38:	6823      	ldr	r3, [r4, #0]
 8017b3a:	680e      	ldr	r6, [r1, #0]
 8017b3c:	061f      	lsls	r7, r3, #24
 8017b3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017b42:	600e      	str	r6, [r1, #0]
 8017b44:	d514      	bpl.n	8017b70 <_printf_i+0x1ac>
 8017b46:	07d9      	lsls	r1, r3, #31
 8017b48:	bf44      	itt	mi
 8017b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8017b4e:	6023      	strmi	r3, [r4, #0]
 8017b50:	b91d      	cbnz	r5, 8017b5a <_printf_i+0x196>
 8017b52:	6823      	ldr	r3, [r4, #0]
 8017b54:	f023 0320 	bic.w	r3, r3, #32
 8017b58:	6023      	str	r3, [r4, #0]
 8017b5a:	2310      	movs	r3, #16
 8017b5c:	e7b0      	b.n	8017ac0 <_printf_i+0xfc>
 8017b5e:	6823      	ldr	r3, [r4, #0]
 8017b60:	f043 0320 	orr.w	r3, r3, #32
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	2378      	movs	r3, #120	; 0x78
 8017b68:	4828      	ldr	r0, [pc, #160]	; (8017c0c <_printf_i+0x248>)
 8017b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b6e:	e7e3      	b.n	8017b38 <_printf_i+0x174>
 8017b70:	065e      	lsls	r6, r3, #25
 8017b72:	bf48      	it	mi
 8017b74:	b2ad      	uxthmi	r5, r5
 8017b76:	e7e6      	b.n	8017b46 <_printf_i+0x182>
 8017b78:	4616      	mov	r6, r2
 8017b7a:	e7bb      	b.n	8017af4 <_printf_i+0x130>
 8017b7c:	680b      	ldr	r3, [r1, #0]
 8017b7e:	6826      	ldr	r6, [r4, #0]
 8017b80:	6960      	ldr	r0, [r4, #20]
 8017b82:	1d1d      	adds	r5, r3, #4
 8017b84:	600d      	str	r5, [r1, #0]
 8017b86:	0635      	lsls	r5, r6, #24
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	d501      	bpl.n	8017b90 <_printf_i+0x1cc>
 8017b8c:	6018      	str	r0, [r3, #0]
 8017b8e:	e002      	b.n	8017b96 <_printf_i+0x1d2>
 8017b90:	0671      	lsls	r1, r6, #25
 8017b92:	d5fb      	bpl.n	8017b8c <_printf_i+0x1c8>
 8017b94:	8018      	strh	r0, [r3, #0]
 8017b96:	2300      	movs	r3, #0
 8017b98:	6123      	str	r3, [r4, #16]
 8017b9a:	4616      	mov	r6, r2
 8017b9c:	e7ba      	b.n	8017b14 <_printf_i+0x150>
 8017b9e:	680b      	ldr	r3, [r1, #0]
 8017ba0:	1d1a      	adds	r2, r3, #4
 8017ba2:	600a      	str	r2, [r1, #0]
 8017ba4:	681e      	ldr	r6, [r3, #0]
 8017ba6:	6862      	ldr	r2, [r4, #4]
 8017ba8:	2100      	movs	r1, #0
 8017baa:	4630      	mov	r0, r6
 8017bac:	f7e8 fb48 	bl	8000240 <memchr>
 8017bb0:	b108      	cbz	r0, 8017bb6 <_printf_i+0x1f2>
 8017bb2:	1b80      	subs	r0, r0, r6
 8017bb4:	6060      	str	r0, [r4, #4]
 8017bb6:	6863      	ldr	r3, [r4, #4]
 8017bb8:	6123      	str	r3, [r4, #16]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bc0:	e7a8      	b.n	8017b14 <_printf_i+0x150>
 8017bc2:	6923      	ldr	r3, [r4, #16]
 8017bc4:	4632      	mov	r2, r6
 8017bc6:	4649      	mov	r1, r9
 8017bc8:	4640      	mov	r0, r8
 8017bca:	47d0      	blx	sl
 8017bcc:	3001      	adds	r0, #1
 8017bce:	d0ab      	beq.n	8017b28 <_printf_i+0x164>
 8017bd0:	6823      	ldr	r3, [r4, #0]
 8017bd2:	079b      	lsls	r3, r3, #30
 8017bd4:	d413      	bmi.n	8017bfe <_printf_i+0x23a>
 8017bd6:	68e0      	ldr	r0, [r4, #12]
 8017bd8:	9b03      	ldr	r3, [sp, #12]
 8017bda:	4298      	cmp	r0, r3
 8017bdc:	bfb8      	it	lt
 8017bde:	4618      	movlt	r0, r3
 8017be0:	e7a4      	b.n	8017b2c <_printf_i+0x168>
 8017be2:	2301      	movs	r3, #1
 8017be4:	4632      	mov	r2, r6
 8017be6:	4649      	mov	r1, r9
 8017be8:	4640      	mov	r0, r8
 8017bea:	47d0      	blx	sl
 8017bec:	3001      	adds	r0, #1
 8017bee:	d09b      	beq.n	8017b28 <_printf_i+0x164>
 8017bf0:	3501      	adds	r5, #1
 8017bf2:	68e3      	ldr	r3, [r4, #12]
 8017bf4:	9903      	ldr	r1, [sp, #12]
 8017bf6:	1a5b      	subs	r3, r3, r1
 8017bf8:	42ab      	cmp	r3, r5
 8017bfa:	dcf2      	bgt.n	8017be2 <_printf_i+0x21e>
 8017bfc:	e7eb      	b.n	8017bd6 <_printf_i+0x212>
 8017bfe:	2500      	movs	r5, #0
 8017c00:	f104 0619 	add.w	r6, r4, #25
 8017c04:	e7f5      	b.n	8017bf2 <_printf_i+0x22e>
 8017c06:	bf00      	nop
 8017c08:	0801afe5 	.word	0x0801afe5
 8017c0c:	0801aff6 	.word	0x0801aff6

08017c10 <_sbrk_r>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	4d06      	ldr	r5, [pc, #24]	; (8017c2c <_sbrk_r+0x1c>)
 8017c14:	2300      	movs	r3, #0
 8017c16:	4604      	mov	r4, r0
 8017c18:	4608      	mov	r0, r1
 8017c1a:	602b      	str	r3, [r5, #0]
 8017c1c:	f7e8 fff4 	bl	8000c08 <_sbrk>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d102      	bne.n	8017c2a <_sbrk_r+0x1a>
 8017c24:	682b      	ldr	r3, [r5, #0]
 8017c26:	b103      	cbz	r3, 8017c2a <_sbrk_r+0x1a>
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	bd38      	pop	{r3, r4, r5, pc}
 8017c2c:	200069a4 	.word	0x200069a4

08017c30 <__sread>:
 8017c30:	b510      	push	{r4, lr}
 8017c32:	460c      	mov	r4, r1
 8017c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c38:	f000 f8a8 	bl	8017d8c <_read_r>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	bfab      	itete	ge
 8017c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c42:	89a3      	ldrhlt	r3, [r4, #12]
 8017c44:	181b      	addge	r3, r3, r0
 8017c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c4a:	bfac      	ite	ge
 8017c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c4e:	81a3      	strhlt	r3, [r4, #12]
 8017c50:	bd10      	pop	{r4, pc}

08017c52 <__swrite>:
 8017c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c56:	461f      	mov	r7, r3
 8017c58:	898b      	ldrh	r3, [r1, #12]
 8017c5a:	05db      	lsls	r3, r3, #23
 8017c5c:	4605      	mov	r5, r0
 8017c5e:	460c      	mov	r4, r1
 8017c60:	4616      	mov	r6, r2
 8017c62:	d505      	bpl.n	8017c70 <__swrite+0x1e>
 8017c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c68:	2302      	movs	r3, #2
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	f000 f870 	bl	8017d50 <_lseek_r>
 8017c70:	89a3      	ldrh	r3, [r4, #12]
 8017c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c7a:	81a3      	strh	r3, [r4, #12]
 8017c7c:	4632      	mov	r2, r6
 8017c7e:	463b      	mov	r3, r7
 8017c80:	4628      	mov	r0, r5
 8017c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c86:	f000 b817 	b.w	8017cb8 <_write_r>

08017c8a <__sseek>:
 8017c8a:	b510      	push	{r4, lr}
 8017c8c:	460c      	mov	r4, r1
 8017c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c92:	f000 f85d 	bl	8017d50 <_lseek_r>
 8017c96:	1c43      	adds	r3, r0, #1
 8017c98:	89a3      	ldrh	r3, [r4, #12]
 8017c9a:	bf15      	itete	ne
 8017c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ca6:	81a3      	strheq	r3, [r4, #12]
 8017ca8:	bf18      	it	ne
 8017caa:	81a3      	strhne	r3, [r4, #12]
 8017cac:	bd10      	pop	{r4, pc}

08017cae <__sclose>:
 8017cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb2:	f000 b81b 	b.w	8017cec <_close_r>
	...

08017cb8 <_write_r>:
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4d07      	ldr	r5, [pc, #28]	; (8017cd8 <_write_r+0x20>)
 8017cbc:	4604      	mov	r4, r0
 8017cbe:	4608      	mov	r0, r1
 8017cc0:	4611      	mov	r1, r2
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	602a      	str	r2, [r5, #0]
 8017cc6:	461a      	mov	r2, r3
 8017cc8:	f7e8 feb4 	bl	8000a34 <_write>
 8017ccc:	1c43      	adds	r3, r0, #1
 8017cce:	d102      	bne.n	8017cd6 <_write_r+0x1e>
 8017cd0:	682b      	ldr	r3, [r5, #0]
 8017cd2:	b103      	cbz	r3, 8017cd6 <_write_r+0x1e>
 8017cd4:	6023      	str	r3, [r4, #0]
 8017cd6:	bd38      	pop	{r3, r4, r5, pc}
 8017cd8:	200069a4 	.word	0x200069a4

08017cdc <abort>:
 8017cdc:	b508      	push	{r3, lr}
 8017cde:	2006      	movs	r0, #6
 8017ce0:	f000 f88e 	bl	8017e00 <raise>
 8017ce4:	2001      	movs	r0, #1
 8017ce6:	f7e8 ff33 	bl	8000b50 <_exit>
	...

08017cec <_close_r>:
 8017cec:	b538      	push	{r3, r4, r5, lr}
 8017cee:	4d06      	ldr	r5, [pc, #24]	; (8017d08 <_close_r+0x1c>)
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	4608      	mov	r0, r1
 8017cf6:	602b      	str	r3, [r5, #0]
 8017cf8:	f7e8 ff51 	bl	8000b9e <_close>
 8017cfc:	1c43      	adds	r3, r0, #1
 8017cfe:	d102      	bne.n	8017d06 <_close_r+0x1a>
 8017d00:	682b      	ldr	r3, [r5, #0]
 8017d02:	b103      	cbz	r3, 8017d06 <_close_r+0x1a>
 8017d04:	6023      	str	r3, [r4, #0]
 8017d06:	bd38      	pop	{r3, r4, r5, pc}
 8017d08:	200069a4 	.word	0x200069a4

08017d0c <_fstat_r>:
 8017d0c:	b538      	push	{r3, r4, r5, lr}
 8017d0e:	4d07      	ldr	r5, [pc, #28]	; (8017d2c <_fstat_r+0x20>)
 8017d10:	2300      	movs	r3, #0
 8017d12:	4604      	mov	r4, r0
 8017d14:	4608      	mov	r0, r1
 8017d16:	4611      	mov	r1, r2
 8017d18:	602b      	str	r3, [r5, #0]
 8017d1a:	f7e8 ff4c 	bl	8000bb6 <_fstat>
 8017d1e:	1c43      	adds	r3, r0, #1
 8017d20:	d102      	bne.n	8017d28 <_fstat_r+0x1c>
 8017d22:	682b      	ldr	r3, [r5, #0]
 8017d24:	b103      	cbz	r3, 8017d28 <_fstat_r+0x1c>
 8017d26:	6023      	str	r3, [r4, #0]
 8017d28:	bd38      	pop	{r3, r4, r5, pc}
 8017d2a:	bf00      	nop
 8017d2c:	200069a4 	.word	0x200069a4

08017d30 <_isatty_r>:
 8017d30:	b538      	push	{r3, r4, r5, lr}
 8017d32:	4d06      	ldr	r5, [pc, #24]	; (8017d4c <_isatty_r+0x1c>)
 8017d34:	2300      	movs	r3, #0
 8017d36:	4604      	mov	r4, r0
 8017d38:	4608      	mov	r0, r1
 8017d3a:	602b      	str	r3, [r5, #0]
 8017d3c:	f7e8 ff4b 	bl	8000bd6 <_isatty>
 8017d40:	1c43      	adds	r3, r0, #1
 8017d42:	d102      	bne.n	8017d4a <_isatty_r+0x1a>
 8017d44:	682b      	ldr	r3, [r5, #0]
 8017d46:	b103      	cbz	r3, 8017d4a <_isatty_r+0x1a>
 8017d48:	6023      	str	r3, [r4, #0]
 8017d4a:	bd38      	pop	{r3, r4, r5, pc}
 8017d4c:	200069a4 	.word	0x200069a4

08017d50 <_lseek_r>:
 8017d50:	b538      	push	{r3, r4, r5, lr}
 8017d52:	4d07      	ldr	r5, [pc, #28]	; (8017d70 <_lseek_r+0x20>)
 8017d54:	4604      	mov	r4, r0
 8017d56:	4608      	mov	r0, r1
 8017d58:	4611      	mov	r1, r2
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	602a      	str	r2, [r5, #0]
 8017d5e:	461a      	mov	r2, r3
 8017d60:	f7e8 ff44 	bl	8000bec <_lseek>
 8017d64:	1c43      	adds	r3, r0, #1
 8017d66:	d102      	bne.n	8017d6e <_lseek_r+0x1e>
 8017d68:	682b      	ldr	r3, [r5, #0]
 8017d6a:	b103      	cbz	r3, 8017d6e <_lseek_r+0x1e>
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	bd38      	pop	{r3, r4, r5, pc}
 8017d70:	200069a4 	.word	0x200069a4

08017d74 <__malloc_lock>:
 8017d74:	4801      	ldr	r0, [pc, #4]	; (8017d7c <__malloc_lock+0x8>)
 8017d76:	f7ff bb45 	b.w	8017404 <__retarget_lock_acquire_recursive>
 8017d7a:	bf00      	nop
 8017d7c:	200069ac 	.word	0x200069ac

08017d80 <__malloc_unlock>:
 8017d80:	4801      	ldr	r0, [pc, #4]	; (8017d88 <__malloc_unlock+0x8>)
 8017d82:	f7ff bb40 	b.w	8017406 <__retarget_lock_release_recursive>
 8017d86:	bf00      	nop
 8017d88:	200069ac 	.word	0x200069ac

08017d8c <_read_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4d07      	ldr	r5, [pc, #28]	; (8017dac <_read_r+0x20>)
 8017d90:	4604      	mov	r4, r0
 8017d92:	4608      	mov	r0, r1
 8017d94:	4611      	mov	r1, r2
 8017d96:	2200      	movs	r2, #0
 8017d98:	602a      	str	r2, [r5, #0]
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	f7e8 fee2 	bl	8000b64 <_read>
 8017da0:	1c43      	adds	r3, r0, #1
 8017da2:	d102      	bne.n	8017daa <_read_r+0x1e>
 8017da4:	682b      	ldr	r3, [r5, #0]
 8017da6:	b103      	cbz	r3, 8017daa <_read_r+0x1e>
 8017da8:	6023      	str	r3, [r4, #0]
 8017daa:	bd38      	pop	{r3, r4, r5, pc}
 8017dac:	200069a4 	.word	0x200069a4

08017db0 <_raise_r>:
 8017db0:	291f      	cmp	r1, #31
 8017db2:	b538      	push	{r3, r4, r5, lr}
 8017db4:	4604      	mov	r4, r0
 8017db6:	460d      	mov	r5, r1
 8017db8:	d904      	bls.n	8017dc4 <_raise_r+0x14>
 8017dba:	2316      	movs	r3, #22
 8017dbc:	6003      	str	r3, [r0, #0]
 8017dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017dc6:	b112      	cbz	r2, 8017dce <_raise_r+0x1e>
 8017dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dcc:	b94b      	cbnz	r3, 8017de2 <_raise_r+0x32>
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f000 f830 	bl	8017e34 <_getpid_r>
 8017dd4:	462a      	mov	r2, r5
 8017dd6:	4601      	mov	r1, r0
 8017dd8:	4620      	mov	r0, r4
 8017dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dde:	f000 b817 	b.w	8017e10 <_kill_r>
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d00a      	beq.n	8017dfc <_raise_r+0x4c>
 8017de6:	1c59      	adds	r1, r3, #1
 8017de8:	d103      	bne.n	8017df2 <_raise_r+0x42>
 8017dea:	2316      	movs	r3, #22
 8017dec:	6003      	str	r3, [r0, #0]
 8017dee:	2001      	movs	r0, #1
 8017df0:	e7e7      	b.n	8017dc2 <_raise_r+0x12>
 8017df2:	2400      	movs	r4, #0
 8017df4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017df8:	4628      	mov	r0, r5
 8017dfa:	4798      	blx	r3
 8017dfc:	2000      	movs	r0, #0
 8017dfe:	e7e0      	b.n	8017dc2 <_raise_r+0x12>

08017e00 <raise>:
 8017e00:	4b02      	ldr	r3, [pc, #8]	; (8017e0c <raise+0xc>)
 8017e02:	4601      	mov	r1, r0
 8017e04:	6818      	ldr	r0, [r3, #0]
 8017e06:	f7ff bfd3 	b.w	8017db0 <_raise_r>
 8017e0a:	bf00      	nop
 8017e0c:	20000018 	.word	0x20000018

08017e10 <_kill_r>:
 8017e10:	b538      	push	{r3, r4, r5, lr}
 8017e12:	4d07      	ldr	r5, [pc, #28]	; (8017e30 <_kill_r+0x20>)
 8017e14:	2300      	movs	r3, #0
 8017e16:	4604      	mov	r4, r0
 8017e18:	4608      	mov	r0, r1
 8017e1a:	4611      	mov	r1, r2
 8017e1c:	602b      	str	r3, [r5, #0]
 8017e1e:	f7e8 fe85 	bl	8000b2c <_kill>
 8017e22:	1c43      	adds	r3, r0, #1
 8017e24:	d102      	bne.n	8017e2c <_kill_r+0x1c>
 8017e26:	682b      	ldr	r3, [r5, #0]
 8017e28:	b103      	cbz	r3, 8017e2c <_kill_r+0x1c>
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	bd38      	pop	{r3, r4, r5, pc}
 8017e2e:	bf00      	nop
 8017e30:	200069a4 	.word	0x200069a4

08017e34 <_getpid_r>:
 8017e34:	f7e8 be72 	b.w	8000b1c <_getpid>

08017e38 <_init>:
 8017e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e3a:	bf00      	nop
 8017e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e3e:	bc08      	pop	{r3}
 8017e40:	469e      	mov	lr, r3
 8017e42:	4770      	bx	lr

08017e44 <_fini>:
 8017e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e46:	bf00      	nop
 8017e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e4a:	bc08      	pop	{r3}
 8017e4c:	469e      	mov	lr, r3
 8017e4e:	4770      	bx	lr
