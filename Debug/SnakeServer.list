
SnakeServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca4  08010f78  08010f78  00020f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c1c  08013c1c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013c1c  08013c1c  00023c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c24  08013c24  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c24  08013c24  00023c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c28  08013c28  00023c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013c2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068c8  20000078  08013ca4  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006940  08013ca4  00036940  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003233a  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061ac  00000000  00000000  000623e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00068590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  00069a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033eed  00000000  00000000  0006ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026c4d  00000000  00000000  0009ed15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb80  00000000  00000000  000c5962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d14e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  001d1538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08010f60 	.word	0x08010f60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08010f60 	.word	0x08010f60

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b37      	ldr	r3, [pc, #220]	; (80006cc <MX_GPIO_Init+0xf4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a36      	ldr	r2, [pc, #216]	; (80006cc <MX_GPIO_Init+0xf4>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <MX_GPIO_Init+0xf4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <MX_GPIO_Init+0xf4>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_GPIO_Init+0xf4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <MX_GPIO_Init+0xf4>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_GPIO_Init+0xf4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_GPIO_Init+0xf4>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_GPIO_Init+0xf4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <MX_GPIO_Init+0xf8>)
 8000686:	f001 ff73 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_GPIO_Init+0xfc>)
 80006a2:	f001 fdb9 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0xf8>)
 80006c0:	f001 fdaa 	bl	8002218 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fa73 	bl	8000bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f80c 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f7ff ff78 	bl	80005d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e8:	f000 f9ac 	bl	8000a44 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006ec:	f004 f932 	bl	8004954 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80006f0:	f00f f968 	bl	800f9c4 <tcp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80006f4:	f004 fa60 	bl	8004bb8 <MX_LWIP_Process>
 80006f8:	e7fc      	b.n	80006f4 <main+0x1c>
	...

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00f fb90 	bl	800fe30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000720:	f001 ff40 	bl	80025a4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <SystemClock_Config+0xd8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xdc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xdc>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800076c:	23d8      	movs	r3, #216	; 0xd8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ff6f 	bl	8002664 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f83c 	bl	8000808 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f001 ff18 	bl	80025c4 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 f835 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2107      	movs	r1, #7
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f9ff 	bl	8002bc0 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c8:	f000 f81e 	bl	8000808 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <_write>:

/* USER CODE BEGIN 4 */
/*printf <=> uart redirection */
int _write(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <_write+0x28>)
 80007f4:	f003 f85c 	bl	80038b0 <HAL_UART_Transmit>
	return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000214 	.word	0x20000214

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f9ca 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART3_IRQHandler+0x10>)
 80008b6:	f003 f88f 	bl	80039d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000214 	.word	0x20000214

080008c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return 1;
 80008c8:	2301      	movs	r3, #1
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_kill>:

int _kill(int pid, int sig)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <_kill+0x20>)
 80008e0:	2216      	movs	r2, #22
 80008e2:	601a      	str	r2, [r3, #0]
	return -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20006930 	.word	0x20006930

080008f8 <_exit>:

void _exit (int status)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffe5 	bl	80008d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800090a:	e7fe      	b.n	800090a <_exit+0x12>

0800090c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e00a      	b.n	8000934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800091e:	f3af 8000 	nop.w
 8000922:	4601      	mov	r1, r0
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	b2ca      	uxtb	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf0      	blt.n	800091e <_read+0x12>
	}

return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d205      	bcs.n	80009ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <_sbrk+0x6c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	371c      	adds	r7, #28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20080000 	.word	0x20080000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000094 	.word	0x20000094
 8000a18:	20006940 	.word	0x20006940
 8000a1c:	20006930 	.word	0x20006930

08000a20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART3_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a50:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a88:	f002 fec4 	bl	8003814 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f7ff feb9 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000214 	.word	0x20000214
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ae      	sub	sp, #184	; 0xb8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2290      	movs	r2, #144	; 0x90
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00f f9b3 	bl	800fe30 <memset>
  if(uartHandle->Instance==USART3)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_UART_MspInit+0xc4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d144      	bne.n	8000b5e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fa6e 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aee:	f7ff fe8b 	bl	8000808 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0xc8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_UART_MspInit+0xcc>)
 8000b4a:	f001 fb65 	bl	8002218 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2027      	movs	r0, #39	; 0x27
 8000b54:	f000 f993 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b58:	2027      	movs	r0, #39	; 0x27
 8000b5a:	f000 f9ac 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	37b8      	adds	r7, #184	; 0xb8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40004800 	.word	0x40004800
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9e:	f7ff ff3f 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f00f f905 	bl	800fdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fd97 	bl	80006d8 <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bb8:	08013c2c 	.word	0x08013c2c
  ldr r2, =_sbss
 8000bbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bc0:	20006940 	.word	0x20006940

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>

08000bc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f94c 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f805 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd6:	f7ff fe1d 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f967 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 f92f 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000298 	.word	0x20000298

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000298 	.word	0x20000298

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff feb6 	bl	8000c68 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d008      	beq.n	8000f1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e052      	b.n	8000fc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0216 	bic.w	r2, r2, #22
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <HAL_DMA_Abort+0x62>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0208 	bic.w	r2, r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6c:	e013      	b.n	8000f96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f6e:	f7ff fe7b 	bl	8000c68 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d90c      	bls.n	8000f96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2220      	movs	r2, #32
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e015      	b.n	8000fc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e4      	bne.n	8000f6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	223f      	movs	r2, #63	; 0x3f
 8000faa:	409a      	lsls	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d004      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00c      	b.n	8001002 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2205      	movs	r2, #5
 8000fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001020:	4ba9      	ldr	r3, [pc, #676]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001022:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e181      	b.n	800133a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f003 fdc0 	bl	8004bd0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b9e      	ldr	r3, [pc, #632]	; (80012cc <HAL_ETH_Init+0x2bc>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a9d      	ldr	r2, [pc, #628]	; (80012cc <HAL_ETH_Init+0x2bc>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
 800105c:	4b9b      	ldr	r3, [pc, #620]	; (80012cc <HAL_ETH_Init+0x2bc>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001068:	4b99      	ldr	r3, [pc, #612]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a98      	ldr	r2, [pc, #608]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800106e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001072:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4994      	ldr	r1, [pc, #592]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001098:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800109a:	f7ff fde5 	bl	8000c68 <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010a0:	e011      	b.n	80010c6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010a2:	f7ff fde1 	bl	8000c68 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b0:	d909      	bls.n	80010c6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e139      	b.n	800133a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e4      	bne.n	80010a2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f023 031c 	bic.w	r3, r3, #28
 80010e6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010e8:	f001 ff38 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 80010ec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4a78      	ldr	r2, [pc, #480]	; (80012d4 <HAL_ETH_Init+0x2c4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d908      	bls.n	8001108 <HAL_ETH_Init+0xf8>
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4a77      	ldr	r2, [pc, #476]	; (80012d8 <HAL_ETH_Init+0x2c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d804      	bhi.n	8001108 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e027      	b.n	8001158 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4a73      	ldr	r2, [pc, #460]	; (80012d8 <HAL_ETH_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d908      	bls.n	8001122 <HAL_ETH_Init+0x112>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	4a6d      	ldr	r2, [pc, #436]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d204      	bcs.n	8001122 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f043 030c 	orr.w	r3, r3, #12
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	e01a      	b.n	8001158 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d303      	bcc.n	8001132 <HAL_ETH_Init+0x122>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <HAL_ETH_Init+0x2cc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d911      	bls.n	8001156 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4a69      	ldr	r2, [pc, #420]	; (80012dc <HAL_ETH_Init+0x2cc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d908      	bls.n	800114c <HAL_ETH_Init+0x13c>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4a68      	ldr	r2, [pc, #416]	; (80012e0 <HAL_ETH_Init+0x2d0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d804      	bhi.n	800114c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e005      	b.n	8001158 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e000      	b.n	8001158 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001156:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fb98 	bl	800189c <HAL_ETH_WritePHYRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fd4d 	bl	8001c18 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0d7      	b.n	800133a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	f7ff fd78 	bl	8000c80 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a5 	beq.w	80012e4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800119a:	f7ff fd65 	bl	8000c68 <HAL_GetTick>
 800119e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	461a      	mov	r2, r3
 80011a6:	2101      	movs	r1, #1
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fb0f 	bl	80017cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011ae:	f7ff fd5b 	bl	8000c68 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d90f      	bls.n	80011e0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fd26 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e0ac      	b.n	800133a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0da      	beq.n	80011a0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ee:	2100      	movs	r1, #0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fb53 	bl	800189c <HAL_ETH_WritePHYRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fd08 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001210:	2301      	movs	r3, #1
 8001212:	e092      	b.n	800133a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001214:	f7ff fd28 	bl	8000c68 <HAL_GetTick>
 8001218:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	461a      	mov	r2, r3
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fad2 	bl	80017cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001228:	f7ff fd1e 	bl	8000c68 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d90f      	bls.n	800125a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fce9 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e06f      	b.n	800133a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0da      	beq.n	800121a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	461a      	mov	r2, r3
 800126a:	2110      	movs	r1, #16
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 faad 	bl	80017cc <HAL_ETH_ReadPHYRegister>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fcca 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800128c:	2301      	movs	r3, #1
 800128e:	e054      	b.n	800133a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e002      	b.n	80012aa <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	e035      	b.n	8001328 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	e030      	b.n	8001328 <HAL_ETH_Init+0x318>
 80012c6:	bf00      	nop
 80012c8:	03938700 	.word	0x03938700
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	01312cff 	.word	0x01312cff
 80012d8:	02160ebf 	.word	0x02160ebf
 80012dc:	05f5e0ff 	.word	0x05f5e0ff
 80012e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 facd 	bl	800189c <HAL_ETH_WritePHYRegister>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800130c:	6939      	ldr	r1, [r7, #16]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fc82 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e00c      	b.n	800133a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001320:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001324:	f7ff fcac 	bl	8000c80 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fc74 	bl	8001c18 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop

08001344 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ETH_DMATxDescListInit+0x20>
 8001360:	2302      	movs	r3, #2
 8001362:	e052      	b.n	800140a <HAL_ETH_DMATxDescListInit+0xc6>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e030      	b.n	80013e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d208      	bcs.n	80013d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	461a      	mov	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e002      	b.n	80013dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3ca      	bcc.n	8001380 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f241 0310 	movw	r3, #4112	; 0x1010
 80013f4:	440b      	add	r3, r1
 80013f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001416:	b480      	push	{r7}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ETH_DMARxDescListInit+0x20>
 8001432:	2302      	movs	r3, #2
 8001434:	e056      	b.n	80014e4 <HAL_ETH_DMARxDescListInit+0xce>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e034      	b.n	80014bc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001462:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800146a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d208      	bcs.n	80014b0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	e002      	b.n	80014b6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3c6      	bcc.n	8001452 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	f241 030c 	movw	r3, #4108	; 0x100c
 80014ce:	440b      	add	r3, r1
 80014d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ETH_TransmitFrame+0x24>
 8001510:	2302      	movs	r3, #2
 8001512:	e0cd      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800153a:	2301      	movs	r3, #1
 800153c:	e0b8      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da09      	bge.n	800155c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2212      	movs	r2, #18
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a9      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001562:	4293      	cmp	r3, r2
 8001564:	d915      	bls.n	8001592 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_ETH_TransmitFrame+0x1cc>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_ETH_TransmitFrame+0x1cc>)
 8001576:	fba3 1302 	umull	r1, r3, r3, r2
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e001      	b.n	8001596 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d11c      	bne.n	80015d6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80015aa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015b6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015c6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d4:	e04b      	b.n	800166e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e044      	b.n	8001666 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ea:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001600:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800160a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3b01      	subs	r3, #1
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	d116      	bne.n	8001644 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001624:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_ETH_TransmitFrame+0x1d0>)
 800162a:	fb02 f203 	mul.w	r2, r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001636:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001642:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001652:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	3301      	adds	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3b6      	bcc.n	80015dc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f241 0314 	movw	r3, #4116	; 0x1014
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f241 0314 	movw	r3, #4116	; 0x1014
 800168a:	4413      	add	r3, r2
 800168c:	2204      	movs	r2, #4
 800168e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f241 0304 	movw	r3, #4100	; 0x1004
 8001698:	4413      	add	r3, r2
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	ac02b00b 	.word	0xac02b00b
 80016c0:	fffffa0c 	.word	0xfffffa0c

080016c4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ETH_GetReceivedFrame+0x1a>
 80016da:	2302      	movs	r3, #2
 80016dc:	e070      	b.n	80017c0 <HAL_ETH_GetReceivedFrame+0xfc>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db5a      	blt.n	80017ae <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d030      	beq.n	8001768 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2b01      	cmp	r3, #1
 8001716:	d103      	bne.n	8001720 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001734:	3b04      	subs	r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e02b      	b.n	80017c0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
 8001796:	e00a      	b.n	80017ae <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b82      	cmp	r3, #130	; 0x82
 80017ec:	d101      	bne.n	80017f2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
 80017f0:	e050      	b.n	8001894 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2282      	movs	r2, #130	; 0x82
 80017f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 031c 	and.w	r3, r3, #28
 8001808:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8a1b      	ldrh	r3, [r3, #16]
 800180e:	02db      	lsls	r3, r3, #11
 8001810:	b29b      	uxth	r3, r3
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001818:	897b      	ldrh	r3, [r7, #10]
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f023 0302 	bic.w	r3, r3, #2
 800182c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800183e:	f7ff fa13 	bl	8000c68 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001844:	e015      	b.n	8001872 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001846:	f7ff fa0f 	bl	8000c68 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d309      	bcc.n	800186a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e014      	b.n	8001894 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e4      	bne.n	8001846 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b42      	cmp	r3, #66	; 0x42
 80018bc:	d101      	bne.n	80018c2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
 80018c0:	e04e      	b.n	8001960 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2242      	movs	r2, #66	; 0x42
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 031c 	and.w	r3, r3, #28
 80018d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8a1b      	ldrh	r3, [r3, #16]
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	019b      	lsls	r3, r3, #6
 80018ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff f9a6 	bl	8000c68 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191e:	e015      	b.n	800194c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001920:	f7ff f9a2 	bl	8000c68 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d309      	bcc.n	8001944 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e00d      	b.n	8001960 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e4      	bne.n	8001920 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ETH_Start+0x16>
 800197a:	2302      	movs	r3, #2
 800197c:	e01f      	b.n	80019be <HAL_ETH_Start+0x56>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb44 	bl	800201c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fb7b 	bl	8002090 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fc12 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fbaf 	bl	8002104 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fbdc 	bl	8002164 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ETH_Stop+0x16>
 80019d8:	2302      	movs	r3, #2
 80019da:	e01f      	b.n	8001a1c <HAL_ETH_Stop+0x56>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fba1 	bl	8002134 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fbce 	bl	8002194 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fb66 	bl	80020ca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fbe0 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb26 	bl	8002056 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ETH_ConfigMAC+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0e4      	b.n	8001c0a <HAL_ETH_ConfigMAC+0x1e6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80b1 	beq.w	8001bba <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_ETH_ConfigMAC+0x1f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a70:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a76:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a7c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a82:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a88:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a8e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a94:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a9a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001aa0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001aa6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001aac:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ab2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff f8d8 	bl	8000c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ae0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ae6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001aec:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001af2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001af8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b0a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b0c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f8b2 	bl	8000c80 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b2c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b36:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b54:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b5a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b60:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b66:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b6c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff f87b 	bl	8000c80 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff f868 	bl	8000c80 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001bc8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff f848 	bl	8000c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	ff20810f 	.word	0xff20810f

08001c18 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b0      	sub	sp, #192	; 0xc0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c34:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	663b      	str	r3, [r7, #96]	; 0x60
 8001c64:	e001      	b.n	8001c6a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf0:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <ETH_MACDMAConfig+0x388>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cfc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d00:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d04:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d0a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d0e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d12:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d18:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d1c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d20:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d24:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d28:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001d2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7fe ff97 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d60:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d64:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d6a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d70:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d76:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d7c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d88:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d8a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7fe ff72 	bl	8000c80 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dcc:	4013      	ands	r3, r2
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ddc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001de2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001de8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001dee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001df4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e08:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7fe ff33 	bl	8000c80 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e22:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7fe ff1e 	bl	8000c80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e60:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e72:	2304      	movs	r3, #4
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <ETH_MACDMAConfig+0x38c>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eb6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ebc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ebe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ec0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ec2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ec4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ec6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ec8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001eca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ece:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ed2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ed6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eea:	4413      	add	r3, r2
 8001eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7fe febc 	bl	8000c80 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f10:	4413      	add	r3, r2
 8001f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f16:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f1c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f20:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f24:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f28:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f2e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f32:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7fe fe95 	bl	8000c80 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f62:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10d      	bne.n	8001f88 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <ETH_MACDMAConfig+0x390>)
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f84:	440b      	add	r3, r1
 8001f86:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2100      	movs	r1, #0
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f80b 	bl	8001fac <ETH_MACAddressConfig>
}
 8001f96:	bf00      	nop
 8001f98:	37c0      	adds	r7, #192	; 0xc0
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	ff20810f 	.word	0xff20810f
 8001fa4:	f8de3f23 	.word	0xf8de3f23
 8001fa8:	00010040 	.word	0x00010040

08001fac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	3204      	adds	r2, #4
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <ETH_MACAddressConfig+0x68>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <ETH_MACAddressConfig+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40028040 	.word	0x40028040
 8002018:	40028044 	.word	0x40028044

0800201c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe fe1d 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe fe00 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0204 	orr.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe fde3 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0204 	bic.w	r2, r2, #4
 80020e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe fdc6 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f241 0318 	movw	r3, #4120	; 0x1018
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6811      	ldr	r1, [r2, #0]
 800211c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002120:	f241 0318 	movw	r3, #4120	; 0x1018
 8002124:	440b      	add	r3, r1
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f241 0318 	movw	r3, #4120	; 0x1018
 8002144:	4413      	add	r3, r2
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002150:	f241 0318 	movw	r3, #4120	; 0x1018
 8002154:	440b      	add	r3, r1
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	f241 0318 	movw	r3, #4120	; 0x1018
 8002174:	4413      	add	r3, r2
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6811      	ldr	r1, [r2, #0]
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	f241 0318 	movw	r3, #4120	; 0x1018
 8002184:	440b      	add	r3, r1
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	f023 0202 	bic.w	r2, r3, #2
 80021b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d8:	4413      	add	r3, r2
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6811      	ldr	r1, [r2, #0]
 80021e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021e8:	440b      	add	r3, r1
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe fd40 	bl	8000c80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f241 0318 	movw	r3, #4120	; 0x1018
 800220a:	440b      	add	r3, r1
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e175      	b.n	8002524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8164 	bne.w	800251e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x56>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80be 	beq.w	800251e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_GPIO_Init+0x324>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_GPIO_Init+0x324>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_GPIO_Init+0x324>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ba:	4a61      	ldr	r2, [pc, #388]	; (8002540 <HAL_GPIO_Init+0x328>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d037      	beq.n	8002456 <HAL_GPIO_Init+0x23e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_GPIO_Init+0x330>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_GPIO_Init+0x23a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_GPIO_Init+0x334>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_GPIO_Init+0x236>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a55      	ldr	r2, [pc, #340]	; (8002550 <HAL_GPIO_Init+0x338>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x232>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a54      	ldr	r2, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x33c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x22e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_GPIO_Init+0x340>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x22a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_GPIO_Init+0x344>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x226>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_GPIO_Init+0x348>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x222>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a50      	ldr	r2, [pc, #320]	; (8002564 <HAL_GPIO_Init+0x34c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x21e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4f      	ldr	r2, [pc, #316]	; (8002568 <HAL_GPIO_Init+0x350>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x21a>
 800242e:	2309      	movs	r3, #9
 8002430:	e012      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002432:	230a      	movs	r3, #10
 8002434:	e010      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002436:	2308      	movs	r3, #8
 8002438:	e00e      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243a:	2307      	movs	r3, #7
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243e:	2306      	movs	r3, #6
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x328>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_GPIO_Init+0x354>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_GPIO_Init+0x354>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_GPIO_Init+0x354>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <HAL_GPIO_Init+0x354>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_GPIO_Init+0x354>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_GPIO_Init+0x354>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_GPIO_Init+0x354>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_GPIO_Init+0x354>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f ae86 	bls.w	8002238 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40022000 	.word	0x40022000
 8002568:	40022400 	.word	0x40022400
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40007000 	.word	0x40007000

080025c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_PWREx_EnableOverDrive+0x98>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <HAL_PWREx_EnableOverDrive+0x98>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_PWREx_EnableOverDrive+0x98>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f2:	f7fe fb39 	bl	8000c68 <HAL_GetTick>
 80025f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025f8:	e009      	b.n	800260e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025fa:	f7fe fb35 	bl	8000c68 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002608:	d901      	bls.n	800260e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e022      	b.n	8002654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261a:	d1ee      	bne.n	80025fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002628:	f7fe fb1e 	bl	8000c68 <HAL_GetTick>
 800262c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800262e:	e009      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002630:	f7fe fb1a 	bl	8000c68 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263e:	d901      	bls.n	8002644 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e007      	b.n	8002654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002650:	d1ee      	bne.n	8002630 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000

08002664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e29b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8087 	beq.w	8002796 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002688:	4b96      	ldr	r3, [pc, #600]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b04      	cmp	r3, #4
 8002692:	d00c      	beq.n	80026ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002694:	4b93      	ldr	r3, [pc, #588]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d112      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62>
 80026a0:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06c      	beq.n	8002794 <HAL_RCC_OscConfig+0x130>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d168      	bne.n	8002794 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e275      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x7a>
 80026d0:	4b84      	ldr	r3, [pc, #528]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a83      	ldr	r2, [pc, #524]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e02e      	b.n	800273c <HAL_RCC_OscConfig+0xd8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x9c>
 80026e6:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7e      	ldr	r2, [pc, #504]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80026f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xd8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0xc0>
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a72      	ldr	r2, [pc, #456]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xd8>
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fa90 	bl	8000c68 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fa8c 	bl	8000c68 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e229      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xe8>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fa7c 	bl	8000c68 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fa78 	bl	8000c68 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e215      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x110>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d069      	beq.n	8002876 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a2:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x190>
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x17a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1e9      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	493d      	ldr	r1, [pc, #244]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e040      	b.n	8002876 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fa2e 	bl	8000c68 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fa2a 	bl	8000c68 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1c7      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4929      	ldr	r1, [pc, #164]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fa0a 	bl	8000c68 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002858:	f7fe fa06 	bl	8000c68 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1a3      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d038      	beq.n	80028f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002896:	f7fe f9e7 	bl	8000c68 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe f9e3 	bl	8000c68 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e180      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x23a>
 80028bc:	e01a      	b.n	80028f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_RCC_OscConfig+0x280>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe f9cd 	bl	8000c68 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe f9c9 	bl	8000c68 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d903      	bls.n	80028e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e166      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
 80028e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ee      	bne.n	80028d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a4 	beq.w	8002a4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a88      	ldr	r2, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002936:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x4d4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7f      	ldr	r2, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x4d4>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7fe f991 	bl	8000c68 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294a:	f7fe f98d 	bl	8000c68 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	; 0x64
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e12a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x4d4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x31a>
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a6f      	ldr	r2, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
 800297c:	e02d      	b.n	80029da <HAL_RCC_OscConfig+0x376>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x33c>
 8002986:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	; 0x70
 8002992:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	f023 0304 	bic.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x376>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x35e>
 80029a8:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a5e      	ldr	r2, [pc, #376]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x376>
 80029c2:	4b5c      	ldr	r3, [pc, #368]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a5b      	ldr	r2, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a58      	ldr	r2, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe f941 	bl	8000c68 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe f93d 	bl	8000c68 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0d8      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x386>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe f92b 	bl	8000c68 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe f927 	bl	8000c68 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0c2      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a3c      	ldr	r2, [pc, #240]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80ae 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d06d      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d14b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe f8f8 	bl	8000c68 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe f8f4 	bl	8000c68 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e091      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	071b      	lsls	r3, r3, #28
 8002ac6:	491b      	ldr	r1, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe f8c6 	bl	8000c68 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe f8c2 	bl	8000c68 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e05f      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
 8002afe:	e057      	b.n	8002bb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f8ac 	bl	8000c68 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe f8a8 	bl	8000c68 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e045      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4b0>
 8002b32:	e03d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x54c>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_RCC_OscConfig+0x558>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d030      	beq.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d129      	bne.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d122      	bne.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d119      	bne.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	3b01      	subs	r3, #1
 8002b86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10f      	bne.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0d0      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 020f 	bic.w	r2, r3, #15
 8002bee:	4965      	ldr	r1, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d040      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e073      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06b      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4936      	ldr	r1, [pc, #216]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fd ffd8 	bl	8000c68 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fd ffd4 	bl	8000c68 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e053      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d210      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	4922      	ldr	r1, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1cc>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1d0>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1d4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd ff34 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	080139d4 	.word	0x080139d4
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80bd 	bhi.w	8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e0b7      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dce:	60bb      	str	r3, [r7, #8]
      break;
 8002dd0:	e0b7      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002dd4:	60bb      	str	r3, [r7, #8]
      break;
 8002dd6:	e0b4      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04d      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	ea02 0800 	and.w	r8, r2, r0
 8002e06:	ea03 0901 	and.w	r9, r3, r1
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	014b      	lsls	r3, r1, #5
 8002e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e1c:	0142      	lsls	r2, r0, #5
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	ebb0 0008 	subs.w	r0, r0, r8
 8002e26:	eb61 0109 	sbc.w	r1, r1, r9
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	018b      	lsls	r3, r1, #6
 8002e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e38:	0182      	lsls	r2, r0, #6
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	00d9      	lsls	r1, r3, #3
 8002e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e4e:	00d0      	lsls	r0, r2, #3
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	eb12 0208 	adds.w	r2, r2, r8
 8002e58:	eb43 0309 	adc.w	r3, r3, r9
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0259      	lsls	r1, r3, #9
 8002e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e6a:	0250      	lsls	r0, r2, #9
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f7fd fa30 	bl	80002e0 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e04a      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	461a      	mov	r2, r3
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	ea02 0400 	and.w	r4, r2, r0
 8002ea2:	ea03 0501 	and.w	r5, r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	014b      	lsls	r3, r1, #5
 8002eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eb8:	0142      	lsls	r2, r0, #5
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	1b00      	subs	r0, r0, r4
 8002ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ed2:	0182      	lsls	r2, r0, #6
 8002ed4:	1a12      	subs	r2, r2, r0
 8002ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee8:	00d0      	lsls	r0, r2, #3
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	1912      	adds	r2, r2, r4
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	0299      	lsls	r1, r3, #10
 8002efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f02:	0290      	lsls	r0, r2, #10
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd f9e4 	bl	80002e0 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	60bb      	str	r3, [r7, #8]
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f3e:	60bb      	str	r3, [r7, #8]
      break;
 8002f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f42:	68bb      	ldr	r3, [r7, #8]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f78:	f7ff fff0 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0a9b      	lsrs	r3, r3, #10
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	080139e4 	.word	0x080139e4

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa0:	f7ff ffdc 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0b5b      	lsrs	r3, r3, #13
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	080139e4 	.word	0x080139e4

08002fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fec:	4b69      	ldr	r3, [pc, #420]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a68      	ldr	r2, [pc, #416]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ff6:	6093      	str	r3, [r2, #8]
 8002ff8:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	4964      	ldr	r1, [pc, #400]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	4959      	ldr	r1, [pc, #356]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d017      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800305a:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003060:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	494a      	ldr	r1, [pc, #296]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 808b 	beq.w	80031be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a39      	ldr	r2, [pc, #228]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
 80030b4:	4b37      	ldr	r3, [pc, #220]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a34      	ldr	r2, [pc, #208]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fd fdcc 	bl	8000c68 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fd fdc8 	bl	8000c68 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e38f      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030f2:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d035      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d02e      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d114      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fd fd90 	bl	8000c68 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fd fd8c 	bl	8000c68 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e351      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ee      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317a:	d111      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800318a:	400b      	ands	r3, r1
 800318c:	4901      	ldr	r1, [pc, #4]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
 8003192:	e00b      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003194:	40023800 	.word	0x40023800
 8003198:	40007000 	.word	0x40007000
 800319c:	0ffffcff 	.word	0x0ffffcff
 80031a0:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4ab2      	ldr	r2, [pc, #712]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031aa:	6093      	str	r3, [r2, #8]
 80031ac:	4bb0      	ldr	r3, [pc, #704]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	49ad      	ldr	r1, [pc, #692]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ca:	4ba9      	ldr	r3, [pc, #676]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d0:	4aa7      	ldr	r2, [pc, #668]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031da:	4ba5      	ldr	r3, [pc, #660]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	49a2      	ldr	r1, [pc, #648]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031f8:	4b9d      	ldr	r3, [pc, #628]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003206:	499a      	ldr	r1, [pc, #616]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003228:	4991      	ldr	r1, [pc, #580]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	4989      	ldr	r1, [pc, #548]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800325e:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4980      	ldr	r1, [pc, #512]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003280:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	4978      	ldr	r1, [pc, #480]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a2:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f023 020c 	bic.w	r2, r3, #12
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	496f      	ldr	r1, [pc, #444]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c4:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	4967      	ldr	r1, [pc, #412]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	495e      	ldr	r1, [pc, #376]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003308:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	4956      	ldr	r1, [pc, #344]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	494d      	ldr	r1, [pc, #308]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800334c:	4b48      	ldr	r3, [pc, #288]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	4945      	ldr	r1, [pc, #276]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	493c      	ldr	r1, [pc, #240]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003390:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339e:	4934      	ldr	r1, [pc, #208]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d011      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c0:	492b      	ldr	r1, [pc, #172]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d0:	d101      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003424:	4912      	ldr	r1, [pc, #72]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003448:	4909      	ldr	r1, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003462:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	e002      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	4986      	ldr	r1, [pc, #536]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003488:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003498:	497d      	ldr	r1, [pc, #500]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d006      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80d6 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034b4:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fd fbd2 	bl	8000c68 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034c8:	f7fd fbce 	bl	8000c68 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e195      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d021      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11d      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003508:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350e:	0e1b      	lsrs	r3, r3, #24
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	019a      	lsls	r2, r3, #6
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	4958      	ldr	r1, [pc, #352]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003560:	d129      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003570:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003576:	0f1b      	lsrs	r3, r3, #28
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	019a      	lsls	r2, r3, #6
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	493e      	ldr	r1, [pc, #248]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800359e:	4b3c      	ldr	r3, [pc, #240]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	f023 021f 	bic.w	r2, r3, #31
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	3b01      	subs	r3, #1
 80035ae:	4938      	ldr	r1, [pc, #224]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01d      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	0f1b      	lsrs	r3, r3, #28
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	019a      	lsls	r2, r3, #6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	071b      	lsls	r3, r3, #28
 80035f6:	4926      	ldr	r1, [pc, #152]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d011      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	019a      	lsls	r2, r3, #6
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	491a      	ldr	r1, [pc, #104]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363a:	f7fd fb15 	bl	8000c68 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003642:	f7fd fb11 	bl	8000c68 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0d8      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	f040 80ce 	bne.w	8003804 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a08      	ldr	r2, [pc, #32]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd faf8 	bl	8000c68 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800367a:	e00b      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800367c:	f7fd faf4 	bl	8000c68 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d904      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0bb      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003694:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800369c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a0:	d0ec      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02e      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d12a      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	0f1b      	lsrs	r3, r3, #28
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	019a      	lsls	r2, r3, #6
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	4944      	ldr	r1, [pc, #272]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	493d      	ldr	r1, [pc, #244]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d022      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d11d      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	0e1b      	lsrs	r3, r3, #24
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	019a      	lsls	r2, r3, #6
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	4929      	ldr	r1, [pc, #164]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800378c:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	019a      	lsls	r2, r3, #6
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	431a      	orrs	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	4917      	ldr	r1, [pc, #92]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4911      	ldr	r1, [pc, #68]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7fd fa44 	bl	8000c68 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037e4:	f7fd fa40 	bl	8000c68 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e007      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003802:	d1ef      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e040      	b.n	80038a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd f934 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fbca 	bl	8003fec <UART_SetConfig>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e022      	b.n	80038a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fe20 	bl	80044b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fea7 	bl	80045f4 <UART_CheckIdleState>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 8081 	bne.w	80039cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_UART_Transmit+0x26>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e079      	b.n	80039ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x38>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e072      	b.n	80039ce <HAL_UART_Transmit+0x11e>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2221      	movs	r2, #33	; 0x21
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fe:	f7fd f9b3 	bl	8000c68 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d108      	bne.n	8003930 <HAL_UART_Transmit+0x80>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e003      	b.n	8003938 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003940:	e02c      	b.n	800399c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fe9a 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e038      	b.n	80039ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3302      	adds	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e007      	b.n	800398a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1cc      	bne.n	8003942 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fe67 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e005      	b.n	80039ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0ba      	sub	sp, #232	; 0xe8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a06:	4013      	ands	r3, r2
 8003a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d115      	bne.n	8003a40 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00f      	beq.n	8003a40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 82a4 	beq.w	8003f7e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
      }
      return;
 8003a3e:	e29e      	b.n	8003f7e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8117 	beq.w	8003c78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a5a:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_UART_IRQHandler+0x298>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 810a 	beq.w	8003c78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_UART_IRQHandler+0xbc>
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d011      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xec>
 8003aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d011      	beq.n	8003af4 <HAL_UART_IRQHandler+0x11c>
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d017      	beq.n	8003b30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	f043 0208 	orr.w	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_UART_IRQHandler+0x18a>
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 820a 	beq.w	8003f82 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04f      	beq.n	8003c5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fe27 	bl	800480e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d141      	bne.n	8003c52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1d9      	bne.n	8003bce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d013      	beq.n	8003c4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_UART_IRQHandler+0x29c>)
 8003c28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd f9cb 	bl	8000fca <HAL_DMA_Abort_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c44:	4610      	mov	r0, r2
 8003c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00f      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9ae 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e00b      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9aa 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e007      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9a6 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c68:	e18b      	b.n	8003f82 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6a:	bf00      	nop
    return;
 8003c6c:	e189      	b.n	8003f82 <HAL_UART_IRQHandler+0x5aa>
 8003c6e:	bf00      	nop
 8003c70:	04000120 	.word	0x04000120
 8003c74:	080048d5 	.word	0x080048d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 8144 	bne.w	8003f0a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 813d 	beq.w	8003f0a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8136 	beq.w	8003f0a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	f040 80b2 	bne.w	8003e1a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 815d 	beq.w	8003f86 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f080 8155 	bcs.w	8003f86 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	f000 8085 	beq.w	8003dfe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1da      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e1      	bne.n	8003d3e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003de2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e4      	bne.n	8003dbe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd f876 	bl	8000eea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8d4 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e18:	e0b5      	b.n	8003f86 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a7 	beq.w	8003f8a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80a2 	beq.w	8003f8a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e4      	bne.n	8003e46 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3308      	adds	r3, #8
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ea0:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e4      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f85c 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f08:	e03f      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <HAL_UART_IRQHandler+0x55c>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f853 	bl	8003fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f32:	e02d      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01c      	beq.n	8003f8e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
    }
    return;
 8003f5c:	e017      	b.n	8003f8e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00c      	beq.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fcc2 	bl	8004900 <UART_EndTransmit_IT>
    return;
 8003f7c:	e008      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e006      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003f82:	bf00      	nop
 8003f84:	e004      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003f8e:	bf00      	nop
  }

}
 8003f90:	37e8      	adds	r7, #232	; 0xe8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop

08003f98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4ba7      	ldr	r3, [pc, #668]	; (80042b4 <UART_SetConfig+0x2c8>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	430b      	orrs	r3, r1
 8004022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a95      	ldr	r2, [pc, #596]	; (80042b8 <UART_SetConfig+0x2cc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d120      	bne.n	80040aa <UART_SetConfig+0xbe>
 8004068:	4b94      	ldr	r3, [pc, #592]	; (80042bc <UART_SetConfig+0x2d0>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d816      	bhi.n	80040a4 <UART_SetConfig+0xb8>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <UART_SetConfig+0x90>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004099 	.word	0x08004099
 8004084:	08004093 	.word	0x08004093
 8004088:	0800409f 	.word	0x0800409f
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e14f      	b.n	8004332 <UART_SetConfig+0x346>
 8004092:	2302      	movs	r3, #2
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e14c      	b.n	8004332 <UART_SetConfig+0x346>
 8004098:	2304      	movs	r3, #4
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e149      	b.n	8004332 <UART_SetConfig+0x346>
 800409e:	2308      	movs	r3, #8
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e146      	b.n	8004332 <UART_SetConfig+0x346>
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e143      	b.n	8004332 <UART_SetConfig+0x346>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a84      	ldr	r2, [pc, #528]	; (80042c0 <UART_SetConfig+0x2d4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d132      	bne.n	800411a <UART_SetConfig+0x12e>
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <UART_SetConfig+0x2d0>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d828      	bhi.n	8004114 <UART_SetConfig+0x128>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <UART_SetConfig+0xdc>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	08004115 	.word	0x08004115
 80040d0:	08004115 	.word	0x08004115
 80040d4:	08004115 	.word	0x08004115
 80040d8:	08004109 	.word	0x08004109
 80040dc:	08004115 	.word	0x08004115
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004115 	.word	0x08004115
 80040e8:	08004103 	.word	0x08004103
 80040ec:	08004115 	.word	0x08004115
 80040f0:	08004115 	.word	0x08004115
 80040f4:	08004115 	.word	0x08004115
 80040f8:	0800410f 	.word	0x0800410f
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e117      	b.n	8004332 <UART_SetConfig+0x346>
 8004102:	2302      	movs	r3, #2
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e114      	b.n	8004332 <UART_SetConfig+0x346>
 8004108:	2304      	movs	r3, #4
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e111      	b.n	8004332 <UART_SetConfig+0x346>
 800410e:	2308      	movs	r3, #8
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e10e      	b.n	8004332 <UART_SetConfig+0x346>
 8004114:	2310      	movs	r3, #16
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e10b      	b.n	8004332 <UART_SetConfig+0x346>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a69      	ldr	r2, [pc, #420]	; (80042c4 <UART_SetConfig+0x2d8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d120      	bne.n	8004166 <UART_SetConfig+0x17a>
 8004124:	4b65      	ldr	r3, [pc, #404]	; (80042bc <UART_SetConfig+0x2d0>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800412e:	2b30      	cmp	r3, #48	; 0x30
 8004130:	d013      	beq.n	800415a <UART_SetConfig+0x16e>
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d814      	bhi.n	8004160 <UART_SetConfig+0x174>
 8004136:	2b20      	cmp	r3, #32
 8004138:	d009      	beq.n	800414e <UART_SetConfig+0x162>
 800413a:	2b20      	cmp	r3, #32
 800413c:	d810      	bhi.n	8004160 <UART_SetConfig+0x174>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <UART_SetConfig+0x15c>
 8004142:	2b10      	cmp	r3, #16
 8004144:	d006      	beq.n	8004154 <UART_SetConfig+0x168>
 8004146:	e00b      	b.n	8004160 <UART_SetConfig+0x174>
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e0f1      	b.n	8004332 <UART_SetConfig+0x346>
 800414e:	2302      	movs	r3, #2
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e0ee      	b.n	8004332 <UART_SetConfig+0x346>
 8004154:	2304      	movs	r3, #4
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e0eb      	b.n	8004332 <UART_SetConfig+0x346>
 800415a:	2308      	movs	r3, #8
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e0e8      	b.n	8004332 <UART_SetConfig+0x346>
 8004160:	2310      	movs	r3, #16
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e0e5      	b.n	8004332 <UART_SetConfig+0x346>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a57      	ldr	r2, [pc, #348]	; (80042c8 <UART_SetConfig+0x2dc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d120      	bne.n	80041b2 <UART_SetConfig+0x1c6>
 8004170:	4b52      	ldr	r3, [pc, #328]	; (80042bc <UART_SetConfig+0x2d0>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800417a:	2bc0      	cmp	r3, #192	; 0xc0
 800417c:	d013      	beq.n	80041a6 <UART_SetConfig+0x1ba>
 800417e:	2bc0      	cmp	r3, #192	; 0xc0
 8004180:	d814      	bhi.n	80041ac <UART_SetConfig+0x1c0>
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d009      	beq.n	800419a <UART_SetConfig+0x1ae>
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d810      	bhi.n	80041ac <UART_SetConfig+0x1c0>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <UART_SetConfig+0x1a8>
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d006      	beq.n	80041a0 <UART_SetConfig+0x1b4>
 8004192:	e00b      	b.n	80041ac <UART_SetConfig+0x1c0>
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0cb      	b.n	8004332 <UART_SetConfig+0x346>
 800419a:	2302      	movs	r3, #2
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e0c8      	b.n	8004332 <UART_SetConfig+0x346>
 80041a0:	2304      	movs	r3, #4
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e0c5      	b.n	8004332 <UART_SetConfig+0x346>
 80041a6:	2308      	movs	r3, #8
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e0c2      	b.n	8004332 <UART_SetConfig+0x346>
 80041ac:	2310      	movs	r3, #16
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e0bf      	b.n	8004332 <UART_SetConfig+0x346>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a45      	ldr	r2, [pc, #276]	; (80042cc <UART_SetConfig+0x2e0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d125      	bne.n	8004208 <UART_SetConfig+0x21c>
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <UART_SetConfig+0x2d0>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ca:	d017      	beq.n	80041fc <UART_SetConfig+0x210>
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d0:	d817      	bhi.n	8004202 <UART_SetConfig+0x216>
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d6:	d00b      	beq.n	80041f0 <UART_SetConfig+0x204>
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d811      	bhi.n	8004202 <UART_SetConfig+0x216>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <UART_SetConfig+0x1fe>
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	d006      	beq.n	80041f6 <UART_SetConfig+0x20a>
 80041e8:	e00b      	b.n	8004202 <UART_SetConfig+0x216>
 80041ea:	2300      	movs	r3, #0
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e0a0      	b.n	8004332 <UART_SetConfig+0x346>
 80041f0:	2302      	movs	r3, #2
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e09d      	b.n	8004332 <UART_SetConfig+0x346>
 80041f6:	2304      	movs	r3, #4
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e09a      	b.n	8004332 <UART_SetConfig+0x346>
 80041fc:	2308      	movs	r3, #8
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e097      	b.n	8004332 <UART_SetConfig+0x346>
 8004202:	2310      	movs	r3, #16
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e094      	b.n	8004332 <UART_SetConfig+0x346>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a30      	ldr	r2, [pc, #192]	; (80042d0 <UART_SetConfig+0x2e4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d125      	bne.n	800425e <UART_SetConfig+0x272>
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <UART_SetConfig+0x2d0>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800421c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004220:	d017      	beq.n	8004252 <UART_SetConfig+0x266>
 8004222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004226:	d817      	bhi.n	8004258 <UART_SetConfig+0x26c>
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422c:	d00b      	beq.n	8004246 <UART_SetConfig+0x25a>
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d811      	bhi.n	8004258 <UART_SetConfig+0x26c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <UART_SetConfig+0x254>
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423c:	d006      	beq.n	800424c <UART_SetConfig+0x260>
 800423e:	e00b      	b.n	8004258 <UART_SetConfig+0x26c>
 8004240:	2301      	movs	r3, #1
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e075      	b.n	8004332 <UART_SetConfig+0x346>
 8004246:	2302      	movs	r3, #2
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e072      	b.n	8004332 <UART_SetConfig+0x346>
 800424c:	2304      	movs	r3, #4
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e06f      	b.n	8004332 <UART_SetConfig+0x346>
 8004252:	2308      	movs	r3, #8
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e06c      	b.n	8004332 <UART_SetConfig+0x346>
 8004258:	2310      	movs	r3, #16
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e069      	b.n	8004332 <UART_SetConfig+0x346>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <UART_SetConfig+0x2e8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d137      	bne.n	80042d8 <UART_SetConfig+0x2ec>
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <UART_SetConfig+0x2d0>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004272:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004276:	d017      	beq.n	80042a8 <UART_SetConfig+0x2bc>
 8004278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800427c:	d817      	bhi.n	80042ae <UART_SetConfig+0x2c2>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d00b      	beq.n	800429c <UART_SetConfig+0x2b0>
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004288:	d811      	bhi.n	80042ae <UART_SetConfig+0x2c2>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <UART_SetConfig+0x2aa>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	d006      	beq.n	80042a2 <UART_SetConfig+0x2b6>
 8004294:	e00b      	b.n	80042ae <UART_SetConfig+0x2c2>
 8004296:	2300      	movs	r3, #0
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e04a      	b.n	8004332 <UART_SetConfig+0x346>
 800429c:	2302      	movs	r3, #2
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e047      	b.n	8004332 <UART_SetConfig+0x346>
 80042a2:	2304      	movs	r3, #4
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e044      	b.n	8004332 <UART_SetConfig+0x346>
 80042a8:	2308      	movs	r3, #8
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e041      	b.n	8004332 <UART_SetConfig+0x346>
 80042ae:	2310      	movs	r3, #16
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e03e      	b.n	8004332 <UART_SetConfig+0x346>
 80042b4:	efff69f3 	.word	0xefff69f3
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	40005000 	.word	0x40005000
 80042d0:	40011400 	.word	0x40011400
 80042d4:	40007800 	.word	0x40007800
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a71      	ldr	r2, [pc, #452]	; (80044a4 <UART_SetConfig+0x4b8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d125      	bne.n	800432e <UART_SetConfig+0x342>
 80042e2:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <UART_SetConfig+0x4bc>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042f0:	d017      	beq.n	8004322 <UART_SetConfig+0x336>
 80042f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042f6:	d817      	bhi.n	8004328 <UART_SetConfig+0x33c>
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	d00b      	beq.n	8004316 <UART_SetConfig+0x32a>
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	d811      	bhi.n	8004328 <UART_SetConfig+0x33c>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <UART_SetConfig+0x324>
 8004308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430c:	d006      	beq.n	800431c <UART_SetConfig+0x330>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x33c>
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e00d      	b.n	8004332 <UART_SetConfig+0x346>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e00a      	b.n	8004332 <UART_SetConfig+0x346>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e007      	b.n	8004332 <UART_SetConfig+0x346>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e004      	b.n	8004332 <UART_SetConfig+0x346>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e001      	b.n	8004332 <UART_SetConfig+0x346>
 800432e:	2310      	movs	r3, #16
 8004330:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433a:	d15a      	bne.n	80043f2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800433c:	7ffb      	ldrb	r3, [r7, #31]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d827      	bhi.n	8004392 <UART_SetConfig+0x3a6>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x35c>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004393 	.word	0x08004393
 8004358:	08004383 	.word	0x08004383
 800435c:	08004393 	.word	0x08004393
 8004360:	08004393 	.word	0x08004393
 8004364:	08004393 	.word	0x08004393
 8004368:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe fe02 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004370:	61b8      	str	r0, [r7, #24]
        break;
 8004372:	e013      	b.n	800439c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe fe12 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8004378:	61b8      	str	r0, [r7, #24]
        break;
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <UART_SetConfig+0x4c0>)
 800437e:	61bb      	str	r3, [r7, #24]
        break;
 8004380:	e00c      	b.n	800439c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fe fd09 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8004386:	61b8      	str	r0, [r7, #24]
        break;
 8004388:	e008      	b.n	800439c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	61bb      	str	r3, [r7, #24]
        break;
 8004390:	e004      	b.n	800439c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	77bb      	strb	r3, [r7, #30]
        break;
 800439a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d074      	beq.n	800448c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	005a      	lsls	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d916      	bls.n	80043ec <UART_SetConfig+0x400>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d212      	bcs.n	80043ec <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f023 030f 	bic.w	r3, r3, #15
 80043ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b29a      	uxth	r2, r3
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	4313      	orrs	r3, r2
 80043e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	89fa      	ldrh	r2, [r7, #14]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	e04f      	b.n	800448c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	77bb      	strb	r3, [r7, #30]
 80043f0:	e04c      	b.n	800448c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d828      	bhi.n	800444a <UART_SetConfig+0x45e>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x414>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004425 	.word	0x08004425
 8004404:	0800442d 	.word	0x0800442d
 8004408:	08004435 	.word	0x08004435
 800440c:	0800444b 	.word	0x0800444b
 8004410:	0800443b 	.word	0x0800443b
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800444b 	.word	0x0800444b
 800441c:	0800444b 	.word	0x0800444b
 8004420:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe fda6 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e013      	b.n	8004454 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7fe fdb6 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8004430:	61b8      	str	r0, [r7, #24]
        break;
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <UART_SetConfig+0x4c0>)
 8004436:	61bb      	str	r3, [r7, #24]
        break;
 8004438:	e00c      	b.n	8004454 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe fcad 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 800443e:	61b8      	str	r0, [r7, #24]
        break;
 8004440:	e008      	b.n	8004454 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e004      	b.n	8004454 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	77bb      	strb	r3, [r7, #30]
        break;
 8004452:	bf00      	nop
    }

    if (pclk != 0U)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d018      	beq.n	800448c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	085a      	lsrs	r2, r3, #1
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	441a      	add	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b0f      	cmp	r3, #15
 8004472:	d909      	bls.n	8004488 <UART_SetConfig+0x49c>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447a:	d205      	bcs.n	8004488 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	e001      	b.n	800448c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004498:	7fbb      	ldrb	r3, [r7, #30]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40007c00 	.word	0x40007c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400

080044b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ae:	d10a      	bne.n	80045c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004604:	f7fc fb30 	bl	8000c68 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d10e      	bne.n	8004636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f82d 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e023      	b.n	800467e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d10e      	bne.n	8004662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f817 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e00d      	b.n	800467e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b09c      	sub	sp, #112	; 0x70
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	e0a5      	b.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	f000 80a1 	beq.w	80047e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fc fae1 	bl	8000c68 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d13e      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046cc:	667b      	str	r3, [r7, #100]	; 0x64
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e6      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800470a:	64ba      	str	r2, [r7, #72]	; 0x48
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e5      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e067      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d04f      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d147      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
 800477e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b0:	623a      	str	r2, [r7, #32]
 80047b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	69f9      	ldr	r1, [r7, #28]
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e5      	bne.n	8004790 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e010      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	429a      	cmp	r2, r3
 8004800:	f43f af4a 	beq.w	8004698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3770      	adds	r7, #112	; 0x70
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480e:	b480      	push	{r7}
 8004810:	b095      	sub	sp, #84	; 0x54
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	643b      	str	r3, [r7, #64]	; 0x40
 8004836:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800483a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	61fb      	str	r3, [r7, #28]
   return(result);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800486e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	2b01      	cmp	r3, #1
 8004882:	d118      	bne.n	80048b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	60bb      	str	r3, [r7, #8]
   return(result);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f023 0310 	bic.w	r3, r3, #16
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6979      	ldr	r1, [r7, #20]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048c8:	bf00      	nop
 80048ca:	3754      	adds	r7, #84	; 0x54
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fb5a 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	60bb      	str	r3, [r7, #8]
   return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	613b      	str	r3, [r7, #16]
   return(result);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fb26 	bl	8003f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494c:	bf00      	nop
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800495a:	4b8d      	ldr	r3, [pc, #564]	; (8004b90 <MX_LWIP_Init+0x23c>)
 800495c:	22c0      	movs	r2, #192	; 0xc0
 800495e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004960:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004962:	22a8      	movs	r2, #168	; 0xa8
 8004964:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8004966:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004968:	2264      	movs	r2, #100	; 0x64
 800496a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800496c:	4b88      	ldr	r3, [pc, #544]	; (8004b90 <MX_LWIP_Init+0x23c>)
 800496e:	2201      	movs	r2, #1
 8004970:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004972:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <MX_LWIP_Init+0x240>)
 800497a:	22ff      	movs	r2, #255	; 0xff
 800497c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800497e:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004984:	4b83      	ldr	r3, [pc, #524]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004986:	2200      	movs	r2, #0
 8004988:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800498a:	4b83      	ldr	r3, [pc, #524]	; (8004b98 <MX_LWIP_Init+0x244>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004990:	4b81      	ldr	r3, [pc, #516]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004992:	2200      	movs	r2, #0
 8004994:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004996:	4b80      	ldr	r3, [pc, #512]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004998:	2200      	movs	r2, #0
 800499a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800499c:	4b7e      	ldr	r3, [pc, #504]	; (8004b98 <MX_LWIP_Init+0x244>)
 800499e:	2200      	movs	r2, #0
 80049a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80049a2:	f000 fcd7 	bl	8005354 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	061a      	lsls	r2, r3, #24
 80049ac:	4b78      	ldr	r3, [pc, #480]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049b6:	789b      	ldrb	r3, [r3, #2]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	4313      	orrs	r3, r2
 80049bc:	4a74      	ldr	r2, [pc, #464]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049be:	78d2      	ldrb	r2, [r2, #3]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	061a      	lsls	r2, r3, #24
 80049c4:	4b72      	ldr	r3, [pc, #456]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	0619      	lsls	r1, r3, #24
 80049ca:	4b71      	ldr	r3, [pc, #452]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	4319      	orrs	r1, r3
 80049d2:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049d4:	789b      	ldrb	r3, [r3, #2]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	430b      	orrs	r3, r1
 80049da:	496d      	ldr	r1, [pc, #436]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049dc:	78c9      	ldrb	r1, [r1, #3]
 80049de:	430b      	orrs	r3, r1
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049e6:	431a      	orrs	r2, r3
 80049e8:	4b69      	ldr	r3, [pc, #420]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	0619      	lsls	r1, r3, #24
 80049ee:	4b68      	ldr	r3, [pc, #416]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	4319      	orrs	r1, r3
 80049f6:	4b66      	ldr	r3, [pc, #408]	; (8004b90 <MX_LWIP_Init+0x23c>)
 80049f8:	789b      	ldrb	r3, [r3, #2]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	430b      	orrs	r3, r1
 80049fe:	4964      	ldr	r1, [pc, #400]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004a00:	78c9      	ldrb	r1, [r1, #3]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	4b60      	ldr	r3, [pc, #384]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0619      	lsls	r1, r3, #24
 8004a12:	4b5f      	ldr	r3, [pc, #380]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	4319      	orrs	r1, r3
 8004a1a:	4b5d      	ldr	r3, [pc, #372]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	430b      	orrs	r3, r1
 8004a22:	495b      	ldr	r1, [pc, #364]	; (8004b90 <MX_LWIP_Init+0x23c>)
 8004a24:	78c9      	ldrb	r1, [r1, #3]
 8004a26:	430b      	orrs	r3, r1
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	4a5b      	ldr	r2, [pc, #364]	; (8004b9c <MX_LWIP_Init+0x248>)
 8004a2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a30:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	061a      	lsls	r2, r3, #24
 8004a36:	4b57      	ldr	r3, [pc, #348]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	4b55      	ldr	r3, [pc, #340]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a40:	789b      	ldrb	r3, [r3, #2]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	4313      	orrs	r3, r2
 8004a46:	4a53      	ldr	r2, [pc, #332]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a48:	78d2      	ldrb	r2, [r2, #3]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	061a      	lsls	r2, r3, #24
 8004a4e:	4b51      	ldr	r3, [pc, #324]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	0619      	lsls	r1, r3, #24
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	4319      	orrs	r1, r3
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	430b      	orrs	r3, r1
 8004a64:	494b      	ldr	r1, [pc, #300]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a66:	78c9      	ldrb	r1, [r1, #3]
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a70:	431a      	orrs	r2, r3
 8004a72:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	0619      	lsls	r1, r3, #24
 8004a78:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	4319      	orrs	r1, r3
 8004a80:	4b44      	ldr	r3, [pc, #272]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	430b      	orrs	r3, r1
 8004a88:	4942      	ldr	r1, [pc, #264]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a8a:	78c9      	ldrb	r1, [r1, #3]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a94:	431a      	orrs	r2, r3
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	0619      	lsls	r1, r3, #24
 8004a9c:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	4319      	orrs	r1, r3
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	4939      	ldr	r1, [pc, #228]	; (8004b94 <MX_LWIP_Init+0x240>)
 8004aae:	78c9      	ldrb	r1, [r1, #3]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	0e1b      	lsrs	r3, r3, #24
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <MX_LWIP_Init+0x24c>)
 8004ab8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	061a      	lsls	r2, r3, #24
 8004ac0:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004aca:	789b      	ldrb	r3, [r3, #2]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004ad2:	78d2      	ldrb	r2, [r2, #3]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	061a      	lsls	r2, r3, #24
 8004ad8:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	0619      	lsls	r1, r3, #24
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	4319      	orrs	r1, r3
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004ae8:	789b      	ldrb	r3, [r3, #2]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	430b      	orrs	r3, r1
 8004aee:	492a      	ldr	r1, [pc, #168]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004af0:	78c9      	ldrb	r1, [r1, #3]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004afa:	431a      	orrs	r2, r3
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	0619      	lsls	r1, r3, #24
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	4319      	orrs	r1, r3
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	430b      	orrs	r3, r1
 8004b12:	4921      	ldr	r1, [pc, #132]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b14:	78c9      	ldrb	r1, [r1, #3]
 8004b16:	430b      	orrs	r3, r1
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0619      	lsls	r1, r3, #24
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	4319      	orrs	r1, r3
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	430b      	orrs	r3, r1
 8004b36:	4918      	ldr	r1, [pc, #96]	; (8004b98 <MX_LWIP_Init+0x244>)
 8004b38:	78c9      	ldrb	r1, [r1, #3]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	0e1b      	lsrs	r3, r3, #24
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <MX_LWIP_Init+0x250>)
 8004b42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <MX_LWIP_Init+0x254>)
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <MX_LWIP_Init+0x258>)
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <MX_LWIP_Init+0x250>)
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <MX_LWIP_Init+0x24c>)
 8004b54:	4911      	ldr	r1, [pc, #68]	; (8004b9c <MX_LWIP_Init+0x248>)
 8004b56:	4816      	ldr	r0, [pc, #88]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b58:	f001 f8a2 	bl	8005ca0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b5c:	4814      	ldr	r0, [pc, #80]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b5e:	f001 fa51 	bl	8006004 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b74:	480e      	ldr	r0, [pc, #56]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b76:	f001 fa55 	bl	8006024 <netif_set_up>
 8004b7a:	e002      	b.n	8004b82 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b7c:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b7e:	f001 fabd 	bl	80060fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004b82:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <MX_LWIP_Init+0x260>)
 8004b84:	480a      	ldr	r0, [pc, #40]	; (8004bb0 <MX_LWIP_Init+0x25c>)
 8004b86:	f001 faeb 	bl	8006160 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b8a:	bf00      	nop
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	200002dc 	.word	0x200002dc
 8004b94:	200002d8 	.word	0x200002d8
 8004b98:	2000029c 	.word	0x2000029c
 8004b9c:	200002d4 	.word	0x200002d4
 8004ba0:	200002e0 	.word	0x200002e0
 8004ba4:	200002e4 	.word	0x200002e4
 8004ba8:	0800f819 	.word	0x0800f819
 8004bac:	08005181 	.word	0x08005181
 8004bb0:	200002a0 	.word	0x200002a0
 8004bb4:	080051ed 	.word	0x080051ed

08004bb8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004bbc:	4803      	ldr	r0, [pc, #12]	; (8004bcc <MX_LWIP_Process+0x14>)
 8004bbe:	f000 fabf 	bl	8005140 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004bc2:	f008 fa43 	bl	800d04c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200002a0 	.word	0x200002a0

08004bd0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4e      	ldr	r2, [pc, #312]	; (8004d28 <HAL_ETH_MspInit+0x158>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f040 8096 	bne.w	8004d20 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004bf4:	4b4d      	ldr	r3, [pc, #308]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a4c      	ldr	r2, [pc, #304]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004c00:	4b4a      	ldr	r3, [pc, #296]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	4a46      	ldr	r2, [pc, #280]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c16:	6313      	str	r3, [r2, #48]	; 0x30
 8004c18:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	6313      	str	r3, [r2, #48]	; 0x30
 8004c48:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	4a34      	ldr	r2, [pc, #208]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c60:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	4a2e      	ldr	r2, [pc, #184]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c72:	f043 0302 	orr.w	r3, r3, #2
 8004c76:	6313      	str	r3, [r2, #48]	; 0x30
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_ETH_MspInit+0x15c>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c9c:	2332      	movs	r3, #50	; 0x32
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cac:	230b      	movs	r3, #11
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	481e      	ldr	r0, [pc, #120]	; (8004d30 <HAL_ETH_MspInit+0x160>)
 8004cb8:	f7fd faae 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004cbc:	2386      	movs	r3, #134	; 0x86
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ccc:	230b      	movs	r3, #11
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4817      	ldr	r0, [pc, #92]	; (8004d34 <HAL_ETH_MspInit+0x164>)
 8004cd8:	f7fd fa9e 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cea:	2303      	movs	r3, #3
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cee:	230b      	movs	r3, #11
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480f      	ldr	r0, [pc, #60]	; (8004d38 <HAL_ETH_MspInit+0x168>)
 8004cfa:	f7fd fa8d 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004cfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d10:	230b      	movs	r3, #11
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4808      	ldr	r0, [pc, #32]	; (8004d3c <HAL_ETH_MspInit+0x16c>)
 8004d1c:	f7fd fa7c 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d20:	bf00      	nop
 8004d22:	3738      	adds	r7, #56	; 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40028000 	.word	0x40028000
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40020800 	.word	0x40020800
 8004d34:	40020000 	.word	0x40020000
 8004d38:	40020400 	.word	0x40020400
 8004d3c:	40021800 	.word	0x40021800

08004d40 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <low_level_init+0x144>)
 8004d4e:	4a4e      	ldr	r2, [pc, #312]	; (8004e88 <low_level_init+0x148>)
 8004d50:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d52:	4b4c      	ldr	r3, [pc, #304]	; (8004e84 <low_level_init+0x144>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004d58:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <low_level_init+0x144>)
 8004d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d5e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d60:	4b48      	ldr	r3, [pc, #288]	; (8004e84 <low_level_init+0x144>)
 8004d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d66:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d68:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <low_level_init+0x144>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004d76:	23e1      	movs	r3, #225	; 0xe1
 8004d78:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004d82:	2300      	movs	r3, #0
 8004d84:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004d86:	4a3f      	ldr	r2, [pc, #252]	; (8004e84 <low_level_init+0x144>)
 8004d88:	f107 0308 	add.w	r3, r7, #8
 8004d8c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <low_level_init+0x144>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <low_level_init+0x144>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <low_level_init+0x144>)
 8004d9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004da0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004da2:	4838      	ldr	r0, [pc, #224]	; (8004e84 <low_level_init+0x144>)
 8004da4:	f7fc f934 	bl	8001010 <HAL_ETH_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004db8:	f043 0304 	orr.w	r3, r3, #4
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <low_level_init+0x14c>)
 8004dc8:	4931      	ldr	r1, [pc, #196]	; (8004e90 <low_level_init+0x150>)
 8004dca:	482e      	ldr	r0, [pc, #184]	; (8004e84 <low_level_init+0x144>)
 8004dcc:	f7fc faba 	bl	8001344 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	4a30      	ldr	r2, [pc, #192]	; (8004e94 <low_level_init+0x154>)
 8004dd4:	4930      	ldr	r1, [pc, #192]	; (8004e98 <low_level_init+0x158>)
 8004dd6:	482b      	ldr	r0, [pc, #172]	; (8004e84 <low_level_init+0x144>)
 8004dd8:	f7fc fb1d 	bl	8001416 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2206      	movs	r2, #6
 8004de0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <low_level_init+0x144>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <low_level_init+0x144>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	785a      	ldrb	r2, [r3, #1]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004dfc:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <low_level_init+0x144>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	789a      	ldrb	r2, [r3, #2]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <low_level_init+0x144>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	78da      	ldrb	r2, [r3, #3]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <low_level_init+0x144>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	791a      	ldrb	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e20:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <low_level_init+0x144>)
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	795a      	ldrb	r2, [r3, #5]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e32:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e3a:	f043 030a 	orr.w	r3, r3, #10
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e46:	480f      	ldr	r0, [pc, #60]	; (8004e84 <low_level_init+0x144>)
 8004e48:	f7fc fd8e 	bl	8001968 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	461a      	mov	r2, r3
 8004e52:	211d      	movs	r1, #29
 8004e54:	480b      	ldr	r0, [pc, #44]	; (8004e84 <low_level_init+0x144>)
 8004e56:	f7fc fcb9 	bl	80017cc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f043 030b 	orr.w	r3, r3, #11
 8004e60:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	461a      	mov	r2, r3
 8004e66:	211d      	movs	r1, #29
 8004e68:	4806      	ldr	r0, [pc, #24]	; (8004e84 <low_level_init+0x144>)
 8004e6a:	f7fc fd17 	bl	800189c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004e6e:	f107 0310 	add.w	r3, r7, #16
 8004e72:	461a      	mov	r2, r3
 8004e74:	211d      	movs	r1, #29
 8004e76:	4803      	ldr	r0, [pc, #12]	; (8004e84 <low_level_init+0x144>)
 8004e78:	f7fc fca8 	bl	80017cc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e7c:	bf00      	nop
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20001bb8 	.word	0x20001bb8
 8004e88:	40028000 	.word	0x40028000
 8004e8c:	20001c00 	.word	0x20001c00
 8004e90:	200002e8 	.word	0x200002e8
 8004e94:	20000368 	.word	0x20000368
 8004e98:	20001b38 	.word	0x20001b38

08004e9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004ea6:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <low_level_output+0x138>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004ebe:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <low_level_output+0x138>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	e05a      	b.n	8004f84 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da03      	bge.n	8004ede <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004ed6:	23f8      	movs	r3, #248	; 0xf8
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004edc:	e05c      	b.n	8004f98 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	895b      	ldrh	r3, [r3, #10]
 8004ee2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ee8:	e02f      	b.n	8004f4a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	18d0      	adds	r0, r2, r3
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	18d1      	adds	r1, r2, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	f00a ff87 	bl	800fe14 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da03      	bge.n	8004f1c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f14:	23f8      	movs	r3, #248	; 0xf8
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f1a:	e03d      	b.n	8004f98 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f2c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f38:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f44:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d8c8      	bhi.n	8004eea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	18d0      	adds	r0, r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f00a ff53 	bl	800fe14 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1a1      	bne.n	8004ece <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	4811      	ldr	r0, [pc, #68]	; (8004fd4 <low_level_output+0x138>)
 8004f8e:	f7fc faaf 	bl	80014f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <low_level_output+0x138>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004fa0:	4413      	add	r3, r2
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <low_level_output+0x138>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	f241 0314 	movw	r3, #4116	; 0x1014
 8004fb4:	4413      	add	r3, r2
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <low_level_output+0x138>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f241 0304 	movw	r3, #4100	; 0x1004
 8004fc2:	4413      	add	r3, r2
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004fc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20001bb8 	.word	0x20001bb8

08004fd8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004ffc:	484f      	ldr	r0, [pc, #316]	; (800513c <low_level_input+0x164>)
 8004ffe:	f7fc fb61 	bl	80016c4 <HAL_ETH_GetReceivedFrame>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <low_level_input+0x34>

    return NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	e092      	b.n	8005132 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <low_level_input+0x164>)
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <low_level_input+0x164>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800501e:	89fb      	ldrh	r3, [r7, #14]
 8005020:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005024:	4619      	mov	r1, r3
 8005026:	2000      	movs	r0, #0
 8005028:	f001 f936 	bl	8006298 <pbuf_alloc>
 800502c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d04b      	beq.n	80050cc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <low_level_input+0x164>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 8005042:	e040      	b.n	80050c6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	895b      	ldrh	r3, [r3, #10]
 8005048:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800504e:	e021      	b.n	8005094 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	18d0      	adds	r0, r2, r3
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	18d1      	adds	r1, r2, r3
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	461a      	mov	r2, r3
 8005068:	f00a fed4 	bl	800fe14 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	4413      	add	r3, r2
 800507e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005082:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800508e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800509e:	4293      	cmp	r3, r2
 80050a0:	d8d6      	bhi.n	8005050 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	18d0      	adds	r0, r2, r3
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4619      	mov	r1, r3
 80050b4:	f00a feae 	bl	800fe14 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4413      	add	r3, r2
 80050be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1bb      	bne.n	8005044 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <low_level_input+0x164>)
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	e00b      	b.n	80050f0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <low_level_input+0x164>)
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d3ee      	bcc.n	80050d8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <low_level_input+0x164>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005100:	4b0e      	ldr	r3, [pc, #56]	; (800513c <low_level_input+0x164>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f241 0314 	movw	r3, #4116	; 0x1014
 8005108:	4413      	add	r3, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <low_level_input+0x164>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	f241 0314 	movw	r3, #4116	; 0x1014
 800511c:	4413      	add	r3, r2
 800511e:	2280      	movs	r2, #128	; 0x80
 8005120:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <low_level_input+0x164>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	f241 0308 	movw	r3, #4104	; 0x1008
 800512a:	4413      	add	r3, r2
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005132:	4618      	mov	r0, r3
 8005134:	3730      	adds	r7, #48	; 0x30
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20001bb8 	.word	0x20001bb8

08005140 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff45 	bl	8004fd8 <low_level_input>
 800514e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	4798      	blx	r3
 8005160:	4603      	mov	r3, r0
 8005162:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005164:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f001 fb77 	bl	8006860 <pbuf_free>
    p = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e000      	b.n	800517a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005178:	bf00      	nop
  }
}
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <ethernetif_init+0x1c>
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <ethernetif_init+0x48>)
 8005190:	f240 2212 	movw	r2, #530	; 0x212
 8005194:	490d      	ldr	r1, [pc, #52]	; (80051cc <ethernetif_init+0x4c>)
 8005196:	480e      	ldr	r0, [pc, #56]	; (80051d0 <ethernetif_init+0x50>)
 8005198:	f00a fe52 	bl	800fe40 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2273      	movs	r2, #115	; 0x73
 80051a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2274      	movs	r2, #116	; 0x74
 80051a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <ethernetif_init+0x54>)
 80051b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <ethernetif_init+0x58>)
 80051b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fdc1 	bl	8004d40 <low_level_init>

  return ERR_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	08010f78 	.word	0x08010f78
 80051cc:	08010f94 	.word	0x08010f94
 80051d0:	08010fa4 	.word	0x08010fa4
 80051d4:	0800dcdd 	.word	0x0800dcdd
 80051d8:	08004e9d 	.word	0x08004e9d

080051dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051e0:	f7fb fd42 	bl	8000c68 <HAL_GetTick>
 80051e4:	4603      	mov	r3, r0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d05d      	beq.n	80052ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <ethernetif_update_config+0xf4>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d03f      	beq.n	8005296 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800521a:	2100      	movs	r1, #0
 800521c:	4830      	ldr	r0, [pc, #192]	; (80052e0 <ethernetif_update_config+0xf4>)
 800521e:	f7fc fb3d 	bl	800189c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005222:	f7fb fd21 	bl	8000c68 <HAL_GetTick>
 8005226:	4603      	mov	r3, r0
 8005228:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	461a      	mov	r2, r3
 8005230:	2101      	movs	r1, #1
 8005232:	482b      	ldr	r0, [pc, #172]	; (80052e0 <ethernetif_update_config+0xf4>)
 8005234:	f7fc faca 	bl	80017cc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005238:	f7fb fd16 	bl	8000c68 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005246:	d828      	bhi.n	800529a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0eb      	beq.n	800522a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	461a      	mov	r2, r3
 8005258:	2110      	movs	r1, #16
 800525a:	4821      	ldr	r0, [pc, #132]	; (80052e0 <ethernetif_update_config+0xf4>)
 800525c:	f7fc fab6 	bl	80017cc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <ethernetif_update_config+0xf4>)
 800526c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	e002      	b.n	800527a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <ethernetif_update_config+0xf4>)
 8005276:	2200      	movs	r2, #0
 8005278:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005284:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <ethernetif_update_config+0xf4>)
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
 800528a:	e016      	b.n	80052ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <ethernetif_update_config+0xf4>)
 800528e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	e011      	b.n	80052ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <ethernetif_update_config+0xb0>
          goto error;
 800529a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <ethernetif_update_config+0xf4>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <ethernetif_update_config+0xf4>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	2100      	movs	r1, #0
 80052b4:	480a      	ldr	r0, [pc, #40]	; (80052e0 <ethernetif_update_config+0xf4>)
 80052b6:	f7fc faf1 	bl	800189c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80052ba:	2100      	movs	r1, #0
 80052bc:	4808      	ldr	r0, [pc, #32]	; (80052e0 <ethernetif_update_config+0xf4>)
 80052be:	f7fc fbb1 	bl	8001a24 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80052c2:	4807      	ldr	r0, [pc, #28]	; (80052e0 <ethernetif_update_config+0xf4>)
 80052c4:	f7fc fb50 	bl	8001968 <HAL_ETH_Start>
 80052c8:	e002      	b.n	80052d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80052ca:	4805      	ldr	r0, [pc, #20]	; (80052e0 <ethernetif_update_config+0xf4>)
 80052cc:	f7fc fb7b 	bl	80019c6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f807 	bl	80052e4 <ethernetif_notify_conn_changed>
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20001bb8 	.word	0x20001bb8

080052e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	b21a      	sxth	r2, r3
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	b29b      	uxth	r3, r3
 800530e:	b21b      	sxth	r3, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	b21b      	sxth	r3, r3
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	061a      	lsls	r2, r3, #24
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0e1b      	lsrs	r3, r3, #24
 8005346:	4313      	orrs	r3, r2
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800535e:	f000 f8d5 	bl	800550c <mem_init>
  memp_init();
 8005362:	f000 fbdb 	bl	8005b1c <memp_init>
  pbuf_init();
  netif_init();
 8005366:	f000 fc93 	bl	8005c90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800536a:	f007 feb1 	bl	800d0d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800536e:	f001 fd15 	bl	8006d9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005372:	f007 fe23 	bl	800cfbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <ptr_to_mem+0x20>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	4413      	add	r3, r2
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000098 	.word	0x20000098

080053a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <mem_to_ptr+0x20>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	b29b      	uxth	r3, r3
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000098 	.word	0x20000098

080053c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80053d0:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <plug_holes+0x120>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d206      	bcs.n	80053e8 <plug_holes+0x20>
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <plug_holes+0x124>)
 80053dc:	f240 12df 	movw	r2, #479	; 0x1df
 80053e0:	4943      	ldr	r1, [pc, #268]	; (80054f0 <plug_holes+0x128>)
 80053e2:	4844      	ldr	r0, [pc, #272]	; (80054f4 <plug_holes+0x12c>)
 80053e4:	f00a fd2c 	bl	800fe40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80053e8:	4b43      	ldr	r3, [pc, #268]	; (80054f8 <plug_holes+0x130>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d306      	bcc.n	8005400 <plug_holes+0x38>
 80053f2:	4b3e      	ldr	r3, [pc, #248]	; (80054ec <plug_holes+0x124>)
 80053f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80053f8:	4940      	ldr	r1, [pc, #256]	; (80054fc <plug_holes+0x134>)
 80053fa:	483e      	ldr	r0, [pc, #248]	; (80054f4 <plug_holes+0x12c>)
 80053fc:	f00a fd20 	bl	800fe40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <plug_holes+0x4e>
 8005408:	4b38      	ldr	r3, [pc, #224]	; (80054ec <plug_holes+0x124>)
 800540a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800540e:	493c      	ldr	r1, [pc, #240]	; (8005500 <plug_holes+0x138>)
 8005410:	4838      	ldr	r0, [pc, #224]	; (80054f4 <plug_holes+0x12c>)
 8005412:	f00a fd15 	bl	800fe40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800541e:	d906      	bls.n	800542e <plug_holes+0x66>
 8005420:	4b32      	ldr	r3, [pc, #200]	; (80054ec <plug_holes+0x124>)
 8005422:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005426:	4937      	ldr	r1, [pc, #220]	; (8005504 <plug_holes+0x13c>)
 8005428:	4832      	ldr	r0, [pc, #200]	; (80054f4 <plug_holes+0x12c>)
 800542a:	f00a fd09 	bl	800fe40 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ffa4 	bl	8005380 <ptr_to_mem>
 8005438:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	429a      	cmp	r2, r3
 8005440:	d024      	beq.n	800548c <plug_holes+0xc4>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d120      	bne.n	800548c <plug_holes+0xc4>
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <plug_holes+0x130>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	429a      	cmp	r2, r3
 8005452:	d01b      	beq.n	800548c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <plug_holes+0x140>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	429a      	cmp	r2, r3
 800545c:	d102      	bne.n	8005464 <plug_holes+0x9c>
      lfree = mem;
 800545e:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <plug_holes+0x140>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005474:	d00a      	beq.n	800548c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff ff80 	bl	8005380 <ptr_to_mem>
 8005480:	4604      	mov	r4, r0
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff ff8e 	bl	80053a4 <mem_to_ptr>
 8005488:	4603      	mov	r3, r0
 800548a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	885b      	ldrh	r3, [r3, #2]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff75 	bl	8005380 <ptr_to_mem>
 8005496:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d01f      	beq.n	80054e0 <plug_holes+0x118>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	791b      	ldrb	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11b      	bne.n	80054e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80054a8:	4b17      	ldr	r3, [pc, #92]	; (8005508 <plug_holes+0x140>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d102      	bne.n	80054b8 <plug_holes+0xf0>
      lfree = pmem;
 80054b2:	4a15      	ldr	r2, [pc, #84]	; (8005508 <plug_holes+0x140>)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054c8:	d00a      	beq.n	80054e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff56 	bl	8005380 <ptr_to_mem>
 80054d4:	4604      	mov	r4, r0
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f7ff ff64 	bl	80053a4 <mem_to_ptr>
 80054dc:	4603      	mov	r3, r0
 80054de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd90      	pop	{r4, r7, pc}
 80054e8:	20000098 	.word	0x20000098
 80054ec:	08010fcc 	.word	0x08010fcc
 80054f0:	08010ffc 	.word	0x08010ffc
 80054f4:	08011014 	.word	0x08011014
 80054f8:	2000009c 	.word	0x2000009c
 80054fc:	0801103c 	.word	0x0801103c
 8005500:	08011058 	.word	0x08011058
 8005504:	08011074 	.word	0x08011074
 8005508:	200000a0 	.word	0x200000a0

0800550c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005512:	4b18      	ldr	r3, [pc, #96]	; (8005574 <mem_init+0x68>)
 8005514:	3303      	adds	r3, #3
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	461a      	mov	r2, r3
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <mem_init+0x6c>)
 800551e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <mem_init+0x6c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800552c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800553a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800553e:	f7ff ff1f 	bl	8005380 <ptr_to_mem>
 8005542:	4603      	mov	r3, r0
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <mem_init+0x70>)
 8005546:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <mem_init+0x70>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2201      	movs	r2, #1
 800554e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <mem_init+0x70>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005558:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <mem_init+0x70>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005562:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <mem_init+0x6c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a05      	ldr	r2, [pc, #20]	; (8005580 <mem_init+0x74>)
 800556a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200033e8 	.word	0x200033e8
 8005578:	20000098 	.word	0x20000098
 800557c:	2000009c 	.word	0x2000009c
 8005580:	200000a0 	.word	0x200000a0

08005584 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff09 	bl	80053a4 <mem_to_ptr>
 8005592:	4603      	mov	r3, r0
 8005594:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fef0 	bl	8005380 <ptr_to_mem>
 80055a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff feea 	bl	8005380 <ptr_to_mem>
 80055ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055b6:	d818      	bhi.n	80055ea <mem_link_valid+0x66>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	885b      	ldrh	r3, [r3, #2]
 80055bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055c0:	d813      	bhi.n	80055ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80055c6:	8afa      	ldrh	r2, [r7, #22]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d004      	beq.n	80055d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	8afa      	ldrh	r2, [r7, #22]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d109      	bne.n	80055ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <mem_link_valid+0x74>)
 80055d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d006      	beq.n	80055ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	885b      	ldrh	r3, [r3, #2]
 80055e4:	8afa      	ldrh	r2, [r7, #22]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d001      	beq.n	80055ee <mem_link_valid+0x6a>
    return 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <mem_link_valid+0x6c>
  }
  return 1;
 80055ee:	2301      	movs	r3, #1
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2000009c 	.word	0x2000009c

080055fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04c      	beq.n	80056a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005614:	4b25      	ldr	r3, [pc, #148]	; (80056ac <mem_free+0xb0>)
 8005616:	f240 2273 	movw	r2, #627	; 0x273
 800561a:	4925      	ldr	r1, [pc, #148]	; (80056b0 <mem_free+0xb4>)
 800561c:	4825      	ldr	r0, [pc, #148]	; (80056b4 <mem_free+0xb8>)
 800561e:	f00a fc0f 	bl	800fe40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005622:	e040      	b.n	80056a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b08      	subs	r3, #8
 8005628:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <mem_free+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d306      	bcc.n	8005642 <mem_free+0x46>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 020c 	add.w	r2, r3, #12
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <mem_free+0xc0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d907      	bls.n	8005652 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005642:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <mem_free+0xb0>)
 8005644:	f240 227f 	movw	r2, #639	; 0x27f
 8005648:	491d      	ldr	r1, [pc, #116]	; (80056c0 <mem_free+0xc4>)
 800564a:	481a      	ldr	r0, [pc, #104]	; (80056b4 <mem_free+0xb8>)
 800564c:	f00a fbf8 	bl	800fe40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005650:	e029      	b.n	80056a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <mem_free+0xb0>)
 800565c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005660:	4918      	ldr	r1, [pc, #96]	; (80056c4 <mem_free+0xc8>)
 8005662:	4814      	ldr	r0, [pc, #80]	; (80056b4 <mem_free+0xb8>)
 8005664:	f00a fbec 	bl	800fe40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005668:	e01d      	b.n	80056a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff8a 	bl	8005584 <mem_link_valid>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <mem_free+0xb0>)
 8005678:	f240 2295 	movw	r2, #661	; 0x295
 800567c:	4912      	ldr	r1, [pc, #72]	; (80056c8 <mem_free+0xcc>)
 800567e:	480d      	ldr	r0, [pc, #52]	; (80056b4 <mem_free+0xb8>)
 8005680:	f00a fbde 	bl	800fe40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005684:	e00f      	b.n	80056a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <mem_free+0xd0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d202      	bcs.n	800569c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <mem_free+0xd0>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fe93 	bl	80053c8 <plug_holes>
 80056a2:	e000      	b.n	80056a6 <mem_free+0xaa>
    return;
 80056a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	08010fcc 	.word	0x08010fcc
 80056b0:	080110a0 	.word	0x080110a0
 80056b4:	08011014 	.word	0x08011014
 80056b8:	20000098 	.word	0x20000098
 80056bc:	2000009c 	.word	0x2000009c
 80056c0:	080110c4 	.word	0x080110c4
 80056c4:	080110e0 	.word	0x080110e0
 80056c8:	08011108 	.word	0x08011108
 80056cc:	200000a0 	.word	0x200000a0

080056d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80056dc:	887b      	ldrh	r3, [r7, #2]
 80056de:	3303      	adds	r3, #3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	2b0b      	cmp	r3, #11
 80056ec:	d801      	bhi.n	80056f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80056ee:	230c      	movs	r3, #12
 80056f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80056f2:	8bfb      	ldrh	r3, [r7, #30]
 80056f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056f8:	d803      	bhi.n	8005702 <mem_trim+0x32>
 80056fa:	8bfa      	ldrh	r2, [r7, #30]
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d201      	bcs.n	8005706 <mem_trim+0x36>
    return NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	e0cc      	b.n	80058a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005706:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <mem_trim+0x1d8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d304      	bcc.n	800571a <mem_trim+0x4a>
 8005710:	4b66      	ldr	r3, [pc, #408]	; (80058ac <mem_trim+0x1dc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d306      	bcc.n	8005728 <mem_trim+0x58>
 800571a:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <mem_trim+0x1e0>)
 800571c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005720:	4964      	ldr	r1, [pc, #400]	; (80058b4 <mem_trim+0x1e4>)
 8005722:	4865      	ldr	r0, [pc, #404]	; (80058b8 <mem_trim+0x1e8>)
 8005724:	f00a fb8c 	bl	800fe40 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005728:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <mem_trim+0x1d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d304      	bcc.n	800573c <mem_trim+0x6c>
 8005732:	4b5e      	ldr	r3, [pc, #376]	; (80058ac <mem_trim+0x1dc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d301      	bcc.n	8005740 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	e0af      	b.n	80058a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b08      	subs	r3, #8
 8005744:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f7ff fe2c 	bl	80053a4 <mem_to_ptr>
 800574c:	4603      	mov	r3, r0
 800574e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	8afb      	ldrh	r3, [r7, #22]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b08      	subs	r3, #8
 800575c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800575e:	8bfa      	ldrh	r2, [r7, #30]
 8005760:	8abb      	ldrh	r3, [r7, #20]
 8005762:	429a      	cmp	r2, r3
 8005764:	d906      	bls.n	8005774 <mem_trim+0xa4>
 8005766:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <mem_trim+0x1e0>)
 8005768:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800576c:	4953      	ldr	r1, [pc, #332]	; (80058bc <mem_trim+0x1ec>)
 800576e:	4852      	ldr	r0, [pc, #328]	; (80058b8 <mem_trim+0x1e8>)
 8005770:	f00a fb66 	bl	800fe40 <iprintf>
  if (newsize > size) {
 8005774:	8bfa      	ldrh	r2, [r7, #30]
 8005776:	8abb      	ldrh	r3, [r7, #20]
 8005778:	429a      	cmp	r2, r3
 800577a:	d901      	bls.n	8005780 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	e08f      	b.n	80058a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005780:	8bfa      	ldrh	r2, [r7, #30]
 8005782:	8abb      	ldrh	r3, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d101      	bne.n	800578c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	e089      	b.n	80058a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fdf5 	bl	8005380 <ptr_to_mem>
 8005796:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d13f      	bne.n	8005820 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057a8:	d106      	bne.n	80057b8 <mem_trim+0xe8>
 80057aa:	4b41      	ldr	r3, [pc, #260]	; (80058b0 <mem_trim+0x1e0>)
 80057ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80057b0:	4943      	ldr	r1, [pc, #268]	; (80058c0 <mem_trim+0x1f0>)
 80057b2:	4841      	ldr	r0, [pc, #260]	; (80058b8 <mem_trim+0x1e8>)
 80057b4:	f00a fb44 	bl	800fe40 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80057be:	8afa      	ldrh	r2, [r7, #22]
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	4413      	add	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3308      	adds	r3, #8
 80057c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80057ca:	4b3e      	ldr	r3, [pc, #248]	; (80058c4 <mem_trim+0x1f4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d106      	bne.n	80057e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80057d4:	89fb      	ldrh	r3, [r7, #14]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fdd2 	bl	8005380 <ptr_to_mem>
 80057dc:	4603      	mov	r3, r0
 80057de:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <mem_trim+0x1f4>)
 80057e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fdcb 	bl	8005380 <ptr_to_mem>
 80057ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2200      	movs	r2, #0
 80057f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	89ba      	ldrh	r2, [r7, #12]
 80057f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	8afa      	ldrh	r2, [r7, #22]
 80057fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	89fa      	ldrh	r2, [r7, #14]
 8005802:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800580c:	d047      	beq.n	800589e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fdb4 	bl	8005380 <ptr_to_mem>
 8005818:	4602      	mov	r2, r0
 800581a:	89fb      	ldrh	r3, [r7, #14]
 800581c:	8053      	strh	r3, [r2, #2]
 800581e:	e03e      	b.n	800589e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005820:	8bfb      	ldrh	r3, [r7, #30]
 8005822:	f103 0214 	add.w	r2, r3, #20
 8005826:	8abb      	ldrh	r3, [r7, #20]
 8005828:	429a      	cmp	r2, r3
 800582a:	d838      	bhi.n	800589e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800582c:	8afa      	ldrh	r2, [r7, #22]
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	4413      	add	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	3308      	adds	r3, #8
 8005836:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005840:	d106      	bne.n	8005850 <mem_trim+0x180>
 8005842:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <mem_trim+0x1e0>)
 8005844:	f240 3216 	movw	r2, #790	; 0x316
 8005848:	491d      	ldr	r1, [pc, #116]	; (80058c0 <mem_trim+0x1f0>)
 800584a:	481b      	ldr	r0, [pc, #108]	; (80058b8 <mem_trim+0x1e8>)
 800584c:	f00a faf8 	bl	800fe40 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fd94 	bl	8005380 <ptr_to_mem>
 8005858:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800585a:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <mem_trim+0x1f4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d202      	bcs.n	800586a <mem_trim+0x19a>
      lfree = mem2;
 8005864:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <mem_trim+0x1f4>)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2200      	movs	r2, #0
 800586e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	8afa      	ldrh	r2, [r7, #22]
 800587c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	89fa      	ldrh	r2, [r7, #14]
 8005882:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800588c:	d007      	beq.n	800589e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fd74 	bl	8005380 <ptr_to_mem>
 8005898:	4602      	mov	r2, r0
 800589a:	89fb      	ldrh	r3, [r7, #14]
 800589c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800589e:	687b      	ldr	r3, [r7, #4]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000098 	.word	0x20000098
 80058ac:	2000009c 	.word	0x2000009c
 80058b0:	08010fcc 	.word	0x08010fcc
 80058b4:	0801113c 	.word	0x0801113c
 80058b8:	08011014 	.word	0x08011014
 80058bc:	08011154 	.word	0x08011154
 80058c0:	08011174 	.word	0x08011174
 80058c4:	200000a0 	.word	0x200000a0

080058c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <mem_malloc+0x14>
    return NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	e0d9      	b.n	8005a90 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	3303      	adds	r3, #3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80058e8:	8bbb      	ldrh	r3, [r7, #28]
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d801      	bhi.n	80058f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80058ee:	230c      	movs	r3, #12
 80058f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80058f2:	8bbb      	ldrh	r3, [r7, #28]
 80058f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058f8:	d803      	bhi.n	8005902 <mem_malloc+0x3a>
 80058fa:	8bba      	ldrh	r2, [r7, #28]
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d201      	bcs.n	8005906 <mem_malloc+0x3e>
    return NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	e0c4      	b.n	8005a90 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005906:	4b64      	ldr	r3, [pc, #400]	; (8005a98 <mem_malloc+0x1d0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fd4a 	bl	80053a4 <mem_to_ptr>
 8005910:	4603      	mov	r3, r0
 8005912:	83fb      	strh	r3, [r7, #30]
 8005914:	e0b4      	b.n	8005a80 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005916:	8bfb      	ldrh	r3, [r7, #30]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fd31 	bl	8005380 <ptr_to_mem>
 800591e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 80a4 	bne.w	8005a72 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f1a3 0208 	sub.w	r2, r3, #8
 8005938:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800593a:	429a      	cmp	r2, r3
 800593c:	f0c0 8099 	bcc.w	8005a72 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	8bfb      	ldrh	r3, [r7, #30]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f1a3 0208 	sub.w	r2, r3, #8
 800594e:	8bbb      	ldrh	r3, [r7, #28]
 8005950:	3314      	adds	r3, #20
 8005952:	429a      	cmp	r2, r3
 8005954:	d333      	bcc.n	80059be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005956:	8bfa      	ldrh	r2, [r7, #30]
 8005958:	8bbb      	ldrh	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	b29b      	uxth	r3, r3
 800595e:	3308      	adds	r3, #8
 8005960:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005962:	8a7b      	ldrh	r3, [r7, #18]
 8005964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005968:	d106      	bne.n	8005978 <mem_malloc+0xb0>
 800596a:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <mem_malloc+0x1d4>)
 800596c:	f240 3287 	movw	r2, #903	; 0x387
 8005970:	494b      	ldr	r1, [pc, #300]	; (8005aa0 <mem_malloc+0x1d8>)
 8005972:	484c      	ldr	r0, [pc, #304]	; (8005aa4 <mem_malloc+0x1dc>)
 8005974:	f00a fa64 	bl	800fe40 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005978:	8a7b      	ldrh	r3, [r7, #18]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fd00 	bl	8005380 <ptr_to_mem>
 8005980:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8bfa      	ldrh	r2, [r7, #30]
 8005994:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	8a7a      	ldrh	r2, [r7, #18]
 800599a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2201      	movs	r2, #1
 80059a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059aa:	d00b      	beq.n	80059c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fce5 	bl	8005380 <ptr_to_mem>
 80059b6:	4602      	mov	r2, r0
 80059b8:	8a7b      	ldrh	r3, [r7, #18]
 80059ba:	8053      	strh	r3, [r2, #2]
 80059bc:	e002      	b.n	80059c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2201      	movs	r2, #1
 80059c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80059c4:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <mem_malloc+0x1d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d127      	bne.n	8005a1e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80059ce:	4b32      	ldr	r3, [pc, #200]	; (8005a98 <mem_malloc+0x1d0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80059d4:	e005      	b.n	80059e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fcd0 	bl	8005380 <ptr_to_mem>
 80059e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	791b      	ldrb	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <mem_malloc+0x12c>
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <mem_malloc+0x1e0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1f0      	bne.n	80059d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <mem_malloc+0x1d0>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <mem_malloc+0x1d0>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <mem_malloc+0x1e0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d00b      	beq.n	8005a1e <mem_malloc+0x156>
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <mem_malloc+0x1d0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	791b      	ldrb	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <mem_malloc+0x156>
 8005a10:	4b22      	ldr	r3, [pc, #136]	; (8005a9c <mem_malloc+0x1d4>)
 8005a12:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005a16:	4925      	ldr	r1, [pc, #148]	; (8005aac <mem_malloc+0x1e4>)
 8005a18:	4822      	ldr	r0, [pc, #136]	; (8005aa4 <mem_malloc+0x1dc>)
 8005a1a:	f00a fa11 	bl	800fe40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005a1e:	8bba      	ldrh	r2, [r7, #28]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	3308      	adds	r3, #8
 8005a26:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <mem_malloc+0x1e0>)
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d906      	bls.n	8005a3c <mem_malloc+0x174>
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <mem_malloc+0x1d4>)
 8005a30:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005a34:	491e      	ldr	r1, [pc, #120]	; (8005ab0 <mem_malloc+0x1e8>)
 8005a36:	481b      	ldr	r0, [pc, #108]	; (8005aa4 <mem_malloc+0x1dc>)
 8005a38:	f00a fa02 	bl	800fe40 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <mem_malloc+0x18c>
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <mem_malloc+0x1d4>)
 8005a48:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005a4c:	4919      	ldr	r1, [pc, #100]	; (8005ab4 <mem_malloc+0x1ec>)
 8005a4e:	4815      	ldr	r0, [pc, #84]	; (8005aa4 <mem_malloc+0x1dc>)
 8005a50:	f00a f9f6 	bl	800fe40 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <mem_malloc+0x1a4>
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <mem_malloc+0x1d4>)
 8005a60:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005a64:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <mem_malloc+0x1f0>)
 8005a66:	480f      	ldr	r0, [pc, #60]	; (8005aa4 <mem_malloc+0x1dc>)
 8005a68:	f00a f9ea 	bl	800fe40 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	e00e      	b.n	8005a90 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fc83 	bl	8005380 <ptr_to_mem>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a80:	8bfa      	ldrh	r2, [r7, #30]
 8005a82:	8bbb      	ldrh	r3, [r7, #28]
 8005a84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	f4ff af44 	bcc.w	8005916 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200000a0 	.word	0x200000a0
 8005a9c:	08010fcc 	.word	0x08010fcc
 8005aa0:	08011174 	.word	0x08011174
 8005aa4:	08011014 	.word	0x08011014
 8005aa8:	2000009c 	.word	0x2000009c
 8005aac:	08011188 	.word	0x08011188
 8005ab0:	080111a4 	.word	0x080111a4
 8005ab4:	080111d4 	.word	0x080111d4
 8005ab8:	08011204 	.word	0x08011204

08005abc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	3303      	adds	r3, #3
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e011      	b.n	8005b02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	885b      	ldrh	r3, [r3, #2]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	dbe7      	blt.n	8005ade <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b22:	2300      	movs	r3, #0
 8005b24:	80fb      	strh	r3, [r7, #6]
 8005b26:	e009      	b.n	8005b3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <memp_init+0x30>)
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ffc3 	bl	8005abc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	80fb      	strh	r3, [r7, #6]
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d9f2      	bls.n	8005b28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08013a58 	.word	0x08013a58

08005b50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <do_memp_malloc_pool+0x38>
 8005b7a:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <do_memp_malloc_pool+0x48>)
 8005b7c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005b80:	4906      	ldr	r1, [pc, #24]	; (8005b9c <do_memp_malloc_pool+0x4c>)
 8005b82:	4807      	ldr	r0, [pc, #28]	; (8005ba0 <do_memp_malloc_pool+0x50>)
 8005b84:	f00a f95c 	bl	800fe40 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	e000      	b.n	8005b8e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	08011228 	.word	0x08011228
 8005b9c:	08011258 	.word	0x08011258
 8005ba0:	0801127c 	.word	0x0801127c

08005ba4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d908      	bls.n	8005bc6 <memp_malloc+0x22>
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <memp_malloc+0x3c>)
 8005bb6:	f240 1257 	movw	r2, #343	; 0x157
 8005bba:	490a      	ldr	r1, [pc, #40]	; (8005be4 <memp_malloc+0x40>)
 8005bbc:	480a      	ldr	r0, [pc, #40]	; (8005be8 <memp_malloc+0x44>)
 8005bbe:	f00a f93f 	bl	800fe40 <iprintf>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e008      	b.n	8005bd8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	4a08      	ldr	r2, [pc, #32]	; (8005bec <memp_malloc+0x48>)
 8005bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ffbe 	bl	8005b50 <do_memp_malloc_pool>
 8005bd4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08011228 	.word	0x08011228
 8005be4:	080112b8 	.word	0x080112b8
 8005be8:	0801127c 	.word	0x0801127c
 8005bec:	08013a58 	.word	0x08013a58

08005bf0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <do_memp_free_pool+0x22>
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <do_memp_free_pool+0x40>)
 8005c06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005c0a:	490a      	ldr	r1, [pc, #40]	; (8005c34 <do_memp_free_pool+0x44>)
 8005c0c:	480a      	ldr	r0, [pc, #40]	; (8005c38 <do_memp_free_pool+0x48>)
 8005c0e:	f00a f917 	bl	800fe40 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	08011228 	.word	0x08011228
 8005c34:	080112d8 	.word	0x080112d8
 8005c38:	0801127c 	.word	0x0801127c

08005c3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d907      	bls.n	8005c5e <memp_free+0x22>
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <memp_free+0x44>)
 8005c50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005c54:	490b      	ldr	r1, [pc, #44]	; (8005c84 <memp_free+0x48>)
 8005c56:	480c      	ldr	r0, [pc, #48]	; (8005c88 <memp_free+0x4c>)
 8005c58:	f00a f8f2 	bl	800fe40 <iprintf>
 8005c5c:	e00c      	b.n	8005c78 <memp_free+0x3c>

  if (mem == NULL) {
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <memp_free+0x50>)
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff ffbe 	bl	8005bf0 <do_memp_free_pool>
 8005c74:	e000      	b.n	8005c78 <memp_free+0x3c>
    return;
 8005c76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	08011228 	.word	0x08011228
 8005c84:	080112f8 	.word	0x080112f8
 8005c88:	0801127c 	.word	0x0801127c
 8005c8c:	08013a58 	.word	0x08013a58

08005c90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c94:	bf00      	nop
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d108      	bne.n	8005cc6 <netif_add+0x26>
 8005cb4:	4b57      	ldr	r3, [pc, #348]	; (8005e14 <netif_add+0x174>)
 8005cb6:	f240 1227 	movw	r2, #295	; 0x127
 8005cba:	4957      	ldr	r1, [pc, #348]	; (8005e18 <netif_add+0x178>)
 8005cbc:	4857      	ldr	r0, [pc, #348]	; (8005e1c <netif_add+0x17c>)
 8005cbe:	f00a f8bf 	bl	800fe40 <iprintf>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e0a2      	b.n	8005e0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d108      	bne.n	8005cde <netif_add+0x3e>
 8005ccc:	4b51      	ldr	r3, [pc, #324]	; (8005e14 <netif_add+0x174>)
 8005cce:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005cd2:	4953      	ldr	r1, [pc, #332]	; (8005e20 <netif_add+0x180>)
 8005cd4:	4851      	ldr	r0, [pc, #324]	; (8005e1c <netif_add+0x17c>)
 8005cd6:	f00a f8b3 	bl	800fe40 <iprintf>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e096      	b.n	8005e0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ce4:	4b4f      	ldr	r3, [pc, #316]	; (8005e24 <netif_add+0x184>)
 8005ce6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005cee:	4b4d      	ldr	r3, [pc, #308]	; (8005e24 <netif_add+0x184>)
 8005cf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <netif_add+0x184>)
 8005cfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a45      	ldr	r2, [pc, #276]	; (8005e28 <netif_add+0x188>)
 8005d12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <netif_add+0x18c>)
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f913 	bl	8005f70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	4798      	blx	r3
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <netif_add+0xba>
    return NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e058      	b.n	8005e0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d103      	bne.n	8005d6c <netif_add+0xcc>
        netif->num = 0;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <netif_add+0x190>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e02b      	b.n	8005dd0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d106      	bne.n	8005d8e <netif_add+0xee>
 8005d80:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <netif_add+0x174>)
 8005d82:	f240 128b 	movw	r2, #395	; 0x18b
 8005d86:	492b      	ldr	r1, [pc, #172]	; (8005e34 <netif_add+0x194>)
 8005d88:	4824      	ldr	r0, [pc, #144]	; (8005e1c <netif_add+0x17c>)
 8005d8a:	f00a f859 	bl	800fe40 <iprintf>
        num_netifs++;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3301      	adds	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2bff      	cmp	r3, #255	; 0xff
 8005d98:	dd06      	ble.n	8005da8 <netif_add+0x108>
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <netif_add+0x174>)
 8005d9c:	f240 128d 	movw	r2, #397	; 0x18d
 8005da0:	4925      	ldr	r1, [pc, #148]	; (8005e38 <netif_add+0x198>)
 8005da2:	481e      	ldr	r0, [pc, #120]	; (8005e1c <netif_add+0x17c>)
 8005da4:	f00a f84c 	bl	800fe40 <iprintf>
        if (netif2->num == netif->num) {
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d108      	bne.n	8005dca <netif_add+0x12a>
          netif->num++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005dc8:	e005      	b.n	8005dd6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1d0      	bne.n	8005d78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1be      	bne.n	8005d5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005de2:	2bfe      	cmp	r3, #254	; 0xfe
 8005de4:	d103      	bne.n	8005dee <netif_add+0x14e>
    netif_num = 0;
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <netif_add+0x18c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	e006      	b.n	8005dfc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005df4:	3301      	adds	r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <netif_add+0x18c>)
 8005dfa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <netif_add+0x190>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <netif_add+0x190>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08011314 	.word	0x08011314
 8005e18:	080113a8 	.word	0x080113a8
 8005e1c:	08011364 	.word	0x08011364
 8005e20:	080113c4 	.word	0x080113c4
 8005e24:	08013abc 	.word	0x08013abc
 8005e28:	08006183 	.word	0x08006183
 8005e2c:	200000c8 	.word	0x200000c8
 8005e30:	20006904 	.word	0x20006904
 8005e34:	080113e8 	.word	0x080113e8
 8005e38:	080113fc 	.word	0x080113fc

08005e3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f002 fd8f 	bl	800896c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f007 fac7 	bl	800d3e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <netif_do_set_ipaddr+0x20>
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <netif_do_set_ipaddr+0x88>)
 8005e74:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005e78:	491c      	ldr	r1, [pc, #112]	; (8005eec <netif_do_set_ipaddr+0x8c>)
 8005e7a:	481d      	ldr	r0, [pc, #116]	; (8005ef0 <netif_do_set_ipaddr+0x90>)
 8005e7c:	f009 ffe0 	bl	800fe40 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <netif_do_set_ipaddr+0x34>
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <netif_do_set_ipaddr+0x88>)
 8005e88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005e8c:	4917      	ldr	r1, [pc, #92]	; (8005eec <netif_do_set_ipaddr+0x8c>)
 8005e8e:	4818      	ldr	r0, [pc, #96]	; (8005ef0 <netif_do_set_ipaddr+0x90>)
 8005e90:	f009 ffd6 	bl	800fe40 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d01c      	beq.n	8005edc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ffbf 	bl	8005e3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <netif_do_set_ipaddr+0x6a>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	e000      	b.n	8005ecc <netif_do_set_ipaddr+0x6c>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f8d2 	bl	800607c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08011314 	.word	0x08011314
 8005eec:	0801142c 	.word	0x0801142c
 8005ef0:	08011364 	.word	0x08011364

08005ef4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3308      	adds	r3, #8
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d00a      	beq.n	8005f24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <netif_do_set_netmask+0x26>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	e000      	b.n	8005f1c <netif_do_set_netmask+0x28>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	330c      	adds	r3, #12
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d00a      	beq.n	8005f62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <netif_do_set_gw+0x26>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	e000      	b.n	8005f5a <netif_do_set_gw+0x28>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <netif_set_addr+0x90>)
 8005f8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <netif_set_addr+0x90>)
 8005f98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005fa0:	4b17      	ldr	r3, [pc, #92]	; (8006000 <netif_set_addr+0x90>)
 8005fa2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <netif_set_addr+0x42>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <netif_set_addr+0x46>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <netif_set_addr+0x48>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fc0:	f107 0310 	add.w	r3, r7, #16
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff49 	bl	8005e60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff ff8e 	bl	8005ef4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff ffa8 	bl	8005f32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	461a      	mov	r2, r3
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff35 	bl	8005e60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005ff6:	bf00      	nop
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08013abc 	.word	0x08013abc

08006004 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800600c:	4a04      	ldr	r2, [pc, #16]	; (8006020 <netif_set_default+0x1c>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20006908 	.word	0x20006908

08006024 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <netif_set_up+0x1e>
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <netif_set_up+0x4c>)
 8006034:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006038:	490e      	ldr	r1, [pc, #56]	; (8006074 <netif_set_up+0x50>)
 800603a:	480f      	ldr	r0, [pc, #60]	; (8006078 <netif_set_up+0x54>)
 800603c:	f009 ff00 	bl	800fe40 <iprintf>
 8006040:	e013      	b.n	800606a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10c      	bne.n	800606a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006062:	2103      	movs	r1, #3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f809 	bl	800607c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	08011314 	.word	0x08011314
 8006074:	0801149c 	.word	0x0801149c
 8006078:	08011364 	.word	0x08011364

0800607c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <netif_issue_reports+0x20>
 800608e:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <netif_issue_reports+0x74>)
 8006090:	f240 326d 	movw	r2, #877	; 0x36d
 8006094:	4917      	ldr	r1, [pc, #92]	; (80060f4 <netif_issue_reports+0x78>)
 8006096:	4818      	ldr	r0, [pc, #96]	; (80060f8 <netif_issue_reports+0x7c>)
 8006098:	f009 fed2 	bl	800fe40 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01e      	beq.n	80060e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d017      	beq.n	80060e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d013      	beq.n	80060ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f008 f8e9 	bl	800e2b8 <etharp_request>
 80060e6:	e000      	b.n	80060ea <netif_issue_reports+0x6e>
    return;
 80060e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	08011314 	.word	0x08011314
 80060f4:	080114b8 	.word	0x080114b8
 80060f8:	08011364 	.word	0x08011364

080060fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <netif_set_down+0x1e>
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <netif_set_down+0x58>)
 800610c:	f240 329b 	movw	r2, #923	; 0x39b
 8006110:	4911      	ldr	r1, [pc, #68]	; (8006158 <netif_set_down+0x5c>)
 8006112:	4812      	ldr	r0, [pc, #72]	; (800615c <netif_set_down+0x60>)
 8006114:	f009 fe94 	bl	800fe40 <iprintf>
 8006118:	e019      	b.n	800614e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d012      	beq.n	800614e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	b2da      	uxtb	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f007 fc73 	bl	800da34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	08011314 	.word	0x08011314
 8006158:	080114dc 	.word	0x080114dc
 800615c:	08011364 	.word	0x08011364

08006160 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	61da      	str	r2, [r3, #28]
  }
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800618e:	f06f 030b 	mvn.w	r3, #11
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80061b0:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <netif_get_by_index+0x48>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e00c      	b.n	80061d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061be:	3301      	adds	r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	79fa      	ldrb	r2, [r7, #7]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d101      	bne.n	80061cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	e006      	b.n	80061da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ef      	bne.n	80061b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20006904 	.word	0x20006904

080061ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <pbuf_free_ooseq+0x38>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <pbuf_free_ooseq+0x3c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	607b      	str	r3, [r7, #4]
 80061fe:	e00a      	b.n	8006216 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 fbed 	bl	80089e8 <tcp_free_ooseq>
      return;
 800620e:	e005      	b.n	800621c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f1      	bne.n	8006200 <pbuf_free_ooseq+0x14>
    }
  }
}
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	2000690c 	.word	0x2000690c
 8006228:	20006914 	.word	0x20006914

0800622c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <pbuf_pool_is_empty+0x14>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	2000690c 	.word	0x2000690c

08006244 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4611      	mov	r1, r2
 8006250:	461a      	mov	r2, r3
 8006252:	460b      	mov	r3, r1
 8006254:	80fb      	strh	r3, [r7, #6]
 8006256:	4613      	mov	r3, r2
 8006258:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88ba      	ldrh	r2, [r7, #4]
 8006270:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006272:	8b3b      	ldrh	r3, [r7, #24]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7f3a      	ldrb	r2, [r7, #28]
 800627e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	73da      	strb	r2, [r3, #15]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08c      	sub	sp, #48	; 0x30
 800629c:	af02      	add	r7, sp, #8
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
 80062a2:	460b      	mov	r3, r1
 80062a4:	80bb      	strh	r3, [r7, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80062b4:	d07f      	beq.n	80063b6 <pbuf_alloc+0x11e>
 80062b6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80062ba:	f300 80c8 	bgt.w	800644e <pbuf_alloc+0x1b6>
 80062be:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80062c2:	d010      	beq.n	80062e6 <pbuf_alloc+0x4e>
 80062c4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80062c8:	f300 80c1 	bgt.w	800644e <pbuf_alloc+0x1b6>
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d002      	beq.n	80062d6 <pbuf_alloc+0x3e>
 80062d0:	2b41      	cmp	r3, #65	; 0x41
 80062d2:	f040 80bc 	bne.w	800644e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	88bb      	ldrh	r3, [r7, #4]
 80062da:	4619      	mov	r1, r3
 80062dc:	2000      	movs	r0, #0
 80062de:	f000 f8d1 	bl	8006484 <pbuf_alloc_reference>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80062e4:	e0bd      	b.n	8006462 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062f2:	2008      	movs	r0, #8
 80062f4:	f7ff fc56 	bl	8005ba4 <memp_malloc>
 80062f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006300:	f7ff ff94 	bl	800622c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <pbuf_alloc+0x78>
            pbuf_free(p);
 800630a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800630c:	f000 faa8 	bl	8006860 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	e0a7      	b.n	8006464 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006316:	3303      	adds	r3, #3
 8006318:	b29b      	uxth	r3, r3
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	b29b      	uxth	r3, r3
 8006320:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006324:	b29b      	uxth	r3, r3
 8006326:	8b7a      	ldrh	r2, [r7, #26]
 8006328:	4293      	cmp	r3, r2
 800632a:	bf28      	it	cs
 800632c:	4613      	movcs	r3, r2
 800632e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006332:	3310      	adds	r3, #16
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	3303      	adds	r3, #3
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	4618      	mov	r0, r3
 8006340:	89f9      	ldrh	r1, [r7, #14]
 8006342:	8b7a      	ldrh	r2, [r7, #26]
 8006344:	2300      	movs	r3, #0
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	887b      	ldrh	r3, [r7, #2]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	460b      	mov	r3, r1
 800634e:	4601      	mov	r1, r0
 8006350:	6938      	ldr	r0, [r7, #16]
 8006352:	f7ff ff77 	bl	8006244 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d006      	beq.n	8006370 <pbuf_alloc+0xd8>
 8006362:	4b42      	ldr	r3, [pc, #264]	; (800646c <pbuf_alloc+0x1d4>)
 8006364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006368:	4941      	ldr	r1, [pc, #260]	; (8006470 <pbuf_alloc+0x1d8>)
 800636a:	4842      	ldr	r0, [pc, #264]	; (8006474 <pbuf_alloc+0x1dc>)
 800636c:	f009 fd68 	bl	800fe40 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006372:	3303      	adds	r3, #3
 8006374:	f023 0303 	bic.w	r3, r3, #3
 8006378:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800637c:	d106      	bne.n	800638c <pbuf_alloc+0xf4>
 800637e:	4b3b      	ldr	r3, [pc, #236]	; (800646c <pbuf_alloc+0x1d4>)
 8006380:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006384:	493c      	ldr	r1, [pc, #240]	; (8006478 <pbuf_alloc+0x1e0>)
 8006386:	483b      	ldr	r0, [pc, #236]	; (8006474 <pbuf_alloc+0x1dc>)
 8006388:	f009 fd5a 	bl	800fe40 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	e002      	b.n	800639e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80063a2:	8b7a      	ldrh	r2, [r7, #26]
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80063ae:	8b7b      	ldrh	r3, [r7, #26]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d19e      	bne.n	80062f2 <pbuf_alloc+0x5a>
      break;
 80063b4:	e055      	b.n	8006462 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80063b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063b8:	3303      	adds	r3, #3
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	88bb      	ldrh	r3, [r7, #4]
 80063c4:	3303      	adds	r3, #3
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f023 0303 	bic.w	r3, r3, #3
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80063d2:	8b3b      	ldrh	r3, [r7, #24]
 80063d4:	3310      	adds	r3, #16
 80063d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063d8:	8b3a      	ldrh	r2, [r7, #24]
 80063da:	88bb      	ldrh	r3, [r7, #4]
 80063dc:	3303      	adds	r3, #3
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d306      	bcc.n	80063f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80063e6:	8afa      	ldrh	r2, [r7, #22]
 80063e8:	88bb      	ldrh	r3, [r7, #4]
 80063ea:	3303      	adds	r3, #3
 80063ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d201      	bcs.n	80063f8 <pbuf_alloc+0x160>
        return NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e035      	b.n	8006464 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063f8:	8afb      	ldrh	r3, [r7, #22]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fa64 	bl	80058c8 <mem_malloc>
 8006400:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <pbuf_alloc+0x174>
        return NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	e02b      	b.n	8006464 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800640c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800640e:	3310      	adds	r3, #16
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	4413      	add	r3, r2
 8006414:	3303      	adds	r3, #3
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	4618      	mov	r0, r3
 800641c:	88b9      	ldrh	r1, [r7, #4]
 800641e:	88ba      	ldrh	r2, [r7, #4]
 8006420:	2300      	movs	r3, #0
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	887b      	ldrh	r3, [r7, #2]
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	460b      	mov	r3, r1
 800642a:	4601      	mov	r1, r0
 800642c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800642e:	f7ff ff09 	bl	8006244 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <pbuf_alloc+0x1c8>
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <pbuf_alloc+0x1d4>)
 8006440:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006444:	490d      	ldr	r1, [pc, #52]	; (800647c <pbuf_alloc+0x1e4>)
 8006446:	480b      	ldr	r0, [pc, #44]	; (8006474 <pbuf_alloc+0x1dc>)
 8006448:	f009 fcfa 	bl	800fe40 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800644c:	e008      	b.n	8006460 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <pbuf_alloc+0x1d4>)
 8006450:	f240 1227 	movw	r2, #295	; 0x127
 8006454:	490a      	ldr	r1, [pc, #40]	; (8006480 <pbuf_alloc+0x1e8>)
 8006456:	4807      	ldr	r0, [pc, #28]	; (8006474 <pbuf_alloc+0x1dc>)
 8006458:	f009 fcf2 	bl	800fe40 <iprintf>
      return NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	e001      	b.n	8006464 <pbuf_alloc+0x1cc>
      break;
 8006460:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	; 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	08011544 	.word	0x08011544
 8006470:	08011574 	.word	0x08011574
 8006474:	080115a4 	.word	0x080115a4
 8006478:	080115cc 	.word	0x080115cc
 800647c:	08011600 	.word	0x08011600
 8006480:	0801162c 	.word	0x0801162c

08006484 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	807b      	strh	r3, [r7, #2]
 8006490:	4613      	mov	r3, r2
 8006492:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006494:	883b      	ldrh	r3, [r7, #0]
 8006496:	2b41      	cmp	r3, #65	; 0x41
 8006498:	d009      	beq.n	80064ae <pbuf_alloc_reference+0x2a>
 800649a:	883b      	ldrh	r3, [r7, #0]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d006      	beq.n	80064ae <pbuf_alloc_reference+0x2a>
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <pbuf_alloc_reference+0x5c>)
 80064a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80064a6:	490f      	ldr	r1, [pc, #60]	; (80064e4 <pbuf_alloc_reference+0x60>)
 80064a8:	480f      	ldr	r0, [pc, #60]	; (80064e8 <pbuf_alloc_reference+0x64>)
 80064aa:	f009 fcc9 	bl	800fe40 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80064ae:	2007      	movs	r0, #7
 80064b0:	f7ff fb78 	bl	8005ba4 <memp_malloc>
 80064b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	e00b      	b.n	80064d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80064c0:	8879      	ldrh	r1, [r7, #2]
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	2300      	movs	r3, #0
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	883b      	ldrh	r3, [r7, #0]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	460b      	mov	r3, r1
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff feb7 	bl	8006244 <pbuf_init_alloced_pbuf>
  return p;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	08011544 	.word	0x08011544
 80064e4:	08011648 	.word	0x08011648
 80064e8:	080115a4 	.word	0x080115a4

080064ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	607b      	str	r3, [r7, #4]
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	460b      	mov	r3, r1
 80064fa:	81bb      	strh	r3, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006504:	8a7b      	ldrh	r3, [r7, #18]
 8006506:	3303      	adds	r3, #3
 8006508:	f023 0203 	bic.w	r2, r3, #3
 800650c:	89bb      	ldrh	r3, [r7, #12]
 800650e:	441a      	add	r2, r3
 8006510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	e018      	b.n	800654c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006520:	8a7b      	ldrh	r3, [r7, #18]
 8006522:	3303      	adds	r3, #3
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	6a3a      	ldr	r2, [r7, #32]
 800652a:	4413      	add	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e001      	b.n	8006534 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	89b9      	ldrh	r1, [r7, #12]
 8006538:	89ba      	ldrh	r2, [r7, #12]
 800653a:	2302      	movs	r3, #2
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	460b      	mov	r3, r1
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	f7ff fe7d 	bl	8006244 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800654a:	687b      	ldr	r3, [r7, #4]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <pbuf_realloc+0x20>
 8006566:	4b3a      	ldr	r3, [pc, #232]	; (8006650 <pbuf_realloc+0xfc>)
 8006568:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800656c:	4939      	ldr	r1, [pc, #228]	; (8006654 <pbuf_realloc+0x100>)
 800656e:	483a      	ldr	r0, [pc, #232]	; (8006658 <pbuf_realloc+0x104>)
 8006570:	f009 fc66 	bl	800fe40 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	891b      	ldrh	r3, [r3, #8]
 8006578:	887a      	ldrh	r2, [r7, #2]
 800657a:	429a      	cmp	r2, r3
 800657c:	d263      	bcs.n	8006646 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	891a      	ldrh	r2, [r3, #8]
 8006582:	887b      	ldrh	r3, [r7, #2]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	817b      	strh	r3, [r7, #10]
  q = p;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006590:	e018      	b.n	80065c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	895b      	ldrh	r3, [r3, #10]
 8006596:	897a      	ldrh	r2, [r7, #10]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	891a      	ldrh	r2, [r3, #8]
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <pbuf_realloc+0x70>
 80065b6:	4b26      	ldr	r3, [pc, #152]	; (8006650 <pbuf_realloc+0xfc>)
 80065b8:	f240 12af 	movw	r2, #431	; 0x1af
 80065bc:	4927      	ldr	r1, [pc, #156]	; (800665c <pbuf_realloc+0x108>)
 80065be:	4826      	ldr	r0, [pc, #152]	; (8006658 <pbuf_realloc+0x104>)
 80065c0:	f009 fc3e 	bl	800fe40 <iprintf>
  while (rem_len > q->len) {
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	895b      	ldrh	r3, [r3, #10]
 80065c8:	897a      	ldrh	r2, [r7, #10]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d8e1      	bhi.n	8006592 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	7b1b      	ldrb	r3, [r3, #12]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d121      	bne.n	800661e <pbuf_realloc+0xca>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	895b      	ldrh	r3, [r3, #10]
 80065de:	897a      	ldrh	r2, [r7, #10]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d01c      	beq.n	800661e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	7b5b      	ldrb	r3, [r3, #13]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d116      	bne.n	800661e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	897b      	ldrh	r3, [r7, #10]
 80065fc:	4413      	add	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4619      	mov	r1, r3
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff f864 	bl	80056d0 <mem_trim>
 8006608:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <pbuf_realloc+0xca>
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <pbuf_realloc+0xfc>)
 8006612:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006616:	4912      	ldr	r1, [pc, #72]	; (8006660 <pbuf_realloc+0x10c>)
 8006618:	480f      	ldr	r0, [pc, #60]	; (8006658 <pbuf_realloc+0x104>)
 800661a:	f009 fc11 	bl	800fe40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	897a      	ldrh	r2, [r7, #10]
 8006622:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	895a      	ldrh	r2, [r3, #10]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f911 	bl	8006860 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e000      	b.n	8006648 <pbuf_realloc+0xf4>
    return;
 8006646:	bf00      	nop

}
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	08011544 	.word	0x08011544
 8006654:	0801165c 	.word	0x0801165c
 8006658:	080115a4 	.word	0x080115a4
 800665c:	08011674 	.word	0x08011674
 8006660:	0801168c 	.word	0x0801168c

08006664 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <pbuf_add_header_impl+0x22>
 8006678:	4b2b      	ldr	r3, [pc, #172]	; (8006728 <pbuf_add_header_impl+0xc4>)
 800667a:	f240 12df 	movw	r2, #479	; 0x1df
 800667e:	492b      	ldr	r1, [pc, #172]	; (800672c <pbuf_add_header_impl+0xc8>)
 8006680:	482b      	ldr	r0, [pc, #172]	; (8006730 <pbuf_add_header_impl+0xcc>)
 8006682:	f009 fbdd 	bl	800fe40 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <pbuf_add_header_impl+0x30>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006692:	d301      	bcc.n	8006698 <pbuf_add_header_impl+0x34>
    return 1;
 8006694:	2301      	movs	r3, #1
 8006696:	e043      	b.n	8006720 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	e03e      	b.n	8006720 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	891a      	ldrh	r2, [r3, #8]
 80066aa:	8a7b      	ldrh	r3, [r7, #18]
 80066ac:	4413      	add	r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	8a7a      	ldrh	r2, [r7, #18]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d901      	bls.n	80066ba <pbuf_add_header_impl+0x56>
    return 1;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e032      	b.n	8006720 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b1b      	ldrb	r3, [r3, #12]
 80066be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80066c0:	8a3b      	ldrh	r3, [r7, #16]
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	425b      	negs	r3, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3310      	adds	r3, #16
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d20d      	bcs.n	80066fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e01d      	b.n	8006720 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	425b      	negs	r3, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e001      	b.n	80066fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e011      	b.n	8006720 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	895a      	ldrh	r2, [r3, #10]
 8006706:	8a7b      	ldrh	r3, [r7, #18]
 8006708:	4413      	add	r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	891a      	ldrh	r2, [r3, #8]
 8006714:	8a7b      	ldrh	r3, [r7, #18]
 8006716:	4413      	add	r3, r2
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	811a      	strh	r2, [r3, #8]


  return 0;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	08011544 	.word	0x08011544
 800672c:	080116a8 	.word	0x080116a8
 8006730:	080115a4 	.word	0x080115a4

08006734 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800673e:	2200      	movs	r2, #0
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ff8e 	bl	8006664 <pbuf_add_header_impl>
 8006748:	4603      	mov	r3, r0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <pbuf_remove_header+0x1e>
 8006764:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <pbuf_remove_header+0x94>)
 8006766:	f240 224b 	movw	r2, #587	; 0x24b
 800676a:	4920      	ldr	r1, [pc, #128]	; (80067ec <pbuf_remove_header+0x98>)
 800676c:	4820      	ldr	r0, [pc, #128]	; (80067f0 <pbuf_remove_header+0x9c>)
 800676e:	f009 fb67 	bl	800fe40 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <pbuf_remove_header+0x2c>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677e:	d301      	bcc.n	8006784 <pbuf_remove_header+0x30>
    return 1;
 8006780:	2301      	movs	r3, #1
 8006782:	e02c      	b.n	80067de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <pbuf_remove_header+0x3a>
    return 0;
 800678a:	2300      	movs	r3, #0
 800678c:	e027      	b.n	80067de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	895b      	ldrh	r3, [r3, #10]
 8006796:	89fa      	ldrh	r2, [r7, #14]
 8006798:	429a      	cmp	r2, r3
 800679a:	d908      	bls.n	80067ae <pbuf_remove_header+0x5a>
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <pbuf_remove_header+0x94>)
 800679e:	f240 2255 	movw	r2, #597	; 0x255
 80067a2:	4914      	ldr	r1, [pc, #80]	; (80067f4 <pbuf_remove_header+0xa0>)
 80067a4:	4812      	ldr	r0, [pc, #72]	; (80067f0 <pbuf_remove_header+0x9c>)
 80067a6:	f009 fb4b 	bl	800fe40 <iprintf>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e017      	b.n	80067de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	441a      	add	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	895a      	ldrh	r2, [r3, #10]
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	891a      	ldrh	r2, [r3, #8]
 80067d2:	89fb      	ldrh	r3, [r7, #14]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	08011544 	.word	0x08011544
 80067ec:	080116a8 	.word	0x080116a8
 80067f0:	080115a4 	.word	0x080115a4
 80067f4:	080116b4 	.word	0x080116b4

080067f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	807b      	strh	r3, [r7, #2]
 8006804:	4613      	mov	r3, r2
 8006806:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800680c:	2b00      	cmp	r3, #0
 800680e:	da08      	bge.n	8006822 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006814:	425b      	negs	r3, r3
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff9b 	bl	8006754 <pbuf_remove_header>
 800681e:	4603      	mov	r3, r0
 8006820:	e007      	b.n	8006832 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006826:	787a      	ldrb	r2, [r7, #1]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ff1a 	bl	8006664 <pbuf_add_header_impl>
 8006830:	4603      	mov	r3, r0
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800684a:	2201      	movs	r2, #1
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ffd2 	bl	80067f8 <pbuf_header_impl>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10b      	bne.n	8006886 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <pbuf_free+0x22>
 8006874:	4b38      	ldr	r3, [pc, #224]	; (8006958 <pbuf_free+0xf8>)
 8006876:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800687a:	4938      	ldr	r1, [pc, #224]	; (800695c <pbuf_free+0xfc>)
 800687c:	4838      	ldr	r0, [pc, #224]	; (8006960 <pbuf_free+0x100>)
 800687e:	f009 fadf 	bl	800fe40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006882:	2300      	movs	r3, #0
 8006884:	e063      	b.n	800694e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800688a:	e05c      	b.n	8006946 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7b9b      	ldrb	r3, [r3, #14]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <pbuf_free+0x42>
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <pbuf_free+0xf8>)
 8006896:	f240 22f1 	movw	r2, #753	; 0x2f1
 800689a:	4932      	ldr	r1, [pc, #200]	; (8006964 <pbuf_free+0x104>)
 800689c:	4830      	ldr	r0, [pc, #192]	; (8006960 <pbuf_free+0x100>)
 800689e:	f009 facf 	bl	800fe40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7b9b      	ldrb	r3, [r3, #14]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	739a      	strb	r2, [r3, #14]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7b9b      	ldrb	r3, [r3, #14]
 80068b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80068b4:	7dbb      	ldrb	r3, [r7, #22]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d143      	bne.n	8006942 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7b5b      	ldrb	r3, [r3, #13]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d011      	beq.n	80068fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <pbuf_free+0x90>
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <pbuf_free+0xf8>)
 80068e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80068e8:	491f      	ldr	r1, [pc, #124]	; (8006968 <pbuf_free+0x108>)
 80068ea:	481d      	ldr	r0, [pc, #116]	; (8006960 <pbuf_free+0x100>)
 80068ec:	f009 faa8 	bl	800fe40 <iprintf>
        pc->custom_free_function(p);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
 80068f8:	e01d      	b.n	8006936 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d104      	bne.n	800690a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	2008      	movs	r0, #8
 8006904:	f7ff f99a 	bl	8005c3c <memp_free>
 8006908:	e015      	b.n	8006936 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d104      	bne.n	800691a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	2007      	movs	r0, #7
 8006914:	f7ff f992 	bl	8005c3c <memp_free>
 8006918:	e00d      	b.n	8006936 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <pbuf_free+0xc8>
          mem_free(p);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fe fe6b 	bl	80055fc <mem_free>
 8006926:	e006      	b.n	8006936 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <pbuf_free+0xf8>)
 800692a:	f240 320f 	movw	r2, #783	; 0x30f
 800692e:	490f      	ldr	r1, [pc, #60]	; (800696c <pbuf_free+0x10c>)
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <pbuf_free+0x100>)
 8006932:	f009 fa85 	bl	800fe40 <iprintf>
        }
      }
      count++;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	3301      	adds	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e001      	b.n	8006946 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d19f      	bne.n	800688c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08011544 	.word	0x08011544
 800695c:	080116a8 	.word	0x080116a8
 8006960:	080115a4 	.word	0x080115a4
 8006964:	080116d4 	.word	0x080116d4
 8006968:	080116ec 	.word	0x080116ec
 800696c:	08011710 	.word	0x08011710

08006970 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800697c:	e005      	b.n	800698a <pbuf_clen+0x1a>
    ++len;
 800697e:	89fb      	ldrh	r3, [r7, #14]
 8006980:	3301      	adds	r3, #1
 8006982:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f6      	bne.n	800697e <pbuf_clen+0xe>
  }
  return len;
 8006990:	89fb      	ldrh	r3, [r7, #14]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7b9b      	ldrb	r3, [r3, #14]
 80069b2:	3301      	adds	r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7b9b      	ldrb	r3, [r3, #14]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <pbuf_ref+0x30>
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <pbuf_ref+0x38>)
 80069c4:	f240 3242 	movw	r2, #834	; 0x342
 80069c8:	4904      	ldr	r1, [pc, #16]	; (80069dc <pbuf_ref+0x3c>)
 80069ca:	4805      	ldr	r0, [pc, #20]	; (80069e0 <pbuf_ref+0x40>)
 80069cc:	f009 fa38 	bl	800fe40 <iprintf>
  }
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08011544 	.word	0x08011544
 80069dc:	08011724 	.word	0x08011724
 80069e0:	080115a4 	.word	0x080115a4

080069e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <pbuf_cat+0x16>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <pbuf_cat+0x26>
 80069fa:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <pbuf_cat+0x98>)
 80069fc:	f240 3259 	movw	r2, #857	; 0x359
 8006a00:	491f      	ldr	r1, [pc, #124]	; (8006a80 <pbuf_cat+0x9c>)
 8006a02:	4820      	ldr	r0, [pc, #128]	; (8006a84 <pbuf_cat+0xa0>)
 8006a04:	f009 fa1c 	bl	800fe40 <iprintf>
 8006a08:	e034      	b.n	8006a74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e00a      	b.n	8006a26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	891a      	ldrh	r2, [r3, #8]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	891b      	ldrh	r3, [r3, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	891a      	ldrh	r2, [r3, #8]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	895b      	ldrh	r3, [r3, #10]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d006      	beq.n	8006a48 <pbuf_cat+0x64>
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <pbuf_cat+0x98>)
 8006a3c:	f240 3262 	movw	r2, #866	; 0x362
 8006a40:	4911      	ldr	r1, [pc, #68]	; (8006a88 <pbuf_cat+0xa4>)
 8006a42:	4810      	ldr	r0, [pc, #64]	; (8006a84 <pbuf_cat+0xa0>)
 8006a44:	f009 f9fc 	bl	800fe40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <pbuf_cat+0x7a>
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <pbuf_cat+0x98>)
 8006a52:	f240 3263 	movw	r2, #867	; 0x363
 8006a56:	490d      	ldr	r1, [pc, #52]	; (8006a8c <pbuf_cat+0xa8>)
 8006a58:	480a      	ldr	r0, [pc, #40]	; (8006a84 <pbuf_cat+0xa0>)
 8006a5a:	f009 f9f1 	bl	800fe40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	891a      	ldrh	r2, [r3, #8]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	891b      	ldrh	r3, [r3, #8]
 8006a66:	4413      	add	r3, r2
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08011544 	.word	0x08011544
 8006a80:	08011738 	.word	0x08011738
 8006a84:	080115a4 	.word	0x080115a4
 8006a88:	08011770 	.word	0x08011770
 8006a8c:	080117a0 	.word	0x080117a0

08006a90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff ffa1 	bl	80069e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006aa2:	6838      	ldr	r0, [r7, #0]
 8006aa4:	f7ff ff7c 	bl	80069a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <pbuf_copy+0x2a>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <pbuf_copy+0x2a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	891a      	ldrh	r2, [r3, #8]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	891b      	ldrh	r3, [r3, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d209      	bcs.n	8006aee <pbuf_copy+0x3e>
 8006ada:	4b57      	ldr	r3, [pc, #348]	; (8006c38 <pbuf_copy+0x188>)
 8006adc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006ae0:	4956      	ldr	r1, [pc, #344]	; (8006c3c <pbuf_copy+0x18c>)
 8006ae2:	4857      	ldr	r0, [pc, #348]	; (8006c40 <pbuf_copy+0x190>)
 8006ae4:	f009 f9ac 	bl	800fe40 <iprintf>
 8006ae8:	f06f 030f 	mvn.w	r3, #15
 8006aec:	e09f      	b.n	8006c2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	895b      	ldrh	r3, [r3, #10]
 8006af2:	461a      	mov	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	895b      	ldrh	r3, [r3, #10]
 8006afc:	4619      	mov	r1, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1acb      	subs	r3, r1, r3
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d306      	bcc.n	8006b14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	895b      	ldrh	r3, [r3, #10]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e005      	b.n	8006b20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	18d0      	adds	r0, r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4619      	mov	r1, r3
 8006b34:	f009 f96e 	bl	800fe14 <memcpy>
    offset_to += len;
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	895b      	ldrh	r3, [r3, #10]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d906      	bls.n	8006b62 <pbuf_copy+0xb2>
 8006b54:	4b38      	ldr	r3, [pc, #224]	; (8006c38 <pbuf_copy+0x188>)
 8006b56:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b5a:	493a      	ldr	r1, [pc, #232]	; (8006c44 <pbuf_copy+0x194>)
 8006b5c:	4838      	ldr	r0, [pc, #224]	; (8006c40 <pbuf_copy+0x190>)
 8006b5e:	f009 f96f 	bl	800fe40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	895b      	ldrh	r3, [r3, #10]
 8006b66:	461a      	mov	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d906      	bls.n	8006b7c <pbuf_copy+0xcc>
 8006b6e:	4b32      	ldr	r3, [pc, #200]	; (8006c38 <pbuf_copy+0x188>)
 8006b70:	f240 32da 	movw	r2, #986	; 0x3da
 8006b74:	4934      	ldr	r1, [pc, #208]	; (8006c48 <pbuf_copy+0x198>)
 8006b76:	4832      	ldr	r0, [pc, #200]	; (8006c40 <pbuf_copy+0x190>)
 8006b78:	f009 f962 	bl	800fe40 <iprintf>
    if (offset_from >= p_from->len) {
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	895b      	ldrh	r3, [r3, #10]
 8006b80:	461a      	mov	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d304      	bcc.n	8006b92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	895b      	ldrh	r3, [r3, #10]
 8006b96:	461a      	mov	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d114      	bne.n	8006bc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10c      	bne.n	8006bc8 <pbuf_copy+0x118>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <pbuf_copy+0x118>
 8006bb4:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <pbuf_copy+0x188>)
 8006bb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006bba:	4924      	ldr	r1, [pc, #144]	; (8006c4c <pbuf_copy+0x19c>)
 8006bbc:	4820      	ldr	r0, [pc, #128]	; (8006c40 <pbuf_copy+0x190>)
 8006bbe:	f009 f93f 	bl	800fe40 <iprintf>
 8006bc2:	f06f 030f 	mvn.w	r3, #15
 8006bc6:	e032      	b.n	8006c2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d013      	beq.n	8006bf6 <pbuf_copy+0x146>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	895a      	ldrh	r2, [r3, #10]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	891b      	ldrh	r3, [r3, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d10d      	bne.n	8006bf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <pbuf_copy+0x146>
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <pbuf_copy+0x188>)
 8006be4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006be8:	4919      	ldr	r1, [pc, #100]	; (8006c50 <pbuf_copy+0x1a0>)
 8006bea:	4815      	ldr	r0, [pc, #84]	; (8006c40 <pbuf_copy+0x190>)
 8006bec:	f009 f928 	bl	800fe40 <iprintf>
 8006bf0:	f06f 0305 	mvn.w	r3, #5
 8006bf4:	e01b      	b.n	8006c2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <pbuf_copy+0x174>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	895a      	ldrh	r2, [r3, #10]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	891b      	ldrh	r3, [r3, #8]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d10d      	bne.n	8006c24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <pbuf_copy+0x174>
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <pbuf_copy+0x188>)
 8006c12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006c16:	490e      	ldr	r1, [pc, #56]	; (8006c50 <pbuf_copy+0x1a0>)
 8006c18:	4809      	ldr	r0, [pc, #36]	; (8006c40 <pbuf_copy+0x190>)
 8006c1a:	f009 f911 	bl	800fe40 <iprintf>
 8006c1e:	f06f 0305 	mvn.w	r3, #5
 8006c22:	e004      	b.n	8006c2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f47f af61 	bne.w	8006aee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	08011544 	.word	0x08011544
 8006c3c:	080117ec 	.word	0x080117ec
 8006c40:	080115a4 	.word	0x080115a4
 8006c44:	0801181c 	.word	0x0801181c
 8006c48:	08011834 	.word	0x08011834
 8006c4c:	08011850 	.word	0x08011850
 8006c50:	08011860 	.word	0x08011860

08006c54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	460b      	mov	r3, r1
 8006c64:	80fb      	strh	r3, [r7, #6]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <pbuf_copy_partial+0x36>
 8006c78:	4b2b      	ldr	r3, [pc, #172]	; (8006d28 <pbuf_copy_partial+0xd4>)
 8006c7a:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c7e:	492b      	ldr	r1, [pc, #172]	; (8006d2c <pbuf_copy_partial+0xd8>)
 8006c80:	482b      	ldr	r0, [pc, #172]	; (8006d30 <pbuf_copy_partial+0xdc>)
 8006c82:	f009 f8dd 	bl	800fe40 <iprintf>
 8006c86:	2300      	movs	r3, #0
 8006c88:	e04a      	b.n	8006d20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d108      	bne.n	8006ca2 <pbuf_copy_partial+0x4e>
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <pbuf_copy_partial+0xd4>)
 8006c92:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c96:	4927      	ldr	r1, [pc, #156]	; (8006d34 <pbuf_copy_partial+0xe0>)
 8006c98:	4825      	ldr	r0, [pc, #148]	; (8006d30 <pbuf_copy_partial+0xdc>)
 8006c9a:	f009 f8d1 	bl	800fe40 <iprintf>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e03e      	b.n	8006d20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e034      	b.n	8006d12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006ca8:	88bb      	ldrh	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <pbuf_copy_partial+0x70>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	895b      	ldrh	r3, [r3, #10]
 8006cb2:	88ba      	ldrh	r2, [r7, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d305      	bcc.n	8006cc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	895b      	ldrh	r3, [r3, #10]
 8006cbc:	88ba      	ldrh	r2, [r7, #4]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	80bb      	strh	r3, [r7, #4]
 8006cc2:	e023      	b.n	8006d0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	895a      	ldrh	r2, [r3, #10]
 8006cc8:	88bb      	ldrh	r3, [r7, #4]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006cce:	8b3a      	ldrh	r2, [r7, #24]
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d901      	bls.n	8006cda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006cda:	8b7b      	ldrh	r3, [r7, #26]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	18d0      	adds	r0, r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	8b3a      	ldrh	r2, [r7, #24]
 8006cea:	4619      	mov	r1, r3
 8006cec:	f009 f892 	bl	800fe14 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006cf0:	8afa      	ldrh	r2, [r7, #22]
 8006cf2:	8b3b      	ldrh	r3, [r7, #24]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006cf8:	8b7a      	ldrh	r2, [r7, #26]
 8006cfa:	8b3b      	ldrh	r3, [r7, #24]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	8b3b      	ldrh	r3, [r7, #24]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <pbuf_copy_partial+0xca>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1c4      	bne.n	8006ca8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006d1e:	8afb      	ldrh	r3, [r7, #22]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	08011544 	.word	0x08011544
 8006d2c:	0801188c 	.word	0x0801188c
 8006d30:	080115a4 	.word	0x080115a4
 8006d34:	080118ac 	.word	0x080118ac

08006d38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	603a      	str	r2, [r7, #0]
 8006d42:	71fb      	strb	r3, [r7, #7]
 8006d44:	460b      	mov	r3, r1
 8006d46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	8919      	ldrh	r1, [r3, #8]
 8006d4c:	88ba      	ldrh	r2, [r7, #4]
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff faa1 	bl	8006298 <pbuf_alloc>
 8006d56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <pbuf_clone+0x2a>
    return NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e011      	b.n	8006d86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fea3 	bl	8006ab0 <pbuf_copy>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <pbuf_clone+0x4c>
 8006d76:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <pbuf_clone+0x58>)
 8006d78:	f240 5224 	movw	r2, #1316	; 0x524
 8006d7c:	4905      	ldr	r1, [pc, #20]	; (8006d94 <pbuf_clone+0x5c>)
 8006d7e:	4806      	ldr	r0, [pc, #24]	; (8006d98 <pbuf_clone+0x60>)
 8006d80:	f009 f85e 	bl	800fe40 <iprintf>
  return q;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	08011544 	.word	0x08011544
 8006d94:	080119b8 	.word	0x080119b8
 8006d98:	080115a4 	.word	0x080115a4

08006d9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006da0:	f009 f8dc 	bl	800ff5c <rand>
 8006da4:	4603      	mov	r3, r0
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	4b01      	ldr	r3, [pc, #4]	; (8006dbc <tcp_init+0x20>)
 8006db6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000000a 	.word	0x2000000a

08006dc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7d1b      	ldrb	r3, [r3, #20]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d105      	bne.n	8006ddc <tcp_free+0x1c>
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <tcp_free+0x2c>)
 8006dd2:	22d4      	movs	r2, #212	; 0xd4
 8006dd4:	4906      	ldr	r1, [pc, #24]	; (8006df0 <tcp_free+0x30>)
 8006dd6:	4807      	ldr	r0, [pc, #28]	; (8006df4 <tcp_free+0x34>)
 8006dd8:	f009 f832 	bl	800fe40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	2001      	movs	r0, #1
 8006de0:	f7fe ff2c 	bl	8005c3c <memp_free>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08011a44 	.word	0x08011a44
 8006df0:	08011a74 	.word	0x08011a74
 8006df4:	08011a88 	.word	0x08011a88

08006df8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7d1b      	ldrb	r3, [r3, #20]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <tcp_free_listen+0x1c>
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <tcp_free_listen+0x2c>)
 8006e0a:	22df      	movs	r2, #223	; 0xdf
 8006e0c:	4906      	ldr	r1, [pc, #24]	; (8006e28 <tcp_free_listen+0x30>)
 8006e0e:	4807      	ldr	r0, [pc, #28]	; (8006e2c <tcp_free_listen+0x34>)
 8006e10:	f009 f816 	bl	800fe40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	2002      	movs	r0, #2
 8006e18:	f7fe ff10 	bl	8005c3c <memp_free>
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08011a44 	.word	0x08011a44
 8006e28:	08011ab0 	.word	0x08011ab0
 8006e2c:	08011a88 	.word	0x08011a88

08006e30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006e34:	f001 f85c 	bl	8007ef0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <tcp_tmr+0x28>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <tcp_tmr+0x28>)
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <tcp_tmr+0x28>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e50:	f000 fd0e 	bl	8007870 <tcp_slowtmr>
  }
}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200000c9 	.word	0x200000c9

08006e5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <tcp_remove_listener+0x1c>
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <tcp_remove_listener+0x48>)
 8006e6e:	22ff      	movs	r2, #255	; 0xff
 8006e70:	490d      	ldr	r1, [pc, #52]	; (8006ea8 <tcp_remove_listener+0x4c>)
 8006e72:	480e      	ldr	r0, [pc, #56]	; (8006eac <tcp_remove_listener+0x50>)
 8006e74:	f008 ffe4 	bl	800fe40 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e00a      	b.n	8006e94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d102      	bne.n	8006e8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f1      	bne.n	8006e7e <tcp_remove_listener+0x22>
    }
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	08011a44 	.word	0x08011a44
 8006ea8:	08011acc 	.word	0x08011acc
 8006eac:	08011a88 	.word	0x08011a88

08006eb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <tcp_listen_closed+0x1c>
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <tcp_listen_closed+0x60>)
 8006ec0:	f240 1211 	movw	r2, #273	; 0x111
 8006ec4:	4913      	ldr	r1, [pc, #76]	; (8006f14 <tcp_listen_closed+0x64>)
 8006ec6:	4814      	ldr	r0, [pc, #80]	; (8006f18 <tcp_listen_closed+0x68>)
 8006ec8:	f008 ffba 	bl	800fe40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7d1b      	ldrb	r3, [r3, #20]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d006      	beq.n	8006ee2 <tcp_listen_closed+0x32>
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <tcp_listen_closed+0x60>)
 8006ed6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006eda:	4910      	ldr	r1, [pc, #64]	; (8006f1c <tcp_listen_closed+0x6c>)
 8006edc:	480e      	ldr	r0, [pc, #56]	; (8006f18 <tcp_listen_closed+0x68>)
 8006ede:	f008 ffaf 	bl	800fe40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	e00b      	b.n	8006f00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <tcp_listen_closed+0x70>)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ffb1 	bl	8006e5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d9f0      	bls.n	8006ee8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	08011a44 	.word	0x08011a44
 8006f14:	08011af4 	.word	0x08011af4
 8006f18:	08011a88 	.word	0x08011a88
 8006f1c:	08011b00 	.word	0x08011b00
 8006f20:	08013a94 	.word	0x08013a94

08006f24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006f24:	b5b0      	push	{r4, r5, r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af04      	add	r7, sp, #16
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <tcp_close_shutdown+0x20>
 8006f36:	4b63      	ldr	r3, [pc, #396]	; (80070c4 <tcp_close_shutdown+0x1a0>)
 8006f38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006f3c:	4962      	ldr	r1, [pc, #392]	; (80070c8 <tcp_close_shutdown+0x1a4>)
 8006f3e:	4863      	ldr	r0, [pc, #396]	; (80070cc <tcp_close_shutdown+0x1a8>)
 8006f40:	f008 ff7e 	bl	800fe40 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d066      	beq.n	8007018 <tcp_close_shutdown+0xf4>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7d1b      	ldrb	r3, [r3, #20]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d003      	beq.n	8006f5a <tcp_close_shutdown+0x36>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7d1b      	ldrb	r3, [r3, #20]
 8006f56:	2b07      	cmp	r3, #7
 8006f58:	d15e      	bne.n	8007018 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <tcp_close_shutdown+0x48>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f6a:	d055      	beq.n	8007018 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8b5b      	ldrh	r3, [r3, #26]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <tcp_close_shutdown+0x62>
 8006f78:	4b52      	ldr	r3, [pc, #328]	; (80070c4 <tcp_close_shutdown+0x1a0>)
 8006f7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f7e:	4954      	ldr	r1, [pc, #336]	; (80070d0 <tcp_close_shutdown+0x1ac>)
 8006f80:	4852      	ldr	r0, [pc, #328]	; (80070cc <tcp_close_shutdown+0x1a8>)
 8006f82:	f008 ff5d 	bl	800fe40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f8e:	687d      	ldr	r5, [r7, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	8ad2      	ldrh	r2, [r2, #22]
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	8b09      	ldrh	r1, [r1, #24]
 8006f9c:	9102      	str	r1, [sp, #8]
 8006f9e:	9201      	str	r2, [sp, #4]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f005 fd85 	bl	800cab8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fb66 	bl	8008680 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006fb4:	4b47      	ldr	r3, [pc, #284]	; (80070d4 <tcp_close_shutdown+0x1b0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d105      	bne.n	8006fca <tcp_close_shutdown+0xa6>
 8006fbe:	4b45      	ldr	r3, [pc, #276]	; (80070d4 <tcp_close_shutdown+0x1b0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4a43      	ldr	r2, [pc, #268]	; (80070d4 <tcp_close_shutdown+0x1b0>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e013      	b.n	8006ff2 <tcp_close_shutdown+0xce>
 8006fca:	4b42      	ldr	r3, [pc, #264]	; (80070d4 <tcp_close_shutdown+0x1b0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e00c      	b.n	8006fec <tcp_close_shutdown+0xc8>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d104      	bne.n	8006fe6 <tcp_close_shutdown+0xc2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	60da      	str	r2, [r3, #12]
 8006fe4:	e005      	b.n	8006ff2 <tcp_close_shutdown+0xce>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ef      	bne.n	8006fd2 <tcp_close_shutdown+0xae>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <tcp_close_shutdown+0x1b4>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ffe:	4b37      	ldr	r3, [pc, #220]	; (80070dc <tcp_close_shutdown+0x1b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d102      	bne.n	800700e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007008:	f003 fffa 	bl	800b000 <tcp_trigger_input_pcb_close>
 800700c:	e002      	b.n	8007014 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fed6 	bl	8006dc0 <tcp_free>
      }
      return ERR_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e050      	b.n	80070ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7d1b      	ldrb	r3, [r3, #20]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d03b      	beq.n	8007098 <tcp_close_shutdown+0x174>
 8007020:	2b02      	cmp	r3, #2
 8007022:	dc44      	bgt.n	80070ae <tcp_close_shutdown+0x18a>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <tcp_close_shutdown+0x10a>
 8007028:	2b01      	cmp	r3, #1
 800702a:	d02a      	beq.n	8007082 <tcp_close_shutdown+0x15e>
 800702c:	e03f      	b.n	80070ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8adb      	ldrh	r3, [r3, #22]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d021      	beq.n	800707a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007036:	4b2a      	ldr	r3, [pc, #168]	; (80070e0 <tcp_close_shutdown+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d105      	bne.n	800704c <tcp_close_shutdown+0x128>
 8007040:	4b27      	ldr	r3, [pc, #156]	; (80070e0 <tcp_close_shutdown+0x1bc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <tcp_close_shutdown+0x1bc>)
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e013      	b.n	8007074 <tcp_close_shutdown+0x150>
 800704c:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <tcp_close_shutdown+0x1bc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	e00c      	b.n	800706e <tcp_close_shutdown+0x14a>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d104      	bne.n	8007068 <tcp_close_shutdown+0x144>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	60da      	str	r2, [r3, #12]
 8007066:	e005      	b.n	8007074 <tcp_close_shutdown+0x150>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1ef      	bne.n	8007054 <tcp_close_shutdown+0x130>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fea0 	bl	8006dc0 <tcp_free>
      break;
 8007080:	e01a      	b.n	80070b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff14 	bl	8006eb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4816      	ldr	r0, [pc, #88]	; (80070e4 <tcp_close_shutdown+0x1c0>)
 800708c:	f001 fb48 	bl	8008720 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff feb1 	bl	8006df8 <tcp_free_listen>
      break;
 8007096:	e00f      	b.n	80070b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	480e      	ldr	r0, [pc, #56]	; (80070d4 <tcp_close_shutdown+0x1b0>)
 800709c:	f001 fb40 	bl	8008720 <tcp_pcb_remove>
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <tcp_close_shutdown+0x1b4>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe8a 	bl	8006dc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80070ac:	e004      	b.n	80070b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f81a 	bl	80070e8 <tcp_close_shutdown_fin>
 80070b4:	4603      	mov	r3, r0
 80070b6:	e000      	b.n	80070ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bdb0      	pop	{r4, r5, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	08011a44 	.word	0x08011a44
 80070c8:	08011b18 	.word	0x08011b18
 80070cc:	08011a88 	.word	0x08011a88
 80070d0:	08011b38 	.word	0x08011b38
 80070d4:	20006914 	.word	0x20006914
 80070d8:	20006910 	.word	0x20006910
 80070dc:	20006928 	.word	0x20006928
 80070e0:	20006920 	.word	0x20006920
 80070e4:	2000691c 	.word	0x2000691c

080070e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <tcp_close_shutdown_fin+0x1c>
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <tcp_close_shutdown_fin+0xc8>)
 80070f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80070fc:	492d      	ldr	r1, [pc, #180]	; (80071b4 <tcp_close_shutdown_fin+0xcc>)
 80070fe:	482e      	ldr	r0, [pc, #184]	; (80071b8 <tcp_close_shutdown_fin+0xd0>)
 8007100:	f008 fe9e 	bl	800fe40 <iprintf>

  switch (pcb->state) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7d1b      	ldrb	r3, [r3, #20]
 8007108:	2b07      	cmp	r3, #7
 800710a:	d020      	beq.n	800714e <tcp_close_shutdown_fin+0x66>
 800710c:	2b07      	cmp	r3, #7
 800710e:	dc2b      	bgt.n	8007168 <tcp_close_shutdown_fin+0x80>
 8007110:	2b03      	cmp	r3, #3
 8007112:	d002      	beq.n	800711a <tcp_close_shutdown_fin+0x32>
 8007114:	2b04      	cmp	r3, #4
 8007116:	d00d      	beq.n	8007134 <tcp_close_shutdown_fin+0x4c>
 8007118:	e026      	b.n	8007168 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f004 fdda 	bl	800bcd4 <tcp_send_fin>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11f      	bne.n	800716c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2205      	movs	r2, #5
 8007130:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007132:	e01b      	b.n	800716c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f004 fdcd 	bl	800bcd4 <tcp_send_fin>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800713e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d114      	bne.n	8007170 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2205      	movs	r2, #5
 800714a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800714c:	e010      	b.n	8007170 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f004 fdc0 	bl	800bcd4 <tcp_send_fin>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2209      	movs	r2, #9
 8007164:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007166:	e005      	b.n	8007174 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	e01c      	b.n	80071a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800716c:	bf00      	nop
 800716e:	e002      	b.n	8007176 <tcp_close_shutdown_fin+0x8e>
      break;
 8007170:	bf00      	nop
 8007172:	e000      	b.n	8007176 <tcp_close_shutdown_fin+0x8e>
      break;
 8007174:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f004 fee6 	bl	800bf50 <tcp_output>
 8007184:	e00d      	b.n	80071a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718e:	d108      	bne.n	80071a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8b5b      	ldrh	r3, [r3, #26]
 8007194:	f043 0308 	orr.w	r3, r3, #8
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e001      	b.n	80071a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80071a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	08011a44 	.word	0x08011a44
 80071b4:	08011af4 	.word	0x08011af4
 80071b8:	08011a88 	.word	0x08011a88

080071bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <tcp_close+0x22>
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <tcp_close+0x4c>)
 80071cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80071d0:	490e      	ldr	r1, [pc, #56]	; (800720c <tcp_close+0x50>)
 80071d2:	480f      	ldr	r0, [pc, #60]	; (8007210 <tcp_close+0x54>)
 80071d4:	f008 fe34 	bl	800fe40 <iprintf>
 80071d8:	f06f 030f 	mvn.w	r3, #15
 80071dc:	e00f      	b.n	80071fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7d1b      	ldrb	r3, [r3, #20]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d006      	beq.n	80071f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8b5b      	ldrh	r3, [r3, #26]
 80071ea:	f043 0310 	orr.w	r3, r3, #16
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fe94 	bl	8006f24 <tcp_close_shutdown>
 80071fc:	4603      	mov	r3, r0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	08011a44 	.word	0x08011a44
 800720c:	08011b54 	.word	0x08011b54
 8007210:	08011a88 	.word	0x08011a88

08007214 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08e      	sub	sp, #56	; 0x38
 8007218:	af04      	add	r7, sp, #16
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d107      	bne.n	8007234 <tcp_abandon+0x20>
 8007224:	4b52      	ldr	r3, [pc, #328]	; (8007370 <tcp_abandon+0x15c>)
 8007226:	f240 223d 	movw	r2, #573	; 0x23d
 800722a:	4952      	ldr	r1, [pc, #328]	; (8007374 <tcp_abandon+0x160>)
 800722c:	4852      	ldr	r0, [pc, #328]	; (8007378 <tcp_abandon+0x164>)
 800722e:	f008 fe07 	bl	800fe40 <iprintf>
 8007232:	e099      	b.n	8007368 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7d1b      	ldrb	r3, [r3, #20]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d106      	bne.n	800724a <tcp_abandon+0x36>
 800723c:	4b4c      	ldr	r3, [pc, #304]	; (8007370 <tcp_abandon+0x15c>)
 800723e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007242:	494e      	ldr	r1, [pc, #312]	; (800737c <tcp_abandon+0x168>)
 8007244:	484c      	ldr	r0, [pc, #304]	; (8007378 <tcp_abandon+0x164>)
 8007246:	f008 fdfb 	bl	800fe40 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7d1b      	ldrb	r3, [r3, #20]
 800724e:	2b0a      	cmp	r3, #10
 8007250:	d107      	bne.n	8007262 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	484a      	ldr	r0, [pc, #296]	; (8007380 <tcp_abandon+0x16c>)
 8007256:	f001 fa63 	bl	8008720 <tcp_pcb_remove>
    tcp_free(pcb);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fdb0 	bl	8006dc0 <tcp_free>
 8007260:	e082      	b.n	8007368 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7d1b      	ldrb	r3, [r3, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d126      	bne.n	80072da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8adb      	ldrh	r3, [r3, #22]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02e      	beq.n	80072f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007294:	4b3b      	ldr	r3, [pc, #236]	; (8007384 <tcp_abandon+0x170>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	d105      	bne.n	80072aa <tcp_abandon+0x96>
 800729e:	4b39      	ldr	r3, [pc, #228]	; (8007384 <tcp_abandon+0x170>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4a37      	ldr	r2, [pc, #220]	; (8007384 <tcp_abandon+0x170>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	e013      	b.n	80072d2 <tcp_abandon+0xbe>
 80072aa:	4b36      	ldr	r3, [pc, #216]	; (8007384 <tcp_abandon+0x170>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e00c      	b.n	80072cc <tcp_abandon+0xb8>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d104      	bne.n	80072c6 <tcp_abandon+0xb2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	e005      	b.n	80072d2 <tcp_abandon+0xbe>
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1ef      	bne.n	80072b2 <tcp_abandon+0x9e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	60da      	str	r2, [r3, #12]
 80072d8:	e00b      	b.n	80072f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8adb      	ldrh	r3, [r3, #22]
 80072e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4828      	ldr	r0, [pc, #160]	; (8007388 <tcp_abandon+0x174>)
 80072e8:	f001 fa1a 	bl	8008720 <tcp_pcb_remove>
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <tcp_abandon+0x178>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fed6 	bl	80080b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fecd 	bl	80080b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fec4 	bl	80080b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00e      	beq.n	800734c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	8b12      	ldrh	r2, [r2, #24]
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800733c:	9201      	str	r2, [sp, #4]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	460b      	mov	r3, r1
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	69b9      	ldr	r1, [r7, #24]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f005 fbb6 	bl	800cab8 <tcp_rst>
    }
    last_state = pcb->state;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	7d1b      	ldrb	r3, [r3, #20]
 8007350:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fd34 	bl	8006dc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <tcp_abandon+0x154>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f06f 010c 	mvn.w	r1, #12
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	4798      	blx	r3
  }
}
 8007368:	3728      	adds	r7, #40	; 0x28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	08011a44 	.word	0x08011a44
 8007374:	08011b88 	.word	0x08011b88
 8007378:	08011a88 	.word	0x08011a88
 800737c:	08011ba4 	.word	0x08011ba4
 8007380:	20006924 	.word	0x20006924
 8007384:	20006920 	.word	0x20006920
 8007388:	20006914 	.word	0x20006914
 800738c:	20006910 	.word	0x20006910

08007390 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007398:	2101      	movs	r1, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff3a 	bl	8007214 <tcp_abandon>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80073b6:	2304      	movs	r3, #4
 80073b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80073c0:	4b3e      	ldr	r3, [pc, #248]	; (80074bc <tcp_bind+0x114>)
 80073c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <tcp_bind+0x36>
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <tcp_bind+0x118>)
 80073cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80073d0:	493c      	ldr	r1, [pc, #240]	; (80074c4 <tcp_bind+0x11c>)
 80073d2:	483d      	ldr	r0, [pc, #244]	; (80074c8 <tcp_bind+0x120>)
 80073d4:	f008 fd34 	bl	800fe40 <iprintf>
 80073d8:	f06f 030f 	mvn.w	r3, #15
 80073dc:	e06a      	b.n	80074b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	7d1b      	ldrb	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <tcp_bind+0x52>
 80073e6:	4b36      	ldr	r3, [pc, #216]	; (80074c0 <tcp_bind+0x118>)
 80073e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80073ec:	4937      	ldr	r1, [pc, #220]	; (80074cc <tcp_bind+0x124>)
 80073ee:	4836      	ldr	r0, [pc, #216]	; (80074c8 <tcp_bind+0x120>)
 80073f0:	f008 fd26 	bl	800fe40 <iprintf>
 80073f4:	f06f 0305 	mvn.w	r3, #5
 80073f8:	e05c      	b.n	80074b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007400:	f000 f9f0 	bl	80077e4 <tcp_new_port>
 8007404:	4603      	mov	r3, r0
 8007406:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d135      	bne.n	800747a <tcp_bind+0xd2>
      return ERR_BUF;
 800740e:	f06f 0301 	mvn.w	r3, #1
 8007412:	e04f      	b.n	80074b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	e02b      	b.n	8007472 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800741a:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <tcp_bind+0x128>)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	e01e      	b.n	8007466 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	8adb      	ldrh	r3, [r3, #22]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	429a      	cmp	r2, r3
 8007430:	d116      	bne.n	8007460 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007432:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <tcp_bind+0xb2>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d009      	beq.n	800745a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007456:	429a      	cmp	r2, r3
 8007458:	d102      	bne.n	8007460 <tcp_bind+0xb8>
              return ERR_USE;
 800745a:	f06f 0307 	mvn.w	r3, #7
 800745e:	e029      	b.n	80074b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1dd      	bne.n	8007428 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	3301      	adds	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	429a      	cmp	r2, r3
 8007478:	dbcf      	blt.n	800741a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00c      	beq.n	800749a <tcp_bind+0xf2>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <tcp_bind+0xec>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	e000      	b.n	8007496 <tcp_bind+0xee>
 8007494:	2300      	movs	r3, #0
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <tcp_bind+0x12c>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	60da      	str	r2, [r3, #12]
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <tcp_bind+0x12c>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	f005 fcc5 	bl	800ce3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	08013abc 	.word	0x08013abc
 80074c0:	08011a44 	.word	0x08011a44
 80074c4:	08011bd8 	.word	0x08011bd8
 80074c8:	08011a88 	.word	0x08011a88
 80074cc:	08011bf0 	.word	0x08011bf0
 80074d0:	08013a94 	.word	0x08013a94
 80074d4:	20006920 	.word	0x20006920

080074d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <tcp_accept_null+0x22>
 80074ec:	4b07      	ldr	r3, [pc, #28]	; (800750c <tcp_accept_null+0x34>)
 80074ee:	f240 320f 	movw	r2, #783	; 0x30f
 80074f2:	4907      	ldr	r1, [pc, #28]	; (8007510 <tcp_accept_null+0x38>)
 80074f4:	4807      	ldr	r0, [pc, #28]	; (8007514 <tcp_accept_null+0x3c>)
 80074f6:	f008 fca3 	bl	800fe40 <iprintf>

  tcp_abort(pcb);
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	f7ff ff48 	bl	8007390 <tcp_abort>

  return ERR_ABRT;
 8007500:	f06f 030c 	mvn.w	r3, #12
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08011a44 	.word	0x08011a44
 8007510:	08011c18 	.word	0x08011c18
 8007514:	08011a88 	.word	0x08011a88

08007518 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2200      	movs	r2, #0
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f806 	bl	800753c <tcp_listen_with_backlog_and_err>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	460b      	mov	r3, r1
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <tcp_listen_with_backlog_and_err+0x2c>
 8007554:	4b47      	ldr	r3, [pc, #284]	; (8007674 <tcp_listen_with_backlog_and_err+0x138>)
 8007556:	f240 3259 	movw	r2, #857	; 0x359
 800755a:	4947      	ldr	r1, [pc, #284]	; (8007678 <tcp_listen_with_backlog_and_err+0x13c>)
 800755c:	4847      	ldr	r0, [pc, #284]	; (800767c <tcp_listen_with_backlog_and_err+0x140>)
 800755e:	f008 fc6f 	bl	800fe40 <iprintf>
 8007562:	23f0      	movs	r3, #240	; 0xf0
 8007564:	76fb      	strb	r3, [r7, #27]
 8007566:	e079      	b.n	800765c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7d1b      	ldrb	r3, [r3, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <tcp_listen_with_backlog_and_err+0x48>
 8007570:	4b40      	ldr	r3, [pc, #256]	; (8007674 <tcp_listen_with_backlog_and_err+0x138>)
 8007572:	f240 325a 	movw	r2, #858	; 0x35a
 8007576:	4942      	ldr	r1, [pc, #264]	; (8007680 <tcp_listen_with_backlog_and_err+0x144>)
 8007578:	4840      	ldr	r0, [pc, #256]	; (800767c <tcp_listen_with_backlog_and_err+0x140>)
 800757a:	f008 fc61 	bl	800fe40 <iprintf>
 800757e:	23f1      	movs	r3, #241	; 0xf1
 8007580:	76fb      	strb	r3, [r7, #27]
 8007582:	e06b      	b.n	800765c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7d1b      	ldrb	r3, [r3, #20]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d104      	bne.n	8007596 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007590:	23f7      	movs	r3, #247	; 0xf7
 8007592:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007594:	e062      	b.n	800765c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007596:	2002      	movs	r0, #2
 8007598:	f7fe fb04 	bl	8005ba4 <memp_malloc>
 800759c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80075a4:	23ff      	movs	r3, #255	; 0xff
 80075a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80075a8:	e058      	b.n	800765c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8ada      	ldrh	r2, [r3, #22]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2201      	movs	r2, #1
 80075be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	7d5a      	ldrb	r2, [r3, #21]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	7a5a      	ldrb	r2, [r3, #9]
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	2200      	movs	r2, #0
 80075d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	7ada      	ldrb	r2, [r3, #11]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	7a9a      	ldrb	r2, [r3, #10]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8adb      	ldrh	r3, [r3, #22]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d021      	beq.n	800763a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80075f6:	4b23      	ldr	r3, [pc, #140]	; (8007684 <tcp_listen_with_backlog_and_err+0x148>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d105      	bne.n	800760c <tcp_listen_with_backlog_and_err+0xd0>
 8007600:	4b20      	ldr	r3, [pc, #128]	; (8007684 <tcp_listen_with_backlog_and_err+0x148>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4a1f      	ldr	r2, [pc, #124]	; (8007684 <tcp_listen_with_backlog_and_err+0x148>)
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e013      	b.n	8007634 <tcp_listen_with_backlog_and_err+0xf8>
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <tcp_listen_with_backlog_and_err+0x148>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	e00c      	b.n	800762e <tcp_listen_with_backlog_and_err+0xf2>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	429a      	cmp	r2, r3
 800761c:	d104      	bne.n	8007628 <tcp_listen_with_backlog_and_err+0xec>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	e005      	b.n	8007634 <tcp_listen_with_backlog_and_err+0xf8>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1ef      	bne.n	8007614 <tcp_listen_with_backlog_and_err+0xd8>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fbc0 	bl	8006dc0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4a11      	ldr	r2, [pc, #68]	; (8007688 <tcp_listen_with_backlog_and_err+0x14c>)
 8007644:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <tcp_listen_with_backlog_and_err+0x150>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	4a0f      	ldr	r2, [pc, #60]	; (800768c <tcp_listen_with_backlog_and_err+0x150>)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	f005 fbf2 	bl	800ce3c <tcp_timer_needed>
  res = ERR_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7efa      	ldrb	r2, [r7, #27]
 8007666:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007668:	69fb      	ldr	r3, [r7, #28]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	08011a44 	.word	0x08011a44
 8007678:	08011c38 	.word	0x08011c38
 800767c:	08011a88 	.word	0x08011a88
 8007680:	08011c68 	.word	0x08011c68
 8007684:	20006920 	.word	0x20006920
 8007688:	080074d9 	.word	0x080074d9
 800768c:	2000691c 	.word	0x2000691c

08007690 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <tcp_update_rcv_ann_wnd+0x1c>
 800769e:	4b25      	ldr	r3, [pc, #148]	; (8007734 <tcp_update_rcv_ann_wnd+0xa4>)
 80076a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80076a4:	4924      	ldr	r1, [pc, #144]	; (8007738 <tcp_update_rcv_ann_wnd+0xa8>)
 80076a6:	4825      	ldr	r0, [pc, #148]	; (800773c <tcp_update_rcv_ann_wnd+0xac>)
 80076a8:	f008 fbca 	bl	800fe40 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80076c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80076c4:	bf28      	it	cs
 80076c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80076ca:	b292      	uxth	r2, r2
 80076cc:	4413      	add	r3, r2
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db08      	blt.n	80076e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	e020      	b.n	800772a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dd03      	ble.n	80076fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076fc:	e014      	b.n	8007728 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007710:	d306      	bcc.n	8007720 <tcp_update_rcv_ann_wnd+0x90>
 8007712:	4b08      	ldr	r3, [pc, #32]	; (8007734 <tcp_update_rcv_ann_wnd+0xa4>)
 8007714:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007718:	4909      	ldr	r1, [pc, #36]	; (8007740 <tcp_update_rcv_ann_wnd+0xb0>)
 800771a:	4808      	ldr	r0, [pc, #32]	; (800773c <tcp_update_rcv_ann_wnd+0xac>)
 800771c:	f008 fb90 	bl	800fe40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007728:	2300      	movs	r3, #0
  }
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	08011a44 	.word	0x08011a44
 8007738:	08011ca0 	.word	0x08011ca0
 800773c:	08011a88 	.word	0x08011a88
 8007740:	08011cc4 	.word	0x08011cc4

08007744 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <tcp_recved+0x22>
 8007756:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <tcp_recved+0x90>)
 8007758:	f240 32cf 	movw	r2, #975	; 0x3cf
 800775c:	491e      	ldr	r1, [pc, #120]	; (80077d8 <tcp_recved+0x94>)
 800775e:	481f      	ldr	r0, [pc, #124]	; (80077dc <tcp_recved+0x98>)
 8007760:	f008 fb6e 	bl	800fe40 <iprintf>
 8007764:	e032      	b.n	80077cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7d1b      	ldrb	r3, [r3, #20]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d106      	bne.n	800777c <tcp_recved+0x38>
 800776e:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <tcp_recved+0x90>)
 8007770:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007774:	491a      	ldr	r1, [pc, #104]	; (80077e0 <tcp_recved+0x9c>)
 8007776:	4819      	ldr	r0, [pc, #100]	; (80077dc <tcp_recved+0x98>)
 8007778:	f008 fb62 	bl	800fe40 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007780:	887b      	ldrh	r3, [r7, #2]
 8007782:	4413      	add	r3, r2
 8007784:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007786:	89fb      	ldrh	r3, [r7, #14]
 8007788:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800778c:	d804      	bhi.n	8007798 <tcp_recved+0x54>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	89fa      	ldrh	r2, [r7, #14]
 8007794:	429a      	cmp	r2, r3
 8007796:	d204      	bcs.n	80077a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800779e:	851a      	strh	r2, [r3, #40]	; 0x28
 80077a0:	e002      	b.n	80077a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	89fa      	ldrh	r2, [r7, #14]
 80077a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff ff71 	bl	8007690 <tcp_update_rcv_ann_wnd>
 80077ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80077b6:	d309      	bcc.n	80077cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8b5b      	ldrh	r3, [r3, #26]
 80077bc:	f043 0302 	orr.w	r3, r3, #2
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f004 fbc2 	bl	800bf50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	08011a44 	.word	0x08011a44
 80077d8:	08011ce0 	.word	0x08011ce0
 80077dc:	08011a88 	.word	0x08011a88
 80077e0:	08011cf8 	.word	0x08011cf8

080077e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80077ee:	4b1e      	ldr	r3, [pc, #120]	; (8007868 <tcp_new_port+0x84>)
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	4b1c      	ldr	r3, [pc, #112]	; (8007868 <tcp_new_port+0x84>)
 80077f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80077fa:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <tcp_new_port+0x84>)
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007802:	4293      	cmp	r3, r2
 8007804:	d103      	bne.n	800780e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <tcp_new_port+0x84>)
 8007808:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800780c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800780e:	2300      	movs	r3, #0
 8007810:	71fb      	strb	r3, [r7, #7]
 8007812:	e01e      	b.n	8007852 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <tcp_new_port+0x88>)
 8007818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	e011      	b.n	8007846 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	8ada      	ldrh	r2, [r3, #22]
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <tcp_new_port+0x84>)
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d108      	bne.n	8007840 <tcp_new_port+0x5c>
        n++;
 800782e:	88bb      	ldrh	r3, [r7, #4]
 8007830:	3301      	adds	r3, #1
 8007832:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007834:	88bb      	ldrh	r3, [r7, #4]
 8007836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783a:	d3d8      	bcc.n	80077ee <tcp_new_port+0xa>
          return 0;
 800783c:	2300      	movs	r3, #0
 800783e:	e00d      	b.n	800785c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1ea      	bne.n	8007822 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	3301      	adds	r3, #1
 8007850:	71fb      	strb	r3, [r7, #7]
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d9dd      	bls.n	8007814 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007858:	4b03      	ldr	r3, [pc, #12]	; (8007868 <tcp_new_port+0x84>)
 800785a:	881b      	ldrh	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	2000000a 	.word	0x2000000a
 800786c:	08013a94 	.word	0x08013a94

08007870 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007870:	b5b0      	push	{r4, r5, r7, lr}
 8007872:	b090      	sub	sp, #64	; 0x40
 8007874:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800787c:	4b94      	ldr	r3, [pc, #592]	; (8007ad0 <tcp_slowtmr+0x260>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a93      	ldr	r2, [pc, #588]	; (8007ad0 <tcp_slowtmr+0x260>)
 8007884:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007886:	4b93      	ldr	r3, [pc, #588]	; (8007ad4 <tcp_slowtmr+0x264>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	b2da      	uxtb	r2, r3
 800788e:	4b91      	ldr	r3, [pc, #580]	; (8007ad4 <tcp_slowtmr+0x264>)
 8007890:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007896:	4b90      	ldr	r3, [pc, #576]	; (8007ad8 <tcp_slowtmr+0x268>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800789c:	e29d      	b.n	8007dda <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	7d1b      	ldrb	r3, [r3, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <tcp_slowtmr+0x44>
 80078a6:	4b8d      	ldr	r3, [pc, #564]	; (8007adc <tcp_slowtmr+0x26c>)
 80078a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80078ac:	498c      	ldr	r1, [pc, #560]	; (8007ae0 <tcp_slowtmr+0x270>)
 80078ae:	488d      	ldr	r0, [pc, #564]	; (8007ae4 <tcp_slowtmr+0x274>)
 80078b0:	f008 fac6 	bl	800fe40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	7d1b      	ldrb	r3, [r3, #20]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <tcp_slowtmr+0x5a>
 80078bc:	4b87      	ldr	r3, [pc, #540]	; (8007adc <tcp_slowtmr+0x26c>)
 80078be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80078c2:	4989      	ldr	r1, [pc, #548]	; (8007ae8 <tcp_slowtmr+0x278>)
 80078c4:	4887      	ldr	r0, [pc, #540]	; (8007ae4 <tcp_slowtmr+0x274>)
 80078c6:	f008 fabb 	bl	800fe40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	7d1b      	ldrb	r3, [r3, #20]
 80078ce:	2b0a      	cmp	r3, #10
 80078d0:	d106      	bne.n	80078e0 <tcp_slowtmr+0x70>
 80078d2:	4b82      	ldr	r3, [pc, #520]	; (8007adc <tcp_slowtmr+0x26c>)
 80078d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80078d8:	4984      	ldr	r1, [pc, #528]	; (8007aec <tcp_slowtmr+0x27c>)
 80078da:	4882      	ldr	r0, [pc, #520]	; (8007ae4 <tcp_slowtmr+0x274>)
 80078dc:	f008 fab0 	bl	800fe40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	7f9a      	ldrb	r2, [r3, #30]
 80078e4:	4b7b      	ldr	r3, [pc, #492]	; (8007ad4 <tcp_slowtmr+0x264>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d105      	bne.n	80078f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80078f6:	e270      	b.n	8007dda <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80078f8:	4b76      	ldr	r3, [pc, #472]	; (8007ad4 <tcp_slowtmr+0x264>)
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	7d1b      	ldrb	r3, [r3, #20]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d10a      	bne.n	800792a <tcp_slowtmr+0xba>
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800791a:	2b05      	cmp	r3, #5
 800791c:	d905      	bls.n	800792a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800791e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007922:	3301      	adds	r3, #1
 8007924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007928:	e11e      	b.n	8007b68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007930:	2b0b      	cmp	r3, #11
 8007932:	d905      	bls.n	8007940 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007938:	3301      	adds	r3, #1
 800793a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800793e:	e113      	b.n	8007b68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007946:	2b00      	cmp	r3, #0
 8007948:	d075      	beq.n	8007a36 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <tcp_slowtmr+0xf0>
 8007952:	4b62      	ldr	r3, [pc, #392]	; (8007adc <tcp_slowtmr+0x26c>)
 8007954:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007958:	4965      	ldr	r1, [pc, #404]	; (8007af0 <tcp_slowtmr+0x280>)
 800795a:	4862      	ldr	r0, [pc, #392]	; (8007ae4 <tcp_slowtmr+0x274>)
 800795c:	f008 fa70 	bl	800fe40 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <tcp_slowtmr+0x106>
 8007968:	4b5c      	ldr	r3, [pc, #368]	; (8007adc <tcp_slowtmr+0x26c>)
 800796a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800796e:	4961      	ldr	r1, [pc, #388]	; (8007af4 <tcp_slowtmr+0x284>)
 8007970:	485c      	ldr	r0, [pc, #368]	; (8007ae4 <tcp_slowtmr+0x274>)
 8007972:	f008 fa65 	bl	800fe40 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800797c:	2b0b      	cmp	r3, #11
 800797e:	d905      	bls.n	800798c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007984:	3301      	adds	r3, #1
 8007986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800798a:	e0ed      	b.n	8007b68 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007992:	3b01      	subs	r3, #1
 8007994:	4a58      	ldr	r2, [pc, #352]	; (8007af8 <tcp_slowtmr+0x288>)
 8007996:	5cd3      	ldrb	r3, [r2, r3]
 8007998:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80079a0:	7c7a      	ldrb	r2, [r7, #17]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d907      	bls.n	80079b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80079ac:	3301      	adds	r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80079bc:	7c7a      	ldrb	r2, [r7, #17]
 80079be:	429a      	cmp	r2, r3
 80079c0:	f200 80d2 	bhi.w	8007b68 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80079c4:	2301      	movs	r3, #1
 80079c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80079d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079d4:	f005 f964 	bl	800cca0 <tcp_zero_window_probe>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d014      	beq.n	8007a08 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80079de:	2300      	movs	r3, #0
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	e011      	b.n	8007a08 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079ea:	4619      	mov	r1, r3
 80079ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ee:	f004 f829 	bl	800ba44 <tcp_split_unsent_seg>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80079f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079fa:	f004 faa9 	bl	800bf50 <tcp_output>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80ac 	beq.w	8007b68 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a1e:	2b06      	cmp	r3, #6
 8007a20:	f200 80a2 	bhi.w	8007b68 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007a34:	e098      	b.n	8007b68 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	db0f      	blt.n	8007a60 <tcp_slowtmr+0x1f0>
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d008      	beq.n	8007a60 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3301      	adds	r3, #1
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	b21a      	sxth	r2, r3
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	db7b      	blt.n	8007b68 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a72:	f004 fd5f 	bl	800c534 <tcp_rexmit_rto_prepare>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <tcp_slowtmr+0x21c>
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d171      	bne.n	8007b68 <tcp_slowtmr+0x2f8>
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d06d      	beq.n	8007b68 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	7d1b      	ldrb	r3, [r3, #20]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d03a      	beq.n	8007b0a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a9a:	2b0c      	cmp	r3, #12
 8007a9c:	bf28      	it	cs
 8007a9e:	230c      	movcs	r3, #12
 8007aa0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007aa8:	10db      	asrs	r3, r3, #3
 8007aaa:	b21b      	sxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ab4:	4413      	add	r3, r2
 8007ab6:	7efa      	ldrb	r2, [r7, #27]
 8007ab8:	4910      	ldr	r1, [pc, #64]	; (8007afc <tcp_slowtmr+0x28c>)
 8007aba:	5c8a      	ldrb	r2, [r1, r2]
 8007abc:	4093      	lsls	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	dc1a      	bgt.n	8007b00 <tcp_slowtmr+0x290>
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	b21a      	sxth	r2, r3
 8007ace:	e019      	b.n	8007b04 <tcp_slowtmr+0x294>
 8007ad0:	20006918 	.word	0x20006918
 8007ad4:	200000ca 	.word	0x200000ca
 8007ad8:	20006914 	.word	0x20006914
 8007adc:	08011a44 	.word	0x08011a44
 8007ae0:	08011d88 	.word	0x08011d88
 8007ae4:	08011a88 	.word	0x08011a88
 8007ae8:	08011db4 	.word	0x08011db4
 8007aec:	08011de0 	.word	0x08011de0
 8007af0:	08011e10 	.word	0x08011e10
 8007af4:	08011e44 	.word	0x08011e44
 8007af8:	08013a8c 	.word	0x08013a8c
 8007afc:	08013a7c 	.word	0x08013a7c
 8007b00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bf28      	it	cs
 8007b20:	4613      	movcs	r3, r2
 8007b22:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007b24:	8a7b      	ldrh	r3, [r7, #18]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d206      	bcs.n	8007b50 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b64:	f004 fd56 	bl	800c614 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	7d1b      	ldrb	r3, [r3, #20]
 8007b6c:	2b06      	cmp	r3, #6
 8007b6e:	d111      	bne.n	8007b94 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	8b5b      	ldrh	r3, [r3, #26]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b7c:	4b9c      	ldr	r3, [pc, #624]	; (8007df0 <tcp_slowtmr+0x580>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b28      	cmp	r3, #40	; 0x28
 8007b88:	d904      	bls.n	8007b94 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b8e:	3301      	adds	r3, #1
 8007b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	7a5b      	ldrb	r3, [r3, #9]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04a      	beq.n	8007c36 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d003      	beq.n	8007bb0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d142      	bne.n	8007c36 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bb0:	4b8f      	ldr	r3, [pc, #572]	; (8007df0 <tcp_slowtmr+0x580>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007bc0:	4b8c      	ldr	r3, [pc, #560]	; (8007df4 <tcp_slowtmr+0x584>)
 8007bc2:	440b      	add	r3, r1
 8007bc4:	498c      	ldr	r1, [pc, #560]	; (8007df8 <tcp_slowtmr+0x588>)
 8007bc6:	fba1 1303 	umull	r1, r3, r1, r3
 8007bca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d90a      	bls.n	8007be6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bde:	3301      	adds	r3, #1
 8007be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007be4:	e027      	b.n	8007c36 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007be6:	4b82      	ldr	r3, [pc, #520]	; (8007df0 <tcp_slowtmr+0x580>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	4b7f      	ldr	r3, [pc, #508]	; (8007dfc <tcp_slowtmr+0x58c>)
 8007c00:	fb03 f300 	mul.w	r3, r3, r0
 8007c04:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007c06:	497c      	ldr	r1, [pc, #496]	; (8007df8 <tcp_slowtmr+0x588>)
 8007c08:	fba1 1303 	umull	r1, r3, r1, r3
 8007c0c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d911      	bls.n	8007c36 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c14:	f005 f804 	bl	800cc20 <tcp_keepalive>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007c1e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d011      	beq.n	8007c62 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007c3e:	4b6c      	ldr	r3, [pc, #432]	; (8007df0 <tcp_slowtmr+0x580>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007c4e:	4619      	mov	r1, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	440b      	add	r3, r1
 8007c56:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d302      	bcc.n	8007c62 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c5e:	f000 fec3 	bl	80089e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	7d1b      	ldrb	r3, [r3, #20]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d10b      	bne.n	8007c82 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c6a:	4b61      	ldr	r3, [pc, #388]	; (8007df0 <tcp_slowtmr+0x580>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b28      	cmp	r3, #40	; 0x28
 8007c76:	d904      	bls.n	8007c82 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	7d1b      	ldrb	r3, [r3, #20]
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	d10b      	bne.n	8007ca2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c8a:	4b59      	ldr	r3, [pc, #356]	; (8007df0 <tcp_slowtmr+0x580>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2bf0      	cmp	r3, #240	; 0xf0
 8007c96:	d904      	bls.n	8007ca2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d060      	beq.n	8007d6c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb4:	f000 fce4 	bl	8008680 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007cbe:	4b50      	ldr	r3, [pc, #320]	; (8007e00 <tcp_slowtmr+0x590>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d106      	bne.n	8007cd6 <tcp_slowtmr+0x466>
 8007cc8:	4b4e      	ldr	r3, [pc, #312]	; (8007e04 <tcp_slowtmr+0x594>)
 8007cca:	f240 526d 	movw	r2, #1389	; 0x56d
 8007cce:	494e      	ldr	r1, [pc, #312]	; (8007e08 <tcp_slowtmr+0x598>)
 8007cd0:	484e      	ldr	r0, [pc, #312]	; (8007e0c <tcp_slowtmr+0x59c>)
 8007cd2:	f008 f8b5 	bl	800fe40 <iprintf>
        prev->next = pcb->next;
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	e00f      	b.n	8007d00 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007ce0:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <tcp_slowtmr+0x590>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d006      	beq.n	8007cf8 <tcp_slowtmr+0x488>
 8007cea:	4b46      	ldr	r3, [pc, #280]	; (8007e04 <tcp_slowtmr+0x594>)
 8007cec:	f240 5271 	movw	r2, #1393	; 0x571
 8007cf0:	4947      	ldr	r1, [pc, #284]	; (8007e10 <tcp_slowtmr+0x5a0>)
 8007cf2:	4846      	ldr	r0, [pc, #280]	; (8007e0c <tcp_slowtmr+0x59c>)
 8007cf4:	f008 f8a4 	bl	800fe40 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	4a40      	ldr	r2, [pc, #256]	; (8007e00 <tcp_slowtmr+0x590>)
 8007cfe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d013      	beq.n	8007d30 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007d10:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	3304      	adds	r3, #4
 8007d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d18:	8ad2      	ldrh	r2, [r2, #22]
 8007d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d1c:	8b09      	ldrh	r1, [r1, #24]
 8007d1e:	9102      	str	r1, [sp, #8]
 8007d20:	9201      	str	r2, [sp, #4]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	462b      	mov	r3, r5
 8007d26:	4622      	mov	r2, r4
 8007d28:	4601      	mov	r1, r0
 8007d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d2c:	f004 fec4 	bl	800cab8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	7d1b      	ldrb	r3, [r3, #20]
 8007d3a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f7ff f83a 	bl	8006dc0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007d4c:	4b31      	ldr	r3, [pc, #196]	; (8007e14 <tcp_slowtmr+0x5a4>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <tcp_slowtmr+0x4f2>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f06f 010c 	mvn.w	r1, #12
 8007d5e:	68b8      	ldr	r0, [r7, #8]
 8007d60:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007d62:	4b2c      	ldr	r3, [pc, #176]	; (8007e14 <tcp_slowtmr+0x5a4>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d037      	beq.n	8007dda <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007d6a:	e592      	b.n	8007892 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	7f1b      	ldrb	r3, [r3, #28]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	7f1a      	ldrb	r2, [r3, #28]
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	7f5b      	ldrb	r3, [r3, #29]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d325      	bcc.n	8007dda <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007d94:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <tcp_slowtmr+0x5a4>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <tcp_slowtmr+0x54c>
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dac:	6912      	ldr	r2, [r2, #16]
 8007dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007dba:	e002      	b.n	8007dc2 <tcp_slowtmr+0x552>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <tcp_slowtmr+0x5a4>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d000      	beq.n	8007dcc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007dca:	e562      	b.n	8007892 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007dcc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f004 f8bb 	bl	800bf50 <tcp_output>
  while (pcb != NULL) {
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f47f ad5e 	bne.w	800789e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <tcp_slowtmr+0x5a8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007dec:	e069      	b.n	8007ec2 <tcp_slowtmr+0x652>
 8007dee:	bf00      	nop
 8007df0:	20006918 	.word	0x20006918
 8007df4:	000a4cb8 	.word	0x000a4cb8
 8007df8:	10624dd3 	.word	0x10624dd3
 8007dfc:	000124f8 	.word	0x000124f8
 8007e00:	20006914 	.word	0x20006914
 8007e04:	08011a44 	.word	0x08011a44
 8007e08:	08011e7c 	.word	0x08011e7c
 8007e0c:	08011a88 	.word	0x08011a88
 8007e10:	08011ea8 	.word	0x08011ea8
 8007e14:	20006910 	.word	0x20006910
 8007e18:	20006924 	.word	0x20006924
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	2b0a      	cmp	r3, #10
 8007e22:	d006      	beq.n	8007e32 <tcp_slowtmr+0x5c2>
 8007e24:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <tcp_slowtmr+0x664>)
 8007e26:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007e2a:	492b      	ldr	r1, [pc, #172]	; (8007ed8 <tcp_slowtmr+0x668>)
 8007e2c:	482b      	ldr	r0, [pc, #172]	; (8007edc <tcp_slowtmr+0x66c>)
 8007e2e:	f008 f807 	bl	800fe40 <iprintf>
    pcb_remove = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <tcp_slowtmr+0x670>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2bf0      	cmp	r3, #240	; 0xf0
 8007e44:	d904      	bls.n	8007e50 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02f      	beq.n	8007eb8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e5a:	f000 fc11 	bl	8008680 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007e64:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <tcp_slowtmr+0x674>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d106      	bne.n	8007e7c <tcp_slowtmr+0x60c>
 8007e6e:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <tcp_slowtmr+0x664>)
 8007e70:	f240 52af 	movw	r2, #1455	; 0x5af
 8007e74:	491c      	ldr	r1, [pc, #112]	; (8007ee8 <tcp_slowtmr+0x678>)
 8007e76:	4819      	ldr	r0, [pc, #100]	; (8007edc <tcp_slowtmr+0x66c>)
 8007e78:	f007 ffe2 	bl	800fe40 <iprintf>
        prev->next = pcb->next;
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	e00f      	b.n	8007ea6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007e86:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <tcp_slowtmr+0x674>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d006      	beq.n	8007e9e <tcp_slowtmr+0x62e>
 8007e90:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <tcp_slowtmr+0x664>)
 8007e92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007e96:	4915      	ldr	r1, [pc, #84]	; (8007eec <tcp_slowtmr+0x67c>)
 8007e98:	4810      	ldr	r0, [pc, #64]	; (8007edc <tcp_slowtmr+0x66c>)
 8007e9a:	f007 ffd1 	bl	800fe40 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	4a10      	ldr	r2, [pc, #64]	; (8007ee4 <tcp_slowtmr+0x674>)
 8007ea4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007eb0:	69f8      	ldr	r0, [r7, #28]
 8007eb2:	f7fe ff85 	bl	8006dc0 <tcp_free>
 8007eb6:	e004      	b.n	8007ec2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1a9      	bne.n	8007e1c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3730      	adds	r7, #48	; 0x30
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	08011a44 	.word	0x08011a44
 8007ed8:	08011ed4 	.word	0x08011ed4
 8007edc:	08011a88 	.word	0x08011a88
 8007ee0:	20006918 	.word	0x20006918
 8007ee4:	20006924 	.word	0x20006924
 8007ee8:	08011f04 	.word	0x08011f04
 8007eec:	08011f2c 	.word	0x08011f2c

08007ef0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007ef6:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <tcp_fasttmr+0xbc>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <tcp_fasttmr+0xbc>)
 8007f00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007f02:	4b2b      	ldr	r3, [pc, #172]	; (8007fb0 <tcp_fasttmr+0xc0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f08:	e048      	b.n	8007f9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7f9a      	ldrb	r2, [r3, #30]
 8007f0e:	4b27      	ldr	r3, [pc, #156]	; (8007fac <tcp_fasttmr+0xbc>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d03f      	beq.n	8007f96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007f16:	4b25      	ldr	r3, [pc, #148]	; (8007fac <tcp_fasttmr+0xbc>)
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8b5b      	ldrh	r3, [r3, #26]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d010      	beq.n	8007f4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8b5b      	ldrh	r3, [r3, #26]
 8007f2e:	f043 0302 	orr.w	r3, r3, #2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f004 f809 	bl	800bf50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8b5b      	ldrh	r3, [r3, #26]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8b5b      	ldrh	r3, [r3, #26]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8b5b      	ldrh	r3, [r3, #26]
 8007f5c:	f023 0308 	bic.w	r3, r3, #8
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff f8be 	bl	80070e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <tcp_fasttmr+0xc4>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f819 	bl	8007fb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <tcp_fasttmr+0xc4>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d000      	beq.n	8007f90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007f8e:	e7b8      	b.n	8007f02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	607b      	str	r3, [r7, #4]
 8007f94:	e002      	b.n	8007f9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1b3      	bne.n	8007f0a <tcp_fasttmr+0x1a>
    }
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	200000ca 	.word	0x200000ca
 8007fb0:	20006914 	.word	0x20006914
 8007fb4:	20006910 	.word	0x20006910

08007fb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <tcp_process_refused_data+0x22>
 8007fc6:	4b37      	ldr	r3, [pc, #220]	; (80080a4 <tcp_process_refused_data+0xec>)
 8007fc8:	f240 6209 	movw	r2, #1545	; 0x609
 8007fcc:	4936      	ldr	r1, [pc, #216]	; (80080a8 <tcp_process_refused_data+0xf0>)
 8007fce:	4837      	ldr	r0, [pc, #220]	; (80080ac <tcp_process_refused_data+0xf4>)
 8007fd0:	f007 ff36 	bl	800fe40 <iprintf>
 8007fd4:	f06f 030f 	mvn.w	r3, #15
 8007fd8:	e060      	b.n	800809c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fde:	7b5b      	ldrb	r3, [r3, #13]
 8007fe0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00b      	beq.n	8008010 <tcp_process_refused_data+0x58>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6918      	ldr	r0, [r3, #16]
 8008002:	2300      	movs	r3, #0
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	47a0      	blx	r4
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e007      	b.n	8008020 <tcp_process_refused_data+0x68>
 8008010:	2300      	movs	r3, #0
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	2000      	movs	r0, #0
 8008018:	f000 f8c2 	bl	80081a0 <tcp_recv_null>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d12a      	bne.n	800807e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d033      	beq.n	800809a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008036:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800803a:	d005      	beq.n	8008048 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008040:	3301      	adds	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00b      	beq.n	800806a <tcp_process_refused_data+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6918      	ldr	r0, [r3, #16]
 800805c:	2300      	movs	r3, #0
 800805e:	2200      	movs	r2, #0
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	47a0      	blx	r4
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	e001      	b.n	800806e <tcp_process_refused_data+0xb6>
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800806e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008072:	f113 0f0d 	cmn.w	r3, #13
 8008076:	d110      	bne.n	800809a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008078:	f06f 030c 	mvn.w	r3, #12
 800807c:	e00e      	b.n	800809c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800807e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008082:	f113 0f0d 	cmn.w	r3, #13
 8008086:	d102      	bne.n	800808e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008088:	f06f 030c 	mvn.w	r3, #12
 800808c:	e006      	b.n	800809c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008094:	f06f 0304 	mvn.w	r3, #4
 8008098:	e000      	b.n	800809c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}
 80080a4:	08011a44 	.word	0x08011a44
 80080a8:	08011f54 	.word	0x08011f54
 80080ac:	08011a88 	.word	0x08011a88

080080b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80080b8:	e007      	b.n	80080ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f80a 	bl	80080da <tcp_seg_free>
    seg = next;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f4      	bne.n	80080ba <tcp_segs_free+0xa>
  }
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fbb3 	bl	8006860 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	2003      	movs	r0, #3
 80080fe:	f7fd fd9d 	bl	8005c3c <memp_free>
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d107      	bne.n	800812e <tcp_setprio+0x22>
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <tcp_setprio+0x30>)
 8008120:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008124:	4906      	ldr	r1, [pc, #24]	; (8008140 <tcp_setprio+0x34>)
 8008126:	4807      	ldr	r0, [pc, #28]	; (8008144 <tcp_setprio+0x38>)
 8008128:	f007 fe8a 	bl	800fe40 <iprintf>
 800812c:	e002      	b.n	8008134 <tcp_setprio+0x28>

  pcb->prio = prio;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	755a      	strb	r2, [r3, #21]
}
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	08011a44 	.word	0x08011a44
 8008140:	08011f7c 	.word	0x08011f7c
 8008144:	08011a88 	.word	0x08011a88

08008148 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <tcp_seg_copy+0x1c>
 8008156:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <tcp_seg_copy+0x4c>)
 8008158:	f240 6282 	movw	r2, #1666	; 0x682
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <tcp_seg_copy+0x50>)
 800815e:	480f      	ldr	r0, [pc, #60]	; (800819c <tcp_seg_copy+0x54>)
 8008160:	f007 fe6e 	bl	800fe40 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008164:	2003      	movs	r0, #3
 8008166:	f7fd fd1d 	bl	8005ba4 <memp_malloc>
 800816a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <tcp_seg_copy+0x2e>
    return NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	e00a      	b.n	800818c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008176:	2210      	movs	r2, #16
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f007 fe4a 	bl	800fe14 <memcpy>
  pbuf_ref(cseg->p);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fc0b 	bl	80069a0 <pbuf_ref>
  return cseg;
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08011a44 	.word	0x08011a44
 8008198:	08011f98 	.word	0x08011f98
 800819c:	08011a88 	.word	0x08011a88

080081a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <tcp_recv_null+0x28>
 80081b4:	4b12      	ldr	r3, [pc, #72]	; (8008200 <tcp_recv_null+0x60>)
 80081b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80081ba:	4912      	ldr	r1, [pc, #72]	; (8008204 <tcp_recv_null+0x64>)
 80081bc:	4812      	ldr	r0, [pc, #72]	; (8008208 <tcp_recv_null+0x68>)
 80081be:	f007 fe3f 	bl	800fe40 <iprintf>
 80081c2:	f06f 030f 	mvn.w	r3, #15
 80081c6:	e016      	b.n	80081f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	891b      	ldrh	r3, [r3, #8]
 80081d2:	4619      	mov	r1, r3
 80081d4:	68b8      	ldr	r0, [r7, #8]
 80081d6:	f7ff fab5 	bl	8007744 <tcp_recved>
    pbuf_free(p);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fe fb40 	bl	8006860 <pbuf_free>
 80081e0:	e008      	b.n	80081f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80081e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80081ea:	68b8      	ldr	r0, [r7, #8]
 80081ec:	f7fe ffe6 	bl	80071bc <tcp_close>
 80081f0:	4603      	mov	r3, r0
 80081f2:	e000      	b.n	80081f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08011a44 	.word	0x08011a44
 8008204:	08011fb4 	.word	0x08011fb4
 8008208:	08011a88 	.word	0x08011a88

0800820c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	db01      	blt.n	8008222 <tcp_kill_prio+0x16>
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	e000      	b.n	8008224 <tcp_kill_prio+0x18>
 8008222:	237f      	movs	r3, #127	; 0x7f
 8008224:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008226:	7afb      	ldrb	r3, [r7, #11]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d034      	beq.n	8008296 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3b01      	subs	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <tcp_kill_prio+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e01f      	b.n	8008282 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	7d5b      	ldrb	r3, [r3, #21]
 8008246:	7afa      	ldrb	r2, [r7, #11]
 8008248:	429a      	cmp	r2, r3
 800824a:	d80c      	bhi.n	8008266 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008250:	7afa      	ldrb	r2, [r7, #11]
 8008252:	429a      	cmp	r2, r3
 8008254:	d112      	bne.n	800827c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <tcp_kill_prio+0x98>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	429a      	cmp	r2, r3
 8008264:	d80a      	bhi.n	800827c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <tcp_kill_prio+0x98>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	7d5b      	ldrb	r3, [r3, #21]
 800827a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1dc      	bne.n	8008242 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800828e:	6938      	ldr	r0, [r7, #16]
 8008290:	f7ff f87e 	bl	8007390 <tcp_abort>
 8008294:	e000      	b.n	8008298 <tcp_kill_prio+0x8c>
    return;
 8008296:	bf00      	nop
  }
}
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20006914 	.word	0x20006914
 80082a4:	20006918 	.word	0x20006918

080082a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d009      	beq.n	80082cc <tcp_kill_state+0x24>
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d006      	beq.n	80082cc <tcp_kill_state+0x24>
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <tcp_kill_state+0x80>)
 80082c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80082c4:	4919      	ldr	r1, [pc, #100]	; (800832c <tcp_kill_state+0x84>)
 80082c6:	481a      	ldr	r0, [pc, #104]	; (8008330 <tcp_kill_state+0x88>)
 80082c8:	f007 fdba 	bl	800fe40 <iprintf>

  inactivity = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082d4:	4b17      	ldr	r3, [pc, #92]	; (8008334 <tcp_kill_state+0x8c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	e017      	b.n	800830c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	7d1b      	ldrb	r3, [r3, #20]
 80082e0:	79fa      	ldrb	r2, [r7, #7]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d10f      	bne.n	8008306 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082e6:	4b14      	ldr	r3, [pc, #80]	; (8008338 <tcp_kill_state+0x90>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d807      	bhi.n	8008306 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <tcp_kill_state+0x90>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e4      	bne.n	80082dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008318:	2100      	movs	r1, #0
 800831a:	6938      	ldr	r0, [r7, #16]
 800831c:	f7fe ff7a 	bl	8007214 <tcp_abandon>
  }
}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08011a44 	.word	0x08011a44
 800832c:	08011fd0 	.word	0x08011fd0
 8008330:	08011a88 	.word	0x08011a88
 8008334:	20006914 	.word	0x20006914
 8008338:	20006918 	.word	0x20006918

0800833c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <tcp_kill_timewait+0x58>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e012      	b.n	8008378 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008352:	4b11      	ldr	r3, [pc, #68]	; (8008398 <tcp_kill_timewait+0x5c>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d807      	bhi.n	8008372 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008362:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <tcp_kill_timewait+0x5c>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e9      	bne.n	8008352 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008384:	68b8      	ldr	r0, [r7, #8]
 8008386:	f7ff f803 	bl	8007390 <tcp_abort>
  }
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20006924 	.word	0x20006924
 8008398:	20006918 	.word	0x20006918

0800839c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <tcp_handle_closepend+0x48>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80083a8:	e014      	b.n	80083d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8b5b      	ldrh	r3, [r3, #26]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d009      	beq.n	80083d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8b5b      	ldrh	r3, [r3, #26]
 80083c0:	f023 0308 	bic.w	r3, r3, #8
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fe fe8c 	bl	80070e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e7      	bne.n	80083aa <tcp_handle_closepend+0xe>
  }
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20006914 	.word	0x20006914

080083e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083f2:	2001      	movs	r0, #1
 80083f4:	f7fd fbd6 	bl	8005ba4 <memp_malloc>
 80083f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d126      	bne.n	800844e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008400:	f7ff ffcc 	bl	800839c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008404:	f7ff ff9a 	bl	800833c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008408:	2001      	movs	r0, #1
 800840a:	f7fd fbcb 	bl	8005ba4 <memp_malloc>
 800840e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d11b      	bne.n	800844e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008416:	2009      	movs	r0, #9
 8008418:	f7ff ff46 	bl	80082a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800841c:	2001      	movs	r0, #1
 800841e:	f7fd fbc1 	bl	8005ba4 <memp_malloc>
 8008422:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d111      	bne.n	800844e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800842a:	2008      	movs	r0, #8
 800842c:	f7ff ff3c 	bl	80082a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008430:	2001      	movs	r0, #1
 8008432:	f7fd fbb7 	bl	8005ba4 <memp_malloc>
 8008436:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff fee3 	bl	800820c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008446:	2001      	movs	r0, #1
 8008448:	f7fd fbac 	bl	8005ba4 <memp_malloc>
 800844c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d03f      	beq.n	80084d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008454:	229c      	movs	r2, #156	; 0x9c
 8008456:	2100      	movs	r1, #0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f007 fce9 	bl	800fe30 <memset>
    pcb->prio = prio;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	79fa      	ldrb	r2, [r7, #7]
 8008462:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800846a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	22ff      	movs	r2, #255	; 0xff
 8008482:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f44f 7206 	mov.w	r2, #536	; 0x218
 800848a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2206      	movs	r2, #6
 8008490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2206      	movs	r2, #6
 8008498:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <tcp_alloc+0xf8>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80084b2:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <tcp_alloc+0xfc>)
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80084c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4a08      	ldr	r2, [pc, #32]	; (80084e8 <tcp_alloc+0x100>)
 80084c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4a07      	ldr	r2, [pc, #28]	; (80084ec <tcp_alloc+0x104>)
 80084d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20006918 	.word	0x20006918
 80084e4:	200000ca 	.word	0x200000ca
 80084e8:	080081a1 	.word	0x080081a1
 80084ec:	006ddd00 	.word	0x006ddd00

080084f0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80084f4:	2040      	movs	r0, #64	; 0x40
 80084f6:	f7ff ff77 	bl	80083e8 <tcp_alloc>
 80084fa:	4603      	mov	r3, r0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	bd80      	pop	{r7, pc}

08008500 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	611a      	str	r2, [r3, #16]
  }
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	7d1b      	ldrb	r3, [r3, #20]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d106      	bne.n	800854a <tcp_recv+0x26>
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <tcp_recv+0x38>)
 800853e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008542:	4907      	ldr	r1, [pc, #28]	; (8008560 <tcp_recv+0x3c>)
 8008544:	4807      	ldr	r0, [pc, #28]	; (8008564 <tcp_recv+0x40>)
 8008546:	f007 fc7b 	bl	800fe40 <iprintf>
    pcb->recv = recv;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	08011a44 	.word	0x08011a44
 8008560:	08011fe0 	.word	0x08011fe0
 8008564:	08011a88 	.word	0x08011a88

08008568 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7d1b      	ldrb	r3, [r3, #20]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <tcp_sent+0x26>
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <tcp_sent+0x38>)
 8008582:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008586:	4907      	ldr	r1, [pc, #28]	; (80085a4 <tcp_sent+0x3c>)
 8008588:	4807      	ldr	r0, [pc, #28]	; (80085a8 <tcp_sent+0x40>)
 800858a:	f007 fc59 	bl	800fe40 <iprintf>
    pcb->sent = sent;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	08011a44 	.word	0x08011a44
 80085a4:	08012008 	.word	0x08012008
 80085a8:	08011a88 	.word	0x08011a88

080085ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7d1b      	ldrb	r3, [r3, #20]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d106      	bne.n	80085d2 <tcp_err+0x26>
 80085c4:	4b07      	ldr	r3, [pc, #28]	; (80085e4 <tcp_err+0x38>)
 80085c6:	f640 020d 	movw	r2, #2061	; 0x80d
 80085ca:	4907      	ldr	r1, [pc, #28]	; (80085e8 <tcp_err+0x3c>)
 80085cc:	4807      	ldr	r0, [pc, #28]	; (80085ec <tcp_err+0x40>)
 80085ce:	f007 fc37 	bl	800fe40 <iprintf>
    pcb->errf = err;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	08011a44 	.word	0x08011a44
 80085e8:	08012030 	.word	0x08012030
 80085ec:	08011a88 	.word	0x08011a88

080085f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d008      	beq.n	8008612 <tcp_accept+0x22>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	7d1b      	ldrb	r3, [r3, #20]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d104      	bne.n	8008612 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	619a      	str	r2, [r3, #24]
  }
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
	...

08008620 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d107      	bne.n	8008644 <tcp_poll+0x24>
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <tcp_poll+0x50>)
 8008636:	f640 023d 	movw	r2, #2109	; 0x83d
 800863a:	490e      	ldr	r1, [pc, #56]	; (8008674 <tcp_poll+0x54>)
 800863c:	480e      	ldr	r0, [pc, #56]	; (8008678 <tcp_poll+0x58>)
 800863e:	f007 fbff 	bl	800fe40 <iprintf>
 8008642:	e011      	b.n	8008668 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7d1b      	ldrb	r3, [r3, #20]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d106      	bne.n	800865a <tcp_poll+0x3a>
 800864c:	4b08      	ldr	r3, [pc, #32]	; (8008670 <tcp_poll+0x50>)
 800864e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008652:	490a      	ldr	r1, [pc, #40]	; (800867c <tcp_poll+0x5c>)
 8008654:	4808      	ldr	r0, [pc, #32]	; (8008678 <tcp_poll+0x58>)
 8008656:	f007 fbf3 	bl	800fe40 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	79fa      	ldrb	r2, [r7, #7]
 8008666:	775a      	strb	r2, [r3, #29]
}
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	08011a44 	.word	0x08011a44
 8008674:	08012058 	.word	0x08012058
 8008678:	08011a88 	.word	0x08011a88
 800867c:	08012070 	.word	0x08012070

08008680 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d107      	bne.n	800869e <tcp_pcb_purge+0x1e>
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <tcp_pcb_purge+0x94>)
 8008690:	f640 0251 	movw	r2, #2129	; 0x851
 8008694:	4920      	ldr	r1, [pc, #128]	; (8008718 <tcp_pcb_purge+0x98>)
 8008696:	4821      	ldr	r0, [pc, #132]	; (800871c <tcp_pcb_purge+0x9c>)
 8008698:	f007 fbd2 	bl	800fe40 <iprintf>
 800869c:	e037      	b.n	800870e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	7d1b      	ldrb	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d033      	beq.n	800870e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	d02f      	beq.n	800870e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d02b      	beq.n	800870e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe f8cc 	bl	8006860 <pbuf_free>
      pcb->refused_data = NULL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f986 	bl	80089e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fce1 	bl	80080b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fcdc 	bl	80080b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	08011a44 	.word	0x08011a44
 8008718:	08012090 	.word	0x08012090
 800871c:	08011a88 	.word	0x08011a88

08008720 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d106      	bne.n	800873e <tcp_pcb_remove+0x1e>
 8008730:	4b3e      	ldr	r3, [pc, #248]	; (800882c <tcp_pcb_remove+0x10c>)
 8008732:	f640 0283 	movw	r2, #2179	; 0x883
 8008736:	493e      	ldr	r1, [pc, #248]	; (8008830 <tcp_pcb_remove+0x110>)
 8008738:	483e      	ldr	r0, [pc, #248]	; (8008834 <tcp_pcb_remove+0x114>)
 800873a:	f007 fb81 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <tcp_pcb_remove+0x32>
 8008744:	4b39      	ldr	r3, [pc, #228]	; (800882c <tcp_pcb_remove+0x10c>)
 8008746:	f640 0284 	movw	r2, #2180	; 0x884
 800874a:	493b      	ldr	r1, [pc, #236]	; (8008838 <tcp_pcb_remove+0x118>)
 800874c:	4839      	ldr	r0, [pc, #228]	; (8008834 <tcp_pcb_remove+0x114>)
 800874e:	f007 fb77 	bl	800fe40 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d105      	bne.n	8008768 <tcp_pcb_remove+0x48>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e013      	b.n	8008790 <tcp_pcb_remove+0x70>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	e00c      	b.n	800878a <tcp_pcb_remove+0x6a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d104      	bne.n	8008784 <tcp_pcb_remove+0x64>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	60da      	str	r2, [r3, #12]
 8008782:	e005      	b.n	8008790 <tcp_pcb_remove+0x70>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ef      	bne.n	8008770 <tcp_pcb_remove+0x50>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008796:	6838      	ldr	r0, [r7, #0]
 8008798:	f7ff ff72 	bl	8008680 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	7d1b      	ldrb	r3, [r3, #20]
 80087a0:	2b0a      	cmp	r3, #10
 80087a2:	d013      	beq.n	80087cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d00f      	beq.n	80087cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	8b5b      	ldrh	r3, [r3, #26]
 80087b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d009      	beq.n	80087cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	8b5b      	ldrh	r3, [r3, #26]
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087c6:	6838      	ldr	r0, [r7, #0]
 80087c8:	f003 fbc2 	bl	800bf50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	7d1b      	ldrb	r3, [r3, #20]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d020      	beq.n	8008816 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d006      	beq.n	80087ea <tcp_pcb_remove+0xca>
 80087dc:	4b13      	ldr	r3, [pc, #76]	; (800882c <tcp_pcb_remove+0x10c>)
 80087de:	f640 0293 	movw	r2, #2195	; 0x893
 80087e2:	4916      	ldr	r1, [pc, #88]	; (800883c <tcp_pcb_remove+0x11c>)
 80087e4:	4813      	ldr	r0, [pc, #76]	; (8008834 <tcp_pcb_remove+0x114>)
 80087e6:	f007 fb2b 	bl	800fe40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d006      	beq.n	8008800 <tcp_pcb_remove+0xe0>
 80087f2:	4b0e      	ldr	r3, [pc, #56]	; (800882c <tcp_pcb_remove+0x10c>)
 80087f4:	f640 0294 	movw	r2, #2196	; 0x894
 80087f8:	4911      	ldr	r1, [pc, #68]	; (8008840 <tcp_pcb_remove+0x120>)
 80087fa:	480e      	ldr	r0, [pc, #56]	; (8008834 <tcp_pcb_remove+0x114>)
 80087fc:	f007 fb20 	bl	800fe40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008804:	2b00      	cmp	r3, #0
 8008806:	d006      	beq.n	8008816 <tcp_pcb_remove+0xf6>
 8008808:	4b08      	ldr	r3, [pc, #32]	; (800882c <tcp_pcb_remove+0x10c>)
 800880a:	f640 0296 	movw	r2, #2198	; 0x896
 800880e:	490d      	ldr	r1, [pc, #52]	; (8008844 <tcp_pcb_remove+0x124>)
 8008810:	4808      	ldr	r0, [pc, #32]	; (8008834 <tcp_pcb_remove+0x114>)
 8008812:	f007 fb15 	bl	800fe40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2200      	movs	r2, #0
 800881a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	08011a44 	.word	0x08011a44
 8008830:	080120ac 	.word	0x080120ac
 8008834:	08011a88 	.word	0x08011a88
 8008838:	080120c8 	.word	0x080120c8
 800883c:	080120e8 	.word	0x080120e8
 8008840:	08012100 	.word	0x08012100
 8008844:	0801211c 	.word	0x0801211c

08008848 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <tcp_next_iss+0x1c>
 8008856:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <tcp_next_iss+0x38>)
 8008858:	f640 02af 	movw	r2, #2223	; 0x8af
 800885c:	4909      	ldr	r1, [pc, #36]	; (8008884 <tcp_next_iss+0x3c>)
 800885e:	480a      	ldr	r0, [pc, #40]	; (8008888 <tcp_next_iss+0x40>)
 8008860:	f007 faee 	bl	800fe40 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <tcp_next_iss+0x44>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4b09      	ldr	r3, [pc, #36]	; (8008890 <tcp_next_iss+0x48>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4413      	add	r3, r2
 800886e:	4a07      	ldr	r2, [pc, #28]	; (800888c <tcp_next_iss+0x44>)
 8008870:	6013      	str	r3, [r2, #0]
  return iss;
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <tcp_next_iss+0x44>)
 8008874:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	08011a44 	.word	0x08011a44
 8008884:	08012134 	.word	0x08012134
 8008888:	08011a88 	.word	0x08011a88
 800888c:	2000000c 	.word	0x2000000c
 8008890:	20006918 	.word	0x20006918

08008894 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <tcp_eff_send_mss_netif+0x22>
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <tcp_eff_send_mss_netif+0x68>)
 80088aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80088ae:	4914      	ldr	r1, [pc, #80]	; (8008900 <tcp_eff_send_mss_netif+0x6c>)
 80088b0:	4814      	ldr	r0, [pc, #80]	; (8008904 <tcp_eff_send_mss_netif+0x70>)
 80088b2:	f007 fac5 	bl	800fe40 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80088bc:	89fb      	ldrh	r3, [r7, #14]
 80088be:	e019      	b.n	80088f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80088c6:	8afb      	ldrh	r3, [r7, #22]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d012      	beq.n	80088f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80088cc:	2328      	movs	r3, #40	; 0x28
 80088ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80088d0:	8afa      	ldrh	r2, [r7, #22]
 80088d2:	8abb      	ldrh	r3, [r7, #20]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d904      	bls.n	80088e2 <tcp_eff_send_mss_netif+0x4e>
 80088d8:	8afa      	ldrh	r2, [r7, #22]
 80088da:	8abb      	ldrh	r3, [r7, #20]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	b29b      	uxth	r3, r3
 80088e0:	e000      	b.n	80088e4 <tcp_eff_send_mss_netif+0x50>
 80088e2:	2300      	movs	r3, #0
 80088e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80088e6:	8a7a      	ldrh	r2, [r7, #18]
 80088e8:	89fb      	ldrh	r3, [r7, #14]
 80088ea:	4293      	cmp	r3, r2
 80088ec:	bf28      	it	cs
 80088ee:	4613      	movcs	r3, r2
 80088f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80088f2:	89fb      	ldrh	r3, [r7, #14]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	08011a44 	.word	0x08011a44
 8008900:	08012150 	.word	0x08012150
 8008904:	08011a88 	.word	0x08011a88

08008908 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d119      	bne.n	8008950 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800891e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008922:	4910      	ldr	r1, [pc, #64]	; (8008964 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008924:	4810      	ldr	r0, [pc, #64]	; (8008968 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008926:	f007 fa8b 	bl	800fe40 <iprintf>

  while (pcb != NULL) {
 800892a:	e011      	b.n	8008950 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d108      	bne.n	800894a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7fe fd26 	bl	8007390 <tcp_abort>
      pcb = next;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e002      	b.n	8008950 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ea      	bne.n	800892c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	08011a44 	.word	0x08011a44
 8008964:	08012178 	.word	0x08012178
 8008968:	08011a88 	.word	0x08011a88

0800896c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02a      	beq.n	80089d2 <tcp_netif_ip_addr_changed+0x66>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d026      	beq.n	80089d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008984:	4b15      	ldr	r3, [pc, #84]	; (80089dc <tcp_netif_ip_addr_changed+0x70>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff ffbc 	bl	8008908 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008990:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <tcp_netif_ip_addr_changed+0x74>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff ffb6 	bl	8008908 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <tcp_netif_ip_addr_changed+0x66>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d013      	beq.n	80089d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089aa:	4b0e      	ldr	r3, [pc, #56]	; (80089e4 <tcp_netif_ip_addr_changed+0x78>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e00c      	b.n	80089cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d103      	bne.n	80089c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1ef      	bne.n	80089b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20006914 	.word	0x20006914
 80089e0:	20006920 	.word	0x20006920
 80089e4:	2000691c 	.word	0x2000691c

080089e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fb57 	bl	80080b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b08d      	sub	sp, #52	; 0x34
 8008a14:	af04      	add	r7, sp, #16
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <tcp_input+0x1c>
 8008a20:	4b9b      	ldr	r3, [pc, #620]	; (8008c90 <tcp_input+0x280>)
 8008a22:	2283      	movs	r2, #131	; 0x83
 8008a24:	499b      	ldr	r1, [pc, #620]	; (8008c94 <tcp_input+0x284>)
 8008a26:	489c      	ldr	r0, [pc, #624]	; (8008c98 <tcp_input+0x288>)
 8008a28:	f007 fa0a 	bl	800fe40 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	4a9a      	ldr	r2, [pc, #616]	; (8008c9c <tcp_input+0x28c>)
 8008a32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	895b      	ldrh	r3, [r3, #10]
 8008a38:	2b13      	cmp	r3, #19
 8008a3a:	f240 83c4 	bls.w	80091c6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a3e:	4b98      	ldr	r3, [pc, #608]	; (8008ca0 <tcp_input+0x290>)
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	4a97      	ldr	r2, [pc, #604]	; (8008ca0 <tcp_input+0x290>)
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f006 f86b 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f040 83ba 	bne.w	80091ca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a56:	4b92      	ldr	r3, [pc, #584]	; (8008ca0 <tcp_input+0x290>)
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a5e:	2be0      	cmp	r3, #224	; 0xe0
 8008a60:	f000 83b3 	beq.w	80091ca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a64:	4b8d      	ldr	r3, [pc, #564]	; (8008c9c <tcp_input+0x28c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	899b      	ldrh	r3, [r3, #12]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fc fc43 	bl	80052f8 <lwip_htons>
 8008a72:	4603      	mov	r3, r0
 8008a74:	0b1b      	lsrs	r3, r3, #12
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a7e:	7cbb      	ldrb	r3, [r7, #18]
 8008a80:	2b13      	cmp	r3, #19
 8008a82:	f240 83a4 	bls.w	80091ce <tcp_input+0x7be>
 8008a86:	7cbb      	ldrb	r3, [r7, #18]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	891b      	ldrh	r3, [r3, #8]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	f200 839d 	bhi.w	80091ce <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008a94:	7cbb      	ldrb	r3, [r7, #18]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	3b14      	subs	r3, #20
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	4b81      	ldr	r3, [pc, #516]	; (8008ca4 <tcp_input+0x294>)
 8008a9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008aa0:	4b81      	ldr	r3, [pc, #516]	; (8008ca8 <tcp_input+0x298>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	895a      	ldrh	r2, [r3, #10]
 8008aaa:	7cbb      	ldrb	r3, [r7, #18]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d309      	bcc.n	8008ac6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008ab2:	4b7c      	ldr	r3, [pc, #496]	; (8008ca4 <tcp_input+0x294>)
 8008ab4:	881a      	ldrh	r2, [r3, #0]
 8008ab6:	4b7d      	ldr	r3, [pc, #500]	; (8008cac <tcp_input+0x29c>)
 8008ab8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008aba:	7cbb      	ldrb	r3, [r7, #18]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fd fe48 	bl	8006754 <pbuf_remove_header>
 8008ac4:	e04e      	b.n	8008b64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d105      	bne.n	8008ada <tcp_input+0xca>
 8008ace:	4b70      	ldr	r3, [pc, #448]	; (8008c90 <tcp_input+0x280>)
 8008ad0:	22c2      	movs	r2, #194	; 0xc2
 8008ad2:	4977      	ldr	r1, [pc, #476]	; (8008cb0 <tcp_input+0x2a0>)
 8008ad4:	4870      	ldr	r0, [pc, #448]	; (8008c98 <tcp_input+0x288>)
 8008ad6:	f007 f9b3 	bl	800fe40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008ada:	2114      	movs	r1, #20
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fd fe39 	bl	8006754 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	895a      	ldrh	r2, [r3, #10]
 8008ae6:	4b71      	ldr	r3, [pc, #452]	; (8008cac <tcp_input+0x29c>)
 8008ae8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008aea:	4b6e      	ldr	r3, [pc, #440]	; (8008ca4 <tcp_input+0x294>)
 8008aec:	881a      	ldrh	r2, [r3, #0]
 8008aee:	4b6f      	ldr	r3, [pc, #444]	; (8008cac <tcp_input+0x29c>)
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008af6:	4b6d      	ldr	r3, [pc, #436]	; (8008cac <tcp_input+0x29c>)
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fd fe29 	bl	8006754 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	895b      	ldrh	r3, [r3, #10]
 8008b08:	8a3a      	ldrh	r2, [r7, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	f200 8361 	bhi.w	80091d2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	4a64      	ldr	r2, [pc, #400]	; (8008ca8 <tcp_input+0x298>)
 8008b18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	8a3a      	ldrh	r2, [r7, #16]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fd fe16 	bl	8006754 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	891a      	ldrh	r2, [r3, #8]
 8008b2c:	8a3b      	ldrh	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	895b      	ldrh	r3, [r3, #10]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <tcp_input+0x13a>
 8008b3e:	4b54      	ldr	r3, [pc, #336]	; (8008c90 <tcp_input+0x280>)
 8008b40:	22df      	movs	r2, #223	; 0xdf
 8008b42:	495c      	ldr	r1, [pc, #368]	; (8008cb4 <tcp_input+0x2a4>)
 8008b44:	4854      	ldr	r0, [pc, #336]	; (8008c98 <tcp_input+0x288>)
 8008b46:	f007 f97b 	bl	800fe40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	891a      	ldrh	r2, [r3, #8]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	891b      	ldrh	r3, [r3, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d005      	beq.n	8008b64 <tcp_input+0x154>
 8008b58:	4b4d      	ldr	r3, [pc, #308]	; (8008c90 <tcp_input+0x280>)
 8008b5a:	22e0      	movs	r2, #224	; 0xe0
 8008b5c:	4956      	ldr	r1, [pc, #344]	; (8008cb8 <tcp_input+0x2a8>)
 8008b5e:	484e      	ldr	r0, [pc, #312]	; (8008c98 <tcp_input+0x288>)
 8008b60:	f007 f96e 	bl	800fe40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b64:	4b4d      	ldr	r3, [pc, #308]	; (8008c9c <tcp_input+0x28c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4a4b      	ldr	r2, [pc, #300]	; (8008c9c <tcp_input+0x28c>)
 8008b6e:	6814      	ldr	r4, [r2, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fc fbc1 	bl	80052f8 <lwip_htons>
 8008b76:	4603      	mov	r3, r0
 8008b78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b7a:	4b48      	ldr	r3, [pc, #288]	; (8008c9c <tcp_input+0x28c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	885b      	ldrh	r3, [r3, #2]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	4a46      	ldr	r2, [pc, #280]	; (8008c9c <tcp_input+0x28c>)
 8008b84:	6814      	ldr	r4, [r2, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fc fbb6 	bl	80052f8 <lwip_htons>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b90:	4b42      	ldr	r3, [pc, #264]	; (8008c9c <tcp_input+0x28c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	4a41      	ldr	r2, [pc, #260]	; (8008c9c <tcp_input+0x28c>)
 8008b98:	6814      	ldr	r4, [r2, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fc fbc1 	bl	8005322 <lwip_htonl>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	6063      	str	r3, [r4, #4]
 8008ba4:	6863      	ldr	r3, [r4, #4]
 8008ba6:	4a45      	ldr	r2, [pc, #276]	; (8008cbc <tcp_input+0x2ac>)
 8008ba8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008baa:	4b3c      	ldr	r3, [pc, #240]	; (8008c9c <tcp_input+0x28c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	4a3a      	ldr	r2, [pc, #232]	; (8008c9c <tcp_input+0x28c>)
 8008bb2:	6814      	ldr	r4, [r2, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fc fbb4 	bl	8005322 <lwip_htonl>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	60a3      	str	r3, [r4, #8]
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	4a3f      	ldr	r2, [pc, #252]	; (8008cc0 <tcp_input+0x2b0>)
 8008bc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008bc4:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <tcp_input+0x28c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	89db      	ldrh	r3, [r3, #14]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <tcp_input+0x28c>)
 8008bce:	6814      	ldr	r4, [r2, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fc fb91 	bl	80052f8 <lwip_htons>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008bda:	4b30      	ldr	r3, [pc, #192]	; (8008c9c <tcp_input+0x28c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	899b      	ldrh	r3, [r3, #12]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fc fb88 	bl	80052f8 <lwip_htons>
 8008be8:	4603      	mov	r3, r0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <tcp_input+0x2b4>)
 8008bf4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	891a      	ldrh	r2, [r3, #8]
 8008bfa:	4b33      	ldr	r3, [pc, #204]	; (8008cc8 <tcp_input+0x2b8>)
 8008bfc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008bfe:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <tcp_input+0x2b4>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00c      	beq.n	8008c24 <tcp_input+0x214>
    tcplen++;
 8008c0a:	4b2f      	ldr	r3, [pc, #188]	; (8008cc8 <tcp_input+0x2b8>)
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	4b2d      	ldr	r3, [pc, #180]	; (8008cc8 <tcp_input+0x2b8>)
 8008c14:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	891a      	ldrh	r2, [r3, #8]
 8008c1a:	4b2b      	ldr	r3, [pc, #172]	; (8008cc8 <tcp_input+0x2b8>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	f200 82d9 	bhi.w	80091d6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c28:	4b28      	ldr	r3, [pc, #160]	; (8008ccc <tcp_input+0x2bc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	e09d      	b.n	8008d6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	7d1b      	ldrb	r3, [r3, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d105      	bne.n	8008c44 <tcp_input+0x234>
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <tcp_input+0x280>)
 8008c3a:	22fb      	movs	r2, #251	; 0xfb
 8008c3c:	4924      	ldr	r1, [pc, #144]	; (8008cd0 <tcp_input+0x2c0>)
 8008c3e:	4816      	ldr	r0, [pc, #88]	; (8008c98 <tcp_input+0x288>)
 8008c40:	f007 f8fe 	bl	800fe40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	7d1b      	ldrb	r3, [r3, #20]
 8008c48:	2b0a      	cmp	r3, #10
 8008c4a:	d105      	bne.n	8008c58 <tcp_input+0x248>
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <tcp_input+0x280>)
 8008c4e:	22fc      	movs	r2, #252	; 0xfc
 8008c50:	4920      	ldr	r1, [pc, #128]	; (8008cd4 <tcp_input+0x2c4>)
 8008c52:	4811      	ldr	r0, [pc, #68]	; (8008c98 <tcp_input+0x288>)
 8008c54:	f007 f8f4 	bl	800fe40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	7d1b      	ldrb	r3, [r3, #20]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d105      	bne.n	8008c6c <tcp_input+0x25c>
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <tcp_input+0x280>)
 8008c62:	22fd      	movs	r2, #253	; 0xfd
 8008c64:	491c      	ldr	r1, [pc, #112]	; (8008cd8 <tcp_input+0x2c8>)
 8008c66:	480c      	ldr	r0, [pc, #48]	; (8008c98 <tcp_input+0x288>)
 8008c68:	f007 f8ea 	bl	800fe40 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	7a1b      	ldrb	r3, [r3, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d033      	beq.n	8008cdc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	7a1a      	ldrb	r2, [r3, #8]
 8008c78:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <tcp_input+0x290>)
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c80:	3301      	adds	r3, #1
 8008c82:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d029      	beq.n	8008cdc <tcp_input+0x2cc>
      prev = pcb;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	61bb      	str	r3, [r7, #24]
      continue;
 8008c8c:	e06b      	b.n	8008d66 <tcp_input+0x356>
 8008c8e:	bf00      	nop
 8008c90:	080121ac 	.word	0x080121ac
 8008c94:	080121e0 	.word	0x080121e0
 8008c98:	080121f8 	.word	0x080121f8
 8008c9c:	200000dc 	.word	0x200000dc
 8008ca0:	200033d0 	.word	0x200033d0
 8008ca4:	200000e0 	.word	0x200000e0
 8008ca8:	200000e4 	.word	0x200000e4
 8008cac:	200000e2 	.word	0x200000e2
 8008cb0:	08012220 	.word	0x08012220
 8008cb4:	08012230 	.word	0x08012230
 8008cb8:	0801223c 	.word	0x0801223c
 8008cbc:	200000ec 	.word	0x200000ec
 8008cc0:	200000f0 	.word	0x200000f0
 8008cc4:	200000f8 	.word	0x200000f8
 8008cc8:	200000f6 	.word	0x200000f6
 8008ccc:	20006914 	.word	0x20006914
 8008cd0:	0801225c 	.word	0x0801225c
 8008cd4:	08012284 	.word	0x08012284
 8008cd8:	080122b0 	.word	0x080122b0
    }

    if (pcb->remote_port == tcphdr->src &&
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	8b1a      	ldrh	r2, [r3, #24]
 8008ce0:	4b94      	ldr	r3, [pc, #592]	; (8008f34 <tcp_input+0x524>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d13a      	bne.n	8008d62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	8ada      	ldrh	r2, [r3, #22]
 8008cf0:	4b90      	ldr	r3, [pc, #576]	; (8008f34 <tcp_input+0x524>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	885b      	ldrh	r3, [r3, #2]
 8008cf6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d132      	bne.n	8008d62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	4b8d      	ldr	r3, [pc, #564]	; (8008f38 <tcp_input+0x528>)
 8008d02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d12c      	bne.n	8008d62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	4b8a      	ldr	r3, [pc, #552]	; (8008f38 <tcp_input+0x528>)
 8008d0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d126      	bne.n	8008d62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d106      	bne.n	8008d2c <tcp_input+0x31c>
 8008d1e:	4b87      	ldr	r3, [pc, #540]	; (8008f3c <tcp_input+0x52c>)
 8008d20:	f240 120d 	movw	r2, #269	; 0x10d
 8008d24:	4986      	ldr	r1, [pc, #536]	; (8008f40 <tcp_input+0x530>)
 8008d26:	4887      	ldr	r0, [pc, #540]	; (8008f44 <tcp_input+0x534>)
 8008d28:	f007 f88a 	bl	800fe40 <iprintf>
      if (prev != NULL) {
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <tcp_input+0x338>
        prev->next = pcb->next;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008d3a:	4b83      	ldr	r3, [pc, #524]	; (8008f48 <tcp_input+0x538>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008d42:	4a81      	ldr	r2, [pc, #516]	; (8008f48 <tcp_input+0x538>)
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d111      	bne.n	8008d76 <tcp_input+0x366>
 8008d52:	4b7a      	ldr	r3, [pc, #488]	; (8008f3c <tcp_input+0x52c>)
 8008d54:	f240 1215 	movw	r2, #277	; 0x115
 8008d58:	497c      	ldr	r1, [pc, #496]	; (8008f4c <tcp_input+0x53c>)
 8008d5a:	487a      	ldr	r0, [pc, #488]	; (8008f44 <tcp_input+0x534>)
 8008d5c:	f007 f870 	bl	800fe40 <iprintf>
      break;
 8008d60:	e009      	b.n	8008d76 <tcp_input+0x366>
    }
    prev = pcb;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f47f af5e 	bne.w	8008c30 <tcp_input+0x220>
 8008d74:	e000      	b.n	8008d78 <tcp_input+0x368>
      break;
 8008d76:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f040 8095 	bne.w	8008eaa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d80:	4b73      	ldr	r3, [pc, #460]	; (8008f50 <tcp_input+0x540>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e03f      	b.n	8008e08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	2b0a      	cmp	r3, #10
 8008d8e:	d006      	beq.n	8008d9e <tcp_input+0x38e>
 8008d90:	4b6a      	ldr	r3, [pc, #424]	; (8008f3c <tcp_input+0x52c>)
 8008d92:	f240 121f 	movw	r2, #287	; 0x11f
 8008d96:	496f      	ldr	r1, [pc, #444]	; (8008f54 <tcp_input+0x544>)
 8008d98:	486a      	ldr	r0, [pc, #424]	; (8008f44 <tcp_input+0x534>)
 8008d9a:	f007 f851 	bl	800fe40 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	7a1b      	ldrb	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d009      	beq.n	8008dba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	7a1a      	ldrb	r2, [r3, #8]
 8008daa:	4b63      	ldr	r3, [pc, #396]	; (8008f38 <tcp_input+0x528>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008db2:	3301      	adds	r3, #1
 8008db4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d122      	bne.n	8008e00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	8b1a      	ldrh	r2, [r3, #24]
 8008dbe:	4b5d      	ldr	r3, [pc, #372]	; (8008f34 <tcp_input+0x524>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d11b      	bne.n	8008e02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	8ada      	ldrh	r2, [r3, #22]
 8008dce:	4b59      	ldr	r3, [pc, #356]	; (8008f34 <tcp_input+0x524>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	885b      	ldrh	r3, [r3, #2]
 8008dd4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d113      	bne.n	8008e02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4b56      	ldr	r3, [pc, #344]	; (8008f38 <tcp_input+0x528>)
 8008de0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d10d      	bne.n	8008e02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4b53      	ldr	r3, [pc, #332]	; (8008f38 <tcp_input+0x528>)
 8008dec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d107      	bne.n	8008e02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008df2:	69f8      	ldr	r0, [r7, #28]
 8008df4:	f000 fb54 	bl	80094a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fd fd31 	bl	8006860 <pbuf_free>
        return;
 8008dfe:	e1f0      	b.n	80091e2 <tcp_input+0x7d2>
        continue;
 8008e00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1bc      	bne.n	8008d88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e12:	4b51      	ldr	r3, [pc, #324]	; (8008f58 <tcp_input+0x548>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e02a      	b.n	8008e70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	7a1b      	ldrb	r3, [r3, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00c      	beq.n	8008e3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	7a1a      	ldrb	r2, [r3, #8]
 8008e26:	4b44      	ldr	r3, [pc, #272]	; (8008f38 <tcp_input+0x528>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e2e:	3301      	adds	r3, #1
 8008e30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d002      	beq.n	8008e3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	61bb      	str	r3, [r7, #24]
        continue;
 8008e3a:	e016      	b.n	8008e6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	8ada      	ldrh	r2, [r3, #22]
 8008e40:	4b3c      	ldr	r3, [pc, #240]	; (8008f34 <tcp_input+0x524>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d10c      	bne.n	8008e66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	4b39      	ldr	r3, [pc, #228]	; (8008f38 <tcp_input+0x528>)
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d00f      	beq.n	8008e78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00d      	beq.n	8008e7a <tcp_input+0x46a>
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1d1      	bne.n	8008e1a <tcp_input+0x40a>
 8008e76:	e000      	b.n	8008e7a <tcp_input+0x46a>
            break;
 8008e78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d014      	beq.n	8008eaa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008e8e:	4b32      	ldr	r3, [pc, #200]	; (8008f58 <tcp_input+0x548>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008e96:	4a30      	ldr	r2, [pc, #192]	; (8008f58 <tcp_input+0x548>)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e9c:	6978      	ldr	r0, [r7, #20]
 8008e9e:	f000 fa01 	bl	80092a4 <tcp_listen_input>
      }
      pbuf_free(p);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fd fcdc 	bl	8006860 <pbuf_free>
      return;
 8008ea8:	e19b      	b.n	80091e2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8160 	beq.w	8009172 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <tcp_input+0x54c>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	891a      	ldrh	r2, [r3, #8]
 8008ebc:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <tcp_input+0x54c>)
 8008ebe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008ec0:	4a26      	ldr	r2, [pc, #152]	; (8008f5c <tcp_input+0x54c>)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008ec6:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <tcp_input+0x524>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a24      	ldr	r2, [pc, #144]	; (8008f5c <tcp_input+0x54c>)
 8008ecc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008ece:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <tcp_input+0x550>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008ed4:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <tcp_input+0x554>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008eda:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <tcp_input+0x558>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008ee0:	4b22      	ldr	r3, [pc, #136]	; (8008f6c <tcp_input+0x55c>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d006      	beq.n	8008efa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	7b5b      	ldrb	r3, [r3, #13]
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d038      	beq.n	8008f74 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f02:	69f8      	ldr	r0, [r7, #28]
 8008f04:	f7ff f858 	bl	8007fb8 <tcp_process_refused_data>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f113 0f0d 	cmn.w	r3, #13
 8008f0e:	d007      	beq.n	8008f20 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d02d      	beq.n	8008f74 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f18:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <tcp_input+0x560>)
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d029      	beq.n	8008f74 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 8104 	bne.w	8009132 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008f2a:	69f8      	ldr	r0, [r7, #28]
 8008f2c:	f003 fe16 	bl	800cb5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008f30:	e0ff      	b.n	8009132 <tcp_input+0x722>
 8008f32:	bf00      	nop
 8008f34:	200000dc 	.word	0x200000dc
 8008f38:	200033d0 	.word	0x200033d0
 8008f3c:	080121ac 	.word	0x080121ac
 8008f40:	080122d8 	.word	0x080122d8
 8008f44:	080121f8 	.word	0x080121f8
 8008f48:	20006914 	.word	0x20006914
 8008f4c:	08012304 	.word	0x08012304
 8008f50:	20006924 	.word	0x20006924
 8008f54:	08012330 	.word	0x08012330
 8008f58:	2000691c 	.word	0x2000691c
 8008f5c:	200000cc 	.word	0x200000cc
 8008f60:	200000fc 	.word	0x200000fc
 8008f64:	200000f9 	.word	0x200000f9
 8008f68:	200000f4 	.word	0x200000f4
 8008f6c:	200000f8 	.word	0x200000f8
 8008f70:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8008f74:	4a9c      	ldr	r2, [pc, #624]	; (80091e8 <tcp_input+0x7d8>)
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f7a:	69f8      	ldr	r0, [r7, #28]
 8008f7c:	f000 fb0a 	bl	8009594 <tcp_process>
 8008f80:	4603      	mov	r3, r0
 8008f82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f88:	f113 0f0d 	cmn.w	r3, #13
 8008f8c:	f000 80d3 	beq.w	8009136 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008f90:	4b96      	ldr	r3, [pc, #600]	; (80091ec <tcp_input+0x7dc>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d015      	beq.n	8008fc8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <tcp_input+0x5a8>
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	6912      	ldr	r2, [r2, #16]
 8008fb0:	f06f 010d 	mvn.w	r1, #13
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008fb8:	69f9      	ldr	r1, [r7, #28]
 8008fba:	488d      	ldr	r0, [pc, #564]	; (80091f0 <tcp_input+0x7e0>)
 8008fbc:	f7ff fbb0 	bl	8008720 <tcp_pcb_remove>
        tcp_free(pcb);
 8008fc0:	69f8      	ldr	r0, [r7, #28]
 8008fc2:	f7fd fefd 	bl	8006dc0 <tcp_free>
 8008fc6:	e0c1      	b.n	800914c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008fcc:	4b89      	ldr	r3, [pc, #548]	; (80091f4 <tcp_input+0x7e4>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01d      	beq.n	8009010 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008fd4:	4b87      	ldr	r3, [pc, #540]	; (80091f4 <tcp_input+0x7e4>)
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <tcp_input+0x5ea>
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	6910      	ldr	r0, [r2, #16]
 8008fee:	89fa      	ldrh	r2, [r7, #14]
 8008ff0:	69f9      	ldr	r1, [r7, #28]
 8008ff2:	4798      	blx	r3
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	74fb      	strb	r3, [r7, #19]
 8008ff8:	e001      	b.n	8008ffe <tcp_input+0x5ee>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009002:	f113 0f0d 	cmn.w	r3, #13
 8009006:	f000 8098 	beq.w	800913a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800900a:	4b7a      	ldr	r3, [pc, #488]	; (80091f4 <tcp_input+0x7e4>)
 800900c:	2200      	movs	r2, #0
 800900e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009010:	69f8      	ldr	r0, [r7, #28]
 8009012:	f000 f907 	bl	8009224 <tcp_input_delayed_close>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 8090 	bne.w	800913e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800901e:	4b76      	ldr	r3, [pc, #472]	; (80091f8 <tcp_input+0x7e8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d041      	beq.n	80090aa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <tcp_input+0x62c>
 800902e:	4b73      	ldr	r3, [pc, #460]	; (80091fc <tcp_input+0x7ec>)
 8009030:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009034:	4972      	ldr	r1, [pc, #456]	; (8009200 <tcp_input+0x7f0>)
 8009036:	4873      	ldr	r0, [pc, #460]	; (8009204 <tcp_input+0x7f4>)
 8009038:	f006 ff02 	bl	800fe40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	8b5b      	ldrh	r3, [r3, #26]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009048:	4b6b      	ldr	r3, [pc, #428]	; (80091f8 <tcp_input+0x7e8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fc07 	bl	8006860 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009052:	69f8      	ldr	r0, [r7, #28]
 8009054:	f7fe f99c 	bl	8007390 <tcp_abort>
            goto aborted;
 8009058:	e078      	b.n	800914c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <tcp_input+0x66e>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	6918      	ldr	r0, [r3, #16]
 800906e:	4b62      	ldr	r3, [pc, #392]	; (80091f8 <tcp_input+0x7e8>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	47a0      	blx	r4
 8009078:	4603      	mov	r3, r0
 800907a:	74fb      	strb	r3, [r7, #19]
 800907c:	e008      	b.n	8009090 <tcp_input+0x680>
 800907e:	4b5e      	ldr	r3, [pc, #376]	; (80091f8 <tcp_input+0x7e8>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	69f9      	ldr	r1, [r7, #28]
 8009086:	2000      	movs	r0, #0
 8009088:	f7ff f88a 	bl	80081a0 <tcp_recv_null>
 800908c:	4603      	mov	r3, r0
 800908e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009094:	f113 0f0d 	cmn.w	r3, #13
 8009098:	d053      	beq.n	8009142 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800909a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <tcp_input+0x7e8>)
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80090aa:	4b50      	ldr	r3, [pc, #320]	; (80091ec <tcp_input+0x7dc>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d030      	beq.n	8009118 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c2:	7b5a      	ldrb	r2, [r3, #13]
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c8:	f042 0220 	orr.w	r2, r2, #32
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	735a      	strb	r2, [r3, #13]
 80090d0:	e022      	b.n	8009118 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80090da:	d005      	beq.n	80090e8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e0:	3301      	adds	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <tcp_input+0x6fa>
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	6918      	ldr	r0, [r3, #16]
 80090fc:	2300      	movs	r3, #0
 80090fe:	2200      	movs	r2, #0
 8009100:	69f9      	ldr	r1, [r7, #28]
 8009102:	47a0      	blx	r4
 8009104:	4603      	mov	r3, r0
 8009106:	74fb      	strb	r3, [r7, #19]
 8009108:	e001      	b.n	800910e <tcp_input+0x6fe>
 800910a:	2300      	movs	r3, #0
 800910c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800910e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009112:	f113 0f0d 	cmn.w	r3, #13
 8009116:	d016      	beq.n	8009146 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009118:	4b33      	ldr	r3, [pc, #204]	; (80091e8 <tcp_input+0x7d8>)
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800911e:	69f8      	ldr	r0, [r7, #28]
 8009120:	f000 f880 	bl	8009224 <tcp_input_delayed_close>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10f      	bne.n	800914a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800912a:	69f8      	ldr	r0, [r7, #28]
 800912c:	f002 ff10 	bl	800bf50 <tcp_output>
 8009130:	e00c      	b.n	800914c <tcp_input+0x73c>
        goto aborted;
 8009132:	bf00      	nop
 8009134:	e00a      	b.n	800914c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009136:	bf00      	nop
 8009138:	e008      	b.n	800914c <tcp_input+0x73c>
              goto aborted;
 800913a:	bf00      	nop
 800913c:	e006      	b.n	800914c <tcp_input+0x73c>
          goto aborted;
 800913e:	bf00      	nop
 8009140:	e004      	b.n	800914c <tcp_input+0x73c>
            goto aborted;
 8009142:	bf00      	nop
 8009144:	e002      	b.n	800914c <tcp_input+0x73c>
              goto aborted;
 8009146:	bf00      	nop
 8009148:	e000      	b.n	800914c <tcp_input+0x73c>
          goto aborted;
 800914a:	bf00      	nop
    tcp_input_pcb = NULL;
 800914c:	4b26      	ldr	r3, [pc, #152]	; (80091e8 <tcp_input+0x7d8>)
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009152:	4b29      	ldr	r3, [pc, #164]	; (80091f8 <tcp_input+0x7e8>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009158:	4b2b      	ldr	r3, [pc, #172]	; (8009208 <tcp_input+0x7f8>)
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d03f      	beq.n	80091e0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009160:	4b29      	ldr	r3, [pc, #164]	; (8009208 <tcp_input+0x7f8>)
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fb7b 	bl	8006860 <pbuf_free>
      inseg.p = NULL;
 800916a:	4b27      	ldr	r3, [pc, #156]	; (8009208 <tcp_input+0x7f8>)
 800916c:	2200      	movs	r2, #0
 800916e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009170:	e036      	b.n	80091e0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009172:	4b26      	ldr	r3, [pc, #152]	; (800920c <tcp_input+0x7fc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	899b      	ldrh	r3, [r3, #12]
 8009178:	b29b      	uxth	r3, r3
 800917a:	4618      	mov	r0, r3
 800917c:	f7fc f8bc 	bl	80052f8 <lwip_htons>
 8009180:	4603      	mov	r3, r0
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d118      	bne.n	80091be <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800918c:	4b20      	ldr	r3, [pc, #128]	; (8009210 <tcp_input+0x800>)
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	4b20      	ldr	r3, [pc, #128]	; (8009214 <tcp_input+0x804>)
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <tcp_input+0x808>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800919c:	4b1b      	ldr	r3, [pc, #108]	; (800920c <tcp_input+0x7fc>)
 800919e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091a4:	4a19      	ldr	r2, [pc, #100]	; (800920c <tcp_input+0x7fc>)
 80091a6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a8:	8812      	ldrh	r2, [r2, #0]
 80091aa:	b292      	uxth	r2, r2
 80091ac:	9202      	str	r2, [sp, #8]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	4b1a      	ldr	r3, [pc, #104]	; (800921c <tcp_input+0x80c>)
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <tcp_input+0x810>)
 80091b6:	4602      	mov	r2, r0
 80091b8:	2000      	movs	r0, #0
 80091ba:	f003 fc7d 	bl	800cab8 <tcp_rst>
    pbuf_free(p);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fd fb4e 	bl	8006860 <pbuf_free>
  return;
 80091c4:	e00c      	b.n	80091e0 <tcp_input+0x7d0>
    goto dropped;
 80091c6:	bf00      	nop
 80091c8:	e006      	b.n	80091d8 <tcp_input+0x7c8>
    goto dropped;
 80091ca:	bf00      	nop
 80091cc:	e004      	b.n	80091d8 <tcp_input+0x7c8>
    goto dropped;
 80091ce:	bf00      	nop
 80091d0:	e002      	b.n	80091d8 <tcp_input+0x7c8>
      goto dropped;
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <tcp_input+0x7c8>
      goto dropped;
 80091d6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fd fb41 	bl	8006860 <pbuf_free>
 80091de:	e000      	b.n	80091e2 <tcp_input+0x7d2>
  return;
 80091e0:	bf00      	nop
}
 80091e2:	3724      	adds	r7, #36	; 0x24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd90      	pop	{r4, r7, pc}
 80091e8:	20006928 	.word	0x20006928
 80091ec:	200000f9 	.word	0x200000f9
 80091f0:	20006914 	.word	0x20006914
 80091f4:	200000f4 	.word	0x200000f4
 80091f8:	200000fc 	.word	0x200000fc
 80091fc:	080121ac 	.word	0x080121ac
 8009200:	08012360 	.word	0x08012360
 8009204:	080121f8 	.word	0x080121f8
 8009208:	200000cc 	.word	0x200000cc
 800920c:	200000dc 	.word	0x200000dc
 8009210:	200000f0 	.word	0x200000f0
 8009214:	200000f6 	.word	0x200000f6
 8009218:	200000ec 	.word	0x200000ec
 800921c:	200033e0 	.word	0x200033e0
 8009220:	200033e4 	.word	0x200033e4

08009224 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <tcp_input_delayed_close+0x1c>
 8009232:	4b17      	ldr	r3, [pc, #92]	; (8009290 <tcp_input_delayed_close+0x6c>)
 8009234:	f240 225a 	movw	r2, #602	; 0x25a
 8009238:	4916      	ldr	r1, [pc, #88]	; (8009294 <tcp_input_delayed_close+0x70>)
 800923a:	4817      	ldr	r0, [pc, #92]	; (8009298 <tcp_input_delayed_close+0x74>)
 800923c:	f006 fe00 	bl	800fe40 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009240:	4b16      	ldr	r3, [pc, #88]	; (800929c <tcp_input_delayed_close+0x78>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01c      	beq.n	8009286 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	8b5b      	ldrh	r3, [r3, #26]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10d      	bne.n	8009274 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <tcp_input_delayed_close+0x50>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6912      	ldr	r2, [r2, #16]
 800926c:	f06f 010e 	mvn.w	r1, #14
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	480a      	ldr	r0, [pc, #40]	; (80092a0 <tcp_input_delayed_close+0x7c>)
 8009278:	f7ff fa52 	bl	8008720 <tcp_pcb_remove>
    tcp_free(pcb);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7fd fd9f 	bl	8006dc0 <tcp_free>
    return 1;
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	080121ac 	.word	0x080121ac
 8009294:	0801237c 	.word	0x0801237c
 8009298:	080121f8 	.word	0x080121f8
 800929c:	200000f9 	.word	0x200000f9
 80092a0:	20006914 	.word	0x20006914

080092a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80092a4:	b590      	push	{r4, r7, lr}
 80092a6:	b08b      	sub	sp, #44	; 0x2c
 80092a8:	af04      	add	r7, sp, #16
 80092aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80092ac:	4b6f      	ldr	r3, [pc, #444]	; (800946c <tcp_listen_input+0x1c8>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 80d2 	bne.w	800945e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <tcp_listen_input+0x2a>
 80092c0:	4b6b      	ldr	r3, [pc, #428]	; (8009470 <tcp_listen_input+0x1cc>)
 80092c2:	f240 2281 	movw	r2, #641	; 0x281
 80092c6:	496b      	ldr	r1, [pc, #428]	; (8009474 <tcp_listen_input+0x1d0>)
 80092c8:	486b      	ldr	r0, [pc, #428]	; (8009478 <tcp_listen_input+0x1d4>)
 80092ca:	f006 fdb9 	bl	800fe40 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80092ce:	4b67      	ldr	r3, [pc, #412]	; (800946c <tcp_listen_input+0x1c8>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d019      	beq.n	800930e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092da:	4b68      	ldr	r3, [pc, #416]	; (800947c <tcp_listen_input+0x1d8>)
 80092dc:	6819      	ldr	r1, [r3, #0]
 80092de:	4b68      	ldr	r3, [pc, #416]	; (8009480 <tcp_listen_input+0x1dc>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	4b67      	ldr	r3, [pc, #412]	; (8009484 <tcp_listen_input+0x1e0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092ea:	4b67      	ldr	r3, [pc, #412]	; (8009488 <tcp_listen_input+0x1e4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092ee:	885b      	ldrh	r3, [r3, #2]
 80092f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092f2:	4a65      	ldr	r2, [pc, #404]	; (8009488 <tcp_listen_input+0x1e4>)
 80092f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092f6:	8812      	ldrh	r2, [r2, #0]
 80092f8:	b292      	uxth	r2, r2
 80092fa:	9202      	str	r2, [sp, #8]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	4b63      	ldr	r3, [pc, #396]	; (800948c <tcp_listen_input+0x1e8>)
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4b63      	ldr	r3, [pc, #396]	; (8009490 <tcp_listen_input+0x1ec>)
 8009304:	4602      	mov	r2, r0
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f003 fbd6 	bl	800cab8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800930c:	e0a9      	b.n	8009462 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800930e:	4b57      	ldr	r3, [pc, #348]	; (800946c <tcp_listen_input+0x1c8>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80a3 	beq.w	8009462 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7d5b      	ldrb	r3, [r3, #21]
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff f861 	bl	80083e8 <tcp_alloc>
 8009326:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d111      	bne.n	8009352 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <tcp_listen_input+0xa8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6910      	ldr	r0, [r2, #16]
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	2100      	movs	r1, #0
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	73bb      	strb	r3, [r7, #14]
      return;
 800934a:	e08b      	b.n	8009464 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800934c:	23f0      	movs	r3, #240	; 0xf0
 800934e:	73bb      	strb	r3, [r7, #14]
      return;
 8009350:	e088      	b.n	8009464 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009352:	4b50      	ldr	r3, [pc, #320]	; (8009494 <tcp_listen_input+0x1f0>)
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800935a:	4b4e      	ldr	r3, [pc, #312]	; (8009494 <tcp_listen_input+0x1f0>)
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	8ada      	ldrh	r2, [r3, #22]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800936a:	4b47      	ldr	r3, [pc, #284]	; (8009488 <tcp_listen_input+0x1e4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29a      	uxth	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2203      	movs	r2, #3
 800937a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800937c:	4b41      	ldr	r3, [pc, #260]	; (8009484 <tcp_listen_input+0x1e0>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	f7ff fa5a 	bl	8008848 <tcp_next_iss>
 8009394:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80093ae:	4b35      	ldr	r3, [pc, #212]	; (8009484 <tcp_listen_input+0x1e0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	1e5a      	subs	r2, r3, #1
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691a      	ldr	r2, [r3, #16]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7a5b      	ldrb	r3, [r3, #9]
 80093ca:	f003 030c 	and.w	r3, r3, #12
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7a1a      	ldrb	r2, [r3, #8]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80093dc:	4b2e      	ldr	r3, [pc, #184]	; (8009498 <tcp_listen_input+0x1f4>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	60da      	str	r2, [r3, #12]
 80093e4:	4a2c      	ldr	r2, [pc, #176]	; (8009498 <tcp_listen_input+0x1f4>)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	f003 fd27 	bl	800ce3c <tcp_timer_needed>
 80093ee:	4b2b      	ldr	r3, [pc, #172]	; (800949c <tcp_listen_input+0x1f8>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f001 fd8d 	bl	800af14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093fa:	4b23      	ldr	r3, [pc, #140]	; (8009488 <tcp_listen_input+0x1e4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	89db      	ldrh	r3, [r3, #14]
 8009400:	b29a      	uxth	r2, r3
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	3304      	adds	r3, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f005 f8eb 	bl	800e5f8 <ip4_route>
 8009422:	4601      	mov	r1, r0
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	3304      	adds	r3, #4
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff fa32 	bl	8008894 <tcp_eff_send_mss_netif>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009438:	2112      	movs	r1, #18
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f002 fc9a 	bl	800bd74 <tcp_enqueue_flags>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800944c:	2100      	movs	r1, #0
 800944e:	6978      	ldr	r0, [r7, #20]
 8009450:	f7fd fee0 	bl	8007214 <tcp_abandon>
      return;
 8009454:	e006      	b.n	8009464 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	f002 fd7a 	bl	800bf50 <tcp_output>
  return;
 800945c:	e001      	b.n	8009462 <tcp_listen_input+0x1be>
    return;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <tcp_listen_input+0x1c0>
  return;
 8009462:	bf00      	nop
}
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	bd90      	pop	{r4, r7, pc}
 800946a:	bf00      	nop
 800946c:	200000f8 	.word	0x200000f8
 8009470:	080121ac 	.word	0x080121ac
 8009474:	080123a4 	.word	0x080123a4
 8009478:	080121f8 	.word	0x080121f8
 800947c:	200000f0 	.word	0x200000f0
 8009480:	200000f6 	.word	0x200000f6
 8009484:	200000ec 	.word	0x200000ec
 8009488:	200000dc 	.word	0x200000dc
 800948c:	200033e0 	.word	0x200033e0
 8009490:	200033e4 	.word	0x200033e4
 8009494:	200033d0 	.word	0x200033d0
 8009498:	20006914 	.word	0x20006914
 800949c:	20006910 	.word	0x20006910

080094a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80094a8:	4b2f      	ldr	r3, [pc, #188]	; (8009568 <tcp_timewait_input+0xc8>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d153      	bne.n	800955c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <tcp_timewait_input+0x28>
 80094ba:	4b2c      	ldr	r3, [pc, #176]	; (800956c <tcp_timewait_input+0xcc>)
 80094bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80094c0:	492b      	ldr	r1, [pc, #172]	; (8009570 <tcp_timewait_input+0xd0>)
 80094c2:	482c      	ldr	r0, [pc, #176]	; (8009574 <tcp_timewait_input+0xd4>)
 80094c4:	f006 fcbc 	bl	800fe40 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80094c8:	4b27      	ldr	r3, [pc, #156]	; (8009568 <tcp_timewait_input+0xc8>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d02a      	beq.n	800952a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80094d4:	4b28      	ldr	r3, [pc, #160]	; (8009578 <tcp_timewait_input+0xd8>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	db2d      	blt.n	800953e <tcp_timewait_input+0x9e>
 80094e2:	4b25      	ldr	r3, [pc, #148]	; (8009578 <tcp_timewait_input+0xd8>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094ee:	440b      	add	r3, r1
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc23      	bgt.n	800953e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <tcp_timewait_input+0xdc>)
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	4b21      	ldr	r3, [pc, #132]	; (8009580 <tcp_timewait_input+0xe0>)
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	4b1d      	ldr	r3, [pc, #116]	; (8009578 <tcp_timewait_input+0xd8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009506:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <tcp_timewait_input+0xe4>)
 8009508:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800950a:	885b      	ldrh	r3, [r3, #2]
 800950c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800950e:	4a1d      	ldr	r2, [pc, #116]	; (8009584 <tcp_timewait_input+0xe4>)
 8009510:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009512:	8812      	ldrh	r2, [r2, #0]
 8009514:	b292      	uxth	r2, r2
 8009516:	9202      	str	r2, [sp, #8]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	4b1b      	ldr	r3, [pc, #108]	; (8009588 <tcp_timewait_input+0xe8>)
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	4b1b      	ldr	r3, [pc, #108]	; (800958c <tcp_timewait_input+0xec>)
 8009520:	4602      	mov	r2, r0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f003 fac8 	bl	800cab8 <tcp_rst>
      return;
 8009528:	e01b      	b.n	8009562 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <tcp_timewait_input+0xc8>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <tcp_timewait_input+0xf0>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <tcp_timewait_input+0xe0>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00c      	beq.n	8009560 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8b5b      	ldrh	r3, [r3, #26]
 800954a:	f043 0302 	orr.w	r3, r3, #2
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f002 fcfb 	bl	800bf50 <tcp_output>
  }
  return;
 800955a:	e001      	b.n	8009560 <tcp_timewait_input+0xc0>
    return;
 800955c:	bf00      	nop
 800955e:	e000      	b.n	8009562 <tcp_timewait_input+0xc2>
  return;
 8009560:	bf00      	nop
}
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200000f8 	.word	0x200000f8
 800956c:	080121ac 	.word	0x080121ac
 8009570:	080123c4 	.word	0x080123c4
 8009574:	080121f8 	.word	0x080121f8
 8009578:	200000ec 	.word	0x200000ec
 800957c:	200000f0 	.word	0x200000f0
 8009580:	200000f6 	.word	0x200000f6
 8009584:	200000dc 	.word	0x200000dc
 8009588:	200033e0 	.word	0x200033e0
 800958c:	200033e4 	.word	0x200033e4
 8009590:	20006918 	.word	0x20006918

08009594 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b08d      	sub	sp, #52	; 0x34
 8009598:	af04      	add	r7, sp, #16
 800959a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <tcp_process+0x24>
 80095aa:	4ba5      	ldr	r3, [pc, #660]	; (8009840 <tcp_process+0x2ac>)
 80095ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80095b0:	49a4      	ldr	r1, [pc, #656]	; (8009844 <tcp_process+0x2b0>)
 80095b2:	48a5      	ldr	r0, [pc, #660]	; (8009848 <tcp_process+0x2b4>)
 80095b4:	f006 fc44 	bl	800fe40 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80095b8:	4ba4      	ldr	r3, [pc, #656]	; (800984c <tcp_process+0x2b8>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d04e      	beq.n	8009662 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7d1b      	ldrb	r3, [r3, #20]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d108      	bne.n	80095de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095d0:	4b9f      	ldr	r3, [pc, #636]	; (8009850 <tcp_process+0x2bc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d123      	bne.n	8009620 <tcp_process+0x8c>
        acceptable = 1;
 80095d8:	2301      	movs	r3, #1
 80095da:	76fb      	strb	r3, [r7, #27]
 80095dc:	e020      	b.n	8009620 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e2:	4b9c      	ldr	r3, [pc, #624]	; (8009854 <tcp_process+0x2c0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d102      	bne.n	80095f0 <tcp_process+0x5c>
        acceptable = 1;
 80095ea:	2301      	movs	r3, #1
 80095ec:	76fb      	strb	r3, [r7, #27]
 80095ee:	e017      	b.n	8009620 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095f0:	4b98      	ldr	r3, [pc, #608]	; (8009854 <tcp_process+0x2c0>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	db10      	blt.n	8009620 <tcp_process+0x8c>
 80095fe:	4b95      	ldr	r3, [pc, #596]	; (8009854 <tcp_process+0x2c0>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800960a:	440b      	add	r3, r1
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	dc06      	bgt.n	8009620 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8b5b      	ldrh	r3, [r3, #26]
 8009616:	f043 0302 	orr.w	r3, r3, #2
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009620:	7efb      	ldrb	r3, [r7, #27]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01b      	beq.n	800965e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7d1b      	ldrb	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <tcp_process+0xa8>
 800962e:	4b84      	ldr	r3, [pc, #528]	; (8009840 <tcp_process+0x2ac>)
 8009630:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009634:	4988      	ldr	r1, [pc, #544]	; (8009858 <tcp_process+0x2c4>)
 8009636:	4884      	ldr	r0, [pc, #528]	; (8009848 <tcp_process+0x2b4>)
 8009638:	f006 fc02 	bl	800fe40 <iprintf>
      recv_flags |= TF_RESET;
 800963c:	4b87      	ldr	r3, [pc, #540]	; (800985c <tcp_process+0x2c8>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f043 0308 	orr.w	r3, r3, #8
 8009644:	b2da      	uxtb	r2, r3
 8009646:	4b85      	ldr	r3, [pc, #532]	; (800985c <tcp_process+0x2c8>)
 8009648:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	8b5b      	ldrh	r3, [r3, #26]
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009658:	f06f 030d 	mvn.w	r3, #13
 800965c:	e37a      	b.n	8009d54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	e378      	b.n	8009d54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009662:	4b7a      	ldr	r3, [pc, #488]	; (800984c <tcp_process+0x2b8>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d010      	beq.n	8009690 <tcp_process+0xfc>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7d1b      	ldrb	r3, [r3, #20]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d00c      	beq.n	8009690 <tcp_process+0xfc>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d008      	beq.n	8009690 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8b5b      	ldrh	r3, [r3, #26]
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	b29a      	uxth	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e361      	b.n	8009d54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	8b5b      	ldrh	r3, [r3, #26]
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800969c:	4b70      	ldr	r3, [pc, #448]	; (8009860 <tcp_process+0x2cc>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fc2d 	bl	800af14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7d1b      	ldrb	r3, [r3, #20]
 80096be:	3b02      	subs	r3, #2
 80096c0:	2b07      	cmp	r3, #7
 80096c2:	f200 8337 	bhi.w	8009d34 <tcp_process+0x7a0>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <tcp_process+0x138>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096ed 	.word	0x080096ed
 80096d0:	0800991d 	.word	0x0800991d
 80096d4:	08009a95 	.word	0x08009a95
 80096d8:	08009abf 	.word	0x08009abf
 80096dc:	08009be3 	.word	0x08009be3
 80096e0:	08009a95 	.word	0x08009a95
 80096e4:	08009c6f 	.word	0x08009c6f
 80096e8:	08009cff 	.word	0x08009cff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096ec:	4b57      	ldr	r3, [pc, #348]	; (800984c <tcp_process+0x2b8>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 80e4 	beq.w	80098c2 <tcp_process+0x32e>
 80096fa:	4b54      	ldr	r3, [pc, #336]	; (800984c <tcp_process+0x2b8>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 80dd 	beq.w	80098c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	4b50      	ldr	r3, [pc, #320]	; (8009850 <tcp_process+0x2bc>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	f040 80d5 	bne.w	80098c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009718:	4b4e      	ldr	r3, [pc, #312]	; (8009854 <tcp_process+0x2c0>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800972a:	4b49      	ldr	r3, [pc, #292]	; (8009850 <tcp_process+0x2bc>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009732:	4b4c      	ldr	r3, [pc, #304]	; (8009864 <tcp_process+0x2d0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	89db      	ldrh	r3, [r3, #14]
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800974c:	4b41      	ldr	r3, [pc, #260]	; (8009854 <tcp_process+0x2c0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	1e5a      	subs	r2, r3, #1
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2204      	movs	r2, #4
 800975a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3304      	adds	r3, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f004 ff47 	bl	800e5f8 <ip4_route>
 800976a:	4601      	mov	r1, r0
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	461a      	mov	r2, r3
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff f88e 	bl	8008894 <tcp_eff_send_mss_netif>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009784:	009a      	lsls	r2, r3, #2
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009790:	428b      	cmp	r3, r1
 8009792:	bf38      	it	cc
 8009794:	460b      	movcc	r3, r1
 8009796:	429a      	cmp	r2, r3
 8009798:	d204      	bcs.n	80097a4 <tcp_process+0x210>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	e00d      	b.n	80097c0 <tcp_process+0x22c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d904      	bls.n	80097bc <tcp_process+0x228>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	e001      	b.n	80097c0 <tcp_process+0x22c>
 80097bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d106      	bne.n	80097de <tcp_process+0x24a>
 80097d0:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <tcp_process+0x2ac>)
 80097d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80097d6:	4924      	ldr	r1, [pc, #144]	; (8009868 <tcp_process+0x2d4>)
 80097d8:	481b      	ldr	r0, [pc, #108]	; (8009848 <tcp_process+0x2b4>)
 80097da:	f006 fb31 	bl	800fe40 <iprintf>
        --pcb->snd_queuelen;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097e4:	3b01      	subs	r3, #1
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d111      	bne.n	800981e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <tcp_process+0x280>
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <tcp_process+0x2ac>)
 8009808:	f44f 725d 	mov.w	r2, #884	; 0x374
 800980c:	4917      	ldr	r1, [pc, #92]	; (800986c <tcp_process+0x2d8>)
 800980e:	480e      	ldr	r0, [pc, #56]	; (8009848 <tcp_process+0x2b4>)
 8009810:	f006 fb16 	bl	800fe40 <iprintf>
          pcb->unsent = rseg->next;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	66da      	str	r2, [r3, #108]	; 0x6c
 800981c:	e003      	b.n	8009826 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009826:	69f8      	ldr	r0, [r7, #28]
 8009828:	f7fe fc57 	bl	80080da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11d      	bne.n	8009870 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800983a:	861a      	strh	r2, [r3, #48]	; 0x30
 800983c:	e01f      	b.n	800987e <tcp_process+0x2ea>
 800983e:	bf00      	nop
 8009840:	080121ac 	.word	0x080121ac
 8009844:	080123e4 	.word	0x080123e4
 8009848:	080121f8 	.word	0x080121f8
 800984c:	200000f8 	.word	0x200000f8
 8009850:	200000f0 	.word	0x200000f0
 8009854:	200000ec 	.word	0x200000ec
 8009858:	08012400 	.word	0x08012400
 800985c:	200000f9 	.word	0x200000f9
 8009860:	20006918 	.word	0x20006918
 8009864:	200000dc 	.word	0x200000dc
 8009868:	08012420 	.word	0x08012420
 800986c:	08012438 	.word	0x08012438
        } else {
          pcb->rtime = 0;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <tcp_process+0x30a>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6910      	ldr	r0, [r2, #16]
 8009892:	2200      	movs	r2, #0
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4798      	blx	r3
 8009898:	4603      	mov	r3, r0
 800989a:	76bb      	strb	r3, [r7, #26]
 800989c:	e001      	b.n	80098a2 <tcp_process+0x30e>
 800989e:	2300      	movs	r3, #0
 80098a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80098a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80098a6:	f113 0f0d 	cmn.w	r3, #13
 80098aa:	d102      	bne.n	80098b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80098ac:	f06f 030c 	mvn.w	r3, #12
 80098b0:	e250      	b.n	8009d54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8b5b      	ldrh	r3, [r3, #26]
 80098b6:	f043 0302 	orr.w	r3, r3, #2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80098c0:	e23a      	b.n	8009d38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80098c2:	4b9d      	ldr	r3, [pc, #628]	; (8009b38 <tcp_process+0x5a4>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 8234 	beq.w	8009d38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098d0:	4b9a      	ldr	r3, [pc, #616]	; (8009b3c <tcp_process+0x5a8>)
 80098d2:	6819      	ldr	r1, [r3, #0]
 80098d4:	4b9a      	ldr	r3, [pc, #616]	; (8009b40 <tcp_process+0x5ac>)
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	4b9a      	ldr	r3, [pc, #616]	; (8009b44 <tcp_process+0x5b0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098e0:	4b99      	ldr	r3, [pc, #612]	; (8009b48 <tcp_process+0x5b4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098e4:	885b      	ldrh	r3, [r3, #2]
 80098e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098e8:	4a97      	ldr	r2, [pc, #604]	; (8009b48 <tcp_process+0x5b4>)
 80098ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098ec:	8812      	ldrh	r2, [r2, #0]
 80098ee:	b292      	uxth	r2, r2
 80098f0:	9202      	str	r2, [sp, #8]
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	4b95      	ldr	r3, [pc, #596]	; (8009b4c <tcp_process+0x5b8>)
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4b95      	ldr	r3, [pc, #596]	; (8009b50 <tcp_process+0x5bc>)
 80098fa:	4602      	mov	r2, r0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f003 f8db 	bl	800cab8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009908:	2b05      	cmp	r3, #5
 800990a:	f200 8215 	bhi.w	8009d38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f002 fea5 	bl	800c664 <tcp_rexmit_rto>
      break;
 800991a:	e20d      	b.n	8009d38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800991c:	4b86      	ldr	r3, [pc, #536]	; (8009b38 <tcp_process+0x5a4>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80a1 	beq.w	8009a6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800992a:	4b84      	ldr	r3, [pc, #528]	; (8009b3c <tcp_process+0x5a8>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	3b01      	subs	r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	db7e      	blt.n	8009a38 <tcp_process+0x4a4>
 800993a:	4b80      	ldr	r3, [pc, #512]	; (8009b3c <tcp_process+0x5a8>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	dc77      	bgt.n	8009a38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2204      	movs	r2, #4
 800994c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009956:	23fa      	movs	r3, #250	; 0xfa
 8009958:	76bb      	strb	r3, [r7, #26]
 800995a:	e01d      	b.n	8009998 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <tcp_process+0x3e0>
 8009966:	4b7b      	ldr	r3, [pc, #492]	; (8009b54 <tcp_process+0x5c0>)
 8009968:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800996c:	497a      	ldr	r1, [pc, #488]	; (8009b58 <tcp_process+0x5c4>)
 800996e:	487b      	ldr	r0, [pc, #492]	; (8009b5c <tcp_process+0x5c8>)
 8009970:	f006 fa66 	bl	800fe40 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <tcp_process+0x400>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	6910      	ldr	r0, [r2, #16]
 8009988:	2200      	movs	r2, #0
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	4798      	blx	r3
 800998e:	4603      	mov	r3, r0
 8009990:	76bb      	strb	r3, [r7, #26]
 8009992:	e001      	b.n	8009998 <tcp_process+0x404>
 8009994:	23f0      	movs	r3, #240	; 0xf0
 8009996:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009998:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00a      	beq.n	80099b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80099a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099a4:	f113 0f0d 	cmn.w	r3, #13
 80099a8:	d002      	beq.n	80099b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fd fcf0 	bl	8007390 <tcp_abort>
            }
            return ERR_ABRT;
 80099b0:	f06f 030c 	mvn.w	r3, #12
 80099b4:	e1ce      	b.n	8009d54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fae0 	bl	8009f7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80099bc:	4b68      	ldr	r3, [pc, #416]	; (8009b60 <tcp_process+0x5cc>)
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <tcp_process+0x43c>
            recv_acked--;
 80099c4:	4b66      	ldr	r3, [pc, #408]	; (8009b60 <tcp_process+0x5cc>)
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	4b64      	ldr	r3, [pc, #400]	; (8009b60 <tcp_process+0x5cc>)
 80099ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d4:	009a      	lsls	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80099e0:	428b      	cmp	r3, r1
 80099e2:	bf38      	it	cc
 80099e4:	460b      	movcc	r3, r1
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d204      	bcs.n	80099f4 <tcp_process+0x460>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	e00d      	b.n	8009a10 <tcp_process+0x47c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d904      	bls.n	8009a0c <tcp_process+0x478>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	e001      	b.n	8009a10 <tcp_process+0x47c>
 8009a0c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009a16:	4b53      	ldr	r3, [pc, #332]	; (8009b64 <tcp_process+0x5d0>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d037      	beq.n	8009a92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8b5b      	ldrh	r3, [r3, #26]
 8009a26:	f043 0302 	orr.w	r3, r3, #2
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2207      	movs	r2, #7
 8009a34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009a36:	e02c      	b.n	8009a92 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a38:	4b40      	ldr	r3, [pc, #256]	; (8009b3c <tcp_process+0x5a8>)
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	4b40      	ldr	r3, [pc, #256]	; (8009b40 <tcp_process+0x5ac>)
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b40      	ldr	r3, [pc, #256]	; (8009b44 <tcp_process+0x5b0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a48:	4b3f      	ldr	r3, [pc, #252]	; (8009b48 <tcp_process+0x5b4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a50:	4a3d      	ldr	r2, [pc, #244]	; (8009b48 <tcp_process+0x5b4>)
 8009a52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a54:	8812      	ldrh	r2, [r2, #0]
 8009a56:	b292      	uxth	r2, r2
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	4b3b      	ldr	r3, [pc, #236]	; (8009b4c <tcp_process+0x5b8>)
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	4b3b      	ldr	r3, [pc, #236]	; (8009b50 <tcp_process+0x5bc>)
 8009a62:	4602      	mov	r2, r0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f003 f827 	bl	800cab8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a6a:	e167      	b.n	8009d3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a6c:	4b32      	ldr	r3, [pc, #200]	; (8009b38 <tcp_process+0x5a4>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8161 	beq.w	8009d3c <tcp_process+0x7a8>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	1e5a      	subs	r2, r3, #1
 8009a80:	4b30      	ldr	r3, [pc, #192]	; (8009b44 <tcp_process+0x5b0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	f040 8159 	bne.w	8009d3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f002 fe0c 	bl	800c6a8 <tcp_rexmit>
      break;
 8009a90:	e154      	b.n	8009d3c <tcp_process+0x7a8>
 8009a92:	e153      	b.n	8009d3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa71 	bl	8009f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a9a:	4b32      	ldr	r3, [pc, #200]	; (8009b64 <tcp_process+0x5d0>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 814c 	beq.w	8009d40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8b5b      	ldrh	r3, [r3, #26]
 8009aac:	f043 0302 	orr.w	r3, r3, #2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2207      	movs	r2, #7
 8009aba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009abc:	e140      	b.n	8009d40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa5c 	bl	8009f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ac4:	4b27      	ldr	r3, [pc, #156]	; (8009b64 <tcp_process+0x5d0>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d071      	beq.n	8009bb4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ad0:	4b19      	ldr	r3, [pc, #100]	; (8009b38 <tcp_process+0x5a4>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d060      	beq.n	8009b9e <tcp_process+0x60a>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ae0:	4b16      	ldr	r3, [pc, #88]	; (8009b3c <tcp_process+0x5a8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d15a      	bne.n	8009b9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d156      	bne.n	8009b9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8b5b      	ldrh	r3, [r3, #26]
 8009af4:	f043 0302 	orr.w	r3, r3, #2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fe fdbe 	bl	8008680 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009b04:	4b18      	ldr	r3, [pc, #96]	; (8009b68 <tcp_process+0x5d4>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d105      	bne.n	8009b1a <tcp_process+0x586>
 8009b0e:	4b16      	ldr	r3, [pc, #88]	; (8009b68 <tcp_process+0x5d4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	4a14      	ldr	r2, [pc, #80]	; (8009b68 <tcp_process+0x5d4>)
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	e02e      	b.n	8009b78 <tcp_process+0x5e4>
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <tcp_process+0x5d4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	e027      	b.n	8009b72 <tcp_process+0x5de>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d11f      	bne.n	8009b6c <tcp_process+0x5d8>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	60da      	str	r2, [r3, #12]
 8009b34:	e020      	b.n	8009b78 <tcp_process+0x5e4>
 8009b36:	bf00      	nop
 8009b38:	200000f8 	.word	0x200000f8
 8009b3c:	200000f0 	.word	0x200000f0
 8009b40:	200000f6 	.word	0x200000f6
 8009b44:	200000ec 	.word	0x200000ec
 8009b48:	200000dc 	.word	0x200000dc
 8009b4c:	200033e0 	.word	0x200033e0
 8009b50:	200033e4 	.word	0x200033e4
 8009b54:	080121ac 	.word	0x080121ac
 8009b58:	0801244c 	.word	0x0801244c
 8009b5c:	080121f8 	.word	0x080121f8
 8009b60:	200000f4 	.word	0x200000f4
 8009b64:	200000f9 	.word	0x200000f9
 8009b68:	20006914 	.word	0x20006914
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1d4      	bne.n	8009b22 <tcp_process+0x58e>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	4b77      	ldr	r3, [pc, #476]	; (8009d5c <tcp_process+0x7c8>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	220a      	movs	r2, #10
 8009b88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b8a:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <tcp_process+0x7cc>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]
 8009b92:	4a73      	ldr	r2, [pc, #460]	; (8009d60 <tcp_process+0x7cc>)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	f003 f950 	bl	800ce3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b9c:	e0d2      	b.n	8009d44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2208      	movs	r2, #8
 8009bb0:	751a      	strb	r2, [r3, #20]
      break;
 8009bb2:	e0c7      	b.n	8009d44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bb4:	4b6b      	ldr	r3, [pc, #428]	; (8009d64 <tcp_process+0x7d0>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80c1 	beq.w	8009d44 <tcp_process+0x7b0>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bc6:	4b68      	ldr	r3, [pc, #416]	; (8009d68 <tcp_process+0x7d4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	f040 80ba 	bne.w	8009d44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f040 80b5 	bne.w	8009d44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2206      	movs	r2, #6
 8009bde:	751a      	strb	r2, [r3, #20]
      break;
 8009be0:	e0b0      	b.n	8009d44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9ca 	bl	8009f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009be8:	4b60      	ldr	r3, [pc, #384]	; (8009d6c <tcp_process+0x7d8>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80a9 	beq.w	8009d48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	8b5b      	ldrh	r3, [r3, #26]
 8009bfa:	f043 0302 	orr.w	r3, r3, #2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7fe fd3b 	bl	8008680 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c0a:	4b59      	ldr	r3, [pc, #356]	; (8009d70 <tcp_process+0x7dc>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d105      	bne.n	8009c20 <tcp_process+0x68c>
 8009c14:	4b56      	ldr	r3, [pc, #344]	; (8009d70 <tcp_process+0x7dc>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	4a55      	ldr	r2, [pc, #340]	; (8009d70 <tcp_process+0x7dc>)
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	e013      	b.n	8009c48 <tcp_process+0x6b4>
 8009c20:	4b53      	ldr	r3, [pc, #332]	; (8009d70 <tcp_process+0x7dc>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	e00c      	b.n	8009c42 <tcp_process+0x6ae>
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d104      	bne.n	8009c3c <tcp_process+0x6a8>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e005      	b.n	8009c48 <tcp_process+0x6b4>
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1ef      	bne.n	8009c28 <tcp_process+0x694>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	60da      	str	r2, [r3, #12]
 8009c4e:	4b43      	ldr	r3, [pc, #268]	; (8009d5c <tcp_process+0x7c8>)
 8009c50:	2201      	movs	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	220a      	movs	r2, #10
 8009c58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c5a:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <tcp_process+0x7cc>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	4a3f      	ldr	r2, [pc, #252]	; (8009d60 <tcp_process+0x7cc>)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	f003 f8e8 	bl	800ce3c <tcp_timer_needed>
      }
      break;
 8009c6c:	e06c      	b.n	8009d48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f984 	bl	8009f7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c74:	4b3b      	ldr	r3, [pc, #236]	; (8009d64 <tcp_process+0x7d0>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d065      	beq.n	8009d4c <tcp_process+0x7b8>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c84:	4b38      	ldr	r3, [pc, #224]	; (8009d68 <tcp_process+0x7d4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d15f      	bne.n	8009d4c <tcp_process+0x7b8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d15b      	bne.n	8009d4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fe fcf3 	bl	8008680 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c9a:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <tcp_process+0x7dc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d105      	bne.n	8009cb0 <tcp_process+0x71c>
 8009ca4:	4b32      	ldr	r3, [pc, #200]	; (8009d70 <tcp_process+0x7dc>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	4a31      	ldr	r2, [pc, #196]	; (8009d70 <tcp_process+0x7dc>)
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e013      	b.n	8009cd8 <tcp_process+0x744>
 8009cb0:	4b2f      	ldr	r3, [pc, #188]	; (8009d70 <tcp_process+0x7dc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	e00c      	b.n	8009cd2 <tcp_process+0x73e>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d104      	bne.n	8009ccc <tcp_process+0x738>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	e005      	b.n	8009cd8 <tcp_process+0x744>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1ef      	bne.n	8009cb8 <tcp_process+0x724>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	60da      	str	r2, [r3, #12]
 8009cde:	4b1f      	ldr	r3, [pc, #124]	; (8009d5c <tcp_process+0x7c8>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	220a      	movs	r2, #10
 8009ce8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009cea:	4b1d      	ldr	r3, [pc, #116]	; (8009d60 <tcp_process+0x7cc>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <tcp_process+0x7cc>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	f003 f8a0 	bl	800ce3c <tcp_timer_needed>
      }
      break;
 8009cfc:	e026      	b.n	8009d4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f93c 	bl	8009f7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d04:	4b17      	ldr	r3, [pc, #92]	; (8009d64 <tcp_process+0x7d0>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	f003 0310 	and.w	r3, r3, #16
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01f      	beq.n	8009d50 <tcp_process+0x7bc>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d14:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <tcp_process+0x7d4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d119      	bne.n	8009d50 <tcp_process+0x7bc>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d115      	bne.n	8009d50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009d24:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <tcp_process+0x7d8>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f043 0310 	orr.w	r3, r3, #16
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <tcp_process+0x7d8>)
 8009d30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d32:	e00d      	b.n	8009d50 <tcp_process+0x7bc>
    default:
      break;
 8009d34:	bf00      	nop
 8009d36:	e00c      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e00a      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e008      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d40:	bf00      	nop
 8009d42:	e006      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d44:	bf00      	nop
 8009d46:	e004      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d48:	bf00      	nop
 8009d4a:	e002      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d4c:	bf00      	nop
 8009d4e:	e000      	b.n	8009d52 <tcp_process+0x7be>
      break;
 8009d50:	bf00      	nop
  }
  return ERR_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3724      	adds	r7, #36	; 0x24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}
 8009d5c:	20006910 	.word	0x20006910
 8009d60:	20006924 	.word	0x20006924
 8009d64:	200000f8 	.word	0x200000f8
 8009d68:	200000f0 	.word	0x200000f0
 8009d6c:	200000f9 	.word	0x200000f9
 8009d70:	20006914 	.word	0x20006914

08009d74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <tcp_oos_insert_segment+0x1e>
 8009d84:	4b3b      	ldr	r3, [pc, #236]	; (8009e74 <tcp_oos_insert_segment+0x100>)
 8009d86:	f240 421f 	movw	r2, #1055	; 0x41f
 8009d8a:	493b      	ldr	r1, [pc, #236]	; (8009e78 <tcp_oos_insert_segment+0x104>)
 8009d8c:	483b      	ldr	r0, [pc, #236]	; (8009e7c <tcp_oos_insert_segment+0x108>)
 8009d8e:	f006 f857 	bl	800fe40 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	899b      	ldrh	r3, [r3, #12]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fb faac 	bl	80052f8 <lwip_htons>
 8009da0:	4603      	mov	r3, r0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d028      	beq.n	8009dfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009dac:	6838      	ldr	r0, [r7, #0]
 8009dae:	f7fe f97f 	bl	80080b0 <tcp_segs_free>
    next = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	603b      	str	r3, [r7, #0]
 8009db6:	e056      	b.n	8009e66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	899b      	ldrh	r3, [r3, #12]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fb fa99 	bl	80052f8 <lwip_htons>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00d      	beq.n	8009dee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	899b      	ldrh	r3, [r3, #12]
 8009dd8:	b29c      	uxth	r4, r3
 8009dda:	2001      	movs	r0, #1
 8009ddc:	f7fb fa8c 	bl	80052f8 <lwip_htons>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4322      	orrs	r2, r4
 8009dea:	b292      	uxth	r2, r2
 8009dec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7fe f96e 	bl	80080da <tcp_seg_free>
    while (next &&
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00e      	beq.n	8009e22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	891b      	ldrh	r3, [r3, #8]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <tcp_oos_insert_segment+0x10c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	441a      	add	r2, r3
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	8909      	ldrh	r1, [r1, #8]
 8009e1a:	440b      	add	r3, r1
 8009e1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	daca      	bge.n	8009db8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01e      	beq.n	8009e66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	891b      	ldrh	r3, [r3, #8]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <tcp_oos_insert_segment+0x10c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	441a      	add	r2, r3
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd12      	ble.n	8009e66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <tcp_oos_insert_segment+0x10c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	891b      	ldrh	r3, [r3, #8]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f7fc fb77 	bl	8006554 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd90      	pop	{r4, r7, pc}
 8009e74:	080121ac 	.word	0x080121ac
 8009e78:	0801246c 	.word	0x0801246c
 8009e7c:	080121f8 	.word	0x080121f8
 8009e80:	200000ec 	.word	0x200000ec

08009e84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e84:	b5b0      	push	{r4, r5, r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e92:	e03e      	b.n	8009f12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fc fd64 	bl	8006970 <pbuf_clen>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009eb2:	8a7a      	ldrh	r2, [r7, #18]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d906      	bls.n	8009ec6 <tcp_free_acked_segments+0x42>
 8009eb8:	4b2a      	ldr	r3, [pc, #168]	; (8009f64 <tcp_free_acked_segments+0xe0>)
 8009eba:	f240 4257 	movw	r2, #1111	; 0x457
 8009ebe:	492a      	ldr	r1, [pc, #168]	; (8009f68 <tcp_free_acked_segments+0xe4>)
 8009ec0:	482a      	ldr	r0, [pc, #168]	; (8009f6c <tcp_free_acked_segments+0xe8>)
 8009ec2:	f005 ffbd 	bl	800fe40 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009ecc:	8a7b      	ldrh	r3, [r7, #18]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	891a      	ldrh	r2, [r3, #8]
 8009edc:	4b24      	ldr	r3, [pc, #144]	; (8009f70 <tcp_free_acked_segments+0xec>)
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	4b22      	ldr	r3, [pc, #136]	; (8009f70 <tcp_free_acked_segments+0xec>)
 8009ee6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009ee8:	6978      	ldr	r0, [r7, #20]
 8009eea:	f7fe f8f6 	bl	80080da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00c      	beq.n	8009f12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <tcp_free_acked_segments+0x8e>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <tcp_free_acked_segments+0x8e>
 8009f04:	4b17      	ldr	r3, [pc, #92]	; (8009f64 <tcp_free_acked_segments+0xe0>)
 8009f06:	f240 4261 	movw	r2, #1121	; 0x461
 8009f0a:	491a      	ldr	r1, [pc, #104]	; (8009f74 <tcp_free_acked_segments+0xf0>)
 8009f0c:	4817      	ldr	r0, [pc, #92]	; (8009f6c <tcp_free_acked_segments+0xe8>)
 8009f0e:	f005 ff97 	bl	800fe40 <iprintf>
  while (seg_list != NULL &&
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d020      	beq.n	8009f5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fb f9ff 	bl	8005322 <lwip_htonl>
 8009f24:	4604      	mov	r4, r0
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	891b      	ldrh	r3, [r3, #8]
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fb f9df 	bl	80052f8 <lwip_htons>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <tcp_free_acked_segments+0xc6>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e000      	b.n	8009f4c <tcp_free_acked_segments+0xc8>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	442b      	add	r3, r5
 8009f4e:	18e2      	adds	r2, r4, r3
 8009f50:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <tcp_free_acked_segments+0xf4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd9c      	ble.n	8009e94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}
 8009f64:	080121ac 	.word	0x080121ac
 8009f68:	08012494 	.word	0x08012494
 8009f6c:	080121f8 	.word	0x080121f8
 8009f70:	200000f4 	.word	0x200000f4
 8009f74:	080124bc 	.word	0x080124bc
 8009f78:	200000f0 	.word	0x200000f0

08009f7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f7c:	b5b0      	push	{r4, r5, r7, lr}
 8009f7e:	b094      	sub	sp, #80	; 0x50
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <tcp_receive+0x20>
 8009f8e:	4ba6      	ldr	r3, [pc, #664]	; (800a228 <tcp_receive+0x2ac>)
 8009f90:	f240 427b 	movw	r2, #1147	; 0x47b
 8009f94:	49a5      	ldr	r1, [pc, #660]	; (800a22c <tcp_receive+0x2b0>)
 8009f96:	48a6      	ldr	r0, [pc, #664]	; (800a230 <tcp_receive+0x2b4>)
 8009f98:	f005 ff52 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d806      	bhi.n	8009fb2 <tcp_receive+0x36>
 8009fa4:	4ba0      	ldr	r3, [pc, #640]	; (800a228 <tcp_receive+0x2ac>)
 8009fa6:	f240 427c 	movw	r2, #1148	; 0x47c
 8009faa:	49a2      	ldr	r1, [pc, #648]	; (800a234 <tcp_receive+0x2b8>)
 8009fac:	48a0      	ldr	r0, [pc, #640]	; (800a230 <tcp_receive+0x2b4>)
 8009fae:	f005 ff47 	bl	800fe40 <iprintf>

  if (flags & TCP_ACK) {
 8009fb2:	4ba1      	ldr	r3, [pc, #644]	; (800a238 <tcp_receive+0x2bc>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	f003 0310 	and.w	r3, r3, #16
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 8263 	beq.w	800a486 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fcc:	4413      	add	r3, r2
 8009fce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fd4:	4b99      	ldr	r3, [pc, #612]	; (800a23c <tcp_receive+0x2c0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db1b      	blt.n	800a016 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fe2:	4b96      	ldr	r3, [pc, #600]	; (800a23c <tcp_receive+0x2c0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d106      	bne.n	8009ff8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fee:	4b94      	ldr	r3, [pc, #592]	; (800a240 <tcp_receive+0x2c4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	db0e      	blt.n	800a016 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ffc:	4b90      	ldr	r3, [pc, #576]	; (800a240 <tcp_receive+0x2c4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a000:	429a      	cmp	r2, r3
 800a002:	d125      	bne.n	800a050 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a004:	4b8f      	ldr	r3, [pc, #572]	; (800a244 <tcp_receive+0x2c8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	89db      	ldrh	r3, [r3, #14]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a012:	429a      	cmp	r2, r3
 800a014:	d91c      	bls.n	800a050 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a016:	4b8b      	ldr	r3, [pc, #556]	; (800a244 <tcp_receive+0x2c8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	89db      	ldrh	r3, [r3, #14]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a030:	429a      	cmp	r2, r3
 800a032:	d205      	bcs.n	800a040 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a040:	4b7e      	ldr	r3, [pc, #504]	; (800a23c <tcp_receive+0x2c0>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a048:	4b7d      	ldr	r3, [pc, #500]	; (800a240 <tcp_receive+0x2c4>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a050:	4b7b      	ldr	r3, [pc, #492]	; (800a240 <tcp_receive+0x2c4>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dc58      	bgt.n	800a110 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a05e:	4b7a      	ldr	r3, [pc, #488]	; (800a248 <tcp_receive+0x2cc>)
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d14b      	bne.n	800a0fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a070:	4413      	add	r3, r2
 800a072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a074:	429a      	cmp	r2, r3
 800a076:	d142      	bne.n	800a0fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a07e:	2b00      	cmp	r3, #0
 800a080:	db3d      	blt.n	800a0fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a086:	4b6e      	ldr	r3, [pc, #440]	; (800a240 <tcp_receive+0x2c4>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d137      	bne.n	800a0fe <tcp_receive+0x182>
              found_dupack = 1;
 800a08e:	2301      	movs	r3, #1
 800a090:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a098:	2bff      	cmp	r3, #255	; 0xff
 800a09a:	d007      	beq.n	800a0ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d91b      	bls.n	800a0ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0c0:	4413      	add	r3, r2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d30a      	bcc.n	800a0e4 <tcp_receive+0x168>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0d8:	4413      	add	r3, r2
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0e2:	e004      	b.n	800a0ee <tcp_receive+0x172>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d902      	bls.n	800a0fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f002 fb41 	bl	800c780 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a100:	2b00      	cmp	r3, #0
 800a102:	f040 8160 	bne.w	800a3c6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a10e:	e15a      	b.n	800a3c6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a110:	4b4b      	ldr	r3, [pc, #300]	; (800a240 <tcp_receive+0x2c4>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f2c0 814d 	blt.w	800a3bc <tcp_receive+0x440>
 800a122:	4b47      	ldr	r3, [pc, #284]	; (800a240 <tcp_receive+0x2c4>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f300 8145 	bgt.w	800a3bc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	8b5b      	ldrh	r3, [r3, #26]
 800a136:	f003 0304 	and.w	r3, r3, #4
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d010      	beq.n	800a160 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8b5b      	ldrh	r3, [r3, #26]
 800a142:	f023 0304 	bic.w	r3, r3, #4
 800a146:	b29a      	uxth	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a16e:	10db      	asrs	r3, r3, #3
 800a170:	b21b      	sxth	r3, r3
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4413      	add	r3, r2
 800a17e:	b29b      	uxth	r3, r3
 800a180:	b21a      	sxth	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a188:	4b2d      	ldr	r3, [pc, #180]	; (800a240 <tcp_receive+0x2c4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a192:	b29b      	uxth	r3, r3
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a1a0:	4b27      	ldr	r3, [pc, #156]	; (800a240 <tcp_receive+0x2c4>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	f240 8096 	bls.w	800a2de <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d244      	bcs.n	800a24c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8b5b      	ldrh	r3, [r3, #26]
 800a1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <tcp_receive+0x256>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <tcp_receive+0x258>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a1d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1e2:	fb12 f303 	smulbb	r3, r2, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	bf28      	it	cs
 800a1ee:	4613      	movcs	r3, r2
 800a1f0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1fa:	4413      	add	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a204:	429a      	cmp	r2, r3
 800a206:	d309      	bcc.n	800a21c <tcp_receive+0x2a0>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a20e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a210:	4413      	add	r3, r2
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a21a:	e060      	b.n	800a2de <tcp_receive+0x362>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a226:	e05a      	b.n	800a2de <tcp_receive+0x362>
 800a228:	080121ac 	.word	0x080121ac
 800a22c:	080124dc 	.word	0x080124dc
 800a230:	080121f8 	.word	0x080121f8
 800a234:	080124f8 	.word	0x080124f8
 800a238:	200000f8 	.word	0x200000f8
 800a23c:	200000ec 	.word	0x200000ec
 800a240:	200000f0 	.word	0x200000f0
 800a244:	200000dc 	.word	0x200000dc
 800a248:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a252:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a254:	4413      	add	r3, r2
 800a256:	b29a      	uxth	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a25e:	429a      	cmp	r2, r3
 800a260:	d309      	bcc.n	800a276 <tcp_receive+0x2fa>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a26a:	4413      	add	r3, r2
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a274:	e004      	b.n	800a280 <tcp_receive+0x304>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d326      	bcc.n	800a2de <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2b0:	4413      	add	r3, r2
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d30a      	bcc.n	800a2d4 <tcp_receive+0x358>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2c8:	4413      	add	r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2d2:	e004      	b.n	800a2de <tcp_receive+0x362>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e6:	4a98      	ldr	r2, [pc, #608]	; (800a548 <tcp_receive+0x5cc>)
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff fdcb 	bl	8009e84 <tcp_free_acked_segments>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fc:	4a93      	ldr	r2, [pc, #588]	; (800a54c <tcp_receive+0x5d0>)
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff fdc0 	bl	8009e84 <tcp_free_acked_segments>
 800a304:	4602      	mov	r2, r0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a318:	861a      	strh	r2, [r3, #48]	; 0x30
 800a31a:	e002      	b.n	800a322 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d103      	bne.n	800a338 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a33e:	4b84      	ldr	r3, [pc, #528]	; (800a550 <tcp_receive+0x5d4>)
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	4413      	add	r3, r2
 800a344:	b29a      	uxth	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	8b5b      	ldrh	r3, [r3, #26]
 800a350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a354:	2b00      	cmp	r3, #0
 800a356:	d035      	beq.n	800a3c4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d118      	bne.n	800a392 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00c      	beq.n	800a382 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	f7fa ffd4 	bl	8005322 <lwip_htonl>
 800a37a:	4603      	mov	r3, r0
 800a37c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a37e:	2b00      	cmp	r3, #0
 800a380:	dc20      	bgt.n	800a3c4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	8b5b      	ldrh	r3, [r3, #26]
 800a386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a390:	e018      	b.n	800a3c4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fa ffbf 	bl	8005322 <lwip_htonl>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	1ae3      	subs	r3, r4, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc0b      	bgt.n	800a3c4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	8b5b      	ldrh	r3, [r3, #26]
 800a3b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3ba:	e003      	b.n	800a3c4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f002 fbcd 	bl	800cb5c <tcp_send_empty_ack>
 800a3c2:	e000      	b.n	800a3c6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3c4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d05b      	beq.n	800a486 <tcp_receive+0x50a>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d2:	4b60      	ldr	r3, [pc, #384]	; (800a554 <tcp_receive+0x5d8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da54      	bge.n	800a486 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a3dc:	4b5e      	ldr	r3, [pc, #376]	; (800a558 <tcp_receive+0x5dc>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3fa:	10db      	asrs	r3, r3, #3
 800a3fc:	b21b      	sxth	r3, r3
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	b29b      	uxth	r3, r3
 800a404:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a40e:	b29a      	uxth	r2, r3
 800a410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a414:	4413      	add	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	b21a      	sxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a41e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a422:	2b00      	cmp	r3, #0
 800a424:	da05      	bge.n	800a432 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a42a:	425b      	negs	r3, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a432:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a43c:	109b      	asrs	r3, r3, #2
 800a43e:	b21b      	sxth	r3, r3
 800a440:	b29b      	uxth	r3, r3
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	b29b      	uxth	r3, r3
 800a446:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a450:	b29a      	uxth	r2, r3
 800a452:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a456:	4413      	add	r3, r2
 800a458:	b29b      	uxth	r3, r3
 800a45a:	b21a      	sxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a466:	10db      	asrs	r3, r3, #3
 800a468:	b21b      	sxth	r3, r3
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a472:	b29b      	uxth	r3, r3
 800a474:	4413      	add	r3, r2
 800a476:	b29b      	uxth	r3, r3
 800a478:	b21a      	sxth	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a486:	4b35      	ldr	r3, [pc, #212]	; (800a55c <tcp_receive+0x5e0>)
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 84e1 	beq.w	800ae52 <tcp_receive+0xed6>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7d1b      	ldrb	r3, [r3, #20]
 800a494:	2b06      	cmp	r3, #6
 800a496:	f200 84dc 	bhi.w	800ae52 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a49e:	4b30      	ldr	r3, [pc, #192]	; (800a560 <tcp_receive+0x5e4>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f2c0 808e 	blt.w	800a5c8 <tcp_receive+0x64c>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4b0:	4b2a      	ldr	r3, [pc, #168]	; (800a55c <tcp_receive+0x5e0>)
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4b2a      	ldr	r3, [pc, #168]	; (800a560 <tcp_receive+0x5e4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	440b      	add	r3, r1
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f300 8081 	bgt.w	800a5c8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a4c6:	4b27      	ldr	r3, [pc, #156]	; (800a564 <tcp_receive+0x5e8>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d0:	4b23      	ldr	r3, [pc, #140]	; (800a560 <tcp_receive+0x5e4>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a4d8:	4b22      	ldr	r3, [pc, #136]	; (800a564 <tcp_receive+0x5e8>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <tcp_receive+0x572>
 800a4e0:	4b21      	ldr	r3, [pc, #132]	; (800a568 <tcp_receive+0x5ec>)
 800a4e2:	f240 5294 	movw	r2, #1428	; 0x594
 800a4e6:	4921      	ldr	r1, [pc, #132]	; (800a56c <tcp_receive+0x5f0>)
 800a4e8:	4821      	ldr	r0, [pc, #132]	; (800a570 <tcp_receive+0x5f4>)
 800a4ea:	f005 fca9 	bl	800fe40 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d906      	bls.n	800a506 <tcp_receive+0x58a>
 800a4f8:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <tcp_receive+0x5ec>)
 800a4fa:	f240 5295 	movw	r2, #1429	; 0x595
 800a4fe:	491d      	ldr	r1, [pc, #116]	; (800a574 <tcp_receive+0x5f8>)
 800a500:	481b      	ldr	r0, [pc, #108]	; (800a570 <tcp_receive+0x5f4>)
 800a502:	f005 fc9d 	bl	800fe40 <iprintf>
      off = (u16_t)off32;
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a50c:	4b15      	ldr	r3, [pc, #84]	; (800a564 <tcp_receive+0x5e8>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	891b      	ldrh	r3, [r3, #8]
 800a512:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a516:	429a      	cmp	r2, r3
 800a518:	d906      	bls.n	800a528 <tcp_receive+0x5ac>
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <tcp_receive+0x5ec>)
 800a51c:	f240 5297 	movw	r2, #1431	; 0x597
 800a520:	4915      	ldr	r1, [pc, #84]	; (800a578 <tcp_receive+0x5fc>)
 800a522:	4813      	ldr	r0, [pc, #76]	; (800a570 <tcp_receive+0x5f4>)
 800a524:	f005 fc8c 	bl	800fe40 <iprintf>
      inseg.len -= off;
 800a528:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <tcp_receive+0x5e8>)
 800a52a:	891a      	ldrh	r2, [r3, #8]
 800a52c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	b29a      	uxth	r2, r3
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <tcp_receive+0x5e8>)
 800a536:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a538:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <tcp_receive+0x5e8>)
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	891a      	ldrh	r2, [r3, #8]
 800a53e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a546:	e029      	b.n	800a59c <tcp_receive+0x620>
 800a548:	08012514 	.word	0x08012514
 800a54c:	0801251c 	.word	0x0801251c
 800a550:	200000f4 	.word	0x200000f4
 800a554:	200000f0 	.word	0x200000f0
 800a558:	20006918 	.word	0x20006918
 800a55c:	200000f6 	.word	0x200000f6
 800a560:	200000ec 	.word	0x200000ec
 800a564:	200000cc 	.word	0x200000cc
 800a568:	080121ac 	.word	0x080121ac
 800a56c:	08012524 	.word	0x08012524
 800a570:	080121f8 	.word	0x080121f8
 800a574:	08012534 	.word	0x08012534
 800a578:	08012544 	.word	0x08012544
        off -= p->len;
 800a57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a57e:	895b      	ldrh	r3, [r3, #10]
 800a580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a58c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a58e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a592:	2200      	movs	r2, #0
 800a594:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a59e:	895b      	ldrh	r3, [r3, #10]
 800a5a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d8e9      	bhi.n	800a57c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a5b0:	f7fc f8d0 	bl	8006754 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	4a91      	ldr	r2, [pc, #580]	; (800a800 <tcp_receive+0x884>)
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	4b91      	ldr	r3, [pc, #580]	; (800a804 <tcp_receive+0x888>)
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	4a8f      	ldr	r2, [pc, #572]	; (800a800 <tcp_receive+0x884>)
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a5c6:	e00d      	b.n	800a5e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a5c8:	4b8d      	ldr	r3, [pc, #564]	; (800a800 <tcp_receive+0x884>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da06      	bge.n	800a5e4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	8b5b      	ldrh	r3, [r3, #26]
 800a5da:	f043 0302 	orr.w	r3, r3, #2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5e4:	4b86      	ldr	r3, [pc, #536]	; (800a800 <tcp_receive+0x884>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f2c0 842a 	blt.w	800ae48 <tcp_receive+0xecc>
 800a5f4:	4b82      	ldr	r3, [pc, #520]	; (800a800 <tcp_receive+0x884>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	6879      	ldr	r1, [r7, #4]
 800a5fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a600:	440b      	add	r3, r1
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	3301      	adds	r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	f300 841e 	bgt.w	800ae48 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a610:	4b7b      	ldr	r3, [pc, #492]	; (800a800 <tcp_receive+0x884>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	f040 829a 	bne.w	800ab4e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a61a:	4b7a      	ldr	r3, [pc, #488]	; (800a804 <tcp_receive+0x888>)
 800a61c:	891c      	ldrh	r4, [r3, #8]
 800a61e:	4b79      	ldr	r3, [pc, #484]	; (800a804 <tcp_receive+0x888>)
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	899b      	ldrh	r3, [r3, #12]
 800a624:	b29b      	uxth	r3, r3
 800a626:	4618      	mov	r0, r3
 800a628:	f7fa fe66 	bl	80052f8 <lwip_htons>
 800a62c:	4603      	mov	r3, r0
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 0303 	and.w	r3, r3, #3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <tcp_receive+0x6c0>
 800a638:	2301      	movs	r3, #1
 800a63a:	e000      	b.n	800a63e <tcp_receive+0x6c2>
 800a63c:	2300      	movs	r3, #0
 800a63e:	4423      	add	r3, r4
 800a640:	b29a      	uxth	r2, r3
 800a642:	4b71      	ldr	r3, [pc, #452]	; (800a808 <tcp_receive+0x88c>)
 800a644:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a64a:	4b6f      	ldr	r3, [pc, #444]	; (800a808 <tcp_receive+0x88c>)
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d275      	bcs.n	800a73e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a652:	4b6c      	ldr	r3, [pc, #432]	; (800a804 <tcp_receive+0x888>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	899b      	ldrh	r3, [r3, #12]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fa fe4c 	bl	80052f8 <lwip_htons>
 800a660:	4603      	mov	r3, r0
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01f      	beq.n	800a6ac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a66c:	4b65      	ldr	r3, [pc, #404]	; (800a804 <tcp_receive+0x888>)
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	899b      	ldrh	r3, [r3, #12]
 800a672:	b29b      	uxth	r3, r3
 800a674:	b21b      	sxth	r3, r3
 800a676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a67a:	b21c      	sxth	r4, r3
 800a67c:	4b61      	ldr	r3, [pc, #388]	; (800a804 <tcp_receive+0x888>)
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	899b      	ldrh	r3, [r3, #12]
 800a682:	b29b      	uxth	r3, r3
 800a684:	4618      	mov	r0, r3
 800a686:	f7fa fe37 	bl	80052f8 <lwip_htons>
 800a68a:	4603      	mov	r3, r0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	b29b      	uxth	r3, r3
 800a690:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a694:	b29b      	uxth	r3, r3
 800a696:	4618      	mov	r0, r3
 800a698:	f7fa fe2e 	bl	80052f8 <lwip_htons>
 800a69c:	4603      	mov	r3, r0
 800a69e:	b21b      	sxth	r3, r3
 800a6a0:	4323      	orrs	r3, r4
 800a6a2:	b21a      	sxth	r2, r3
 800a6a4:	4b57      	ldr	r3, [pc, #348]	; (800a804 <tcp_receive+0x888>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6b0:	4b54      	ldr	r3, [pc, #336]	; (800a804 <tcp_receive+0x888>)
 800a6b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a6b4:	4b53      	ldr	r3, [pc, #332]	; (800a804 <tcp_receive+0x888>)
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	899b      	ldrh	r3, [r3, #12]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fa fe1b 	bl	80052f8 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <tcp_receive+0x75e>
            inseg.len -= 1;
 800a6ce:	4b4d      	ldr	r3, [pc, #308]	; (800a804 <tcp_receive+0x888>)
 800a6d0:	891b      	ldrh	r3, [r3, #8]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	4b4b      	ldr	r3, [pc, #300]	; (800a804 <tcp_receive+0x888>)
 800a6d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a6da:	4b4a      	ldr	r3, [pc, #296]	; (800a804 <tcp_receive+0x888>)
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	4a49      	ldr	r2, [pc, #292]	; (800a804 <tcp_receive+0x888>)
 800a6e0:	8912      	ldrh	r2, [r2, #8]
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fb ff35 	bl	8006554 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a6ea:	4b46      	ldr	r3, [pc, #280]	; (800a804 <tcp_receive+0x888>)
 800a6ec:	891c      	ldrh	r4, [r3, #8]
 800a6ee:	4b45      	ldr	r3, [pc, #276]	; (800a804 <tcp_receive+0x888>)
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	899b      	ldrh	r3, [r3, #12]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fa fdfe 	bl	80052f8 <lwip_htons>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	f003 0303 	and.w	r3, r3, #3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <tcp_receive+0x790>
 800a708:	2301      	movs	r3, #1
 800a70a:	e000      	b.n	800a70e <tcp_receive+0x792>
 800a70c:	2300      	movs	r3, #0
 800a70e:	4423      	add	r3, r4
 800a710:	b29a      	uxth	r2, r3
 800a712:	4b3d      	ldr	r3, [pc, #244]	; (800a808 <tcp_receive+0x88c>)
 800a714:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a716:	4b3c      	ldr	r3, [pc, #240]	; (800a808 <tcp_receive+0x88c>)
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	4b38      	ldr	r3, [pc, #224]	; (800a800 <tcp_receive+0x884>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	441a      	add	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a72a:	440b      	add	r3, r1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d006      	beq.n	800a73e <tcp_receive+0x7c2>
 800a730:	4b36      	ldr	r3, [pc, #216]	; (800a80c <tcp_receive+0x890>)
 800a732:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a736:	4936      	ldr	r1, [pc, #216]	; (800a810 <tcp_receive+0x894>)
 800a738:	4836      	ldr	r0, [pc, #216]	; (800a814 <tcp_receive+0x898>)
 800a73a:	f005 fb81 	bl	800fe40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80e7 	beq.w	800a916 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a748:	4b2e      	ldr	r3, [pc, #184]	; (800a804 <tcp_receive+0x888>)
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	899b      	ldrh	r3, [r3, #12]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4618      	mov	r0, r3
 800a752:	f7fa fdd1 	bl	80052f8 <lwip_htons>
 800a756:	4603      	mov	r3, r0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d010      	beq.n	800a784 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a762:	e00a      	b.n	800a77a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a768:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fd fcb0 	bl	80080da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f0      	bne.n	800a764 <tcp_receive+0x7e8>
 800a782:	e0c8      	b.n	800a916 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a78a:	e052      	b.n	800a832 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	b29b      	uxth	r3, r3
 800a794:	4618      	mov	r0, r3
 800a796:	f7fa fdaf 	bl	80052f8 <lwip_htons>
 800a79a:	4603      	mov	r3, r0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d03d      	beq.n	800a822 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a7a6:	4b17      	ldr	r3, [pc, #92]	; (800a804 <tcp_receive+0x888>)
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	899b      	ldrh	r3, [r3, #12]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fa fda2 	bl	80052f8 <lwip_htons>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d130      	bne.n	800a822 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a7c0:	4b10      	ldr	r3, [pc, #64]	; (800a804 <tcp_receive+0x888>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	899b      	ldrh	r3, [r3, #12]
 800a7c6:	b29c      	uxth	r4, r3
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f7fa fd95 	bl	80052f8 <lwip_htons>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <tcp_receive+0x888>)
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	4322      	orrs	r2, r4
 800a7d8:	b292      	uxth	r2, r2
 800a7da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <tcp_receive+0x888>)
 800a7de:	891c      	ldrh	r4, [r3, #8]
 800a7e0:	4b08      	ldr	r3, [pc, #32]	; (800a804 <tcp_receive+0x888>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fa fd85 	bl	80052f8 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00e      	beq.n	800a818 <tcp_receive+0x89c>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e00d      	b.n	800a81a <tcp_receive+0x89e>
 800a7fe:	bf00      	nop
 800a800:	200000ec 	.word	0x200000ec
 800a804:	200000cc 	.word	0x200000cc
 800a808:	200000f6 	.word	0x200000f6
 800a80c:	080121ac 	.word	0x080121ac
 800a810:	08012554 	.word	0x08012554
 800a814:	080121f8 	.word	0x080121f8
 800a818:	2300      	movs	r3, #0
 800a81a:	4423      	add	r3, r4
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	4b98      	ldr	r3, [pc, #608]	; (800aa80 <tcp_receive+0xb04>)
 800a820:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a824:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a82c:	6938      	ldr	r0, [r7, #16]
 800a82e:	f7fd fc54 	bl	80080da <tcp_seg_free>
            while (next &&
 800a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a838:	4b91      	ldr	r3, [pc, #580]	; (800aa80 <tcp_receive+0xb04>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	4b91      	ldr	r3, [pc, #580]	; (800aa84 <tcp_receive+0xb08>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	441a      	add	r2, r3
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a84c:	8909      	ldrh	r1, [r1, #8]
 800a84e:	440b      	add	r3, r1
 800a850:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a852:	2b00      	cmp	r3, #0
 800a854:	da9a      	bge.n	800a78c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d059      	beq.n	800a910 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a85c:	4b88      	ldr	r3, [pc, #544]	; (800aa80 <tcp_receive+0xb04>)
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	461a      	mov	r2, r3
 800a862:	4b88      	ldr	r3, [pc, #544]	; (800aa84 <tcp_receive+0xb08>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	441a      	add	r2, r3
 800a868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd4d      	ble.n	800a910 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	4b81      	ldr	r3, [pc, #516]	; (800aa84 <tcp_receive+0xb08>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	b29a      	uxth	r2, r3
 800a886:	4b80      	ldr	r3, [pc, #512]	; (800aa88 <tcp_receive+0xb0c>)
 800a888:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a88a:	4b7f      	ldr	r3, [pc, #508]	; (800aa88 <tcp_receive+0xb0c>)
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	899b      	ldrh	r3, [r3, #12]
 800a890:	b29b      	uxth	r3, r3
 800a892:	4618      	mov	r0, r3
 800a894:	f7fa fd30 	bl	80052f8 <lwip_htons>
 800a898:	4603      	mov	r3, r0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800a8a4:	4b78      	ldr	r3, [pc, #480]	; (800aa88 <tcp_receive+0xb0c>)
 800a8a6:	891b      	ldrh	r3, [r3, #8]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	4b76      	ldr	r3, [pc, #472]	; (800aa88 <tcp_receive+0xb0c>)
 800a8ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a8b0:	4b75      	ldr	r3, [pc, #468]	; (800aa88 <tcp_receive+0xb0c>)
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4a74      	ldr	r2, [pc, #464]	; (800aa88 <tcp_receive+0xb0c>)
 800a8b6:	8912      	ldrh	r2, [r2, #8]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fb fe4a 	bl	8006554 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a8c0:	4b71      	ldr	r3, [pc, #452]	; (800aa88 <tcp_receive+0xb0c>)
 800a8c2:	891c      	ldrh	r4, [r3, #8]
 800a8c4:	4b70      	ldr	r3, [pc, #448]	; (800aa88 <tcp_receive+0xb0c>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	899b      	ldrh	r3, [r3, #12]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fa fd13 	bl	80052f8 <lwip_htons>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	f003 0303 	and.w	r3, r3, #3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <tcp_receive+0x966>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <tcp_receive+0x968>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4423      	add	r3, r4
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	4b65      	ldr	r3, [pc, #404]	; (800aa80 <tcp_receive+0xb04>)
 800a8ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a8ec:	4b64      	ldr	r3, [pc, #400]	; (800aa80 <tcp_receive+0xb04>)
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b64      	ldr	r3, [pc, #400]	; (800aa84 <tcp_receive+0xb08>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	441a      	add	r2, r3
 800a8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d006      	beq.n	800a910 <tcp_receive+0x994>
 800a902:	4b62      	ldr	r3, [pc, #392]	; (800aa8c <tcp_receive+0xb10>)
 800a904:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a908:	4961      	ldr	r1, [pc, #388]	; (800aa90 <tcp_receive+0xb14>)
 800a90a:	4862      	ldr	r0, [pc, #392]	; (800aa94 <tcp_receive+0xb18>)
 800a90c:	f005 fa98 	bl	800fe40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a914:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a916:	4b5a      	ldr	r3, [pc, #360]	; (800aa80 <tcp_receive+0xb04>)
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	4b59      	ldr	r3, [pc, #356]	; (800aa84 <tcp_receive+0xb08>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a92a:	4b55      	ldr	r3, [pc, #340]	; (800aa80 <tcp_receive+0xb04>)
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d206      	bcs.n	800a940 <tcp_receive+0x9c4>
 800a932:	4b56      	ldr	r3, [pc, #344]	; (800aa8c <tcp_receive+0xb10>)
 800a934:	f240 6207 	movw	r2, #1543	; 0x607
 800a938:	4957      	ldr	r1, [pc, #348]	; (800aa98 <tcp_receive+0xb1c>)
 800a93a:	4856      	ldr	r0, [pc, #344]	; (800aa94 <tcp_receive+0xb18>)
 800a93c:	f005 fa80 	bl	800fe40 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a944:	4b4e      	ldr	r3, [pc, #312]	; (800aa80 <tcp_receive+0xb04>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7fc fe9d 	bl	8007690 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a956:	4b4c      	ldr	r3, [pc, #304]	; (800aa88 <tcp_receive+0xb0c>)
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	891b      	ldrh	r3, [r3, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a960:	4b49      	ldr	r3, [pc, #292]	; (800aa88 <tcp_receive+0xb0c>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4a4d      	ldr	r2, [pc, #308]	; (800aa9c <tcp_receive+0xb20>)
 800a966:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a968:	4b47      	ldr	r3, [pc, #284]	; (800aa88 <tcp_receive+0xb0c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a96e:	4b46      	ldr	r3, [pc, #280]	; (800aa88 <tcp_receive+0xb0c>)
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	899b      	ldrh	r3, [r3, #12]
 800a974:	b29b      	uxth	r3, r3
 800a976:	4618      	mov	r0, r3
 800a978:	f7fa fcbe 	bl	80052f8 <lwip_htons>
 800a97c:	4603      	mov	r3, r0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80b8 	beq.w	800aafa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a98a:	4b45      	ldr	r3, [pc, #276]	; (800aaa0 <tcp_receive+0xb24>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f043 0320 	orr.w	r3, r3, #32
 800a992:	b2da      	uxtb	r2, r3
 800a994:	4b42      	ldr	r3, [pc, #264]	; (800aaa0 <tcp_receive+0xb24>)
 800a996:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a998:	e0af      	b.n	800aafa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	4a36      	ldr	r2, [pc, #216]	; (800aa84 <tcp_receive+0xb08>)
 800a9aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	891b      	ldrh	r3, [r3, #8]
 800a9b0:	461c      	mov	r4, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fa fc9c 	bl	80052f8 <lwip_htons>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <tcp_receive+0xa54>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <tcp_receive+0xa56>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	191a      	adds	r2, r3, r4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	441a      	add	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	461d      	mov	r5, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	899b      	ldrh	r3, [r3, #12]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fa fc80 	bl	80052f8 <lwip_htons>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <tcp_receive+0xa8c>
 800aa04:	2301      	movs	r3, #1
 800aa06:	e000      	b.n	800aa0a <tcp_receive+0xa8e>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	442b      	add	r3, r5
 800aa0c:	429c      	cmp	r4, r3
 800aa0e:	d206      	bcs.n	800aa1e <tcp_receive+0xaa2>
 800aa10:	4b1e      	ldr	r3, [pc, #120]	; (800aa8c <tcp_receive+0xb10>)
 800aa12:	f240 622b 	movw	r2, #1579	; 0x62b
 800aa16:	4923      	ldr	r1, [pc, #140]	; (800aaa4 <tcp_receive+0xb28>)
 800aa18:	481e      	ldr	r0, [pc, #120]	; (800aa94 <tcp_receive+0xb18>)
 800aa1a:	f005 fa11 	bl	800fe40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	891b      	ldrh	r3, [r3, #8]
 800aa22:	461c      	mov	r4, r3
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fa fc63 	bl	80052f8 <lwip_htons>
 800aa32:	4603      	mov	r3, r0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0303 	and.w	r3, r3, #3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <tcp_receive+0xac6>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <tcp_receive+0xac8>
 800aa42:	2300      	movs	r3, #0
 800aa44:	1919      	adds	r1, r3, r4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa4a:	b28b      	uxth	r3, r1
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7fc fe1b 	bl	8007690 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	891b      	ldrh	r3, [r3, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d028      	beq.n	800aab6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <tcp_receive+0xb20>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01d      	beq.n	800aaa8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <tcp_receive+0xb20>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fb ffb4 	bl	80069e4 <pbuf_cat>
 800aa7c:	e018      	b.n	800aab0 <tcp_receive+0xb34>
 800aa7e:	bf00      	nop
 800aa80:	200000f6 	.word	0x200000f6
 800aa84:	200000ec 	.word	0x200000ec
 800aa88:	200000cc 	.word	0x200000cc
 800aa8c:	080121ac 	.word	0x080121ac
 800aa90:	0801258c 	.word	0x0801258c
 800aa94:	080121f8 	.word	0x080121f8
 800aa98:	080125c8 	.word	0x080125c8
 800aa9c:	200000fc 	.word	0x200000fc
 800aaa0:	200000f9 	.word	0x200000f9
 800aaa4:	080125e8 	.word	0x080125e8
            } else {
              recv_data = cseg->p;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	4a70      	ldr	r2, [pc, #448]	; (800ac70 <tcp_receive+0xcf4>)
 800aaae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2200      	movs	r2, #0
 800aab4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	899b      	ldrh	r3, [r3, #12]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fa fc1a 	bl	80052f8 <lwip_htons>
 800aac4:	4603      	mov	r3, r0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00d      	beq.n	800aaec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aad0:	4b68      	ldr	r3, [pc, #416]	; (800ac74 <tcp_receive+0xcf8>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f043 0320 	orr.w	r3, r3, #32
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4b66      	ldr	r3, [pc, #408]	; (800ac74 <tcp_receive+0xcf8>)
 800aadc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7d1b      	ldrb	r3, [r3, #20]
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d102      	bne.n	800aaec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2207      	movs	r2, #7
 800aaea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	f7fd faf0 	bl	80080da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	f43f af43 	beq.w	800a99a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	8b5b      	ldrh	r3, [r3, #26]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00e      	beq.n	800ab3e <tcp_receive+0xbc2>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8b5b      	ldrh	r3, [r3, #26]
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	835a      	strh	r2, [r3, #26]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8b5b      	ldrh	r3, [r3, #26]
 800ab32:	f043 0302 	orr.w	r3, r3, #2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab3c:	e188      	b.n	800ae50 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	8b5b      	ldrh	r3, [r3, #26]
 800ab42:	f043 0301 	orr.w	r3, r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab4c:	e180      	b.n	800ae50 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab56:	4848      	ldr	r0, [pc, #288]	; (800ac78 <tcp_receive+0xcfc>)
 800ab58:	f7fd faf6 	bl	8008148 <tcp_seg_copy>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	675a      	str	r2, [r3, #116]	; 0x74
 800ab62:	e16d      	b.n	800ae40 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab6e:	e157      	b.n	800ae20 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b41      	ldr	r3, [pc, #260]	; (800ac7c <tcp_receive+0xd00>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d11d      	bne.n	800abba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <tcp_receive+0xcfc>)
 800ab80:	891a      	ldrh	r2, [r3, #8]
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	891b      	ldrh	r3, [r3, #8]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	f240 814f 	bls.w	800ae2a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab8c:	483a      	ldr	r0, [pc, #232]	; (800ac78 <tcp_receive+0xcfc>)
 800ab8e:	f7fd fadb 	bl	8008148 <tcp_seg_copy>
 800ab92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 8149 	beq.w	800ae2e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e002      	b.n	800abb0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800abb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abb2:	6978      	ldr	r0, [r7, #20]
 800abb4:	f7ff f8de 	bl	8009d74 <tcp_oos_insert_segment>
                }
                break;
 800abb8:	e139      	b.n	800ae2e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d117      	bne.n	800abf0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800abc0:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <tcp_receive+0xd00>)
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da57      	bge.n	800ac80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abd0:	4829      	ldr	r0, [pc, #164]	; (800ac78 <tcp_receive+0xcfc>)
 800abd2:	f7fd fab9 	bl	8008148 <tcp_seg_copy>
 800abd6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8129 	beq.w	800ae32 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800abe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abe8:	69b8      	ldr	r0, [r7, #24]
 800abea:	f7ff f8c3 	bl	8009d74 <tcp_oos_insert_segment>
                  }
                  break;
 800abee:	e120      	b.n	800ae32 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800abf0:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <tcp_receive+0xd00>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	3b01      	subs	r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	db3e      	blt.n	800ac80 <tcp_receive+0xd04>
 800ac02:	4b1e      	ldr	r3, [pc, #120]	; (800ac7c <tcp_receive+0xd00>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	3301      	adds	r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc35      	bgt.n	800ac80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac14:	4818      	ldr	r0, [pc, #96]	; (800ac78 <tcp_receive+0xcfc>)
 800ac16:	f7fd fa97 	bl	8008148 <tcp_seg_copy>
 800ac1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 8109 	beq.w	800ae36 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ac24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2c:	8912      	ldrh	r2, [r2, #8]
 800ac2e:	441a      	add	r2, r3
 800ac30:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <tcp_receive+0xd00>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dd12      	ble.n	800ac60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ac3a:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <tcp_receive+0xd00>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac56:	891b      	ldrh	r3, [r3, #8]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f7fb fc7a 	bl	8006554 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	69fa      	ldr	r2, [r7, #28]
 800ac64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac68:	69f8      	ldr	r0, [r7, #28]
 800ac6a:	f7ff f883 	bl	8009d74 <tcp_oos_insert_segment>
                  }
                  break;
 800ac6e:	e0e2      	b.n	800ae36 <tcp_receive+0xeba>
 800ac70:	200000fc 	.word	0x200000fc
 800ac74:	200000f9 	.word	0x200000f9
 800ac78:	200000cc 	.word	0x200000cc
 800ac7c:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 80c6 	bne.w	800ae1a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac8e:	4b80      	ldr	r3, [pc, #512]	; (800ae90 <tcp_receive+0xf14>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f340 80bd 	ble.w	800ae1a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	899b      	ldrh	r3, [r3, #12]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fa fb25 	bl	80052f8 <lwip_htons>
 800acae:	4603      	mov	r3, r0
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f040 80bf 	bne.w	800ae3a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800acbc:	4875      	ldr	r0, [pc, #468]	; (800ae94 <tcp_receive+0xf18>)
 800acbe:	f7fd fa43 	bl	8008148 <tcp_seg_copy>
 800acc2:	4602      	mov	r2, r0
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 80b6 	beq.w	800ae3e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acda:	8912      	ldrh	r2, [r2, #8]
 800acdc:	441a      	add	r2, r3
 800acde:	4b6c      	ldr	r3, [pc, #432]	; (800ae90 <tcp_receive+0xf14>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd12      	ble.n	800ad0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ace8:	4b69      	ldr	r3, [pc, #420]	; (800ae90 <tcp_receive+0xf14>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	b29a      	uxth	r2, r3
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	891b      	ldrh	r3, [r3, #8]
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fb fc23 	bl	8006554 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ad0e:	4b62      	ldr	r3, [pc, #392]	; (800ae98 <tcp_receive+0xf1c>)
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	4b5e      	ldr	r3, [pc, #376]	; (800ae90 <tcp_receive+0xf14>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	441a      	add	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad22:	440b      	add	r3, r1
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f340 8089 	ble.w	800ae3e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	899b      	ldrh	r3, [r3, #12]
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fa fade 	bl	80052f8 <lwip_htons>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d022      	beq.n	800ad8e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	899b      	ldrh	r3, [r3, #12]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	b21b      	sxth	r3, r3
 800ad54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad58:	b21c      	sxth	r4, r3
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	899b      	ldrh	r3, [r3, #12]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fa fac7 	bl	80052f8 <lwip_htons>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fa fabe 	bl	80052f8 <lwip_htons>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	4323      	orrs	r3, r4
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	b292      	uxth	r2, r2
 800ad8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad98:	4413      	add	r3, r2
 800ad9a:	b299      	uxth	r1, r3
 800ad9c:	4b3c      	ldr	r3, [pc, #240]	; (800ae90 <tcp_receive+0xf14>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	1a8a      	subs	r2, r1, r2
 800ada8:	b292      	uxth	r2, r2
 800adaa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	891b      	ldrh	r3, [r3, #8]
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7fb fbca 	bl	8006554 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	891c      	ldrh	r4, [r3, #8]
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	899b      	ldrh	r3, [r3, #12]
 800adce:	b29b      	uxth	r3, r3
 800add0:	4618      	mov	r0, r3
 800add2:	f7fa fa91 	bl	80052f8 <lwip_htons>
 800add6:	4603      	mov	r3, r0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <tcp_receive+0xe6a>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <tcp_receive+0xe6c>
 800ade6:	2300      	movs	r3, #0
 800ade8:	4423      	add	r3, r4
 800adea:	b29a      	uxth	r2, r3
 800adec:	4b2a      	ldr	r3, [pc, #168]	; (800ae98 <tcp_receive+0xf1c>)
 800adee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800adf0:	4b29      	ldr	r3, [pc, #164]	; (800ae98 <tcp_receive+0xf1c>)
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <tcp_receive+0xf14>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	441a      	add	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae04:	440b      	add	r3, r1
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d019      	beq.n	800ae3e <tcp_receive+0xec2>
 800ae0a:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <tcp_receive+0xf20>)
 800ae0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ae10:	4923      	ldr	r1, [pc, #140]	; (800aea0 <tcp_receive+0xf24>)
 800ae12:	4824      	ldr	r0, [pc, #144]	; (800aea4 <tcp_receive+0xf28>)
 800ae14:	f005 f814 	bl	800fe40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ae18:	e011      	b.n	800ae3e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f47f aea4 	bne.w	800ab70 <tcp_receive+0xbf4>
 800ae28:	e00a      	b.n	800ae40 <tcp_receive+0xec4>
                break;
 800ae2a:	bf00      	nop
 800ae2c:	e008      	b.n	800ae40 <tcp_receive+0xec4>
                break;
 800ae2e:	bf00      	nop
 800ae30:	e006      	b.n	800ae40 <tcp_receive+0xec4>
                  break;
 800ae32:	bf00      	nop
 800ae34:	e004      	b.n	800ae40 <tcp_receive+0xec4>
                  break;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <tcp_receive+0xec4>
                  break;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <tcp_receive+0xec4>
                break;
 800ae3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 fe8b 	bl	800cb5c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ae46:	e003      	b.n	800ae50 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 fe87 	bl	800cb5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae4e:	e01a      	b.n	800ae86 <tcp_receive+0xf0a>
 800ae50:	e019      	b.n	800ae86 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <tcp_receive+0xf14>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	db0a      	blt.n	800ae76 <tcp_receive+0xefa>
 800ae60:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <tcp_receive+0xf14>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae6c:	440b      	add	r3, r1
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	3301      	adds	r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd07      	ble.n	800ae86 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	8b5b      	ldrh	r3, [r3, #26]
 800ae7a:	f043 0302 	orr.w	r3, r3, #2
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae84:	e7ff      	b.n	800ae86 <tcp_receive+0xf0a>
 800ae86:	bf00      	nop
 800ae88:	3750      	adds	r7, #80	; 0x50
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200000ec 	.word	0x200000ec
 800ae94:	200000cc 	.word	0x200000cc
 800ae98:	200000f6 	.word	0x200000f6
 800ae9c:	080121ac 	.word	0x080121ac
 800aea0:	08012554 	.word	0x08012554
 800aea4:	080121f8 	.word	0x080121f8

0800aea8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800aeae:	4b15      	ldr	r3, [pc, #84]	; (800af04 <tcp_get_next_optbyte+0x5c>)
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	1c5a      	adds	r2, r3, #1
 800aeb4:	b291      	uxth	r1, r2
 800aeb6:	4a13      	ldr	r2, [pc, #76]	; (800af04 <tcp_get_next_optbyte+0x5c>)
 800aeb8:	8011      	strh	r1, [r2, #0]
 800aeba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aebc:	4b12      	ldr	r3, [pc, #72]	; (800af08 <tcp_get_next_optbyte+0x60>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d004      	beq.n	800aece <tcp_get_next_optbyte+0x26>
 800aec4:	4b11      	ldr	r3, [pc, #68]	; (800af0c <tcp_get_next_optbyte+0x64>)
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	88fa      	ldrh	r2, [r7, #6]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d208      	bcs.n	800aee0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800aece:	4b10      	ldr	r3, [pc, #64]	; (800af10 <tcp_get_next_optbyte+0x68>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3314      	adds	r3, #20
 800aed4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4413      	add	r3, r2
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	e00b      	b.n	800aef8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aee0:	88fb      	ldrh	r3, [r7, #6]
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	4b09      	ldr	r3, [pc, #36]	; (800af0c <tcp_get_next_optbyte+0x64>)
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <tcp_get_next_optbyte+0x60>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	797b      	ldrb	r3, [r7, #5]
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	200000e8 	.word	0x200000e8
 800af08:	200000e4 	.word	0x200000e4
 800af0c:	200000e2 	.word	0x200000e2
 800af10:	200000dc 	.word	0x200000dc

0800af14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d106      	bne.n	800af30 <tcp_parseopt+0x1c>
 800af22:	4b32      	ldr	r3, [pc, #200]	; (800afec <tcp_parseopt+0xd8>)
 800af24:	f240 727d 	movw	r2, #1917	; 0x77d
 800af28:	4931      	ldr	r1, [pc, #196]	; (800aff0 <tcp_parseopt+0xdc>)
 800af2a:	4832      	ldr	r0, [pc, #200]	; (800aff4 <tcp_parseopt+0xe0>)
 800af2c:	f004 ff88 	bl	800fe40 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800af30:	4b31      	ldr	r3, [pc, #196]	; (800aff8 <tcp_parseopt+0xe4>)
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d055      	beq.n	800afe4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af38:	4b30      	ldr	r3, [pc, #192]	; (800affc <tcp_parseopt+0xe8>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	801a      	strh	r2, [r3, #0]
 800af3e:	e045      	b.n	800afcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800af40:	f7ff ffb2 	bl	800aea8 <tcp_get_next_optbyte>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d006      	beq.n	800af5c <tcp_parseopt+0x48>
 800af4e:	2b02      	cmp	r3, #2
 800af50:	dc2b      	bgt.n	800afaa <tcp_parseopt+0x96>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d041      	beq.n	800afda <tcp_parseopt+0xc6>
 800af56:	2b01      	cmp	r3, #1
 800af58:	d127      	bne.n	800afaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af5a:	e037      	b.n	800afcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af5c:	f7ff ffa4 	bl	800aea8 <tcp_get_next_optbyte>
 800af60:	4603      	mov	r3, r0
 800af62:	2b04      	cmp	r3, #4
 800af64:	d13b      	bne.n	800afde <tcp_parseopt+0xca>
 800af66:	4b25      	ldr	r3, [pc, #148]	; (800affc <tcp_parseopt+0xe8>)
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4a22      	ldr	r2, [pc, #136]	; (800aff8 <tcp_parseopt+0xe4>)
 800af6e:	8812      	ldrh	r2, [r2, #0]
 800af70:	4293      	cmp	r3, r2
 800af72:	da34      	bge.n	800afde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af74:	f7ff ff98 	bl	800aea8 <tcp_get_next_optbyte>
 800af78:	4603      	mov	r3, r0
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af80:	f7ff ff92 	bl	800aea8 <tcp_get_next_optbyte>
 800af84:	4603      	mov	r3, r0
 800af86:	b29a      	uxth	r2, r3
 800af88:	89bb      	ldrh	r3, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af8e:	89bb      	ldrh	r3, [r7, #12]
 800af90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af94:	d804      	bhi.n	800afa0 <tcp_parseopt+0x8c>
 800af96:	89bb      	ldrh	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <tcp_parseopt+0x8c>
 800af9c:	89ba      	ldrh	r2, [r7, #12]
 800af9e:	e001      	b.n	800afa4 <tcp_parseopt+0x90>
 800afa0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800afa8:	e010      	b.n	800afcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800afaa:	f7ff ff7d 	bl	800aea8 <tcp_get_next_optbyte>
 800afae:	4603      	mov	r3, r0
 800afb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800afb2:	7afb      	ldrb	r3, [r7, #11]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d914      	bls.n	800afe2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	4b0f      	ldr	r3, [pc, #60]	; (800affc <tcp_parseopt+0xe8>)
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	4413      	add	r3, r2
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	3b02      	subs	r3, #2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	4b0c      	ldr	r3, [pc, #48]	; (800affc <tcp_parseopt+0xe8>)
 800afca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <tcp_parseopt+0xe8>)
 800afce:	881a      	ldrh	r2, [r3, #0]
 800afd0:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <tcp_parseopt+0xe4>)
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d3b3      	bcc.n	800af40 <tcp_parseopt+0x2c>
 800afd8:	e004      	b.n	800afe4 <tcp_parseopt+0xd0>
          return;
 800afda:	bf00      	nop
 800afdc:	e002      	b.n	800afe4 <tcp_parseopt+0xd0>
            return;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <tcp_parseopt+0xd0>
            return;
 800afe2:	bf00      	nop
      }
    }
  }
}
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	080121ac 	.word	0x080121ac
 800aff0:	08012610 	.word	0x08012610
 800aff4:	080121f8 	.word	0x080121f8
 800aff8:	200000e0 	.word	0x200000e0
 800affc:	200000e8 	.word	0x200000e8

0800b000 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <tcp_trigger_input_pcb_close+0x1c>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f043 0310 	orr.w	r3, r3, #16
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b03      	ldr	r3, [pc, #12]	; (800b01c <tcp_trigger_input_pcb_close+0x1c>)
 800b010:	701a      	strb	r2, [r3, #0]
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	200000f9 	.word	0x200000f9

0800b020 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <tcp_route+0x28>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	7a1b      	ldrb	r3, [r3, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d006      	beq.n	800b048 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	7a1b      	ldrb	r3, [r3, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fb f8ae 	bl	80061a0 <netif_get_by_index>
 800b044:	4603      	mov	r3, r0
 800b046:	e003      	b.n	800b050 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f003 fad5 	bl	800e5f8 <ip4_route>
 800b04e:	4603      	mov	r3, r0
  }
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	4613      	mov	r3, r2
 800b066:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <tcp_create_segment+0x22>
 800b06e:	4b44      	ldr	r3, [pc, #272]	; (800b180 <tcp_create_segment+0x128>)
 800b070:	22a3      	movs	r2, #163	; 0xa3
 800b072:	4944      	ldr	r1, [pc, #272]	; (800b184 <tcp_create_segment+0x12c>)
 800b074:	4844      	ldr	r0, [pc, #272]	; (800b188 <tcp_create_segment+0x130>)
 800b076:	f004 fee3 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d105      	bne.n	800b08c <tcp_create_segment+0x34>
 800b080:	4b3f      	ldr	r3, [pc, #252]	; (800b180 <tcp_create_segment+0x128>)
 800b082:	22a4      	movs	r2, #164	; 0xa4
 800b084:	4941      	ldr	r1, [pc, #260]	; (800b18c <tcp_create_segment+0x134>)
 800b086:	4840      	ldr	r0, [pc, #256]	; (800b188 <tcp_create_segment+0x130>)
 800b088:	f004 feda 	bl	800fe40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b08c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b09a:	2003      	movs	r0, #3
 800b09c:	f7fa fd82 	bl	8005ba4 <memp_malloc>
 800b0a0:	6138      	str	r0, [r7, #16]
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b0a8:	68b8      	ldr	r0, [r7, #8]
 800b0aa:	f7fb fbd9 	bl	8006860 <pbuf_free>
    return NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e061      	b.n	800b176 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b0b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	891a      	ldrh	r2, [r3, #8]
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d205      	bcs.n	800b0de <tcp_create_segment+0x86>
 800b0d2:	4b2b      	ldr	r3, [pc, #172]	; (800b180 <tcp_create_segment+0x128>)
 800b0d4:	22b0      	movs	r2, #176	; 0xb0
 800b0d6:	492e      	ldr	r1, [pc, #184]	; (800b190 <tcp_create_segment+0x138>)
 800b0d8:	482b      	ldr	r0, [pc, #172]	; (800b188 <tcp_create_segment+0x130>)
 800b0da:	f004 feb1 	bl	800fe40 <iprintf>
  seg->len = p->tot_len - optlen;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	891a      	ldrh	r2, [r3, #8]
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0ee:	2114      	movs	r1, #20
 800b0f0:	68b8      	ldr	r0, [r7, #8]
 800b0f2:	f7fb fb1f 	bl	8006734 <pbuf_add_header>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d004      	beq.n	800b106 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b0fc:	6938      	ldr	r0, [r7, #16]
 800b0fe:	f7fc ffec 	bl	80080da <tcp_seg_free>
    return NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	e037      	b.n	800b176 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8ada      	ldrh	r2, [r3, #22]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	68dc      	ldr	r4, [r3, #12]
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fa f8ed 	bl	80052f8 <lwip_htons>
 800b11e:	4603      	mov	r3, r0
 800b120:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8b1a      	ldrh	r2, [r3, #24]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	68dc      	ldr	r4, [r3, #12]
 800b12a:	4610      	mov	r0, r2
 800b12c:	f7fa f8e4 	bl	80052f8 <lwip_htons>
 800b130:	4603      	mov	r3, r0
 800b132:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	68dc      	ldr	r4, [r3, #12]
 800b138:	6838      	ldr	r0, [r7, #0]
 800b13a:	f7fa f8f2 	bl	8005322 <lwip_htonl>
 800b13e:	4603      	mov	r3, r0
 800b140:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	089b      	lsrs	r3, r3, #2
 800b146:	b2db      	uxtb	r3, r3
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3305      	adds	r3, #5
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	031b      	lsls	r3, r3, #12
 800b150:	b29a      	uxth	r2, r3
 800b152:	79fb      	ldrb	r3, [r7, #7]
 800b154:	b29b      	uxth	r3, r3
 800b156:	4313      	orrs	r3, r2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	68dc      	ldr	r4, [r3, #12]
 800b15e:	4610      	mov	r0, r2
 800b160:	f7fa f8ca 	bl	80052f8 <lwip_htons>
 800b164:	4603      	mov	r3, r0
 800b166:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	749a      	strb	r2, [r3, #18]
 800b170:	2200      	movs	r2, #0
 800b172:	74da      	strb	r2, [r3, #19]
  return seg;
 800b174:	693b      	ldr	r3, [r7, #16]
}
 800b176:	4618      	mov	r0, r3
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}
 800b17e:	bf00      	nop
 800b180:	0801262c 	.word	0x0801262c
 800b184:	08012660 	.word	0x08012660
 800b188:	08012680 	.word	0x08012680
 800b18c:	080126a8 	.word	0x080126a8
 800b190:	080126cc 	.word	0x080126cc

0800b194 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	607b      	str	r3, [r7, #4]
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	81bb      	strh	r3, [r7, #12]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b1a8:	89bb      	ldrh	r3, [r7, #12]
 800b1aa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d105      	bne.n	800b1be <tcp_pbuf_prealloc+0x2a>
 800b1b2:	4b30      	ldr	r3, [pc, #192]	; (800b274 <tcp_pbuf_prealloc+0xe0>)
 800b1b4:	22e8      	movs	r2, #232	; 0xe8
 800b1b6:	4930      	ldr	r1, [pc, #192]	; (800b278 <tcp_pbuf_prealloc+0xe4>)
 800b1b8:	4830      	ldr	r0, [pc, #192]	; (800b27c <tcp_pbuf_prealloc+0xe8>)
 800b1ba:	f004 fe41 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <tcp_pbuf_prealloc+0x3c>
 800b1c4:	4b2b      	ldr	r3, [pc, #172]	; (800b274 <tcp_pbuf_prealloc+0xe0>)
 800b1c6:	22e9      	movs	r2, #233	; 0xe9
 800b1c8:	492d      	ldr	r1, [pc, #180]	; (800b280 <tcp_pbuf_prealloc+0xec>)
 800b1ca:	482c      	ldr	r0, [pc, #176]	; (800b27c <tcp_pbuf_prealloc+0xe8>)
 800b1cc:	f004 fe38 	bl	800fe40 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b1d0:	89ba      	ldrh	r2, [r7, #12]
 800b1d2:	897b      	ldrh	r3, [r7, #10]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d221      	bcs.n	800b21c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d111      	bne.n	800b208 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	8b5b      	ldrh	r3, [r3, #26]
 800b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d115      	bne.n	800b21c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b1f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d007      	beq.n	800b208 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d103      	bne.n	800b208 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b204:	2b00      	cmp	r3, #0
 800b206:	d009      	beq.n	800b21c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b208:	89bb      	ldrh	r3, [r7, #12]
 800b20a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b20e:	f023 0203 	bic.w	r2, r3, #3
 800b212:	897b      	ldrh	r3, [r7, #10]
 800b214:	4293      	cmp	r3, r2
 800b216:	bf28      	it	cs
 800b218:	4613      	movcs	r3, r2
 800b21a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b21c:	8af9      	ldrh	r1, [r7, #22]
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b224:	4618      	mov	r0, r3
 800b226:	f7fb f837 	bl	8006298 <pbuf_alloc>
 800b22a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	e019      	b.n	800b26a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d006      	beq.n	800b24c <tcp_pbuf_prealloc+0xb8>
 800b23e:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <tcp_pbuf_prealloc+0xe0>)
 800b240:	f240 120b 	movw	r2, #267	; 0x10b
 800b244:	490f      	ldr	r1, [pc, #60]	; (800b284 <tcp_pbuf_prealloc+0xf0>)
 800b246:	480d      	ldr	r0, [pc, #52]	; (800b27c <tcp_pbuf_prealloc+0xe8>)
 800b248:	f004 fdfa 	bl	800fe40 <iprintf>
  *oversize = p->len - length;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	895a      	ldrh	r2, [r3, #10]
 800b250:	89bb      	ldrh	r3, [r7, #12]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	b29a      	uxth	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	89ba      	ldrh	r2, [r7, #12]
 800b25e:	811a      	strh	r2, [r3, #8]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	891a      	ldrh	r2, [r3, #8]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	815a      	strh	r2, [r3, #10]
  return p;
 800b268:	693b      	ldr	r3, [r7, #16]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	0801262c 	.word	0x0801262c
 800b278:	080126e4 	.word	0x080126e4
 800b27c:	08012680 	.word	0x08012680
 800b280:	08012708 	.word	0x08012708
 800b284:	08012728 	.word	0x08012728

0800b288 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d106      	bne.n	800b2a8 <tcp_write_checks+0x20>
 800b29a:	4b33      	ldr	r3, [pc, #204]	; (800b368 <tcp_write_checks+0xe0>)
 800b29c:	f240 1233 	movw	r2, #307	; 0x133
 800b2a0:	4932      	ldr	r1, [pc, #200]	; (800b36c <tcp_write_checks+0xe4>)
 800b2a2:	4833      	ldr	r0, [pc, #204]	; (800b370 <tcp_write_checks+0xe8>)
 800b2a4:	f004 fdcc 	bl	800fe40 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d00e      	beq.n	800b2ce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b2b4:	2b07      	cmp	r3, #7
 800b2b6:	d00a      	beq.n	800b2ce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d006      	beq.n	800b2ce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d002      	beq.n	800b2ce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b2c8:	f06f 030a 	mvn.w	r3, #10
 800b2cc:	e048      	b.n	800b360 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b2ce:	887b      	ldrh	r3, [r7, #2]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <tcp_write_checks+0x50>
    return ERR_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e043      	b.n	800b360 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2de:	887a      	ldrh	r2, [r7, #2]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d909      	bls.n	800b2f8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8b5b      	ldrh	r3, [r3, #26]
 800b2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f6:	e033      	b.n	800b360 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d909      	bls.n	800b316 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8b5b      	ldrh	r3, [r3, #26]
 800b306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b310:	f04f 33ff 	mov.w	r3, #4294967295
 800b314:	e024      	b.n	800b360 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00f      	beq.n	800b340 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b324:	2b00      	cmp	r3, #0
 800b326:	d11a      	bne.n	800b35e <tcp_write_checks+0xd6>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d116      	bne.n	800b35e <tcp_write_checks+0xd6>
 800b330:	4b0d      	ldr	r3, [pc, #52]	; (800b368 <tcp_write_checks+0xe0>)
 800b332:	f240 1255 	movw	r2, #341	; 0x155
 800b336:	490f      	ldr	r1, [pc, #60]	; (800b374 <tcp_write_checks+0xec>)
 800b338:	480d      	ldr	r0, [pc, #52]	; (800b370 <tcp_write_checks+0xe8>)
 800b33a:	f004 fd81 	bl	800fe40 <iprintf>
 800b33e:	e00e      	b.n	800b35e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b344:	2b00      	cmp	r3, #0
 800b346:	d103      	bne.n	800b350 <tcp_write_checks+0xc8>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d006      	beq.n	800b35e <tcp_write_checks+0xd6>
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <tcp_write_checks+0xe0>)
 800b352:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b356:	4908      	ldr	r1, [pc, #32]	; (800b378 <tcp_write_checks+0xf0>)
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <tcp_write_checks+0xe8>)
 800b35a:	f004 fd71 	bl	800fe40 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	0801262c 	.word	0x0801262c
 800b36c:	0801273c 	.word	0x0801273c
 800b370:	08012680 	.word	0x08012680
 800b374:	0801275c 	.word	0x0801275c
 800b378:	08012798 	.word	0x08012798

0800b37c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b09b      	sub	sp, #108	; 0x6c
 800b380:	af04      	add	r7, sp, #16
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	4611      	mov	r1, r2
 800b388:	461a      	mov	r2, r3
 800b38a:	460b      	mov	r3, r1
 800b38c:	80fb      	strh	r3, [r7, #6]
 800b38e:	4613      	mov	r3, r2
 800b390:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	653b      	str	r3, [r7, #80]	; 0x50
 800b39a:	2300      	movs	r3, #0
 800b39c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b39e:	2300      	movs	r3, #0
 800b3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d109      	bne.n	800b3d8 <tcp_write+0x5c>
 800b3c4:	4ba4      	ldr	r3, [pc, #656]	; (800b658 <tcp_write+0x2dc>)
 800b3c6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b3ca:	49a4      	ldr	r1, [pc, #656]	; (800b65c <tcp_write+0x2e0>)
 800b3cc:	48a4      	ldr	r0, [pc, #656]	; (800b660 <tcp_write+0x2e4>)
 800b3ce:	f004 fd37 	bl	800fe40 <iprintf>
 800b3d2:	f06f 030f 	mvn.w	r3, #15
 800b3d6:	e32a      	b.n	800ba2e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bf28      	it	cs
 800b3ea:	4613      	movcs	r3, r2
 800b3ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <tcp_write+0x7e>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3f8:	e000      	b.n	800b3fc <tcp_write+0x80>
 800b3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d109      	bne.n	800b418 <tcp_write+0x9c>
 800b404:	4b94      	ldr	r3, [pc, #592]	; (800b658 <tcp_write+0x2dc>)
 800b406:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b40a:	4996      	ldr	r1, [pc, #600]	; (800b664 <tcp_write+0x2e8>)
 800b40c:	4894      	ldr	r0, [pc, #592]	; (800b660 <tcp_write+0x2e4>)
 800b40e:	f004 fd17 	bl	800fe40 <iprintf>
 800b412:	f06f 030f 	mvn.w	r3, #15
 800b416:	e30a      	b.n	800ba2e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b418:	88fb      	ldrh	r3, [r7, #6]
 800b41a:	4619      	mov	r1, r3
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff ff33 	bl	800b288 <tcp_write_checks>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b428:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <tcp_write+0xba>
    return err;
 800b430:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b434:	e2fb      	b.n	800ba2e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b43c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 80f6 	beq.w	800b63c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b454:	653b      	str	r3, [r7, #80]	; 0x50
 800b456:	e002      	b.n	800b45e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1f8      	bne.n	800b458 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b468:	7a9b      	ldrb	r3, [r3, #10]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	f003 0304 	and.w	r3, r3, #4
 800b472:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b478:	891b      	ldrh	r3, [r3, #8]
 800b47a:	4619      	mov	r1, r3
 800b47c:	8c3b      	ldrh	r3, [r7, #32]
 800b47e:	440b      	add	r3, r1
 800b480:	429a      	cmp	r2, r3
 800b482:	da06      	bge.n	800b492 <tcp_write+0x116>
 800b484:	4b74      	ldr	r3, [pc, #464]	; (800b658 <tcp_write+0x2dc>)
 800b486:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b48a:	4977      	ldr	r1, [pc, #476]	; (800b668 <tcp_write+0x2ec>)
 800b48c:	4874      	ldr	r0, [pc, #464]	; (800b660 <tcp_write+0x2e4>)
 800b48e:	f004 fcd7 	bl	800fe40 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	891a      	ldrh	r2, [r3, #8]
 800b496:	8c3b      	ldrh	r3, [r7, #32]
 800b498:	4413      	add	r3, r2
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b4a8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b4aa:	8a7b      	ldrh	r3, [r7, #18]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d026      	beq.n	800b4fe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b4b0:	8a7b      	ldrh	r3, [r7, #18]
 800b4b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d206      	bcs.n	800b4c6 <tcp_write+0x14a>
 800b4b8:	4b67      	ldr	r3, [pc, #412]	; (800b658 <tcp_write+0x2dc>)
 800b4ba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b4be:	496b      	ldr	r1, [pc, #428]	; (800b66c <tcp_write+0x2f0>)
 800b4c0:	4867      	ldr	r0, [pc, #412]	; (800b660 <tcp_write+0x2e4>)
 800b4c2:	f004 fcbd 	bl	800fe40 <iprintf>
      seg = last_unsent;
 800b4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b4ca:	8a7b      	ldrh	r3, [r7, #18]
 800b4cc:	88fa      	ldrh	r2, [r7, #6]
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	bf28      	it	cs
 800b4d2:	4613      	movcs	r3, r2
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf28      	it	cs
 800b4dc:	4613      	movcs	r3, r2
 800b4de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b4e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b4ec:	8a7a      	ldrh	r2, [r7, #18]
 800b4ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b4f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4fe:	8a7b      	ldrh	r3, [r7, #18]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <tcp_write+0x1a0>
 800b504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b508:	88fb      	ldrh	r3, [r7, #6]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d006      	beq.n	800b51c <tcp_write+0x1a0>
 800b50e:	4b52      	ldr	r3, [pc, #328]	; (800b658 <tcp_write+0x2dc>)
 800b510:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b514:	4956      	ldr	r1, [pc, #344]	; (800b670 <tcp_write+0x2f4>)
 800b516:	4852      	ldr	r0, [pc, #328]	; (800b660 <tcp_write+0x2e4>)
 800b518:	f004 fc92 	bl	800fe40 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b520:	88fb      	ldrh	r3, [r7, #6]
 800b522:	429a      	cmp	r2, r3
 800b524:	f080 8167 	bcs.w	800b7f6 <tcp_write+0x47a>
 800b528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 8163 	beq.w	800b7f6 <tcp_write+0x47a>
 800b530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b532:	891b      	ldrh	r3, [r3, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 815e 	beq.w	800b7f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b53a:	88fa      	ldrh	r2, [r7, #6]
 800b53c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b540:	1ad2      	subs	r2, r2, r3
 800b542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b544:	4293      	cmp	r3, r2
 800b546:	bfa8      	it	ge
 800b548:	4613      	movge	r3, r2
 800b54a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b550:	797b      	ldrb	r3, [r7, #5]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d027      	beq.n	800b5aa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b55a:	f107 0012 	add.w	r0, r7, #18
 800b55e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b560:	8bf9      	ldrh	r1, [r7, #30]
 800b562:	2301      	movs	r3, #1
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	797b      	ldrb	r3, [r7, #5]
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4603      	mov	r3, r0
 800b570:	2000      	movs	r0, #0
 800b572:	f7ff fe0f 	bl	800b194 <tcp_pbuf_prealloc>
 800b576:	6578      	str	r0, [r7, #84]	; 0x54
 800b578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 8225 	beq.w	800b9ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b582:	6858      	ldr	r0, [r3, #4]
 800b584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	4413      	add	r3, r2
 800b58c:	8bfa      	ldrh	r2, [r7, #30]
 800b58e:	4619      	mov	r1, r3
 800b590:	f004 fc40 	bl	800fe14 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b594:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b596:	f7fb f9eb 	bl	8006970 <pbuf_clen>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461a      	mov	r2, r3
 800b59e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b5a8:	e041      	b.n	800b62e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b0:	e002      	b.n	800b5b8 <tcp_write+0x23c>
 800b5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1f8      	bne.n	800b5b2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c2:	7b1b      	ldrb	r3, [r3, #12]
 800b5c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d115      	bne.n	800b5f8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d2:	8952      	ldrh	r2, [r2, #10]
 800b5d4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d10d      	bne.n	800b5f8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b5dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d006      	beq.n	800b5f2 <tcp_write+0x276>
 800b5e4:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <tcp_write+0x2dc>)
 800b5e6:	f240 2231 	movw	r2, #561	; 0x231
 800b5ea:	4922      	ldr	r1, [pc, #136]	; (800b674 <tcp_write+0x2f8>)
 800b5ec:	481c      	ldr	r0, [pc, #112]	; (800b660 <tcp_write+0x2e4>)
 800b5ee:	f004 fc27 	bl	800fe40 <iprintf>
          extendlen = seglen;
 800b5f2:	8bfb      	ldrh	r3, [r7, #30]
 800b5f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b5f6:	e01a      	b.n	800b62e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5f8:	8bfb      	ldrh	r3, [r7, #30]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	2000      	movs	r0, #0
 800b600:	f7fa fe4a 	bl	8006298 <pbuf_alloc>
 800b604:	6578      	str	r0, [r7, #84]	; 0x54
 800b606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 81e0 	beq.w	800b9ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b60e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	441a      	add	r2, r3
 800b616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b618:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b61a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b61c:	f7fb f9a8 	bl	8006970 <pbuf_clen>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b628:	4413      	add	r3, r2
 800b62a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b62e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b632:	8bfb      	ldrh	r3, [r7, #30]
 800b634:	4413      	add	r3, r2
 800b636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b63a:	e0dc      	b.n	800b7f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 80d7 	beq.w	800b7f6 <tcp_write+0x47a>
 800b648:	4b03      	ldr	r3, [pc, #12]	; (800b658 <tcp_write+0x2dc>)
 800b64a:	f240 224a 	movw	r2, #586	; 0x24a
 800b64e:	490a      	ldr	r1, [pc, #40]	; (800b678 <tcp_write+0x2fc>)
 800b650:	4803      	ldr	r0, [pc, #12]	; (800b660 <tcp_write+0x2e4>)
 800b652:	f004 fbf5 	bl	800fe40 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b656:	e0ce      	b.n	800b7f6 <tcp_write+0x47a>
 800b658:	0801262c 	.word	0x0801262c
 800b65c:	080127cc 	.word	0x080127cc
 800b660:	08012680 	.word	0x08012680
 800b664:	080127e4 	.word	0x080127e4
 800b668:	08012818 	.word	0x08012818
 800b66c:	08012830 	.word	0x08012830
 800b670:	08012850 	.word	0x08012850
 800b674:	08012870 	.word	0x08012870
 800b678:	0801289c 	.word	0x0801289c
    struct pbuf *p;
    u16_t left = len - pos;
 800b67c:	88fa      	ldrh	r2, [r7, #6]
 800b67e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b692:	8b7a      	ldrh	r2, [r7, #26]
 800b694:	8bbb      	ldrh	r3, [r7, #28]
 800b696:	4293      	cmp	r3, r2
 800b698:	bf28      	it	cs
 800b69a:	4613      	movcs	r3, r2
 800b69c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b69e:	797b      	ldrb	r3, [r7, #5]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d036      	beq.n	800b716 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b6a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	8b3b      	ldrh	r3, [r7, #24]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	b299      	uxth	r1, r3
 800b6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf0c      	ite	eq
 800b6ba:	2301      	moveq	r3, #1
 800b6bc:	2300      	movne	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f107 0012 	add.w	r0, r7, #18
 800b6c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6c6:	9302      	str	r3, [sp, #8]
 800b6c8:	797b      	ldrb	r3, [r7, #5]
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2036      	movs	r0, #54	; 0x36
 800b6d4:	f7ff fd5e 	bl	800b194 <tcp_pbuf_prealloc>
 800b6d8:	6338      	str	r0, [r7, #48]	; 0x30
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8178 	beq.w	800b9d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	895b      	ldrh	r3, [r3, #10]
 800b6e6:	8b3a      	ldrh	r2, [r7, #24]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d906      	bls.n	800b6fa <tcp_write+0x37e>
 800b6ec:	4b8c      	ldr	r3, [pc, #560]	; (800b920 <tcp_write+0x5a4>)
 800b6ee:	f240 2266 	movw	r2, #614	; 0x266
 800b6f2:	498c      	ldr	r1, [pc, #560]	; (800b924 <tcp_write+0x5a8>)
 800b6f4:	488c      	ldr	r0, [pc, #560]	; (800b928 <tcp_write+0x5ac>)
 800b6f6:	f004 fba3 	bl	800fe40 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b702:	18d0      	adds	r0, r2, r3
 800b704:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	4413      	add	r3, r2
 800b70c:	8b3a      	ldrh	r2, [r7, #24]
 800b70e:	4619      	mov	r1, r3
 800b710:	f004 fb80 	bl	800fe14 <memcpy>
 800b714:	e02f      	b.n	800b776 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b716:	8a7b      	ldrh	r3, [r7, #18]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d006      	beq.n	800b72a <tcp_write+0x3ae>
 800b71c:	4b80      	ldr	r3, [pc, #512]	; (800b920 <tcp_write+0x5a4>)
 800b71e:	f240 2271 	movw	r2, #625	; 0x271
 800b722:	4982      	ldr	r1, [pc, #520]	; (800b92c <tcp_write+0x5b0>)
 800b724:	4880      	ldr	r0, [pc, #512]	; (800b928 <tcp_write+0x5ac>)
 800b726:	f004 fb8b 	bl	800fe40 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b72a:	8b3b      	ldrh	r3, [r7, #24]
 800b72c:	2201      	movs	r2, #1
 800b72e:	4619      	mov	r1, r3
 800b730:	2036      	movs	r0, #54	; 0x36
 800b732:	f7fa fdb1 	bl	8006298 <pbuf_alloc>
 800b736:	6178      	str	r0, [r7, #20]
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 814b 	beq.w	800b9d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	441a      	add	r2, r3
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b74c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b750:	b29b      	uxth	r3, r3
 800b752:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b756:	4619      	mov	r1, r3
 800b758:	2036      	movs	r0, #54	; 0x36
 800b75a:	f7fa fd9d 	bl	8006298 <pbuf_alloc>
 800b75e:	6338      	str	r0, [r7, #48]	; 0x30
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b766:	6978      	ldr	r0, [r7, #20]
 800b768:	f7fb f87a 	bl	8006860 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b76c:	e136      	b.n	800b9dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b76e:	6979      	ldr	r1, [r7, #20]
 800b770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b772:	f7fb f937 	bl	80069e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b778:	f7fb f8fa 	bl	8006970 <pbuf_clen>
 800b77c:	4603      	mov	r3, r0
 800b77e:	461a      	mov	r2, r3
 800b780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b784:	4413      	add	r3, r2
 800b786:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b78a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b78e:	2b09      	cmp	r3, #9
 800b790:	d903      	bls.n	800b79a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b794:	f7fb f864 	bl	8006860 <pbuf_free>
      goto memerr;
 800b798:	e120      	b.n	800b9dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b79e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a2:	441a      	add	r2, r3
 800b7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff fc51 	bl	800b058 <tcp_create_segment>
 800b7b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 810d 	beq.w	800b9da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <tcp_write+0x450>
      queue = seg;
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ca:	e00c      	b.n	800b7e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <tcp_write+0x464>
 800b7d2:	4b53      	ldr	r3, [pc, #332]	; (800b920 <tcp_write+0x5a4>)
 800b7d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b7d8:	4955      	ldr	r1, [pc, #340]	; (800b930 <tcp_write+0x5b4>)
 800b7da:	4853      	ldr	r0, [pc, #332]	; (800b928 <tcp_write+0x5ac>)
 800b7dc:	f004 fb30 	bl	800fe40 <iprintf>
      prev_seg->next = seg;
 800b7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b7ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7ee:	8b3b      	ldrh	r3, [r7, #24]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b7f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	f4ff af3d 	bcc.w	800b67c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b802:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b804:	2b00      	cmp	r3, #0
 800b806:	d02c      	beq.n	800b862 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b80e:	e01e      	b.n	800b84e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	891a      	ldrh	r2, [r3, #8]
 800b814:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b816:	4413      	add	r3, r2
 800b818:	b29a      	uxth	r2, r3
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d110      	bne.n	800b848 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82c:	8952      	ldrh	r2, [r2, #10]
 800b82e:	4413      	add	r3, r2
 800b830:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	4618      	mov	r0, r3
 800b836:	f004 faed 	bl	800fe14 <memcpy>
        p->len += oversize_used;
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	895a      	ldrh	r2, [r3, #10]
 800b83e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b840:	4413      	add	r3, r2
 800b842:	b29a      	uxth	r2, r3
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1dd      	bne.n	800b810 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b856:	891a      	ldrh	r2, [r3, #8]
 800b858:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b85a:	4413      	add	r3, r2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b860:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b862:	8a7a      	ldrh	r2, [r7, #18]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d018      	beq.n	800b8a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <tcp_write+0x508>
 800b876:	4b2a      	ldr	r3, [pc, #168]	; (800b920 <tcp_write+0x5a4>)
 800b878:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b87c:	492d      	ldr	r1, [pc, #180]	; (800b934 <tcp_write+0x5b8>)
 800b87e:	482a      	ldr	r0, [pc, #168]	; (800b928 <tcp_write+0x5ac>)
 800b880:	f004 fade 	bl	800fe40 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fb f8aa 	bl	80069e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b892:	891a      	ldrh	r2, [r3, #8]
 800b894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b896:	891b      	ldrh	r3, [r3, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89e:	811a      	strh	r2, [r3, #8]
 800b8a0:	e037      	b.n	800b912 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b8a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d034      	beq.n	800b912 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <tcp_write+0x53a>
 800b8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <tcp_write+0x548>
 800b8b6:	4b1a      	ldr	r3, [pc, #104]	; (800b920 <tcp_write+0x5a4>)
 800b8b8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b8bc:	491e      	ldr	r1, [pc, #120]	; (800b938 <tcp_write+0x5bc>)
 800b8be:	481a      	ldr	r0, [pc, #104]	; (800b928 <tcp_write+0x5ac>)
 800b8c0:	f004 fabe 	bl	800fe40 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ca:	e009      	b.n	800b8e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	891a      	ldrh	r2, [r3, #8]
 800b8d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8d2:	4413      	add	r3, r2
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f1      	bne.n	800b8cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	891a      	ldrh	r2, [r3, #8]
 800b8ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8ee:	4413      	add	r3, r2
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	895a      	ldrh	r2, [r3, #10]
 800b8fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8fc:	4413      	add	r3, r2
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b906:	891a      	ldrh	r2, [r3, #8]
 800b908:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b90a:	4413      	add	r3, r2
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b910:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b914:	2b00      	cmp	r3, #0
 800b916:	d111      	bne.n	800b93c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b91c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b91e:	e010      	b.n	800b942 <tcp_write+0x5c6>
 800b920:	0801262c 	.word	0x0801262c
 800b924:	080128cc 	.word	0x080128cc
 800b928:	08012680 	.word	0x08012680
 800b92c:	0801290c 	.word	0x0801290c
 800b930:	0801291c 	.word	0x0801291c
 800b934:	08012930 	.word	0x08012930
 800b938:	08012968 	.word	0x08012968
  } else {
    last_unsent->next = queue;
 800b93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b940:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b946:	88fb      	ldrh	r3, [r7, #6]
 800b948:	441a      	add	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b954:	88fb      	ldrh	r3, [r7, #6]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	b29a      	uxth	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b966:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00e      	beq.n	800b992 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <tcp_write+0x616>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <tcp_write+0x616>
 800b984:	4b2c      	ldr	r3, [pc, #176]	; (800ba38 <tcp_write+0x6bc>)
 800b986:	f240 3212 	movw	r2, #786	; 0x312
 800b98a:	492c      	ldr	r1, [pc, #176]	; (800ba3c <tcp_write+0x6c0>)
 800b98c:	482c      	ldr	r0, [pc, #176]	; (800ba40 <tcp_write+0x6c4>)
 800b98e:	f004 fa57 	bl	800fe40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d016      	beq.n	800b9c6 <tcp_write+0x64a>
 800b998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d012      	beq.n	800b9c6 <tcp_write+0x64a>
 800b9a0:	797b      	ldrb	r3, [r7, #5]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10d      	bne.n	800b9c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	899b      	ldrh	r3, [r3, #12]
 800b9b0:	b29c      	uxth	r4, r3
 800b9b2:	2008      	movs	r0, #8
 800b9b4:	f7f9 fca0 	bl	80052f8 <lwip_htons>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4322      	orrs	r2, r4
 800b9c2:	b292      	uxth	r2, r2
 800b9c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e031      	b.n	800ba2e <tcp_write+0x6b2>
          goto memerr;
 800b9ca:	bf00      	nop
 800b9cc:	e006      	b.n	800b9dc <tcp_write+0x660>
            goto memerr;
 800b9ce:	bf00      	nop
 800b9d0:	e004      	b.n	800b9dc <tcp_write+0x660>
        goto memerr;
 800b9d2:	bf00      	nop
 800b9d4:	e002      	b.n	800b9dc <tcp_write+0x660>
        goto memerr;
 800b9d6:	bf00      	nop
 800b9d8:	e000      	b.n	800b9dc <tcp_write+0x660>
      goto memerr;
 800b9da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8b5b      	ldrh	r3, [r3, #26]
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b9f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9f2:	f7fa ff35 	bl	8006860 <pbuf_free>
  }
  if (queue != NULL) {
 800b9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b9fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b9fe:	f7fc fb57 	bl	80080b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00e      	beq.n	800ba2a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <tcp_write+0x6ae>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <tcp_write+0x6ae>
 800ba1c:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <tcp_write+0x6bc>)
 800ba1e:	f240 3227 	movw	r2, #807	; 0x327
 800ba22:	4906      	ldr	r1, [pc, #24]	; (800ba3c <tcp_write+0x6c0>)
 800ba24:	4806      	ldr	r0, [pc, #24]	; (800ba40 <tcp_write+0x6c4>)
 800ba26:	f004 fa0b 	bl	800fe40 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ba2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	375c      	adds	r7, #92	; 0x5c
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	0801262c 	.word	0x0801262c
 800ba3c:	080129a0 	.word	0x080129a0
 800ba40:	08012680 	.word	0x08012680

0800ba44 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ba44:	b590      	push	{r4, r7, lr}
 800ba46:	b08b      	sub	sp, #44	; 0x2c
 800ba48:	af02      	add	r7, sp, #8
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <tcp_split_unsent_seg+0x2c>
 800ba62:	4b95      	ldr	r3, [pc, #596]	; (800bcb8 <tcp_split_unsent_seg+0x274>)
 800ba64:	f240 324b 	movw	r2, #843	; 0x34b
 800ba68:	4994      	ldr	r1, [pc, #592]	; (800bcbc <tcp_split_unsent_seg+0x278>)
 800ba6a:	4895      	ldr	r0, [pc, #596]	; (800bcc0 <tcp_split_unsent_seg+0x27c>)
 800ba6c:	f004 f9e8 	bl	800fe40 <iprintf>

  useg = pcb->unsent;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba74:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	e116      	b.n	800bcb0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ba82:	887b      	ldrh	r3, [r7, #2]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ba88:	4b8b      	ldr	r3, [pc, #556]	; (800bcb8 <tcp_split_unsent_seg+0x274>)
 800ba8a:	f240 3253 	movw	r2, #851	; 0x353
 800ba8e:	498d      	ldr	r1, [pc, #564]	; (800bcc4 <tcp_split_unsent_seg+0x280>)
 800ba90:	488b      	ldr	r0, [pc, #556]	; (800bcc0 <tcp_split_unsent_seg+0x27c>)
 800ba92:	f004 f9d5 	bl	800fe40 <iprintf>
    return ERR_VAL;
 800ba96:	f06f 0305 	mvn.w	r3, #5
 800ba9a:	e109      	b.n	800bcb0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	891b      	ldrh	r3, [r3, #8]
 800baa0:	887a      	ldrh	r2, [r7, #2]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d301      	bcc.n	800baaa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	e102      	b.n	800bcb0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baae:	887a      	ldrh	r2, [r7, #2]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d906      	bls.n	800bac2 <tcp_split_unsent_seg+0x7e>
 800bab4:	4b80      	ldr	r3, [pc, #512]	; (800bcb8 <tcp_split_unsent_seg+0x274>)
 800bab6:	f240 325b 	movw	r2, #859	; 0x35b
 800baba:	4983      	ldr	r1, [pc, #524]	; (800bcc8 <tcp_split_unsent_seg+0x284>)
 800babc:	4880      	ldr	r0, [pc, #512]	; (800bcc0 <tcp_split_unsent_seg+0x27c>)
 800babe:	f004 f9bf 	bl	800fe40 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	891b      	ldrh	r3, [r3, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <tcp_split_unsent_seg+0x94>
 800baca:	4b7b      	ldr	r3, [pc, #492]	; (800bcb8 <tcp_split_unsent_seg+0x274>)
 800bacc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bad0:	497e      	ldr	r1, [pc, #504]	; (800bccc <tcp_split_unsent_seg+0x288>)
 800bad2:	487b      	ldr	r0, [pc, #492]	; (800bcc0 <tcp_split_unsent_seg+0x27c>)
 800bad4:	f004 f9b4 	bl	800fe40 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	7a9b      	ldrb	r3, [r3, #10]
 800badc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	891a      	ldrh	r2, [r3, #8]
 800baee:	887b      	ldrh	r3, [r7, #2]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	89bb      	ldrh	r3, [r7, #12]
 800bafa:	4413      	add	r3, r2
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb02:	4619      	mov	r1, r3
 800bb04:	2036      	movs	r0, #54	; 0x36
 800bb06:	f7fa fbc7 	bl	8006298 <pbuf_alloc>
 800bb0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f000 80b7 	beq.w	800bc82 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	891a      	ldrh	r2, [r3, #8]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	891b      	ldrh	r3, [r3, #8]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	887b      	ldrh	r3, [r7, #2]
 800bb24:	4413      	add	r3, r2
 800bb26:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	6858      	ldr	r0, [r3, #4]
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	7bbb      	ldrb	r3, [r7, #14]
 800bb32:	18d1      	adds	r1, r2, r3
 800bb34:	897b      	ldrh	r3, [r7, #10]
 800bb36:	89ba      	ldrh	r2, [r7, #12]
 800bb38:	f7fb f88c 	bl	8006c54 <pbuf_copy_partial>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	89bb      	ldrh	r3, [r7, #12]
 800bb42:	4293      	cmp	r3, r2
 800bb44:	f040 809f 	bne.w	800bc86 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	899b      	ldrh	r3, [r3, #12]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f9 fbd1 	bl	80052f8 <lwip_htons>
 800bb56:	4603      	mov	r3, r0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb5e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bb60:	2300      	movs	r3, #0
 800bb62:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bb64:	7efb      	ldrb	r3, [r7, #27]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bb6e:	7efb      	ldrb	r3, [r7, #27]
 800bb70:	f023 0308 	bic.w	r3, r3, #8
 800bb74:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bb76:	7ebb      	ldrb	r3, [r7, #26]
 800bb78:	f043 0308 	orr.w	r3, r3, #8
 800bb7c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bb7e:	7efb      	ldrb	r3, [r7, #27]
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bb88:	7efb      	ldrb	r3, [r7, #27]
 800bb8a:	f023 0301 	bic.w	r3, r3, #1
 800bb8e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bb90:	7ebb      	ldrb	r3, [r7, #26]
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f9 fbbf 	bl	8005322 <lwip_htonl>
 800bba4:	4602      	mov	r2, r0
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	18d1      	adds	r1, r2, r3
 800bbaa:	7eba      	ldrb	r2, [r7, #26]
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff fa4f 	bl	800b058 <tcp_create_segment>
 800bbba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d063      	beq.n	800bc8a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fa fed2 	bl	8006970 <pbuf_clen>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	461a      	mov	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbd6:	1a9b      	subs	r3, r3, r2
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	6858      	ldr	r0, [r3, #4]
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	891a      	ldrh	r2, [r3, #8]
 800bbea:	89bb      	ldrh	r3, [r7, #12]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f7fa fcaf 	bl	8006554 <pbuf_realloc>
  useg->len -= remainder;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	891a      	ldrh	r2, [r3, #8]
 800bbfa:	89bb      	ldrh	r3, [r7, #12]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	899b      	ldrh	r3, [r3, #12]
 800bc0a:	b29c      	uxth	r4, r3
 800bc0c:	7efb      	ldrb	r3, [r7, #27]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f9 fb71 	bl	80052f8 <lwip_htons>
 800bc16:	4603      	mov	r3, r0
 800bc18:	461a      	mov	r2, r3
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	4322      	orrs	r2, r4
 800bc20:	b292      	uxth	r2, r2
 800bc22:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fa fea1 	bl	8006970 <pbuf_clen>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	461a      	mov	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc38:	4413      	add	r3, r2
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fa fe92 	bl	8006970 <pbuf_clen>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc56:	4413      	add	r3, r2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	69fa      	ldr	r2, [r7, #28]
 800bc6c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d103      	bne.n	800bc7e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e016      	b.n	800bcb0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bc82:	bf00      	nop
 800bc84:	e002      	b.n	800bc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc86:	bf00      	nop
 800bc88:	e000      	b.n	800bc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc8a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <tcp_split_unsent_seg+0x25c>
 800bc92:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <tcp_split_unsent_seg+0x274>)
 800bc94:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bc98:	490d      	ldr	r1, [pc, #52]	; (800bcd0 <tcp_split_unsent_seg+0x28c>)
 800bc9a:	4809      	ldr	r0, [pc, #36]	; (800bcc0 <tcp_split_unsent_seg+0x27c>)
 800bc9c:	f004 f8d0 	bl	800fe40 <iprintf>
  if (p != NULL) {
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bca6:	6938      	ldr	r0, [r7, #16]
 800bca8:	f7fa fdda 	bl	8006860 <pbuf_free>
  }

  return ERR_MEM;
 800bcac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3724      	adds	r7, #36	; 0x24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd90      	pop	{r4, r7, pc}
 800bcb8:	0801262c 	.word	0x0801262c
 800bcbc:	080129c0 	.word	0x080129c0
 800bcc0:	08012680 	.word	0x08012680
 800bcc4:	080129e4 	.word	0x080129e4
 800bcc8:	08012a08 	.word	0x08012a08
 800bccc:	08012a18 	.word	0x08012a18
 800bcd0:	08012a28 	.word	0x08012a28

0800bcd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <tcp_send_fin+0x1c>
 800bce2:	4b21      	ldr	r3, [pc, #132]	; (800bd68 <tcp_send_fin+0x94>)
 800bce4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bce8:	4920      	ldr	r1, [pc, #128]	; (800bd6c <tcp_send_fin+0x98>)
 800bcea:	4821      	ldr	r0, [pc, #132]	; (800bd70 <tcp_send_fin+0x9c>)
 800bcec:	f004 f8a8 	bl	800fe40 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02e      	beq.n	800bd56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e002      	b.n	800bd06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f8      	bne.n	800bd00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	899b      	ldrh	r3, [r3, #12]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f9 faee 	bl	80052f8 <lwip_htons>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d116      	bne.n	800bd56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	899b      	ldrh	r3, [r3, #12]
 800bd2e:	b29c      	uxth	r4, r3
 800bd30:	2001      	movs	r0, #1
 800bd32:	f7f9 fae1 	bl	80052f8 <lwip_htons>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	4322      	orrs	r2, r4
 800bd40:	b292      	uxth	r2, r2
 800bd42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8b5b      	ldrh	r3, [r3, #26]
 800bd48:	f043 0320 	orr.w	r3, r3, #32
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	e004      	b.n	800bd60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bd56:	2101      	movs	r1, #1
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f80b 	bl	800bd74 <tcp_enqueue_flags>
 800bd5e:	4603      	mov	r3, r0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd90      	pop	{r4, r7, pc}
 800bd68:	0801262c 	.word	0x0801262c
 800bd6c:	08012a34 	.word	0x08012a34
 800bd70:	08012680 	.word	0x08012680

0800bd74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd88:	78fb      	ldrb	r3, [r7, #3]
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <tcp_enqueue_flags+0x2c>
 800bd92:	4b67      	ldr	r3, [pc, #412]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800bd94:	f240 4211 	movw	r2, #1041	; 0x411
 800bd98:	4966      	ldr	r1, [pc, #408]	; (800bf34 <tcp_enqueue_flags+0x1c0>)
 800bd9a:	4867      	ldr	r0, [pc, #412]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800bd9c:	f004 f850 	bl	800fe40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d106      	bne.n	800bdb4 <tcp_enqueue_flags+0x40>
 800bda6:	4b62      	ldr	r3, [pc, #392]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800bda8:	f240 4213 	movw	r2, #1043	; 0x413
 800bdac:	4963      	ldr	r1, [pc, #396]	; (800bf3c <tcp_enqueue_flags+0x1c8>)
 800bdae:	4862      	ldr	r0, [pc, #392]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800bdb0:	f004 f846 	bl	800fe40 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bdc2:	7ffb      	ldrb	r3, [r7, #31]
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	2036      	movs	r0, #54	; 0x36
 800bdda:	f7fa fa5d 	bl	8006298 <pbuf_alloc>
 800bdde:	6138      	str	r0, [r7, #16]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d109      	bne.n	800bdfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8b5b      	ldrh	r3, [r3, #26]
 800bdea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	e095      	b.n	800bf26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	895a      	ldrh	r2, [r3, #10]
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	b29b      	uxth	r3, r3
 800be02:	429a      	cmp	r2, r3
 800be04:	d206      	bcs.n	800be14 <tcp_enqueue_flags+0xa0>
 800be06:	4b4a      	ldr	r3, [pc, #296]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800be08:	f240 4239 	movw	r2, #1081	; 0x439
 800be0c:	494c      	ldr	r1, [pc, #304]	; (800bf40 <tcp_enqueue_flags+0x1cc>)
 800be0e:	484a      	ldr	r0, [pc, #296]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800be10:	f004 f816 	bl	800fe40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	7ffb      	ldrb	r3, [r7, #31]
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	460b      	mov	r3, r1
 800be20:	6939      	ldr	r1, [r7, #16]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff f918 	bl	800b058 <tcp_create_segment>
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d109      	bne.n	800be44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8b5b      	ldrh	r3, [r3, #26]
 800be34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be38:	b29a      	uxth	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800be3e:	f04f 33ff 	mov.w	r3, #4294967295
 800be42:	e070      	b.n	800bf26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	f003 0303 	and.w	r3, r3, #3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d006      	beq.n	800be5e <tcp_enqueue_flags+0xea>
 800be50:	4b37      	ldr	r3, [pc, #220]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800be52:	f240 4242 	movw	r2, #1090	; 0x442
 800be56:	493b      	ldr	r1, [pc, #236]	; (800bf44 <tcp_enqueue_flags+0x1d0>)
 800be58:	4837      	ldr	r0, [pc, #220]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800be5a:	f003 fff1 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	891b      	ldrh	r3, [r3, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d006      	beq.n	800be74 <tcp_enqueue_flags+0x100>
 800be66:	4b32      	ldr	r3, [pc, #200]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800be68:	f240 4243 	movw	r2, #1091	; 0x443
 800be6c:	4936      	ldr	r1, [pc, #216]	; (800bf48 <tcp_enqueue_flags+0x1d4>)
 800be6e:	4832      	ldr	r0, [pc, #200]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800be70:	f003 ffe6 	bl	800fe40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d103      	bne.n	800be84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	66da      	str	r2, [r3, #108]	; 0x6c
 800be82:	e00d      	b.n	800bea0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be88:	61bb      	str	r3, [r7, #24]
 800be8a:	e002      	b.n	800be92 <tcp_enqueue_flags+0x11e>
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	61bb      	str	r3, [r7, #24]
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1f8      	bne.n	800be8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d104      	bne.n	800bebc <tcp_enqueue_flags+0x148>
 800beb2:	78fb      	ldrb	r3, [r7, #3]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bec6:	78fb      	ldrb	r3, [r7, #3]
 800bec8:	f003 0301 	and.w	r3, r3, #1
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	8b5b      	ldrh	r3, [r3, #26]
 800bed4:	f043 0320 	orr.w	r3, r3, #32
 800bed8:	b29a      	uxth	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fa fd44 	bl	8006970 <pbuf_clen>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bef2:	4413      	add	r3, r2
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00e      	beq.n	800bf24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <tcp_enqueue_flags+0x1b0>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <tcp_enqueue_flags+0x1b0>
 800bf16:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <tcp_enqueue_flags+0x1bc>)
 800bf18:	f240 4265 	movw	r2, #1125	; 0x465
 800bf1c:	490b      	ldr	r1, [pc, #44]	; (800bf4c <tcp_enqueue_flags+0x1d8>)
 800bf1e:	4806      	ldr	r0, [pc, #24]	; (800bf38 <tcp_enqueue_flags+0x1c4>)
 800bf20:	f003 ff8e 	bl	800fe40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3720      	adds	r7, #32
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	0801262c 	.word	0x0801262c
 800bf34:	08012a50 	.word	0x08012a50
 800bf38:	08012680 	.word	0x08012680
 800bf3c:	08012aa8 	.word	0x08012aa8
 800bf40:	08012ac8 	.word	0x08012ac8
 800bf44:	08012b04 	.word	0x08012b04
 800bf48:	08012b1c 	.word	0x08012b1c
 800bf4c:	08012b48 	.word	0x08012b48

0800bf50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bf50:	b5b0      	push	{r4, r5, r7, lr}
 800bf52:	b08a      	sub	sp, #40	; 0x28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <tcp_output+0x1c>
 800bf5e:	4b9e      	ldr	r3, [pc, #632]	; (800c1d8 <tcp_output+0x288>)
 800bf60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf64:	499d      	ldr	r1, [pc, #628]	; (800c1dc <tcp_output+0x28c>)
 800bf66:	489e      	ldr	r0, [pc, #632]	; (800c1e0 <tcp_output+0x290>)
 800bf68:	f003 ff6a 	bl	800fe40 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7d1b      	ldrb	r3, [r3, #20]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d106      	bne.n	800bf82 <tcp_output+0x32>
 800bf74:	4b98      	ldr	r3, [pc, #608]	; (800c1d8 <tcp_output+0x288>)
 800bf76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bf7a:	499a      	ldr	r1, [pc, #616]	; (800c1e4 <tcp_output+0x294>)
 800bf7c:	4898      	ldr	r0, [pc, #608]	; (800c1e0 <tcp_output+0x290>)
 800bf7e:	f003 ff5f 	bl	800fe40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bf82:	4b99      	ldr	r3, [pc, #612]	; (800c1e8 <tcp_output+0x298>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d101      	bne.n	800bf90 <tcp_output+0x40>
    return ERR_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e1ce      	b.n	800c32e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	bf28      	it	cs
 800bfa0:	4613      	movcs	r3, r2
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10b      	bne.n	800bfca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	8b5b      	ldrh	r3, [r3, #26]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 81aa 	beq.w	800c314 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fdcb 	bl	800cb5c <tcp_send_empty_ack>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	e1b1      	b.n	800c32e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff f824 	bl	800b020 <tcp_route>
 800bfd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <tcp_output+0x96>
    return ERR_RTE;
 800bfe0:	f06f 0303 	mvn.w	r3, #3
 800bfe4:	e1a3      	b.n	800c32e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <tcp_output+0xa4>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d111      	bne.n	800c018 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <tcp_output+0xb0>
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	3304      	adds	r3, #4
 800bffe:	e000      	b.n	800c002 <tcp_output+0xb2>
 800c000:	2300      	movs	r3, #0
 800c002:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <tcp_output+0xc0>
      return ERR_RTE;
 800c00a:	f06f 0303 	mvn.w	r3, #3
 800c00e:	e18e      	b.n	800c32e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f9 f97f 	bl	8005322 <lwip_htonl>
 800c024:	4602      	mov	r2, r0
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02e:	8912      	ldrh	r2, [r2, #8]
 800c030:	4413      	add	r3, r2
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	429a      	cmp	r2, r3
 800c036:	d227      	bcs.n	800c088 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c03e:	461a      	mov	r2, r3
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	4293      	cmp	r3, r2
 800c044:	d114      	bne.n	800c070 <tcp_output+0x120>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d110      	bne.n	800c070 <tcp_output+0x120>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	8b5b      	ldrh	r3, [r3, #26]
 800c074:	f003 0302 	and.w	r3, r3, #2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 814d 	beq.w	800c318 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fd6c 	bl	800cb5c <tcp_send_empty_ack>
 800c084:	4603      	mov	r3, r0
 800c086:	e152      	b.n	800c32e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c094:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 811c 	beq.w	800c2d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c09e:	e002      	b.n	800c0a6 <tcp_output+0x156>
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	623b      	str	r3, [r7, #32]
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1f8      	bne.n	800c0a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c0ae:	e112      	b.n	800c2d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	899b      	ldrh	r3, [r3, #12]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7f9 f91d 	bl	80052f8 <lwip_htons>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0304 	and.w	r3, r3, #4
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d006      	beq.n	800c0d8 <tcp_output+0x188>
 800c0ca:	4b43      	ldr	r3, [pc, #268]	; (800c1d8 <tcp_output+0x288>)
 800c0cc:	f240 5236 	movw	r2, #1334	; 0x536
 800c0d0:	4946      	ldr	r1, [pc, #280]	; (800c1ec <tcp_output+0x29c>)
 800c0d2:	4843      	ldr	r0, [pc, #268]	; (800c1e0 <tcp_output+0x290>)
 800c0d4:	f003 feb4 	bl	800fe40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01f      	beq.n	800c120 <tcp_output+0x1d0>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8b5b      	ldrh	r3, [r3, #26]
 800c0e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d119      	bne.n	800c120 <tcp_output+0x1d0>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00b      	beq.n	800c10c <tcp_output+0x1bc>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d110      	bne.n	800c120 <tcp_output+0x1d0>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c102:	891a      	ldrh	r2, [r3, #8]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c108:	429a      	cmp	r2, r3
 800c10a:	d209      	bcs.n	800c120 <tcp_output+0x1d0>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c112:	2b00      	cmp	r3, #0
 800c114:	d004      	beq.n	800c120 <tcp_output+0x1d0>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c11c:	2b08      	cmp	r3, #8
 800c11e:	d901      	bls.n	800c124 <tcp_output+0x1d4>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <tcp_output+0x1d6>
 800c124:	2300      	movs	r3, #0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	8b5b      	ldrh	r3, [r3, #26]
 800c12e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 80e4 	beq.w	800c300 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7d1b      	ldrb	r3, [r3, #20]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d00d      	beq.n	800c15c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	b29c      	uxth	r4, r3
 800c148:	2010      	movs	r0, #16
 800c14a:	f7f9 f8d5 	bl	80052f8 <lwip_htons>
 800c14e:	4603      	mov	r3, r0
 800c150:	461a      	mov	r2, r3
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	4322      	orrs	r2, r4
 800c158:	b292      	uxth	r2, r2
 800c15a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c162:	f000 f909 	bl	800c378 <tcp_output_segment>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	8b5b      	ldrh	r3, [r3, #26]
 800c176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	835a      	strh	r2, [r3, #26]
      return err;
 800c180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c184:	e0d3      	b.n	800c32e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7d1b      	ldrb	r3, [r3, #20]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d006      	beq.n	800c1a4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8b5b      	ldrh	r3, [r3, #26]
 800c19a:	f023 0303 	bic.w	r3, r3, #3
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7f9 f8b9 	bl	8005322 <lwip_htonl>
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	891b      	ldrh	r3, [r3, #8]
 800c1b6:	461d      	mov	r5, r3
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	899b      	ldrh	r3, [r3, #12]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7f9 f899 	bl	80052f8 <lwip_htons>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	f003 0303 	and.w	r3, r3, #3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <tcp_output+0x2a0>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e00d      	b.n	800c1f2 <tcp_output+0x2a2>
 800c1d6:	bf00      	nop
 800c1d8:	0801262c 	.word	0x0801262c
 800c1dc:	08012b70 	.word	0x08012b70
 800c1e0:	08012680 	.word	0x08012680
 800c1e4:	08012b88 	.word	0x08012b88
 800c1e8:	20006928 	.word	0x20006928
 800c1ec:	08012bb0 	.word	0x08012bb0
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	442b      	add	r3, r5
 800c1f4:	4423      	add	r3, r4
 800c1f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	da02      	bge.n	800c20a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	891b      	ldrh	r3, [r3, #8]
 800c20e:	461c      	mov	r4, r3
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	b29b      	uxth	r3, r3
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f9 f86d 	bl	80052f8 <lwip_htons>
 800c21e:	4603      	mov	r3, r0
 800c220:	b2db      	uxtb	r3, r3
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <tcp_output+0x2de>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e000      	b.n	800c230 <tcp_output+0x2e0>
 800c22e:	2300      	movs	r3, #0
 800c230:	4423      	add	r3, r4
 800c232:	2b00      	cmp	r3, #0
 800c234:	d049      	beq.n	800c2ca <tcp_output+0x37a>
      seg->next = NULL;
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c240:	2b00      	cmp	r3, #0
 800c242:	d105      	bne.n	800c250 <tcp_output+0x300>
        pcb->unacked = seg;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c248:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	623b      	str	r3, [r7, #32]
 800c24e:	e03f      	b.n	800c2d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	4618      	mov	r0, r3
 800c258:	f7f9 f863 	bl	8005322 <lwip_htonl>
 800c25c:	4604      	mov	r4, r0
 800c25e:	6a3b      	ldr	r3, [r7, #32]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	4618      	mov	r0, r3
 800c266:	f7f9 f85c 	bl	8005322 <lwip_htonl>
 800c26a:	4603      	mov	r3, r0
 800c26c:	1ae3      	subs	r3, r4, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da24      	bge.n	800c2bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3370      	adds	r3, #112	; 0x70
 800c276:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c278:	e002      	b.n	800c280 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d011      	beq.n	800c2ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	4618      	mov	r0, r3
 800c292:	f7f9 f846 	bl	8005322 <lwip_htonl>
 800c296:	4604      	mov	r4, r0
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f9 f83f 	bl	8005322 <lwip_htonl>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dbe6      	blt.n	800c27a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	e009      	b.n	800c2d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	623b      	str	r3, [r7, #32]
 800c2c8:	e002      	b.n	800c2d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c2ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2cc:	f7fb ff05 	bl	80080da <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d012      	beq.n	800c302 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f9 f81d 	bl	8005322 <lwip_htonl>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	8912      	ldrh	r2, [r2, #8]
 800c2f4:	4413      	add	r3, r2
  while (seg != NULL &&
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	f4bf aed9 	bcs.w	800c0b0 <tcp_output+0x160>
 800c2fe:	e000      	b.n	800c302 <tcp_output+0x3b2>
      break;
 800c300:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d108      	bne.n	800c31c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c312:	e004      	b.n	800c31e <tcp_output+0x3ce>
    goto output_done;
 800c314:	bf00      	nop
 800c316:	e002      	b.n	800c31e <tcp_output+0x3ce>
    goto output_done;
 800c318:	bf00      	nop
 800c31a:	e000      	b.n	800c31e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c31c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8b5b      	ldrh	r3, [r3, #26]
 800c322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c326:	b29a      	uxth	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3728      	adds	r7, #40	; 0x28
 800c332:	46bd      	mov	sp, r7
 800c334:	bdb0      	pop	{r4, r5, r7, pc}
 800c336:	bf00      	nop

0800c338 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <tcp_output_segment_busy+0x1c>
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <tcp_output_segment_busy+0x34>)
 800c348:	f240 529a 	movw	r2, #1434	; 0x59a
 800c34c:	4908      	ldr	r1, [pc, #32]	; (800c370 <tcp_output_segment_busy+0x38>)
 800c34e:	4809      	ldr	r0, [pc, #36]	; (800c374 <tcp_output_segment_busy+0x3c>)
 800c350:	f003 fd76 	bl	800fe40 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	7b9b      	ldrb	r3, [r3, #14]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d001      	beq.n	800c362 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c35e:	2301      	movs	r3, #1
 800c360:	e000      	b.n	800c364 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	0801262c 	.word	0x0801262c
 800c370:	08012bc8 	.word	0x08012bc8
 800c374:	08012680 	.word	0x08012680

0800c378 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c378:	b5b0      	push	{r4, r5, r7, lr}
 800c37a:	b08c      	sub	sp, #48	; 0x30
 800c37c:	af04      	add	r7, sp, #16
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <tcp_output_segment+0x20>
 800c38a:	4b63      	ldr	r3, [pc, #396]	; (800c518 <tcp_output_segment+0x1a0>)
 800c38c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c390:	4962      	ldr	r1, [pc, #392]	; (800c51c <tcp_output_segment+0x1a4>)
 800c392:	4863      	ldr	r0, [pc, #396]	; (800c520 <tcp_output_segment+0x1a8>)
 800c394:	f003 fd54 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <tcp_output_segment+0x34>
 800c39e:	4b5e      	ldr	r3, [pc, #376]	; (800c518 <tcp_output_segment+0x1a0>)
 800c3a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c3a4:	495f      	ldr	r1, [pc, #380]	; (800c524 <tcp_output_segment+0x1ac>)
 800c3a6:	485e      	ldr	r0, [pc, #376]	; (800c520 <tcp_output_segment+0x1a8>)
 800c3a8:	f003 fd4a 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <tcp_output_segment+0x48>
 800c3b2:	4b59      	ldr	r3, [pc, #356]	; (800c518 <tcp_output_segment+0x1a0>)
 800c3b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c3b8:	495b      	ldr	r1, [pc, #364]	; (800c528 <tcp_output_segment+0x1b0>)
 800c3ba:	4859      	ldr	r0, [pc, #356]	; (800c520 <tcp_output_segment+0x1a8>)
 800c3bc:	f003 fd40 	bl	800fe40 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff ffb9 	bl	800c338 <tcp_output_segment_busy>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	e09f      	b.n	800c510 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	68dc      	ldr	r4, [r3, #12]
 800c3d8:	4610      	mov	r0, r2
 800c3da:	f7f8 ffa2 	bl	8005322 <lwip_htonl>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	68dc      	ldr	r4, [r3, #12]
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f7f8 ff84 	bl	80052f8 <lwip_htons>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c3fc:	441a      	add	r2, r3
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	3314      	adds	r3, #20
 800c408:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	7a9b      	ldrb	r3, [r3, #10]
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d015      	beq.n	800c442 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	3304      	adds	r3, #4
 800c41a:	461a      	mov	r2, r3
 800c41c:	6879      	ldr	r1, [r7, #4]
 800c41e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c422:	f7fc fa37 	bl	8008894 <tcp_eff_send_mss_netif>
 800c426:	4603      	mov	r3, r0
 800c428:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c42a:	8b7b      	ldrh	r3, [r7, #26]
 800c42c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c430:	4618      	mov	r0, r3
 800c432:	f7f8 ff76 	bl	8005322 <lwip_htonl>
 800c436:	4602      	mov	r2, r0
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	3304      	adds	r3, #4
 800c440:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c448:	2b00      	cmp	r3, #0
 800c44a:	da02      	bge.n	800c452 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10c      	bne.n	800c474 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c45a:	4b34      	ldr	r3, [pc, #208]	; (800c52c <tcp_output_segment+0x1b4>)
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	f7f8 ff5a 	bl	8005322 <lwip_htonl>
 800c46e:	4602      	mov	r2, r0
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	8959      	ldrh	r1, [r3, #10]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	8b3a      	ldrh	r2, [r7, #24]
 800c48e:	1a8a      	subs	r2, r1, r2
 800c490:	b292      	uxth	r2, r2
 800c492:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	8919      	ldrh	r1, [r3, #8]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	8b3a      	ldrh	r2, [r7, #24]
 800c4a0:	1a8a      	subs	r2, r1, r2
 800c4a2:	b292      	uxth	r2, r2
 800c4a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	68d2      	ldr	r2, [r2, #12]
 800c4ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	741a      	strb	r2, [r3, #16]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f103 0214 	add.w	r2, r3, #20
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	7a9b      	ldrb	r3, [r3, #10]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	f003 0304 	and.w	r3, r3, #4
 800c4ce:	4413      	add	r3, r2
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d006      	beq.n	800c4e4 <tcp_output_segment+0x16c>
 800c4d6:	4b10      	ldr	r3, [pc, #64]	; (800c518 <tcp_output_segment+0x1a0>)
 800c4d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800c4dc:	4914      	ldr	r1, [pc, #80]	; (800c530 <tcp_output_segment+0x1b8>)
 800c4de:	4810      	ldr	r0, [pc, #64]	; (800c520 <tcp_output_segment+0x1a8>)
 800c4e0:	f003 fcae 	bl	800fe40 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6858      	ldr	r0, [r3, #4]
 800c4e8:	68b9      	ldr	r1, [r7, #8]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	1d1c      	adds	r4, r3, #4
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	7add      	ldrb	r5, [r3, #11]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	7a9b      	ldrb	r3, [r3, #10]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	9202      	str	r2, [sp, #8]
 800c4fa:	2206      	movs	r2, #6
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	462b      	mov	r3, r5
 800c502:	4622      	mov	r2, r4
 800c504:	f002 fa36 	bl	800e974 <ip4_output_if>
 800c508:	4603      	mov	r3, r0
 800c50a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3720      	adds	r7, #32
 800c514:	46bd      	mov	sp, r7
 800c516:	bdb0      	pop	{r4, r5, r7, pc}
 800c518:	0801262c 	.word	0x0801262c
 800c51c:	08012bf0 	.word	0x08012bf0
 800c520:	08012680 	.word	0x08012680
 800c524:	08012c10 	.word	0x08012c10
 800c528:	08012c30 	.word	0x08012c30
 800c52c:	20006918 	.word	0x20006918
 800c530:	08012c54 	.word	0x08012c54

0800c534 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c534:	b5b0      	push	{r4, r5, r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <tcp_rexmit_rto_prepare+0x1c>
 800c542:	4b31      	ldr	r3, [pc, #196]	; (800c608 <tcp_rexmit_rto_prepare+0xd4>)
 800c544:	f240 6263 	movw	r2, #1635	; 0x663
 800c548:	4930      	ldr	r1, [pc, #192]	; (800c60c <tcp_rexmit_rto_prepare+0xd8>)
 800c54a:	4831      	ldr	r0, [pc, #196]	; (800c610 <tcp_rexmit_rto_prepare+0xdc>)
 800c54c:	f003 fc78 	bl	800fe40 <iprintf>

  if (pcb->unacked == NULL) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c558:	f06f 0305 	mvn.w	r3, #5
 800c55c:	e050      	b.n	800c600 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e00b      	b.n	800c57e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fee6 	bl	800c338 <tcp_output_segment_busy>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c572:	f06f 0305 	mvn.w	r3, #5
 800c576:	e043      	b.n	800c600 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1ef      	bne.n	800c566 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fed6 	bl	800c338 <tcp_output_segment_busy>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c592:	f06f 0305 	mvn.w	r3, #5
 800c596:	e033      	b.n	800c600 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	8b5b      	ldrh	r3, [r3, #26]
 800c5b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f8 fead 	bl	8005322 <lwip_htonl>
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	891b      	ldrh	r3, [r3, #8]
 800c5ce:	461d      	mov	r5, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	899b      	ldrh	r3, [r3, #12]
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f8 fe8d 	bl	80052f8 <lwip_htons>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <tcp_rexmit_rto_prepare+0xba>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <tcp_rexmit_rto_prepare+0xbc>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	442b      	add	r3, r5
 800c5f2:	18e2      	adds	r2, r4, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bdb0      	pop	{r4, r5, r7, pc}
 800c608:	0801262c 	.word	0x0801262c
 800c60c:	08012c68 	.word	0x08012c68
 800c610:	08012680 	.word	0x08012680

0800c614 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <tcp_rexmit_rto_commit+0x1c>
 800c622:	4b0d      	ldr	r3, [pc, #52]	; (800c658 <tcp_rexmit_rto_commit+0x44>)
 800c624:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c628:	490c      	ldr	r1, [pc, #48]	; (800c65c <tcp_rexmit_rto_commit+0x48>)
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <tcp_rexmit_rto_commit+0x4c>)
 800c62c:	f003 fc08 	bl	800fe40 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c636:	2bff      	cmp	r3, #255	; 0xff
 800c638:	d007      	beq.n	800c64a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c640:	3301      	adds	r3, #1
 800c642:	b2da      	uxtb	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fc80 	bl	800bf50 <tcp_output>
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	0801262c 	.word	0x0801262c
 800c65c:	08012c8c 	.word	0x08012c8c
 800c660:	08012680 	.word	0x08012680

0800c664 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d106      	bne.n	800c680 <tcp_rexmit_rto+0x1c>
 800c672:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <tcp_rexmit_rto+0x38>)
 800c674:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c678:	4909      	ldr	r1, [pc, #36]	; (800c6a0 <tcp_rexmit_rto+0x3c>)
 800c67a:	480a      	ldr	r0, [pc, #40]	; (800c6a4 <tcp_rexmit_rto+0x40>)
 800c67c:	f003 fbe0 	bl	800fe40 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff ff57 	bl	800c534 <tcp_rexmit_rto_prepare>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff ffc1 	bl	800c614 <tcp_rexmit_rto_commit>
  }
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	0801262c 	.word	0x0801262c
 800c6a0:	08012cb0 	.word	0x08012cb0
 800c6a4:	08012680 	.word	0x08012680

0800c6a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <tcp_rexmit+0x1c>
 800c6b6:	4b2f      	ldr	r3, [pc, #188]	; (800c774 <tcp_rexmit+0xcc>)
 800c6b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c6bc:	492e      	ldr	r1, [pc, #184]	; (800c778 <tcp_rexmit+0xd0>)
 800c6be:	482f      	ldr	r0, [pc, #188]	; (800c77c <tcp_rexmit+0xd4>)
 800c6c0:	f003 fbbe 	bl	800fe40 <iprintf>

  if (pcb->unacked == NULL) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c6cc:	f06f 0305 	mvn.w	r3, #5
 800c6d0:	e04c      	b.n	800c76c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c6d8:	68b8      	ldr	r0, [r7, #8]
 800c6da:	f7ff fe2d 	bl	800c338 <tcp_output_segment_busy>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c6e4:	f06f 0305 	mvn.w	r3, #5
 800c6e8:	e040      	b.n	800c76c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	336c      	adds	r3, #108	; 0x6c
 800c6f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6f8:	e002      	b.n	800c700 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d011      	beq.n	800c72c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4618      	mov	r0, r3
 800c712:	f7f8 fe06 	bl	8005322 <lwip_htonl>
 800c716:	4604      	mov	r4, r0
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f8 fdff 	bl	8005322 <lwip_htonl>
 800c724:	4603      	mov	r3, r0
 800c726:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c728:	2b00      	cmp	r3, #0
 800c72a:	dbe6      	blt.n	800c6fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d103      	bne.n	800c74a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c750:	2bff      	cmp	r3, #255	; 0xff
 800c752:	d007      	beq.n	800c764 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c75a:	3301      	adds	r3, #1
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	bd90      	pop	{r4, r7, pc}
 800c774:	0801262c 	.word	0x0801262c
 800c778:	08012ccc 	.word	0x08012ccc
 800c77c:	08012680 	.word	0x08012680

0800c780 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d106      	bne.n	800c79c <tcp_rexmit_fast+0x1c>
 800c78e:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <tcp_rexmit_fast+0xb8>)
 800c790:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c794:	4929      	ldr	r1, [pc, #164]	; (800c83c <tcp_rexmit_fast+0xbc>)
 800c796:	482a      	ldr	r0, [pc, #168]	; (800c840 <tcp_rexmit_fast+0xc0>)
 800c798:	f003 fb52 	bl	800fe40 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d045      	beq.n	800c830 <tcp_rexmit_fast+0xb0>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8b5b      	ldrh	r3, [r3, #26]
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d13f      	bne.n	800c830 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ff79 	bl	800c6a8 <tcp_rexmit>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d139      	bne.n	800c830 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	bf28      	it	cs
 800c7cc:	4613      	movcs	r3, r2
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	da00      	bge.n	800c7d6 <tcp_rexmit_fast+0x56>
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	105b      	asrs	r3, r3, #1
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d206      	bcs.n	800c800 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c80a:	4619      	mov	r1, r3
 800c80c:	0049      	lsls	r1, r1, #1
 800c80e:	440b      	add	r3, r1
 800c810:	b29b      	uxth	r3, r3
 800c812:	4413      	add	r3, r2
 800c814:	b29a      	uxth	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8b5b      	ldrh	r3, [r3, #26]
 800c820:	f043 0304 	orr.w	r3, r3, #4
 800c824:	b29a      	uxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c830:	bf00      	nop
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	0801262c 	.word	0x0801262c
 800c83c:	08012ce4 	.word	0x08012ce4
 800c840:	08012680 	.word	0x08012680

0800c844 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	607b      	str	r3, [r7, #4]
 800c84e:	460b      	mov	r3, r1
 800c850:	817b      	strh	r3, [r7, #10]
 800c852:	4613      	mov	r3, r2
 800c854:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c856:	897a      	ldrh	r2, [r7, #10]
 800c858:	893b      	ldrh	r3, [r7, #8]
 800c85a:	4413      	add	r3, r2
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	3314      	adds	r3, #20
 800c860:	b29b      	uxth	r3, r3
 800c862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c866:	4619      	mov	r1, r3
 800c868:	2022      	movs	r0, #34	; 0x22
 800c86a:	f7f9 fd15 	bl	8006298 <pbuf_alloc>
 800c86e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d04d      	beq.n	800c912 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c876:	897b      	ldrh	r3, [r7, #10]
 800c878:	3313      	adds	r3, #19
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	8952      	ldrh	r2, [r2, #10]
 800c87e:	4293      	cmp	r3, r2
 800c880:	db06      	blt.n	800c890 <tcp_output_alloc_header_common+0x4c>
 800c882:	4b26      	ldr	r3, [pc, #152]	; (800c91c <tcp_output_alloc_header_common+0xd8>)
 800c884:	f240 7223 	movw	r2, #1827	; 0x723
 800c888:	4925      	ldr	r1, [pc, #148]	; (800c920 <tcp_output_alloc_header_common+0xdc>)
 800c88a:	4826      	ldr	r0, [pc, #152]	; (800c924 <tcp_output_alloc_header_common+0xe0>)
 800c88c:	f003 fad8 	bl	800fe40 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c896:	8c3b      	ldrh	r3, [r7, #32]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f8 fd2d 	bl	80052f8 <lwip_htons>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7f8 fd25 	bl	80052f8 <lwip_htons>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7f8 fd30 	bl	8005322 <lwip_htonl>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c8c8:	897b      	ldrh	r3, [r7, #10]
 800c8ca:	089b      	lsrs	r3, r3, #2
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	3305      	adds	r3, #5
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	031b      	lsls	r3, r3, #12
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f8 fd09 	bl	80052f8 <lwip_htons>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c8ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7f8 fd01 	bl	80052f8 <lwip_htons>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2200      	movs	r2, #0
 800c902:	741a      	strb	r2, [r3, #16]
 800c904:	2200      	movs	r2, #0
 800c906:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2200      	movs	r2, #0
 800c90c:	749a      	strb	r2, [r3, #18]
 800c90e:	2200      	movs	r2, #0
 800c910:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c912:	697b      	ldr	r3, [r7, #20]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	0801262c 	.word	0x0801262c
 800c920:	08012d04 	.word	0x08012d04
 800c924:	08012680 	.word	0x08012680

0800c928 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c928:	b5b0      	push	{r4, r5, r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af04      	add	r7, sp, #16
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	607b      	str	r3, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	817b      	strh	r3, [r7, #10]
 800c936:	4613      	mov	r3, r2
 800c938:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <tcp_output_alloc_header+0x26>
 800c940:	4b15      	ldr	r3, [pc, #84]	; (800c998 <tcp_output_alloc_header+0x70>)
 800c942:	f240 7242 	movw	r2, #1858	; 0x742
 800c946:	4915      	ldr	r1, [pc, #84]	; (800c99c <tcp_output_alloc_header+0x74>)
 800c948:	4815      	ldr	r0, [pc, #84]	; (800c9a0 <tcp_output_alloc_header+0x78>)
 800c94a:	f003 fa79 	bl	800fe40 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	8adb      	ldrh	r3, [r3, #22]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	8b12      	ldrh	r2, [r2, #24]
 800c95a:	68f9      	ldr	r1, [r7, #12]
 800c95c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c95e:	893d      	ldrh	r5, [r7, #8]
 800c960:	897c      	ldrh	r4, [r7, #10]
 800c962:	9103      	str	r1, [sp, #12]
 800c964:	2110      	movs	r1, #16
 800c966:	9102      	str	r1, [sp, #8]
 800c968:	9201      	str	r2, [sp, #4]
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	462a      	mov	r2, r5
 800c970:	4621      	mov	r1, r4
 800c972:	f7ff ff67 	bl	800c844 <tcp_output_alloc_header_common>
 800c976:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d006      	beq.n	800c98c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c986:	441a      	add	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c98c:	697b      	ldr	r3, [r7, #20]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bdb0      	pop	{r4, r5, r7, pc}
 800c996:	bf00      	nop
 800c998:	0801262c 	.word	0x0801262c
 800c99c:	08012d34 	.word	0x08012d34
 800c9a0:	08012680 	.word	0x08012680

0800c9a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	71fb      	strb	r3, [r7, #7]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <tcp_output_fill_options+0x2e>
 800c9c4:	4b13      	ldr	r3, [pc, #76]	; (800ca14 <tcp_output_fill_options+0x70>)
 800c9c6:	f240 7256 	movw	r2, #1878	; 0x756
 800c9ca:	4913      	ldr	r1, [pc, #76]	; (800ca18 <tcp_output_fill_options+0x74>)
 800c9cc:	4813      	ldr	r0, [pc, #76]	; (800ca1c <tcp_output_fill_options+0x78>)
 800c9ce:	f003 fa37 	bl	800fe40 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	3314      	adds	r3, #20
 800c9dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	f103 0214 	add.w	r2, r3, #20
 800c9e4:	8bfb      	ldrh	r3, [r7, #30]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	f003 0304 	and.w	r3, r3, #4
 800c9f2:	440b      	add	r3, r1
 800c9f4:	4413      	add	r3, r2
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d006      	beq.n	800ca0a <tcp_output_fill_options+0x66>
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <tcp_output_fill_options+0x70>)
 800c9fe:	f240 7275 	movw	r2, #1909	; 0x775
 800ca02:	4907      	ldr	r1, [pc, #28]	; (800ca20 <tcp_output_fill_options+0x7c>)
 800ca04:	4805      	ldr	r0, [pc, #20]	; (800ca1c <tcp_output_fill_options+0x78>)
 800ca06:	f003 fa1b 	bl	800fe40 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ca0a:	bf00      	nop
 800ca0c:	3720      	adds	r7, #32
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	0801262c 	.word	0x0801262c
 800ca18:	08012d5c 	.word	0x08012d5c
 800ca1c:	08012680 	.word	0x08012680
 800ca20:	08012c54 	.word	0x08012c54

0800ca24 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	; 0x28
 800ca28:	af04      	add	r7, sp, #16
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <tcp_output_control_segment+0x22>
 800ca38:	4b1c      	ldr	r3, [pc, #112]	; (800caac <tcp_output_control_segment+0x88>)
 800ca3a:	f240 7287 	movw	r2, #1927	; 0x787
 800ca3e:	491c      	ldr	r1, [pc, #112]	; (800cab0 <tcp_output_control_segment+0x8c>)
 800ca40:	481c      	ldr	r0, [pc, #112]	; (800cab4 <tcp_output_control_segment+0x90>)
 800ca42:	f003 f9fd 	bl	800fe40 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7fe fae8 	bl	800b020 <tcp_route>
 800ca50:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ca58:	23fc      	movs	r3, #252	; 0xfc
 800ca5a:	75fb      	strb	r3, [r7, #23]
 800ca5c:	e01c      	b.n	800ca98 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d006      	beq.n	800ca72 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	7adb      	ldrb	r3, [r3, #11]
 800ca68:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	7a9b      	ldrb	r3, [r3, #10]
 800ca6e:	757b      	strb	r3, [r7, #21]
 800ca70:	e003      	b.n	800ca7a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ca72:	23ff      	movs	r3, #255	; 0xff
 800ca74:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ca7a:	7dba      	ldrb	r2, [r7, #22]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	2306      	movs	r3, #6
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	7d7b      	ldrb	r3, [r7, #21]
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f001 ff70 	bl	800e974 <ip4_output_if>
 800ca94:	4603      	mov	r3, r0
 800ca96:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ca98:	68b8      	ldr	r0, [r7, #8]
 800ca9a:	f7f9 fee1 	bl	8006860 <pbuf_free>
  return err;
 800ca9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	0801262c 	.word	0x0801262c
 800cab0:	08012d84 	.word	0x08012d84
 800cab4:	08012680 	.word	0x08012680

0800cab8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cab8:	b590      	push	{r4, r7, lr}
 800caba:	b08b      	sub	sp, #44	; 0x2c
 800cabc:	af04      	add	r7, sp, #16
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d106      	bne.n	800cada <tcp_rst+0x22>
 800cacc:	4b1f      	ldr	r3, [pc, #124]	; (800cb4c <tcp_rst+0x94>)
 800cace:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cad2:	491f      	ldr	r1, [pc, #124]	; (800cb50 <tcp_rst+0x98>)
 800cad4:	481f      	ldr	r0, [pc, #124]	; (800cb54 <tcp_rst+0x9c>)
 800cad6:	f003 f9b3 	bl	800fe40 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d106      	bne.n	800caee <tcp_rst+0x36>
 800cae0:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <tcp_rst+0x94>)
 800cae2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cae6:	491c      	ldr	r1, [pc, #112]	; (800cb58 <tcp_rst+0xa0>)
 800cae8:	481a      	ldr	r0, [pc, #104]	; (800cb54 <tcp_rst+0x9c>)
 800caea:	f003 f9a9 	bl	800fe40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800caee:	2300      	movs	r3, #0
 800caf0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800caf2:	f246 0308 	movw	r3, #24584	; 0x6008
 800caf6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	b29c      	uxth	r4, r3
 800cafc:	68b8      	ldr	r0, [r7, #8]
 800cafe:	f7f8 fc10 	bl	8005322 <lwip_htonl>
 800cb02:	4602      	mov	r2, r0
 800cb04:	8abb      	ldrh	r3, [r7, #20]
 800cb06:	9303      	str	r3, [sp, #12]
 800cb08:	2314      	movs	r3, #20
 800cb0a:	9302      	str	r3, [sp, #8]
 800cb0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cb0e:	9301      	str	r3, [sp, #4]
 800cb10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	4613      	mov	r3, r2
 800cb16:	2200      	movs	r2, #0
 800cb18:	4621      	mov	r1, r4
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff fe92 	bl	800c844 <tcp_output_alloc_header_common>
 800cb20:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	6939      	ldr	r1, [r7, #16]
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7ff ff38 	bl	800c9a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	6939      	ldr	r1, [r7, #16]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff ff72 	bl	800ca24 <tcp_output_control_segment>
 800cb40:	e000      	b.n	800cb44 <tcp_rst+0x8c>
    return;
 800cb42:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd90      	pop	{r4, r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0801262c 	.word	0x0801262c
 800cb50:	08012db0 	.word	0x08012db0
 800cb54:	08012680 	.word	0x08012680
 800cb58:	08012dcc 	.word	0x08012dcc

0800cb5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <tcp_send_empty_ack+0x24>
 800cb72:	4b28      	ldr	r3, [pc, #160]	; (800cc14 <tcp_send_empty_ack+0xb8>)
 800cb74:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cb78:	4927      	ldr	r1, [pc, #156]	; (800cc18 <tcp_send_empty_ack+0xbc>)
 800cb7a:	4828      	ldr	r0, [pc, #160]	; (800cc1c <tcp_send_empty_ack+0xc0>)
 800cb7c:	f003 f960 	bl	800fe40 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f003 0304 	and.w	r3, r3, #4
 800cb8a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cb8c:	7d7b      	ldrb	r3, [r7, #21]
 800cb8e:	b29c      	uxth	r4, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7f8 fbc4 	bl	8005322 <lwip_htonl>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4621      	mov	r1, r4
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff fec1 	bl	800c928 <tcp_output_alloc_header>
 800cba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d109      	bne.n	800cbc2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b5b      	ldrh	r3, [r3, #26]
 800cbb2:	f043 0303 	orr.w	r3, r3, #3
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cbbc:	f06f 0301 	mvn.w	r3, #1
 800cbc0:	e023      	b.n	800cc0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cbc2:	7dbb      	ldrb	r3, [r7, #22]
 800cbc4:	7dfa      	ldrb	r2, [r7, #23]
 800cbc6:	6939      	ldr	r1, [r7, #16]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff feeb 	bl	800c9a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	6939      	ldr	r1, [r7, #16]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff ff24 	bl	800ca24 <tcp_output_control_segment>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cbe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	8b5b      	ldrh	r3, [r3, #26]
 800cbec:	f043 0303 	orr.w	r3, r3, #3
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	835a      	strh	r2, [r3, #26]
 800cbf6:	e006      	b.n	800cc06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	8b5b      	ldrh	r3, [r3, #26]
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cc06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	371c      	adds	r7, #28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd90      	pop	{r4, r7, pc}
 800cc12:	bf00      	nop
 800cc14:	0801262c 	.word	0x0801262c
 800cc18:	08012de8 	.word	0x08012de8
 800cc1c:	08012680 	.word	0x08012680

0800cc20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc28:	2300      	movs	r3, #0
 800cc2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d106      	bne.n	800cc40 <tcp_keepalive+0x20>
 800cc32:	4b18      	ldr	r3, [pc, #96]	; (800cc94 <tcp_keepalive+0x74>)
 800cc34:	f640 0224 	movw	r2, #2084	; 0x824
 800cc38:	4917      	ldr	r1, [pc, #92]	; (800cc98 <tcp_keepalive+0x78>)
 800cc3a:	4818      	ldr	r0, [pc, #96]	; (800cc9c <tcp_keepalive+0x7c>)
 800cc3c:	f003 f900 	bl	800fe40 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	b29c      	uxth	r4, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7f8 fb69 	bl	8005322 <lwip_htonl>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2200      	movs	r2, #0
 800cc54:	4621      	mov	r1, r4
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fe66 	bl	800c928 <tcp_output_alloc_header>
 800cc5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cc64:	f04f 33ff 	mov.w	r3, #4294967295
 800cc68:	e010      	b.n	800cc8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	6939      	ldr	r1, [r7, #16]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fe97 	bl	800c9a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	6939      	ldr	r1, [r7, #16]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff fed0 	bl	800ca24 <tcp_output_control_segment>
 800cc84:	4603      	mov	r3, r0
 800cc86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	371c      	adds	r7, #28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd90      	pop	{r4, r7, pc}
 800cc94:	0801262c 	.word	0x0801262c
 800cc98:	08012e08 	.word	0x08012e08
 800cc9c:	08012680 	.word	0x08012680

0800cca0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b08b      	sub	sp, #44	; 0x2c
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <tcp_zero_window_probe+0x22>
 800ccb4:	4b4c      	ldr	r3, [pc, #304]	; (800cde8 <tcp_zero_window_probe+0x148>)
 800ccb6:	f640 024f 	movw	r2, #2127	; 0x84f
 800ccba:	494c      	ldr	r1, [pc, #304]	; (800cdec <tcp_zero_window_probe+0x14c>)
 800ccbc:	484c      	ldr	r0, [pc, #304]	; (800cdf0 <tcp_zero_window_probe+0x150>)
 800ccbe:	f003 f8bf 	bl	800fe40 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e086      	b.n	800cde0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ccd8:	2bff      	cmp	r3, #255	; 0xff
 800ccda:	d007      	beq.n	800ccec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cce2:	3301      	adds	r3, #1
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	899b      	ldrh	r3, [r3, #12]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f8 faff 	bl	80052f8 <lwip_htons>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <tcp_zero_window_probe+0x72>
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	891b      	ldrh	r3, [r3, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <tcp_zero_window_probe+0x72>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e000      	b.n	800cd14 <tcp_zero_window_probe+0x74>
 800cd12:	2300      	movs	r3, #0
 800cd14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cd16:	7ffb      	ldrb	r3, [r7, #31]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bf0c      	ite	eq
 800cd1c:	2301      	moveq	r3, #1
 800cd1e:	2300      	movne	r3, #0
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd28:	b299      	uxth	r1, r3
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	8bba      	ldrh	r2, [r7, #28]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fdf8 	bl	800c928 <tcp_output_alloc_header>
 800cd38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cd40:	f04f 33ff 	mov.w	r3, #4294967295
 800cd44:	e04c      	b.n	800cde0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cd4c:	7ffb      	ldrb	r3, [r7, #31]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d011      	beq.n	800cd76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	b21b      	sxth	r3, r3
 800cd5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd5e:	b21c      	sxth	r4, r3
 800cd60:	2011      	movs	r0, #17
 800cd62:	f7f8 fac9 	bl	80052f8 <lwip_htons>
 800cd66:	4603      	mov	r3, r0
 800cd68:	b21b      	sxth	r3, r3
 800cd6a:	4323      	orrs	r3, r4
 800cd6c:	b21b      	sxth	r3, r3
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	819a      	strh	r2, [r3, #12]
 800cd74:	e010      	b.n	800cd98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	6858      	ldr	r0, [r3, #4]
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	891a      	ldrh	r2, [r3, #8]
 800cd88:	6a3b      	ldr	r3, [r7, #32]
 800cd8a:	891b      	ldrh	r3, [r3, #8]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	2201      	movs	r2, #1
 800cd92:	6939      	ldr	r1, [r7, #16]
 800cd94:	f7f9 ff5e 	bl	8006c54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7f8 fabf 	bl	8005322 <lwip_htonl>
 800cda4:	4603      	mov	r3, r0
 800cda6:	3301      	adds	r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	da02      	bge.n	800cdbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	69b9      	ldr	r1, [r7, #24]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff fded 	bl	800c9a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	69b9      	ldr	r1, [r7, #24]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff fe26 	bl	800ca24 <tcp_output_control_segment>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	372c      	adds	r7, #44	; 0x2c
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd90      	pop	{r4, r7, pc}
 800cde8:	0801262c 	.word	0x0801262c
 800cdec:	08012e24 	.word	0x08012e24
 800cdf0:	08012680 	.word	0x08012680

0800cdf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cdfc:	f7fa f818 	bl	8006e30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ce00:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <tcpip_tcp_timer+0x38>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <tcpip_tcp_timer+0x1c>
 800ce08:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <tcpip_tcp_timer+0x3c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d005      	beq.n	800ce1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce10:	2200      	movs	r2, #0
 800ce12:	4908      	ldr	r1, [pc, #32]	; (800ce34 <tcpip_tcp_timer+0x40>)
 800ce14:	20fa      	movs	r0, #250	; 0xfa
 800ce16:	f000 f8f3 	bl	800d000 <sys_timeout>
 800ce1a:	e003      	b.n	800ce24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ce1c:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <tcpip_tcp_timer+0x44>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
  }
}
 800ce22:	bf00      	nop
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20006914 	.word	0x20006914
 800ce30:	20006924 	.word	0x20006924
 800ce34:	0800cdf5 	.word	0x0800cdf5
 800ce38:	20000108 	.word	0x20000108

0800ce3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <tcp_timer_needed+0x30>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10f      	bne.n	800ce68 <tcp_timer_needed+0x2c>
 800ce48:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <tcp_timer_needed+0x34>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d103      	bne.n	800ce58 <tcp_timer_needed+0x1c>
 800ce50:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <tcp_timer_needed+0x38>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ce58:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <tcp_timer_needed+0x30>)
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4905      	ldr	r1, [pc, #20]	; (800ce78 <tcp_timer_needed+0x3c>)
 800ce62:	20fa      	movs	r0, #250	; 0xfa
 800ce64:	f000 f8cc 	bl	800d000 <sys_timeout>
  }
}
 800ce68:	bf00      	nop
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20000108 	.word	0x20000108
 800ce70:	20006914 	.word	0x20006914
 800ce74:	20006924 	.word	0x20006924
 800ce78:	0800cdf5 	.word	0x0800cdf5

0800ce7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce88:	2006      	movs	r0, #6
 800ce8a:	f7f8 fe8b 	bl	8005ba4 <memp_malloc>
 800ce8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d109      	bne.n	800ceaa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d151      	bne.n	800cf40 <sys_timeout_abs+0xc4>
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <sys_timeout_abs+0xcc>)
 800ce9e:	22be      	movs	r2, #190	; 0xbe
 800cea0:	492a      	ldr	r1, [pc, #168]	; (800cf4c <sys_timeout_abs+0xd0>)
 800cea2:	482b      	ldr	r0, [pc, #172]	; (800cf50 <sys_timeout_abs+0xd4>)
 800cea4:	f002 ffcc 	bl	800fe40 <iprintf>
    return;
 800cea8:	e04a      	b.n	800cf40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	2200      	movs	r2, #0
 800ceae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cec2:	4b24      	ldr	r3, [pc, #144]	; (800cf54 <sys_timeout_abs+0xd8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d103      	bne.n	800ced2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ceca:	4a22      	ldr	r2, [pc, #136]	; (800cf54 <sys_timeout_abs+0xd8>)
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	6013      	str	r3, [r2, #0]
    return;
 800ced0:	e037      	b.n	800cf42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	4b1f      	ldr	r3, [pc, #124]	; (800cf54 <sys_timeout_abs+0xd8>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	0fdb      	lsrs	r3, r3, #31
 800cee0:	f003 0301 	and.w	r3, r3, #1
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ceea:	4b1a      	ldr	r3, [pc, #104]	; (800cf54 <sys_timeout_abs+0xd8>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cef2:	4a18      	ldr	r2, [pc, #96]	; (800cf54 <sys_timeout_abs+0xd8>)
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	e023      	b.n	800cf42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cefa:	4b16      	ldr	r3, [pc, #88]	; (800cf54 <sys_timeout_abs+0xd8>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	e01a      	b.n	800cf38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00b      	beq.n	800cf22 <sys_timeout_abs+0xa6>
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	0fdb      	lsrs	r3, r3, #31
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d007      	beq.n	800cf32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	601a      	str	r2, [r3, #0]
        break;
 800cf30:	e007      	b.n	800cf42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e1      	bne.n	800cf02 <sys_timeout_abs+0x86>
 800cf3e:	e000      	b.n	800cf42 <sys_timeout_abs+0xc6>
    return;
 800cf40:	bf00      	nop
      }
    }
  }
}
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	08012e48 	.word	0x08012e48
 800cf4c:	08012e7c 	.word	0x08012e7c
 800cf50:	08012ebc 	.word	0x08012ebc
 800cf54:	20000100 	.word	0x20000100

0800cf58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	4798      	blx	r3

  now = sys_now();
 800cf6a:	f7f8 f937 	bl	80051dc <sys_now>
 800cf6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <lwip_cyclic_timer+0x5c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4413      	add	r3, r2
 800cf7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	0fdb      	lsrs	r3, r3, #31
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d009      	beq.n	800cfa2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	4413      	add	r3, r2
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	4907      	ldr	r1, [pc, #28]	; (800cfb8 <lwip_cyclic_timer+0x60>)
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ff6e 	bl	800ce7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cfa0:	e004      	b.n	800cfac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	4904      	ldr	r1, [pc, #16]	; (800cfb8 <lwip_cyclic_timer+0x60>)
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff ff68 	bl	800ce7c <sys_timeout_abs>
}
 800cfac:	bf00      	nop
 800cfae:	3718      	adds	r7, #24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20000104 	.word	0x20000104
 800cfb8:	0800cf59 	.word	0x0800cf59

0800cfbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	e00e      	b.n	800cfe6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cfc8:	4a0b      	ldr	r2, [pc, #44]	; (800cff8 <sys_timeouts_init+0x3c>)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	4a08      	ldr	r2, [pc, #32]	; (800cff8 <sys_timeouts_init+0x3c>)
 800cfd6:	4413      	add	r3, r2
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4908      	ldr	r1, [pc, #32]	; (800cffc <sys_timeouts_init+0x40>)
 800cfdc:	f000 f810 	bl	800d000 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d9ed      	bls.n	800cfc8 <sys_timeouts_init+0xc>
  }
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	08013aa4 	.word	0x08013aa4
 800cffc:	0800cf59 	.word	0x0800cf59

0800d000 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d012:	d306      	bcc.n	800d022 <sys_timeout+0x22>
 800d014:	4b0a      	ldr	r3, [pc, #40]	; (800d040 <sys_timeout+0x40>)
 800d016:	f240 1229 	movw	r2, #297	; 0x129
 800d01a:	490a      	ldr	r1, [pc, #40]	; (800d044 <sys_timeout+0x44>)
 800d01c:	480a      	ldr	r0, [pc, #40]	; (800d048 <sys_timeout+0x48>)
 800d01e:	f002 ff0f 	bl	800fe40 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d022:	f7f8 f8db 	bl	80051dc <sys_now>
 800d026:	4602      	mov	r2, r0
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4413      	add	r3, r2
 800d02c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	68b9      	ldr	r1, [r7, #8]
 800d032:	6978      	ldr	r0, [r7, #20]
 800d034:	f7ff ff22 	bl	800ce7c <sys_timeout_abs>
#endif
}
 800d038:	bf00      	nop
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	08012e48 	.word	0x08012e48
 800d044:	08012ee4 	.word	0x08012ee4
 800d048:	08012ebc 	.word	0x08012ebc

0800d04c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d052:	f7f8 f8c3 	bl	80051dc <sys_now>
 800d056:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d058:	4b1a      	ldr	r3, [pc, #104]	; (800d0c4 <sys_check_timeouts+0x78>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <sys_check_timeouts+0x1a>
 800d062:	f7f9 f8c3 	bl	80061ec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d066:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <sys_check_timeouts+0x7c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d022      	beq.n	800d0b8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	68fa      	ldr	r2, [r7, #12]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	0fdb      	lsrs	r3, r3, #31
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d11a      	bne.n	800d0bc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a0f      	ldr	r2, [pc, #60]	; (800d0c8 <sys_check_timeouts+0x7c>)
 800d08c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	4a0b      	ldr	r2, [pc, #44]	; (800d0cc <sys_check_timeouts+0x80>)
 800d0a0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	2006      	movs	r0, #6
 800d0a6:	f7f8 fdc9 	bl	8005c3c <memp_free>
    if (handler != NULL) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0d3      	beq.n	800d058 <sys_check_timeouts+0xc>
      handler(arg);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6838      	ldr	r0, [r7, #0]
 800d0b4:	4798      	blx	r3
  do {
 800d0b6:	e7cf      	b.n	800d058 <sys_check_timeouts+0xc>
      return;
 800d0b8:	bf00      	nop
 800d0ba:	e000      	b.n	800d0be <sys_check_timeouts+0x72>
      return;
 800d0bc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	2000690c 	.word	0x2000690c
 800d0c8:	20000100 	.word	0x20000100
 800d0cc:	20000104 	.word	0x20000104

0800d0d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d0d4:	f002 ff42 	bl	800ff5c <rand>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	4b01      	ldr	r3, [pc, #4]	; (800d0f0 <udp_init+0x20>)
 800d0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0ec:	bf00      	nop
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20000010 	.word	0x20000010

0800d0f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d105      	bne.n	800d114 <udp_input_local_match+0x20>
 800d108:	4b27      	ldr	r3, [pc, #156]	; (800d1a8 <udp_input_local_match+0xb4>)
 800d10a:	2287      	movs	r2, #135	; 0x87
 800d10c:	4927      	ldr	r1, [pc, #156]	; (800d1ac <udp_input_local_match+0xb8>)
 800d10e:	4828      	ldr	r0, [pc, #160]	; (800d1b0 <udp_input_local_match+0xbc>)
 800d110:	f002 fe96 	bl	800fe40 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d105      	bne.n	800d126 <udp_input_local_match+0x32>
 800d11a:	4b23      	ldr	r3, [pc, #140]	; (800d1a8 <udp_input_local_match+0xb4>)
 800d11c:	2288      	movs	r2, #136	; 0x88
 800d11e:	4925      	ldr	r1, [pc, #148]	; (800d1b4 <udp_input_local_match+0xc0>)
 800d120:	4823      	ldr	r0, [pc, #140]	; (800d1b0 <udp_input_local_match+0xbc>)
 800d122:	f002 fe8d 	bl	800fe40 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	7a1b      	ldrb	r3, [r3, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00b      	beq.n	800d146 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	7a1a      	ldrb	r2, [r3, #8]
 800d132:	4b21      	ldr	r3, [pc, #132]	; (800d1b8 <udp_input_local_match+0xc4>)
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d13a:	3301      	adds	r3, #1
 800d13c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d13e:	429a      	cmp	r2, r3
 800d140:	d001      	beq.n	800d146 <udp_input_local_match+0x52>
    return 0;
 800d142:	2300      	movs	r3, #0
 800d144:	e02b      	b.n	800d19e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d018      	beq.n	800d17e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d013      	beq.n	800d17a <udp_input_local_match+0x86>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00f      	beq.n	800d17a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d15a:	4b17      	ldr	r3, [pc, #92]	; (800d1b8 <udp_input_local_match+0xc4>)
 800d15c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d00a      	beq.n	800d17a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4b13      	ldr	r3, [pc, #76]	; (800d1b8 <udp_input_local_match+0xc4>)
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	405a      	eors	r2, r3
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3308      	adds	r3, #8
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d176:	2b00      	cmp	r3, #0
 800d178:	d110      	bne.n	800d19c <udp_input_local_match+0xa8>
          return 1;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e00f      	b.n	800d19e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d009      	beq.n	800d198 <udp_input_local_match+0xa4>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d005      	beq.n	800d198 <udp_input_local_match+0xa4>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <udp_input_local_match+0xc4>)
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	429a      	cmp	r2, r3
 800d196:	d101      	bne.n	800d19c <udp_input_local_match+0xa8>
        return 1;
 800d198:	2301      	movs	r3, #1
 800d19a:	e000      	b.n	800d19e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08012f30 	.word	0x08012f30
 800d1ac:	08012f60 	.word	0x08012f60
 800d1b0:	08012f84 	.word	0x08012f84
 800d1b4:	08012fac 	.word	0x08012fac
 800d1b8:	200033d0 	.word	0x200033d0

0800d1bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1bc:	b590      	push	{r4, r7, lr}
 800d1be:	b08d      	sub	sp, #52	; 0x34
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d105      	bne.n	800d1dc <udp_input+0x20>
 800d1d0:	4b7c      	ldr	r3, [pc, #496]	; (800d3c4 <udp_input+0x208>)
 800d1d2:	22cf      	movs	r2, #207	; 0xcf
 800d1d4:	497c      	ldr	r1, [pc, #496]	; (800d3c8 <udp_input+0x20c>)
 800d1d6:	487d      	ldr	r0, [pc, #500]	; (800d3cc <udp_input+0x210>)
 800d1d8:	f002 fe32 	bl	800fe40 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d105      	bne.n	800d1ee <udp_input+0x32>
 800d1e2:	4b78      	ldr	r3, [pc, #480]	; (800d3c4 <udp_input+0x208>)
 800d1e4:	22d0      	movs	r2, #208	; 0xd0
 800d1e6:	497a      	ldr	r1, [pc, #488]	; (800d3d0 <udp_input+0x214>)
 800d1e8:	4878      	ldr	r0, [pc, #480]	; (800d3cc <udp_input+0x210>)
 800d1ea:	f002 fe29 	bl	800fe40 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	895b      	ldrh	r3, [r3, #10]
 800d1f2:	2b07      	cmp	r3, #7
 800d1f4:	d803      	bhi.n	800d1fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7f9 fb32 	bl	8006860 <pbuf_free>
    goto end;
 800d1fc:	e0de      	b.n	800d3bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d204:	4b73      	ldr	r3, [pc, #460]	; (800d3d4 <udp_input+0x218>)
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	4a72      	ldr	r2, [pc, #456]	; (800d3d4 <udp_input+0x218>)
 800d20a:	6812      	ldr	r2, [r2, #0]
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f001 fc88 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800d214:	4603      	mov	r3, r0
 800d216:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f8 f86a 	bl	80052f8 <lwip_htons>
 800d224:	4603      	mov	r3, r0
 800d226:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	885b      	ldrh	r3, [r3, #2]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	4618      	mov	r0, r3
 800d230:	f7f8 f862 	bl	80052f8 <lwip_htons>
 800d234:	4603      	mov	r3, r0
 800d236:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d238:	2300      	movs	r3, #0
 800d23a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d23c:	2300      	movs	r3, #0
 800d23e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d240:	2300      	movs	r3, #0
 800d242:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d244:	4b64      	ldr	r3, [pc, #400]	; (800d3d8 <udp_input+0x21c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	627b      	str	r3, [r7, #36]	; 0x24
 800d24a:	e054      	b.n	800d2f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	8a5b      	ldrh	r3, [r3, #18]
 800d250:	89fa      	ldrh	r2, [r7, #14]
 800d252:	429a      	cmp	r2, r3
 800d254:	d14a      	bne.n	800d2ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d256:	7cfb      	ldrb	r3, [r7, #19]
 800d258:	461a      	mov	r2, r3
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d25e:	f7ff ff49 	bl	800d0f4 <udp_input_local_match>
 800d262:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d264:	2b00      	cmp	r3, #0
 800d266:	d041      	beq.n	800d2ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	7c1b      	ldrb	r3, [r3, #16]
 800d26c:	f003 0304 	and.w	r3, r3, #4
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11d      	bne.n	800d2b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	61fb      	str	r3, [r7, #28]
 800d27e:	e017      	b.n	800d2b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d280:	7cfb      	ldrb	r3, [r7, #19]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d014      	beq.n	800d2b0 <udp_input+0xf4>
 800d286:	4b53      	ldr	r3, [pc, #332]	; (800d3d4 <udp_input+0x218>)
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d10f      	bne.n	800d2b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	3304      	adds	r3, #4
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d008      	beq.n	800d2b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d101      	bne.n	800d2b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	8a9b      	ldrh	r3, [r3, #20]
 800d2b4:	8a3a      	ldrh	r2, [r7, #16]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d118      	bne.n	800d2ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d005      	beq.n	800d2ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c4:	685a      	ldr	r2, [r3, #4]
 800d2c6:	4b43      	ldr	r3, [pc, #268]	; (800d3d4 <udp_input+0x218>)
 800d2c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d10e      	bne.n	800d2ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d014      	beq.n	800d2fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	68da      	ldr	r2, [r3, #12]
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d2dc:	4b3e      	ldr	r3, [pc, #248]	; (800d3d8 <udp_input+0x21c>)
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d2e4:	4a3c      	ldr	r2, [pc, #240]	; (800d3d8 <udp_input+0x21c>)
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d2ea:	e008      	b.n	800d2fe <udp_input+0x142>
      }
    }

    prev = pcb;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1a7      	bne.n	800d24c <udp_input+0x90>
 800d2fc:	e000      	b.n	800d300 <udp_input+0x144>
        break;
 800d2fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <udp_input+0x15a>
    for_us = 1;
 800d310:	2301      	movs	r3, #1
 800d312:	76fb      	strb	r3, [r7, #27]
 800d314:	e00a      	b.n	800d32c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	3304      	adds	r3, #4
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	4b2d      	ldr	r3, [pc, #180]	; (800d3d4 <udp_input+0x218>)
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	429a      	cmp	r2, r3
 800d322:	bf0c      	ite	eq
 800d324:	2301      	moveq	r3, #1
 800d326:	2300      	movne	r3, #0
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d32c:	7efb      	ldrb	r3, [r7, #27]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d041      	beq.n	800d3b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d332:	2108      	movs	r1, #8
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7f9 fa0d 	bl	8006754 <pbuf_remove_header>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00a      	beq.n	800d356 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d340:	4b20      	ldr	r3, [pc, #128]	; (800d3c4 <udp_input+0x208>)
 800d342:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d346:	4925      	ldr	r1, [pc, #148]	; (800d3dc <udp_input+0x220>)
 800d348:	4820      	ldr	r0, [pc, #128]	; (800d3cc <udp_input+0x210>)
 800d34a:	f002 fd79 	bl	800fe40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f9 fa86 	bl	8006860 <pbuf_free>
      goto end;
 800d354:	e032      	b.n	800d3bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	699c      	ldr	r4, [r3, #24]
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	69d8      	ldr	r0, [r3, #28]
 800d36c:	8a3b      	ldrh	r3, [r7, #16]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4b1b      	ldr	r3, [pc, #108]	; (800d3e0 <udp_input+0x224>)
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d376:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d378:	e021      	b.n	800d3be <udp_input+0x202>
        pbuf_free(p);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7f9 fa70 	bl	8006860 <pbuf_free>
        goto end;
 800d380:	e01c      	b.n	800d3bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d382:	7cfb      	ldrb	r3, [r7, #19]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d112      	bne.n	800d3ae <udp_input+0x1f2>
 800d388:	4b12      	ldr	r3, [pc, #72]	; (800d3d4 <udp_input+0x218>)
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d390:	2be0      	cmp	r3, #224	; 0xe0
 800d392:	d00c      	beq.n	800d3ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d394:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <udp_input+0x218>)
 800d396:	899b      	ldrh	r3, [r3, #12]
 800d398:	3308      	adds	r3, #8
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	b21b      	sxth	r3, r3
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7f9 fa4a 	bl	800683a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d3a6:	2103      	movs	r1, #3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f001 f89b 	bl	800e4e4 <icmp_dest_unreach>
      pbuf_free(p);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7f9 fa56 	bl	8006860 <pbuf_free>
  return;
 800d3b4:	e003      	b.n	800d3be <udp_input+0x202>
    pbuf_free(p);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f9 fa52 	bl	8006860 <pbuf_free>
  return;
 800d3bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d3be:	372c      	adds	r7, #44	; 0x2c
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd90      	pop	{r4, r7, pc}
 800d3c4:	08012f30 	.word	0x08012f30
 800d3c8:	08012fd4 	.word	0x08012fd4
 800d3cc:	08012f84 	.word	0x08012f84
 800d3d0:	08012fec 	.word	0x08012fec
 800d3d4:	200033d0 	.word	0x200033d0
 800d3d8:	2000692c 	.word	0x2000692c
 800d3dc:	08013008 	.word	0x08013008
 800d3e0:	200033e0 	.word	0x200033e0

0800d3e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01e      	beq.n	800d432 <udp_netif_ip_addr_changed+0x4e>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d01a      	beq.n	800d432 <udp_netif_ip_addr_changed+0x4e>
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d017      	beq.n	800d432 <udp_netif_ip_addr_changed+0x4e>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d013      	beq.n	800d432 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d40a:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <udp_netif_ip_addr_changed+0x5c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	e00c      	b.n	800d42c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d103      	bne.n	800d426 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1ef      	bne.n	800d412 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d432:	bf00      	nop
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	2000692c 	.word	0x2000692c

0800d444 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d44c:	4915      	ldr	r1, [pc, #84]	; (800d4a4 <etharp_free_entry+0x60>)
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4613      	mov	r3, r2
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	4413      	add	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	440b      	add	r3, r1
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d013      	beq.n	800d488 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d460:	4910      	ldr	r1, [pc, #64]	; (800d4a4 <etharp_free_entry+0x60>)
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	4613      	mov	r3, r2
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	4413      	add	r3, r2
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	440b      	add	r3, r1
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f7f9 f9f5 	bl	8006860 <pbuf_free>
    arp_table[i].q = NULL;
 800d476:	490b      	ldr	r1, [pc, #44]	; (800d4a4 <etharp_free_entry+0x60>)
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	4613      	mov	r3, r2
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	4413      	add	r3, r2
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	440b      	add	r3, r1
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d488:	4906      	ldr	r1, [pc, #24]	; (800d4a4 <etharp_free_entry+0x60>)
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	3314      	adds	r3, #20
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	2000010c 	.word	0x2000010c

0800d4a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	e096      	b.n	800d5e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d4b4:	494f      	ldr	r1, [pc, #316]	; (800d5f4 <etharp_tmr+0x14c>)
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	440b      	add	r3, r1
 800d4c2:	3314      	adds	r3, #20
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 8086 	beq.w	800d5dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d4d0:	4948      	ldr	r1, [pc, #288]	; (800d5f4 <etharp_tmr+0x14c>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	3312      	adds	r3, #18
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b298      	uxth	r0, r3
 800d4e6:	4943      	ldr	r1, [pc, #268]	; (800d5f4 <etharp_tmr+0x14c>)
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	4413      	add	r3, r2
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3312      	adds	r3, #18
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d4fa:	493e      	ldr	r1, [pc, #248]	; (800d5f4 <etharp_tmr+0x14c>)
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4613      	mov	r3, r2
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	4413      	add	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	440b      	add	r3, r1
 800d508:	3312      	adds	r3, #18
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d510:	d215      	bcs.n	800d53e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d512:	4938      	ldr	r1, [pc, #224]	; (800d5f4 <etharp_tmr+0x14c>)
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
 800d520:	3314      	adds	r3, #20
 800d522:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d524:	2b01      	cmp	r3, #1
 800d526:	d10e      	bne.n	800d546 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d528:	4932      	ldr	r1, [pc, #200]	; (800d5f4 <etharp_tmr+0x14c>)
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	4613      	mov	r3, r2
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4413      	add	r3, r2
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	440b      	add	r3, r1
 800d536:	3312      	adds	r3, #18
 800d538:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d903      	bls.n	800d546 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff ff80 	bl	800d444 <etharp_free_entry>
 800d544:	e04a      	b.n	800d5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d546:	492b      	ldr	r1, [pc, #172]	; (800d5f4 <etharp_tmr+0x14c>)
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	4613      	mov	r3, r2
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	4413      	add	r3, r2
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	440b      	add	r3, r1
 800d554:	3314      	adds	r3, #20
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d10a      	bne.n	800d572 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d55c:	4925      	ldr	r1, [pc, #148]	; (800d5f4 <etharp_tmr+0x14c>)
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4613      	mov	r3, r2
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	4413      	add	r3, r2
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	440b      	add	r3, r1
 800d56a:	3314      	adds	r3, #20
 800d56c:	2204      	movs	r2, #4
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	e034      	b.n	800d5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d572:	4920      	ldr	r1, [pc, #128]	; (800d5f4 <etharp_tmr+0x14c>)
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	4613      	mov	r3, r2
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	4413      	add	r3, r2
 800d57c:	00db      	lsls	r3, r3, #3
 800d57e:	440b      	add	r3, r1
 800d580:	3314      	adds	r3, #20
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b04      	cmp	r3, #4
 800d586:	d10a      	bne.n	800d59e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d588:	491a      	ldr	r1, [pc, #104]	; (800d5f4 <etharp_tmr+0x14c>)
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	440b      	add	r3, r1
 800d596:	3314      	adds	r3, #20
 800d598:	2202      	movs	r2, #2
 800d59a:	701a      	strb	r2, [r3, #0]
 800d59c:	e01e      	b.n	800d5dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d59e:	4915      	ldr	r1, [pc, #84]	; (800d5f4 <etharp_tmr+0x14c>)
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3314      	adds	r3, #20
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d113      	bne.n	800d5dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d5b4:	490f      	ldr	r1, [pc, #60]	; (800d5f4 <etharp_tmr+0x14c>)
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	005b      	lsls	r3, r3, #1
 800d5bc:	4413      	add	r3, r2
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	440b      	add	r3, r1
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	4413      	add	r3, r2
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	4a08      	ldr	r2, [pc, #32]	; (800d5f4 <etharp_tmr+0x14c>)
 800d5d2:	4413      	add	r3, r2
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f000 fe6e 	bl	800e2b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	607b      	str	r3, [r7, #4]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b09      	cmp	r3, #9
 800d5e6:	f77f af65 	ble.w	800d4b4 <etharp_tmr+0xc>
      }
    }
  }
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	2000010c 	.word	0x2000010c

0800d5f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08a      	sub	sp, #40	; 0x28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	460b      	mov	r3, r1
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d606:	230a      	movs	r3, #10
 800d608:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d60a:	230a      	movs	r3, #10
 800d60c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d60e:	230a      	movs	r3, #10
 800d610:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d616:	230a      	movs	r3, #10
 800d618:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	83bb      	strh	r3, [r7, #28]
 800d61e:	2300      	movs	r3, #0
 800d620:	837b      	strh	r3, [r7, #26]
 800d622:	2300      	movs	r3, #0
 800d624:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d626:	2300      	movs	r3, #0
 800d628:	843b      	strh	r3, [r7, #32]
 800d62a:	e0ae      	b.n	800d78a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d62c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d630:	49a6      	ldr	r1, [pc, #664]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d632:	4613      	mov	r3, r2
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	4413      	add	r3, r2
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	440b      	add	r3, r1
 800d63c:	3314      	adds	r3, #20
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d642:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d646:	2b0a      	cmp	r3, #10
 800d648:	d105      	bne.n	800d656 <etharp_find_entry+0x5e>
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d650:	8c3b      	ldrh	r3, [r7, #32]
 800d652:	847b      	strh	r3, [r7, #34]	; 0x22
 800d654:	e095      	b.n	800d782 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 8092 	beq.w	800d782 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d009      	beq.n	800d678 <etharp_find_entry+0x80>
 800d664:	7dfb      	ldrb	r3, [r7, #23]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d806      	bhi.n	800d678 <etharp_find_entry+0x80>
 800d66a:	4b99      	ldr	r3, [pc, #612]	; (800d8d0 <etharp_find_entry+0x2d8>)
 800d66c:	f240 1223 	movw	r2, #291	; 0x123
 800d670:	4998      	ldr	r1, [pc, #608]	; (800d8d4 <etharp_find_entry+0x2dc>)
 800d672:	4899      	ldr	r0, [pc, #612]	; (800d8d8 <etharp_find_entry+0x2e0>)
 800d674:	f002 fbe4 	bl	800fe40 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d020      	beq.n	800d6c0 <etharp_find_entry+0xc8>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6819      	ldr	r1, [r3, #0]
 800d682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d686:	4891      	ldr	r0, [pc, #580]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d688:	4613      	mov	r3, r2
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	4413      	add	r3, r2
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	4403      	add	r3, r0
 800d692:	3304      	adds	r3, #4
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4299      	cmp	r1, r3
 800d698:	d112      	bne.n	800d6c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00c      	beq.n	800d6ba <etharp_find_entry+0xc2>
 800d6a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6a4:	4989      	ldr	r1, [pc, #548]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	440b      	add	r3, r1
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d102      	bne.n	800d6c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d6ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6be:	e100      	b.n	800d8c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d140      	bne.n	800d748 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d6c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ca:	4980      	ldr	r1, [pc, #512]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	4413      	add	r3, r2
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	440b      	add	r3, r1
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01a      	beq.n	800d712 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d6dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6e0:	497a      	ldr	r1, [pc, #488]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	4413      	add	r3, r2
 800d6e8:	00db      	lsls	r3, r3, #3
 800d6ea:	440b      	add	r3, r1
 800d6ec:	3312      	adds	r3, #18
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	8bba      	ldrh	r2, [r7, #28]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d845      	bhi.n	800d782 <etharp_find_entry+0x18a>
            old_queue = i;
 800d6f6:	8c3b      	ldrh	r3, [r7, #32]
 800d6f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d6fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6fe:	4973      	ldr	r1, [pc, #460]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d700:	4613      	mov	r3, r2
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	4413      	add	r3, r2
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	440b      	add	r3, r1
 800d70a:	3312      	adds	r3, #18
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	83bb      	strh	r3, [r7, #28]
 800d710:	e037      	b.n	800d782 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d716:	496d      	ldr	r1, [pc, #436]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d718:	4613      	mov	r3, r2
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	4413      	add	r3, r2
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	440b      	add	r3, r1
 800d722:	3312      	adds	r3, #18
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	8b7a      	ldrh	r2, [r7, #26]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d82a      	bhi.n	800d782 <etharp_find_entry+0x18a>
            old_pending = i;
 800d72c:	8c3b      	ldrh	r3, [r7, #32]
 800d72e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d734:	4965      	ldr	r1, [pc, #404]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d736:	4613      	mov	r3, r2
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	4413      	add	r3, r2
 800d73c:	00db      	lsls	r3, r3, #3
 800d73e:	440b      	add	r3, r1
 800d740:	3312      	adds	r3, #18
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	837b      	strh	r3, [r7, #26]
 800d746:	e01c      	b.n	800d782 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d748:	7dfb      	ldrb	r3, [r7, #23]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d919      	bls.n	800d782 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d74e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d752:	495e      	ldr	r1, [pc, #376]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d754:	4613      	mov	r3, r2
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	4413      	add	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	440b      	add	r3, r1
 800d75e:	3312      	adds	r3, #18
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	8b3a      	ldrh	r2, [r7, #24]
 800d764:	429a      	cmp	r2, r3
 800d766:	d80c      	bhi.n	800d782 <etharp_find_entry+0x18a>
            old_stable = i;
 800d768:	8c3b      	ldrh	r3, [r7, #32]
 800d76a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d76c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d770:	4956      	ldr	r1, [pc, #344]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d772:	4613      	mov	r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	4413      	add	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	440b      	add	r3, r1
 800d77c:	3312      	adds	r3, #18
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d782:	8c3b      	ldrh	r3, [r7, #32]
 800d784:	3301      	adds	r3, #1
 800d786:	b29b      	uxth	r3, r3
 800d788:	843b      	strh	r3, [r7, #32]
 800d78a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d78e:	2b09      	cmp	r3, #9
 800d790:	f77f af4c 	ble.w	800d62c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d108      	bne.n	800d7b0 <etharp_find_entry+0x1b8>
 800d79e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7a2:	2b0a      	cmp	r3, #10
 800d7a4:	d107      	bne.n	800d7b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7a6:	7afb      	ldrb	r3, [r7, #11]
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d102      	bne.n	800d7b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b4:	e085      	b.n	800d8c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d7b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7ba:	2b09      	cmp	r3, #9
 800d7bc:	dc02      	bgt.n	800d7c4 <etharp_find_entry+0x1cc>
    i = empty;
 800d7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7c0:	843b      	strh	r3, [r7, #32]
 800d7c2:	e039      	b.n	800d838 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d7c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d7c8:	2b09      	cmp	r3, #9
 800d7ca:	dc14      	bgt.n	800d7f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7d4:	493d      	ldr	r1, [pc, #244]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	4413      	add	r3, r2
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	440b      	add	r3, r1
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d018      	beq.n	800d818 <etharp_find_entry+0x220>
 800d7e6:	4b3a      	ldr	r3, [pc, #232]	; (800d8d0 <etharp_find_entry+0x2d8>)
 800d7e8:	f240 126d 	movw	r2, #365	; 0x16d
 800d7ec:	493b      	ldr	r1, [pc, #236]	; (800d8dc <etharp_find_entry+0x2e4>)
 800d7ee:	483a      	ldr	r0, [pc, #232]	; (800d8d8 <etharp_find_entry+0x2e0>)
 800d7f0:	f002 fb26 	bl	800fe40 <iprintf>
 800d7f4:	e010      	b.n	800d818 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d7f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	dc02      	bgt.n	800d804 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d7fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d800:	843b      	strh	r3, [r7, #32]
 800d802:	e009      	b.n	800d818 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d804:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d808:	2b09      	cmp	r3, #9
 800d80a:	dc02      	bgt.n	800d812 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d80c:	8bfb      	ldrh	r3, [r7, #30]
 800d80e:	843b      	strh	r3, [r7, #32]
 800d810:	e002      	b.n	800d818 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d812:	f04f 33ff 	mov.w	r3, #4294967295
 800d816:	e054      	b.n	800d8c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d818:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d81c:	2b09      	cmp	r3, #9
 800d81e:	dd06      	ble.n	800d82e <etharp_find_entry+0x236>
 800d820:	4b2b      	ldr	r3, [pc, #172]	; (800d8d0 <etharp_find_entry+0x2d8>)
 800d822:	f240 127f 	movw	r2, #383	; 0x17f
 800d826:	492e      	ldr	r1, [pc, #184]	; (800d8e0 <etharp_find_entry+0x2e8>)
 800d828:	482b      	ldr	r0, [pc, #172]	; (800d8d8 <etharp_find_entry+0x2e0>)
 800d82a:	f002 fb09 	bl	800fe40 <iprintf>
    etharp_free_entry(i);
 800d82e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fe06 	bl	800d444 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d838:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d83c:	2b09      	cmp	r3, #9
 800d83e:	dd06      	ble.n	800d84e <etharp_find_entry+0x256>
 800d840:	4b23      	ldr	r3, [pc, #140]	; (800d8d0 <etharp_find_entry+0x2d8>)
 800d842:	f240 1283 	movw	r2, #387	; 0x183
 800d846:	4926      	ldr	r1, [pc, #152]	; (800d8e0 <etharp_find_entry+0x2e8>)
 800d848:	4823      	ldr	r0, [pc, #140]	; (800d8d8 <etharp_find_entry+0x2e0>)
 800d84a:	f002 faf9 	bl	800fe40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d84e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d852:	491e      	ldr	r1, [pc, #120]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d854:	4613      	mov	r3, r2
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	4413      	add	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	440b      	add	r3, r1
 800d85e:	3314      	adds	r3, #20
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <etharp_find_entry+0x27c>
 800d866:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <etharp_find_entry+0x2d8>)
 800d868:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d86c:	491d      	ldr	r1, [pc, #116]	; (800d8e4 <etharp_find_entry+0x2ec>)
 800d86e:	481a      	ldr	r0, [pc, #104]	; (800d8d8 <etharp_find_entry+0x2e0>)
 800d870:	f002 fae6 	bl	800fe40 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d87a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6819      	ldr	r1, [r3, #0]
 800d882:	4812      	ldr	r0, [pc, #72]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d884:	4613      	mov	r3, r2
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	4413      	add	r3, r2
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	4403      	add	r3, r0
 800d88e:	3304      	adds	r3, #4
 800d890:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d896:	490d      	ldr	r1, [pc, #52]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d898:	4613      	mov	r3, r2
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	4413      	add	r3, r2
 800d89e:	00db      	lsls	r3, r3, #3
 800d8a0:	440b      	add	r3, r1
 800d8a2:	3312      	adds	r3, #18
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d8a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8ac:	4907      	ldr	r1, [pc, #28]	; (800d8cc <etharp_find_entry+0x2d4>)
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	4413      	add	r3, r2
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	440b      	add	r3, r1
 800d8b8:	3308      	adds	r3, #8
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d8be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3728      	adds	r7, #40	; 0x28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	2000010c 	.word	0x2000010c
 800d8d0:	08013294 	.word	0x08013294
 800d8d4:	080132cc 	.word	0x080132cc
 800d8d8:	0801330c 	.word	0x0801330c
 800d8dc:	08013334 	.word	0x08013334
 800d8e0:	0801334c 	.word	0x0801334c
 800d8e4:	08013360 	.word	0x08013360

0800d8e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8fc:	2b06      	cmp	r3, #6
 800d8fe:	d006      	beq.n	800d90e <etharp_update_arp_entry+0x26>
 800d900:	4b48      	ldr	r3, [pc, #288]	; (800da24 <etharp_update_arp_entry+0x13c>)
 800d902:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d906:	4948      	ldr	r1, [pc, #288]	; (800da28 <etharp_update_arp_entry+0x140>)
 800d908:	4848      	ldr	r0, [pc, #288]	; (800da2c <etharp_update_arp_entry+0x144>)
 800d90a:	f002 fa99 	bl	800fe40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d012      	beq.n	800d93a <etharp_update_arp_entry+0x52>
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00e      	beq.n	800d93a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68f9      	ldr	r1, [r7, #12]
 800d922:	4618      	mov	r0, r3
 800d924:	f001 f8fe 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800d928:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d105      	bne.n	800d93a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d936:	2be0      	cmp	r3, #224	; 0xe0
 800d938:	d102      	bne.n	800d940 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d93a:	f06f 030f 	mvn.w	r3, #15
 800d93e:	e06c      	b.n	800da1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	4619      	mov	r1, r3
 800d946:	68b8      	ldr	r0, [r7, #8]
 800d948:	f7ff fe56 	bl	800d5f8 <etharp_find_entry>
 800d94c:	4603      	mov	r3, r0
 800d94e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d950:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d954:	2b00      	cmp	r3, #0
 800d956:	da02      	bge.n	800d95e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d958:	8afb      	ldrh	r3, [r7, #22]
 800d95a:	b25b      	sxtb	r3, r3
 800d95c:	e05d      	b.n	800da1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d95e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d962:	4933      	ldr	r1, [pc, #204]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d964:	4613      	mov	r3, r2
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	4413      	add	r3, r2
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	440b      	add	r3, r1
 800d96e:	3314      	adds	r3, #20
 800d970:	2202      	movs	r2, #2
 800d972:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d978:	492d      	ldr	r1, [pc, #180]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d97a:	4613      	mov	r3, r2
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	4413      	add	r3, r2
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	440b      	add	r3, r1
 800d984:	3308      	adds	r3, #8
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d98a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d98e:	4613      	mov	r3, r2
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4413      	add	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	3308      	adds	r3, #8
 800d998:	4a25      	ldr	r2, [pc, #148]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d99a:	4413      	add	r3, r2
 800d99c:	3304      	adds	r3, #4
 800d99e:	2206      	movs	r2, #6
 800d9a0:	6879      	ldr	r1, [r7, #4]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fa36 	bl	800fe14 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d9a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9ac:	4920      	ldr	r1, [pc, #128]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	4413      	add	r3, r2
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	440b      	add	r3, r1
 800d9b8:	3312      	adds	r3, #18
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d9be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9c2:	491b      	ldr	r1, [pc, #108]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	440b      	add	r3, r1
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d021      	beq.n	800da18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d9d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9d8:	4915      	ldr	r1, [pc, #84]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d9da:	4613      	mov	r3, r2
 800d9dc:	005b      	lsls	r3, r3, #1
 800d9de:	4413      	add	r3, r2
 800d9e0:	00db      	lsls	r3, r3, #3
 800d9e2:	440b      	add	r3, r1
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d9e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9ec:	4910      	ldr	r1, [pc, #64]	; (800da30 <etharp_update_arp_entry+0x148>)
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	4413      	add	r3, r2
 800d9f4:	00db      	lsls	r3, r3, #3
 800d9f6:	440b      	add	r3, r1
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800da02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6939      	ldr	r1, [r7, #16]
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f001 ff91 	bl	800f934 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da12:	6938      	ldr	r0, [r7, #16]
 800da14:	f7f8 ff24 	bl	8006860 <pbuf_free>
  }
  return ERR_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	08013294 	.word	0x08013294
 800da28:	0801338c 	.word	0x0801338c
 800da2c:	0801330c 	.word	0x0801330c
 800da30:	2000010c 	.word	0x2000010c

0800da34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e01e      	b.n	800da80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800da42:	4913      	ldr	r1, [pc, #76]	; (800da90 <etharp_cleanup_netif+0x5c>)
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	4613      	mov	r3, r2
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	440b      	add	r3, r1
 800da50:	3314      	adds	r3, #20
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da56:	7afb      	ldrb	r3, [r7, #11]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00e      	beq.n	800da7a <etharp_cleanup_netif+0x46>
 800da5c:	490c      	ldr	r1, [pc, #48]	; (800da90 <etharp_cleanup_netif+0x5c>)
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	4613      	mov	r3, r2
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	4413      	add	r3, r2
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	440b      	add	r3, r1
 800da6a:	3308      	adds	r3, #8
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	429a      	cmp	r2, r3
 800da72:	d102      	bne.n	800da7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f7ff fce5 	bl	800d444 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3301      	adds	r3, #1
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b09      	cmp	r3, #9
 800da84:	dddd      	ble.n	800da42 <etharp_cleanup_netif+0xe>
    }
  }
}
 800da86:	bf00      	nop
 800da88:	bf00      	nop
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	2000010c 	.word	0x2000010c

0800da94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800da94:	b5b0      	push	{r4, r5, r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af04      	add	r7, sp, #16
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d107      	bne.n	800dab4 <etharp_input+0x20>
 800daa4:	4b3d      	ldr	r3, [pc, #244]	; (800db9c <etharp_input+0x108>)
 800daa6:	f240 228a 	movw	r2, #650	; 0x28a
 800daaa:	493d      	ldr	r1, [pc, #244]	; (800dba0 <etharp_input+0x10c>)
 800daac:	483d      	ldr	r0, [pc, #244]	; (800dba4 <etharp_input+0x110>)
 800daae:	f002 f9c7 	bl	800fe40 <iprintf>
 800dab2:	e06f      	b.n	800db94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	881b      	ldrh	r3, [r3, #0]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac4:	d10c      	bne.n	800dae0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800daca:	2b06      	cmp	r3, #6
 800dacc:	d108      	bne.n	800dae0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dad2:	2b04      	cmp	r3, #4
 800dad4:	d104      	bne.n	800dae0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	885b      	ldrh	r3, [r3, #2]
 800dada:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dadc:	2b08      	cmp	r3, #8
 800dade:	d003      	beq.n	800dae8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7f8 febd 	bl	8006860 <pbuf_free>
    return;
 800dae6:	e055      	b.n	800db94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	330e      	adds	r3, #14
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	3318      	adds	r3, #24
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	3304      	adds	r3, #4
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d102      	bne.n	800db08 <etharp_input+0x74>
    for_us = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	75fb      	strb	r3, [r7, #23]
 800db06:	e009      	b.n	800db1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	3304      	adds	r3, #4
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	bf0c      	ite	eq
 800db14:	2301      	moveq	r3, #1
 800db16:	2300      	movne	r3, #0
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f103 0208 	add.w	r2, r3, #8
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <etharp_input+0x98>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <etharp_input+0x9a>
 800db2c:	2302      	movs	r3, #2
 800db2e:	f107 010c 	add.w	r1, r7, #12
 800db32:	6838      	ldr	r0, [r7, #0]
 800db34:	f7ff fed8 	bl	800d8e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	88db      	ldrh	r3, [r3, #6]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db42:	d003      	beq.n	800db4c <etharp_input+0xb8>
 800db44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db48:	d01e      	beq.n	800db88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800db4a:	e020      	b.n	800db8e <etharp_input+0xfa>
      if (for_us) {
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d01c      	beq.n	800db8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800db6c:	2102      	movs	r1, #2
 800db6e:	9103      	str	r1, [sp, #12]
 800db70:	f107 010c 	add.w	r1, r7, #12
 800db74:	9102      	str	r1, [sp, #8]
 800db76:	9201      	str	r2, [sp, #4]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	462b      	mov	r3, r5
 800db7c:	4622      	mov	r2, r4
 800db7e:	4601      	mov	r1, r0
 800db80:	6838      	ldr	r0, [r7, #0]
 800db82:	f000 faeb 	bl	800e15c <etharp_raw>
      break;
 800db86:	e001      	b.n	800db8c <etharp_input+0xf8>
      break;
 800db88:	bf00      	nop
 800db8a:	e000      	b.n	800db8e <etharp_input+0xfa>
      break;
 800db8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f8 fe66 	bl	8006860 <pbuf_free>
}
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bdb0      	pop	{r4, r5, r7, pc}
 800db9a:	bf00      	nop
 800db9c:	08013294 	.word	0x08013294
 800dba0:	080133e4 	.word	0x080133e4
 800dba4:	0801330c 	.word	0x0801330c

0800dba8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af02      	add	r7, sp, #8
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dbb6:	79fa      	ldrb	r2, [r7, #7]
 800dbb8:	4944      	ldr	r1, [pc, #272]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dbba:	4613      	mov	r3, r2
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	440b      	add	r3, r1
 800dbc4:	3314      	adds	r3, #20
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d806      	bhi.n	800dbda <etharp_output_to_arp_index+0x32>
 800dbcc:	4b40      	ldr	r3, [pc, #256]	; (800dcd0 <etharp_output_to_arp_index+0x128>)
 800dbce:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dbd2:	4940      	ldr	r1, [pc, #256]	; (800dcd4 <etharp_output_to_arp_index+0x12c>)
 800dbd4:	4840      	ldr	r0, [pc, #256]	; (800dcd8 <etharp_output_to_arp_index+0x130>)
 800dbd6:	f002 f933 	bl	800fe40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dbda:	79fa      	ldrb	r2, [r7, #7]
 800dbdc:	493b      	ldr	r1, [pc, #236]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dbde:	4613      	mov	r3, r2
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	4413      	add	r3, r2
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3314      	adds	r3, #20
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d153      	bne.n	800dc98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dbf0:	79fa      	ldrb	r2, [r7, #7]
 800dbf2:	4936      	ldr	r1, [pc, #216]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	4413      	add	r3, r2
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	440b      	add	r3, r1
 800dbfe:	3312      	adds	r3, #18
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dc06:	d919      	bls.n	800dc3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc08:	79fa      	ldrb	r2, [r7, #7]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4413      	add	r3, r2
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	4a2e      	ldr	r2, [pc, #184]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc14:	4413      	add	r3, r2
 800dc16:	3304      	adds	r3, #4
 800dc18:	4619      	mov	r1, r3
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f000 fb4c 	bl	800e2b8 <etharp_request>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d138      	bne.n	800dc98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc26:	79fa      	ldrb	r2, [r7, #7]
 800dc28:	4928      	ldr	r1, [pc, #160]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	4413      	add	r3, r2
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	440b      	add	r3, r1
 800dc34:	3314      	adds	r3, #20
 800dc36:	2203      	movs	r2, #3
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	e02d      	b.n	800dc98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc3c:	79fa      	ldrb	r2, [r7, #7]
 800dc3e:	4923      	ldr	r1, [pc, #140]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc40:	4613      	mov	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4413      	add	r3, r2
 800dc46:	00db      	lsls	r3, r3, #3
 800dc48:	440b      	add	r3, r1
 800dc4a:	3312      	adds	r3, #18
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dc52:	d321      	bcc.n	800dc98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc54:	79fa      	ldrb	r2, [r7, #7]
 800dc56:	4613      	mov	r3, r2
 800dc58:	005b      	lsls	r3, r3, #1
 800dc5a:	4413      	add	r3, r2
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	4a1b      	ldr	r2, [pc, #108]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc60:	4413      	add	r3, r2
 800dc62:	1d19      	adds	r1, r3, #4
 800dc64:	79fa      	ldrb	r2, [r7, #7]
 800dc66:	4613      	mov	r3, r2
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	4413      	add	r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	3308      	adds	r3, #8
 800dc70:	4a16      	ldr	r2, [pc, #88]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc72:	4413      	add	r3, r2
 800dc74:	3304      	adds	r3, #4
 800dc76:	461a      	mov	r2, r3
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f000 fafb 	bl	800e274 <etharp_request_dst>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d109      	bne.n	800dc98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc84:	79fa      	ldrb	r2, [r7, #7]
 800dc86:	4911      	ldr	r1, [pc, #68]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dc88:	4613      	mov	r3, r2
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	440b      	add	r3, r1
 800dc92:	3314      	adds	r3, #20
 800dc94:	2203      	movs	r2, #3
 800dc96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dc9e:	79fa      	ldrb	r2, [r7, #7]
 800dca0:	4613      	mov	r3, r2
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	4413      	add	r3, r2
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	3308      	adds	r3, #8
 800dcaa:	4a08      	ldr	r2, [pc, #32]	; (800dccc <etharp_output_to_arp_index+0x124>)
 800dcac:	4413      	add	r3, r2
 800dcae:	3304      	adds	r3, #4
 800dcb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcb4:	9200      	str	r2, [sp, #0]
 800dcb6:	460a      	mov	r2, r1
 800dcb8:	68b9      	ldr	r1, [r7, #8]
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f001 fe3a 	bl	800f934 <ethernet_output>
 800dcc0:	4603      	mov	r3, r0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	2000010c 	.word	0x2000010c
 800dcd0:	08013294 	.word	0x08013294
 800dcd4:	08013404 	.word	0x08013404
 800dcd8:	0801330c 	.word	0x0801330c

0800dcdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08a      	sub	sp, #40	; 0x28
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d106      	bne.n	800dd00 <etharp_output+0x24>
 800dcf2:	4b73      	ldr	r3, [pc, #460]	; (800dec0 <etharp_output+0x1e4>)
 800dcf4:	f240 321e 	movw	r2, #798	; 0x31e
 800dcf8:	4972      	ldr	r1, [pc, #456]	; (800dec4 <etharp_output+0x1e8>)
 800dcfa:	4873      	ldr	r0, [pc, #460]	; (800dec8 <etharp_output+0x1ec>)
 800dcfc:	f002 f8a0 	bl	800fe40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <etharp_output+0x38>
 800dd06:	4b6e      	ldr	r3, [pc, #440]	; (800dec0 <etharp_output+0x1e4>)
 800dd08:	f240 321f 	movw	r2, #799	; 0x31f
 800dd0c:	496f      	ldr	r1, [pc, #444]	; (800decc <etharp_output+0x1f0>)
 800dd0e:	486e      	ldr	r0, [pc, #440]	; (800dec8 <etharp_output+0x1ec>)
 800dd10:	f002 f896 	bl	800fe40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <etharp_output+0x4c>
 800dd1a:	4b69      	ldr	r3, [pc, #420]	; (800dec0 <etharp_output+0x1e4>)
 800dd1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dd20:	496b      	ldr	r1, [pc, #428]	; (800ded0 <etharp_output+0x1f4>)
 800dd22:	4869      	ldr	r0, [pc, #420]	; (800dec8 <etharp_output+0x1ec>)
 800dd24:	f002 f88c 	bl	800fe40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 fef8 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd3a:	4b66      	ldr	r3, [pc, #408]	; (800ded4 <etharp_output+0x1f8>)
 800dd3c:	61fb      	str	r3, [r7, #28]
 800dd3e:	e0af      	b.n	800dea0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd48:	2be0      	cmp	r3, #224	; 0xe0
 800dd4a:	d118      	bne.n	800dd7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd50:	2300      	movs	r3, #0
 800dd52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd54:	235e      	movs	r3, #94	; 0x5e
 800dd56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3302      	adds	r3, #2
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3303      	adds	r3, #3
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dd76:	f107 0310 	add.w	r3, r7, #16
 800dd7a:	61fb      	str	r3, [r7, #28]
 800dd7c:	e090      	b.n	800dea0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	3304      	adds	r3, #4
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	405a      	eors	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3308      	adds	r3, #8
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4013      	ands	r3, r2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d012      	beq.n	800ddbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00b      	beq.n	800ddbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	330c      	adds	r3, #12
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	330c      	adds	r3, #12
 800ddb2:	61bb      	str	r3, [r7, #24]
 800ddb4:	e002      	b.n	800ddbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ddb6:	f06f 0303 	mvn.w	r3, #3
 800ddba:	e07d      	b.n	800deb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddbc:	4b46      	ldr	r3, [pc, #280]	; (800ded8 <etharp_output+0x1fc>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4a46      	ldr	r2, [pc, #280]	; (800dedc <etharp_output+0x200>)
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	440b      	add	r3, r1
 800ddca:	00db      	lsls	r3, r3, #3
 800ddcc:	4413      	add	r3, r2
 800ddce:	3314      	adds	r3, #20
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d925      	bls.n	800de22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ddd6:	4b40      	ldr	r3, [pc, #256]	; (800ded8 <etharp_output+0x1fc>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	4619      	mov	r1, r3
 800dddc:	4a3f      	ldr	r2, [pc, #252]	; (800dedc <etharp_output+0x200>)
 800ddde:	460b      	mov	r3, r1
 800dde0:	005b      	lsls	r3, r3, #1
 800dde2:	440b      	add	r3, r1
 800dde4:	00db      	lsls	r3, r3, #3
 800dde6:	4413      	add	r3, r2
 800dde8:	3308      	adds	r3, #8
 800ddea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d117      	bne.n	800de22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	4b38      	ldr	r3, [pc, #224]	; (800ded8 <etharp_output+0x1fc>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	4937      	ldr	r1, [pc, #220]	; (800dedc <etharp_output+0x200>)
 800ddfe:	4603      	mov	r3, r0
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	4403      	add	r3, r0
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	3304      	adds	r3, #4
 800de0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d108      	bne.n	800de22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de10:	4b31      	ldr	r3, [pc, #196]	; (800ded8 <etharp_output+0x1fc>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	461a      	mov	r2, r3
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff fec5 	bl	800dba8 <etharp_output_to_arp_index>
 800de1e:	4603      	mov	r3, r0
 800de20:	e04a      	b.n	800deb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de22:	2300      	movs	r3, #0
 800de24:	75fb      	strb	r3, [r7, #23]
 800de26:	e031      	b.n	800de8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de28:	7dfa      	ldrb	r2, [r7, #23]
 800de2a:	492c      	ldr	r1, [pc, #176]	; (800dedc <etharp_output+0x200>)
 800de2c:	4613      	mov	r3, r2
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	4413      	add	r3, r2
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	440b      	add	r3, r1
 800de36:	3314      	adds	r3, #20
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d923      	bls.n	800de86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800de3e:	7dfa      	ldrb	r2, [r7, #23]
 800de40:	4926      	ldr	r1, [pc, #152]	; (800dedc <etharp_output+0x200>)
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	440b      	add	r3, r1
 800de4c:	3308      	adds	r3, #8
 800de4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	429a      	cmp	r2, r3
 800de54:	d117      	bne.n	800de86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	6819      	ldr	r1, [r3, #0]
 800de5a:	7dfa      	ldrb	r2, [r7, #23]
 800de5c:	481f      	ldr	r0, [pc, #124]	; (800dedc <etharp_output+0x200>)
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	4403      	add	r3, r0
 800de68:	3304      	adds	r3, #4
 800de6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800de6c:	4299      	cmp	r1, r3
 800de6e:	d10a      	bne.n	800de86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800de70:	4a19      	ldr	r2, [pc, #100]	; (800ded8 <etharp_output+0x1fc>)
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	461a      	mov	r2, r3
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff fe93 	bl	800dba8 <etharp_output_to_arp_index>
 800de82:	4603      	mov	r3, r0
 800de84:	e018      	b.n	800deb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	3301      	adds	r3, #1
 800de8a:	75fb      	strb	r3, [r7, #23]
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	2b09      	cmp	r3, #9
 800de90:	d9ca      	bls.n	800de28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	69b9      	ldr	r1, [r7, #24]
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f000 f822 	bl	800dee0 <etharp_query>
 800de9c:	4603      	mov	r3, r0
 800de9e:	e00b      	b.n	800deb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f001 fd3f 	bl	800f934 <ethernet_output>
 800deb6:	4603      	mov	r3, r0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3720      	adds	r7, #32
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	08013294 	.word	0x08013294
 800dec4:	080133e4 	.word	0x080133e4
 800dec8:	0801330c 	.word	0x0801330c
 800decc:	08013434 	.word	0x08013434
 800ded0:	080133d4 	.word	0x080133d4
 800ded4:	08013ac0 	.word	0x08013ac0
 800ded8:	200001fc 	.word	0x200001fc
 800dedc:	2000010c 	.word	0x2000010c

0800dee0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08c      	sub	sp, #48	; 0x30
 800dee4:	af02      	add	r7, sp, #8
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3326      	adds	r3, #38	; 0x26
 800def0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800def2:	23ff      	movs	r3, #255	; 0xff
 800def4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fe0e 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10c      	bne.n	800df28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df16:	2be0      	cmp	r3, #224	; 0xe0
 800df18:	d006      	beq.n	800df28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d102      	bne.n	800df2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df28:	f06f 030f 	mvn.w	r3, #15
 800df2c:	e101      	b.n	800e132 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	2101      	movs	r1, #1
 800df32:	68b8      	ldr	r0, [r7, #8]
 800df34:	f7ff fb60 	bl	800d5f8 <etharp_find_entry>
 800df38:	4603      	mov	r3, r0
 800df3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800df3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df40:	2b00      	cmp	r3, #0
 800df42:	da02      	bge.n	800df4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800df44:	8a7b      	ldrh	r3, [r7, #18]
 800df46:	b25b      	sxtb	r3, r3
 800df48:	e0f3      	b.n	800e132 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800df4a:	8a7b      	ldrh	r3, [r7, #18]
 800df4c:	2b7e      	cmp	r3, #126	; 0x7e
 800df4e:	d906      	bls.n	800df5e <etharp_query+0x7e>
 800df50:	4b7a      	ldr	r3, [pc, #488]	; (800e13c <etharp_query+0x25c>)
 800df52:	f240 32c1 	movw	r2, #961	; 0x3c1
 800df56:	497a      	ldr	r1, [pc, #488]	; (800e140 <etharp_query+0x260>)
 800df58:	487a      	ldr	r0, [pc, #488]	; (800e144 <etharp_query+0x264>)
 800df5a:	f001 ff71 	bl	800fe40 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800df5e:	8a7b      	ldrh	r3, [r7, #18]
 800df60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df62:	7c7a      	ldrb	r2, [r7, #17]
 800df64:	4978      	ldr	r1, [pc, #480]	; (800e148 <etharp_query+0x268>)
 800df66:	4613      	mov	r3, r2
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	4413      	add	r3, r2
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	440b      	add	r3, r1
 800df70:	3314      	adds	r3, #20
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d115      	bne.n	800dfa4 <etharp_query+0xc4>
    is_new_entry = 1;
 800df78:	2301      	movs	r3, #1
 800df7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df7c:	7c7a      	ldrb	r2, [r7, #17]
 800df7e:	4972      	ldr	r1, [pc, #456]	; (800e148 <etharp_query+0x268>)
 800df80:	4613      	mov	r3, r2
 800df82:	005b      	lsls	r3, r3, #1
 800df84:	4413      	add	r3, r2
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	440b      	add	r3, r1
 800df8a:	3314      	adds	r3, #20
 800df8c:	2201      	movs	r2, #1
 800df8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800df90:	7c7a      	ldrb	r2, [r7, #17]
 800df92:	496d      	ldr	r1, [pc, #436]	; (800e148 <etharp_query+0x268>)
 800df94:	4613      	mov	r3, r2
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	4413      	add	r3, r2
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	440b      	add	r3, r1
 800df9e:	3308      	adds	r3, #8
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dfa4:	7c7a      	ldrb	r2, [r7, #17]
 800dfa6:	4968      	ldr	r1, [pc, #416]	; (800e148 <etharp_query+0x268>)
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	4413      	add	r3, r2
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	440b      	add	r3, r1
 800dfb2:	3314      	adds	r3, #20
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d011      	beq.n	800dfde <etharp_query+0xfe>
 800dfba:	7c7a      	ldrb	r2, [r7, #17]
 800dfbc:	4962      	ldr	r1, [pc, #392]	; (800e148 <etharp_query+0x268>)
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	440b      	add	r3, r1
 800dfc8:	3314      	adds	r3, #20
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d806      	bhi.n	800dfde <etharp_query+0xfe>
 800dfd0:	4b5a      	ldr	r3, [pc, #360]	; (800e13c <etharp_query+0x25c>)
 800dfd2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800dfd6:	495d      	ldr	r1, [pc, #372]	; (800e14c <etharp_query+0x26c>)
 800dfd8:	485a      	ldr	r0, [pc, #360]	; (800e144 <etharp_query+0x264>)
 800dfda:	f001 ff31 	bl	800fe40 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <etharp_query+0x10a>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10c      	bne.n	800e004 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 f963 	bl	800e2b8 <etharp_request>
 800dff2:	4603      	mov	r3, r0
 800dff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <etharp_query+0x124>
      return result;
 800dffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e002:	e096      	b.n	800e132 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d106      	bne.n	800e018 <etharp_query+0x138>
 800e00a:	4b4c      	ldr	r3, [pc, #304]	; (800e13c <etharp_query+0x25c>)
 800e00c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e010:	494f      	ldr	r1, [pc, #316]	; (800e150 <etharp_query+0x270>)
 800e012:	484c      	ldr	r0, [pc, #304]	; (800e144 <etharp_query+0x264>)
 800e014:	f001 ff14 	bl	800fe40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e018:	7c7a      	ldrb	r2, [r7, #17]
 800e01a:	494b      	ldr	r1, [pc, #300]	; (800e148 <etharp_query+0x268>)
 800e01c:	4613      	mov	r3, r2
 800e01e:	005b      	lsls	r3, r3, #1
 800e020:	4413      	add	r3, r2
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	440b      	add	r3, r1
 800e026:	3314      	adds	r3, #20
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d917      	bls.n	800e05e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e02e:	4a49      	ldr	r2, [pc, #292]	; (800e154 <etharp_query+0x274>)
 800e030:	7c7b      	ldrb	r3, [r7, #17]
 800e032:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e034:	7c7a      	ldrb	r2, [r7, #17]
 800e036:	4613      	mov	r3, r2
 800e038:	005b      	lsls	r3, r3, #1
 800e03a:	4413      	add	r3, r2
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	3308      	adds	r3, #8
 800e040:	4a41      	ldr	r2, [pc, #260]	; (800e148 <etharp_query+0x268>)
 800e042:	4413      	add	r3, r2
 800e044:	3304      	adds	r3, #4
 800e046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e04a:	9200      	str	r2, [sp, #0]
 800e04c:	697a      	ldr	r2, [r7, #20]
 800e04e:	6879      	ldr	r1, [r7, #4]
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f001 fc6f 	bl	800f934 <ethernet_output>
 800e056:	4603      	mov	r3, r0
 800e058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e05c:	e067      	b.n	800e12e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e05e:	7c7a      	ldrb	r2, [r7, #17]
 800e060:	4939      	ldr	r1, [pc, #228]	; (800e148 <etharp_query+0x268>)
 800e062:	4613      	mov	r3, r2
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	4413      	add	r3, r2
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	440b      	add	r3, r1
 800e06c:	3314      	adds	r3, #20
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d15c      	bne.n	800e12e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e07c:	e01c      	b.n	800e0b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	895a      	ldrh	r2, [r3, #10]
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	891b      	ldrh	r3, [r3, #8]
 800e086:	429a      	cmp	r2, r3
 800e088:	d10a      	bne.n	800e0a0 <etharp_query+0x1c0>
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d006      	beq.n	800e0a0 <etharp_query+0x1c0>
 800e092:	4b2a      	ldr	r3, [pc, #168]	; (800e13c <etharp_query+0x25c>)
 800e094:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e098:	492f      	ldr	r1, [pc, #188]	; (800e158 <etharp_query+0x278>)
 800e09a:	482a      	ldr	r0, [pc, #168]	; (800e144 <etharp_query+0x264>)
 800e09c:	f001 fed0 	bl	800fe40 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	7b1b      	ldrb	r3, [r3, #12]
 800e0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <etharp_query+0x1d2>
        copy_needed = 1;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	61bb      	str	r3, [r7, #24]
        break;
 800e0b0:	e005      	b.n	800e0be <etharp_query+0x1de>
      }
      p = p->next;
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1df      	bne.n	800e07e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e0ca:	200e      	movs	r0, #14
 800e0cc:	f7f8 fe34 	bl	8006d38 <pbuf_clone>
 800e0d0:	61f8      	str	r0, [r7, #28]
 800e0d2:	e004      	b.n	800e0de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e0d8:	69f8      	ldr	r0, [r7, #28]
 800e0da:	f7f8 fc61 	bl	80069a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d021      	beq.n	800e128 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e0e4:	7c7a      	ldrb	r2, [r7, #17]
 800e0e6:	4918      	ldr	r1, [pc, #96]	; (800e148 <etharp_query+0x268>)
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	4413      	add	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	440b      	add	r3, r1
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00a      	beq.n	800e10e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e0f8:	7c7a      	ldrb	r2, [r7, #17]
 800e0fa:	4913      	ldr	r1, [pc, #76]	; (800e148 <etharp_query+0x268>)
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	4413      	add	r3, r2
 800e102:	00db      	lsls	r3, r3, #3
 800e104:	440b      	add	r3, r1
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4618      	mov	r0, r3
 800e10a:	f7f8 fba9 	bl	8006860 <pbuf_free>
      }
      arp_table[i].q = p;
 800e10e:	7c7a      	ldrb	r2, [r7, #17]
 800e110:	490d      	ldr	r1, [pc, #52]	; (800e148 <etharp_query+0x268>)
 800e112:	4613      	mov	r3, r2
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	4413      	add	r3, r2
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	440b      	add	r3, r1
 800e11c:	69fa      	ldr	r2, [r7, #28]
 800e11e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e126:	e002      	b.n	800e12e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e128:	23ff      	movs	r3, #255	; 0xff
 800e12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e12e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e132:	4618      	mov	r0, r3
 800e134:	3728      	adds	r7, #40	; 0x28
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	08013294 	.word	0x08013294
 800e140:	08013440 	.word	0x08013440
 800e144:	0801330c 	.word	0x0801330c
 800e148:	2000010c 	.word	0x2000010c
 800e14c:	08013450 	.word	0x08013450
 800e150:	08013434 	.word	0x08013434
 800e154:	200001fc 	.word	0x200001fc
 800e158:	08013478 	.word	0x08013478

0800e15c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08a      	sub	sp, #40	; 0x28
 800e160:	af02      	add	r7, sp, #8
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
 800e168:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d106      	bne.n	800e182 <etharp_raw+0x26>
 800e174:	4b3a      	ldr	r3, [pc, #232]	; (800e260 <etharp_raw+0x104>)
 800e176:	f240 4257 	movw	r2, #1111	; 0x457
 800e17a:	493a      	ldr	r1, [pc, #232]	; (800e264 <etharp_raw+0x108>)
 800e17c:	483a      	ldr	r0, [pc, #232]	; (800e268 <etharp_raw+0x10c>)
 800e17e:	f001 fe5f 	bl	800fe40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e182:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e186:	211c      	movs	r1, #28
 800e188:	200e      	movs	r0, #14
 800e18a:	f7f8 f885 	bl	8006298 <pbuf_alloc>
 800e18e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e196:	f04f 33ff 	mov.w	r3, #4294967295
 800e19a:	e05d      	b.n	800e258 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	895b      	ldrh	r3, [r3, #10]
 800e1a0:	2b1b      	cmp	r3, #27
 800e1a2:	d806      	bhi.n	800e1b2 <etharp_raw+0x56>
 800e1a4:	4b2e      	ldr	r3, [pc, #184]	; (800e260 <etharp_raw+0x104>)
 800e1a6:	f240 4262 	movw	r2, #1122	; 0x462
 800e1aa:	4930      	ldr	r1, [pc, #192]	; (800e26c <etharp_raw+0x110>)
 800e1ac:	482e      	ldr	r0, [pc, #184]	; (800e268 <etharp_raw+0x10c>)
 800e1ae:	f001 fe47 	bl	800fe40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e1b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7f7 f89c 	bl	80052f8 <lwip_htons>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e1ce:	2b06      	cmp	r3, #6
 800e1d0:	d006      	beq.n	800e1e0 <etharp_raw+0x84>
 800e1d2:	4b23      	ldr	r3, [pc, #140]	; (800e260 <etharp_raw+0x104>)
 800e1d4:	f240 4269 	movw	r2, #1129	; 0x469
 800e1d8:	4925      	ldr	r1, [pc, #148]	; (800e270 <etharp_raw+0x114>)
 800e1da:	4823      	ldr	r0, [pc, #140]	; (800e268 <etharp_raw+0x10c>)
 800e1dc:	f001 fe30 	bl	800fe40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	2206      	movs	r2, #6
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f001 fe13 	bl	800fe14 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	3312      	adds	r3, #18
 800e1f2:	2206      	movs	r2, #6
 800e1f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f001 fe0c 	bl	800fe14 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	330e      	adds	r3, #14
 800e200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e202:	6812      	ldr	r2, [r2, #0]
 800e204:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	3318      	adds	r3, #24
 800e20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20c:	6812      	ldr	r2, [r2, #0]
 800e20e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2200      	movs	r2, #0
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	2200      	movs	r2, #0
 800e218:	f042 0201 	orr.w	r2, r2, #1
 800e21c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2200      	movs	r2, #0
 800e222:	f042 0208 	orr.w	r2, r2, #8
 800e226:	709a      	strb	r2, [r3, #2]
 800e228:	2200      	movs	r2, #0
 800e22a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2206      	movs	r2, #6
 800e230:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2204      	movs	r2, #4
 800e236:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e238:	f640 0306 	movw	r3, #2054	; 0x806
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	69b9      	ldr	r1, [r7, #24]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f001 fb75 	bl	800f934 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e24a:	69b8      	ldr	r0, [r7, #24]
 800e24c:	f7f8 fb08 	bl	8006860 <pbuf_free>
  p = NULL;
 800e250:	2300      	movs	r3, #0
 800e252:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e254:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3720      	adds	r7, #32
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	08013294 	.word	0x08013294
 800e264:	080133e4 	.word	0x080133e4
 800e268:	0801330c 	.word	0x0801330c
 800e26c:	08013494 	.word	0x08013494
 800e270:	080134c8 	.word	0x080134c8

0800e274 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af04      	add	r7, sp, #16
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e290:	2201      	movs	r2, #1
 800e292:	9203      	str	r2, [sp, #12]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	9202      	str	r2, [sp, #8]
 800e298:	4a06      	ldr	r2, [pc, #24]	; (800e2b4 <etharp_request_dst+0x40>)
 800e29a:	9201      	str	r2, [sp, #4]
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	4603      	mov	r3, r0
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff ff5a 	bl	800e15c <etharp_raw>
 800e2a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	08013ac8 	.word	0x08013ac8

0800e2b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e2c2:	4a05      	ldr	r2, [pc, #20]	; (800e2d8 <etharp_request+0x20>)
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ffd4 	bl	800e274 <etharp_request_dst>
 800e2cc:	4603      	mov	r3, r0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	08013ac0 	.word	0x08013ac0

0800e2dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08e      	sub	sp, #56	; 0x38
 800e2e0:	af04      	add	r7, sp, #16
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e2e6:	4b79      	ldr	r3, [pc, #484]	; (800e4cc <icmp_input+0x1f0>)
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	f003 030f 	and.w	r3, r3, #15
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2fe:	2b13      	cmp	r3, #19
 800e300:	f240 80cd 	bls.w	800e49e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	895b      	ldrh	r3, [r3, #10]
 800e308:	2b03      	cmp	r3, #3
 800e30a:	f240 80ca 	bls.w	800e4a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e318:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 80b7 	beq.w	800e490 <icmp_input+0x1b4>
 800e322:	2b08      	cmp	r3, #8
 800e324:	f040 80b7 	bne.w	800e496 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e328:	4b69      	ldr	r3, [pc, #420]	; (800e4d0 <icmp_input+0x1f4>)
 800e32a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e32c:	4b67      	ldr	r3, [pc, #412]	; (800e4cc <icmp_input+0x1f0>)
 800e32e:	695b      	ldr	r3, [r3, #20]
 800e330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e334:	2be0      	cmp	r3, #224	; 0xe0
 800e336:	f000 80bb 	beq.w	800e4b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e33a:	4b64      	ldr	r3, [pc, #400]	; (800e4cc <icmp_input+0x1f0>)
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	4a63      	ldr	r2, [pc, #396]	; (800e4cc <icmp_input+0x1f0>)
 800e340:	6812      	ldr	r2, [r2, #0]
 800e342:	4611      	mov	r1, r2
 800e344:	4618      	mov	r0, r3
 800e346:	f000 fbed 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f040 80b1 	bne.w	800e4b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	891b      	ldrh	r3, [r3, #8]
 800e356:	2b07      	cmp	r3, #7
 800e358:	f240 80a5 	bls.w	800e4a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e35c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e35e:	330e      	adds	r3, #14
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7f8 f9e6 	bl	8006734 <pbuf_add_header>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d04b      	beq.n	800e406 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	891a      	ldrh	r2, [r3, #8]
 800e372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e374:	4413      	add	r3, r2
 800e376:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	891b      	ldrh	r3, [r3, #8]
 800e37c:	8b7a      	ldrh	r2, [r7, #26]
 800e37e:	429a      	cmp	r2, r3
 800e380:	f0c0 809a 	bcc.w	800e4b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e384:	8b7b      	ldrh	r3, [r7, #26]
 800e386:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e38a:	4619      	mov	r1, r3
 800e38c:	200e      	movs	r0, #14
 800e38e:	f7f7 ff83 	bl	8006298 <pbuf_alloc>
 800e392:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 8090 	beq.w	800e4bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	895b      	ldrh	r3, [r3, #10]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3a4:	3308      	adds	r3, #8
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d203      	bcs.n	800e3b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e3aa:	6978      	ldr	r0, [r7, #20]
 800e3ac:	f7f8 fa58 	bl	8006860 <pbuf_free>
          goto icmperr;
 800e3b0:	e085      	b.n	800e4be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e3b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f001 fd2a 	bl	800fe14 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e3c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6978      	ldr	r0, [r7, #20]
 800e3c6:	f7f8 f9c5 	bl	8006754 <pbuf_remove_header>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d009      	beq.n	800e3e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e3d0:	4b40      	ldr	r3, [pc, #256]	; (800e4d4 <icmp_input+0x1f8>)
 800e3d2:	22b6      	movs	r2, #182	; 0xb6
 800e3d4:	4940      	ldr	r1, [pc, #256]	; (800e4d8 <icmp_input+0x1fc>)
 800e3d6:	4841      	ldr	r0, [pc, #260]	; (800e4dc <icmp_input+0x200>)
 800e3d8:	f001 fd32 	bl	800fe40 <iprintf>
          pbuf_free(r);
 800e3dc:	6978      	ldr	r0, [r7, #20]
 800e3de:	f7f8 fa3f 	bl	8006860 <pbuf_free>
          goto icmperr;
 800e3e2:	e06c      	b.n	800e4be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e3e4:	6879      	ldr	r1, [r7, #4]
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f7f8 fb62 	bl	8006ab0 <pbuf_copy>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d003      	beq.n	800e3fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e3f2:	6978      	ldr	r0, [r7, #20]
 800e3f4:	f7f8 fa34 	bl	8006860 <pbuf_free>
          goto icmperr;
 800e3f8:	e061      	b.n	800e4be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7f8 fa30 	bl	8006860 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	607b      	str	r3, [r7, #4]
 800e404:	e00f      	b.n	800e426 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e408:	330e      	adds	r3, #14
 800e40a:	4619      	mov	r1, r3
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7f8 f9a1 	bl	8006754 <pbuf_remove_header>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d006      	beq.n	800e426 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e418:	4b2e      	ldr	r3, [pc, #184]	; (800e4d4 <icmp_input+0x1f8>)
 800e41a:	22c7      	movs	r2, #199	; 0xc7
 800e41c:	4930      	ldr	r1, [pc, #192]	; (800e4e0 <icmp_input+0x204>)
 800e41e:	482f      	ldr	r0, [pc, #188]	; (800e4dc <icmp_input+0x200>)
 800e420:	f001 fd0e 	bl	800fe40 <iprintf>
          goto icmperr;
 800e424:	e04b      	b.n	800e4be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e42e:	4619      	mov	r1, r3
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f7f8 f97f 	bl	8006734 <pbuf_add_header>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d12b      	bne.n	800e494 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e44a:	4b20      	ldr	r3, [pc, #128]	; (800e4cc <icmp_input+0x1f0>)
 800e44c:	691a      	ldr	r2, [r3, #16]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2200      	movs	r2, #0
 800e45c:	709a      	strb	r2, [r3, #2]
 800e45e:	2200      	movs	r2, #0
 800e460:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	22ff      	movs	r2, #255	; 0xff
 800e466:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	729a      	strb	r2, [r3, #10]
 800e46e:	2200      	movs	r2, #0
 800e470:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	2301      	movs	r3, #1
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	2300      	movs	r3, #0
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	23ff      	movs	r3, #255	; 0xff
 800e480:	2200      	movs	r2, #0
 800e482:	69f9      	ldr	r1, [r7, #28]
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fa75 	bl	800e974 <ip4_output_if>
 800e48a:	4603      	mov	r3, r0
 800e48c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e48e:	e001      	b.n	800e494 <icmp_input+0x1b8>
      break;
 800e490:	bf00      	nop
 800e492:	e000      	b.n	800e496 <icmp_input+0x1ba>
      break;
 800e494:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f8 f9e2 	bl	8006860 <pbuf_free>
  return;
 800e49c:	e013      	b.n	800e4c6 <icmp_input+0x1ea>
    goto lenerr;
 800e49e:	bf00      	nop
 800e4a0:	e002      	b.n	800e4a8 <icmp_input+0x1cc>
    goto lenerr;
 800e4a2:	bf00      	nop
 800e4a4:	e000      	b.n	800e4a8 <icmp_input+0x1cc>
        goto lenerr;
 800e4a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7f8 f9d9 	bl	8006860 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4ae:	e00a      	b.n	800e4c6 <icmp_input+0x1ea>
        goto icmperr;
 800e4b0:	bf00      	nop
 800e4b2:	e004      	b.n	800e4be <icmp_input+0x1e2>
        goto icmperr;
 800e4b4:	bf00      	nop
 800e4b6:	e002      	b.n	800e4be <icmp_input+0x1e2>
          goto icmperr;
 800e4b8:	bf00      	nop
 800e4ba:	e000      	b.n	800e4be <icmp_input+0x1e2>
          goto icmperr;
 800e4bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7f8 f9ce 	bl	8006860 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e4c6:	3728      	adds	r7, #40	; 0x28
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	200033d0 	.word	0x200033d0
 800e4d0:	200033e4 	.word	0x200033e4
 800e4d4:	0801350c 	.word	0x0801350c
 800e4d8:	08013544 	.word	0x08013544
 800e4dc:	0801357c 	.word	0x0801357c
 800e4e0:	080135a4 	.word	0x080135a4

0800e4e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	2103      	movs	r1, #3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f814 	bl	800e524 <icmp_send_response>
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	460b      	mov	r3, r1
 800e50e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	461a      	mov	r2, r3
 800e514:	210b      	movs	r1, #11
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 f804 	bl	800e524 <icmp_send_response>
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b08c      	sub	sp, #48	; 0x30
 800e528:	af04      	add	r7, sp, #16
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	70fb      	strb	r3, [r7, #3]
 800e530:	4613      	mov	r3, r2
 800e532:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e534:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e538:	2124      	movs	r1, #36	; 0x24
 800e53a:	2022      	movs	r0, #34	; 0x22
 800e53c:	f7f7 feac 	bl	8006298 <pbuf_alloc>
 800e540:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d04c      	beq.n	800e5e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	895b      	ldrh	r3, [r3, #10]
 800e54c:	2b23      	cmp	r3, #35	; 0x23
 800e54e:	d806      	bhi.n	800e55e <icmp_send_response+0x3a>
 800e550:	4b26      	ldr	r3, [pc, #152]	; (800e5ec <icmp_send_response+0xc8>)
 800e552:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e556:	4926      	ldr	r1, [pc, #152]	; (800e5f0 <icmp_send_response+0xcc>)
 800e558:	4826      	ldr	r0, [pc, #152]	; (800e5f4 <icmp_send_response+0xd0>)
 800e55a:	f001 fc71 	bl	800fe40 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	78fa      	ldrb	r2, [r7, #3]
 800e56e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	78ba      	ldrb	r2, [r7, #2]
 800e574:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	2200      	movs	r2, #0
 800e57a:	711a      	strb	r2, [r3, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2200      	movs	r2, #0
 800e584:	719a      	strb	r2, [r3, #6]
 800e586:	2200      	movs	r2, #0
 800e588:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	f103 0008 	add.w	r0, r3, #8
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	221c      	movs	r2, #28
 800e598:	4619      	mov	r1, r3
 800e59a:	f001 fc3b 	bl	800fe14 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e5a4:	f107 030c 	add.w	r3, r7, #12
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 f825 	bl	800e5f8 <ip4_route>
 800e5ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d011      	beq.n	800e5da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	709a      	strb	r2, [r3, #2]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e5c0:	f107 020c 	add.w	r2, r7, #12
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	9302      	str	r3, [sp, #8]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	23ff      	movs	r3, #255	; 0xff
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	69f8      	ldr	r0, [r7, #28]
 800e5d6:	f000 f9cd 	bl	800e974 <ip4_output_if>
  }
  pbuf_free(q);
 800e5da:	69f8      	ldr	r0, [r7, #28]
 800e5dc:	f7f8 f940 	bl	8006860 <pbuf_free>
 800e5e0:	e000      	b.n	800e5e4 <icmp_send_response+0xc0>
    return;
 800e5e2:	bf00      	nop
}
 800e5e4:	3720      	adds	r7, #32
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	0801350c 	.word	0x0801350c
 800e5f0:	080135d8 	.word	0x080135d8
 800e5f4:	0801357c 	.word	0x0801357c

0800e5f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e600:	4b33      	ldr	r3, [pc, #204]	; (800e6d0 <ip4_route+0xd8>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e036      	b.n	800e676 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b00      	cmp	r3, #0
 800e616:	d02b      	beq.n	800e670 <ip4_route+0x78>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e61e:	089b      	lsrs	r3, r3, #2
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d022      	beq.n	800e670 <ip4_route+0x78>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3304      	adds	r3, #4
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d01d      	beq.n	800e670 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3304      	adds	r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	405a      	eors	r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	3308      	adds	r3, #8
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4013      	ands	r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	e038      	b.n	800e6c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d108      	bne.n	800e670 <ip4_route+0x78>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	330c      	adds	r3, #12
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d101      	bne.n	800e670 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	e028      	b.n	800e6c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1c5      	bne.n	800e608 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e67c:	4b15      	ldr	r3, [pc, #84]	; (800e6d4 <ip4_route+0xdc>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d01a      	beq.n	800e6ba <ip4_route+0xc2>
 800e684:	4b13      	ldr	r3, [pc, #76]	; (800e6d4 <ip4_route+0xdc>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d012      	beq.n	800e6ba <ip4_route+0xc2>
 800e694:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <ip4_route+0xdc>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e69c:	f003 0304 	and.w	r3, r3, #4
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00a      	beq.n	800e6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6a4:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <ip4_route+0xdc>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d004      	beq.n	800e6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	2b7f      	cmp	r3, #127	; 0x7f
 800e6b8:	d101      	bne.n	800e6be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e001      	b.n	800e6c2 <ip4_route+0xca>
  }

  return netif_default;
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <ip4_route+0xdc>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	20006904 	.word	0x20006904
 800e6d4:	20006908 	.word	0x20006908

0800e6d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <ip4_input_accept+0x46>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d011      	beq.n	800e71e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e6fa:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <ip4_input_accept+0x50>)
 800e6fc:	695a      	ldr	r2, [r3, #20]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	3304      	adds	r3, #4
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	d008      	beq.n	800e71a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e708:	4b07      	ldr	r3, [pc, #28]	; (800e728 <ip4_input_accept+0x50>)
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 fa08 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e714:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	200033d0 	.word	0x200033d0

0800e72c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	091b      	lsrs	r3, r3, #4
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b04      	cmp	r3, #4
 800e746:	d004      	beq.n	800e752 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7f8 f889 	bl	8006860 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	e107      	b.n	800e962 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	f003 030f 	and.w	r3, r3, #15
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	885b      	ldrh	r3, [r3, #2]
 800e766:	b29b      	uxth	r3, r3
 800e768:	4618      	mov	r0, r3
 800e76a:	f7f6 fdc5 	bl	80052f8 <lwip_htons>
 800e76e:	4603      	mov	r3, r0
 800e770:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	891b      	ldrh	r3, [r3, #8]
 800e776:	89ba      	ldrh	r2, [r7, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d204      	bcs.n	800e786 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e77c:	89bb      	ldrh	r3, [r7, #12]
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7f7 fee7 	bl	8006554 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	895b      	ldrh	r3, [r3, #10]
 800e78a:	89fa      	ldrh	r2, [r7, #14]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d807      	bhi.n	800e7a0 <ip4_input+0x74>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	891b      	ldrh	r3, [r3, #8]
 800e794:	89ba      	ldrh	r2, [r7, #12]
 800e796:	429a      	cmp	r2, r3
 800e798:	d802      	bhi.n	800e7a0 <ip4_input+0x74>
 800e79a:	89fb      	ldrh	r3, [r7, #14]
 800e79c:	2b13      	cmp	r3, #19
 800e79e:	d804      	bhi.n	800e7aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7f8 f85d 	bl	8006860 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e0db      	b.n	800e962 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	4a6f      	ldr	r2, [pc, #444]	; (800e96c <ip4_input+0x240>)
 800e7b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	4a6d      	ldr	r2, [pc, #436]	; (800e96c <ip4_input+0x240>)
 800e7b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e7ba:	4b6c      	ldr	r3, [pc, #432]	; (800e96c <ip4_input+0x240>)
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7c2:	2be0      	cmp	r3, #224	; 0xe0
 800e7c4:	d112      	bne.n	800e7ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d007      	beq.n	800e7e6 <ip4_input+0xba>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <ip4_input+0xba>
      netif = inp;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	613b      	str	r3, [r7, #16]
 800e7e4:	e02a      	b.n	800e83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	613b      	str	r3, [r7, #16]
 800e7ea:	e027      	b.n	800e83c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e7ec:	6838      	ldr	r0, [r7, #0]
 800e7ee:	f7ff ff73 	bl	800e6d8 <ip4_input_accept>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <ip4_input+0xd2>
      netif = inp;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	613b      	str	r3, [r7, #16]
 800e7fc:	e01e      	b.n	800e83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e802:	4b5a      	ldr	r3, [pc, #360]	; (800e96c <ip4_input+0x240>)
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b7f      	cmp	r3, #127	; 0x7f
 800e80a:	d017      	beq.n	800e83c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e80c:	4b58      	ldr	r3, [pc, #352]	; (800e970 <ip4_input+0x244>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	613b      	str	r3, [r7, #16]
 800e812:	e00e      	b.n	800e832 <ip4_input+0x106>
          if (netif == inp) {
 800e814:	693a      	ldr	r2, [r7, #16]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d006      	beq.n	800e82a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e81c:	6938      	ldr	r0, [r7, #16]
 800e81e:	f7ff ff5b 	bl	800e6d8 <ip4_input_accept>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d108      	bne.n	800e83a <ip4_input+0x10e>
 800e828:	e000      	b.n	800e82c <ip4_input+0x100>
            continue;
 800e82a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	613b      	str	r3, [r7, #16]
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1ed      	bne.n	800e814 <ip4_input+0xe8>
 800e838:	e000      	b.n	800e83c <ip4_input+0x110>
            break;
 800e83a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e83c:	4b4b      	ldr	r3, [pc, #300]	; (800e96c <ip4_input+0x240>)
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	4618      	mov	r0, r3
 800e844:	f000 f96e 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d105      	bne.n	800e85a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e84e:	4b47      	ldr	r3, [pc, #284]	; (800e96c <ip4_input+0x240>)
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e856:	2be0      	cmp	r3, #224	; 0xe0
 800e858:	d104      	bne.n	800e864 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f8 f800 	bl	8006860 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e860:	2300      	movs	r3, #0
 800e862:	e07e      	b.n	800e962 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7f7 fff8 	bl	8006860 <pbuf_free>
    return ERR_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	e076      	b.n	800e962 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	88db      	ldrh	r3, [r3, #6]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e880:	4013      	ands	r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00b      	beq.n	800e89e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fc92 	bl	800f1b0 <ip4_reass>
 800e88c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <ip4_input+0x16c>
      return ERR_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	e064      	b.n	800e962 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e89e:	4a33      	ldr	r2, [pc, #204]	; (800e96c <ip4_input+0x240>)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e8a4:	4a31      	ldr	r2, [pc, #196]	; (800e96c <ip4_input+0x240>)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e8aa:	4a30      	ldr	r2, [pc, #192]	; (800e96c <ip4_input+0x240>)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 030f 	and.w	r3, r3, #15
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	4b2a      	ldr	r3, [pc, #168]	; (800e96c <ip4_input+0x240>)
 800e8c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e8c4:	89fb      	ldrh	r3, [r7, #14]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7f7 ff43 	bl	8006754 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	7a5b      	ldrb	r3, [r3, #9]
 800e8d2:	2b11      	cmp	r3, #17
 800e8d4:	d006      	beq.n	800e8e4 <ip4_input+0x1b8>
 800e8d6:	2b11      	cmp	r3, #17
 800e8d8:	dc13      	bgt.n	800e902 <ip4_input+0x1d6>
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d00c      	beq.n	800e8f8 <ip4_input+0x1cc>
 800e8de:	2b06      	cmp	r3, #6
 800e8e0:	d005      	beq.n	800e8ee <ip4_input+0x1c2>
 800e8e2:	e00e      	b.n	800e902 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fe fc68 	bl	800d1bc <udp_input>
        break;
 800e8ec:	e026      	b.n	800e93c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7fa f88d 	bl	8008a10 <tcp_input>
        break;
 800e8f6:	e021      	b.n	800e93c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff fcee 	bl	800e2dc <icmp_input>
        break;
 800e900:	e01c      	b.n	800e93c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e902:	4b1a      	ldr	r3, [pc, #104]	; (800e96c <ip4_input+0x240>)
 800e904:	695b      	ldr	r3, [r3, #20]
 800e906:	6939      	ldr	r1, [r7, #16]
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 f90b 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10f      	bne.n	800e934 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e914:	4b15      	ldr	r3, [pc, #84]	; (800e96c <ip4_input+0x240>)
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e91c:	2be0      	cmp	r3, #224	; 0xe0
 800e91e:	d009      	beq.n	800e934 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7f7 ff87 	bl	800683a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e92c:	2102      	movs	r1, #2
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7ff fdd8 	bl	800e4e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f7 ff93 	bl	8006860 <pbuf_free>
        break;
 800e93a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <ip4_input+0x240>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e942:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <ip4_input+0x240>)
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e948:	4b08      	ldr	r3, [pc, #32]	; (800e96c <ip4_input+0x240>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <ip4_input+0x240>)
 800e950:	2200      	movs	r2, #0
 800e952:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <ip4_input+0x240>)
 800e956:	2200      	movs	r2, #0
 800e958:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <ip4_input+0x240>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	200033d0 	.word	0x200033d0
 800e970:	20006904 	.word	0x20006904

0800e974 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af04      	add	r7, sp, #16
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d009      	beq.n	800e9a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <ip4_output_if+0x26>
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	3304      	adds	r3, #4
 800e99e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e9a0:	78fa      	ldrb	r2, [r7, #3]
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	9302      	str	r3, [sp, #8]
 800e9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	6979      	ldr	r1, [r7, #20]
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f805 	bl	800e9c8 <ip4_output_if_src>
 800e9be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	7b9b      	ldrb	r3, [r3, #14]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d006      	beq.n	800e9ec <ip4_output_if_src+0x24>
 800e9de:	4b4b      	ldr	r3, [pc, #300]	; (800eb0c <ip4_output_if_src+0x144>)
 800e9e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e9e4:	494a      	ldr	r1, [pc, #296]	; (800eb10 <ip4_output_if_src+0x148>)
 800e9e6:	484b      	ldr	r0, [pc, #300]	; (800eb14 <ip4_output_if_src+0x14c>)
 800e9e8:	f001 fa2a 	bl	800fe40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d060      	beq.n	800eab4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e9f2:	2314      	movs	r3, #20
 800e9f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e9f6:	2114      	movs	r1, #20
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7f7 fe9b 	bl	8006734 <pbuf_add_header>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea04:	f06f 0301 	mvn.w	r3, #1
 800ea08:	e07c      	b.n	800eb04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	895b      	ldrh	r3, [r3, #10]
 800ea14:	2b13      	cmp	r3, #19
 800ea16:	d806      	bhi.n	800ea26 <ip4_output_if_src+0x5e>
 800ea18:	4b3c      	ldr	r3, [pc, #240]	; (800eb0c <ip4_output_if_src+0x144>)
 800ea1a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ea1e:	493e      	ldr	r1, [pc, #248]	; (800eb18 <ip4_output_if_src+0x150>)
 800ea20:	483c      	ldr	r0, [pc, #240]	; (800eb14 <ip4_output_if_src+0x14c>)
 800ea22:	f001 fa0d 	bl	800fe40 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	78fa      	ldrb	r2, [r7, #3]
 800ea2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ea32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ea3c:	8b7b      	ldrh	r3, [r7, #26]
 800ea3e:	089b      	lsrs	r3, r3, #2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ea54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	891b      	ldrh	r3, [r3, #8]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7f6 fc4c 	bl	80052f8 <lwip_htons>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461a      	mov	r2, r3
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	719a      	strb	r2, [r3, #6]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ea72:	4b2a      	ldr	r3, [pc, #168]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f6 fc3e 	bl	80052f8 <lwip_htons>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	4b23      	ldr	r3, [pc, #140]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d104      	bne.n	800eaa0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ea96:	4b22      	ldr	r3, [pc, #136]	; (800eb20 <ip4_output_if_src+0x158>)
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	60da      	str	r2, [r3, #12]
 800ea9e:	e003      	b.n	800eaa8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	729a      	strb	r2, [r3, #10]
 800eaae:	2200      	movs	r2, #0
 800eab0:	72da      	strb	r2, [r3, #11]
 800eab2:	e00f      	b.n	800ead4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	895b      	ldrh	r3, [r3, #10]
 800eab8:	2b13      	cmp	r3, #19
 800eaba:	d802      	bhi.n	800eac2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eabc:	f06f 0301 	mvn.w	r3, #1
 800eac0:	e020      	b.n	800eb04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eace:	f107 0314 	add.w	r3, r7, #20
 800ead2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <ip4_output_if_src+0x12e>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	891a      	ldrh	r2, [r3, #8]
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d906      	bls.n	800eaf6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f000 fd4d 	bl	800f58c <ip4_frag>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	e006      	b.n	800eb04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	68f9      	ldr	r1, [r7, #12]
 800eafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb00:	4798      	blx	r3
 800eb02:	4603      	mov	r3, r0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3720      	adds	r7, #32
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	08013604 	.word	0x08013604
 800eb10:	08013638 	.word	0x08013638
 800eb14:	08013644 	.word	0x08013644
 800eb18:	0801366c 	.word	0x0801366c
 800eb1c:	200001fe 	.word	0x200001fe
 800eb20:	08013abc 	.word	0x08013abc

0800eb24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb38:	d002      	beq.n	800eb40 <ip4_addr_isbroadcast_u32+0x1c>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e02a      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb4a:	f003 0302 	and.w	r3, r3, #2
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e021      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d101      	bne.n	800eb66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e019      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	405a      	eors	r2, r3
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	3308      	adds	r3, #8
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4013      	ands	r3, r2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10d      	bne.n	800eb98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	43da      	mvns	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d101      	bne.n	800eb98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eb98:	2300      	movs	r3, #0
  }
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
	...

0800eba8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ebb2:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <ip_reass_tmr+0x54>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ebb8:	e018      	b.n	800ebec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	7fdb      	ldrb	r3, [r3, #31]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00b      	beq.n	800ebda <ip_reass_tmr+0x32>
      r->timer--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	7fdb      	ldrb	r3, [r3, #31]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	e008      	b.n	800ebec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ebe4:	68b9      	ldr	r1, [r7, #8]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f80a 	bl	800ec00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e3      	bne.n	800ebba <ip_reass_tmr+0x12>
    }
  }
}
 800ebf2:	bf00      	nop
 800ebf4:	bf00      	nop
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20000200 	.word	0x20000200

0800ec00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b088      	sub	sp, #32
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d105      	bne.n	800ec22 <ip_reass_free_complete_datagram+0x22>
 800ec16:	4b45      	ldr	r3, [pc, #276]	; (800ed2c <ip_reass_free_complete_datagram+0x12c>)
 800ec18:	22ab      	movs	r2, #171	; 0xab
 800ec1a:	4945      	ldr	r1, [pc, #276]	; (800ed30 <ip_reass_free_complete_datagram+0x130>)
 800ec1c:	4845      	ldr	r0, [pc, #276]	; (800ed34 <ip_reass_free_complete_datagram+0x134>)
 800ec1e:	f001 f90f 	bl	800fe40 <iprintf>
  if (prev != NULL) {
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00a      	beq.n	800ec3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d005      	beq.n	800ec3e <ip_reass_free_complete_datagram+0x3e>
 800ec32:	4b3e      	ldr	r3, [pc, #248]	; (800ed2c <ip_reass_free_complete_datagram+0x12c>)
 800ec34:	22ad      	movs	r2, #173	; 0xad
 800ec36:	4940      	ldr	r1, [pc, #256]	; (800ed38 <ip_reass_free_complete_datagram+0x138>)
 800ec38:	483e      	ldr	r0, [pc, #248]	; (800ed34 <ip_reass_free_complete_datagram+0x134>)
 800ec3a:	f001 f901 	bl	800fe40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	889b      	ldrh	r3, [r3, #4]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d12a      	bne.n	800eca6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	6858      	ldr	r0, [r3, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3308      	adds	r3, #8
 800ec66:	2214      	movs	r2, #20
 800ec68:	4619      	mov	r1, r3
 800ec6a:	f001 f8d3 	bl	800fe14 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ec6e:	2101      	movs	r1, #1
 800ec70:	69b8      	ldr	r0, [r7, #24]
 800ec72:	f7ff fc47 	bl	800e504 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ec76:	69b8      	ldr	r0, [r7, #24]
 800ec78:	f7f7 fe7a 	bl	8006970 <pbuf_clen>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ec80:	8bfa      	ldrh	r2, [r7, #30]
 800ec82:	8a7b      	ldrh	r3, [r7, #18]
 800ec84:	4413      	add	r3, r2
 800ec86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec8a:	db05      	blt.n	800ec98 <ip_reass_free_complete_datagram+0x98>
 800ec8c:	4b27      	ldr	r3, [pc, #156]	; (800ed2c <ip_reass_free_complete_datagram+0x12c>)
 800ec8e:	22bc      	movs	r2, #188	; 0xbc
 800ec90:	492a      	ldr	r1, [pc, #168]	; (800ed3c <ip_reass_free_complete_datagram+0x13c>)
 800ec92:	4828      	ldr	r0, [pc, #160]	; (800ed34 <ip_reass_free_complete_datagram+0x134>)
 800ec94:	f001 f8d4 	bl	800fe40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ec98:	8bfa      	ldrh	r2, [r7, #30]
 800ec9a:	8a7b      	ldrh	r3, [r7, #18]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800eca0:	69b8      	ldr	r0, [r7, #24]
 800eca2:	f7f7 fddd 	bl	8006860 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ecac:	e01f      	b.n	800ecee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f7f7 fe56 	bl	8006970 <pbuf_clen>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ecc8:	8bfa      	ldrh	r2, [r7, #30]
 800ecca:	8a7b      	ldrh	r3, [r7, #18]
 800eccc:	4413      	add	r3, r2
 800ecce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd2:	db05      	blt.n	800ece0 <ip_reass_free_complete_datagram+0xe0>
 800ecd4:	4b15      	ldr	r3, [pc, #84]	; (800ed2c <ip_reass_free_complete_datagram+0x12c>)
 800ecd6:	22cc      	movs	r2, #204	; 0xcc
 800ecd8:	4918      	ldr	r1, [pc, #96]	; (800ed3c <ip_reass_free_complete_datagram+0x13c>)
 800ecda:	4816      	ldr	r0, [pc, #88]	; (800ed34 <ip_reass_free_complete_datagram+0x134>)
 800ecdc:	f001 f8b0 	bl	800fe40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ece0:	8bfa      	ldrh	r2, [r7, #30]
 800ece2:	8a7b      	ldrh	r3, [r7, #18]
 800ece4:	4413      	add	r3, r2
 800ece6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f7f7 fdb9 	bl	8006860 <pbuf_free>
  while (p != NULL) {
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1dc      	bne.n	800ecae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ecf4:	6839      	ldr	r1, [r7, #0]
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 f8c2 	bl	800ee80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ecfc:	4b10      	ldr	r3, [pc, #64]	; (800ed40 <ip_reass_free_complete_datagram+0x140>)
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	8bfa      	ldrh	r2, [r7, #30]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d905      	bls.n	800ed12 <ip_reass_free_complete_datagram+0x112>
 800ed06:	4b09      	ldr	r3, [pc, #36]	; (800ed2c <ip_reass_free_complete_datagram+0x12c>)
 800ed08:	22d2      	movs	r2, #210	; 0xd2
 800ed0a:	490e      	ldr	r1, [pc, #56]	; (800ed44 <ip_reass_free_complete_datagram+0x144>)
 800ed0c:	4809      	ldr	r0, [pc, #36]	; (800ed34 <ip_reass_free_complete_datagram+0x134>)
 800ed0e:	f001 f897 	bl	800fe40 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ed12:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <ip_reass_free_complete_datagram+0x140>)
 800ed14:	881a      	ldrh	r2, [r3, #0]
 800ed16:	8bfb      	ldrh	r3, [r7, #30]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	4b08      	ldr	r3, [pc, #32]	; (800ed40 <ip_reass_free_complete_datagram+0x140>)
 800ed1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ed20:	8bfb      	ldrh	r3, [r7, #30]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3720      	adds	r7, #32
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	0801369c 	.word	0x0801369c
 800ed30:	080136d8 	.word	0x080136d8
 800ed34:	080136e4 	.word	0x080136e4
 800ed38:	0801370c 	.word	0x0801370c
 800ed3c:	08013720 	.word	0x08013720
 800ed40:	20000204 	.word	0x20000204
 800ed44:	08013740 	.word	0x08013740

0800ed48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b08a      	sub	sp, #40	; 0x28
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ed52:	2300      	movs	r3, #0
 800ed54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ed66:	4b28      	ldr	r3, [pc, #160]	; (800ee08 <ip_reass_remove_oldest_datagram+0xc0>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ed6c:	e030      	b.n	800edd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	695a      	ldr	r2, [r3, #20]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d10c      	bne.n	800ed94 <ip_reass_remove_oldest_datagram+0x4c>
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7c:	699a      	ldr	r2, [r3, #24]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d106      	bne.n	800ed94 <ip_reass_remove_oldest_datagram+0x4c>
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	899a      	ldrh	r2, [r3, #12]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	889b      	ldrh	r3, [r3, #4]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d014      	beq.n	800edbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	3301      	adds	r3, #1
 800ed98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d104      	bne.n	800edaa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	61bb      	str	r3, [r7, #24]
 800eda8:	e009      	b.n	800edbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	7fda      	ldrb	r2, [r3, #31]
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	7fdb      	ldrb	r3, [r3, #31]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d803      	bhi.n	800edbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1cb      	bne.n	800ed6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800edd6:	6a3b      	ldr	r3, [r7, #32]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d008      	beq.n	800edee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800eddc:	69b9      	ldr	r1, [r7, #24]
 800edde:	6a38      	ldr	r0, [r7, #32]
 800ede0:	f7ff ff0e 	bl	800ec00 <ip_reass_free_complete_datagram>
 800ede4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	4413      	add	r3, r2
 800edec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	da02      	bge.n	800edfc <ip_reass_remove_oldest_datagram+0xb4>
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	dcac      	bgt.n	800ed56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800edfc:	697b      	ldr	r3, [r7, #20]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3728      	adds	r7, #40	; 0x28
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20000200 	.word	0x20000200

0800ee0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee16:	2004      	movs	r0, #4
 800ee18:	f7f6 fec4 	bl	8005ba4 <memp_malloc>
 800ee1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d110      	bne.n	800ee46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ee24:	6839      	ldr	r1, [r7, #0]
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f7ff ff8e 	bl	800ed48 <ip_reass_remove_oldest_datagram>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	4293      	cmp	r3, r2
 800ee32:	dc03      	bgt.n	800ee3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee34:	2004      	movs	r0, #4
 800ee36:	f7f6 feb5 	bl	8005ba4 <memp_malloc>
 800ee3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ee42:	2300      	movs	r3, #0
 800ee44:	e016      	b.n	800ee74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ee46:	2220      	movs	r2, #32
 800ee48:	2100      	movs	r1, #0
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f000 fff0 	bl	800fe30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	220f      	movs	r2, #15
 800ee54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ee56:	4b09      	ldr	r3, [pc, #36]	; (800ee7c <ip_reass_enqueue_new_datagram+0x70>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ee5e:	4a07      	ldr	r2, [pc, #28]	; (800ee7c <ip_reass_enqueue_new_datagram+0x70>)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	3308      	adds	r3, #8
 800ee68:	2214      	movs	r2, #20
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 ffd1 	bl	800fe14 <memcpy>
  return ipr;
 800ee72:	68fb      	ldr	r3, [r7, #12]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20000200 	.word	0x20000200

0800ee80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ee8a:	4b10      	ldr	r3, [pc, #64]	; (800eecc <ip_reass_dequeue_datagram+0x4c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d104      	bne.n	800ee9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a0c      	ldr	r2, [pc, #48]	; (800eecc <ip_reass_dequeue_datagram+0x4c>)
 800ee9a:	6013      	str	r3, [r2, #0]
 800ee9c:	e00d      	b.n	800eeba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d106      	bne.n	800eeb2 <ip_reass_dequeue_datagram+0x32>
 800eea4:	4b0a      	ldr	r3, [pc, #40]	; (800eed0 <ip_reass_dequeue_datagram+0x50>)
 800eea6:	f240 1245 	movw	r2, #325	; 0x145
 800eeaa:	490a      	ldr	r1, [pc, #40]	; (800eed4 <ip_reass_dequeue_datagram+0x54>)
 800eeac:	480a      	ldr	r0, [pc, #40]	; (800eed8 <ip_reass_dequeue_datagram+0x58>)
 800eeae:	f000 ffc7 	bl	800fe40 <iprintf>
    prev->next = ipr->next;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	2004      	movs	r0, #4
 800eebe:	f7f6 febd 	bl	8005c3c <memp_free>
}
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20000200 	.word	0x20000200
 800eed0:	0801369c 	.word	0x0801369c
 800eed4:	08013764 	.word	0x08013764
 800eed8:	080136e4 	.word	0x080136e4

0800eedc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08c      	sub	sp, #48	; 0x30
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800eee8:	2300      	movs	r3, #0
 800eeea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800eeec:	2301      	movs	r3, #1
 800eeee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	885b      	ldrh	r3, [r3, #2]
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f6 f9fb 	bl	80052f8 <lwip_htons>
 800ef02:	4603      	mov	r3, r0
 800ef04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	f003 030f 	and.w	r3, r3, #15
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ef14:	7e7b      	ldrb	r3, [r7, #25]
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	8b7a      	ldrh	r2, [r7, #26]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d202      	bcs.n	800ef24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef22:	e135      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ef24:	7e7b      	ldrb	r3, [r7, #25]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	8b7a      	ldrh	r2, [r7, #26]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	88db      	ldrh	r3, [r3, #6]
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f6 f9df 	bl	80052f8 <lwip_htons>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	00db      	lsls	r3, r3, #3
 800ef44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	2200      	movs	r2, #0
 800ef50:	701a      	strb	r2, [r3, #0]
 800ef52:	2200      	movs	r2, #0
 800ef54:	705a      	strb	r2, [r3, #1]
 800ef56:	2200      	movs	r2, #0
 800ef58:	709a      	strb	r2, [r3, #2]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	8afa      	ldrh	r2, [r7, #22]
 800ef62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ef64:	8afa      	ldrh	r2, [r7, #22]
 800ef66:	8b7b      	ldrh	r3, [r7, #26]
 800ef68:	4413      	add	r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	88db      	ldrh	r3, [r3, #6]
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	8afa      	ldrh	r2, [r7, #22]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d902      	bls.n	800ef82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef80:	e106      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	627b      	str	r3, [r7, #36]	; 0x24
 800ef88:	e068      	b.n	800f05c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	889b      	ldrh	r3, [r3, #4]
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	889b      	ldrh	r3, [r3, #4]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d235      	bcs.n	800f00c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d020      	beq.n	800efee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	889b      	ldrh	r3, [r3, #4]
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb4:	88db      	ldrh	r3, [r3, #6]
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	429a      	cmp	r2, r3
 800efba:	d307      	bcc.n	800efcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	88db      	ldrh	r3, [r3, #6]
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	889b      	ldrh	r3, [r3, #4]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	429a      	cmp	r2, r3
 800efca:	d902      	bls.n	800efd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800efcc:	f04f 33ff 	mov.w	r3, #4294967295
 800efd0:	e0de      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800efd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	88db      	ldrh	r3, [r3, #6]
 800efdc:	b29a      	uxth	r2, r3
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	889b      	ldrh	r3, [r3, #4]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d03d      	beq.n	800f064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800efe8:	2300      	movs	r3, #0
 800efea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800efec:	e03a      	b.n	800f064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800efee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff0:	88db      	ldrh	r3, [r3, #6]
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	889b      	ldrh	r3, [r3, #4]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	429a      	cmp	r2, r3
 800effc:	d902      	bls.n	800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800effe:	f04f 33ff 	mov.w	r3, #4294967295
 800f002:	e0c5      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	68ba      	ldr	r2, [r7, #8]
 800f008:	605a      	str	r2, [r3, #4]
      break;
 800f00a:	e02b      	b.n	800f064 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	889b      	ldrh	r3, [r3, #4]
 800f010:	b29a      	uxth	r2, r3
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	889b      	ldrh	r3, [r3, #4]
 800f016:	b29b      	uxth	r3, r3
 800f018:	429a      	cmp	r2, r3
 800f01a:	d102      	bne.n	800f022 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f01c:	f04f 33ff 	mov.w	r3, #4294967295
 800f020:	e0b6      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	889b      	ldrh	r3, [r3, #4]
 800f026:	b29a      	uxth	r2, r3
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	88db      	ldrh	r3, [r3, #6]
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	429a      	cmp	r2, r3
 800f030:	d202      	bcs.n	800f038 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f032:	f04f 33ff 	mov.w	r3, #4294967295
 800f036:	e0ab      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d009      	beq.n	800f052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	88db      	ldrh	r3, [r3, #6]
 800f042:	b29a      	uxth	r2, r3
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	889b      	ldrh	r3, [r3, #4]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d001      	beq.n	800f052 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d193      	bne.n	800ef8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f062:	e000      	b.n	800f066 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f064:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d12d      	bne.n	800f0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d01c      	beq.n	800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	88db      	ldrh	r3, [r3, #6]
 800f076:	b29a      	uxth	r2, r3
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	889b      	ldrh	r3, [r3, #4]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	429a      	cmp	r2, r3
 800f080:	d906      	bls.n	800f090 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f082:	4b45      	ldr	r3, [pc, #276]	; (800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f084:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f088:	4944      	ldr	r1, [pc, #272]	; (800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f08a:	4845      	ldr	r0, [pc, #276]	; (800f1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f08c:	f000 fed8 	bl	800fe40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	88db      	ldrh	r3, [r3, #6]
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	889b      	ldrh	r3, [r3, #4]
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d010      	beq.n	800f0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	623b      	str	r3, [r7, #32]
 800f0aa:	e00d      	b.n	800f0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f0b4:	4b38      	ldr	r3, [pc, #224]	; (800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f0ba:	493a      	ldr	r1, [pc, #232]	; (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f0bc:	4838      	ldr	r0, [pc, #224]	; (800f1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0be:	f000 febf 	bl	800fe40 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d105      	bne.n	800f0da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	7f9b      	ldrb	r3, [r3, #30]
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d059      	beq.n	800f18e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f0da:	6a3b      	ldr	r3, [r7, #32]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d04f      	beq.n	800f180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d006      	beq.n	800f0f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	889b      	ldrh	r3, [r3, #4]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	623b      	str	r3, [r7, #32]
 800f0fa:	e041      	b.n	800f180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f106:	e012      	b.n	800f12e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f110:	88db      	ldrh	r3, [r3, #6]
 800f112:	b29a      	uxth	r2, r3
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	889b      	ldrh	r3, [r3, #4]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d002      	beq.n	800f124 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	623b      	str	r3, [r7, #32]
            break;
 800f122:	e007      	b.n	800f134 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e9      	bne.n	800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d022      	beq.n	800f180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d106      	bne.n	800f150 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f142:	4b15      	ldr	r3, [pc, #84]	; (800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f144:	f240 12df 	movw	r2, #479	; 0x1df
 800f148:	4917      	ldr	r1, [pc, #92]	; (800f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f14a:	4815      	ldr	r0, [pc, #84]	; (800f1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f14c:	f000 fe78 	bl	800fe40 <iprintf>
          LWIP_ASSERT("sanity check",
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f158:	429a      	cmp	r2, r3
 800f15a:	d106      	bne.n	800f16a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f15c:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f15e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f162:	4911      	ldr	r1, [pc, #68]	; (800f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f164:	480e      	ldr	r0, [pc, #56]	; (800f1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f166:	f000 fe6b 	bl	800fe40 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d006      	beq.n	800f180 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f172:	4b09      	ldr	r3, [pc, #36]	; (800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f174:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f178:	490c      	ldr	r1, [pc, #48]	; (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f17a:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f17c:	f000 fe60 	bl	800fe40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	2b00      	cmp	r3, #0
 800f184:	bf14      	ite	ne
 800f186:	2301      	movne	r3, #1
 800f188:	2300      	moveq	r3, #0
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	e000      	b.n	800f190 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3730      	adds	r7, #48	; 0x30
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	0801369c 	.word	0x0801369c
 800f19c:	08013780 	.word	0x08013780
 800f1a0:	080136e4 	.word	0x080136e4
 800f1a4:	080137a0 	.word	0x080137a0
 800f1a8:	080137d8 	.word	0x080137d8
 800f1ac:	080137e8 	.word	0x080137e8

0800f1b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08e      	sub	sp, #56	; 0x38
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	f003 030f 	and.w	r3, r3, #15
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b14      	cmp	r3, #20
 800f1ce:	f040 8167 	bne.w	800f4a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f6 f88d 	bl	80052f8 <lwip_htons>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	885b      	ldrh	r3, [r3, #2]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7f6 f881 	bl	80052f8 <lwip_htons>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	f003 030f 	and.w	r3, r3, #15
 800f202:	b2db      	uxtb	r3, r3
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f20a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f20e:	b29b      	uxth	r3, r3
 800f210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f212:	429a      	cmp	r2, r3
 800f214:	f0c0 8146 	bcc.w	800f4a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7f7 fba3 	bl	8006970 <pbuf_clen>
 800f22a:	4603      	mov	r3, r0
 800f22c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f22e:	4b9f      	ldr	r3, [pc, #636]	; (800f4ac <ip4_reass+0x2fc>)
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	8c3b      	ldrh	r3, [r7, #32]
 800f236:	4413      	add	r3, r2
 800f238:	2b0a      	cmp	r3, #10
 800f23a:	dd10      	ble.n	800f25e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f23c:	8c3b      	ldrh	r3, [r7, #32]
 800f23e:	4619      	mov	r1, r3
 800f240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f242:	f7ff fd81 	bl	800ed48 <ip_reass_remove_oldest_datagram>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f000 812d 	beq.w	800f4a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f24e:	4b97      	ldr	r3, [pc, #604]	; (800f4ac <ip4_reass+0x2fc>)
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	8c3b      	ldrh	r3, [r7, #32]
 800f256:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f258:	2b0a      	cmp	r3, #10
 800f25a:	f300 8125 	bgt.w	800f4a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f25e:	4b94      	ldr	r3, [pc, #592]	; (800f4b0 <ip4_reass+0x300>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	633b      	str	r3, [r7, #48]	; 0x30
 800f264:	e015      	b.n	800f292 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	695a      	ldr	r2, [r3, #20]
 800f26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d10c      	bne.n	800f28c <ip4_reass+0xdc>
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	699a      	ldr	r2, [r3, #24]
 800f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d106      	bne.n	800f28c <ip4_reass+0xdc>
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	899a      	ldrh	r2, [r3, #12]
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	889b      	ldrh	r3, [r3, #4]
 800f286:	b29b      	uxth	r3, r3
 800f288:	429a      	cmp	r2, r3
 800f28a:	d006      	beq.n	800f29a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	633b      	str	r3, [r7, #48]	; 0x30
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1e6      	bne.n	800f266 <ip4_reass+0xb6>
 800f298:	e000      	b.n	800f29c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f29a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f2a2:	8c3b      	ldrh	r3, [r7, #32]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2a8:	f7ff fdb0 	bl	800ee0c <ip_reass_enqueue_new_datagram>
 800f2ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d11c      	bne.n	800f2ee <ip4_reass+0x13e>
      goto nullreturn;
 800f2b4:	e109      	b.n	800f4ca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	88db      	ldrh	r3, [r3, #6]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7f6 f81b 	bl	80052f8 <lwip_htons>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d110      	bne.n	800f2ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ce:	89db      	ldrh	r3, [r3, #14]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7f6 f811 	bl	80052f8 <lwip_htons>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d006      	beq.n	800f2ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	2214      	movs	r2, #20
 800f2e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fd93 	bl	800fe14 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f0:	88db      	ldrh	r3, [r3, #6]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	f003 0320 	and.w	r3, r3, #32
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	bf0c      	ite	eq
 800f2fc:	2301      	moveq	r3, #1
 800f2fe:	2300      	movne	r3, #0
 800f300:	b2db      	uxtb	r3, r3
 800f302:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00e      	beq.n	800f328 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f30a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f30e:	4413      	add	r3, r2
 800f310:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f312:	8b7a      	ldrh	r2, [r7, #26]
 800f314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f316:	429a      	cmp	r2, r3
 800f318:	f0c0 80a0 	bcc.w	800f45c <ip4_reass+0x2ac>
 800f31c:	8b7b      	ldrh	r3, [r7, #26]
 800f31e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f322:	4293      	cmp	r3, r2
 800f324:	f200 809a 	bhi.w	800f45c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f328:	69fa      	ldr	r2, [r7, #28]
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f32e:	f7ff fdd5 	bl	800eedc <ip_reass_chain_frag_into_datagram_and_validate>
 800f332:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33a:	f000 8091 	beq.w	800f460 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f33e:	4b5b      	ldr	r3, [pc, #364]	; (800f4ac <ip4_reass+0x2fc>)
 800f340:	881a      	ldrh	r2, [r3, #0]
 800f342:	8c3b      	ldrh	r3, [r7, #32]
 800f344:	4413      	add	r3, r2
 800f346:	b29a      	uxth	r2, r3
 800f348:	4b58      	ldr	r3, [pc, #352]	; (800f4ac <ip4_reass+0x2fc>)
 800f34a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00d      	beq.n	800f36e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f352:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f356:	4413      	add	r3, r2
 800f358:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	8a7a      	ldrh	r2, [r7, #18]
 800f35e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	7f9b      	ldrb	r3, [r3, #30]
 800f364:	f043 0301 	orr.w	r3, r3, #1
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d171      	bne.n	800f458 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	8b9b      	ldrh	r3, [r3, #28]
 800f378:	3314      	adds	r3, #20
 800f37a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	3308      	adds	r3, #8
 800f392:	2214      	movs	r2, #20
 800f394:	4619      	mov	r1, r3
 800f396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f398:	f000 fd3c 	bl	800fe14 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f39c:	8a3b      	ldrh	r3, [r7, #16]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f5 ffaa 	bl	80052f8 <lwip_htons>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	719a      	strb	r2, [r3, #6]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	729a      	strb	r2, [r3, #10]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f3c6:	e00d      	b.n	800f3e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f3ce:	2114      	movs	r1, #20
 800f3d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3d2:	f7f7 f9bf 	bl	8006754 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f3d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7f7 fb03 	bl	80069e4 <pbuf_cat>
      r = iprh->next_pbuf;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1ee      	bne.n	800f3c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f3ea:	4b31      	ldr	r3, [pc, #196]	; (800f4b0 <ip4_reass+0x300>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d102      	bne.n	800f3fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3f8:	e010      	b.n	800f41c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f3fa:	4b2d      	ldr	r3, [pc, #180]	; (800f4b0 <ip4_reass+0x300>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f400:	e007      	b.n	800f412 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f408:	429a      	cmp	r2, r3
 800f40a:	d006      	beq.n	800f41a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1f4      	bne.n	800f402 <ip4_reass+0x252>
 800f418:	e000      	b.n	800f41c <ip4_reass+0x26c>
          break;
 800f41a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f41c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f41e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f420:	f7ff fd2e 	bl	800ee80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7f7 faa3 	bl	8006970 <pbuf_clen>
 800f42a:	4603      	mov	r3, r0
 800f42c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f42e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ac <ip4_reass+0x2fc>)
 800f430:	881b      	ldrh	r3, [r3, #0]
 800f432:	8c3a      	ldrh	r2, [r7, #32]
 800f434:	429a      	cmp	r2, r3
 800f436:	d906      	bls.n	800f446 <ip4_reass+0x296>
 800f438:	4b1e      	ldr	r3, [pc, #120]	; (800f4b4 <ip4_reass+0x304>)
 800f43a:	f240 229b 	movw	r2, #667	; 0x29b
 800f43e:	491e      	ldr	r1, [pc, #120]	; (800f4b8 <ip4_reass+0x308>)
 800f440:	481e      	ldr	r0, [pc, #120]	; (800f4bc <ip4_reass+0x30c>)
 800f442:	f000 fcfd 	bl	800fe40 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f446:	4b19      	ldr	r3, [pc, #100]	; (800f4ac <ip4_reass+0x2fc>)
 800f448:	881a      	ldrh	r2, [r3, #0]
 800f44a:	8c3b      	ldrh	r3, [r7, #32]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	b29a      	uxth	r2, r3
 800f450:	4b16      	ldr	r3, [pc, #88]	; (800f4ac <ip4_reass+0x2fc>)
 800f452:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	e03c      	b.n	800f4d2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f458:	2300      	movs	r3, #0
 800f45a:	e03a      	b.n	800f4d2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f45c:	bf00      	nop
 800f45e:	e000      	b.n	800f462 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f460:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <ip4_reass+0x2c6>
 800f468:	4b12      	ldr	r3, [pc, #72]	; (800f4b4 <ip4_reass+0x304>)
 800f46a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f46e:	4914      	ldr	r1, [pc, #80]	; (800f4c0 <ip4_reass+0x310>)
 800f470:	4812      	ldr	r0, [pc, #72]	; (800f4bc <ip4_reass+0x30c>)
 800f472:	f000 fce5 	bl	800fe40 <iprintf>
  if (ipr->p == NULL) {
 800f476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d124      	bne.n	800f4c8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f47e:	4b0c      	ldr	r3, [pc, #48]	; (800f4b0 <ip4_reass+0x300>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f484:	429a      	cmp	r2, r3
 800f486:	d006      	beq.n	800f496 <ip4_reass+0x2e6>
 800f488:	4b0a      	ldr	r3, [pc, #40]	; (800f4b4 <ip4_reass+0x304>)
 800f48a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f48e:	490d      	ldr	r1, [pc, #52]	; (800f4c4 <ip4_reass+0x314>)
 800f490:	480a      	ldr	r0, [pc, #40]	; (800f4bc <ip4_reass+0x30c>)
 800f492:	f000 fcd5 	bl	800fe40 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f496:	2100      	movs	r1, #0
 800f498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f49a:	f7ff fcf1 	bl	800ee80 <ip_reass_dequeue_datagram>
 800f49e:	e014      	b.n	800f4ca <ip4_reass+0x31a>
    goto nullreturn;
 800f4a0:	bf00      	nop
 800f4a2:	e012      	b.n	800f4ca <ip4_reass+0x31a>
    goto nullreturn;
 800f4a4:	bf00      	nop
 800f4a6:	e010      	b.n	800f4ca <ip4_reass+0x31a>
      goto nullreturn;
 800f4a8:	bf00      	nop
 800f4aa:	e00e      	b.n	800f4ca <ip4_reass+0x31a>
 800f4ac:	20000204 	.word	0x20000204
 800f4b0:	20000200 	.word	0x20000200
 800f4b4:	0801369c 	.word	0x0801369c
 800f4b8:	0801380c 	.word	0x0801380c
 800f4bc:	080136e4 	.word	0x080136e4
 800f4c0:	08013828 	.word	0x08013828
 800f4c4:	08013834 	.word	0x08013834
  }

nullreturn:
 800f4c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7f7 f9c8 	bl	8006860 <pbuf_free>
  return NULL;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3738      	adds	r7, #56	; 0x38
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop

0800f4dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f4e0:	2005      	movs	r0, #5
 800f4e2:	f7f6 fb5f 	bl	8005ba4 <memp_malloc>
 800f4e6:	4603      	mov	r3, r0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d106      	bne.n	800f508 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f4fa:	4b07      	ldr	r3, [pc, #28]	; (800f518 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f4fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f500:	4906      	ldr	r1, [pc, #24]	; (800f51c <ip_frag_free_pbuf_custom_ref+0x30>)
 800f502:	4807      	ldr	r0, [pc, #28]	; (800f520 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f504:	f000 fc9c 	bl	800fe40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f508:	6879      	ldr	r1, [r7, #4]
 800f50a:	2005      	movs	r0, #5
 800f50c:	f7f6 fb96 	bl	8005c3c <memp_free>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	0801369c 	.word	0x0801369c
 800f51c:	08013854 	.word	0x08013854
 800f520:	080136e4 	.word	0x080136e4

0800f524 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d106      	bne.n	800f544 <ipfrag_free_pbuf_custom+0x20>
 800f536:	4b11      	ldr	r3, [pc, #68]	; (800f57c <ipfrag_free_pbuf_custom+0x58>)
 800f538:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f53c:	4910      	ldr	r1, [pc, #64]	; (800f580 <ipfrag_free_pbuf_custom+0x5c>)
 800f53e:	4811      	ldr	r0, [pc, #68]	; (800f584 <ipfrag_free_pbuf_custom+0x60>)
 800f540:	f000 fc7e 	bl	800fe40 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d006      	beq.n	800f55a <ipfrag_free_pbuf_custom+0x36>
 800f54c:	4b0b      	ldr	r3, [pc, #44]	; (800f57c <ipfrag_free_pbuf_custom+0x58>)
 800f54e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f552:	490d      	ldr	r1, [pc, #52]	; (800f588 <ipfrag_free_pbuf_custom+0x64>)
 800f554:	480b      	ldr	r0, [pc, #44]	; (800f584 <ipfrag_free_pbuf_custom+0x60>)
 800f556:	f000 fc73 	bl	800fe40 <iprintf>
  if (pcr->original != NULL) {
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d004      	beq.n	800f56c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	4618      	mov	r0, r3
 800f568:	f7f7 f97a 	bl	8006860 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff ffbd 	bl	800f4ec <ip_frag_free_pbuf_custom_ref>
}
 800f572:	bf00      	nop
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	0801369c 	.word	0x0801369c
 800f580:	08013860 	.word	0x08013860
 800f584:	080136e4 	.word	0x080136e4
 800f588:	0801386c 	.word	0x0801386c

0800f58c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b094      	sub	sp, #80	; 0x50
 800f590:	af02      	add	r7, sp, #8
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5a2:	3b14      	subs	r3, #20
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	da00      	bge.n	800f5aa <ip4_frag+0x1e>
 800f5a8:	3307      	adds	r3, #7
 800f5aa:	10db      	asrs	r3, r3, #3
 800f5ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f5ae:	2314      	movs	r3, #20
 800f5b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 030f 	and.w	r3, r3, #15
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b14      	cmp	r3, #20
 800f5cc:	d002      	beq.n	800f5d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f5ce:	f06f 0305 	mvn.w	r3, #5
 800f5d2:	e110      	b.n	800f7f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	895b      	ldrh	r3, [r3, #10]
 800f5d8:	2b13      	cmp	r3, #19
 800f5da:	d809      	bhi.n	800f5f0 <ip4_frag+0x64>
 800f5dc:	4b88      	ldr	r3, [pc, #544]	; (800f800 <ip4_frag+0x274>)
 800f5de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f5e2:	4988      	ldr	r1, [pc, #544]	; (800f804 <ip4_frag+0x278>)
 800f5e4:	4888      	ldr	r0, [pc, #544]	; (800f808 <ip4_frag+0x27c>)
 800f5e6:	f000 fc2b 	bl	800fe40 <iprintf>
 800f5ea:	f06f 0305 	mvn.w	r3, #5
 800f5ee:	e102      	b.n	800f7f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	88db      	ldrh	r3, [r3, #6]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f5 fe7e 	bl	80052f8 <lwip_htons>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f606:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f60a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f60c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f610:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	891b      	ldrh	r3, [r3, #8]
 800f616:	3b14      	subs	r3, #20
 800f618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f61c:	e0e1      	b.n	800f7e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f61e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f620:	00db      	lsls	r3, r3, #3
 800f622:	b29b      	uxth	r3, r3
 800f624:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f628:	4293      	cmp	r3, r2
 800f62a:	bf28      	it	cs
 800f62c:	4613      	movcs	r3, r2
 800f62e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f630:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f634:	2114      	movs	r1, #20
 800f636:	200e      	movs	r0, #14
 800f638:	f7f6 fe2e 	bl	8006298 <pbuf_alloc>
 800f63c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 80d5 	beq.w	800f7f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	895b      	ldrh	r3, [r3, #10]
 800f64a:	2b13      	cmp	r3, #19
 800f64c:	d806      	bhi.n	800f65c <ip4_frag+0xd0>
 800f64e:	4b6c      	ldr	r3, [pc, #432]	; (800f800 <ip4_frag+0x274>)
 800f650:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f654:	496d      	ldr	r1, [pc, #436]	; (800f80c <ip4_frag+0x280>)
 800f656:	486c      	ldr	r0, [pc, #432]	; (800f808 <ip4_frag+0x27c>)
 800f658:	f000 fbf2 	bl	800fe40 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	2214      	movs	r2, #20
 800f662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f664:	4618      	mov	r0, r3
 800f666:	f000 fbd5 	bl	800fe14 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f672:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f676:	e064      	b.n	800f742 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	895a      	ldrh	r2, [r3, #10]
 800f67c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	895b      	ldrh	r3, [r3, #10]
 800f686:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f688:	429a      	cmp	r2, r3
 800f68a:	d906      	bls.n	800f69a <ip4_frag+0x10e>
 800f68c:	4b5c      	ldr	r3, [pc, #368]	; (800f800 <ip4_frag+0x274>)
 800f68e:	f240 322d 	movw	r2, #813	; 0x32d
 800f692:	495f      	ldr	r1, [pc, #380]	; (800f810 <ip4_frag+0x284>)
 800f694:	485c      	ldr	r0, [pc, #368]	; (800f808 <ip4_frag+0x27c>)
 800f696:	f000 fbd3 	bl	800fe40 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f69a:	8bfa      	ldrh	r2, [r7, #30]
 800f69c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	bf28      	it	cs
 800f6a4:	4613      	movcs	r3, r2
 800f6a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f6aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d105      	bne.n	800f6be <ip4_frag+0x132>
        poff = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	60fb      	str	r3, [r7, #12]
        continue;
 800f6bc:	e041      	b.n	800f742 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f6be:	f7ff ff0d 	bl	800f4dc <ip_frag_alloc_pbuf_custom_ref>
 800f6c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d103      	bne.n	800f6d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f6ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6cc:	f7f7 f8c8 	bl	8006860 <pbuf_free>
        goto memerr;
 800f6d0:	e08f      	b.n	800f7f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6da:	4413      	add	r3, r2
 800f6dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f6e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f6e4:	9201      	str	r2, [sp, #4]
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2241      	movs	r2, #65	; 0x41
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f7f6 fefd 	bl	80064ec <pbuf_alloced_custom>
 800f6f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d106      	bne.n	800f708 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f6fa:	69b8      	ldr	r0, [r7, #24]
 800f6fc:	f7ff fef6 	bl	800f4ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f702:	f7f7 f8ad 	bl	8006860 <pbuf_free>
        goto memerr;
 800f706:	e074      	b.n	800f7f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f7f7 f949 	bl	80069a0 <pbuf_ref>
      pcr->original = p;
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	4a3f      	ldr	r2, [pc, #252]	; (800f814 <ip4_frag+0x288>)
 800f718:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f71a:	6979      	ldr	r1, [r7, #20]
 800f71c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f71e:	f7f7 f961 	bl	80069e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f722:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f730:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f734:	2b00      	cmp	r3, #0
 800f736:	d004      	beq.n	800f742 <ip4_frag+0x1b6>
        poff = 0;
 800f738:	2300      	movs	r3, #0
 800f73a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f742:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f746:	2b00      	cmp	r3, #0
 800f748:	d196      	bne.n	800f678 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f74a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f74c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f750:	4413      	add	r3, r2
 800f752:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f758:	f1a3 0213 	sub.w	r2, r3, #19
 800f75c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f760:	429a      	cmp	r2, r3
 800f762:	bfcc      	ite	gt
 800f764:	2301      	movgt	r3, #1
 800f766:	2300      	movle	r3, #0
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f76c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f774:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <ip4_frag+0x1f6>
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d003      	beq.n	800f78a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f782:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f788:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f78a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7f5 fdb3 	bl	80052f8 <lwip_htons>
 800f792:	4603      	mov	r3, r0
 800f794:	461a      	mov	r2, r3
 800f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f798:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f79a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f79c:	3314      	adds	r3, #20
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7f5 fda9 	bl	80052f8 <lwip_htons>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	729a      	strb	r2, [r3, #10]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	695b      	ldr	r3, [r3, #20]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7c0:	68b8      	ldr	r0, [r7, #8]
 800f7c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f7c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7c6:	f7f7 f84b 	bl	8006860 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f7ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f7d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f7da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f7dc:	4413      	add	r3, r2
 800f7de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f7e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	f47f af19 	bne.w	800f61e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	e002      	b.n	800f7f6 <ip4_frag+0x26a>
      goto memerr;
 800f7f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3748      	adds	r7, #72	; 0x48
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	0801369c 	.word	0x0801369c
 800f804:	08013878 	.word	0x08013878
 800f808:	080136e4 	.word	0x080136e4
 800f80c:	08013894 	.word	0x08013894
 800f810:	080138b4 	.word	0x080138b4
 800f814:	0800f525 	.word	0x0800f525

0800f818 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f822:	230e      	movs	r3, #14
 800f824:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	895b      	ldrh	r3, [r3, #10]
 800f82a:	2b0e      	cmp	r3, #14
 800f82c:	d96e      	bls.n	800f90c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	7bdb      	ldrb	r3, [r3, #15]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d106      	bne.n	800f844 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f83c:	3301      	adds	r3, #1
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	7b1a      	ldrb	r2, [r3, #12]
 800f84e:	7b5b      	ldrb	r3, [r3, #13]
 800f850:	021b      	lsls	r3, r3, #8
 800f852:	4313      	orrs	r3, r2
 800f854:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	f003 0301 	and.w	r3, r3, #1
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d023      	beq.n	800f8aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	2b01      	cmp	r3, #1
 800f868:	d10f      	bne.n	800f88a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	785b      	ldrb	r3, [r3, #1]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d11b      	bne.n	800f8aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f876:	2b5e      	cmp	r3, #94	; 0x5e
 800f878:	d117      	bne.n	800f8aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	7b5b      	ldrb	r3, [r3, #13]
 800f87e:	f043 0310 	orr.w	r3, r3, #16
 800f882:	b2da      	uxtb	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	735a      	strb	r2, [r3, #13]
 800f888:	e00f      	b.n	800f8aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	2206      	movs	r2, #6
 800f88e:	4928      	ldr	r1, [pc, #160]	; (800f930 <ethernet_input+0x118>)
 800f890:	4618      	mov	r0, r3
 800f892:	f000 fab1 	bl	800fdf8 <memcmp>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d106      	bne.n	800f8aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	7b5b      	ldrb	r3, [r3, #13]
 800f8a0:	f043 0308 	orr.w	r3, r3, #8
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f8aa:	89fb      	ldrh	r3, [r7, #14]
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	d003      	beq.n	800f8b8 <ethernet_input+0xa0>
 800f8b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f8b4:	d014      	beq.n	800f8e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f8b6:	e032      	b.n	800f91e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8be:	f003 0308 	and.w	r3, r3, #8
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d024      	beq.n	800f910 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f8c6:	8afb      	ldrh	r3, [r7, #22]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7f6 ff42 	bl	8006754 <pbuf_remove_header>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d11e      	bne.n	800f914 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f8d6:	6839      	ldr	r1, [r7, #0]
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fe ff27 	bl	800e72c <ip4_input>
      break;
 800f8de:	e013      	b.n	800f908 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8e6:	f003 0308 	and.w	r3, r3, #8
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d014      	beq.n	800f918 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f8ee:	8afb      	ldrh	r3, [r7, #22]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7f6 ff2e 	bl	8006754 <pbuf_remove_header>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10e      	bne.n	800f91c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fe f8c7 	bl	800da94 <etharp_input>
      break;
 800f906:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	e00c      	b.n	800f926 <ethernet_input+0x10e>
    goto free_and_return;
 800f90c:	bf00      	nop
 800f90e:	e006      	b.n	800f91e <ethernet_input+0x106>
        goto free_and_return;
 800f910:	bf00      	nop
 800f912:	e004      	b.n	800f91e <ethernet_input+0x106>
        goto free_and_return;
 800f914:	bf00      	nop
 800f916:	e002      	b.n	800f91e <ethernet_input+0x106>
        goto free_and_return;
 800f918:	bf00      	nop
 800f91a:	e000      	b.n	800f91e <ethernet_input+0x106>
        goto free_and_return;
 800f91c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7f6 ff9e 	bl	8006860 <pbuf_free>
  return ERR_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	08013ac0 	.word	0x08013ac0

0800f934 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f934:	b580      	push	{r7, lr}
 800f936:	b086      	sub	sp, #24
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f942:	8c3b      	ldrh	r3, [r7, #32]
 800f944:	4618      	mov	r0, r3
 800f946:	f7f5 fcd7 	bl	80052f8 <lwip_htons>
 800f94a:	4603      	mov	r3, r0
 800f94c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f94e:	210e      	movs	r1, #14
 800f950:	68b8      	ldr	r0, [r7, #8]
 800f952:	f7f6 feef 	bl	8006734 <pbuf_add_header>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d125      	bne.n	800f9a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	8afa      	ldrh	r2, [r7, #22]
 800f966:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2206      	movs	r2, #6
 800f96c:	6839      	ldr	r1, [r7, #0]
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fa50 	bl	800fe14 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	3306      	adds	r3, #6
 800f978:	2206      	movs	r2, #6
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 fa49 	bl	800fe14 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f988:	2b06      	cmp	r3, #6
 800f98a:	d006      	beq.n	800f99a <ethernet_output+0x66>
 800f98c:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <ethernet_output+0x84>)
 800f98e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f992:	490a      	ldr	r1, [pc, #40]	; (800f9bc <ethernet_output+0x88>)
 800f994:	480a      	ldr	r0, [pc, #40]	; (800f9c0 <ethernet_output+0x8c>)
 800f996:	f000 fa53 	bl	800fe40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	68b9      	ldr	r1, [r7, #8]
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	4798      	blx	r3
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	e002      	b.n	800f9ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f9a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f9aa:	f06f 0301 	mvn.w	r3, #1
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	080138c4 	.word	0x080138c4
 800f9bc:	080138fc 	.word	0x080138fc
 800f9c0:	08013930 	.word	0x08013930

0800f9c4 <tcp_server_init>:
  * @brief  Initializes the tcp  server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_server_pcb = tcp_new();
 800f9ca:	f7f8 fd91 	bl	80084f0 <tcp_new>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	4a19      	ldr	r2, [pc, #100]	; (800fa38 <tcp_server_init+0x74>)
 800f9d2:	6013      	str	r3, [r2, #0]

  if (tcp_server_pcb != NULL)
 800f9d4:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <tcp_server_init+0x74>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d025      	beq.n	800fa28 <tcp_server_init+0x64>
  {
    err_t err;
    ip4_addr_t ipAddress;
    IP4_ADDR(&ipAddress, 192, 168, 100, 1);
 800f9dc:	4b17      	ldr	r3, [pc, #92]	; (800fa3c <tcp_server_init+0x78>)
 800f9de:	603b      	str	r3, [r7, #0]
    uint16_t port = 8000;
 800f9e0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f9e4:	80fb      	strh	r3, [r7, #6]

    /* bind _pcb to port 7 ( protocol) */
    //err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 7);

    err = tcp_bind(tcp_server_pcb, &ipAddress, port);
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <tcp_server_init+0x74>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	88fa      	ldrh	r2, [r7, #6]
 800f9ec:	4639      	mov	r1, r7
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7f7 fcda 	bl	80073a8 <tcp_bind>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	717b      	strb	r3, [r7, #5]

    if (err == ERR_OK)
 800f9f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10f      	bne.n	800fa20 <tcp_server_init+0x5c>
    {
      /* start tcp listening for _pcb */
      tcp_server_pcb = tcp_listen(tcp_server_pcb);
 800fa00:	4b0d      	ldr	r3, [pc, #52]	; (800fa38 <tcp_server_init+0x74>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	21ff      	movs	r1, #255	; 0xff
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f7 fd86 	bl	8007518 <tcp_listen_with_backlog>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	4a0a      	ldr	r2, [pc, #40]	; (800fa38 <tcp_server_init+0x74>)
 800fa10:	6013      	str	r3, [r2, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_server_pcb, tcp_server_accept);
 800fa12:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <tcp_server_init+0x74>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	490a      	ldr	r1, [pc, #40]	; (800fa40 <tcp_server_init+0x7c>)
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f8 fde9 	bl	80085f0 <tcp_accept>
  }
  else
  {
    printf("Can not create new pcb\n");
  }
}
 800fa1e:	e006      	b.n	800fa2e <tcp_server_init+0x6a>
      printf("Can not bind pcb\n");
 800fa20:	4808      	ldr	r0, [pc, #32]	; (800fa44 <tcp_server_init+0x80>)
 800fa22:	f000 fa93 	bl	800ff4c <puts>
}
 800fa26:	e002      	b.n	800fa2e <tcp_server_init+0x6a>
    printf("Can not create new pcb\n");
 800fa28:	4807      	ldr	r0, [pc, #28]	; (800fa48 <tcp_server_init+0x84>)
 800fa2a:	f000 fa8f 	bl	800ff4c <puts>
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20000208 	.word	0x20000208
 800fa3c:	0164a8c0 	.word	0x0164a8c0
 800fa40:	0800fa4d 	.word	0x0800fa4d
 800fa44:	08013958 	.word	0x08013958
 800fa48:	0801396c 	.word	0x0801396c

0800fa4c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b086      	sub	sp, #24
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	4613      	mov	r3, r2
 800fa58:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	68b8      	ldr	r0, [r7, #8]
 800fa5e:	f7f8 fb55 	bl	800810c <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 800fa62:	200c      	movs	r0, #12
 800fa64:	f7f5 ff30 	bl	80058c8 <mem_malloc>
 800fa68:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d01c      	beq.n	800faaa <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	2201      	movs	r2, #1
 800fa74:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	68ba      	ldr	r2, [r7, #8]
 800fa7a:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800fa82:	6939      	ldr	r1, [r7, #16]
 800fa84:	68b8      	ldr	r0, [r7, #8]
 800fa86:	f7f8 fd3b 	bl	8008500 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 800fa8a:	490c      	ldr	r1, [pc, #48]	; (800fabc <tcp_server_accept+0x70>)
 800fa8c:	68b8      	ldr	r0, [r7, #8]
 800fa8e:	f7f8 fd49 	bl	8008524 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 800fa92:	490b      	ldr	r1, [pc, #44]	; (800fac0 <tcp_server_accept+0x74>)
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f7f8 fd89 	bl	80085ac <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	4909      	ldr	r1, [pc, #36]	; (800fac4 <tcp_server_accept+0x78>)
 800fa9e:	68b8      	ldr	r0, [r7, #8]
 800faa0:	f7f8 fdbe 	bl	8008620 <tcp_poll>

    ret_err = ERR_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	75fb      	strb	r3, [r7, #23]
 800faa8:	e001      	b.n	800faae <tcp_server_accept+0x62>
  }
  else
  {
    /* return memory error */
    ret_err = ERR_MEM;
 800faaa:	23ff      	movs	r3, #255	; 0xff
 800faac:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 800faae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	0800fac9 	.word	0x0800fac9
 800fac0:	0800fbd9 	.word	0x0800fbd9
 800fac4:	0800fbfd 	.word	0x0800fbfd

0800fac8 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d105      	bne.n	800fae8 <tcp_server_recv+0x20>
 800fadc:	4b3a      	ldr	r3, [pc, #232]	; (800fbc8 <tcp_server_recv+0x100>)
 800fade:	227b      	movs	r2, #123	; 0x7b
 800fae0:	493a      	ldr	r1, [pc, #232]	; (800fbcc <tcp_server_recv+0x104>)
 800fae2:	483b      	ldr	r0, [pc, #236]	; (800fbd0 <tcp_server_recv+0x108>)
 800fae4:	f000 f9ac 	bl	800fe40 <iprintf>

  es = (struct tcp_server_struct *)arg;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d116      	bne.n	800fb20 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	2203      	movs	r2, #3
 800faf6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d104      	bne.n	800fb0a <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 800fb00:	69b9      	ldr	r1, [r7, #24]
 800fb02:	68b8      	ldr	r0, [r7, #8]
 800fb04:	f000 f92c 	bl	800fd60 <tcp_server_connection_close>
 800fb08:	e007      	b.n	800fb1a <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 800fb0a:	4932      	ldr	r1, [pc, #200]	; (800fbd4 <tcp_server_recv+0x10c>)
 800fb0c:	68b8      	ldr	r0, [r7, #8]
 800fb0e:	f7f8 fd2b 	bl	8008568 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800fb12:	69b9      	ldr	r1, [r7, #24]
 800fb14:	68b8      	ldr	r0, [r7, #8]
 800fb16:	f000 f8b9 	bl	800fc8c <tcp_server_send>
    }
    ret_err = ERR_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	77fb      	strb	r3, [r7, #31]
 800fb1e:	e04c      	b.n	800fbba <tcp_server_recv+0xf2>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800fb20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00b      	beq.n	800fb40 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d005      	beq.n	800fb3a <tcp_server_recv+0x72>
    {
      es->p = NULL;
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	2200      	movs	r2, #0
 800fb32:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7f6 fe93 	bl	8006860 <pbuf_free>
    }
    ret_err = err;
 800fb3a:	78fb      	ldrb	r3, [r7, #3]
 800fb3c:	77fb      	strb	r3, [r7, #31]
 800fb3e:	e03c      	b.n	800fbba <tcp_server_recv+0xf2>
  }
  else if(es->state == ES_ACCEPTED)
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d110      	bne.n	800fb6a <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	2202      	movs	r2, #2
 800fb4c:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 800fb54:	491f      	ldr	r1, [pc, #124]	; (800fbd4 <tcp_server_recv+0x10c>)
 800fb56:	68b8      	ldr	r0, [r7, #8]
 800fb58:	f7f8 fd06 	bl	8008568 <tcp_sent>

    /* send back the received data () */
    tcp_server_send(tpcb, es);
 800fb5c:	69b9      	ldr	r1, [r7, #24]
 800fb5e:	68b8      	ldr	r0, [r7, #8]
 800fb60:	f000 f894 	bl	800fc8c <tcp_server_send>

    ret_err = ERR_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	77fb      	strb	r3, [r7, #31]
 800fb68:	e027      	b.n	800fbba <tcp_server_recv+0xf2>
  }
  else if (es->state == ES_RECEIVED)
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d115      	bne.n	800fb9e <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d107      	bne.n	800fb8a <tcp_server_recv+0xc2>
    {
      es->p = p;
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 800fb80:	69b9      	ldr	r1, [r7, #24]
 800fb82:	68b8      	ldr	r0, [r7, #8]
 800fb84:	f000 f882 	bl	800fc8c <tcp_server_send>
 800fb88:	e006      	b.n	800fb98 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 800fb90:	6879      	ldr	r1, [r7, #4]
 800fb92:	6978      	ldr	r0, [r7, #20]
 800fb94:	f7f6 ff7c 	bl	8006a90 <pbuf_chain>
    }
    ret_err = ERR_OK;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	77fb      	strb	r3, [r7, #31]
 800fb9c:	e00d      	b.n	800fbba <tcp_server_recv+0xf2>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	891b      	ldrh	r3, [r3, #8]
 800fba2:	4619      	mov	r1, r3
 800fba4:	68b8      	ldr	r0, [r7, #8]
 800fba6:	f7f7 fdcd 	bl	8007744 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	2200      	movs	r2, #0
 800fbae:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f7f6 fe55 	bl	8006860 <pbuf_free>
    ret_err = ERR_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 800fbba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3720      	adds	r7, #32
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	08013984 	.word	0x08013984
 800fbcc:	080139a0 	.word	0x080139a0
 800fbd0:	080139ac 	.word	0x080139ac
 800fbd4:	0800fc4f 	.word	0x0800fc4f

0800fbd8 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f7f5 fd04 	bl	80055fc <mem_free>
  }
}
 800fbf4:	bf00      	nop
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d013      	beq.n	800fc38 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d004      	beq.n	800fc22 <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	6838      	ldr	r0, [r7, #0]
 800fc1c:	f000 f836 	bl	800fc8c <tcp_server_send>
 800fc20:	e007      	b.n	800fc32 <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	2b03      	cmp	r3, #3
 800fc28:	d103      	bne.n	800fc32 <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800fc2a:	68b9      	ldr	r1, [r7, #8]
 800fc2c:	6838      	ldr	r0, [r7, #0]
 800fc2e:	f000 f897 	bl	800fd60 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	73fb      	strb	r3, [r7, #15]
 800fc36:	e004      	b.n	800fc42 <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800fc38:	6838      	ldr	r0, [r7, #0]
 800fc3a:	f7f7 fba9 	bl	8007390 <tcp_abort>
    ret_err = ERR_ABRT;
 800fc3e:	23f3      	movs	r3, #243	; 0xf3
 800fc40:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800fc42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3710      	adds	r7, #16
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b086      	sub	sp, #24
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	60b9      	str	r1, [r7, #8]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d004      	beq.n	800fc72 <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 800fc68:	6979      	ldr	r1, [r7, #20]
 800fc6a:	68b8      	ldr	r0, [r7, #8]
 800fc6c:	f000 f80e 	bl	800fc8c <tcp_server_send>
 800fc70:	e007      	b.n	800fc82 <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d103      	bne.n	800fc82 <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 800fc7a:	6979      	ldr	r1, [r7, #20]
 800fc7c:	68b8      	ldr	r0, [r7, #8]
 800fc7e:	f000 f86f 	bl	800fd60 <tcp_server_connection_close>
  }
  return ERR_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3718      	adds	r7, #24
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 800fc9a:	e04d      	b.n	800fd38 <tcp_server_send+0xac>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	6859      	ldr	r1, [r3, #4]
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	895a      	ldrh	r2, [r3, #10]
 800fcaa:	2301      	movs	r3, #1
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7fb fb65 	bl	800b37c <tcp_write>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800fcb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d134      	bne.n	800fd28 <tcp_server_send+0x9c>
    {
      u16_t plen;

      plen = ptr->len;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	895b      	ldrh	r3, [r3, #10]
 800fcc2:	81fb      	strh	r3, [r7, #14]

      char *pReceived = (char*)mem_malloc((size_t)(plen + 1));
 800fcc4:	89fb      	ldrh	r3, [r7, #14]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f5 fdfc 	bl	80058c8 <mem_malloc>
 800fcd0:	60b8      	str	r0, [r7, #8]
      memcpy(pReceived, ptr->payload, plen);
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	89fa      	ldrh	r2, [r7, #14]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f000 f89a 	bl	800fe14 <memcpy>
      memset(pReceived + plen, 0, 1);
 800fce0:	89fb      	ldrh	r3, [r7, #14]
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	4413      	add	r3, r2
 800fce6:	2201      	movs	r2, #1
 800fce8:	2100      	movs	r1, #0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 f8a0 	bl	800fe30 <memset>
      printf("%s\n", pReceived);
 800fcf0:	68b8      	ldr	r0, [r7, #8]
 800fcf2:	f000 f92b 	bl	800ff4c <puts>
      mem_free(pReceived);
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	f7f5 fc80 	bl	80055fc <mem_free>

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d004      	beq.n	800fd16 <tcp_server_send+0x8a>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7f6 fe45 	bl	80069a0 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 800fd16:	6938      	ldr	r0, [r7, #16]
 800fd18:	f7f6 fda2 	bl	8006860 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 800fd1c:	89fb      	ldrh	r3, [r7, #14]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7f7 fd0f 	bl	8007744 <tcp_recved>
 800fd26:	e007      	b.n	800fd38 <tcp_server_send+0xac>
   }
   else if(wr_err == ERR_MEM)
 800fd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd30:	d102      	bne.n	800fd38 <tcp_server_send+0xac>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	693a      	ldr	r2, [r7, #16]
 800fd36:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800fd38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10b      	bne.n	800fd58 <tcp_server_send+0xcc>
         (es->p != NULL) &&
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d007      	beq.n	800fd58 <tcp_server_send+0xcc>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	895a      	ldrh	r2, [r3, #10]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d9a1      	bls.n	800fc9c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800fd58:	bf00      	nop
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7f8 fbc7 	bl	8008500 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800fd72:	2100      	movs	r1, #0
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7f8 fbf7 	bl	8008568 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7f8 fbd1 	bl	8008524 <tcp_recv>
  tcp_err(tpcb, NULL);
 800fd82:	2100      	movs	r1, #0
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7f8 fc11 	bl	80085ac <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7f8 fc46 	bl	8008620 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d002      	beq.n	800fda0 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 800fd9a:	6838      	ldr	r0, [r7, #0]
 800fd9c:	f7f5 fc2e 	bl	80055fc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7f7 fa0b 	bl	80071bc <tcp_close>
}
 800fda6:	bf00      	nop
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
	...

0800fdb0 <__libc_init_array>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4d0d      	ldr	r5, [pc, #52]	; (800fde8 <__libc_init_array+0x38>)
 800fdb4:	4c0d      	ldr	r4, [pc, #52]	; (800fdec <__libc_init_array+0x3c>)
 800fdb6:	1b64      	subs	r4, r4, r5
 800fdb8:	10a4      	asrs	r4, r4, #2
 800fdba:	2600      	movs	r6, #0
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	d109      	bne.n	800fdd4 <__libc_init_array+0x24>
 800fdc0:	4d0b      	ldr	r5, [pc, #44]	; (800fdf0 <__libc_init_array+0x40>)
 800fdc2:	4c0c      	ldr	r4, [pc, #48]	; (800fdf4 <__libc_init_array+0x44>)
 800fdc4:	f001 f8cc 	bl	8010f60 <_init>
 800fdc8:	1b64      	subs	r4, r4, r5
 800fdca:	10a4      	asrs	r4, r4, #2
 800fdcc:	2600      	movs	r6, #0
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	d105      	bne.n	800fdde <__libc_init_array+0x2e>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd8:	4798      	blx	r3
 800fdda:	3601      	adds	r6, #1
 800fddc:	e7ee      	b.n	800fdbc <__libc_init_array+0xc>
 800fdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde2:	4798      	blx	r3
 800fde4:	3601      	adds	r6, #1
 800fde6:	e7f2      	b.n	800fdce <__libc_init_array+0x1e>
 800fde8:	08013c24 	.word	0x08013c24
 800fdec:	08013c24 	.word	0x08013c24
 800fdf0:	08013c24 	.word	0x08013c24
 800fdf4:	08013c28 	.word	0x08013c28

0800fdf8 <memcmp>:
 800fdf8:	b530      	push	{r4, r5, lr}
 800fdfa:	3901      	subs	r1, #1
 800fdfc:	2400      	movs	r4, #0
 800fdfe:	42a2      	cmp	r2, r4
 800fe00:	d101      	bne.n	800fe06 <memcmp+0xe>
 800fe02:	2000      	movs	r0, #0
 800fe04:	e005      	b.n	800fe12 <memcmp+0x1a>
 800fe06:	5d03      	ldrb	r3, [r0, r4]
 800fe08:	3401      	adds	r4, #1
 800fe0a:	5d0d      	ldrb	r5, [r1, r4]
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	d0f6      	beq.n	800fdfe <memcmp+0x6>
 800fe10:	1b58      	subs	r0, r3, r5
 800fe12:	bd30      	pop	{r4, r5, pc}

0800fe14 <memcpy>:
 800fe14:	440a      	add	r2, r1
 800fe16:	4291      	cmp	r1, r2
 800fe18:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe1c:	d100      	bne.n	800fe20 <memcpy+0xc>
 800fe1e:	4770      	bx	lr
 800fe20:	b510      	push	{r4, lr}
 800fe22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe2a:	4291      	cmp	r1, r2
 800fe2c:	d1f9      	bne.n	800fe22 <memcpy+0xe>
 800fe2e:	bd10      	pop	{r4, pc}

0800fe30 <memset>:
 800fe30:	4402      	add	r2, r0
 800fe32:	4603      	mov	r3, r0
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d100      	bne.n	800fe3a <memset+0xa>
 800fe38:	4770      	bx	lr
 800fe3a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe3e:	e7f9      	b.n	800fe34 <memset+0x4>

0800fe40 <iprintf>:
 800fe40:	b40f      	push	{r0, r1, r2, r3}
 800fe42:	4b0a      	ldr	r3, [pc, #40]	; (800fe6c <iprintf+0x2c>)
 800fe44:	b513      	push	{r0, r1, r4, lr}
 800fe46:	681c      	ldr	r4, [r3, #0]
 800fe48:	b124      	cbz	r4, 800fe54 <iprintf+0x14>
 800fe4a:	69a3      	ldr	r3, [r4, #24]
 800fe4c:	b913      	cbnz	r3, 800fe54 <iprintf+0x14>
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 fabc 	bl	80103cc <__sinit>
 800fe54:	ab05      	add	r3, sp, #20
 800fe56:	9a04      	ldr	r2, [sp, #16]
 800fe58:	68a1      	ldr	r1, [r4, #8]
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f000 fca7 	bl	80107b0 <_vfiprintf_r>
 800fe62:	b002      	add	sp, #8
 800fe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe68:	b004      	add	sp, #16
 800fe6a:	4770      	bx	lr
 800fe6c:	20000014 	.word	0x20000014

0800fe70 <_puts_r>:
 800fe70:	b570      	push	{r4, r5, r6, lr}
 800fe72:	460e      	mov	r6, r1
 800fe74:	4605      	mov	r5, r0
 800fe76:	b118      	cbz	r0, 800fe80 <_puts_r+0x10>
 800fe78:	6983      	ldr	r3, [r0, #24]
 800fe7a:	b90b      	cbnz	r3, 800fe80 <_puts_r+0x10>
 800fe7c:	f000 faa6 	bl	80103cc <__sinit>
 800fe80:	69ab      	ldr	r3, [r5, #24]
 800fe82:	68ac      	ldr	r4, [r5, #8]
 800fe84:	b913      	cbnz	r3, 800fe8c <_puts_r+0x1c>
 800fe86:	4628      	mov	r0, r5
 800fe88:	f000 faa0 	bl	80103cc <__sinit>
 800fe8c:	4b2c      	ldr	r3, [pc, #176]	; (800ff40 <_puts_r+0xd0>)
 800fe8e:	429c      	cmp	r4, r3
 800fe90:	d120      	bne.n	800fed4 <_puts_r+0x64>
 800fe92:	686c      	ldr	r4, [r5, #4]
 800fe94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe96:	07db      	lsls	r3, r3, #31
 800fe98:	d405      	bmi.n	800fea6 <_puts_r+0x36>
 800fe9a:	89a3      	ldrh	r3, [r4, #12]
 800fe9c:	0598      	lsls	r0, r3, #22
 800fe9e:	d402      	bmi.n	800fea6 <_puts_r+0x36>
 800fea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fea2:	f000 fb43 	bl	801052c <__retarget_lock_acquire_recursive>
 800fea6:	89a3      	ldrh	r3, [r4, #12]
 800fea8:	0719      	lsls	r1, r3, #28
 800feaa:	d51d      	bpl.n	800fee8 <_puts_r+0x78>
 800feac:	6923      	ldr	r3, [r4, #16]
 800feae:	b1db      	cbz	r3, 800fee8 <_puts_r+0x78>
 800feb0:	3e01      	subs	r6, #1
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800feb8:	3b01      	subs	r3, #1
 800feba:	60a3      	str	r3, [r4, #8]
 800febc:	bb39      	cbnz	r1, 800ff0e <_puts_r+0x9e>
 800febe:	2b00      	cmp	r3, #0
 800fec0:	da38      	bge.n	800ff34 <_puts_r+0xc4>
 800fec2:	4622      	mov	r2, r4
 800fec4:	210a      	movs	r1, #10
 800fec6:	4628      	mov	r0, r5
 800fec8:	f000 f888 	bl	800ffdc <__swbuf_r>
 800fecc:	3001      	adds	r0, #1
 800fece:	d011      	beq.n	800fef4 <_puts_r+0x84>
 800fed0:	250a      	movs	r5, #10
 800fed2:	e011      	b.n	800fef8 <_puts_r+0x88>
 800fed4:	4b1b      	ldr	r3, [pc, #108]	; (800ff44 <_puts_r+0xd4>)
 800fed6:	429c      	cmp	r4, r3
 800fed8:	d101      	bne.n	800fede <_puts_r+0x6e>
 800feda:	68ac      	ldr	r4, [r5, #8]
 800fedc:	e7da      	b.n	800fe94 <_puts_r+0x24>
 800fede:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <_puts_r+0xd8>)
 800fee0:	429c      	cmp	r4, r3
 800fee2:	bf08      	it	eq
 800fee4:	68ec      	ldreq	r4, [r5, #12]
 800fee6:	e7d5      	b.n	800fe94 <_puts_r+0x24>
 800fee8:	4621      	mov	r1, r4
 800feea:	4628      	mov	r0, r5
 800feec:	f000 f8c8 	bl	8010080 <__swsetup_r>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	d0dd      	beq.n	800feb0 <_puts_r+0x40>
 800fef4:	f04f 35ff 	mov.w	r5, #4294967295
 800fef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fefa:	07da      	lsls	r2, r3, #31
 800fefc:	d405      	bmi.n	800ff0a <_puts_r+0x9a>
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	059b      	lsls	r3, r3, #22
 800ff02:	d402      	bmi.n	800ff0a <_puts_r+0x9a>
 800ff04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff06:	f000 fb12 	bl	801052e <__retarget_lock_release_recursive>
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	da04      	bge.n	800ff1c <_puts_r+0xac>
 800ff12:	69a2      	ldr	r2, [r4, #24]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	dc06      	bgt.n	800ff26 <_puts_r+0xb6>
 800ff18:	290a      	cmp	r1, #10
 800ff1a:	d004      	beq.n	800ff26 <_puts_r+0xb6>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	6022      	str	r2, [r4, #0]
 800ff22:	7019      	strb	r1, [r3, #0]
 800ff24:	e7c5      	b.n	800feb2 <_puts_r+0x42>
 800ff26:	4622      	mov	r2, r4
 800ff28:	4628      	mov	r0, r5
 800ff2a:	f000 f857 	bl	800ffdc <__swbuf_r>
 800ff2e:	3001      	adds	r0, #1
 800ff30:	d1bf      	bne.n	800feb2 <_puts_r+0x42>
 800ff32:	e7df      	b.n	800fef4 <_puts_r+0x84>
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	250a      	movs	r5, #10
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	6022      	str	r2, [r4, #0]
 800ff3c:	701d      	strb	r5, [r3, #0]
 800ff3e:	e7db      	b.n	800fef8 <_puts_r+0x88>
 800ff40:	08013ba8 	.word	0x08013ba8
 800ff44:	08013bc8 	.word	0x08013bc8
 800ff48:	08013b88 	.word	0x08013b88

0800ff4c <puts>:
 800ff4c:	4b02      	ldr	r3, [pc, #8]	; (800ff58 <puts+0xc>)
 800ff4e:	4601      	mov	r1, r0
 800ff50:	6818      	ldr	r0, [r3, #0]
 800ff52:	f7ff bf8d 	b.w	800fe70 <_puts_r>
 800ff56:	bf00      	nop
 800ff58:	20000014 	.word	0x20000014

0800ff5c <rand>:
 800ff5c:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <rand+0x60>)
 800ff5e:	b510      	push	{r4, lr}
 800ff60:	681c      	ldr	r4, [r3, #0]
 800ff62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff64:	b9b3      	cbnz	r3, 800ff94 <rand+0x38>
 800ff66:	2018      	movs	r0, #24
 800ff68:	f000 fb46 	bl	80105f8 <malloc>
 800ff6c:	63a0      	str	r0, [r4, #56]	; 0x38
 800ff6e:	b928      	cbnz	r0, 800ff7c <rand+0x20>
 800ff70:	4602      	mov	r2, r0
 800ff72:	4b13      	ldr	r3, [pc, #76]	; (800ffc0 <rand+0x64>)
 800ff74:	4813      	ldr	r0, [pc, #76]	; (800ffc4 <rand+0x68>)
 800ff76:	214e      	movs	r1, #78	; 0x4e
 800ff78:	f000 f8f0 	bl	801015c <__assert_func>
 800ff7c:	4a12      	ldr	r2, [pc, #72]	; (800ffc8 <rand+0x6c>)
 800ff7e:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <rand+0x70>)
 800ff80:	e9c0 2300 	strd	r2, r3, [r0]
 800ff84:	4b12      	ldr	r3, [pc, #72]	; (800ffd0 <rand+0x74>)
 800ff86:	6083      	str	r3, [r0, #8]
 800ff88:	230b      	movs	r3, #11
 800ff8a:	8183      	strh	r3, [r0, #12]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ff94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ff96:	480f      	ldr	r0, [pc, #60]	; (800ffd4 <rand+0x78>)
 800ff98:	690a      	ldr	r2, [r1, #16]
 800ff9a:	694b      	ldr	r3, [r1, #20]
 800ff9c:	4c0e      	ldr	r4, [pc, #56]	; (800ffd8 <rand+0x7c>)
 800ff9e:	4350      	muls	r0, r2
 800ffa0:	fb04 0003 	mla	r0, r4, r3, r0
 800ffa4:	fba2 3404 	umull	r3, r4, r2, r4
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	4404      	add	r4, r0
 800ffac:	f144 0000 	adc.w	r0, r4, #0
 800ffb0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ffb4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ffb8:	bd10      	pop	{r4, pc}
 800ffba:	bf00      	nop
 800ffbc:	20000014 	.word	0x20000014
 800ffc0:	08013ad4 	.word	0x08013ad4
 800ffc4:	08013aeb 	.word	0x08013aeb
 800ffc8:	abcd330e 	.word	0xabcd330e
 800ffcc:	e66d1234 	.word	0xe66d1234
 800ffd0:	0005deec 	.word	0x0005deec
 800ffd4:	5851f42d 	.word	0x5851f42d
 800ffd8:	4c957f2d 	.word	0x4c957f2d

0800ffdc <__swbuf_r>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	460e      	mov	r6, r1
 800ffe0:	4614      	mov	r4, r2
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	b118      	cbz	r0, 800ffee <__swbuf_r+0x12>
 800ffe6:	6983      	ldr	r3, [r0, #24]
 800ffe8:	b90b      	cbnz	r3, 800ffee <__swbuf_r+0x12>
 800ffea:	f000 f9ef 	bl	80103cc <__sinit>
 800ffee:	4b21      	ldr	r3, [pc, #132]	; (8010074 <__swbuf_r+0x98>)
 800fff0:	429c      	cmp	r4, r3
 800fff2:	d12b      	bne.n	801004c <__swbuf_r+0x70>
 800fff4:	686c      	ldr	r4, [r5, #4]
 800fff6:	69a3      	ldr	r3, [r4, #24]
 800fff8:	60a3      	str	r3, [r4, #8]
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	071a      	lsls	r2, r3, #28
 800fffe:	d52f      	bpl.n	8010060 <__swbuf_r+0x84>
 8010000:	6923      	ldr	r3, [r4, #16]
 8010002:	b36b      	cbz	r3, 8010060 <__swbuf_r+0x84>
 8010004:	6923      	ldr	r3, [r4, #16]
 8010006:	6820      	ldr	r0, [r4, #0]
 8010008:	1ac0      	subs	r0, r0, r3
 801000a:	6963      	ldr	r3, [r4, #20]
 801000c:	b2f6      	uxtb	r6, r6
 801000e:	4283      	cmp	r3, r0
 8010010:	4637      	mov	r7, r6
 8010012:	dc04      	bgt.n	801001e <__swbuf_r+0x42>
 8010014:	4621      	mov	r1, r4
 8010016:	4628      	mov	r0, r5
 8010018:	f000 f944 	bl	80102a4 <_fflush_r>
 801001c:	bb30      	cbnz	r0, 801006c <__swbuf_r+0x90>
 801001e:	68a3      	ldr	r3, [r4, #8]
 8010020:	3b01      	subs	r3, #1
 8010022:	60a3      	str	r3, [r4, #8]
 8010024:	6823      	ldr	r3, [r4, #0]
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	6022      	str	r2, [r4, #0]
 801002a:	701e      	strb	r6, [r3, #0]
 801002c:	6963      	ldr	r3, [r4, #20]
 801002e:	3001      	adds	r0, #1
 8010030:	4283      	cmp	r3, r0
 8010032:	d004      	beq.n	801003e <__swbuf_r+0x62>
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	07db      	lsls	r3, r3, #31
 8010038:	d506      	bpl.n	8010048 <__swbuf_r+0x6c>
 801003a:	2e0a      	cmp	r6, #10
 801003c:	d104      	bne.n	8010048 <__swbuf_r+0x6c>
 801003e:	4621      	mov	r1, r4
 8010040:	4628      	mov	r0, r5
 8010042:	f000 f92f 	bl	80102a4 <_fflush_r>
 8010046:	b988      	cbnz	r0, 801006c <__swbuf_r+0x90>
 8010048:	4638      	mov	r0, r7
 801004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <__swbuf_r+0x9c>)
 801004e:	429c      	cmp	r4, r3
 8010050:	d101      	bne.n	8010056 <__swbuf_r+0x7a>
 8010052:	68ac      	ldr	r4, [r5, #8]
 8010054:	e7cf      	b.n	800fff6 <__swbuf_r+0x1a>
 8010056:	4b09      	ldr	r3, [pc, #36]	; (801007c <__swbuf_r+0xa0>)
 8010058:	429c      	cmp	r4, r3
 801005a:	bf08      	it	eq
 801005c:	68ec      	ldreq	r4, [r5, #12]
 801005e:	e7ca      	b.n	800fff6 <__swbuf_r+0x1a>
 8010060:	4621      	mov	r1, r4
 8010062:	4628      	mov	r0, r5
 8010064:	f000 f80c 	bl	8010080 <__swsetup_r>
 8010068:	2800      	cmp	r0, #0
 801006a:	d0cb      	beq.n	8010004 <__swbuf_r+0x28>
 801006c:	f04f 37ff 	mov.w	r7, #4294967295
 8010070:	e7ea      	b.n	8010048 <__swbuf_r+0x6c>
 8010072:	bf00      	nop
 8010074:	08013ba8 	.word	0x08013ba8
 8010078:	08013bc8 	.word	0x08013bc8
 801007c:	08013b88 	.word	0x08013b88

08010080 <__swsetup_r>:
 8010080:	4b32      	ldr	r3, [pc, #200]	; (801014c <__swsetup_r+0xcc>)
 8010082:	b570      	push	{r4, r5, r6, lr}
 8010084:	681d      	ldr	r5, [r3, #0]
 8010086:	4606      	mov	r6, r0
 8010088:	460c      	mov	r4, r1
 801008a:	b125      	cbz	r5, 8010096 <__swsetup_r+0x16>
 801008c:	69ab      	ldr	r3, [r5, #24]
 801008e:	b913      	cbnz	r3, 8010096 <__swsetup_r+0x16>
 8010090:	4628      	mov	r0, r5
 8010092:	f000 f99b 	bl	80103cc <__sinit>
 8010096:	4b2e      	ldr	r3, [pc, #184]	; (8010150 <__swsetup_r+0xd0>)
 8010098:	429c      	cmp	r4, r3
 801009a:	d10f      	bne.n	80100bc <__swsetup_r+0x3c>
 801009c:	686c      	ldr	r4, [r5, #4]
 801009e:	89a3      	ldrh	r3, [r4, #12]
 80100a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100a4:	0719      	lsls	r1, r3, #28
 80100a6:	d42c      	bmi.n	8010102 <__swsetup_r+0x82>
 80100a8:	06dd      	lsls	r5, r3, #27
 80100aa:	d411      	bmi.n	80100d0 <__swsetup_r+0x50>
 80100ac:	2309      	movs	r3, #9
 80100ae:	6033      	str	r3, [r6, #0]
 80100b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100b4:	81a3      	strh	r3, [r4, #12]
 80100b6:	f04f 30ff 	mov.w	r0, #4294967295
 80100ba:	e03e      	b.n	801013a <__swsetup_r+0xba>
 80100bc:	4b25      	ldr	r3, [pc, #148]	; (8010154 <__swsetup_r+0xd4>)
 80100be:	429c      	cmp	r4, r3
 80100c0:	d101      	bne.n	80100c6 <__swsetup_r+0x46>
 80100c2:	68ac      	ldr	r4, [r5, #8]
 80100c4:	e7eb      	b.n	801009e <__swsetup_r+0x1e>
 80100c6:	4b24      	ldr	r3, [pc, #144]	; (8010158 <__swsetup_r+0xd8>)
 80100c8:	429c      	cmp	r4, r3
 80100ca:	bf08      	it	eq
 80100cc:	68ec      	ldreq	r4, [r5, #12]
 80100ce:	e7e6      	b.n	801009e <__swsetup_r+0x1e>
 80100d0:	0758      	lsls	r0, r3, #29
 80100d2:	d512      	bpl.n	80100fa <__swsetup_r+0x7a>
 80100d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100d6:	b141      	cbz	r1, 80100ea <__swsetup_r+0x6a>
 80100d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100dc:	4299      	cmp	r1, r3
 80100de:	d002      	beq.n	80100e6 <__swsetup_r+0x66>
 80100e0:	4630      	mov	r0, r6
 80100e2:	f000 fa91 	bl	8010608 <_free_r>
 80100e6:	2300      	movs	r3, #0
 80100e8:	6363      	str	r3, [r4, #52]	; 0x34
 80100ea:	89a3      	ldrh	r3, [r4, #12]
 80100ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100f0:	81a3      	strh	r3, [r4, #12]
 80100f2:	2300      	movs	r3, #0
 80100f4:	6063      	str	r3, [r4, #4]
 80100f6:	6923      	ldr	r3, [r4, #16]
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	89a3      	ldrh	r3, [r4, #12]
 80100fc:	f043 0308 	orr.w	r3, r3, #8
 8010100:	81a3      	strh	r3, [r4, #12]
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	b94b      	cbnz	r3, 801011a <__swsetup_r+0x9a>
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801010c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010110:	d003      	beq.n	801011a <__swsetup_r+0x9a>
 8010112:	4621      	mov	r1, r4
 8010114:	4630      	mov	r0, r6
 8010116:	f000 fa2f 	bl	8010578 <__smakebuf_r>
 801011a:	89a0      	ldrh	r0, [r4, #12]
 801011c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010120:	f010 0301 	ands.w	r3, r0, #1
 8010124:	d00a      	beq.n	801013c <__swsetup_r+0xbc>
 8010126:	2300      	movs	r3, #0
 8010128:	60a3      	str	r3, [r4, #8]
 801012a:	6963      	ldr	r3, [r4, #20]
 801012c:	425b      	negs	r3, r3
 801012e:	61a3      	str	r3, [r4, #24]
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	b943      	cbnz	r3, 8010146 <__swsetup_r+0xc6>
 8010134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010138:	d1ba      	bne.n	80100b0 <__swsetup_r+0x30>
 801013a:	bd70      	pop	{r4, r5, r6, pc}
 801013c:	0781      	lsls	r1, r0, #30
 801013e:	bf58      	it	pl
 8010140:	6963      	ldrpl	r3, [r4, #20]
 8010142:	60a3      	str	r3, [r4, #8]
 8010144:	e7f4      	b.n	8010130 <__swsetup_r+0xb0>
 8010146:	2000      	movs	r0, #0
 8010148:	e7f7      	b.n	801013a <__swsetup_r+0xba>
 801014a:	bf00      	nop
 801014c:	20000014 	.word	0x20000014
 8010150:	08013ba8 	.word	0x08013ba8
 8010154:	08013bc8 	.word	0x08013bc8
 8010158:	08013b88 	.word	0x08013b88

0801015c <__assert_func>:
 801015c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801015e:	4614      	mov	r4, r2
 8010160:	461a      	mov	r2, r3
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <__assert_func+0x2c>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4605      	mov	r5, r0
 8010168:	68d8      	ldr	r0, [r3, #12]
 801016a:	b14c      	cbz	r4, 8010180 <__assert_func+0x24>
 801016c:	4b07      	ldr	r3, [pc, #28]	; (801018c <__assert_func+0x30>)
 801016e:	9100      	str	r1, [sp, #0]
 8010170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010174:	4906      	ldr	r1, [pc, #24]	; (8010190 <__assert_func+0x34>)
 8010176:	462b      	mov	r3, r5
 8010178:	f000 f9a6 	bl	80104c8 <fiprintf>
 801017c:	f000 fe42 	bl	8010e04 <abort>
 8010180:	4b04      	ldr	r3, [pc, #16]	; (8010194 <__assert_func+0x38>)
 8010182:	461c      	mov	r4, r3
 8010184:	e7f3      	b.n	801016e <__assert_func+0x12>
 8010186:	bf00      	nop
 8010188:	20000014 	.word	0x20000014
 801018c:	08013b4a 	.word	0x08013b4a
 8010190:	08013b57 	.word	0x08013b57
 8010194:	08013b85 	.word	0x08013b85

08010198 <__sflush_r>:
 8010198:	898a      	ldrh	r2, [r1, #12]
 801019a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019e:	4605      	mov	r5, r0
 80101a0:	0710      	lsls	r0, r2, #28
 80101a2:	460c      	mov	r4, r1
 80101a4:	d458      	bmi.n	8010258 <__sflush_r+0xc0>
 80101a6:	684b      	ldr	r3, [r1, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	dc05      	bgt.n	80101b8 <__sflush_r+0x20>
 80101ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	dc02      	bgt.n	80101b8 <__sflush_r+0x20>
 80101b2:	2000      	movs	r0, #0
 80101b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101ba:	2e00      	cmp	r6, #0
 80101bc:	d0f9      	beq.n	80101b2 <__sflush_r+0x1a>
 80101be:	2300      	movs	r3, #0
 80101c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101c4:	682f      	ldr	r7, [r5, #0]
 80101c6:	602b      	str	r3, [r5, #0]
 80101c8:	d032      	beq.n	8010230 <__sflush_r+0x98>
 80101ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101cc:	89a3      	ldrh	r3, [r4, #12]
 80101ce:	075a      	lsls	r2, r3, #29
 80101d0:	d505      	bpl.n	80101de <__sflush_r+0x46>
 80101d2:	6863      	ldr	r3, [r4, #4]
 80101d4:	1ac0      	subs	r0, r0, r3
 80101d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101d8:	b10b      	cbz	r3, 80101de <__sflush_r+0x46>
 80101da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101dc:	1ac0      	subs	r0, r0, r3
 80101de:	2300      	movs	r3, #0
 80101e0:	4602      	mov	r2, r0
 80101e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101e4:	6a21      	ldr	r1, [r4, #32]
 80101e6:	4628      	mov	r0, r5
 80101e8:	47b0      	blx	r6
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	89a3      	ldrh	r3, [r4, #12]
 80101ee:	d106      	bne.n	80101fe <__sflush_r+0x66>
 80101f0:	6829      	ldr	r1, [r5, #0]
 80101f2:	291d      	cmp	r1, #29
 80101f4:	d82c      	bhi.n	8010250 <__sflush_r+0xb8>
 80101f6:	4a2a      	ldr	r2, [pc, #168]	; (80102a0 <__sflush_r+0x108>)
 80101f8:	40ca      	lsrs	r2, r1
 80101fa:	07d6      	lsls	r6, r2, #31
 80101fc:	d528      	bpl.n	8010250 <__sflush_r+0xb8>
 80101fe:	2200      	movs	r2, #0
 8010200:	6062      	str	r2, [r4, #4]
 8010202:	04d9      	lsls	r1, r3, #19
 8010204:	6922      	ldr	r2, [r4, #16]
 8010206:	6022      	str	r2, [r4, #0]
 8010208:	d504      	bpl.n	8010214 <__sflush_r+0x7c>
 801020a:	1c42      	adds	r2, r0, #1
 801020c:	d101      	bne.n	8010212 <__sflush_r+0x7a>
 801020e:	682b      	ldr	r3, [r5, #0]
 8010210:	b903      	cbnz	r3, 8010214 <__sflush_r+0x7c>
 8010212:	6560      	str	r0, [r4, #84]	; 0x54
 8010214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010216:	602f      	str	r7, [r5, #0]
 8010218:	2900      	cmp	r1, #0
 801021a:	d0ca      	beq.n	80101b2 <__sflush_r+0x1a>
 801021c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010220:	4299      	cmp	r1, r3
 8010222:	d002      	beq.n	801022a <__sflush_r+0x92>
 8010224:	4628      	mov	r0, r5
 8010226:	f000 f9ef 	bl	8010608 <_free_r>
 801022a:	2000      	movs	r0, #0
 801022c:	6360      	str	r0, [r4, #52]	; 0x34
 801022e:	e7c1      	b.n	80101b4 <__sflush_r+0x1c>
 8010230:	6a21      	ldr	r1, [r4, #32]
 8010232:	2301      	movs	r3, #1
 8010234:	4628      	mov	r0, r5
 8010236:	47b0      	blx	r6
 8010238:	1c41      	adds	r1, r0, #1
 801023a:	d1c7      	bne.n	80101cc <__sflush_r+0x34>
 801023c:	682b      	ldr	r3, [r5, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d0c4      	beq.n	80101cc <__sflush_r+0x34>
 8010242:	2b1d      	cmp	r3, #29
 8010244:	d001      	beq.n	801024a <__sflush_r+0xb2>
 8010246:	2b16      	cmp	r3, #22
 8010248:	d101      	bne.n	801024e <__sflush_r+0xb6>
 801024a:	602f      	str	r7, [r5, #0]
 801024c:	e7b1      	b.n	80101b2 <__sflush_r+0x1a>
 801024e:	89a3      	ldrh	r3, [r4, #12]
 8010250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010254:	81a3      	strh	r3, [r4, #12]
 8010256:	e7ad      	b.n	80101b4 <__sflush_r+0x1c>
 8010258:	690f      	ldr	r7, [r1, #16]
 801025a:	2f00      	cmp	r7, #0
 801025c:	d0a9      	beq.n	80101b2 <__sflush_r+0x1a>
 801025e:	0793      	lsls	r3, r2, #30
 8010260:	680e      	ldr	r6, [r1, #0]
 8010262:	bf08      	it	eq
 8010264:	694b      	ldreq	r3, [r1, #20]
 8010266:	600f      	str	r7, [r1, #0]
 8010268:	bf18      	it	ne
 801026a:	2300      	movne	r3, #0
 801026c:	eba6 0807 	sub.w	r8, r6, r7
 8010270:	608b      	str	r3, [r1, #8]
 8010272:	f1b8 0f00 	cmp.w	r8, #0
 8010276:	dd9c      	ble.n	80101b2 <__sflush_r+0x1a>
 8010278:	6a21      	ldr	r1, [r4, #32]
 801027a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801027c:	4643      	mov	r3, r8
 801027e:	463a      	mov	r2, r7
 8010280:	4628      	mov	r0, r5
 8010282:	47b0      	blx	r6
 8010284:	2800      	cmp	r0, #0
 8010286:	dc06      	bgt.n	8010296 <__sflush_r+0xfe>
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801028e:	81a3      	strh	r3, [r4, #12]
 8010290:	f04f 30ff 	mov.w	r0, #4294967295
 8010294:	e78e      	b.n	80101b4 <__sflush_r+0x1c>
 8010296:	4407      	add	r7, r0
 8010298:	eba8 0800 	sub.w	r8, r8, r0
 801029c:	e7e9      	b.n	8010272 <__sflush_r+0xda>
 801029e:	bf00      	nop
 80102a0:	20400001 	.word	0x20400001

080102a4 <_fflush_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	690b      	ldr	r3, [r1, #16]
 80102a8:	4605      	mov	r5, r0
 80102aa:	460c      	mov	r4, r1
 80102ac:	b913      	cbnz	r3, 80102b4 <_fflush_r+0x10>
 80102ae:	2500      	movs	r5, #0
 80102b0:	4628      	mov	r0, r5
 80102b2:	bd38      	pop	{r3, r4, r5, pc}
 80102b4:	b118      	cbz	r0, 80102be <_fflush_r+0x1a>
 80102b6:	6983      	ldr	r3, [r0, #24]
 80102b8:	b90b      	cbnz	r3, 80102be <_fflush_r+0x1a>
 80102ba:	f000 f887 	bl	80103cc <__sinit>
 80102be:	4b14      	ldr	r3, [pc, #80]	; (8010310 <_fflush_r+0x6c>)
 80102c0:	429c      	cmp	r4, r3
 80102c2:	d11b      	bne.n	80102fc <_fflush_r+0x58>
 80102c4:	686c      	ldr	r4, [r5, #4]
 80102c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0ef      	beq.n	80102ae <_fflush_r+0xa>
 80102ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102d0:	07d0      	lsls	r0, r2, #31
 80102d2:	d404      	bmi.n	80102de <_fflush_r+0x3a>
 80102d4:	0599      	lsls	r1, r3, #22
 80102d6:	d402      	bmi.n	80102de <_fflush_r+0x3a>
 80102d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102da:	f000 f927 	bl	801052c <__retarget_lock_acquire_recursive>
 80102de:	4628      	mov	r0, r5
 80102e0:	4621      	mov	r1, r4
 80102e2:	f7ff ff59 	bl	8010198 <__sflush_r>
 80102e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102e8:	07da      	lsls	r2, r3, #31
 80102ea:	4605      	mov	r5, r0
 80102ec:	d4e0      	bmi.n	80102b0 <_fflush_r+0xc>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	059b      	lsls	r3, r3, #22
 80102f2:	d4dd      	bmi.n	80102b0 <_fflush_r+0xc>
 80102f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102f6:	f000 f91a 	bl	801052e <__retarget_lock_release_recursive>
 80102fa:	e7d9      	b.n	80102b0 <_fflush_r+0xc>
 80102fc:	4b05      	ldr	r3, [pc, #20]	; (8010314 <_fflush_r+0x70>)
 80102fe:	429c      	cmp	r4, r3
 8010300:	d101      	bne.n	8010306 <_fflush_r+0x62>
 8010302:	68ac      	ldr	r4, [r5, #8]
 8010304:	e7df      	b.n	80102c6 <_fflush_r+0x22>
 8010306:	4b04      	ldr	r3, [pc, #16]	; (8010318 <_fflush_r+0x74>)
 8010308:	429c      	cmp	r4, r3
 801030a:	bf08      	it	eq
 801030c:	68ec      	ldreq	r4, [r5, #12]
 801030e:	e7da      	b.n	80102c6 <_fflush_r+0x22>
 8010310:	08013ba8 	.word	0x08013ba8
 8010314:	08013bc8 	.word	0x08013bc8
 8010318:	08013b88 	.word	0x08013b88

0801031c <std>:
 801031c:	2300      	movs	r3, #0
 801031e:	b510      	push	{r4, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	e9c0 3300 	strd	r3, r3, [r0]
 8010326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032a:	6083      	str	r3, [r0, #8]
 801032c:	8181      	strh	r1, [r0, #12]
 801032e:	6643      	str	r3, [r0, #100]	; 0x64
 8010330:	81c2      	strh	r2, [r0, #14]
 8010332:	6183      	str	r3, [r0, #24]
 8010334:	4619      	mov	r1, r3
 8010336:	2208      	movs	r2, #8
 8010338:	305c      	adds	r0, #92	; 0x5c
 801033a:	f7ff fd79 	bl	800fe30 <memset>
 801033e:	4b05      	ldr	r3, [pc, #20]	; (8010354 <std+0x38>)
 8010340:	6263      	str	r3, [r4, #36]	; 0x24
 8010342:	4b05      	ldr	r3, [pc, #20]	; (8010358 <std+0x3c>)
 8010344:	62a3      	str	r3, [r4, #40]	; 0x28
 8010346:	4b05      	ldr	r3, [pc, #20]	; (801035c <std+0x40>)
 8010348:	62e3      	str	r3, [r4, #44]	; 0x2c
 801034a:	4b05      	ldr	r3, [pc, #20]	; (8010360 <std+0x44>)
 801034c:	6224      	str	r4, [r4, #32]
 801034e:	6323      	str	r3, [r4, #48]	; 0x30
 8010350:	bd10      	pop	{r4, pc}
 8010352:	bf00      	nop
 8010354:	08010d59 	.word	0x08010d59
 8010358:	08010d7b 	.word	0x08010d7b
 801035c:	08010db3 	.word	0x08010db3
 8010360:	08010dd7 	.word	0x08010dd7

08010364 <_cleanup_r>:
 8010364:	4901      	ldr	r1, [pc, #4]	; (801036c <_cleanup_r+0x8>)
 8010366:	f000 b8c1 	b.w	80104ec <_fwalk_reent>
 801036a:	bf00      	nop
 801036c:	080102a5 	.word	0x080102a5

08010370 <__sfmoreglue>:
 8010370:	b570      	push	{r4, r5, r6, lr}
 8010372:	1e4a      	subs	r2, r1, #1
 8010374:	2568      	movs	r5, #104	; 0x68
 8010376:	4355      	muls	r5, r2
 8010378:	460e      	mov	r6, r1
 801037a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801037e:	f000 f993 	bl	80106a8 <_malloc_r>
 8010382:	4604      	mov	r4, r0
 8010384:	b140      	cbz	r0, 8010398 <__sfmoreglue+0x28>
 8010386:	2100      	movs	r1, #0
 8010388:	e9c0 1600 	strd	r1, r6, [r0]
 801038c:	300c      	adds	r0, #12
 801038e:	60a0      	str	r0, [r4, #8]
 8010390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010394:	f7ff fd4c 	bl	800fe30 <memset>
 8010398:	4620      	mov	r0, r4
 801039a:	bd70      	pop	{r4, r5, r6, pc}

0801039c <__sfp_lock_acquire>:
 801039c:	4801      	ldr	r0, [pc, #4]	; (80103a4 <__sfp_lock_acquire+0x8>)
 801039e:	f000 b8c5 	b.w	801052c <__retarget_lock_acquire_recursive>
 80103a2:	bf00      	nop
 80103a4:	2000693c 	.word	0x2000693c

080103a8 <__sfp_lock_release>:
 80103a8:	4801      	ldr	r0, [pc, #4]	; (80103b0 <__sfp_lock_release+0x8>)
 80103aa:	f000 b8c0 	b.w	801052e <__retarget_lock_release_recursive>
 80103ae:	bf00      	nop
 80103b0:	2000693c 	.word	0x2000693c

080103b4 <__sinit_lock_acquire>:
 80103b4:	4801      	ldr	r0, [pc, #4]	; (80103bc <__sinit_lock_acquire+0x8>)
 80103b6:	f000 b8b9 	b.w	801052c <__retarget_lock_acquire_recursive>
 80103ba:	bf00      	nop
 80103bc:	20006937 	.word	0x20006937

080103c0 <__sinit_lock_release>:
 80103c0:	4801      	ldr	r0, [pc, #4]	; (80103c8 <__sinit_lock_release+0x8>)
 80103c2:	f000 b8b4 	b.w	801052e <__retarget_lock_release_recursive>
 80103c6:	bf00      	nop
 80103c8:	20006937 	.word	0x20006937

080103cc <__sinit>:
 80103cc:	b510      	push	{r4, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	f7ff fff0 	bl	80103b4 <__sinit_lock_acquire>
 80103d4:	69a3      	ldr	r3, [r4, #24]
 80103d6:	b11b      	cbz	r3, 80103e0 <__sinit+0x14>
 80103d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103dc:	f7ff bff0 	b.w	80103c0 <__sinit_lock_release>
 80103e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103e4:	6523      	str	r3, [r4, #80]	; 0x50
 80103e6:	4b13      	ldr	r3, [pc, #76]	; (8010434 <__sinit+0x68>)
 80103e8:	4a13      	ldr	r2, [pc, #76]	; (8010438 <__sinit+0x6c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80103ee:	42a3      	cmp	r3, r4
 80103f0:	bf04      	itt	eq
 80103f2:	2301      	moveq	r3, #1
 80103f4:	61a3      	streq	r3, [r4, #24]
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 f820 	bl	801043c <__sfp>
 80103fc:	6060      	str	r0, [r4, #4]
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 f81c 	bl	801043c <__sfp>
 8010404:	60a0      	str	r0, [r4, #8]
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f818 	bl	801043c <__sfp>
 801040c:	2200      	movs	r2, #0
 801040e:	60e0      	str	r0, [r4, #12]
 8010410:	2104      	movs	r1, #4
 8010412:	6860      	ldr	r0, [r4, #4]
 8010414:	f7ff ff82 	bl	801031c <std>
 8010418:	68a0      	ldr	r0, [r4, #8]
 801041a:	2201      	movs	r2, #1
 801041c:	2109      	movs	r1, #9
 801041e:	f7ff ff7d 	bl	801031c <std>
 8010422:	68e0      	ldr	r0, [r4, #12]
 8010424:	2202      	movs	r2, #2
 8010426:	2112      	movs	r1, #18
 8010428:	f7ff ff78 	bl	801031c <std>
 801042c:	2301      	movs	r3, #1
 801042e:	61a3      	str	r3, [r4, #24]
 8010430:	e7d2      	b.n	80103d8 <__sinit+0xc>
 8010432:	bf00      	nop
 8010434:	08013ad0 	.word	0x08013ad0
 8010438:	08010365 	.word	0x08010365

0801043c <__sfp>:
 801043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043e:	4607      	mov	r7, r0
 8010440:	f7ff ffac 	bl	801039c <__sfp_lock_acquire>
 8010444:	4b1e      	ldr	r3, [pc, #120]	; (80104c0 <__sfp+0x84>)
 8010446:	681e      	ldr	r6, [r3, #0]
 8010448:	69b3      	ldr	r3, [r6, #24]
 801044a:	b913      	cbnz	r3, 8010452 <__sfp+0x16>
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff ffbd 	bl	80103cc <__sinit>
 8010452:	3648      	adds	r6, #72	; 0x48
 8010454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010458:	3b01      	subs	r3, #1
 801045a:	d503      	bpl.n	8010464 <__sfp+0x28>
 801045c:	6833      	ldr	r3, [r6, #0]
 801045e:	b30b      	cbz	r3, 80104a4 <__sfp+0x68>
 8010460:	6836      	ldr	r6, [r6, #0]
 8010462:	e7f7      	b.n	8010454 <__sfp+0x18>
 8010464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010468:	b9d5      	cbnz	r5, 80104a0 <__sfp+0x64>
 801046a:	4b16      	ldr	r3, [pc, #88]	; (80104c4 <__sfp+0x88>)
 801046c:	60e3      	str	r3, [r4, #12]
 801046e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010472:	6665      	str	r5, [r4, #100]	; 0x64
 8010474:	f000 f859 	bl	801052a <__retarget_lock_init_recursive>
 8010478:	f7ff ff96 	bl	80103a8 <__sfp_lock_release>
 801047c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010484:	6025      	str	r5, [r4, #0]
 8010486:	61a5      	str	r5, [r4, #24]
 8010488:	2208      	movs	r2, #8
 801048a:	4629      	mov	r1, r5
 801048c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010490:	f7ff fcce 	bl	800fe30 <memset>
 8010494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801049c:	4620      	mov	r0, r4
 801049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a0:	3468      	adds	r4, #104	; 0x68
 80104a2:	e7d9      	b.n	8010458 <__sfp+0x1c>
 80104a4:	2104      	movs	r1, #4
 80104a6:	4638      	mov	r0, r7
 80104a8:	f7ff ff62 	bl	8010370 <__sfmoreglue>
 80104ac:	4604      	mov	r4, r0
 80104ae:	6030      	str	r0, [r6, #0]
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d1d5      	bne.n	8010460 <__sfp+0x24>
 80104b4:	f7ff ff78 	bl	80103a8 <__sfp_lock_release>
 80104b8:	230c      	movs	r3, #12
 80104ba:	603b      	str	r3, [r7, #0]
 80104bc:	e7ee      	b.n	801049c <__sfp+0x60>
 80104be:	bf00      	nop
 80104c0:	08013ad0 	.word	0x08013ad0
 80104c4:	ffff0001 	.word	0xffff0001

080104c8 <fiprintf>:
 80104c8:	b40e      	push	{r1, r2, r3}
 80104ca:	b503      	push	{r0, r1, lr}
 80104cc:	4601      	mov	r1, r0
 80104ce:	ab03      	add	r3, sp, #12
 80104d0:	4805      	ldr	r0, [pc, #20]	; (80104e8 <fiprintf+0x20>)
 80104d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d6:	6800      	ldr	r0, [r0, #0]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f000 f969 	bl	80107b0 <_vfiprintf_r>
 80104de:	b002      	add	sp, #8
 80104e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104e4:	b003      	add	sp, #12
 80104e6:	4770      	bx	lr
 80104e8:	20000014 	.word	0x20000014

080104ec <_fwalk_reent>:
 80104ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f0:	4606      	mov	r6, r0
 80104f2:	4688      	mov	r8, r1
 80104f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104f8:	2700      	movs	r7, #0
 80104fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104fe:	f1b9 0901 	subs.w	r9, r9, #1
 8010502:	d505      	bpl.n	8010510 <_fwalk_reent+0x24>
 8010504:	6824      	ldr	r4, [r4, #0]
 8010506:	2c00      	cmp	r4, #0
 8010508:	d1f7      	bne.n	80104fa <_fwalk_reent+0xe>
 801050a:	4638      	mov	r0, r7
 801050c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010510:	89ab      	ldrh	r3, [r5, #12]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d907      	bls.n	8010526 <_fwalk_reent+0x3a>
 8010516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801051a:	3301      	adds	r3, #1
 801051c:	d003      	beq.n	8010526 <_fwalk_reent+0x3a>
 801051e:	4629      	mov	r1, r5
 8010520:	4630      	mov	r0, r6
 8010522:	47c0      	blx	r8
 8010524:	4307      	orrs	r7, r0
 8010526:	3568      	adds	r5, #104	; 0x68
 8010528:	e7e9      	b.n	80104fe <_fwalk_reent+0x12>

0801052a <__retarget_lock_init_recursive>:
 801052a:	4770      	bx	lr

0801052c <__retarget_lock_acquire_recursive>:
 801052c:	4770      	bx	lr

0801052e <__retarget_lock_release_recursive>:
 801052e:	4770      	bx	lr

08010530 <__swhatbuf_r>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	460e      	mov	r6, r1
 8010534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010538:	2900      	cmp	r1, #0
 801053a:	b096      	sub	sp, #88	; 0x58
 801053c:	4614      	mov	r4, r2
 801053e:	461d      	mov	r5, r3
 8010540:	da07      	bge.n	8010552 <__swhatbuf_r+0x22>
 8010542:	2300      	movs	r3, #0
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	89b3      	ldrh	r3, [r6, #12]
 8010548:	061a      	lsls	r2, r3, #24
 801054a:	d410      	bmi.n	801056e <__swhatbuf_r+0x3e>
 801054c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010550:	e00e      	b.n	8010570 <__swhatbuf_r+0x40>
 8010552:	466a      	mov	r2, sp
 8010554:	f000 fc6e 	bl	8010e34 <_fstat_r>
 8010558:	2800      	cmp	r0, #0
 801055a:	dbf2      	blt.n	8010542 <__swhatbuf_r+0x12>
 801055c:	9a01      	ldr	r2, [sp, #4]
 801055e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010566:	425a      	negs	r2, r3
 8010568:	415a      	adcs	r2, r3
 801056a:	602a      	str	r2, [r5, #0]
 801056c:	e7ee      	b.n	801054c <__swhatbuf_r+0x1c>
 801056e:	2340      	movs	r3, #64	; 0x40
 8010570:	2000      	movs	r0, #0
 8010572:	6023      	str	r3, [r4, #0]
 8010574:	b016      	add	sp, #88	; 0x58
 8010576:	bd70      	pop	{r4, r5, r6, pc}

08010578 <__smakebuf_r>:
 8010578:	898b      	ldrh	r3, [r1, #12]
 801057a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801057c:	079d      	lsls	r5, r3, #30
 801057e:	4606      	mov	r6, r0
 8010580:	460c      	mov	r4, r1
 8010582:	d507      	bpl.n	8010594 <__smakebuf_r+0x1c>
 8010584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	6123      	str	r3, [r4, #16]
 801058c:	2301      	movs	r3, #1
 801058e:	6163      	str	r3, [r4, #20]
 8010590:	b002      	add	sp, #8
 8010592:	bd70      	pop	{r4, r5, r6, pc}
 8010594:	ab01      	add	r3, sp, #4
 8010596:	466a      	mov	r2, sp
 8010598:	f7ff ffca 	bl	8010530 <__swhatbuf_r>
 801059c:	9900      	ldr	r1, [sp, #0]
 801059e:	4605      	mov	r5, r0
 80105a0:	4630      	mov	r0, r6
 80105a2:	f000 f881 	bl	80106a8 <_malloc_r>
 80105a6:	b948      	cbnz	r0, 80105bc <__smakebuf_r+0x44>
 80105a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ac:	059a      	lsls	r2, r3, #22
 80105ae:	d4ef      	bmi.n	8010590 <__smakebuf_r+0x18>
 80105b0:	f023 0303 	bic.w	r3, r3, #3
 80105b4:	f043 0302 	orr.w	r3, r3, #2
 80105b8:	81a3      	strh	r3, [r4, #12]
 80105ba:	e7e3      	b.n	8010584 <__smakebuf_r+0xc>
 80105bc:	4b0d      	ldr	r3, [pc, #52]	; (80105f4 <__smakebuf_r+0x7c>)
 80105be:	62b3      	str	r3, [r6, #40]	; 0x28
 80105c0:	89a3      	ldrh	r3, [r4, #12]
 80105c2:	6020      	str	r0, [r4, #0]
 80105c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c8:	81a3      	strh	r3, [r4, #12]
 80105ca:	9b00      	ldr	r3, [sp, #0]
 80105cc:	6163      	str	r3, [r4, #20]
 80105ce:	9b01      	ldr	r3, [sp, #4]
 80105d0:	6120      	str	r0, [r4, #16]
 80105d2:	b15b      	cbz	r3, 80105ec <__smakebuf_r+0x74>
 80105d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105d8:	4630      	mov	r0, r6
 80105da:	f000 fc3d 	bl	8010e58 <_isatty_r>
 80105de:	b128      	cbz	r0, 80105ec <__smakebuf_r+0x74>
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	f023 0303 	bic.w	r3, r3, #3
 80105e6:	f043 0301 	orr.w	r3, r3, #1
 80105ea:	81a3      	strh	r3, [r4, #12]
 80105ec:	89a0      	ldrh	r0, [r4, #12]
 80105ee:	4305      	orrs	r5, r0
 80105f0:	81a5      	strh	r5, [r4, #12]
 80105f2:	e7cd      	b.n	8010590 <__smakebuf_r+0x18>
 80105f4:	08010365 	.word	0x08010365

080105f8 <malloc>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	; (8010604 <malloc+0xc>)
 80105fa:	4601      	mov	r1, r0
 80105fc:	6818      	ldr	r0, [r3, #0]
 80105fe:	f000 b853 	b.w	80106a8 <_malloc_r>
 8010602:	bf00      	nop
 8010604:	20000014 	.word	0x20000014

08010608 <_free_r>:
 8010608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801060a:	2900      	cmp	r1, #0
 801060c:	d048      	beq.n	80106a0 <_free_r+0x98>
 801060e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010612:	9001      	str	r0, [sp, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	f1a1 0404 	sub.w	r4, r1, #4
 801061a:	bfb8      	it	lt
 801061c:	18e4      	addlt	r4, r4, r3
 801061e:	f000 fc3d 	bl	8010e9c <__malloc_lock>
 8010622:	4a20      	ldr	r2, [pc, #128]	; (80106a4 <_free_r+0x9c>)
 8010624:	9801      	ldr	r0, [sp, #4]
 8010626:	6813      	ldr	r3, [r2, #0]
 8010628:	4615      	mov	r5, r2
 801062a:	b933      	cbnz	r3, 801063a <_free_r+0x32>
 801062c:	6063      	str	r3, [r4, #4]
 801062e:	6014      	str	r4, [r2, #0]
 8010630:	b003      	add	sp, #12
 8010632:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010636:	f000 bc37 	b.w	8010ea8 <__malloc_unlock>
 801063a:	42a3      	cmp	r3, r4
 801063c:	d90b      	bls.n	8010656 <_free_r+0x4e>
 801063e:	6821      	ldr	r1, [r4, #0]
 8010640:	1862      	adds	r2, r4, r1
 8010642:	4293      	cmp	r3, r2
 8010644:	bf04      	itt	eq
 8010646:	681a      	ldreq	r2, [r3, #0]
 8010648:	685b      	ldreq	r3, [r3, #4]
 801064a:	6063      	str	r3, [r4, #4]
 801064c:	bf04      	itt	eq
 801064e:	1852      	addeq	r2, r2, r1
 8010650:	6022      	streq	r2, [r4, #0]
 8010652:	602c      	str	r4, [r5, #0]
 8010654:	e7ec      	b.n	8010630 <_free_r+0x28>
 8010656:	461a      	mov	r2, r3
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	b10b      	cbz	r3, 8010660 <_free_r+0x58>
 801065c:	42a3      	cmp	r3, r4
 801065e:	d9fa      	bls.n	8010656 <_free_r+0x4e>
 8010660:	6811      	ldr	r1, [r2, #0]
 8010662:	1855      	adds	r5, r2, r1
 8010664:	42a5      	cmp	r5, r4
 8010666:	d10b      	bne.n	8010680 <_free_r+0x78>
 8010668:	6824      	ldr	r4, [r4, #0]
 801066a:	4421      	add	r1, r4
 801066c:	1854      	adds	r4, r2, r1
 801066e:	42a3      	cmp	r3, r4
 8010670:	6011      	str	r1, [r2, #0]
 8010672:	d1dd      	bne.n	8010630 <_free_r+0x28>
 8010674:	681c      	ldr	r4, [r3, #0]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	6053      	str	r3, [r2, #4]
 801067a:	4421      	add	r1, r4
 801067c:	6011      	str	r1, [r2, #0]
 801067e:	e7d7      	b.n	8010630 <_free_r+0x28>
 8010680:	d902      	bls.n	8010688 <_free_r+0x80>
 8010682:	230c      	movs	r3, #12
 8010684:	6003      	str	r3, [r0, #0]
 8010686:	e7d3      	b.n	8010630 <_free_r+0x28>
 8010688:	6825      	ldr	r5, [r4, #0]
 801068a:	1961      	adds	r1, r4, r5
 801068c:	428b      	cmp	r3, r1
 801068e:	bf04      	itt	eq
 8010690:	6819      	ldreq	r1, [r3, #0]
 8010692:	685b      	ldreq	r3, [r3, #4]
 8010694:	6063      	str	r3, [r4, #4]
 8010696:	bf04      	itt	eq
 8010698:	1949      	addeq	r1, r1, r5
 801069a:	6021      	streq	r1, [r4, #0]
 801069c:	6054      	str	r4, [r2, #4]
 801069e:	e7c7      	b.n	8010630 <_free_r+0x28>
 80106a0:	b003      	add	sp, #12
 80106a2:	bd30      	pop	{r4, r5, pc}
 80106a4:	2000020c 	.word	0x2000020c

080106a8 <_malloc_r>:
 80106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106aa:	1ccd      	adds	r5, r1, #3
 80106ac:	f025 0503 	bic.w	r5, r5, #3
 80106b0:	3508      	adds	r5, #8
 80106b2:	2d0c      	cmp	r5, #12
 80106b4:	bf38      	it	cc
 80106b6:	250c      	movcc	r5, #12
 80106b8:	2d00      	cmp	r5, #0
 80106ba:	4606      	mov	r6, r0
 80106bc:	db01      	blt.n	80106c2 <_malloc_r+0x1a>
 80106be:	42a9      	cmp	r1, r5
 80106c0:	d903      	bls.n	80106ca <_malloc_r+0x22>
 80106c2:	230c      	movs	r3, #12
 80106c4:	6033      	str	r3, [r6, #0]
 80106c6:	2000      	movs	r0, #0
 80106c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ca:	f000 fbe7 	bl	8010e9c <__malloc_lock>
 80106ce:	4921      	ldr	r1, [pc, #132]	; (8010754 <_malloc_r+0xac>)
 80106d0:	680a      	ldr	r2, [r1, #0]
 80106d2:	4614      	mov	r4, r2
 80106d4:	b99c      	cbnz	r4, 80106fe <_malloc_r+0x56>
 80106d6:	4f20      	ldr	r7, [pc, #128]	; (8010758 <_malloc_r+0xb0>)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	b923      	cbnz	r3, 80106e6 <_malloc_r+0x3e>
 80106dc:	4621      	mov	r1, r4
 80106de:	4630      	mov	r0, r6
 80106e0:	f000 fb2a 	bl	8010d38 <_sbrk_r>
 80106e4:	6038      	str	r0, [r7, #0]
 80106e6:	4629      	mov	r1, r5
 80106e8:	4630      	mov	r0, r6
 80106ea:	f000 fb25 	bl	8010d38 <_sbrk_r>
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	d123      	bne.n	801073a <_malloc_r+0x92>
 80106f2:	230c      	movs	r3, #12
 80106f4:	6033      	str	r3, [r6, #0]
 80106f6:	4630      	mov	r0, r6
 80106f8:	f000 fbd6 	bl	8010ea8 <__malloc_unlock>
 80106fc:	e7e3      	b.n	80106c6 <_malloc_r+0x1e>
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	1b5b      	subs	r3, r3, r5
 8010702:	d417      	bmi.n	8010734 <_malloc_r+0x8c>
 8010704:	2b0b      	cmp	r3, #11
 8010706:	d903      	bls.n	8010710 <_malloc_r+0x68>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	441c      	add	r4, r3
 801070c:	6025      	str	r5, [r4, #0]
 801070e:	e004      	b.n	801071a <_malloc_r+0x72>
 8010710:	6863      	ldr	r3, [r4, #4]
 8010712:	42a2      	cmp	r2, r4
 8010714:	bf0c      	ite	eq
 8010716:	600b      	streq	r3, [r1, #0]
 8010718:	6053      	strne	r3, [r2, #4]
 801071a:	4630      	mov	r0, r6
 801071c:	f000 fbc4 	bl	8010ea8 <__malloc_unlock>
 8010720:	f104 000b 	add.w	r0, r4, #11
 8010724:	1d23      	adds	r3, r4, #4
 8010726:	f020 0007 	bic.w	r0, r0, #7
 801072a:	1ac2      	subs	r2, r0, r3
 801072c:	d0cc      	beq.n	80106c8 <_malloc_r+0x20>
 801072e:	1a1b      	subs	r3, r3, r0
 8010730:	50a3      	str	r3, [r4, r2]
 8010732:	e7c9      	b.n	80106c8 <_malloc_r+0x20>
 8010734:	4622      	mov	r2, r4
 8010736:	6864      	ldr	r4, [r4, #4]
 8010738:	e7cc      	b.n	80106d4 <_malloc_r+0x2c>
 801073a:	1cc4      	adds	r4, r0, #3
 801073c:	f024 0403 	bic.w	r4, r4, #3
 8010740:	42a0      	cmp	r0, r4
 8010742:	d0e3      	beq.n	801070c <_malloc_r+0x64>
 8010744:	1a21      	subs	r1, r4, r0
 8010746:	4630      	mov	r0, r6
 8010748:	f000 faf6 	bl	8010d38 <_sbrk_r>
 801074c:	3001      	adds	r0, #1
 801074e:	d1dd      	bne.n	801070c <_malloc_r+0x64>
 8010750:	e7cf      	b.n	80106f2 <_malloc_r+0x4a>
 8010752:	bf00      	nop
 8010754:	2000020c 	.word	0x2000020c
 8010758:	20000210 	.word	0x20000210

0801075c <__sfputc_r>:
 801075c:	6893      	ldr	r3, [r2, #8]
 801075e:	3b01      	subs	r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	b410      	push	{r4}
 8010764:	6093      	str	r3, [r2, #8]
 8010766:	da08      	bge.n	801077a <__sfputc_r+0x1e>
 8010768:	6994      	ldr	r4, [r2, #24]
 801076a:	42a3      	cmp	r3, r4
 801076c:	db01      	blt.n	8010772 <__sfputc_r+0x16>
 801076e:	290a      	cmp	r1, #10
 8010770:	d103      	bne.n	801077a <__sfputc_r+0x1e>
 8010772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010776:	f7ff bc31 	b.w	800ffdc <__swbuf_r>
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	1c58      	adds	r0, r3, #1
 801077e:	6010      	str	r0, [r2, #0]
 8010780:	7019      	strb	r1, [r3, #0]
 8010782:	4608      	mov	r0, r1
 8010784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010788:	4770      	bx	lr

0801078a <__sfputs_r>:
 801078a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078c:	4606      	mov	r6, r0
 801078e:	460f      	mov	r7, r1
 8010790:	4614      	mov	r4, r2
 8010792:	18d5      	adds	r5, r2, r3
 8010794:	42ac      	cmp	r4, r5
 8010796:	d101      	bne.n	801079c <__sfputs_r+0x12>
 8010798:	2000      	movs	r0, #0
 801079a:	e007      	b.n	80107ac <__sfputs_r+0x22>
 801079c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a0:	463a      	mov	r2, r7
 80107a2:	4630      	mov	r0, r6
 80107a4:	f7ff ffda 	bl	801075c <__sfputc_r>
 80107a8:	1c43      	adds	r3, r0, #1
 80107aa:	d1f3      	bne.n	8010794 <__sfputs_r+0xa>
 80107ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107b0 <_vfiprintf_r>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	460d      	mov	r5, r1
 80107b6:	b09d      	sub	sp, #116	; 0x74
 80107b8:	4614      	mov	r4, r2
 80107ba:	4698      	mov	r8, r3
 80107bc:	4606      	mov	r6, r0
 80107be:	b118      	cbz	r0, 80107c8 <_vfiprintf_r+0x18>
 80107c0:	6983      	ldr	r3, [r0, #24]
 80107c2:	b90b      	cbnz	r3, 80107c8 <_vfiprintf_r+0x18>
 80107c4:	f7ff fe02 	bl	80103cc <__sinit>
 80107c8:	4b89      	ldr	r3, [pc, #548]	; (80109f0 <_vfiprintf_r+0x240>)
 80107ca:	429d      	cmp	r5, r3
 80107cc:	d11b      	bne.n	8010806 <_vfiprintf_r+0x56>
 80107ce:	6875      	ldr	r5, [r6, #4]
 80107d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107d2:	07d9      	lsls	r1, r3, #31
 80107d4:	d405      	bmi.n	80107e2 <_vfiprintf_r+0x32>
 80107d6:	89ab      	ldrh	r3, [r5, #12]
 80107d8:	059a      	lsls	r2, r3, #22
 80107da:	d402      	bmi.n	80107e2 <_vfiprintf_r+0x32>
 80107dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107de:	f7ff fea5 	bl	801052c <__retarget_lock_acquire_recursive>
 80107e2:	89ab      	ldrh	r3, [r5, #12]
 80107e4:	071b      	lsls	r3, r3, #28
 80107e6:	d501      	bpl.n	80107ec <_vfiprintf_r+0x3c>
 80107e8:	692b      	ldr	r3, [r5, #16]
 80107ea:	b9eb      	cbnz	r3, 8010828 <_vfiprintf_r+0x78>
 80107ec:	4629      	mov	r1, r5
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff fc46 	bl	8010080 <__swsetup_r>
 80107f4:	b1c0      	cbz	r0, 8010828 <_vfiprintf_r+0x78>
 80107f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107f8:	07dc      	lsls	r4, r3, #31
 80107fa:	d50e      	bpl.n	801081a <_vfiprintf_r+0x6a>
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	b01d      	add	sp, #116	; 0x74
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	4b7b      	ldr	r3, [pc, #492]	; (80109f4 <_vfiprintf_r+0x244>)
 8010808:	429d      	cmp	r5, r3
 801080a:	d101      	bne.n	8010810 <_vfiprintf_r+0x60>
 801080c:	68b5      	ldr	r5, [r6, #8]
 801080e:	e7df      	b.n	80107d0 <_vfiprintf_r+0x20>
 8010810:	4b79      	ldr	r3, [pc, #484]	; (80109f8 <_vfiprintf_r+0x248>)
 8010812:	429d      	cmp	r5, r3
 8010814:	bf08      	it	eq
 8010816:	68f5      	ldreq	r5, [r6, #12]
 8010818:	e7da      	b.n	80107d0 <_vfiprintf_r+0x20>
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	0598      	lsls	r0, r3, #22
 801081e:	d4ed      	bmi.n	80107fc <_vfiprintf_r+0x4c>
 8010820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010822:	f7ff fe84 	bl	801052e <__retarget_lock_release_recursive>
 8010826:	e7e9      	b.n	80107fc <_vfiprintf_r+0x4c>
 8010828:	2300      	movs	r3, #0
 801082a:	9309      	str	r3, [sp, #36]	; 0x24
 801082c:	2320      	movs	r3, #32
 801082e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010832:	f8cd 800c 	str.w	r8, [sp, #12]
 8010836:	2330      	movs	r3, #48	; 0x30
 8010838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80109fc <_vfiprintf_r+0x24c>
 801083c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010840:	f04f 0901 	mov.w	r9, #1
 8010844:	4623      	mov	r3, r4
 8010846:	469a      	mov	sl, r3
 8010848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801084c:	b10a      	cbz	r2, 8010852 <_vfiprintf_r+0xa2>
 801084e:	2a25      	cmp	r2, #37	; 0x25
 8010850:	d1f9      	bne.n	8010846 <_vfiprintf_r+0x96>
 8010852:	ebba 0b04 	subs.w	fp, sl, r4
 8010856:	d00b      	beq.n	8010870 <_vfiprintf_r+0xc0>
 8010858:	465b      	mov	r3, fp
 801085a:	4622      	mov	r2, r4
 801085c:	4629      	mov	r1, r5
 801085e:	4630      	mov	r0, r6
 8010860:	f7ff ff93 	bl	801078a <__sfputs_r>
 8010864:	3001      	adds	r0, #1
 8010866:	f000 80aa 	beq.w	80109be <_vfiprintf_r+0x20e>
 801086a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801086c:	445a      	add	r2, fp
 801086e:	9209      	str	r2, [sp, #36]	; 0x24
 8010870:	f89a 3000 	ldrb.w	r3, [sl]
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 80a2 	beq.w	80109be <_vfiprintf_r+0x20e>
 801087a:	2300      	movs	r3, #0
 801087c:	f04f 32ff 	mov.w	r2, #4294967295
 8010880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010884:	f10a 0a01 	add.w	sl, sl, #1
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	9307      	str	r3, [sp, #28]
 801088c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010890:	931a      	str	r3, [sp, #104]	; 0x68
 8010892:	4654      	mov	r4, sl
 8010894:	2205      	movs	r2, #5
 8010896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801089a:	4858      	ldr	r0, [pc, #352]	; (80109fc <_vfiprintf_r+0x24c>)
 801089c:	f7ef fcd0 	bl	8000240 <memchr>
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	b9d8      	cbnz	r0, 80108dc <_vfiprintf_r+0x12c>
 80108a4:	06d1      	lsls	r1, r2, #27
 80108a6:	bf44      	itt	mi
 80108a8:	2320      	movmi	r3, #32
 80108aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108ae:	0713      	lsls	r3, r2, #28
 80108b0:	bf44      	itt	mi
 80108b2:	232b      	movmi	r3, #43	; 0x2b
 80108b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108b8:	f89a 3000 	ldrb.w	r3, [sl]
 80108bc:	2b2a      	cmp	r3, #42	; 0x2a
 80108be:	d015      	beq.n	80108ec <_vfiprintf_r+0x13c>
 80108c0:	9a07      	ldr	r2, [sp, #28]
 80108c2:	4654      	mov	r4, sl
 80108c4:	2000      	movs	r0, #0
 80108c6:	f04f 0c0a 	mov.w	ip, #10
 80108ca:	4621      	mov	r1, r4
 80108cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108d0:	3b30      	subs	r3, #48	; 0x30
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	d94e      	bls.n	8010974 <_vfiprintf_r+0x1c4>
 80108d6:	b1b0      	cbz	r0, 8010906 <_vfiprintf_r+0x156>
 80108d8:	9207      	str	r2, [sp, #28]
 80108da:	e014      	b.n	8010906 <_vfiprintf_r+0x156>
 80108dc:	eba0 0308 	sub.w	r3, r0, r8
 80108e0:	fa09 f303 	lsl.w	r3, r9, r3
 80108e4:	4313      	orrs	r3, r2
 80108e6:	9304      	str	r3, [sp, #16]
 80108e8:	46a2      	mov	sl, r4
 80108ea:	e7d2      	b.n	8010892 <_vfiprintf_r+0xe2>
 80108ec:	9b03      	ldr	r3, [sp, #12]
 80108ee:	1d19      	adds	r1, r3, #4
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	9103      	str	r1, [sp, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	bfbb      	ittet	lt
 80108f8:	425b      	neglt	r3, r3
 80108fa:	f042 0202 	orrlt.w	r2, r2, #2
 80108fe:	9307      	strge	r3, [sp, #28]
 8010900:	9307      	strlt	r3, [sp, #28]
 8010902:	bfb8      	it	lt
 8010904:	9204      	strlt	r2, [sp, #16]
 8010906:	7823      	ldrb	r3, [r4, #0]
 8010908:	2b2e      	cmp	r3, #46	; 0x2e
 801090a:	d10c      	bne.n	8010926 <_vfiprintf_r+0x176>
 801090c:	7863      	ldrb	r3, [r4, #1]
 801090e:	2b2a      	cmp	r3, #42	; 0x2a
 8010910:	d135      	bne.n	801097e <_vfiprintf_r+0x1ce>
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	1d1a      	adds	r2, r3, #4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	9203      	str	r2, [sp, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	bfb8      	it	lt
 801091e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010922:	3402      	adds	r4, #2
 8010924:	9305      	str	r3, [sp, #20]
 8010926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a0c <_vfiprintf_r+0x25c>
 801092a:	7821      	ldrb	r1, [r4, #0]
 801092c:	2203      	movs	r2, #3
 801092e:	4650      	mov	r0, sl
 8010930:	f7ef fc86 	bl	8000240 <memchr>
 8010934:	b140      	cbz	r0, 8010948 <_vfiprintf_r+0x198>
 8010936:	2340      	movs	r3, #64	; 0x40
 8010938:	eba0 000a 	sub.w	r0, r0, sl
 801093c:	fa03 f000 	lsl.w	r0, r3, r0
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	4303      	orrs	r3, r0
 8010944:	3401      	adds	r4, #1
 8010946:	9304      	str	r3, [sp, #16]
 8010948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094c:	482c      	ldr	r0, [pc, #176]	; (8010a00 <_vfiprintf_r+0x250>)
 801094e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010952:	2206      	movs	r2, #6
 8010954:	f7ef fc74 	bl	8000240 <memchr>
 8010958:	2800      	cmp	r0, #0
 801095a:	d03f      	beq.n	80109dc <_vfiprintf_r+0x22c>
 801095c:	4b29      	ldr	r3, [pc, #164]	; (8010a04 <_vfiprintf_r+0x254>)
 801095e:	bb1b      	cbnz	r3, 80109a8 <_vfiprintf_r+0x1f8>
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	3307      	adds	r3, #7
 8010964:	f023 0307 	bic.w	r3, r3, #7
 8010968:	3308      	adds	r3, #8
 801096a:	9303      	str	r3, [sp, #12]
 801096c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096e:	443b      	add	r3, r7
 8010970:	9309      	str	r3, [sp, #36]	; 0x24
 8010972:	e767      	b.n	8010844 <_vfiprintf_r+0x94>
 8010974:	fb0c 3202 	mla	r2, ip, r2, r3
 8010978:	460c      	mov	r4, r1
 801097a:	2001      	movs	r0, #1
 801097c:	e7a5      	b.n	80108ca <_vfiprintf_r+0x11a>
 801097e:	2300      	movs	r3, #0
 8010980:	3401      	adds	r4, #1
 8010982:	9305      	str	r3, [sp, #20]
 8010984:	4619      	mov	r1, r3
 8010986:	f04f 0c0a 	mov.w	ip, #10
 801098a:	4620      	mov	r0, r4
 801098c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010990:	3a30      	subs	r2, #48	; 0x30
 8010992:	2a09      	cmp	r2, #9
 8010994:	d903      	bls.n	801099e <_vfiprintf_r+0x1ee>
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0c5      	beq.n	8010926 <_vfiprintf_r+0x176>
 801099a:	9105      	str	r1, [sp, #20]
 801099c:	e7c3      	b.n	8010926 <_vfiprintf_r+0x176>
 801099e:	fb0c 2101 	mla	r1, ip, r1, r2
 80109a2:	4604      	mov	r4, r0
 80109a4:	2301      	movs	r3, #1
 80109a6:	e7f0      	b.n	801098a <_vfiprintf_r+0x1da>
 80109a8:	ab03      	add	r3, sp, #12
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	462a      	mov	r2, r5
 80109ae:	4b16      	ldr	r3, [pc, #88]	; (8010a08 <_vfiprintf_r+0x258>)
 80109b0:	a904      	add	r1, sp, #16
 80109b2:	4630      	mov	r0, r6
 80109b4:	f3af 8000 	nop.w
 80109b8:	4607      	mov	r7, r0
 80109ba:	1c78      	adds	r0, r7, #1
 80109bc:	d1d6      	bne.n	801096c <_vfiprintf_r+0x1bc>
 80109be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109c0:	07d9      	lsls	r1, r3, #31
 80109c2:	d405      	bmi.n	80109d0 <_vfiprintf_r+0x220>
 80109c4:	89ab      	ldrh	r3, [r5, #12]
 80109c6:	059a      	lsls	r2, r3, #22
 80109c8:	d402      	bmi.n	80109d0 <_vfiprintf_r+0x220>
 80109ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109cc:	f7ff fdaf 	bl	801052e <__retarget_lock_release_recursive>
 80109d0:	89ab      	ldrh	r3, [r5, #12]
 80109d2:	065b      	lsls	r3, r3, #25
 80109d4:	f53f af12 	bmi.w	80107fc <_vfiprintf_r+0x4c>
 80109d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109da:	e711      	b.n	8010800 <_vfiprintf_r+0x50>
 80109dc:	ab03      	add	r3, sp, #12
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	462a      	mov	r2, r5
 80109e2:	4b09      	ldr	r3, [pc, #36]	; (8010a08 <_vfiprintf_r+0x258>)
 80109e4:	a904      	add	r1, sp, #16
 80109e6:	4630      	mov	r0, r6
 80109e8:	f000 f880 	bl	8010aec <_printf_i>
 80109ec:	e7e4      	b.n	80109b8 <_vfiprintf_r+0x208>
 80109ee:	bf00      	nop
 80109f0:	08013ba8 	.word	0x08013ba8
 80109f4:	08013bc8 	.word	0x08013bc8
 80109f8:	08013b88 	.word	0x08013b88
 80109fc:	08013be8 	.word	0x08013be8
 8010a00:	08013bf2 	.word	0x08013bf2
 8010a04:	00000000 	.word	0x00000000
 8010a08:	0801078b 	.word	0x0801078b
 8010a0c:	08013bee 	.word	0x08013bee

08010a10 <_printf_common>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	4616      	mov	r6, r2
 8010a16:	4699      	mov	r9, r3
 8010a18:	688a      	ldr	r2, [r1, #8]
 8010a1a:	690b      	ldr	r3, [r1, #16]
 8010a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	bfb8      	it	lt
 8010a24:	4613      	movlt	r3, r2
 8010a26:	6033      	str	r3, [r6, #0]
 8010a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	460c      	mov	r4, r1
 8010a30:	b10a      	cbz	r2, 8010a36 <_printf_common+0x26>
 8010a32:	3301      	adds	r3, #1
 8010a34:	6033      	str	r3, [r6, #0]
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	0699      	lsls	r1, r3, #26
 8010a3a:	bf42      	ittt	mi
 8010a3c:	6833      	ldrmi	r3, [r6, #0]
 8010a3e:	3302      	addmi	r3, #2
 8010a40:	6033      	strmi	r3, [r6, #0]
 8010a42:	6825      	ldr	r5, [r4, #0]
 8010a44:	f015 0506 	ands.w	r5, r5, #6
 8010a48:	d106      	bne.n	8010a58 <_printf_common+0x48>
 8010a4a:	f104 0a19 	add.w	sl, r4, #25
 8010a4e:	68e3      	ldr	r3, [r4, #12]
 8010a50:	6832      	ldr	r2, [r6, #0]
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	dc26      	bgt.n	8010aa6 <_printf_common+0x96>
 8010a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a5c:	1e13      	subs	r3, r2, #0
 8010a5e:	6822      	ldr	r2, [r4, #0]
 8010a60:	bf18      	it	ne
 8010a62:	2301      	movne	r3, #1
 8010a64:	0692      	lsls	r2, r2, #26
 8010a66:	d42b      	bmi.n	8010ac0 <_printf_common+0xb0>
 8010a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	4638      	mov	r0, r7
 8010a70:	47c0      	blx	r8
 8010a72:	3001      	adds	r0, #1
 8010a74:	d01e      	beq.n	8010ab4 <_printf_common+0xa4>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	68e5      	ldr	r5, [r4, #12]
 8010a7a:	6832      	ldr	r2, [r6, #0]
 8010a7c:	f003 0306 	and.w	r3, r3, #6
 8010a80:	2b04      	cmp	r3, #4
 8010a82:	bf08      	it	eq
 8010a84:	1aad      	subeq	r5, r5, r2
 8010a86:	68a3      	ldr	r3, [r4, #8]
 8010a88:	6922      	ldr	r2, [r4, #16]
 8010a8a:	bf0c      	ite	eq
 8010a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a90:	2500      	movne	r5, #0
 8010a92:	4293      	cmp	r3, r2
 8010a94:	bfc4      	itt	gt
 8010a96:	1a9b      	subgt	r3, r3, r2
 8010a98:	18ed      	addgt	r5, r5, r3
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	341a      	adds	r4, #26
 8010a9e:	42b5      	cmp	r5, r6
 8010aa0:	d11a      	bne.n	8010ad8 <_printf_common+0xc8>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	e008      	b.n	8010ab8 <_printf_common+0xa8>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4652      	mov	r2, sl
 8010aaa:	4649      	mov	r1, r9
 8010aac:	4638      	mov	r0, r7
 8010aae:	47c0      	blx	r8
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d103      	bne.n	8010abc <_printf_common+0xac>
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abc:	3501      	adds	r5, #1
 8010abe:	e7c6      	b.n	8010a4e <_printf_common+0x3e>
 8010ac0:	18e1      	adds	r1, r4, r3
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	2030      	movs	r0, #48	; 0x30
 8010ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010aca:	4422      	add	r2, r4
 8010acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	e7c7      	b.n	8010a68 <_printf_common+0x58>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	4622      	mov	r2, r4
 8010adc:	4649      	mov	r1, r9
 8010ade:	4638      	mov	r0, r7
 8010ae0:	47c0      	blx	r8
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	d0e6      	beq.n	8010ab4 <_printf_common+0xa4>
 8010ae6:	3601      	adds	r6, #1
 8010ae8:	e7d9      	b.n	8010a9e <_printf_common+0x8e>
	...

08010aec <_printf_i>:
 8010aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	460c      	mov	r4, r1
 8010af2:	4691      	mov	r9, r2
 8010af4:	7e27      	ldrb	r7, [r4, #24]
 8010af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010af8:	2f78      	cmp	r7, #120	; 0x78
 8010afa:	4680      	mov	r8, r0
 8010afc:	469a      	mov	sl, r3
 8010afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b02:	d807      	bhi.n	8010b14 <_printf_i+0x28>
 8010b04:	2f62      	cmp	r7, #98	; 0x62
 8010b06:	d80a      	bhi.n	8010b1e <_printf_i+0x32>
 8010b08:	2f00      	cmp	r7, #0
 8010b0a:	f000 80d8 	beq.w	8010cbe <_printf_i+0x1d2>
 8010b0e:	2f58      	cmp	r7, #88	; 0x58
 8010b10:	f000 80a3 	beq.w	8010c5a <_printf_i+0x16e>
 8010b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b1c:	e03a      	b.n	8010b94 <_printf_i+0xa8>
 8010b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b22:	2b15      	cmp	r3, #21
 8010b24:	d8f6      	bhi.n	8010b14 <_printf_i+0x28>
 8010b26:	a001      	add	r0, pc, #4	; (adr r0, 8010b2c <_printf_i+0x40>)
 8010b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010b2c:	08010b85 	.word	0x08010b85
 8010b30:	08010b99 	.word	0x08010b99
 8010b34:	08010b15 	.word	0x08010b15
 8010b38:	08010b15 	.word	0x08010b15
 8010b3c:	08010b15 	.word	0x08010b15
 8010b40:	08010b15 	.word	0x08010b15
 8010b44:	08010b99 	.word	0x08010b99
 8010b48:	08010b15 	.word	0x08010b15
 8010b4c:	08010b15 	.word	0x08010b15
 8010b50:	08010b15 	.word	0x08010b15
 8010b54:	08010b15 	.word	0x08010b15
 8010b58:	08010ca5 	.word	0x08010ca5
 8010b5c:	08010bc9 	.word	0x08010bc9
 8010b60:	08010c87 	.word	0x08010c87
 8010b64:	08010b15 	.word	0x08010b15
 8010b68:	08010b15 	.word	0x08010b15
 8010b6c:	08010cc7 	.word	0x08010cc7
 8010b70:	08010b15 	.word	0x08010b15
 8010b74:	08010bc9 	.word	0x08010bc9
 8010b78:	08010b15 	.word	0x08010b15
 8010b7c:	08010b15 	.word	0x08010b15
 8010b80:	08010c8f 	.word	0x08010c8f
 8010b84:	680b      	ldr	r3, [r1, #0]
 8010b86:	1d1a      	adds	r2, r3, #4
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	600a      	str	r2, [r1, #0]
 8010b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b94:	2301      	movs	r3, #1
 8010b96:	e0a3      	b.n	8010ce0 <_printf_i+0x1f4>
 8010b98:	6825      	ldr	r5, [r4, #0]
 8010b9a:	6808      	ldr	r0, [r1, #0]
 8010b9c:	062e      	lsls	r6, r5, #24
 8010b9e:	f100 0304 	add.w	r3, r0, #4
 8010ba2:	d50a      	bpl.n	8010bba <_printf_i+0xce>
 8010ba4:	6805      	ldr	r5, [r0, #0]
 8010ba6:	600b      	str	r3, [r1, #0]
 8010ba8:	2d00      	cmp	r5, #0
 8010baa:	da03      	bge.n	8010bb4 <_printf_i+0xc8>
 8010bac:	232d      	movs	r3, #45	; 0x2d
 8010bae:	426d      	negs	r5, r5
 8010bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bb4:	485e      	ldr	r0, [pc, #376]	; (8010d30 <_printf_i+0x244>)
 8010bb6:	230a      	movs	r3, #10
 8010bb8:	e019      	b.n	8010bee <_printf_i+0x102>
 8010bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010bbe:	6805      	ldr	r5, [r0, #0]
 8010bc0:	600b      	str	r3, [r1, #0]
 8010bc2:	bf18      	it	ne
 8010bc4:	b22d      	sxthne	r5, r5
 8010bc6:	e7ef      	b.n	8010ba8 <_printf_i+0xbc>
 8010bc8:	680b      	ldr	r3, [r1, #0]
 8010bca:	6825      	ldr	r5, [r4, #0]
 8010bcc:	1d18      	adds	r0, r3, #4
 8010bce:	6008      	str	r0, [r1, #0]
 8010bd0:	0628      	lsls	r0, r5, #24
 8010bd2:	d501      	bpl.n	8010bd8 <_printf_i+0xec>
 8010bd4:	681d      	ldr	r5, [r3, #0]
 8010bd6:	e002      	b.n	8010bde <_printf_i+0xf2>
 8010bd8:	0669      	lsls	r1, r5, #25
 8010bda:	d5fb      	bpl.n	8010bd4 <_printf_i+0xe8>
 8010bdc:	881d      	ldrh	r5, [r3, #0]
 8010bde:	4854      	ldr	r0, [pc, #336]	; (8010d30 <_printf_i+0x244>)
 8010be0:	2f6f      	cmp	r7, #111	; 0x6f
 8010be2:	bf0c      	ite	eq
 8010be4:	2308      	moveq	r3, #8
 8010be6:	230a      	movne	r3, #10
 8010be8:	2100      	movs	r1, #0
 8010bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bee:	6866      	ldr	r6, [r4, #4]
 8010bf0:	60a6      	str	r6, [r4, #8]
 8010bf2:	2e00      	cmp	r6, #0
 8010bf4:	bfa2      	ittt	ge
 8010bf6:	6821      	ldrge	r1, [r4, #0]
 8010bf8:	f021 0104 	bicge.w	r1, r1, #4
 8010bfc:	6021      	strge	r1, [r4, #0]
 8010bfe:	b90d      	cbnz	r5, 8010c04 <_printf_i+0x118>
 8010c00:	2e00      	cmp	r6, #0
 8010c02:	d04d      	beq.n	8010ca0 <_printf_i+0x1b4>
 8010c04:	4616      	mov	r6, r2
 8010c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8010c0e:	5dc7      	ldrb	r7, [r0, r7]
 8010c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c14:	462f      	mov	r7, r5
 8010c16:	42bb      	cmp	r3, r7
 8010c18:	460d      	mov	r5, r1
 8010c1a:	d9f4      	bls.n	8010c06 <_printf_i+0x11a>
 8010c1c:	2b08      	cmp	r3, #8
 8010c1e:	d10b      	bne.n	8010c38 <_printf_i+0x14c>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	07df      	lsls	r7, r3, #31
 8010c24:	d508      	bpl.n	8010c38 <_printf_i+0x14c>
 8010c26:	6923      	ldr	r3, [r4, #16]
 8010c28:	6861      	ldr	r1, [r4, #4]
 8010c2a:	4299      	cmp	r1, r3
 8010c2c:	bfde      	ittt	le
 8010c2e:	2330      	movle	r3, #48	; 0x30
 8010c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c38:	1b92      	subs	r2, r2, r6
 8010c3a:	6122      	str	r2, [r4, #16]
 8010c3c:	f8cd a000 	str.w	sl, [sp]
 8010c40:	464b      	mov	r3, r9
 8010c42:	aa03      	add	r2, sp, #12
 8010c44:	4621      	mov	r1, r4
 8010c46:	4640      	mov	r0, r8
 8010c48:	f7ff fee2 	bl	8010a10 <_printf_common>
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	d14c      	bne.n	8010cea <_printf_i+0x1fe>
 8010c50:	f04f 30ff 	mov.w	r0, #4294967295
 8010c54:	b004      	add	sp, #16
 8010c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c5a:	4835      	ldr	r0, [pc, #212]	; (8010d30 <_printf_i+0x244>)
 8010c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	680e      	ldr	r6, [r1, #0]
 8010c64:	061f      	lsls	r7, r3, #24
 8010c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c6a:	600e      	str	r6, [r1, #0]
 8010c6c:	d514      	bpl.n	8010c98 <_printf_i+0x1ac>
 8010c6e:	07d9      	lsls	r1, r3, #31
 8010c70:	bf44      	itt	mi
 8010c72:	f043 0320 	orrmi.w	r3, r3, #32
 8010c76:	6023      	strmi	r3, [r4, #0]
 8010c78:	b91d      	cbnz	r5, 8010c82 <_printf_i+0x196>
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	f023 0320 	bic.w	r3, r3, #32
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	2310      	movs	r3, #16
 8010c84:	e7b0      	b.n	8010be8 <_printf_i+0xfc>
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	f043 0320 	orr.w	r3, r3, #32
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	2378      	movs	r3, #120	; 0x78
 8010c90:	4828      	ldr	r0, [pc, #160]	; (8010d34 <_printf_i+0x248>)
 8010c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c96:	e7e3      	b.n	8010c60 <_printf_i+0x174>
 8010c98:	065e      	lsls	r6, r3, #25
 8010c9a:	bf48      	it	mi
 8010c9c:	b2ad      	uxthmi	r5, r5
 8010c9e:	e7e6      	b.n	8010c6e <_printf_i+0x182>
 8010ca0:	4616      	mov	r6, r2
 8010ca2:	e7bb      	b.n	8010c1c <_printf_i+0x130>
 8010ca4:	680b      	ldr	r3, [r1, #0]
 8010ca6:	6826      	ldr	r6, [r4, #0]
 8010ca8:	6960      	ldr	r0, [r4, #20]
 8010caa:	1d1d      	adds	r5, r3, #4
 8010cac:	600d      	str	r5, [r1, #0]
 8010cae:	0635      	lsls	r5, r6, #24
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	d501      	bpl.n	8010cb8 <_printf_i+0x1cc>
 8010cb4:	6018      	str	r0, [r3, #0]
 8010cb6:	e002      	b.n	8010cbe <_printf_i+0x1d2>
 8010cb8:	0671      	lsls	r1, r6, #25
 8010cba:	d5fb      	bpl.n	8010cb4 <_printf_i+0x1c8>
 8010cbc:	8018      	strh	r0, [r3, #0]
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	6123      	str	r3, [r4, #16]
 8010cc2:	4616      	mov	r6, r2
 8010cc4:	e7ba      	b.n	8010c3c <_printf_i+0x150>
 8010cc6:	680b      	ldr	r3, [r1, #0]
 8010cc8:	1d1a      	adds	r2, r3, #4
 8010cca:	600a      	str	r2, [r1, #0]
 8010ccc:	681e      	ldr	r6, [r3, #0]
 8010cce:	6862      	ldr	r2, [r4, #4]
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f7ef fab4 	bl	8000240 <memchr>
 8010cd8:	b108      	cbz	r0, 8010cde <_printf_i+0x1f2>
 8010cda:	1b80      	subs	r0, r0, r6
 8010cdc:	6060      	str	r0, [r4, #4]
 8010cde:	6863      	ldr	r3, [r4, #4]
 8010ce0:	6123      	str	r3, [r4, #16]
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ce8:	e7a8      	b.n	8010c3c <_printf_i+0x150>
 8010cea:	6923      	ldr	r3, [r4, #16]
 8010cec:	4632      	mov	r2, r6
 8010cee:	4649      	mov	r1, r9
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	47d0      	blx	sl
 8010cf4:	3001      	adds	r0, #1
 8010cf6:	d0ab      	beq.n	8010c50 <_printf_i+0x164>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	079b      	lsls	r3, r3, #30
 8010cfc:	d413      	bmi.n	8010d26 <_printf_i+0x23a>
 8010cfe:	68e0      	ldr	r0, [r4, #12]
 8010d00:	9b03      	ldr	r3, [sp, #12]
 8010d02:	4298      	cmp	r0, r3
 8010d04:	bfb8      	it	lt
 8010d06:	4618      	movlt	r0, r3
 8010d08:	e7a4      	b.n	8010c54 <_printf_i+0x168>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	4649      	mov	r1, r9
 8010d10:	4640      	mov	r0, r8
 8010d12:	47d0      	blx	sl
 8010d14:	3001      	adds	r0, #1
 8010d16:	d09b      	beq.n	8010c50 <_printf_i+0x164>
 8010d18:	3501      	adds	r5, #1
 8010d1a:	68e3      	ldr	r3, [r4, #12]
 8010d1c:	9903      	ldr	r1, [sp, #12]
 8010d1e:	1a5b      	subs	r3, r3, r1
 8010d20:	42ab      	cmp	r3, r5
 8010d22:	dcf2      	bgt.n	8010d0a <_printf_i+0x21e>
 8010d24:	e7eb      	b.n	8010cfe <_printf_i+0x212>
 8010d26:	2500      	movs	r5, #0
 8010d28:	f104 0619 	add.w	r6, r4, #25
 8010d2c:	e7f5      	b.n	8010d1a <_printf_i+0x22e>
 8010d2e:	bf00      	nop
 8010d30:	08013bf9 	.word	0x08013bf9
 8010d34:	08013c0a 	.word	0x08013c0a

08010d38 <_sbrk_r>:
 8010d38:	b538      	push	{r3, r4, r5, lr}
 8010d3a:	4d06      	ldr	r5, [pc, #24]	; (8010d54 <_sbrk_r+0x1c>)
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4604      	mov	r4, r0
 8010d40:	4608      	mov	r0, r1
 8010d42:	602b      	str	r3, [r5, #0]
 8010d44:	f7ef fe34 	bl	80009b0 <_sbrk>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	d102      	bne.n	8010d52 <_sbrk_r+0x1a>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	b103      	cbz	r3, 8010d52 <_sbrk_r+0x1a>
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	20006930 	.word	0x20006930

08010d58 <__sread>:
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d60:	f000 f8a8 	bl	8010eb4 <_read_r>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	bfab      	itete	ge
 8010d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d6c:	181b      	addge	r3, r3, r0
 8010d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d72:	bfac      	ite	ge
 8010d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d76:	81a3      	strhlt	r3, [r4, #12]
 8010d78:	bd10      	pop	{r4, pc}

08010d7a <__swrite>:
 8010d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7e:	461f      	mov	r7, r3
 8010d80:	898b      	ldrh	r3, [r1, #12]
 8010d82:	05db      	lsls	r3, r3, #23
 8010d84:	4605      	mov	r5, r0
 8010d86:	460c      	mov	r4, r1
 8010d88:	4616      	mov	r6, r2
 8010d8a:	d505      	bpl.n	8010d98 <__swrite+0x1e>
 8010d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d90:	2302      	movs	r3, #2
 8010d92:	2200      	movs	r2, #0
 8010d94:	f000 f870 	bl	8010e78 <_lseek_r>
 8010d98:	89a3      	ldrh	r3, [r4, #12]
 8010d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010da2:	81a3      	strh	r3, [r4, #12]
 8010da4:	4632      	mov	r2, r6
 8010da6:	463b      	mov	r3, r7
 8010da8:	4628      	mov	r0, r5
 8010daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dae:	f000 b817 	b.w	8010de0 <_write_r>

08010db2 <__sseek>:
 8010db2:	b510      	push	{r4, lr}
 8010db4:	460c      	mov	r4, r1
 8010db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dba:	f000 f85d 	bl	8010e78 <_lseek_r>
 8010dbe:	1c43      	adds	r3, r0, #1
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	bf15      	itete	ne
 8010dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dce:	81a3      	strheq	r3, [r4, #12]
 8010dd0:	bf18      	it	ne
 8010dd2:	81a3      	strhne	r3, [r4, #12]
 8010dd4:	bd10      	pop	{r4, pc}

08010dd6 <__sclose>:
 8010dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dda:	f000 b81b 	b.w	8010e14 <_close_r>
	...

08010de0 <_write_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	4d07      	ldr	r5, [pc, #28]	; (8010e00 <_write_r+0x20>)
 8010de4:	4604      	mov	r4, r0
 8010de6:	4608      	mov	r0, r1
 8010de8:	4611      	mov	r1, r2
 8010dea:	2200      	movs	r2, #0
 8010dec:	602a      	str	r2, [r5, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	f7ef fcf4 	bl	80007dc <_write>
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	d102      	bne.n	8010dfe <_write_r+0x1e>
 8010df8:	682b      	ldr	r3, [r5, #0]
 8010dfa:	b103      	cbz	r3, 8010dfe <_write_r+0x1e>
 8010dfc:	6023      	str	r3, [r4, #0]
 8010dfe:	bd38      	pop	{r3, r4, r5, pc}
 8010e00:	20006930 	.word	0x20006930

08010e04 <abort>:
 8010e04:	b508      	push	{r3, lr}
 8010e06:	2006      	movs	r0, #6
 8010e08:	f000 f88e 	bl	8010f28 <raise>
 8010e0c:	2001      	movs	r0, #1
 8010e0e:	f7ef fd73 	bl	80008f8 <_exit>
	...

08010e14 <_close_r>:
 8010e14:	b538      	push	{r3, r4, r5, lr}
 8010e16:	4d06      	ldr	r5, [pc, #24]	; (8010e30 <_close_r+0x1c>)
 8010e18:	2300      	movs	r3, #0
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	4608      	mov	r0, r1
 8010e1e:	602b      	str	r3, [r5, #0]
 8010e20:	f7ef fd91 	bl	8000946 <_close>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	d102      	bne.n	8010e2e <_close_r+0x1a>
 8010e28:	682b      	ldr	r3, [r5, #0]
 8010e2a:	b103      	cbz	r3, 8010e2e <_close_r+0x1a>
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
 8010e30:	20006930 	.word	0x20006930

08010e34 <_fstat_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4d07      	ldr	r5, [pc, #28]	; (8010e54 <_fstat_r+0x20>)
 8010e38:	2300      	movs	r3, #0
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	4608      	mov	r0, r1
 8010e3e:	4611      	mov	r1, r2
 8010e40:	602b      	str	r3, [r5, #0]
 8010e42:	f7ef fd8c 	bl	800095e <_fstat>
 8010e46:	1c43      	adds	r3, r0, #1
 8010e48:	d102      	bne.n	8010e50 <_fstat_r+0x1c>
 8010e4a:	682b      	ldr	r3, [r5, #0]
 8010e4c:	b103      	cbz	r3, 8010e50 <_fstat_r+0x1c>
 8010e4e:	6023      	str	r3, [r4, #0]
 8010e50:	bd38      	pop	{r3, r4, r5, pc}
 8010e52:	bf00      	nop
 8010e54:	20006930 	.word	0x20006930

08010e58 <_isatty_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4d06      	ldr	r5, [pc, #24]	; (8010e74 <_isatty_r+0x1c>)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	f7ef fd8b 	bl	800097e <_isatty>
 8010e68:	1c43      	adds	r3, r0, #1
 8010e6a:	d102      	bne.n	8010e72 <_isatty_r+0x1a>
 8010e6c:	682b      	ldr	r3, [r5, #0]
 8010e6e:	b103      	cbz	r3, 8010e72 <_isatty_r+0x1a>
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	20006930 	.word	0x20006930

08010e78 <_lseek_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	4d07      	ldr	r5, [pc, #28]	; (8010e98 <_lseek_r+0x20>)
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	4608      	mov	r0, r1
 8010e80:	4611      	mov	r1, r2
 8010e82:	2200      	movs	r2, #0
 8010e84:	602a      	str	r2, [r5, #0]
 8010e86:	461a      	mov	r2, r3
 8010e88:	f7ef fd84 	bl	8000994 <_lseek>
 8010e8c:	1c43      	adds	r3, r0, #1
 8010e8e:	d102      	bne.n	8010e96 <_lseek_r+0x1e>
 8010e90:	682b      	ldr	r3, [r5, #0]
 8010e92:	b103      	cbz	r3, 8010e96 <_lseek_r+0x1e>
 8010e94:	6023      	str	r3, [r4, #0]
 8010e96:	bd38      	pop	{r3, r4, r5, pc}
 8010e98:	20006930 	.word	0x20006930

08010e9c <__malloc_lock>:
 8010e9c:	4801      	ldr	r0, [pc, #4]	; (8010ea4 <__malloc_lock+0x8>)
 8010e9e:	f7ff bb45 	b.w	801052c <__retarget_lock_acquire_recursive>
 8010ea2:	bf00      	nop
 8010ea4:	20006938 	.word	0x20006938

08010ea8 <__malloc_unlock>:
 8010ea8:	4801      	ldr	r0, [pc, #4]	; (8010eb0 <__malloc_unlock+0x8>)
 8010eaa:	f7ff bb40 	b.w	801052e <__retarget_lock_release_recursive>
 8010eae:	bf00      	nop
 8010eb0:	20006938 	.word	0x20006938

08010eb4 <_read_r>:
 8010eb4:	b538      	push	{r3, r4, r5, lr}
 8010eb6:	4d07      	ldr	r5, [pc, #28]	; (8010ed4 <_read_r+0x20>)
 8010eb8:	4604      	mov	r4, r0
 8010eba:	4608      	mov	r0, r1
 8010ebc:	4611      	mov	r1, r2
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	602a      	str	r2, [r5, #0]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	f7ef fd22 	bl	800090c <_read>
 8010ec8:	1c43      	adds	r3, r0, #1
 8010eca:	d102      	bne.n	8010ed2 <_read_r+0x1e>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	b103      	cbz	r3, 8010ed2 <_read_r+0x1e>
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	bd38      	pop	{r3, r4, r5, pc}
 8010ed4:	20006930 	.word	0x20006930

08010ed8 <_raise_r>:
 8010ed8:	291f      	cmp	r1, #31
 8010eda:	b538      	push	{r3, r4, r5, lr}
 8010edc:	4604      	mov	r4, r0
 8010ede:	460d      	mov	r5, r1
 8010ee0:	d904      	bls.n	8010eec <_raise_r+0x14>
 8010ee2:	2316      	movs	r3, #22
 8010ee4:	6003      	str	r3, [r0, #0]
 8010ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010eee:	b112      	cbz	r2, 8010ef6 <_raise_r+0x1e>
 8010ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ef4:	b94b      	cbnz	r3, 8010f0a <_raise_r+0x32>
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f830 	bl	8010f5c <_getpid_r>
 8010efc:	462a      	mov	r2, r5
 8010efe:	4601      	mov	r1, r0
 8010f00:	4620      	mov	r0, r4
 8010f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f06:	f000 b817 	b.w	8010f38 <_kill_r>
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d00a      	beq.n	8010f24 <_raise_r+0x4c>
 8010f0e:	1c59      	adds	r1, r3, #1
 8010f10:	d103      	bne.n	8010f1a <_raise_r+0x42>
 8010f12:	2316      	movs	r3, #22
 8010f14:	6003      	str	r3, [r0, #0]
 8010f16:	2001      	movs	r0, #1
 8010f18:	e7e7      	b.n	8010eea <_raise_r+0x12>
 8010f1a:	2400      	movs	r4, #0
 8010f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f20:	4628      	mov	r0, r5
 8010f22:	4798      	blx	r3
 8010f24:	2000      	movs	r0, #0
 8010f26:	e7e0      	b.n	8010eea <_raise_r+0x12>

08010f28 <raise>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	; (8010f34 <raise+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f7ff bfd3 	b.w	8010ed8 <_raise_r>
 8010f32:	bf00      	nop
 8010f34:	20000014 	.word	0x20000014

08010f38 <_kill_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4d07      	ldr	r5, [pc, #28]	; (8010f58 <_kill_r+0x20>)
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4608      	mov	r0, r1
 8010f42:	4611      	mov	r1, r2
 8010f44:	602b      	str	r3, [r5, #0]
 8010f46:	f7ef fcc5 	bl	80008d4 <_kill>
 8010f4a:	1c43      	adds	r3, r0, #1
 8010f4c:	d102      	bne.n	8010f54 <_kill_r+0x1c>
 8010f4e:	682b      	ldr	r3, [r5, #0]
 8010f50:	b103      	cbz	r3, 8010f54 <_kill_r+0x1c>
 8010f52:	6023      	str	r3, [r4, #0]
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	20006930 	.word	0x20006930

08010f5c <_getpid_r>:
 8010f5c:	f7ef bcb2 	b.w	80008c4 <_getpid>

08010f60 <_init>:
 8010f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f62:	bf00      	nop
 8010f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f66:	bc08      	pop	{r3}
 8010f68:	469e      	mov	lr, r3
 8010f6a:	4770      	bx	lr

08010f6c <_fini>:
 8010f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6e:	bf00      	nop
 8010f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f72:	bc08      	pop	{r3}
 8010f74:	469e      	mov	lr, r3
 8010f76:	4770      	bx	lr
